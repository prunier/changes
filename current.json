{
    "LE1": {
        "PF-LE1": {
            "PF-LE1/LE1_NISP_Validation": {
                "start date": "2023-06-09 09:00",
                "end date": "2023-08-10 09:00",
                "start tag": "-",
                "end tag": "-",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-LE1/szip": {
                "start date": "2023-06-09 09:00",
                "end date": "2023-08-10 09:00",
                "start tag": "> 1.0.2",
                "end tag": "> 1.0.2",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": [
                    {
                        "name": "1.0.2",
                        "created_at": "2022-02-04T16:13:43.000+01:00",
                        "author_name": "Frederic Leroux"
                    }
                ]
            },
            "PF-LE1/LE1_NISP": {
                "start date": "2023-06-09 09:00",
                "end date": "2023-08-10 09:00",
                "start tag": "> 4.0.1",
                "end tag": "> 4.1.0",
                "count_files_modified": "271",
                "modifications_by_file": {
                    "LE1_NISP_Adapters/src/lib/ConfigurationParserMdb.cpp": [
                        [
                            "@@ -110,36 +110,29 @@ namespace LE1_NISP_Adapters {\n \n       if (res && !tokens.empty()) {\n         auto detId = tokens.at(0);\n-        LE1_NISP_Entities::Wcs wcs = detConfigManager->getWcs(detId);\n \n         if (tokens.size() > 1)\n           detConfigManager->setScaId(detId, tokens.at(1));\n \n-        if (tokens.size() > 6)\n-          wcs.cd(0, 0) = std::stod(tokens.at(6));\n+        if (tokens.size() > 9) {\n+          Eigen::Matrix2d cd;\n+          cd(0, 0) = std::stod(tokens.at(6));\n+          cd(0, 1) = std::stod(tokens.at(7));\n+          cd(1, 0) = std::stod(tokens.at(8));\n+          cd(1, 1) = std::stod(tokens.at(9));\n+          detConfigManager->setWcsCd(detId, cd);\n+        }\n+\n+        if (tokens.size() > 11) {\n+          Euclid::Image::Point2D crPix(std::stod(tokens.at(10)), std::stod(tokens.at(11)));\n+          detConfigManager->setWcsCrPix(detId, crPix);\n+        }\n+\n+        if (tokens.size() > 13) {\n+          Euclid::Image::Point2D crVal(std::stod(tokens.at(12)), std::stod(tokens.at(13)));\n+          detConfigManager->setWcsCrVal(detId, crVal);\n+        }\n \n-        if (tokens.size() > 7)\n-          wcs.cd(0, 1) = std::stod(tokens.at(7));\n-\n-        if (tokens.size() > 8)\n-          wcs.cd(1, 0) = std::stod(tokens.at(8));\n-\n-        if (tokens.size() > 9)\n-          wcs.cd(1, 1) = std::stod(tokens.at(9));\n-\n-        if (tokens.size() > 10)\n-          wcs.crPix(0) = std::stod(tokens.at(10));\n-\n-        if (tokens.size() > 11)\n-          wcs.crPix(1) = std::stod(tokens.at(11));\n-\n-        if (tokens.size() > 12)\n-          wcs.crVal(0) = std::stod(tokens.at(12));\n-\n-        if (tokens.size() > 13)\n-          wcs.crVal(1) = std::stod(tokens.at(13));\n-\n-        detConfigManager->setWcs(detId, wcs);\n       }\n     }\n   }\n",
                            "Merge branch 'release-4.1' into develop",
                            "Alberto Alessio",
                            "2023-06-26T15:52:10.000+00:00",
                            "be9fb08c0703bbb2c356351493375a6b39cf0fc5"
                        ],
                        [
                            "@@ -21,12 +21,13 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/ConfigurationParserMdb.h\"\n-#include \"LE1_NISP_ProcessScience/Utils.h\"\n+#include \"LE1_NISP_Adapters/ConfigurationParserMdb.h\"\n+#include \"LE1_NISP_Entities/Utils.h\"\n #include \"ElementsKernel/Logging.h\"\n \n #include <boost/spirit/include/qi.hpp>\n \n+using namespace LE1_NISP_Entities;\n namespace qi = boost::spirit::qi;\n \n namespace {\n@@ -40,13 +41,13 @@ namespace {\n   Elements::Logging logger = Elements::Logging::getLogger(\"LE1_NISP_Processor\");\n }\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Adapters {\n   \n   ConfigurationParserMdb::ConfigurationParserMdb(){}\n \n   ConfigurationParserMdb::~ConfigurationParserMdb(){}\n \n-  void ConfigurationParserMdb::parseDetectorConfig(std::shared_ptr<DetectorConfigManager> detConfigManager, const std::string &mdbFile){\n+  void ConfigurationParserMdb::parseDetectorConfig(std::shared_ptr<LE1_NISP_Entities::DetectorConfigManager> detConfigManager, const std::string &mdbFile){\n     validateDetectorConfigManager(detConfigManager);\n     checkFileExists(mdbFile);\n     m_mdbFile = boost::filesystem::path(mdbFile);\n@@ -60,7 +61,7 @@ namespace LE1_NISP_ProcessScience {\n     logger.debug() << \"MDB detector configuration parsed successfully\";\n   }\n \n-  void ConfigurationParserMdb::validateDetectorConfigManager(const std::shared_ptr<DetectorConfigManager> detConfigManager) const {\n+  void ConfigurationParserMdb::validateDetectorConfigManager(const std::shared_ptr<LE1_NISP_Entities::DetectorConfigManager> detConfigManager) const {\n     validatePointer<NullDetectorConfigManagerException>(detConfigManager,\n                                                         \"ConfigurationParserMdb::validateDetectorConfigManager: \"\n                                                         \"Null DetectorConfigManager\");\n@@ -73,7 +74,7 @@ namespace LE1_NISP_ProcessScience {\n \n   }\n \n-  void ConfigurationParserMdb::updateCommonConfig(std::shared_ptr<DetectorConfigManager> detConfigManager, const Mdb &mdb) {\n+  void ConfigurationParserMdb::updateCommonConfig(std::shared_ptr<LE1_NISP_Entities::DetectorConfigManager> detConfigManager, const Mdb &mdb) {\n     auto mdbFrameLineSize = mdb.getDoubleTable(mdbFrameLineSizePath).at(0).at(0);\n     detConfigManager->setFrameLineSize(mdbFrameLineSize);\n \n@@ -83,7 +84,7 @@ namespace LE1_NISP_ProcessScience {\n     detConfigManager->setLineTime(mdbFrameTime/mdbFrameLineSize);\n }\n \n-  void ConfigurationParserMdb::updateDetectorConfig(std::shared_ptr<DetectorConfigManager> detConfigManager, const Mdb &mdb) {\n+  void ConfigurationParserMdb::updateDetectorConfig(std::shared_ptr<LE1_NISP_Entities::DetectorConfigManager> detConfigManager, const Mdb &mdb) {\n     auto detectorSlotsConfigFile = std::string(m_mdbFile.branch_path().c_str()) + \"/\" \n                                    + mdb.getFiles(mdbDetectorSlotsPath).front();\n \n@@ -109,7 +110,7 @@ namespace LE1_NISP_ProcessScience {\n \n       if (res && !tokens.empty()) {\n         auto detId = tokens.at(0);\n-        Wcs wcs = detConfigManager->getWcs(detId);\n+        LE1_NISP_Entities::Wcs wcs = detConfigManager->getWcs(detId);\n \n         if (tokens.size() > 1)\n           detConfigManager->setScaId(detId, tokens.at(1));\n@@ -143,7 +144,7 @@ namespace LE1_NISP_ProcessScience {\n     }\n   }\n \n-  void ConfigurationParserMdb::parseTelemetryConfig(std::shared_ptr<TelemetryConfiguration> telemetryConfig, const std::string &mdbFile) {\n+  void ConfigurationParserMdb::parseTelemetryConfig(std::shared_ptr<LE1_NISP_Entities::TelemetryConfiguration> telemetryConfig, const std::string &mdbFile) {\n     validateTelemetryConfiguration(telemetryConfig);\n     checkFileExists(mdbFile);\n \n@@ -163,14 +164,14 @@ namespace LE1_NISP_ProcessScience {\n     logger.debug() << \"MDB telemetry configuration parsed successfully\";\n   }\n \n-  void ConfigurationParserMdb::validateTelemetryConfiguration(const std::shared_ptr<TelemetryConfiguration> telemetryConfig) const {\n+  void ConfigurationParserMdb::validateTelemetryConfiguration(const std::shared_ptr<LE1_NISP_Entities::TelemetryConfiguration> telemetryConfig) const {\n     validatePointer<NullTelemetryConfigurationException>(telemetryConfig,\n                                                         \"ConfigurationParserMdb::validateTelemetryConfiguration: \"\n                                                         \"Null TelemetryConfiguration\");\n   }\n \n \n-  void ConfigurationParserMdb::parseExposureConfiguration(std::shared_ptr<ExposureConfigManager> expConfigManager, const std::string &mdbFile) {\n+  void ConfigurationParserMdb::parseExposureConfiguration(std::shared_ptr<LE1_NISP_Entities::ExposureConfigManager> expConfigManager, const std::string &mdbFile) {\n     validateExposureConfiguration(expConfigManager);\n     checkFileExists(mdbFile);\n \n@@ -189,13 +190,13 @@ namespace LE1_NISP_ProcessScience {\n     logger.debug() << \"MDB exposure configuration parsed successfully\";\n   }\n \n-  void ConfigurationParserMdb::validateExposureConfiguration(const std::shared_ptr<ExposureConfigManager> expConfigManager) const {\n+  void ConfigurationParserMdb::validateExposureConfiguration(const std::shared_ptr<LE1_NISP_Entities::ExposureConfigManager> expConfigManager) const {\n     validatePointer<NullExposureConfigurationException>(expConfigManager,\n                                                         \"ConfigurationParserMdb::validateExposureConfiguration: \"\n                                                         \"Null ExposureConfiguration\");\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Adapters\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/DetectorConfigManager.h": [
                        [
                            "@@ -204,11 +204,24 @@ public:\n    */\n   virtual Wcs getWcs(const DetectorConfigKey &detConfigKey) const = 0;\n   /**\n-   * @brief The detector WCS getter\n+   * @brief The detector WCS setter\n    * @param detId The detector ID string\n-   * @return The WCS object\n+   * @param value The WCS CD matrix\n+   */\n+  virtual void setWcsCd(const std::string &detId, Eigen::Matrix2d &value) = 0;\n+  /**\n+   * @brief The detector WCS setter\n+   * @param detId The detector ID string\n+   * @param value The WCS CRPIX\n+   */\n+  virtual void setWcsCrPix(const std::string &detId, Euclid::Image::Point2D &value) = 0;\n+  /**\n+   * @brief The detector WCS setter\n+   * @param detId The detector ID string\n+   * @param value The WCS CRVAL\n    */\n-  virtual Wcs getWcs(const std::string &detId) const = 0;\n+  virtual void setWcsCrVal(const std::string &detId, Euclid::Image::Point2D &value) = 0;\n+\n \n };  // End of DetectorConfigManager class\n \n",
                            "Merge branch 'release-4.1' into develop",
                            "Alberto Alessio",
                            "2023-06-26T15:52:10.000+00:00",
                            "be9fb08c0703bbb2c356351493375a6b39cf0fc5"
                        ],
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/DetectorConfigManager.h\n+ * @file LE1_NISP_Entities/DetectorConfigManager.h\n  * @date 12/18/20\n  * @author user\n  *\n@@ -21,16 +21,21 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORCONFIGMANAGER_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORCONFIGMANAGER_H\n+#ifndef _LE1_NISP_ENTITIES_DETECTORCONFIGMANAGER_H\n+#define _LE1_NISP_ENTITIES_DETECTORCONFIGMANAGER_H\n \n #include <memory>\n #include <string>\n-#include \"LE1_NISP_ProcessScience/DetectorId.h\"\n-#include \"LE1_NISP_ProcessScience/Wcs.h\"\n+#include \"LE1_NISP_Entities/DetectorId.h\"\n+#include \"LE1_NISP_Entities/Wcs.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n+/**\n+ * @class DetectorConfiguration\n+ * @brief Stores the configuration parameters of a detector\n+ *\n+ */\n class DetectorConfiguration {\n public:\n   DetectorId detectorId;\n@@ -38,18 +43,37 @@ public:\n   std::string scaId;\n   Wcs wcs;\n \n+  /**\n+   * @brief Constructor\n+   * @param pDetId The ID of the detector\n+   * @param pSceIdx 8 bit unsigned integer representing the SCE INDEX\n+   * @param pScaId The SCA ID string representing the SCA full name given by NASA\n+   * @param pWcs The WCS parameters\n+   */\n   DetectorConfiguration(const DetectorId &pDetId, uint8_t pSceIdx, const std::string &pScaId, const Wcs &pWcs = Wcs()) :\n       detectorId(pDetId), sceIndex(pSceIdx), scaId(pScaId), wcs(pWcs) {}\n+\n+  /**\n+   * @brief Default constructor\n+   * @see DetectorConfiguration(const DetectorId &pDetId, uint8_t pSceIdx, const std::string &pScaId, const Wcs &pWcs = Wcs())\n+   */\n   DetectorConfiguration() : DetectorConfiguration(DetectorId(), 0, \"\", Wcs()) {}\n+\n+  /**\n+   * @brief Destructor\n+   */\n   ~DetectorConfiguration() = default;\n };\n \n-// DPU ID and SCE ID\n+/**\n+ * @brief The key used to store and identify the detector configurations.\n+ * Pair of 8-bit integers representing the DPU ID and the SCE ID\n+ */\n typedef std::pair<uint8_t, uint8_t> DetectorConfigKey;\n \n /**\n  * @class DetectorConfigManager\n- * @brief\n+ * @brief Interface to manage the configurations of the detectors as DetectorConfiguration entities.\n  *\n  */\n class DetectorConfigManager {\n@@ -61,38 +85,133 @@ public:\n    */\n   virtual ~DetectorConfigManager() = default;\n \n+  /**\n+   * @brief Frame line size getter\n+   * @return The size of a line of the frame\n+   */\n   virtual unsigned short getFrameLineSize() const = 0;\n+  /**\n+   * @brief Frame line size setter\n+   * @param size The size of a line of the frame\n+   */\n   virtual void setFrameLineSize(const unsigned short size) = 0;\n \n+  /**\n+   * @brief Detector line time getter\n+   * @return The time that is required to acquire a line of frame\n+   */\n   virtual double getLineTime() const = 0;\n+  /**\n+   * @brief Detector line time setter\n+   * @param lineTime The time to acquire a line of frame\n+   */\n   virtual void setLineTime(const double lineTime) = 0;\n \n+  /**\n+   * @brief Detector frame time getter\n+   * @return The time to acquire a frame\n+   */\n   virtual double getFrameTime() const = 0;\n+  /**\n+   * @brief Detector frame time setter\n+   * @param frameTime The time to acquire a frame\n+   */\n   virtual void setFrameTime(const double frameTime) = 0;\n \n+  /**\n+   * @brief Detector identifier getter\n+   * @param detConfigKey The key to access the detector configuration\n+   * @return The DetectorId\n+   */\n   virtual DetectorId getDetectorId(const DetectorConfigKey &detConfigKey) const = 0;\n+  /**\n+   * @brief The SCA ID getter\n+   * @param detConfigKey The key to access the detector configuration\n+   * @return The SCA ID string representing the SCA full name given by NASA\n+   */\n   virtual std::string getScaId(const DetectorConfigKey &detConfigKey) const = 0;\n+  /**\n+   * @brief The SCE INDEX getter\n+   * @param detConfigKey The key to access the detector configuration\n+   * @return The 8-bit unsigned integer representing the SCE INDEX\n+   */\n   virtual unsigned short getSceIndex(const DetectorConfigKey &detConfigKey) const = 0;\n \n+  /**\n+   * @brief Detector identifier setter\n+   * @param detConfigKey The key for the detector configuration\n+   * @param detId The DetectorId object\n+   */\n   virtual void setDetectorId(const DetectorConfigKey &detConfigKey, const DetectorId &detId) = 0;\n+  /**\n+   * @brief SCA ID setter\n+   * @param detConfigKey The key for the detector configuration\n+   * @param scaId The SCA ID string\n+   */\n   virtual void setScaId(const DetectorConfigKey &detConfigKey, const std::string &scaId) = 0;\n+  /**\n+   * @brief SCA ID setter\n+   * @param detId The detector ID string\n+   * @param scaId The SCA ID string\n+   */\n   virtual void setScaId(const std::string &detId, const std::string &scaId) = 0;\n+  /**\n+   * @brief SCE INDEX setter\n+   * @param detConfigKey The key for the detector configuration\n+   * @param sceIndex The SCE INDEX\n+   */\n   virtual void setSceIndex(const DetectorConfigKey &detConfigKey, const unsigned short sceIndex) = 0;\n \n+  /**\n+   * @brief Add a DetectorConfiguration\n+   * @param detConfig The detector configuration to be added\n+   */\n   virtual void addConfiguration(const DetectorConfiguration &detConfig) = 0;\n \n+  /**\n+   * @brief Count the number of available detector configurations\n+   * @return The number of available detector configurations\n+   */\n   virtual size_t countConfigurations() const = 0;\n \n+  /**\n+   * @brief OBT Tolerance setter\n+   * @param detectorObtTolerance The tolerance for the OBT to group detectors in the same exposure\n+   */\n   virtual void setDetectorObtTolerance(double detectorObtTolerance) = 0;\n+  /**\n+   * @brief OBT Tolerance getter\n+   * @return The tolerance for the OBT to group detectors in the same exposure\n+   */\n   virtual double getDetectorObtTolerance() const = 0;\n \n+  /**\n+   * @brief The detector WCS setter\n+   * @param detConfigKey The key for the detector configuration\n+   * @param value The WCS object\n+   */\n   virtual void setWcs(const DetectorConfigKey &detConfigKey, const Wcs &value) = 0;\n+  /**\n+   * @brief The detector WCS setter\n+   * @param detId The detector ID string\n+   * @param value The WCS object\n+   */\n   virtual void setWcs(const std::string &detId, const Wcs &value) = 0;\n+  /**\n+   * @brief The detector WCS getter\n+   * @param detConfigKey The key for the detector configuration\n+   * @return The WCS object\n+   */\n   virtual Wcs getWcs(const DetectorConfigKey &detConfigKey) const = 0;\n+  /**\n+   * @brief The detector WCS getter\n+   * @param detId The detector ID string\n+   * @return The WCS object\n+   */\n   virtual Wcs getWcs(const std::string &detId) const = 0;\n \n };  // End of DetectorConfigManager class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/DetectorConfigMapper.h": [
                        [
                            "@@ -74,7 +74,10 @@ public:\n   void setWcs(const DetectorConfigKey &detConfigKey, const Wcs &value) override;\n   void setWcs(const std::string &detId, const Wcs &value) override;\n   Wcs getWcs(const DetectorConfigKey &detConfigKey) const override;\n-  Wcs getWcs(const std::string &detId) const override;\n+\n+  void setWcsCd(const std::string &detId, Eigen::Matrix2d &value) override;\n+  void setWcsCrPix(const std::string &detId, Euclid::Image::Point2D &value) override;\n+  void setWcsCrVal(const std::string &detId, Euclid::Image::Point2D &value) override;\n \n private:\n   double m_detObtTolerance;\n",
                            "Merge branch 'release-4.1' into develop",
                            "Alberto Alessio",
                            "2023-06-26T15:52:10.000+00:00",
                            "be9fb08c0703bbb2c356351493375a6b39cf0fc5"
                        ],
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/DetectorConfigMapper.h\n+ * @file LE1_NISP_Entities/DetectorConfigMapper.h\n  * @date 12/18/20\n  * @author user\n  *\n@@ -21,20 +21,21 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORCONFIGMAPPER_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORCONFIGMAPPER_H\n+#ifndef _LE1_NISP_ENTITIES_DETECTORCONFIGMAPPER_H\n+#define _LE1_NISP_ENTITIES_DETECTORCONFIGMAPPER_H\n \n #include <map>\n \n-#include \"LE1_NISP_ProcessScience//DetectorConfigManager.h\"\n-#include \"LE1_NISP_ProcessScience//Exception.h\"\n+#include \"LE1_NISP_Entities/DetectorConfigManager.h\"\n+#include \"LE1_NISP_Entities/Exception.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class DetectorConfigMapper\n- * @brief\n- *\n+ * @brief Manage the configurations of the detectors.\n+ * Uses a map to store configurations by the DetectorConfigKey.\n+ * @see DetectorConfigManager for the documentation related to each method.\n  */\n class DetectorConfigMapper: public DetectorConfigManager {\n \n@@ -44,28 +45,28 @@ public:\n   /**\n    * @brief Destructor\n    */\n-  virtual ~DetectorConfigMapper();\n+  ~DetectorConfigMapper() override;\n \n-  virtual unsigned short getFrameLineSize() const override;\n-  virtual void setFrameLineSize(const unsigned short size) override;\n+  unsigned short getFrameLineSize() const override;\n+  void setFrameLineSize(const unsigned short size) override;\n \n-  virtual double getLineTime() const;\n-  virtual void setLineTime(const double lineTime);\n+  double getLineTime() const override;\n+  void setLineTime(const double lineTime) override;\n \n-  virtual double getFrameTime() const;\n-  virtual void setFrameTime(const double frameTime);\n+  double getFrameTime() const override;\n+  void setFrameTime(const double frameTime) override;\n \n-  virtual DetectorId getDetectorId(const DetectorConfigKey &detConfigKey) const override;\n-  virtual std::string getScaId(const DetectorConfigKey &detConfigKey) const override;\n-  virtual unsigned short getSceIndex(const DetectorConfigKey &detConfigKey) const override;\n+  DetectorId getDetectorId(const DetectorConfigKey &detConfigKey) const override;\n+  std::string getScaId(const DetectorConfigKey &detConfigKey) const override;\n+  unsigned short getSceIndex(const DetectorConfigKey &detConfigKey) const override;\n \n-  virtual void setDetectorId(const DetectorConfigKey &detConfigKey, const DetectorId &detId) override;\n-  virtual void setScaId(const DetectorConfigKey &detConfigKey, const std::string &scaId) override;\n-  virtual void setScaId(const std::string &detId, const std::string &scaId) override;\n-  virtual void setSceIndex(const DetectorConfigKey &detConfigKey, const unsigned short sceIndex) override;\n+  void setDetectorId(const DetectorConfigKey &detConfigKey, const DetectorId &detId) override;\n+  void setScaId(const DetectorConfigKey &detConfigKey, const std::string &scaId) override;\n+  void setScaId(const std::string &detId, const std::string &scaId) override;\n+  void setSceIndex(const DetectorConfigKey &detConfigKey, const unsigned short sceIndex) override;\n \n-  virtual void addConfiguration(const DetectorConfiguration &detConfig) override;\n-  virtual size_t countConfigurations() const override;\n+  void addConfiguration(const DetectorConfiguration &detConfig) override;\n+  size_t countConfigurations() const override;\n \n   void setDetectorObtTolerance(const double detectorObtTolerance) override;\n   double getDetectorObtTolerance() const override;\n@@ -86,7 +87,7 @@ private:\n \n };  // End of DetectorConfigMapper class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/DetectorConfigMapper.cpp": [
                        [
                            "@@ -145,14 +145,16 @@ namespace LE1_NISP_Entities {\n   }\n \n   void DetectorConfigMapper::setWcs(const std::string &detId, const Wcs &value) {\n-    auto detConfig = std::find_if(m_configurations.begin(), m_configurations.end(), [&detId](const auto &config){\n-      return config.second.detectorId.getScePos() == detId;\n-    });\n-    if(detConfig == m_configurations.end())\n-      throw UnknownDetectorConfiguration(\"DetectorConfigMapper::setWcs: \"\n-                                         \"no detector config found with DET_ID = \" + detId);\n-\n-    detConfig->second.wcs = value;\n+      bool detFound = false;\n+      for (auto it = m_configurations.begin(); it != m_configurations.end(); ++it) {\n+        if (it->second.detectorId.getScePos() == detId) {\n+            detFound = true;\n+            it->second.wcs = value;\n+        }\n+      }\n+      if (!detFound)\n+        throw UnknownDetectorConfiguration(\"DetectorConfigMapper::setWcs: \"\n+                                           \"no detector config found with DET_ID = \" + detId);\n   }\n \n   Wcs DetectorConfigMapper::getWcs(const DetectorConfigKey &detConfigKey) const {\n@@ -160,15 +162,46 @@ namespace LE1_NISP_Entities {\n     return m_configurations.find(detConfigKey)->second.wcs;\n   }\n \n-  Wcs DetectorConfigMapper::getWcs(const std::string &detId) const {\n-    auto detConfig = std::find_if(m_configurations.begin(), m_configurations.end(), [&detId](const auto &config){\n-      return config.second.detectorId.getScePos() == detId;\n-    });\n-    if(detConfig == m_configurations.end())\n-      throw UnknownDetectorConfiguration(\"DetectorConfigMapper::getWcs: \"\n+  void DetectorConfigMapper::setWcsCd(const std::string &detId, Eigen::Matrix2d &value) {\n+    bool detFound = false;\n+    for (auto & configuration : m_configurations) {\n+      if (configuration.second.detectorId.getScePos() == detId) {\n+        detFound = true;\n+        configuration.second.wcs.cd = value;\n+      }\n+    }\n+    if (!detFound)\n+      throw UnknownDetectorConfiguration(\"DetectorConfigMapper::setWcsCd: \"\n+                                         \"no detector config found with DET_ID = \" + detId);\n+\n+  }\n+\n+  void DetectorConfigMapper::setWcsCrPix(const std::string &detId, Euclid::Image::Point2D &value) {\n+    bool detFound = false;\n+    for (auto & configuration : m_configurations) {\n+      if (configuration.second.detectorId.getScePos() == detId) {\n+        detFound = true;\n+        configuration.second.wcs.crPix = value;\n+      }\n+    }\n+    if (!detFound)\n+      throw UnknownDetectorConfiguration(\"DetectorConfigMapper::setWcsCrPix: \"\n+                                         \"no detector config found with DET_ID = \" + detId);\n+\n+  }\n+\n+  void DetectorConfigMapper::setWcsCrVal(const std::string &detId, Euclid::Image::Point2D &value) {\n+    bool detFound = false;\n+    for (auto & configuration : m_configurations) {\n+      if (configuration.second.detectorId.getScePos() == detId) {\n+        detFound = true;\n+        configuration.second.wcs.crVal = value;\n+      }\n+    }\n+    if (!detFound)\n+      throw UnknownDetectorConfiguration(\"DetectorConfigMapper::setWcsCrVal: \"\n                                          \"no detector config found with DET_ID = \" + detId);\n \n-    return detConfig->second.wcs;\n   }\n \n }  // namespace LE1_NISP_Entities\n",
                            "Merge branch 'release-4.1' into develop",
                            "Alberto Alessio",
                            "2023-06-26T15:52:10.000+00:00",
                            "be9fb08c0703bbb2c356351493375a6b39cf0fc5"
                        ],
                        [
                            "@@ -162,15 +162,46 @@ namespace LE1_NISP_Entities {\n     return m_configurations.find(detConfigKey)->second.wcs;\n   }\n \n-  Wcs DetectorConfigMapper::getWcs(const std::string &detId) const {\n-    auto detConfig = std::find_if(m_configurations.begin(), m_configurations.end(), [&detId](const auto &config){\n-      return config.second.detectorId.getScePos() == detId;\n-    });\n-    if(detConfig == m_configurations.end())\n-      throw UnknownDetectorConfiguration(\"DetectorConfigMapper::getWcs: \"\n+  void DetectorConfigMapper::setWcsCd(const std::string &detId, Eigen::Matrix2d &value) {\n+    bool detFound = false;\n+    for (auto & configuration : m_configurations) {\n+      if (configuration.second.detectorId.getScePos() == detId) {\n+        detFound = true;\n+        configuration.second.wcs.cd = value;\n+      }\n+    }\n+    if (!detFound)\n+      throw UnknownDetectorConfiguration(\"DetectorConfigMapper::setWcsCd: \"\n+                                         \"no detector config found with DET_ID = \" + detId);\n+\n+  }\n+\n+  void DetectorConfigMapper::setWcsCrPix(const std::string &detId, Euclid::Image::Point2D &value) {\n+    bool detFound = false;\n+    for (auto & configuration : m_configurations) {\n+      if (configuration.second.detectorId.getScePos() == detId) {\n+        detFound = true;\n+        configuration.second.wcs.crPix = value;\n+      }\n+    }\n+    if (!detFound)\n+      throw UnknownDetectorConfiguration(\"DetectorConfigMapper::setWcsCrPix: \"\n+                                         \"no detector config found with DET_ID = \" + detId);\n+\n+  }\n+\n+  void DetectorConfigMapper::setWcsCrVal(const std::string &detId, Euclid::Image::Point2D &value) {\n+    bool detFound = false;\n+    for (auto & configuration : m_configurations) {\n+      if (configuration.second.detectorId.getScePos() == detId) {\n+        detFound = true;\n+        configuration.second.wcs.crVal = value;\n+      }\n+    }\n+    if (!detFound)\n+      throw UnknownDetectorConfiguration(\"DetectorConfigMapper::setWcsCrVal: \"\n                                          \"no detector config found with DET_ID = \" + detId);\n \n-    return detConfig->second.wcs;\n   }\n \n }  // namespace LE1_NISP_Entities\n",
                            "[upd] Removes getWcs from SCE_POS and adds setters for WCS params",
                            "Alberto Alessio",
                            "2023-06-26T12:19:32.000+00:00",
                            "d7df0956184d842887ec24e5c83190ce5e25c2d0"
                        ],
                        [
                            "@@ -145,14 +145,16 @@ namespace LE1_NISP_Entities {\n   }\n \n   void DetectorConfigMapper::setWcs(const std::string &detId, const Wcs &value) {\n-    auto detConfig = std::find_if(m_configurations.begin(), m_configurations.end(), [&detId](const auto &config){\n-      return config.second.detectorId.getScePos() == detId;\n-    });\n-    if(detConfig == m_configurations.end())\n-      throw UnknownDetectorConfiguration(\"DetectorConfigMapper::setWcs: \"\n-                                         \"no detector config found with DET_ID = \" + detId);\n-\n-    detConfig->second.wcs = value;\n+      bool detFound = false;\n+      for (auto it = m_configurations.begin(); it != m_configurations.end(); ++it) {\n+        if (it->second.detectorId.getScePos() == detId) {\n+            detFound = true;\n+            it->second.wcs = value;\n+        }\n+      }\n+      if (!detFound)\n+        throw UnknownDetectorConfiguration(\"DetectorConfigMapper::setWcs: \"\n+                                           \"no detector config found with DET_ID = \" + detId);\n   }\n \n   Wcs DetectorConfigMapper::getWcs(const DetectorConfigKey &detConfigKey) const {\n",
                            "[fix] Updates the WCS of every detector with given ID",
                            "Alberto Alessio",
                            "2023-06-26T10:09:23.000+00:00",
                            "1096408992d739d6c2221447bb8c851ad6e34b45"
                        ],
                        [
                            "@@ -21,10 +21,10 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/DetectorConfigMapper.h\"\n+#include \"LE1_NISP_Entities/DetectorConfigMapper.h\"\n #include <algorithm>\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n   DetectorConfigMapper::DetectorConfigMapper()\n   : m_detObtTolerance(0.0),\n@@ -171,7 +171,7 @@ namespace LE1_NISP_ProcessScience {\n     return detConfig->second.wcs;\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/include/DetectorConfigManagerMock.h": [
                        [
                            "@@ -105,11 +105,21 @@ public:\n     (void) detConfigKey;\n     return LE1_NISP_Entities::Wcs();\n   }\n-  LE1_NISP_Entities::Wcs getWcs(const std::string &detId) const override {\n+\n+  void setWcsCd(const std::string &detId, Eigen::Matrix2d &value) override {\n     (void) detId;\n-    return LE1_NISP_Entities::Wcs();\n+    (void) value;\n   }\n \n+  void setWcsCrPix(const std::string &detId, Euclid::Image::Point2D &value) override {\n+    (void) detId;\n+    (void) value;\n+  }\n+\n+  void setWcsCrVal(const std::string &detId, Euclid::Image::Point2D &value) override {\n+    (void) detId;\n+    (void) value;\n+  }\n };\n \n class ConfigManagerCustomValues: public DetConfigManagerDummy{\n@@ -234,9 +244,20 @@ public:\n     (void) detConfigKey;\n     return wcs;\n   }\n-  LE1_NISP_Entities::Wcs getWcs(const std::string &detId) const override {\n+\n+  void setWcsCd(const std::string &detId, Eigen::Matrix2d &value) override {\n     (void) detId;\n-    return wcs;\n+    (void) value;\n+  }\n+\n+  void setWcsCrPix(const std::string &detId, Euclid::Image::Point2D &value) override {\n+    (void) detId;\n+    (void) value;\n+  }\n+\n+  void setWcsCrVal(const std::string &detId, Euclid::Image::Point2D &value) override {\n+    (void) detId;\n+    (void) value;\n   }\n \n private:\n",
                            "Merge branch 'release-4.1' into develop",
                            "Alberto Alessio",
                            "2023-06-26T15:52:10.000+00:00",
                            "be9fb08c0703bbb2c356351493375a6b39cf0fc5"
                        ],
                        [
                            "@@ -1,6 +1,6 @@\n \n  /**\n- * @file LE1_NISP_ProcessScience/tests/include/DetectorConfigManagerMock.h\n+ * @file LE1_NISP_Entities/tests/include/DetectorConfigManagerMock.h\n  * @date 11/24/20\n  * @author user\n  *\n@@ -22,66 +22,66 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORCONFIGMANAGERMOCK_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORCONFIGMANAGERMOCK_H\n+#ifndef _LE1_NISP_ENTITIES_DETECTORCONFIGMANAGERMOCK_H\n+#define _LE1_NISP_ENTITIES_DETECTORCONFIGMANAGERMOCK_H\n \n-#include \"LE1_NISP_ProcessScience//DetectorConfigManager.h\"\n+#include \"LE1_NISP_Entities/DetectorConfigManager.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n-class DetConfigManagerDummy: public DetectorConfigManager{\n+class DetConfigManagerDummy: public LE1_NISP_Entities::DetectorConfigManager{\n public:\n     DetConfigManagerDummy() = default;\n-    virtual ~DetConfigManagerDummy() = default;\n+    ~DetConfigManagerDummy() override = default;\n \n-    inline virtual unsigned short getFrameLineSize() const override{\n+    inline unsigned short getFrameLineSize() const override{\n         return 0;\n     }\n-    inline virtual void setFrameLineSize(const unsigned short size) override {\n+    inline void setFrameLineSize(const unsigned short size) override {\n         (void) size;\n     }\n \n-    inline virtual double getLineTime() const override{ return 0; }\n-    inline virtual void setLineTime(const double lineTime)override{ (void) lineTime; }\n+    inline double getLineTime() const override{ return 0; }\n+    inline void setLineTime(const double lineTime)override{ (void) lineTime; }\n \n-    inline virtual double getFrameTime() const override{ return 0; }\n-    inline virtual void setFrameTime(const double frameTime) override { (void) frameTime; }\n+    inline double getFrameTime() const override{ return 0; }\n+    inline void setFrameTime(const double frameTime) override { (void) frameTime; }\n \n-    inline virtual DetectorId getDetectorId(const DetectorConfigKey &detConfigKey) const override{\n+    inline LE1_NISP_Entities::DetectorId getDetectorId(const LE1_NISP_Entities::DetectorConfigKey &detConfigKey) const override{\n         (void) detConfigKey;\n-        return DetectorId();\n+        return LE1_NISP_Entities::DetectorId();\n     }\n-    inline virtual std::string getScaId(const DetectorConfigKey &detConfigKey) const override{\n+    inline std::string getScaId(const LE1_NISP_Entities::DetectorConfigKey &detConfigKey) const override{\n         (void) detConfigKey;\n         return \"\";\n     }\n-    inline virtual unsigned short getSceIndex(const DetectorConfigKey &detConfigKey) const override{\n+    inline unsigned short getSceIndex(const LE1_NISP_Entities::DetectorConfigKey &detConfigKey) const override{\n         (void) detConfigKey;\n         return 0;\n     }\n \n-    virtual void addConfiguration(const DetectorConfiguration &detConfig) override{\n+    void addConfiguration(const LE1_NISP_Entities::DetectorConfiguration &detConfig) override{\n         (void) detConfig;\n         return;\n     }\n-    \n-    virtual size_t countConfigurations() const override{\n+\n+    size_t countConfigurations() const override{\n         return 0;\n     }\n \n-    inline virtual void setDetectorId(const DetectorConfigKey &detConfigKey, const DetectorId &detId) override {\n+    inline void setDetectorId(const LE1_NISP_Entities::DetectorConfigKey &detConfigKey, const LE1_NISP_Entities::DetectorId &detId) override {\n         (void) detConfigKey;\n         (void) detId;\n     }\n-    inline virtual void setScaId(const DetectorConfigKey &detConfigKey, const std::string &scaId) override {\n+    inline void setScaId(const LE1_NISP_Entities::DetectorConfigKey &detConfigKey, const std::string &scaId) override {\n         (void) detConfigKey;\n         (void) scaId;\n     }\n-    inline virtual void setScaId(const std::string &detId, const std::string &scaId) override {\n+    inline void setScaId(const std::string &detId, const std::string &scaId) override {\n         (void) detId;\n         (void) scaId;\n     }\n-    inline virtual void setSceIndex(const DetectorConfigKey &detConfigKey, const unsigned short sceIndex) override {\n+    inline void setSceIndex(const LE1_NISP_Entities::DetectorConfigKey &detConfigKey, const unsigned short sceIndex) override {\n         (void) detConfigKey;\n         (void) sceIndex;\n     }\n@@ -93,41 +93,41 @@ public:\n       return 0;\n     }\n \n-  void setWcs(const DetectorConfigKey &detConfigKey, const Wcs &value) override {\n+  void setWcs(const LE1_NISP_Entities::DetectorConfigKey &detConfigKey, const LE1_NISP_Entities::Wcs &value) override {\n     (void) detConfigKey;\n     (void) value;\n   }\n-  void setWcs(const std::string &detId, const Wcs &value) override {\n+  void setWcs(const std::string &detId, const LE1_NISP_Entities::Wcs &value) override {\n     (void) detId;\n     (void) value;\n   }\n-  Wcs getWcs(const DetectorConfigKey &detConfigKey) const override {\n+  LE1_NISP_Entities::Wcs getWcs(const LE1_NISP_Entities::DetectorConfigKey &detConfigKey) const override {\n     (void) detConfigKey;\n-    return Wcs();\n+    return LE1_NISP_Entities::Wcs();\n   }\n-  Wcs getWcs(const std::string &detId) const override {\n+  LE1_NISP_Entities::Wcs getWcs(const std::string &detId) const override {\n     (void) detId;\n-    return Wcs();\n+    return LE1_NISP_Entities::Wcs();\n   }\n \n };\n \n class ConfigManagerCustomValues: public DetConfigManagerDummy{\n public:\n-    std::map<DetectorConfigKey, Wcs> wcsMap;\n+    std::map<LE1_NISP_Entities::DetectorConfigKey, LE1_NISP_Entities::Wcs> wcsMap;\n \n-  ConfigManagerCustomValues() = default;\n-    virtual ~ConfigManagerCustomValues() = default;\n+    ConfigManagerCustomValues() = default;\n+    ~ConfigManagerCustomValues() override = default;\n \n-    inline virtual DetectorId getDetectorId(const DetectorConfigKey &detConfigKey) const override{\n-        return DetectorId(detConfigKey.first, detConfigKey.second,\n+    inline LE1_NISP_Entities::DetectorId getDetectorId(const LE1_NISP_Entities::DetectorConfigKey &detConfigKey) const override{\n+        return LE1_NISP_Entities::DetectorId(detConfigKey.first, detConfigKey.second,\n                          std::to_string(detConfigKey.first) + std::to_string(detConfigKey.second));\n     }\n-    inline virtual std::string getScaId(const DetectorConfigKey &detConfigKey) const override{\n+    inline std::string getScaId(const LE1_NISP_Entities::DetectorConfigKey &detConfigKey) const override{\n         return std::to_string(detConfigKey.first) + std::to_string(detConfigKey.second);\n     }\n \n-  Wcs getWcs(const DetectorConfigKey &detConfigKey) const override {\n+  LE1_NISP_Entities::Wcs getWcs(const LE1_NISP_Entities::DetectorConfigKey &detConfigKey) const override {\n     return wcsMap.at(detConfigKey);\n   }\n \n@@ -135,13 +135,13 @@ public:\n \n class ConfigManagerStubFrameLineSize: public DetConfigManagerDummy{\n public:\n-    ConfigManagerStubFrameLineSize(const unsigned short frameLineSize): m_frameLineSize(frameLineSize){}\n-    virtual ~ConfigManagerStubFrameLineSize(){}\n+  explicit ConfigManagerStubFrameLineSize(const unsigned short frameLineSize): m_frameLineSize(frameLineSize){}\n+    ~ConfigManagerStubFrameLineSize() override = default;\n \n-    virtual unsigned short getFrameLineSize() const override{\n+    unsigned short getFrameLineSize() const override{\n         return m_frameLineSize;\n     }\n-    virtual void setFrameLineSize(const unsigned short size) override{\n+    void setFrameLineSize(const unsigned short size) override{\n         m_frameLineSize = size;\n     }\n \n@@ -150,67 +150,67 @@ private:\n \n };\n \n-class DetConfigManagerReturnLast: public DetectorConfigManager{\n+class DetConfigManagerReturnLast: public LE1_NISP_Entities::DetectorConfigManager{\n public:\n-    DetConfigManagerReturnLast()\n+    explicit DetConfigManagerReturnLast()\n       : frameLineSize(0),\n         lineTime(0),\n         frameTime(0),\n         sceIndex(0),\n         scaId(\"\"),\n         obtTolerance(0.0){};\n-    virtual ~DetConfigManagerReturnLast() = default;\n+    ~DetConfigManagerReturnLast() override = default;\n \n-    inline virtual unsigned short getFrameLineSize() const override{\n+    inline unsigned short getFrameLineSize() const override{\n         return frameLineSize;\n     }\n-    inline virtual void setFrameLineSize(const unsigned short size) override {\n+    inline void setFrameLineSize(const unsigned short size) override {\n         frameLineSize = size;\n     }\n \n-    inline virtual double getLineTime() const override{ return lineTime; }\n-    inline virtual void setLineTime(const double value) override{ lineTime = value; }\n+    inline double getLineTime() const override{ return lineTime; }\n+    inline void setLineTime(const double value) override{ lineTime = value; }\n \n-    inline virtual double getFrameTime() const override{ return frameTime; }\n-    inline virtual void setFrameTime(const double value) override { frameTime = value; }\n+    inline double getFrameTime() const override{ return frameTime; }\n+    inline void setFrameTime(const double value) override { frameTime = value; }\n \n-    inline virtual DetectorId getDetectorId(const DetectorConfigKey &detConfigKey) const override{\n+    inline LE1_NISP_Entities::DetectorId getDetectorId(const LE1_NISP_Entities::DetectorConfigKey &detConfigKey) const override{\n       (void) detConfigKey;\n       return detectorId;\n     }\n-    inline virtual std::string getScaId(const DetectorConfigKey &detConfigKey) const override{\n+    inline std::string getScaId(const LE1_NISP_Entities::DetectorConfigKey &detConfigKey) const override{\n       (void) detConfigKey;\n       return scaId;\n     }\n-    inline virtual unsigned short getSceIndex(const DetectorConfigKey &detConfigKey) const override{\n+    inline unsigned short getSceIndex(const LE1_NISP_Entities::DetectorConfigKey &detConfigKey) const override{\n       (void) detConfigKey;\n       return sceIndex;\n     }\n \n-    virtual void addConfiguration(const DetectorConfiguration &detConfig) override{\n+    void addConfiguration(const LE1_NISP_Entities::DetectorConfiguration &detConfig) override{\n         detectorId = detConfig.detectorId;\n         scaId = detConfig.scaId;\n         sceIndex = detConfig.sceIndex;\n         wcs = detConfig.wcs;\n     }\n-    \n-    virtual size_t countConfigurations() const override{\n+\n+    size_t countConfigurations() const override{\n         return 1;\n     }\n \n-    inline virtual void setDetectorId(const DetectorConfigKey &detConfigKey, const DetectorId &detId) override {\n+    inline void setDetectorId(const LE1_NISP_Entities::DetectorConfigKey &detConfigKey, const LE1_NISP_Entities::DetectorId &detId) override {\n         (void) detConfigKey;\n         (void) detId;\n     }\n-    inline virtual void setScaId(const DetectorConfigKey &detConfigKey, const std::string &scaId) override {\n+    inline void setScaId(const LE1_NISP_Entities::DetectorConfigKey &detConfigKey, const std::string &scaId) override {\n         (void) detConfigKey;\n         (void) scaId;\n     }\n-    inline virtual void setScaId(const std::string &detId, const std::string &scaId) override {\n+    inline void setScaId(const std::string &detId, const std::string &scaId) override {\n         (void) detId;\n         (void) scaId;\n     }\n-    inline virtual void setSceIndex(const DetectorConfigKey &detConfigKey, const unsigned short sceIndex) override {\n+    inline void setSceIndex(const LE1_NISP_Entities::DetectorConfigKey &detConfigKey, const unsigned short sceIndex) override {\n         (void) detConfigKey;\n         (void) sceIndex;\n     }\n@@ -222,19 +222,19 @@ public:\n       obtTolerance = val;\n     }\n \n-  void setWcs(const DetectorConfigKey &detConfigKey, const Wcs &value) override {\n+  void setWcs(const LE1_NISP_Entities::DetectorConfigKey &detConfigKey, const LE1_NISP_Entities::Wcs &value) override {\n     (void) detConfigKey;\n     (void) value;\n   }\n-  void setWcs(const std::string &detId, const Wcs &value) override {\n+  void setWcs(const std::string &detId, const LE1_NISP_Entities::Wcs &value) override {\n     (void) detId;\n     (void) value;\n   }\n-  Wcs getWcs(const DetectorConfigKey &detConfigKey) const override {\n+  LE1_NISP_Entities::Wcs getWcs(const LE1_NISP_Entities::DetectorConfigKey &detConfigKey) const override {\n     (void) detConfigKey;\n     return wcs;\n   }\n-  Wcs getWcs(const std::string &detId) const override {\n+  LE1_NISP_Entities::Wcs getWcs(const std::string &detId) const override {\n     (void) detId;\n     return wcs;\n   }\n@@ -243,14 +243,14 @@ private:\n     unsigned short frameLineSize;\n     double lineTime;\n     double frameTime;\n-    DetectorId detectorId;\n+    LE1_NISP_Entities::DetectorId detectorId;\n     uint8_t sceIndex;\n     std::string scaId;\n     double obtTolerance;\n-    Wcs wcs;\n+    LE1_NISP_Entities::Wcs wcs;\n \n };\n \n-}// namespace LE1_NISP_ProcessScience\n+}// namespace LE1_NISP_Entities\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/src/DetectorConfigMapper_test.cpp": [
                        [
                            "@@ -293,9 +293,8 @@ BOOST_AUTO_TEST_CASE( GivenDetIdEqualToMultipleConfigurationDetIdShouldUpdateAll\n     DetectorConfigMapper configManager;\n     configManager.addConfiguration(DetectorConfiguration(DetectorId(0, 0, \"detId1\"), 0, \"scaId1\"));\n     configManager.addConfiguration(DetectorConfiguration(DetectorId(1, 0, \"detId2\"), 1, \"scaId2\"));\n-    configManager.addConfiguration(DetectorConfiguration(DetectorId(0, 1, \"detId3\"), 2, \"scaId3\"));\n+    configManager.addConfiguration(DetectorConfiguration(DetectorId(0, 1, \"detId2\"), 2, \"scaId3\"));\n     \n-    configManager.setScaId(\"detId3\", expectedScaId);\n     configManager.setScaId(\"detId2\", expectedScaId);\n \n     BOOST_REQUIRE_EQUAL(configManager.getScaId(DetectorConfigKey(0, 0)), \"scaId1\");\n@@ -303,4 +302,134 @@ BOOST_AUTO_TEST_CASE( GivenDetIdEqualToMultipleConfigurationDetIdShouldUpdateAll\n     BOOST_REQUIRE_EQUAL(configManager.getScaId(DetectorConfigKey(0, 1)), expectedScaId);\n }\n \n+BOOST_AUTO_TEST_CASE( GivenNoConfigurationWithSpecifiedDetIdShouldThrowUnknownDetectorConfigurationWhenUpdatingWcsCd )\n+{\n+  DetectorConfigMapper configManager;\n+  configManager.addConfiguration(DetectorConfiguration(DetectorId(0, 0, \"detId1\"), 0, \"scaId1\"));\n+  configManager.addConfiguration(DetectorConfiguration(DetectorId(1, 0, \"detId2\"), 1, \"scaId2\"));\n+  configManager.addConfiguration(DetectorConfiguration(DetectorId(0, 1, \"detId3\"), 2, \"scaId3\"));\n+\n+  Eigen::Matrix2d cd;\n+\n+  BOOST_REQUIRE_THROW(configManager.setWcsCd(\"detId4\", cd), UnknownDetectorConfiguration);\n+}\n+\n+BOOST_AUTO_TEST_CASE( GivenDetIdEqualToMultipleConfigurationDetIdShouldUpdateWcsCdOfEveryMatches )\n+{\n+    Wcs startingWcs, expectedWcs;\n+    Eigen::Matrix2d expectedCd;\n+    expectedCd.setConstant(123.456);\n+    expectedWcs.cd = expectedCd;\n+\n+    DetectorConfiguration detConfig1(DetectorId(0, 0, \"detId1\"), 0, \"scaId1\", startingWcs);\n+    DetectorConfiguration detConfig2(DetectorId(1, 0, \"detId2\"), 1, \"scaId2\", startingWcs);\n+    DetectorConfiguration detConfig3(DetectorId(0, 1, \"detId2\"), 2, \"scaId3\", startingWcs);\n+\n+    DetectorConfigMapper configManager;\n+    configManager.addConfiguration(detConfig1);\n+    configManager.addConfiguration(detConfig2);\n+    configManager.addConfiguration(detConfig3);\n+\n+    configManager.setWcsCd(\"detId2\", expectedCd);\n+\n+    BOOST_REQUIRE_MESSAGE(configManager.getWcs(DetectorConfigKey(0, 0)) == startingWcs, \"configManager.getWcs(DetectorConfigKey(0, 0)) != startingWcs\");\n+    BOOST_REQUIRE_MESSAGE(configManager.getWcs(DetectorConfigKey(1, 0)) == expectedWcs, \"configManager.getWcs(DetectorConfigKey(1, 0)) != expectedWcs\");\n+    BOOST_REQUIRE_MESSAGE(configManager.getWcs(DetectorConfigKey(0, 1)) == expectedWcs, \"configManager.getWcs(DetectorConfigKey(0, 1)) != expectedWcs\");\n+}\n+\n+BOOST_AUTO_TEST_CASE( GivenNoConfigurationWithSpecifiedDetIdShouldThrowUnknownDetectorConfigurationWhenUpdatingWcsCrPix )\n+{\n+  DetectorConfigMapper configManager;\n+  configManager.addConfiguration(DetectorConfiguration(DetectorId(0, 0, \"detId1\"), 0, \"scaId1\"));\n+  configManager.addConfiguration(DetectorConfiguration(DetectorId(1, 0, \"detId2\"), 1, \"scaId2\"));\n+  configManager.addConfiguration(DetectorConfiguration(DetectorId(0, 1, \"detId3\"), 2, \"scaId3\"));\n+\n+  Euclid::Image::Point2D crPix;\n+\n+  BOOST_REQUIRE_THROW(configManager.setWcsCrPix(\"detId4\", crPix), UnknownDetectorConfiguration);\n+}\n+\n+BOOST_AUTO_TEST_CASE( GivenDetIdEqualToMultipleConfigurationDetIdShouldUpdateWcsCrPixOfEveryMatches )\n+{\n+  Wcs startingWcs, expectedWcs;\n+  Euclid::Image::Point2D expectedCrPix;\n+  expectedCrPix.setConstant(123.456);\n+  expectedWcs.crPix = expectedCrPix;\n+\n+  DetectorConfiguration detConfig1(DetectorId(0, 0, \"detId1\"), 0, \"scaId1\", startingWcs);\n+  DetectorConfiguration detConfig2(DetectorId(1, 0, \"detId2\"), 1, \"scaId2\", startingWcs);\n+  DetectorConfiguration detConfig3(DetectorId(0, 1, \"detId2\"), 2, \"scaId3\", startingWcs);\n+\n+  DetectorConfigMapper configManager;\n+  configManager.addConfiguration(detConfig1);\n+  configManager.addConfiguration(detConfig2);\n+  configManager.addConfiguration(detConfig3);\n+\n+  configManager.setWcsCrPix(\"detId2\", expectedCrPix);\n+\n+  BOOST_REQUIRE_MESSAGE(configManager.getWcs(DetectorConfigKey(0, 0)) == startingWcs, \"configManager.getWcs(DetectorConfigKey(0, 0)) != startingWcs\");\n+  BOOST_REQUIRE_MESSAGE(configManager.getWcs(DetectorConfigKey(1, 0)) == expectedWcs, \"configManager.getWcs(DetectorConfigKey(1, 0)) != expectedWcs\");\n+  BOOST_REQUIRE_MESSAGE(configManager.getWcs(DetectorConfigKey(0, 1)) == expectedWcs, \"configManager.getWcs(DetectorConfigKey(0, 1)) != expectedWcs\");\n+}\n+\n+BOOST_AUTO_TEST_CASE( GivenNoConfigurationWithSpecifiedDetIdShouldThrowUnknownDetectorConfigurationWhenUpdatingWcsCrVal )\n+{\n+  DetectorConfigMapper configManager;\n+  configManager.addConfiguration(DetectorConfiguration(DetectorId(0, 0, \"detId1\"), 0, \"scaId1\"));\n+  configManager.addConfiguration(DetectorConfiguration(DetectorId(1, 0, \"detId2\"), 1, \"scaId2\"));\n+  configManager.addConfiguration(DetectorConfiguration(DetectorId(0, 1, \"detId3\"), 2, \"scaId3\"));\n+\n+  Euclid::Image::Point2D crVal;\n+\n+  BOOST_REQUIRE_THROW(configManager.setWcsCrVal(\"detId4\", crVal), UnknownDetectorConfiguration);\n+}\n+\n+BOOST_AUTO_TEST_CASE( GivenDetIdEqualToMultipleConfigurationDetIdShouldUpdateWcsCrValOfEveryMatches )\n+{\n+  Wcs startingWcs, expectedWcs;\n+  Euclid::Image::Point2D expectedCrVal;\n+  expectedCrVal.setConstant(123.456);\n+  expectedWcs.crVal = expectedCrVal;\n+\n+  DetectorConfiguration detConfig1(DetectorId(0, 0, \"detId1\"), 0, \"scaId1\", startingWcs);\n+  DetectorConfiguration detConfig2(DetectorId(1, 0, \"detId2\"), 1, \"scaId2\", startingWcs);\n+  DetectorConfiguration detConfig3(DetectorId(0, 1, \"detId2\"), 2, \"scaId3\", startingWcs);\n+\n+  DetectorConfigMapper configManager;\n+  configManager.addConfiguration(detConfig1);\n+  configManager.addConfiguration(detConfig2);\n+  configManager.addConfiguration(detConfig3);\n+\n+  configManager.setWcsCrVal(\"detId2\", expectedCrVal);\n+\n+  BOOST_REQUIRE_MESSAGE(configManager.getWcs(DetectorConfigKey(0, 0)) == startingWcs, \"configManager.getWcs(DetectorConfigKey(0, 0)) != startingWcs\");\n+  BOOST_REQUIRE_MESSAGE(configManager.getWcs(DetectorConfigKey(1, 0)) == expectedWcs, \"configManager.getWcs(DetectorConfigKey(1, 0)) != expectedWcs\");\n+  BOOST_REQUIRE_MESSAGE(configManager.getWcs(DetectorConfigKey(0, 1)) == expectedWcs, \"configManager.getWcs(DetectorConfigKey(0, 1)) != expectedWcs\");\n+}\n+\n+BOOST_AUTO_TEST_CASE( GivenDetIdEqualToMultipleConfigurationDetIdShouldUpdateAllWcs )\n+{\n+    Eigen::Matrix2d cd;\n+    cd.setConstant(123.456);\n+    Euclid::Image::Point2D crPix(456.789, 645.987);\n+    Euclid::Image::Point2D crVal(789.123, 987.321);\n+    std::string cType1 = \"cType1\";\n+    std::string cType2 = \"cType2\";\n+    std::string cUnit1 = \"cUnit1\";\n+    std::string cUnit2 = \"cUnit2\";\n+\n+    Wcs expectedWcs(cd, crPix, crVal, cType1, cType2, cUnit1, cUnit2);\n+\n+    DetectorConfigMapper configManager;\n+    configManager.addConfiguration(DetectorConfiguration(DetectorId(0, 0, \"detId1\"), 0, \"scaId1\"));\n+    configManager.addConfiguration(DetectorConfiguration(DetectorId(1, 0, \"detId2\"), 1, \"scaId2\"));\n+    configManager.addConfiguration(DetectorConfiguration(DetectorId(0, 1, \"detId2\"), 2, \"scaId3\"));\n+\n+    configManager.setWcs(\"detId2\", expectedWcs);\n+\n+    BOOST_REQUIRE_MESSAGE(configManager.getWcs(DetectorConfigKey(0, 0)) == Wcs(), \"configManager.getWcs(DetectorConfigKey(0, 0)) != Wcs()\");\n+    BOOST_REQUIRE_MESSAGE(configManager.getWcs(DetectorConfigKey(1, 0)) == expectedWcs, \"configManager.getWcs(DetectorConfigKey(1, 0)) != expectedWcs\");\n+    BOOST_REQUIRE_MESSAGE(configManager.getWcs(DetectorConfigKey(0, 1)) == expectedWcs, \"configManager.getWcs(DetectorConfigKey(0, 1)) != expectedWcs\");\n+}\n+\n BOOST_AUTO_TEST_SUITE_END ()\n",
                            "Merge branch 'release-4.1' into develop",
                            "Alberto Alessio",
                            "2023-06-26T15:52:10.000+00:00",
                            "be9fb08c0703bbb2c356351493375a6b39cf0fc5"
                        ],
                        [
                            "@@ -302,6 +302,111 @@ BOOST_AUTO_TEST_CASE( GivenDetIdEqualToMultipleConfigurationDetIdShouldUpdateAll\n     BOOST_REQUIRE_EQUAL(configManager.getScaId(DetectorConfigKey(0, 1)), expectedScaId);\n }\n \n+BOOST_AUTO_TEST_CASE( GivenNoConfigurationWithSpecifiedDetIdShouldThrowUnknownDetectorConfigurationWhenUpdatingWcsCd )\n+{\n+  DetectorConfigMapper configManager;\n+  configManager.addConfiguration(DetectorConfiguration(DetectorId(0, 0, \"detId1\"), 0, \"scaId1\"));\n+  configManager.addConfiguration(DetectorConfiguration(DetectorId(1, 0, \"detId2\"), 1, \"scaId2\"));\n+  configManager.addConfiguration(DetectorConfiguration(DetectorId(0, 1, \"detId3\"), 2, \"scaId3\"));\n+\n+  Eigen::Matrix2d cd;\n+\n+  BOOST_REQUIRE_THROW(configManager.setWcsCd(\"detId4\", cd), UnknownDetectorConfiguration);\n+}\n+\n+BOOST_AUTO_TEST_CASE( GivenDetIdEqualToMultipleConfigurationDetIdShouldUpdateWcsCdOfEveryMatches )\n+{\n+    Wcs startingWcs, expectedWcs;\n+    Eigen::Matrix2d expectedCd;\n+    expectedCd.setConstant(123.456);\n+    expectedWcs.cd = expectedCd;\n+\n+    DetectorConfiguration detConfig1(DetectorId(0, 0, \"detId1\"), 0, \"scaId1\", startingWcs);\n+    DetectorConfiguration detConfig2(DetectorId(1, 0, \"detId2\"), 1, \"scaId2\", startingWcs);\n+    DetectorConfiguration detConfig3(DetectorId(0, 1, \"detId2\"), 2, \"scaId3\", startingWcs);\n+\n+    DetectorConfigMapper configManager;\n+    configManager.addConfiguration(detConfig1);\n+    configManager.addConfiguration(detConfig2);\n+    configManager.addConfiguration(detConfig3);\n+\n+    configManager.setWcsCd(\"detId2\", expectedCd);\n+\n+    BOOST_REQUIRE_MESSAGE(configManager.getWcs(DetectorConfigKey(0, 0)) == startingWcs, \"configManager.getWcs(DetectorConfigKey(0, 0)) != startingWcs\");\n+    BOOST_REQUIRE_MESSAGE(configManager.getWcs(DetectorConfigKey(1, 0)) == expectedWcs, \"configManager.getWcs(DetectorConfigKey(1, 0)) != expectedWcs\");\n+    BOOST_REQUIRE_MESSAGE(configManager.getWcs(DetectorConfigKey(0, 1)) == expectedWcs, \"configManager.getWcs(DetectorConfigKey(0, 1)) != expectedWcs\");\n+}\n+\n+BOOST_AUTO_TEST_CASE( GivenNoConfigurationWithSpecifiedDetIdShouldThrowUnknownDetectorConfigurationWhenUpdatingWcsCrPix )\n+{\n+  DetectorConfigMapper configManager;\n+  configManager.addConfiguration(DetectorConfiguration(DetectorId(0, 0, \"detId1\"), 0, \"scaId1\"));\n+  configManager.addConfiguration(DetectorConfiguration(DetectorId(1, 0, \"detId2\"), 1, \"scaId2\"));\n+  configManager.addConfiguration(DetectorConfiguration(DetectorId(0, 1, \"detId3\"), 2, \"scaId3\"));\n+\n+  Euclid::Image::Point2D crPix;\n+\n+  BOOST_REQUIRE_THROW(configManager.setWcsCrPix(\"detId4\", crPix), UnknownDetectorConfiguration);\n+}\n+\n+BOOST_AUTO_TEST_CASE( GivenDetIdEqualToMultipleConfigurationDetIdShouldUpdateWcsCrPixOfEveryMatches )\n+{\n+  Wcs startingWcs, expectedWcs;\n+  Euclid::Image::Point2D expectedCrPix;\n+  expectedCrPix.setConstant(123.456);\n+  expectedWcs.crPix = expectedCrPix;\n+\n+  DetectorConfiguration detConfig1(DetectorId(0, 0, \"detId1\"), 0, \"scaId1\", startingWcs);\n+  DetectorConfiguration detConfig2(DetectorId(1, 0, \"detId2\"), 1, \"scaId2\", startingWcs);\n+  DetectorConfiguration detConfig3(DetectorId(0, 1, \"detId2\"), 2, \"scaId3\", startingWcs);\n+\n+  DetectorConfigMapper configManager;\n+  configManager.addConfiguration(detConfig1);\n+  configManager.addConfiguration(detConfig2);\n+  configManager.addConfiguration(detConfig3);\n+\n+  configManager.setWcsCrPix(\"detId2\", expectedCrPix);\n+\n+  BOOST_REQUIRE_MESSAGE(configManager.getWcs(DetectorConfigKey(0, 0)) == startingWcs, \"configManager.getWcs(DetectorConfigKey(0, 0)) != startingWcs\");\n+  BOOST_REQUIRE_MESSAGE(configManager.getWcs(DetectorConfigKey(1, 0)) == expectedWcs, \"configManager.getWcs(DetectorConfigKey(1, 0)) != expectedWcs\");\n+  BOOST_REQUIRE_MESSAGE(configManager.getWcs(DetectorConfigKey(0, 1)) == expectedWcs, \"configManager.getWcs(DetectorConfigKey(0, 1)) != expectedWcs\");\n+}\n+\n+BOOST_AUTO_TEST_CASE( GivenNoConfigurationWithSpecifiedDetIdShouldThrowUnknownDetectorConfigurationWhenUpdatingWcsCrVal )\n+{\n+  DetectorConfigMapper configManager;\n+  configManager.addConfiguration(DetectorConfiguration(DetectorId(0, 0, \"detId1\"), 0, \"scaId1\"));\n+  configManager.addConfiguration(DetectorConfiguration(DetectorId(1, 0, \"detId2\"), 1, \"scaId2\"));\n+  configManager.addConfiguration(DetectorConfiguration(DetectorId(0, 1, \"detId3\"), 2, \"scaId3\"));\n+\n+  Euclid::Image::Point2D crVal;\n+\n+  BOOST_REQUIRE_THROW(configManager.setWcsCrVal(\"detId4\", crVal), UnknownDetectorConfiguration);\n+}\n+\n+BOOST_AUTO_TEST_CASE( GivenDetIdEqualToMultipleConfigurationDetIdShouldUpdateWcsCrValOfEveryMatches )\n+{\n+  Wcs startingWcs, expectedWcs;\n+  Euclid::Image::Point2D expectedCrVal;\n+  expectedCrVal.setConstant(123.456);\n+  expectedWcs.crVal = expectedCrVal;\n+\n+  DetectorConfiguration detConfig1(DetectorId(0, 0, \"detId1\"), 0, \"scaId1\", startingWcs);\n+  DetectorConfiguration detConfig2(DetectorId(1, 0, \"detId2\"), 1, \"scaId2\", startingWcs);\n+  DetectorConfiguration detConfig3(DetectorId(0, 1, \"detId2\"), 2, \"scaId3\", startingWcs);\n+\n+  DetectorConfigMapper configManager;\n+  configManager.addConfiguration(detConfig1);\n+  configManager.addConfiguration(detConfig2);\n+  configManager.addConfiguration(detConfig3);\n+\n+  configManager.setWcsCrVal(\"detId2\", expectedCrVal);\n+\n+  BOOST_REQUIRE_MESSAGE(configManager.getWcs(DetectorConfigKey(0, 0)) == startingWcs, \"configManager.getWcs(DetectorConfigKey(0, 0)) != startingWcs\");\n+  BOOST_REQUIRE_MESSAGE(configManager.getWcs(DetectorConfigKey(1, 0)) == expectedWcs, \"configManager.getWcs(DetectorConfigKey(1, 0)) != expectedWcs\");\n+  BOOST_REQUIRE_MESSAGE(configManager.getWcs(DetectorConfigKey(0, 1)) == expectedWcs, \"configManager.getWcs(DetectorConfigKey(0, 1)) != expectedWcs\");\n+}\n+\n BOOST_AUTO_TEST_CASE( GivenDetIdEqualToMultipleConfigurationDetIdShouldUpdateAllWcs )\n {\n     Eigen::Matrix2d cd;\n",
                            "[upd] Removes getWcs from SCE_POS and adds setters for WCS params",
                            "Alberto Alessio",
                            "2023-06-26T12:19:32.000+00:00",
                            "d7df0956184d842887ec24e5c83190ce5e25c2d0"
                        ],
                        [
                            "@@ -293,9 +293,8 @@ BOOST_AUTO_TEST_CASE( GivenDetIdEqualToMultipleConfigurationDetIdShouldUpdateAll\n     DetectorConfigMapper configManager;\n     configManager.addConfiguration(DetectorConfiguration(DetectorId(0, 0, \"detId1\"), 0, \"scaId1\"));\n     configManager.addConfiguration(DetectorConfiguration(DetectorId(1, 0, \"detId2\"), 1, \"scaId2\"));\n-    configManager.addConfiguration(DetectorConfiguration(DetectorId(0, 1, \"detId3\"), 2, \"scaId3\"));\n+    configManager.addConfiguration(DetectorConfiguration(DetectorId(0, 1, \"detId2\"), 2, \"scaId3\"));\n     \n-    configManager.setScaId(\"detId3\", expectedScaId);\n     configManager.setScaId(\"detId2\", expectedScaId);\n \n     BOOST_REQUIRE_EQUAL(configManager.getScaId(DetectorConfigKey(0, 0)), \"scaId1\");\n@@ -303,4 +302,29 @@ BOOST_AUTO_TEST_CASE( GivenDetIdEqualToMultipleConfigurationDetIdShouldUpdateAll\n     BOOST_REQUIRE_EQUAL(configManager.getScaId(DetectorConfigKey(0, 1)), expectedScaId);\n }\n \n+BOOST_AUTO_TEST_CASE( GivenDetIdEqualToMultipleConfigurationDetIdShouldUpdateAllWcs )\n+{\n+    Eigen::Matrix2d cd;\n+    cd.setConstant(123.456);\n+    Euclid::Image::Point2D crPix(456.789, 645.987);\n+    Euclid::Image::Point2D crVal(789.123, 987.321);\n+    std::string cType1 = \"cType1\";\n+    std::string cType2 = \"cType2\";\n+    std::string cUnit1 = \"cUnit1\";\n+    std::string cUnit2 = \"cUnit2\";\n+\n+    Wcs expectedWcs(cd, crPix, crVal, cType1, cType2, cUnit1, cUnit2);\n+\n+    DetectorConfigMapper configManager;\n+    configManager.addConfiguration(DetectorConfiguration(DetectorId(0, 0, \"detId1\"), 0, \"scaId1\"));\n+    configManager.addConfiguration(DetectorConfiguration(DetectorId(1, 0, \"detId2\"), 1, \"scaId2\"));\n+    configManager.addConfiguration(DetectorConfiguration(DetectorId(0, 1, \"detId2\"), 2, \"scaId3\"));\n+\n+    configManager.setWcs(\"detId2\", expectedWcs);\n+\n+    BOOST_REQUIRE_MESSAGE(configManager.getWcs(DetectorConfigKey(0, 0)) == Wcs(), \"configManager.getWcs(DetectorConfigKey(0, 0)) != Wcs()\");\n+    BOOST_REQUIRE_MESSAGE(configManager.getWcs(DetectorConfigKey(1, 0)) == expectedWcs, \"configManager.getWcs(DetectorConfigKey(1, 0)) != expectedWcs\");\n+    BOOST_REQUIRE_MESSAGE(configManager.getWcs(DetectorConfigKey(0, 1)) == expectedWcs, \"configManager.getWcs(DetectorConfigKey(0, 1)) != expectedWcs\");\n+}\n+\n BOOST_AUTO_TEST_SUITE_END ()\n",
                            "[fix] Updates the WCS of every detector with given ID",
                            "Alberto Alessio",
                            "2023-06-26T10:09:23.000+00:00",
                            "1096408992d739d6c2221447bb8c851ad6e34b45"
                        ],
                        [
                            "@@ -23,9 +23,9 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//DetectorConfigMapper.h\"\n+#include \"LE1_NISP_Entities/DetectorConfigMapper.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Entities;\n \n BOOST_AUTO_TEST_SUITE (DetectorConfigMapper_test)\n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "README.md": [
                        [
                            "@@ -65,12 +65,13 @@ In order to run the LE1_NISP_Processor manually specifying program options you c\n    -v <host-aux-dir>:<container-aux-dir> \\\n    -v <host-logs-dir>:<container-logs-dir> \\\n    le1-nisp \\\n-   --mdb >container-mdb-dir>/<mdb-file> \\\n-   --auxiliary_dir <container-aux-dir> \\\n-   --log-file <container-logs-dir>/<log-file> \\\n-   --dpu_file <container-input-dir>/<dpu_file_1> \\\n-   --dpu_file <container-input-dir>/<dpu_file_2> \\\n-   --outdir <container-output-dir>\n+   LE1_NISP_Processor \\\n+     --mdb >container-mdb-dir>/<mdb-file> \\\n+     --auxiliary_dir <container-aux-dir> \\\n+     --log-file <container-logs-dir>/<log-file> \\\n+     --dpu_file <container-input-dir>/<dpu_file_1> \\\n+     --dpu_file <container-input-dir>/<dpu_file_2> \\\n+     --outdir <container-output-dir>\n ```\n \n Remember to give write permission to the output directory as described in the previous section.\n",
                            "Merge branch 'release-4.1' into develop",
                            "Alberto Alessio",
                            "2023-06-26T15:52:10.000+00:00",
                            "be9fb08c0703bbb2c356351493375a6b39cf0fc5"
                        ],
                        [
                            "@@ -2,10 +2,14 @@\n \n LE1 NISP Processor software\n \n-## How to build the docker image\n+## How to build the Docker image\n \n-The le1-nisp docker image can be created running the *le1-nisp-docker-build.sh* script from the LE1_NISP project directory.\n+Create a personal access token with _read_repository_ scope and export it as an environment variable as follows:\n+```shell\n+export GITLAB_TOKEN='token_name:token_value'\n+```\n \n+After that, the `le1-nisp` Docker image can be created running the *le1-nisp-docker-build.sh* script from the LE1_NISP project root directory.\n ```shell\n ./le1-nisp-docker-build.sh\n ```\n@@ -55,19 +59,18 @@ In order to run the LE1_NISP_Processor manually specifying program options you c\n    --rm \\\n    --privileged \\\n    --user=user \\\n-   -v <host-input>:<container-input> \\\n-   -v <host-output>:<container-output> \\\n+   -v <host-input-dir>:<container-input-dir> \\\n+   -v <host-output-dir>:<container-output-dir> \\\n    -v <host-mdb-dir>:<container-mdb-dir> \\\n    -v <host-aux-dir>:<container-aux-dir> \\\n    -v <host-logs-dir>:<container-logs-dir> \\\n    le1-nisp \\\n-   LE1_NISP_Processor \\\n-      --mdb >container-mdb-dir>/<mdb-file> \\\n-      --auxiliary_dir <container-aux-dir> \\\n-      --log-file <container-logs-dir>/<log-file> \\\n-      --dpu_file <container-input>/<dpu_file_1> \\\n-      --dpu_file <container-input>/<dpu_file_2> \\\n-      --outdir <container-output>\n+   --mdb >container-mdb-dir>/<mdb-file> \\\n+   --auxiliary_dir <container-aux-dir> \\\n+   --log-file <container-logs-dir>/<log-file> \\\n+   --dpu_file <container-input-dir>/<dpu_file_1> \\\n+   --dpu_file <container-input-dir>/<dpu_file_2> \\\n+   --outdir <container-output-dir>\n ```\n \n Remember to give write permission to the output directory as described in the previous section.\n@@ -150,14 +153,15 @@ If the `--mdb` program option is set to a valid MDB XML file the following confi\n - GwaRefPos (SpaceSegment.Instrument.NISP.NISPGWARefPosition)\n - FwaRefPos (SpaceSegment.Instrument.NISP.NISPFWARefPosition)\n \n-In accordance with the MDB generated during the SC8 on 31-05-2021, SCA ID information will be read from a CSV file, whose name will be provided by the SpaceSegment.Instrument.NISP.NISPDetectorSlots parameter. The LE1_NISP Processor expects the file to be placed in the same directory of the MDB one.\n+SCA ID information will be read from a CSV file, whose name will be provided by the SpaceSegment.Instrument.NISP.NISPDetectorSlots parameter. \n+The LE1_NISP Processor expects the file to be placed in the same directory of the MDB one.\n \n ## The LE1 NISP data model\n \n The LE1 NISP data model defines a single LE1 NISP data product, the DpdNispRawFrame. The definition is\n provided in the Euclid Common Data Model, in particular in the \"ST_DataModel\":https://gitlab.euclid-sgs.uk/ST-DM/ST_DataModel\n \n-The current software is in line with the Data Model Release 9.0.1, with the exception of the WCS parameters, which are not foreseen for CHI2 extensions but are required to open the FITS products as a mosaic.\n+The current software is in line with the Data Model Release 9.2.0, exception made for the WCS parameters, which are not foreseen for CHI2 extensions but are required to open the FITS products as a mosaic.\n \n ## Limitations of this version\n \n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -153,14 +153,15 @@ If the `--mdb` program option is set to a valid MDB XML file the following confi\n - GwaRefPos (SpaceSegment.Instrument.NISP.NISPGWARefPosition)\n - FwaRefPos (SpaceSegment.Instrument.NISP.NISPFWARefPosition)\n \n-In accordance with the MDB generated during the SC8 on 31-05-2021, SCA ID information will be read from a CSV file, whose name will be provided by the SpaceSegment.Instrument.NISP.NISPDetectorSlots parameter. The LE1_NISP Processor expects the file to be placed in the same directory of the MDB one.\n+SCA ID information will be read from a CSV file, whose name will be provided by the SpaceSegment.Instrument.NISP.NISPDetectorSlots parameter. \n+The LE1_NISP Processor expects the file to be placed in the same directory of the MDB one.\n \n ## The LE1 NISP data model\n \n The LE1 NISP data model defines a single LE1 NISP data product, the DpdNispRawFrame. The definition is\n provided in the Euclid Common Data Model, in particular in the \"ST_DataModel\":https://gitlab.euclid-sgs.uk/ST-DM/ST_DataModel\n \n-The current software is in line with the Data Model Release 9.0.1, with the exception of the WCS parameters, which are not foreseen for CHI2 extensions but are required to open the FITS products as a mosaic.\n+The current software is in line with the Data Model Release 9.2.0, exception made for the WCS parameters, which are not foreseen for CHI2 extensions but are required to open the FITS products as a mosaic.\n \n ## Limitations of this version\n \n",
                            "[doc] Updates DataModel version",
                            "Alberto Alessio",
                            "2023-06-16T12:33:08.000+00:00",
                            "33ea3b0d4ac30276d0a0a5c0ee7d0ebef80264a5"
                        ],
                        [
                            "@@ -2,10 +2,14 @@\n \n LE1 NISP Processor software\n \n-## How to build the docker image\n+## How to build the Docker image\n \n-The le1-nisp docker image can be created running the *le1-nisp-docker-build.sh* script from the LE1_NISP project directory.\n+Create a personal access token with _read_repository_ scope and export it as an environment variable as follows:\n+```shell\n+export GITLAB_TOKEN='token_name:token_value'\n+```\n \n+After that, the `le1-nisp` Docker image can be created running the *le1-nisp-docker-build.sh* script from the LE1_NISP project root directory.\n ```shell\n ./le1-nisp-docker-build.sh\n ```\n@@ -55,19 +59,18 @@ In order to run the LE1_NISP_Processor manually specifying program options you c\n    --rm \\\n    --privileged \\\n    --user=user \\\n-   -v <host-input>:<container-input> \\\n-   -v <host-output>:<container-output> \\\n+   -v <host-input-dir>:<container-input-dir> \\\n+   -v <host-output-dir>:<container-output-dir> \\\n    -v <host-mdb-dir>:<container-mdb-dir> \\\n    -v <host-aux-dir>:<container-aux-dir> \\\n    -v <host-logs-dir>:<container-logs-dir> \\\n    le1-nisp \\\n-   LE1_NISP_Processor \\\n-      --mdb >container-mdb-dir>/<mdb-file> \\\n-      --auxiliary_dir <container-aux-dir> \\\n-      --log-file <container-logs-dir>/<log-file> \\\n-      --dpu_file <container-input>/<dpu_file_1> \\\n-      --dpu_file <container-input>/<dpu_file_2> \\\n-      --outdir <container-output>\n+   --mdb >container-mdb-dir>/<mdb-file> \\\n+   --auxiliary_dir <container-aux-dir> \\\n+   --log-file <container-logs-dir>/<log-file> \\\n+   --dpu_file <container-input-dir>/<dpu_file_1> \\\n+   --dpu_file <container-input-dir>/<dpu_file_2> \\\n+   --outdir <container-output-dir>\n ```\n \n Remember to give write permission to the output directory as described in the previous section.\n",
                            "[upd] Updates building scripts to use EDEN 3.1",
                            "Alberto Alessio",
                            "2023-06-14T08:13:37.000+00:00",
                            "060c1b9ab41ee06dcd50604b0ee9d334d8df06f7"
                        ]
                    ],
                    "docker/Dockerfile": [
                        [
                            "@@ -20,5 +20,4 @@ RUN mkdir -p /home/user/Work/output\n RUN mkdir -p /home/user/Work/logs\n RUN mkdir -p /home/user/Work/mdb\n \n-COPY entrypoint.sh .\n-ENTRYPOINT [ \"./entrypoint.sh\" ]\n\\ No newline at end of file\n+ENV PATH=/home/user/Work/Projects/LE1_NISP/InstallArea/x86_64-conda_ry9-gcc11-o2g/bin:$PATH\n\\ No newline at end of file\n",
                            "Merge branch 'release-4.1' into develop",
                            "Alberto Alessio",
                            "2023-06-26T15:52:10.000+00:00",
                            "be9fb08c0703bbb2c356351493375a6b39cf0fc5"
                        ],
                        [
                            "@@ -1,33 +1,24 @@\n-FROM gitlab.euclid-sgs.uk:4567/st-tools/ct_eden_offline:latest\n+FROM gitlab.euclid-sgs.uk:4567/st-tools/ct_eden_offline:3.1.0\n \n-ARG EDEN_PREFIX=/cvmfs/euclid-dev.in2p3.fr/CentOS7/EDEN-3.0\n+ARG GITLAB_TOKEN\n \n-# Install deployed dependencies\n-USER root\n+COPY bootstrap.py .\n+\n+# Download, build and install all dependencies from source\n+RUN source ~/.bashrc && python bootstrap.py --token ${GITLAB_TOKEN}\n \n-COPY docker/LE1_NISP_Proc_dependencies.txt /tmp/LE1_NISP_Proc_dependencies.txt\n-RUN source ${EDEN_PREFIX}/bin/activate && xargs ely install --assumeyes --enablerepo='eden.3.0.DEV' < /tmp/LE1_NISP_Proc_dependencies.txt\n+USER root\n+RUN chown user:user /home/user/Work\n \n # Switch back to unprivileged user\n USER user\n ENV USER user\n \n-# LE1_NISP installation\n-RUN mkdir -p /home/user/Work/Projects/LE1_NISP\n-COPY ./ /home/user/Work/Projects/LE1_NISP/\n-WORKDIR /home/user/Work/Projects/LE1_NISP\n-RUN source ${EDEN_PREFIX}/bin/activate \\\n-    && sudo chown -R ${USER} ./ \\\n-    && rm -rf build* \\\n-    && make configure \\\n-    && make -j $(nproc) \\\n-    && make -j $(nproc) install \\\n-    && echo ${BINARY_TAG}\n-\n-RUN mkdir -p /home/user/Desktop\n-RUN mkdir -p Work/input\n-RUN mkdir -p Work/output\n-RUN mkdir -p Work/logs\n-RUN mkdir -p Work/mdb\n+# LE1_NISP directories\n+RUN mkdir -p /home/user/Work/input\n+RUN mkdir -p /home/user/Work/output\n+RUN mkdir -p /home/user/Work/logs\n+RUN mkdir -p /home/user/Work/mdb\n \n-ENV PATH=/home/user/Work/Projects/LE1_NISP/InstallArea/x86_64-conda_cos6-gcc93-o2g/bin:$PATH\n\\ No newline at end of file\n+COPY entrypoint.sh .\n+ENTRYPOINT [ \"./entrypoint.sh\" ]\n\\ No newline at end of file\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -4,9 +4,6 @@ ARG GITLAB_TOKEN\n \n COPY bootstrap.py .\n \n-# Workaround for building EL_ArrayLib\n-ENV SWIG_LIB=/cvmfs/euclid-dev.in2p3.fr/EDEN-3.1/share/swig/4.1.0/\n-\n # Download, build and install all dependencies from source\n RUN source ~/.bashrc && python bootstrap.py --token ${GITLAB_TOKEN}\n \n",
                            "[upd] Removes SWIG_LIB workaround",
                            "Alberto Alessio",
                            "2023-06-15T12:44:40.000+00:00",
                            "64b2d80c81d3914e6c47cf6021e60de68e435421"
                        ],
                        [
                            "@@ -1,33 +1,27 @@\n-FROM gitlab.euclid-sgs.uk:4567/st-tools/ct_eden_offline:latest\n+FROM gitlab.euclid-sgs.uk:4567/st-tools/ct_eden_offline:3.1.0\n \n-ARG EDEN_PREFIX=/cvmfs/euclid-dev.in2p3.fr/CentOS7/EDEN-3.0\n+ARG GITLAB_TOKEN\n \n-# Install deployed dependencies\n-USER root\n+COPY bootstrap.py .\n+\n+# Workaround for building EL_ArrayLib\n+ENV SWIG_LIB=/cvmfs/euclid-dev.in2p3.fr/EDEN-3.1/share/swig/4.1.0/\n \n-COPY docker/LE1_NISP_Proc_dependencies.txt /tmp/LE1_NISP_Proc_dependencies.txt\n-RUN source ${EDEN_PREFIX}/bin/activate && xargs ely install --assumeyes --enablerepo='eden.3.0.DEV' < /tmp/LE1_NISP_Proc_dependencies.txt\n+# Download, build and install all dependencies from source\n+RUN source ~/.bashrc && python bootstrap.py --token ${GITLAB_TOKEN}\n+\n+USER root\n+RUN chown user:user /home/user/Work\n \n # Switch back to unprivileged user\n USER user\n ENV USER user\n \n-# LE1_NISP installation\n-RUN mkdir -p /home/user/Work/Projects/LE1_NISP\n-COPY ./ /home/user/Work/Projects/LE1_NISP/\n-WORKDIR /home/user/Work/Projects/LE1_NISP\n-RUN source ${EDEN_PREFIX}/bin/activate \\\n-    && sudo chown -R ${USER} ./ \\\n-    && rm -rf build* \\\n-    && make configure \\\n-    && make -j $(nproc) \\\n-    && make -j $(nproc) install \\\n-    && echo ${BINARY_TAG}\n-\n-RUN mkdir -p /home/user/Desktop\n-RUN mkdir -p Work/input\n-RUN mkdir -p Work/output\n-RUN mkdir -p Work/logs\n-RUN mkdir -p Work/mdb\n-\n-ENV PATH=/home/user/Work/Projects/LE1_NISP/InstallArea/x86_64-conda_cos6-gcc93-o2g/bin:$PATH\n\\ No newline at end of file\n+# LE1_NISP directories\n+RUN mkdir -p /home/user/Work/input\n+RUN mkdir -p /home/user/Work/output\n+RUN mkdir -p /home/user/Work/logs\n+RUN mkdir -p /home/user/Work/mdb\n+\n+COPY entrypoint.sh .\n+ENTRYPOINT [ \"./entrypoint.sh\" ]\n\\ No newline at end of file\n",
                            "[upd] Updates building scripts to use EDEN 3.1",
                            "Alberto Alessio",
                            "2023-06-14T08:13:37.000+00:00",
                            "060c1b9ab41ee06dcd50604b0ee9d334d8df06f7"
                        ]
                    ],
                    "docker/bootstrap.py": [
                        [
                            "@@ -15,7 +15,7 @@ dependencies = [\n     (\"ST-DM/ST_DataModel\", \"9.2.0\"),\n     (\"ST-DM/ST_FitsDataModel\", \"9.2.0\"),\n     (\"ST-DM/ST_DataModelTools\", \"9.2.0\"),\n-    (\"PF-LE1/LE1_NISP\", \"feature-eden-3.1\"),\n+    (\"PF-LE1/LE1_NISP\", \"release-4.1\"),\n ]\n \n def get_args():\n",
                            "Merge branch 'release-4.1' into develop",
                            "Alberto Alessio",
                            "2023-06-26T15:52:10.000+00:00",
                            "be9fb08c0703bbb2c356351493375a6b39cf0fc5"
                        ],
                        [
                            "@@ -0,0 +1,60 @@\n+import logging\n+import multiprocessing\n+import os\n+import subprocess\n+import sys\n+from argparse import ArgumentParser\n+\n+GIT_URL = \"gitlab.euclid-sgs.uk\"\n+\n+dependencies = [\n+    (\"ST-TOOLS/Elements\", \"6.2.1\"),\n+    (\"EuclidLibs/EL_ArrayLib\", \"2.3.0\"),\n+    (\"EuclidLibs/EL_ImageLib\", \"2.3.0\"),\n+    (\"EuclidLibs/EleFits\", \"5.2.0\"),\n+    (\"ST-DM/ST_DataModel\", \"9.2.0\"),\n+    (\"ST-DM/ST_FitsDataModel\", \"9.2.0\"),\n+    (\"ST-DM/ST_DataModelTools\", \"9.2.0\"),\n+    (\"PF-LE1/LE1_NISP\", \"feature-eden-3.1\"),\n+]\n+\n+def get_args():\n+    parser = ArgumentParser()\n+    parser.add_argument(\n+        \"--token\",\n+        required=True,\n+        type=verify_token,\n+        help=\"GitLab access token with 'read_repository' scope in the form token_name:token_value\",\n+    )\n+    return parser.parse_args()\n+\n+\n+def verify_token(token: str) -> str:\n+    if \":\" not in token:\n+        logging.error(\"Token should be of the form token_name:token_value\")\n+        sys.exit(1)\n+    return token\n+\n+\n+def download_dependencies(token: str):\n+    for project, branch in dependencies:\n+        url = f\"https://{token}@{GIT_URL}/{project}.git\"\n+        subprocess.run([\"git\", \"clone\", \"--branch\", branch, url], check=True)\n+\n+\n+def install_dependencies():\n+    for project, _ in dependencies:\n+        os.chdir(os.path.basename(project))\n+        # Workaround EDEN packaging issue, where the first configuration fails.\n+        # 'Imported target \"pybind11::module\" includes non-existent path'\n+        subprocess.run([\"make\", \"configure\"])\n+        subprocess.run([\"make\", \"configure\"], check=True)\n+        subprocess.run([\"make\", \"-j\", str(multiprocessing.cpu_count()), \"install\"], check=True)\n+        os.chdir(\"..\")\n+\n+\n+if __name__ == \"__main__\":\n+    args = get_args()\n+\n+    download_dependencies(args.token)\n+    install_dependencies()\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -0,0 +1,60 @@\n+import logging\n+import multiprocessing\n+import os\n+import subprocess\n+import sys\n+from argparse import ArgumentParser\n+\n+GIT_URL = \"gitlab.euclid-sgs.uk\"\n+\n+dependencies = [\n+    (\"ST-TOOLS/Elements\", \"6.2.1\"),\n+    (\"EuclidLibs/EL_ArrayLib\", \"2.3.0\"),\n+    (\"EuclidLibs/EL_ImageLib\", \"2.3.0\"),\n+    (\"EuclidLibs/EleFits\", \"5.2.0\"),\n+    (\"ST-DM/ST_DataModel\", \"9.2.0\"),\n+    (\"ST-DM/ST_FitsDataModel\", \"9.2.0\"),\n+    (\"ST-DM/ST_DataModelTools\", \"9.2.0\"),\n+    (\"PF-LE1/LE1_NISP\", \"feature-eden-3.1\"),\n+]\n+\n+def get_args():\n+    parser = ArgumentParser()\n+    parser.add_argument(\n+        \"--token\",\n+        required=True,\n+        type=verify_token,\n+        help=\"GitLab access token with 'read_repository' scope in the form token_name:token_value\",\n+    )\n+    return parser.parse_args()\n+\n+\n+def verify_token(token: str) -> str:\n+    if \":\" not in token:\n+        logging.error(\"Token should be of the form token_name:token_value\")\n+        sys.exit(1)\n+    return token\n+\n+\n+def download_dependencies(token: str):\n+    for project, branch in dependencies:\n+        url = f\"https://{token}@{GIT_URL}/{project}.git\"\n+        subprocess.run([\"git\", \"clone\", \"--branch\", branch, url], check=True)\n+\n+\n+def install_dependencies():\n+    for project, _ in dependencies:\n+        os.chdir(os.path.basename(project))\n+        # Workaround EDEN packaging issue, where the first configuration fails.\n+        # 'Imported target \"pybind11::module\" includes non-existent path'\n+        subprocess.run([\"make\", \"configure\"])\n+        subprocess.run([\"make\", \"configure\"], check=True)\n+        subprocess.run([\"make\", \"-j\", str(multiprocessing.cpu_count()), \"install\"], check=True)\n+        os.chdir(\"..\")\n+\n+\n+if __name__ == \"__main__\":\n+    args = get_args()\n+\n+    download_dependencies(args.token)\n+    install_dependencies()\n",
                            "[upd] Updates building scripts to use EDEN 3.1",
                            "Alberto Alessio",
                            "2023-06-14T08:13:37.000+00:00",
                            "060c1b9ab41ee06dcd50604b0ee9d334d8df06f7"
                        ]
                    ],
                    "docker/entrypoint.sh": [
                        [
                            "@@ -1,11 +0,0 @@\n-#!/bin/bash\n-\n-# We need to wrap the environment sourcing inside a function to prevent propagation of\n-# user arguments.\n-# See https://stackoverflow.com/a/61106037\n-activate_env(){\n-    source ~/.bashrc\n-}\n-\n-activate_env\n-E-Run LE1_NISP LE1_NISP_Processor \"$@\"\n\\ No newline at end of file\n",
                            "Merge branch 'release-4.1' into develop",
                            "Alberto Alessio",
                            "2023-06-26T15:52:10.000+00:00",
                            "be9fb08c0703bbb2c356351493375a6b39cf0fc5"
                        ],
                        [
                            "@@ -0,0 +1,11 @@\n+#!/bin/bash\n+\n+# We need to wrap the environment sourcing inside a function to prevent propagation of\n+# user arguments.\n+# See https://stackoverflow.com/a/61106037\n+activate_env(){\n+    source ~/.bashrc\n+}\n+\n+activate_env\n+E-Run LE1_NISP LE1_NISP_Processor \"$@\"\n\\ No newline at end of file\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -1,4 +1,11 @@\n #!/bin/bash\n \n-source ~/.bashrc\n+# We need to wrap the environment sourcing inside a function to prevent propagation of\n+# user arguments.\n+# See https://stackoverflow.com/a/61106037\n+activate_env(){\n+    source ~/.bashrc\n+}\n+\n+activate_env\n E-Run LE1_NISP LE1_NISP_Processor \"$@\"\n\\ No newline at end of file\n",
                            "[fix] Fixes entrypoint arguments propagation",
                            "Alberto Alessio",
                            "2023-06-15T12:45:23.000+00:00",
                            "e351e759cfa1a7ecf0f5bd898c70211f6dc2ec4c"
                        ],
                        [
                            "@@ -0,0 +1,4 @@\n+#!/bin/bash\n+\n+source ~/.bashrc\n+E-Run LE1_NISP LE1_NISP_Processor \"$@\"\n\\ No newline at end of file\n",
                            "[upd] Updates building scripts to use EDEN 3.1",
                            "Alberto Alessio",
                            "2023-06-14T08:13:37.000+00:00",
                            "060c1b9ab41ee06dcd50604b0ee9d334d8df06f7"
                        ]
                    ],
                    "le1-nisp-docker-build.sh": [
                        [
                            "@@ -13,4 +13,4 @@ docker run -it \\\n     --privileged \\\n     --user=user \\\n     le1-nisp \\\n-    --help\n+    LE1_NISP_Processor --help\n\\ No newline at end of file\n",
                            "Merge branch 'release-4.1' into develop",
                            "Alberto Alessio",
                            "2023-06-26T15:52:10.000+00:00",
                            "be9fb08c0703bbb2c356351493375a6b39cf0fc5"
                        ],
                        [
                            "@@ -1,7 +1,11 @@\n #!/bin/bash\n \n #  Build the image\n-docker build -t le1-nisp -f docker/Dockerfile .\n+docker build \\\n+    --build-arg GITLAB_TOKEN=$GITLAB_TOKEN \\\n+    -t le1-nisp \\\n+    -f docker/Dockerfile \\\n+    ./docker/\n \n #  Test run docker container\n docker run -it \\\n@@ -9,4 +13,4 @@ docker run -it \\\n     --privileged \\\n     --user=user \\\n     le1-nisp \\\n-    sh -c \"LE1_NISP_Processor --help\"\n+    --help\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -1,7 +1,11 @@\n #!/bin/bash\n \n #  Build the image\n-docker build -t le1-nisp -f docker/Dockerfile .\n+docker build \\\n+    --build-arg GITLAB_TOKEN=$GITLAB_TOKEN \\\n+    -t le1-nisp \\\n+    -f docker/Dockerfile \\\n+    ./docker/\n \n #  Test run docker container\n docker run -it \\\n@@ -9,4 +13,4 @@ docker run -it \\\n     --privileged \\\n     --user=user \\\n     le1-nisp \\\n-    sh -c \"LE1_NISP_Processor --help\"\n+    --help\n",
                            "[upd] Updates building scripts to use EDEN 3.1",
                            "Alberto Alessio",
                            "2023-06-14T08:13:37.000+00:00",
                            "060c1b9ab41ee06dcd50604b0ee9d334d8df06f7"
                        ]
                    ],
                    "le1-nisp-docker-run.sh": [
                        [
                            "@@ -43,7 +43,8 @@ docker run -it \\\n     -v ${LOCAL_AUX_FOLDER}:${CONTAINER_AUX_FOLDER} \\\n     -v ${LOCAL_LOGS_FOLDER}:${CONTAINER_LOGS_FOLDER} \\\n     le1-nisp \\\n-    --mdb ${MDB_ARG} \\\n-    --log-file ${LOG_ARG} \\\n-    $inputFiles \\\n-    --outdir ${CONTAINER_OUTPUT_FOLDER}\n+    LE1_NISP_Processor \\\n+      --mdb ${MDB_ARG} \\\n+      --log-file ${LOG_ARG} \\\n+      $inputFiles \\\n+      --outdir ${CONTAINER_OUTPUT_FOLDER}\n",
                            "Merge branch 'release-4.1' into develop",
                            "Alberto Alessio",
                            "2023-06-26T15:52:10.000+00:00",
                            "be9fb08c0703bbb2c356351493375a6b39cf0fc5"
                        ],
                        [
                            "@@ -27,7 +27,7 @@ do\n     fi\n done\n \n-install -m 666 ${LOCAL_LOGS_FOLDER} ${LOG_FILENAME}\n+install -m 666 -p ${LOCAL_LOGS_FOLDER} ${LOG_FILENAME}\n \n LOG_ARG=\"${CONTAINER_LOGS_FOLDER}/${LOG_FILENAME}\"\n MDB_ARG=\"${CONTAINER_MDB_FOLDER}/${MDB_FILENAME}\"\n@@ -43,8 +43,7 @@ docker run -it \\\n     -v ${LOCAL_AUX_FOLDER}:${CONTAINER_AUX_FOLDER} \\\n     -v ${LOCAL_LOGS_FOLDER}:${CONTAINER_LOGS_FOLDER} \\\n     le1-nisp \\\n-    sh -c \"LE1_NISP_Processor \\\n-        --mdb ${MDB_ARG} \\\n-        --log-file ${LOG_ARG} \\\n-        $inputFiles \\\n-        --outdir ${CONTAINER_OUTPUT_FOLDER}\"\n+    --mdb ${MDB_ARG} \\\n+    --log-file ${LOG_ARG} \\\n+    $inputFiles \\\n+    --outdir ${CONTAINER_OUTPUT_FOLDER}\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -27,7 +27,7 @@ do\n     fi\n done\n \n-install -m 666 ${LOCAL_LOGS_FOLDER} ${LOG_FILENAME}\n+install -m 666 -p ${LOCAL_LOGS_FOLDER} ${LOG_FILENAME}\n \n LOG_ARG=\"${CONTAINER_LOGS_FOLDER}/${LOG_FILENAME}\"\n MDB_ARG=\"${CONTAINER_MDB_FOLDER}/${MDB_FILENAME}\"\n@@ -43,8 +43,7 @@ docker run -it \\\n     -v ${LOCAL_AUX_FOLDER}:${CONTAINER_AUX_FOLDER} \\\n     -v ${LOCAL_LOGS_FOLDER}:${CONTAINER_LOGS_FOLDER} \\\n     le1-nisp \\\n-    sh -c \"LE1_NISP_Processor \\\n-        --mdb ${MDB_ARG} \\\n-        --log-file ${LOG_ARG} \\\n-        $inputFiles \\\n-        --outdir ${CONTAINER_OUTPUT_FOLDER}\"\n+    --mdb ${MDB_ARG} \\\n+    --log-file ${LOG_ARG} \\\n+    $inputFiles \\\n+    --outdir ${CONTAINER_OUTPUT_FOLDER}\n",
                            "[upd] Updates building scripts to use EDEN 3.1",
                            "Alberto Alessio",
                            "2023-06-14T08:13:37.000+00:00",
                            "060c1b9ab41ee06dcd50604b0ee9d334d8df06f7"
                        ]
                    ],
                    "CMakeLists.txt": [
                        [
                            "@@ -16,7 +16,7 @@ find_package(ElementsProject)\n #                         elements_project(MyProject 1.0 USE Element 3.9)\n #===============================================================================\n \n-elements_project(LE1_NISP 4.1 USE\n+elements_project(LE1_NISP 4.2 USE\n                  Elements 6.2.1\n                  EL_ArrayLib 2.3.0\n                  EL_ImageLib 2.3.0\n",
                            "[build] Updates version to 4.2",
                            "Alberto Alessio",
                            "2023-06-20T15:32:27.000+00:00",
                            "1742903b1f7cae8f0c94bbc8decd6d9df78d731a"
                        ],
                        [
                            "@@ -16,7 +16,7 @@ find_package(ElementsProject)\n #                         elements_project(MyProject 1.0 USE Element 3.9)\n #===============================================================================\n \n-elements_project(LE1_NISP 4.1 USE\n+elements_project(LE1_NISP 4.1.0 USE\n                  Elements 6.2.1\n                  EL_ArrayLib 2.3.0\n                  EL_ImageLib 2.3.0\n",
                            "[build] Updates version to 4.1.0",
                            "Alberto Alessio",
                            "2023-06-20T15:29:52.000+00:00",
                            "de73792795d8c17d9887955e820ffa860189270a"
                        ],
                        [
                            "@@ -17,10 +17,10 @@ find_package(ElementsProject)\n #===============================================================================\n \n elements_project(LE1_NISP 4.1 USE\n-                 Elements 6.1.1\n-                 EL_ArrayLib 2.2.0\n-                 EL_ImageLib 2.2.0\n-                 EleFits 5.1.0\n-                 ST_DataModelTools 9.1.2)\n+                 Elements 6.2.1\n+                 EL_ArrayLib 2.3.0\n+                 EL_ImageLib 2.3.0\n+                 EleFits 5.2.0\n+                 ST_DataModelTools 9.2.0)\n \n \n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -17,10 +17,10 @@ find_package(ElementsProject)\n #===============================================================================\n \n elements_project(LE1_NISP 4.1 USE\n-                 Elements 6.1.1\n-                 EL_ArrayLib 2.2.0\n-                 EL_ImageLib 2.2.0\n-                 EleFits 5.1.0\n-                 ST_DataModelTools 9.1.2)\n+                 Elements 6.2.1\n+                 EL_ArrayLib 2.3.0\n+                 EL_ImageLib 2.3.0\n+                 EleFits 5.2.0\n+                 ST_DataModelTools 9.2.0)\n \n \n",
                            "[upd] Updates dependencies",
                            "Alberto Alessio",
                            "2023-06-14T08:13:37.000+00:00",
                            "f72361bdf775da56d3c61f2991bcc13cb302dba2"
                        ]
                    ],
                    ".jenkinsFile": [
                        [
                            "@@ -1,3 +1,3 @@\n #!groovy\n-@Library('integration-library@release-9') _\n-pipelineElements(artifactId:'LE1_NISP', component:'eden.3.0', deployDevelop:false, deployMaster:false)\n\\ No newline at end of file\n+@Library(value='integration-library@release-10') _\n+pipelineElements(name:'LE1_NISP', component:'eden.3.1', skipContinuous:true, skipRelease:true)\n\\ No newline at end of file\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -1,3 +1,3 @@\n #!groovy\n @Library(value='integration-library@release-10') _\n-pipelineElements(name:'LE1_NISP', component:'eden.3.1', deployDevelop:false, deployMaster:false)\n\\ No newline at end of file\n+pipelineElements(name:'LE1_NISP', component:'eden.3.1', skipContinuous:true, skipRelease:true)\n\\ No newline at end of file\n",
                            "[ci] Updates commands to skip CVMFS deployment",
                            "Alberto Alessio",
                            "2023-06-14T10:29:53.000+00:00",
                            "57eeb0b22952a7318ad2f4613726441512a6a24b"
                        ],
                        [
                            "@@ -1,3 +1,3 @@\n #!groovy\n-@Library('integration-library@release-9') _\n-pipelineElements(artifactId:'LE1_NISP', component:'eden.3.0', deployDevelop:false, deployMaster:false)\n\\ No newline at end of file\n+@Library(value='integration-library@release-10') _\n+pipelineElements(name:'LE1_NISP', component:'eden.3.1', deployDevelop:false, deployMaster:false)\n\\ No newline at end of file\n",
                            "[ci] Conforms .jenkinsFile to EDEN 3.1",
                            "Alberto Alessio",
                            "2023-06-14T08:13:37.000+00:00",
                            "655769b10542d9a3f10dc98136526d804aebd915"
                        ]
                    ],
                    "LE1_NISP_Adapters/tests/integration-tests/resources/DpdMdbDataBase_20230614_120000.xml": [
                        [
                            "",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ]
                    ],
                    "LE1_NISP_Adapters/tests/integration-tests/resources/mdb_test_config.ini": [
                        [
                            "@@ -1 +1 @@\n-mdbFile = ./DpdMdbDataBase_20230412_101050.xml\n\\ No newline at end of file\n+mdbFile = ./DpdMdbDataBase_20230614_120000.xml\n\\ No newline at end of file\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/CMakeLists.txt": [
                        [
                            "@@ -14,8 +14,8 @@ elements_subdir(LE1_NISP_Entities)\n #         elements_depends_on_subdirs(ElementsKernel)\n #===============================================================================\n elements_depends_on_subdirs(ElementsKernel)\n-elements_depends_on_subdirs(EL_ArrayLib)\n-elements_depends_on_subdirs(EL_ImageLib)\n+elements_depends_on_subdirs(EL_Array)\n+elements_depends_on_subdirs(EL_Image)\n \n #===============================================================================\n # Add the find_package macro (a pure CMake command) here to locate the\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -14,6 +14,8 @@ elements_subdir(LE1_NISP_Entities)\n #         elements_depends_on_subdirs(ElementsKernel)\n #===============================================================================\n elements_depends_on_subdirs(ElementsKernel)\n+elements_depends_on_subdirs(EL_Array)\n+elements_depends_on_subdirs(EL_Image)\n \n #===============================================================================\n # Add the find_package macro (a pure CMake command) here to locate the\n",
                            "[build] Specifies EL_Array and EL_Image dependencies properly",
                            "Alberto Alessio",
                            "2023-06-14T10:28:25.000+00:00",
                            "d1dc2642cd2531e9bbaa78f27ed14aeb59ecdf13"
                        ],
                        [
                            "@@ -14,8 +14,6 @@ elements_subdir(LE1_NISP_Entities)\n #         elements_depends_on_subdirs(ElementsKernel)\n #===============================================================================\n elements_depends_on_subdirs(ElementsKernel)\n-elements_depends_on_subdirs(EL_ArrayLib)\n-elements_depends_on_subdirs(EL_ImageLib)\n \n #===============================================================================\n # Add the find_package macro (a pure CMake command) here to locate the\n",
                            "[ref] Removes warnings on missing EL_ImageLib and EL_ImageLib local subdirs",
                            "Alberto Alessio",
                            "2023-06-14T08:13:37.000+00:00",
                            "3fa8eca5debf1ea40bc5167214007f7a02bdb61b"
                        ],
                        [
                            "@@ -0,0 +1,140 @@\n+CMAKE_MINIMUM_REQUIRED(VERSION 2.8.12)\n+\n+#===============================================================================\n+# Load elements_subdir macro here\n+# Examples:\n+#   For declaring a project module:\n+#         elements_subdir(ElementsExamples)\n+#===============================================================================\n+elements_subdir(LE1_NISP_Entities)\n+\n+#===============================================================================\n+# Load elements_depends_on_subdirs macro here\n+#   For creating a dependency onto an other accessible module\n+#         elements_depends_on_subdirs(ElementsKernel)\n+#===============================================================================\n+elements_depends_on_subdirs(ElementsKernel)\n+elements_depends_on_subdirs(EL_ArrayLib)\n+elements_depends_on_subdirs(EL_ImageLib)\n+\n+#===============================================================================\n+# Add the find_package macro (a pure CMake command) here to locate the\n+# libraries.\n+# Examples:\n+#          find_package(CppUnit)\n+#===============================================================================\n+find_package(Eigen3 REQUIRED)\n+\n+#===============================================================================\n+# Declare the library dependencies here\n+# Example:\n+#         elements_add_library(ElementsExamples src/Lib/*.cpp\n+#                     INCLUDE_DIRS Boost ElementsKernel\n+#                     LINK_LIBRARIES Boost ElementsKernel\n+#                     PUBLIC_HEADERS ElementsExamples)\n+#===============================================================================\n+elements_add_library(LE1_NISP_Entities src/lib/*.cpp\n+        INCLUDE_DIRS ElementsKernel Eigen3 EL_ArrayLib EL_ImageLib\n+        LINK_LIBRARIES ElementsKernel EL_ArrayLib EL_ImageLib\n+        PUBLIC_HEADERS LE1_NISP_Entities)\n+\n+#===============================================================================\n+# Declare the Boost tests here\n+# Example:\n+# elements_add_unit_test(BoostClassExample tests/src/Boost/ClassExample_test.cpp\n+#                       EXECUTABLE BoostClassExample_test\n+#                       INCLUDE_DIRS ElementsExamples\n+#                       LINK_LIBRARIES ElementsExamples TYPE Boost)\n+#===============================================================================\n+elements_add_unit_test(ByteArrayEuclid tests/src/ByteArrayEuclid_test.cpp\n+        EXECUTABLE LE1_NISP_Entities_ByteArrayEuclid_test\n+        LINK_LIBRARIES LE1_NISP_Entities\n+        TYPE Boost)\n+elements_add_unit_test(ByteArrayStandard tests/src/ByteArrayStandard_test.cpp\n+        EXECUTABLE LE1_NISP_Entities_ByteArrayStandard_test\n+        LINK_LIBRARIES LE1_NISP_Entities\n+        TYPE Boost)\n+elements_add_unit_test(ByteArrayCreatorEuclid tests/src/ByteArrayCreatorEuclid_test.cpp\n+        EXECUTABLE LE1_NISP_Entities_ByteArrayCreatorEuclid_test\n+        LINK_LIBRARIES LE1_NISP_Entities\n+        TYPE Boost)\n+elements_add_unit_test(ByteArrayCreatorStandard tests/src/ByteArrayCreatorStandard_test.cpp\n+        EXECUTABLE LE1_NISP_Entities_ByteArrayCreatorStandard_test\n+        LINK_LIBRARIES LE1_NISP_Entities\n+        TYPE Boost)\n+elements_add_unit_test(DetectorMetadata tests/src/DetectorMetadata_test.cpp\n+        EXECUTABLE LE1_NISP_Entities_DetectorMetadata_test\n+        LINK_LIBRARIES LE1_NISP_Entities\n+        TYPE Boost)\n+elements_add_unit_test(Exception tests/src/Exception_test.cpp\n+        EXECUTABLE LE1_NISP_Entities_Exception_test\n+        LINK_LIBRARIES LE1_NISP_Entities\n+        TYPE Boost)\n+elements_add_unit_test(TelemetryFile tests/src/TelemetryFile_test.cpp\n+        EXECUTABLE LE1_NISP_Entities_TelemetryFile_test\n+        LINK_LIBRARIES LE1_NISP_Entities\n+        TYPE Boost)\n+elements_add_unit_test(TelemetryDetector tests/src/TelemetryDetector_test.cpp\n+        EXECUTABLE LE1_NISP_Entities_TelemetryDetector_test\n+        LINK_LIBRARIES LE1_NISP_Entities\n+        TYPE Boost)\n+elements_add_unit_test(ParameterDescription tests/src/ParameterDescription_test.cpp\n+        EXECUTABLE LE1_NISP_Entities_ParameterDescription_test\n+        LINK_LIBRARIES LE1_NISP_Entities\n+        TYPE Boost)\n+elements_add_unit_test(Parameter tests/src/Parameter_test.cpp\n+        EXECUTABLE LE1_NISP_Entities_Parameter_test\n+        LINK_LIBRARIES LE1_NISP_Entities\n+        TYPE Boost)\n+elements_add_unit_test(TelemetrySection tests/src/TelemetrySection_test.cpp\n+        EXECUTABLE LE1_NISP_Entities_TelemetrySection_test\n+        LINK_LIBRARIES LE1_NISP_Entities\n+        TYPE Boost)\n+elements_add_unit_test(DetectorConfigMapper tests/src/DetectorConfigMapper_test.cpp\n+        EXECUTABLE LE1_NISP_Entities_DetectorConfigMapper_test\n+        LINK_LIBRARIES LE1_NISP_Entities\n+        TYPE Boost)\n+elements_add_unit_test(TelemetryConfiguration tests/src/TelemetryConfiguration_test.cpp\n+        EXECUTABLE LE1_NISP_Entities_TelemetryConfiguration_test\n+        LINK_LIBRARIES LE1_NISP_Entities\n+        TYPE Boost)\n+elements_add_unit_test(DetectorMap tests/src/DetectorMap_test.cpp\n+        EXECUTABLE LE1_NISP_Entities_DetectorMap_test\n+        LINK_LIBRARIES LE1_NISP_Entities\n+        TYPE Boost)\n+elements_add_unit_test(DetectorId tests/src/DetectorId_test.cpp\n+        EXECUTABLE LE1_NISP_Entities_DetectorId_test\n+        LINK_LIBRARIES LE1_NISP_Entities\n+        TYPE Boost)\n+elements_add_unit_test(ExposureConfigManager tests/src/ExposureConfigManager_test.cpp\n+        EXECUTABLE LE1_NISP_Entities_ExposureConfigManager_test\n+        LINK_LIBRARIES LE1_NISP_Entities\n+        TYPE Boost)\n+elements_add_unit_test(ExposureConfigurationImpl tests/src/ExposureConfigurationImpl_test.cpp\n+        EXECUTABLE LE1_NISP_Entities_ExposureConfigurationImpl_test\n+        LINK_LIBRARIES LE1_NISP_Entities\n+        TYPE Boost)\n+elements_add_unit_test(PlanningIdGroundTests tests/src/PlanningIdGroundTests_test.cpp\n+        EXECUTABLE LE1_NISP_Entities_PlanningIdGroundTests_test\n+        LINK_LIBRARIES LE1_NISP_Entities\n+        TYPE Boost)\n+elements_add_unit_test(PlanningIdSoc20210215 tests/src/PlanningIdSoc20210215_test.cpp\n+        EXECUTABLE LE1_NISP_Entities_PlanningIdSoc20210215_test\n+        LINK_LIBRARIES LE1_NISP_Entities\n+        TYPE Boost)\n+elements_add_unit_test(DetectorImpl tests/src/DetectorImpl_test.cpp\n+        EXECUTABLE LE1_NISP_Entities_DetectorImpl_test\n+        LINK_LIBRARIES LE1_NISP_Entities\n+        TYPE Boost)\n+elements_add_unit_test(OnBoardTime tests/src/OnBoardTime_test.cpp\n+        EXECUTABLE LE1_NISP_Entities_OnBoardTime_test\n+        LINK_LIBRARIES LE1_NISP_Entities\n+        TYPE Boost)\n+elements_add_unit_test(Wcs tests/src/Wcs_test.cpp\n+        EXECUTABLE LE1_NISP_Entities_Wcs_test\n+        LINK_LIBRARIES LE1_NISP_Entities\n+        TYPE Boost)\n+elements_add_unit_test(Utils tests/src/Utils_test.cpp\n+        EXECUTABLE LE1_NISP_Entities_Utils_test\n+        LINK_LIBRARIES LE1_NISP_Entities\n+        TYPE Boost)\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/Utils.h": [
                        [
                            "@@ -74,6 +74,14 @@ namespace LE1_NISP_Entities{\n    */\n   bool exists(const std::string &path);\n \n+  /**\n+   * @brief Compute data compression ratio\n+   * @param compressedDataSize the size of compressed data\n+   * @param uncompressedDataSize the size of uncompressed data\n+   * @return The data compression ratio\n+   */\n+  [[nodiscard]] double computeCompressionRatio(size_t compressedDataSize, size_t uncompressedDataSize);\n+\n }\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -1,7 +1,7 @@\n /**\n- * @file LE1_NISP_ProcessScience/Utils.h\n+ * @file LE1_NISP_Entities/Utils.h\n  * @date 05/26/20\n- * @author Massimo Trifoglio\n+ * @author Alberto Alessio\n  *\n  * @copyright (C) 2012-2020 Euclid Science Ground Segment\n  *\n@@ -21,8 +21,8 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_UTILS_H\n-#define _LE1_NISP_PROCESSSCIENCE_UTILS_H\n+#ifndef _LE1_NISP_ENTITIES_UTILS_H\n+#define _LE1_NISP_ENTITIES_UTILS_H\n \n #include <cstdio>\n #include <cstdlib>\n@@ -35,24 +35,26 @@\n \n #include \"ElementsKernel/Logging.h\"\n \n-namespace Euclid {\n-  namespace FitsIO {\n-    class RecordHdu;\n-  }\n-  namespace EL_Image {\n-    class PropertyList;  \n-  }\n+namespace LE1_NISP_Entities{\n \n-}\n-\n-namespace LE1_NISP_ProcessScience{\n-  \n+  /**\n+   * @brief Log error message and throw exception\n+   * @tparam Exception The Exception to be thrown\n+   * @param errMsg The error message\n+   */\n   template<typename Exception>\n   void throwAndLog(const std::string &errMsg){\n     Elements::Logging::getLogger(\"LE1_NISP_Processor\").error() << errMsg;\n     throw Exception(errMsg);\n   }\n-  \n+\n+  /**\n+   * @brief Validate smart pointer and throw an exception if invalid\n+   * @tparam Exception The Exception to be thrown\n+   * @tparam Pointer The pointer type\n+   * @param ptr The pointer to be validated\n+   * @param errMsg The error message\n+   */\n   template<typename Exception, typename Pointer>\n   void validatePointer(const std::shared_ptr<Pointer> &ptr, const std::string &errMsg){\n      if(ptr == nullptr){\n@@ -60,66 +62,18 @@ namespace LE1_NISP_ProcessScience{\n     }\n   }\n \n+  /**\n+   * @until Create directories if not existing\n+   * @param outputPath The path to be created\n+   */\n   void createDirectories(const std::string &outputPath);\n+  /**\n+   * @brief Check if a path already exists\n+   * @param path The path\n+   * @return \\c true if the path already exists, \\c false otherwise\n+   */\n   bool exists(const std::string &path);\n \n-  std::vector<std::string> splitLine(const std::string &source, const std::string &delimiters);\n-  \n-}\n-\n-namespace LE1_NISP {\n-\n-\n-// All the functions below should be removed after having migrated all needed telemetry parsing functions\n-\n-char* getDate(int time_start);\n-signed long int timeToSeconds(int yy, int MM, int dd, int hh, int mm, int ss);\n-\n-using namespace std;\n-\n-#include <ostream>\n-namespace Color {\n-    enum Code {\n-        FG_RED      = 31,\n-        FG_GREEN    = 32,\n-        FG_BLUE     = 34,\n-        FG_DEFAULT  = 39,\n-        BG_RED      = 41,\n-        BG_GREEN    = 42,\n-        BG_BLUE     = 44,\n-        BG_DEFAULT  = 49\n-    };\n-    class Modifier {\n-        Code code;\n-    public:\n-        Modifier(Code pCode) : code(pCode) {}\n-        friend std::ostream&\n-        operator<<(std::ostream& os, const Modifier& mod) {\n-            return os << \"\\033[\" << mod.code << \"m\";\n-        }\n-\t};\n }\n \n-const int LOG_LEV_ERR                 = 1;\n-const int LOG_LEV_ERR_REF             = 2;\n-const int LOG_LEV_ERR_REF_WRN         = 3;\n-const int LOG_LEV_ERR_INF_WRN         = 4;\n-const int LOG_LEV_ERR_INF_WRN_DBG     = 5;\n-const int LOG_LEV_ERR_INF_WRN_DBG_REF = 6;\n-\n-\n-# define LOG_INF \"INFO \"\n-# define LOG_WRN \"WARN \"\n-# define LOG_ERR \"ERROR\"\n-# define LOG_DBG \"DEBUG\"\n-# define LOG_REF \"REF  \"\n-\n-\n-// function prototypes\n-void SplitFilename (const string& str, string& folder, string& file);\n-void CopyStringToChar (const string& str, char * buffer);\n-void SplitSuffix (const string& str, string& folder, string& file);\n-\n-}  // namespace LE1_NISP\n-\n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/Utils.cpp": [
                        [
                            "@@ -36,4 +36,21 @@ namespace LE1_NISP_Entities{\n     return boost::filesystem::exists(path);\n   }\n \n+  double computeCompressionRatio(const size_t compressedDataSize, const size_t uncompressedDataSize) {\n+    Elements::Logging logger = Elements::Logging::getLogger(\"LE1_NISP_Processor\");\n+    double compressionRatio = 1;\n+\n+    if(compressedDataSize == 0) {\n+      logger.warn() << \"Setting compressionRatio = 1: compressedDataSize = 0 and uncompressedDataSize = \" << uncompressedDataSize;\n+      compressionRatio = 1;\n+    }\n+    else {\n+      if(uncompressedDataSize == 0)\n+        logger.warn() << \"Setting compressionRatio = 0: compressedDataSize = \" << std::to_string(compressedDataSize) << \" and uncompressedDataSize = 0\";\n+      compressionRatio = (double) uncompressedDataSize / (double) compressedDataSize;\n+    }\n+\n+    return compressionRatio;\n+  }\n+\n }\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -1,7 +1,7 @@\n /**\n- * @file LE1_NISP_ProcessScience/ExposureConfigParserXml.h\n- * @date 02/25/21\n- * @author user\n+ * @file src/lib/Utils.cpp\n+ * @date 05/26/20\n+ * @author Alberto Alessio\n  *\n  * @copyright (C) 2012-2020 Euclid Science Ground Segment\n  *\n@@ -21,37 +21,19 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_EXPOSURECONFIGPARSERXML_H\n-#define _LE1_NISP_PROCESSSCIENCE_EXPOSURECONFIGPARSERXML_H\n \n-#include <memory>\n+#include \"LE1_NISP_Entities/Utils.h\"\n+#include \"boost/any.hpp\"\n \n-#include \"LE1_NISP_ProcessScience/Exception.h\"\n-#include \"LE1_NISP_ProcessScience/ExposureConfigManager.h\"\n+namespace LE1_NISP_Entities{\n \n-namespace LE1_NISP_ProcessScience {\n+  void createDirectories(const std::string &outputPath){\n+    if(!exists(outputPath))\n+      boost::filesystem::create_directories(outputPath);\n+  }\n+  \n+  bool exists(const std::string &path){\n+    return boost::filesystem::exists(path);\n+  }\n \n-/**\n- * @class ExposureConfigParserXml\n- * @brief\n- *\n- */\n-class ExposureConfigParserXml {\n-\n-public:\n-\n-  ExposureConfigParserXml();\n-\n-  /**\n-   * @brief Destructor\n-   */\n-  virtual ~ExposureConfigParserXml();\n-\n-  virtual std::shared_ptr<ExposureConfigManager> parse(const std::string &filename);\n-\n-};  // End of ExposureConfigParserXml class\n-\n-}  // namespace LE1_NISP_ProcessScience\n-\n-\n-#endif\n+}\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/src/ExposureConfigManager_test.cpp": [
                        [
                            "@@ -50,7 +50,7 @@ namespace{\n                                               \"CALIB\", \"CALIB\",\"OTHER\",\"CALIB\", \"CALIB\"};\n   std::vector<std::string> productFirstTypes{\"OBJECT\",\"OTHER\", \"OTHER\", \"OTHER\", \"OTHER\", \"OTHER\",\n                                               \"LINEARITY\", \"OTHER\", \"BIAS\",\"OTHER\",\"DARK\", \"DARK\"};\n-  std::vector<std::string> productSecondTypes{\"SKY\", \"OTHER\", \"OTHER\", \"OTHER\", \"OTHER\", \"OTHER\",\n+  std::vector<std::string> productSecondTypes{\"OTHER\", \"OTHER\", \"OTHER\", \"OTHER\", \"OTHER\", \"OTHER\",\n                                               \"OTHER\", \"OTHER\", \"OTHER\", \"OTHER\", \"OTHER\", \"OTHER\"};\n   std::vector<std::string> observationModes{\"DEEP\", \"OTHER\", \"OTHER\", \"OTHER\", \"OTHER\", \"OTHER\",\n                                               \"CALIBRATION\", \"CALIBRATION\", \"CALIBRATION\", \"OTHER\", \"CALIBRATION\", \"CALIBRATION\"};\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -25,9 +25,9 @@\n #include <boost/test/data/test_case.hpp>\n #include <boost/test/data/monomorphic.hpp>\n \n-#include \"LE1_NISP_ProcessScience//ExposureConfigManager.h\"\n+#include \"LE1_NISP_Entities/ExposureConfigManager.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Entities;\n namespace bdata = boost::unit_test::data;\n \n struct ExposureConfigManagerFixture {\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/src/Utils_test.cpp": [
                        [
                            "@@ -72,6 +72,31 @@ BOOST_AUTO_TEST_CASE( GivenExistingOutputDirectoryShouldReturnTrueWhenCallingExi\n   BOOST_TEST_REQUIRE(exists(outputDir) == true);\n }\n \n+BOOST_AUTO_TEST_CASE( GivenZeroCompressedDataSizeAndUncompressedSizeDifferentFromZeroShouldReturnCompressedRatioEqualToOne,\n+                      * boost::unit_test::tolerance(std::numeric_limits<double>::epsilon()) ) {\n+  BOOST_REQUIRE_EQUAL(computeCompressionRatio(0, 1234), 1);\n+}\n+\n+BOOST_AUTO_TEST_CASE( GivenCompressedSizeSmallerThanUncompressedSizeShouldReturnTheExpectedCompressionRatio,\n+                      * boost::unit_test::tolerance(std::numeric_limits<double>::epsilon()) ) {\n+  size_t comprDataSize = 128;\n+  size_t uncomprDataSize = 180;\n+  double expectedRatio = (double) uncomprDataSize / (double) comprDataSize;\n+  BOOST_REQUIRE_EQUAL(computeCompressionRatio(comprDataSize, uncomprDataSize), expectedRatio);\n+}\n+\n+BOOST_AUTO_TEST_CASE( GivenCompressedSizeGreaterThanUncompressedSizeShouldReturnTheExpectedCompressionRatio) {\n+  size_t comprDataSize = 180;\n+  size_t uncomprDataSize = 128;\n+  double expectedRatio = (double) uncomprDataSize / (double) comprDataSize;\n+  BOOST_REQUIRE_EQUAL(computeCompressionRatio(comprDataSize, uncomprDataSize), expectedRatio);\n+}\n+\n+BOOST_AUTO_TEST_CASE( GivenZeroUncompressedDataSizeAndCompressedSizeDifferentFromZeroShouldReturnCompressedRatioEqualToZero,\n+                      * boost::unit_test::tolerance(std::numeric_limits<double>::epsilon()) ) {\n+  BOOST_REQUIRE_EQUAL(computeCompressionRatio(1234, 0), 0);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END ()\n \n \n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -25,9 +25,9 @@\n \n #include \"ElementsKernel/Temporary.h\"\n \n-#include \"LE1_NISP_ProcessScience//Utils.h\"\n+#include \"LE1_NISP_Entities/Utils.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Entities;\n \n BOOST_AUTO_TEST_SUITE (Utils_test)\n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/DecompressorByte.cpp": [
                        [
                            "@@ -36,6 +36,9 @@ namespace LE1_NISP_Interactors {\n                                                            const LE1_NISP_Entities::CompressionParams &compressionParams) {\n     validateInputs(compressedData, maxDecompressedSize);\n \n+    if(compressedData->getSize() == 0)\n+      return m_byteArrayCreator->create(0);\n+\n     std::unique_ptr<uint8_t[]> array = std::make_unique<uint8_t[]>(compressionParams.getNumberOfValues());\n \n     auto res = fits_rdecomp_byte (compressedData->getData().get(),       // input buffer\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -21,19 +21,19 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/DecompressorByte.h\"\n+#include \"LE1_NISP_Interactors/DecompressorByte.h\"\n #include <cstring>\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n-  DecompressorByte::DecompressorByte(const std::shared_ptr<ByteArrayCreator> byteArrayCreator)\n+  DecompressorByte::DecompressorByte(const std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> byteArrayCreator)\n   : m_byteArrayCreator(byteArrayCreator){}\n \n   DecompressorByte::~DecompressorByte(){}\n \n-  std::shared_ptr<ByteArray> DecompressorByte::decompress(const std::shared_ptr<ByteArray> compressedData,\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> DecompressorByte::decompress(const std::shared_ptr<LE1_NISP_Entities::ByteArray> compressedData,\n                                                            const size_t maxDecompressedSize,\n-                                                           const CompressionParams &compressionParams) {  \n+                                                           const LE1_NISP_Entities::CompressionParams &compressionParams) {\n     validateInputs(compressedData, maxDecompressedSize);\n \n     std::unique_ptr<uint8_t[]> array = std::make_unique<uint8_t[]>(compressionParams.getNumberOfValues());\n@@ -58,7 +58,7 @@ namespace LE1_NISP_ProcessScience {\n }\n \n \n-  void DecompressorByte::validateInputs(const std::shared_ptr<ByteArray> &compressedData,\n+  void DecompressorByte::validateInputs(const std::shared_ptr<LE1_NISP_Entities::ByteArray> &compressedData,\n                       const size_t maxDecompressedSize) const{\n     if(m_byteArrayCreator == nullptr)\n       throw NullByteArrayCreatorException(\"DecompressorByte::decompress: null ByteArrayCreator\");\n@@ -203,7 +203,7 @@ namespace LE1_NISP_ProcessScience {\n    }\n \n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/DecompressorShort.cpp": [
                        [
                            "@@ -35,7 +35,10 @@ namespace LE1_NISP_Interactors {\n                                                            const size_t maxDecompressedSize,\n                                                            const LE1_NISP_Entities::CompressionParams &compressionParams) {\n     validateInputs(compressedData, maxDecompressedSize);\n-    \n+\n+    if(compressedData->getSize() == 0)\n+      return m_byteArrayCreator->create(0);\n+\n     unsigned short *array = new unsigned short[maxDecompressedSize];\n     auto res = fits_rdecomp_short (compressedData->getData().get(),         // input buffer\n                                    compressedData->getSize(),               // length of input\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -21,19 +21,19 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/DecompressorShort.h\"\n+#include \"LE1_NISP_Interactors/DecompressorShort.h\"\n #include <cstring>\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n-  DecompressorShort::DecompressorShort(const std::shared_ptr<ByteArrayCreator> byteArrayCreator)\n+  DecompressorShort::DecompressorShort(const std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> byteArrayCreator)\n   : m_byteArrayCreator(byteArrayCreator){}\n \n   DecompressorShort::~DecompressorShort(){}\n \n-  std::shared_ptr<ByteArray> DecompressorShort::decompress(const std::shared_ptr<ByteArray> compressedData,\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> DecompressorShort::decompress(const std::shared_ptr<LE1_NISP_Entities::ByteArray> compressedData,\n                                                            const size_t maxDecompressedSize,\n-                                                           const CompressionParams &compressionParams) {  \n+                                                           const LE1_NISP_Entities::CompressionParams &compressionParams) {\n     validateInputs(compressedData, maxDecompressedSize);\n     \n     unsigned short *array = new unsigned short[maxDecompressedSize];\n@@ -62,7 +62,7 @@ namespace LE1_NISP_ProcessScience {\n }\n \n \n-  void DecompressorShort::validateInputs(const std::shared_ptr<ByteArray> &compressedData,\n+  void DecompressorShort::validateInputs(const std::shared_ptr<LE1_NISP_Entities::ByteArray> &compressedData,\n                       const size_t maxDecompressedSize) const{\n     if(m_byteArrayCreator == nullptr)\n       throw NullByteArrayCreatorException(\"DecompressorShort::decompress: null ByteArrayCreator\");\n@@ -210,7 +210,7 @@ namespace LE1_NISP_ProcessScience {\n       return 0;\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/DetectorWriterElFitsIO.cpp": [
                        [
                            "@@ -563,7 +563,8 @@ namespace LE1_NISP_Interactors {\n   void DetectorWriterElFitsIO::writeRefPixelProcMode(const Euclid::Fits::Header &header,\n                                                      const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     // To be provided by SOC, setting to a default value 2\n-    writeParamAsUInt(header, metadata->getCommonParameter(\"RPIX_PRC\"));\n+      writeParamAsUInt(header, metadata->getCommonParameter(\"RPIXPRC1\"));\n+      writeParamAsUInt(header, metadata->getCommonParameter(\"RPIXPRC2\"));\n   }\n \n   void DetectorWriterElFitsIO::writeScienceCompressionRatio(const Euclid::Fits::Header &header,\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -21,8 +21,8 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/DetectorWriterElFitsIO.h\"\n-#include \"LE1_NISP_ProcessScience/Utils.h\"\n+#include \"LE1_NISP_Interactors/DetectorWriterElFitsIO.h\"\n+#include \"LE1_NISP_Entities/Utils.h\"\n #include <memory>\n #include \"ElementsKernel/Project.h\"\n #include \"ElementsKernel/Logging.h\"\n@@ -32,15 +32,16 @@ namespace {\n }\n \n using Euclid::Fits::MefFile;\n+using namespace LE1_NISP_Entities;\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n-  DetectorWriterElFitsIO::DetectorWriterElFitsIO(const std::shared_ptr<DateTimeManager> dateTimeManager)\n+  DetectorWriterElFitsIO::DetectorWriterElFitsIO(const std::shared_ptr<LE1_NISP_Entities::DateTimeManager> dateTimeManager)\n   : m_dateTimeManager(dateTimeManager){}\n \n   DetectorWriterElFitsIO::~DetectorWriterElFitsIO(){}\n \n-  std::vector<std::string> DetectorWriterElFitsIO::write(std::shared_ptr<DetectorIterator> detectorIterator, const std::string &outputPath) {\n+  std::vector<std::string> DetectorWriterElFitsIO::write(std::shared_ptr<LE1_NISP_Entities::DetectorIterator> detectorIterator, const std::string &outputPath) {\n     validateInputs(detectorIterator, outputPath);\n     initOutputPath(outputPath);\n \n@@ -59,7 +60,7 @@ namespace LE1_NISP_ProcessScience {\n       logger.info() << \"Writing detector data with ID: \" << det->getId().getScePos();\n       logger.debug() << \"DPU ID: \" << std::to_string(det->getMetadata()->getDpuId());\n       logger.debug() << \"MASTER: \" << std::to_string(det->getMetadata()->getMasterDpuId());\n-      logger.debug() << \"OBT   : \" << det->getMetadata()->getObt()->toIsoExtended();\n+      logger.debug() << \"OBT   : \" << det->getMetadata()->getObt()->getIsoExtendedString();\n       logger.debug() << \"OBT1  : \" << det->getMetadata()->getObt1();\n       logger.debug() << \"OBT2  : \" << det->getMetadata()->getObt2();\n       logger.debug() << \"OBT3  : \" << det->getMetadata()->getObt3();\n@@ -72,7 +73,7 @@ namespace LE1_NISP_ProcessScience {\n     return filenames;\n   }\n \n-  void DetectorWriterElFitsIO::validateInputs(const std::shared_ptr<DetectorIterator> detItr, const std::string &outputPath) const{\n+  void DetectorWriterElFitsIO::validateInputs(const std::shared_ptr<LE1_NISP_Entities::DetectorIterator> detItr, const std::string &outputPath) const{\n     validateOutputPath(outputPath);\n     validateDetectorIterator(detItr);\n     validateDateTimeManager();\n@@ -98,14 +99,14 @@ namespace LE1_NISP_ProcessScience {\n                                         \"DateTimeManager is set to nullptr\");\n \n   }\n-  void DetectorWriterElFitsIO::validateDetectorIterator(const std::shared_ptr<DetectorIterator> detectorIterator) const{\n+  void DetectorWriterElFitsIO::validateDetectorIterator(const std::shared_ptr<LE1_NISP_Entities::DetectorIterator> detectorIterator) const{\n     if(detectorIterator == nullptr)\n       throw NullDetectorIteratorException(m_writerName + \n                                           \"WriterElFitsIO::validateDetectorIterator: \"\n                                           \"DeterctorIterator is nullptr\");\n   }\n \n-  void DetectorWriterElFitsIO::validateDetector(const std::shared_ptr<Detector> detector) const{\n+  void DetectorWriterElFitsIO::validateDetector(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) const{\n     if(!detector)\n       throw NullDetectorException(m_writerName + \n                                   \"WriterElFitsIO::validateDetector: \"\n@@ -127,9 +128,9 @@ namespace LE1_NISP_ProcessScience {\n       m_outputPath += '/';\n   }\n \n-  std::shared_ptr<DetectorMetadata> DetectorWriterElFitsIO::getPrimaryDetectorMetadata(const std::shared_ptr<DetectorIterator> detectorIterator) const{\n+  std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> DetectorWriterElFitsIO::getPrimaryDetectorMetadata(const std::shared_ptr<LE1_NISP_Entities::DetectorIterator> detectorIterator) const{\n \n-    std::shared_ptr<Detector> selectedDet;\n+    std::shared_ptr<LE1_NISP_Entities::Detector> selectedDet;\n     detectorIterator->first();\n     if(detectorIterator->hasNext()){\n       auto det = detectorIterator->getNext();\n@@ -160,57 +161,57 @@ namespace LE1_NISP_ProcessScience {\n                                       \"No detector have been found\");\n   }\n \n-  std::string DetectorWriterElFitsIO::createFilename(const std::shared_ptr<DetectorMetadata> metadata, \n+  std::string DetectorWriterElFitsIO::createFilename(const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> metadata,\n                                                     const std::string &productType){\n     return metadata->getProductId() + \n            \"_\" + productType + \"_\" + \n-           m_dateTimeManager->getDateTimeIsoStr() + \"Z\"\n+           m_dateTimeManager->getCurrentDateTime()->getIsoString() + \"Z\"\n            \".fits\";\n   }\n \n-  void DetectorWriterElFitsIO::writeParamAsBool(const Euclid::Fits::Header& hdu, const std::shared_ptr<const ParameterInterface> param) const {\n+  void DetectorWriterElFitsIO::writeParamAsBool(const Euclid::Fits::Header& hdu, const std::shared_ptr<const LE1_NISP_Entities::ParameterInterface> param) const {\n     hdu.write(param->getName(),\n               static_cast<bool>(param->getValueAsUInt()),\n               param->getUnit(),\n               param->getComment());\n   }\n \n-  void DetectorWriterElFitsIO::writeParamAsUInt8(const Euclid::Fits::Header& hdu, const std::shared_ptr<const ParameterInterface> param) const {\n+  void DetectorWriterElFitsIO::writeParamAsUInt8(const Euclid::Fits::Header& hdu, const std::shared_ptr<const LE1_NISP_Entities::ParameterInterface> param) const {\n     hdu.write(param->getName(),\n                     param->getValueAsUInt8(), \n                     param->getUnit(), \n                     param->getComment());\n   }\n \n-  void DetectorWriterElFitsIO::writeParamAsUInt16(const Euclid::Fits::Header& hdu, const std::shared_ptr<const ParameterInterface> param) const {\n+  void DetectorWriterElFitsIO::writeParamAsUInt16(const Euclid::Fits::Header& hdu, const std::shared_ptr<const LE1_NISP_Entities::ParameterInterface> param) const {\n     hdu.write(param->getName(),\n                     param->getValueAsUInt16(), \n                     param->getUnit(), \n                     param->getComment());\n   }\n \n-  void DetectorWriterElFitsIO::writeParamAsUInt(const Euclid::Fits::Header& hdu, const std::shared_ptr<const ParameterInterface> param) const {\n+  void DetectorWriterElFitsIO::writeParamAsUInt(const Euclid::Fits::Header& hdu, const std::shared_ptr<const LE1_NISP_Entities::ParameterInterface> param) const {\n     hdu.write(param->getName(),\n                     param->getValueAsUInt(),\n                     param->getUnit(),\n                     param->getComment());\n   }\n \n-  void DetectorWriterElFitsIO::writeParamAsString(const Euclid::Fits::Header& hdu, const std::shared_ptr<const ParameterInterface> param) const {\n+  void DetectorWriterElFitsIO::writeParamAsString(const Euclid::Fits::Header& hdu, const std::shared_ptr<const LE1_NISP_Entities::ParameterInterface> param) const {\n     hdu.write(param->getName(),\n                     param->getValueAsString(),\n                     param->getUnit(),\n                     param->getComment());\n   }\n \n-  void DetectorWriterElFitsIO::writeParamAsDouble(const Euclid::Fits::Header& hdu, const std::shared_ptr<const ParameterInterface> param) const {\n+  void DetectorWriterElFitsIO::writeParamAsDouble(const Euclid::Fits::Header& hdu, const std::shared_ptr<const LE1_NISP_Entities::ParameterInterface> param) const {\n     hdu.write(param->getName(),\n                     param->getValueAsDouble(),\n                     param->getUnit(),\n                     param->getComment());\n   }\n \n-  void DetectorWriterElFitsIO::setDateTimeManager(const std::shared_ptr<DateTimeManager> dateTimeManager){\n+  void DetectorWriterElFitsIO::setDateTimeManager(const std::shared_ptr<LE1_NISP_Entities::DateTimeManager> dateTimeManager){\n     m_dateTimeManager = dateTimeManager;\n   }\n \n@@ -218,7 +219,7 @@ namespace LE1_NISP_ProcessScience {\n     return m_outputPath;\n   }\n \n-  void DetectorWriterElFitsIO::writeImageExtHeaderMandatoryKeywords(const Euclid::Fits::Header& header, const std::shared_ptr<Detector> detector){\n+  void DetectorWriterElFitsIO::writeImageExtHeaderMandatoryKeywords(const Euclid::Fits::Header& header, const std::shared_ptr<LE1_NISP_Entities::Detector> detector){\n       auto metadata = detector->getMetadata();\n \n       writeDetectorId(header, detector);\n@@ -232,7 +233,7 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n   void DetectorWriterElFitsIO::writeCommonMetadata(const Euclid::Fits::Header &header,\n-                                                   const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                   const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     std::string instrument = \"NISP\";\n \n     if(metadata->getPlanningId()->getInstrument() != instrument)\n@@ -244,39 +245,39 @@ namespace LE1_NISP_ProcessScience {\n     writeParamAsString(header, metadata->getCommonParameter(\"TELESCOP\"));\n     writeParamAsString(header, metadata->getCommonParameter(\"INSTRUME\"));\n     writeParamAsString(header, metadata->getCommonParameter(\"VERSION\"));\n-    header.write(\"DATE\", m_dateTimeManager->getDateTime()->getIsoExtendedString(), \"\", \"UT date when this file was created\");\n+    header.write(\"DATE\", m_dateTimeManager->getCurrentDateTime()->getIsoExtendedString(), \"\", \"UT date when this file was created\");\n     writeParamAsString(header, metadata->getCommonParameter(\"ORIGIN\"));\n     writeParamAsString(header, metadata->getCommonParameter(\"OBASW\"));\n     header.write(\"SOFTVERS\", Elements::Project::versionString(), \"\", \"Version of the processing function\");\n   }\n \n   void DetectorWriterElFitsIO::writeObtObs(const Euclid::Fits::Header &header,\n-                                           const std::shared_ptr<DetectorMetadata> &metadata) const {\n-    header.write(\"OBT-OBS\", metadata->getObt()->toIsoExtended(), \"\",  \"On-Board Time of the observation (start), e.g. '2014-03-15T09:30:09.313'\");\n+                                           const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n+    header.write(\"OBT-OBS\", metadata->getObt()->getIsoExtendedString(), \"\",  \"On-Board Time of the observation (start), e.g. '2014-03-15T09:30:09.313'\");\n   }\n \n   void DetectorWriterElFitsIO::writeObtStaParams(const Euclid::Fits::Header &header,\n-                                                 const std::shared_ptr<DetectorMetadata> &metadata) const {\n-    header.write(\"OBT_STA1\", metadata->getObt()->coarseTime(), \"s\", \"number of seconds of OBT (START_TIME)\");\n-    header.write(\"OBT_STA2\", metadata->getObt()->fineTimeMusec(), \"mu s\",  \"number of microseconds of OBT (START_TIME)\");\n+                                                 const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n+    header.write(\"OBT_STA1\", metadata->getObt()->getCoarseTime(), \"s\", \"number of seconds of OBT (START_TIME)\");\n+    header.write(\"OBT_STA2\", metadata->getObt()->getFineTimeMicroSeconds(), \"mu s\", \"number of microseconds of OBT (START_TIME)\");\n   }\n \n   void DetectorWriterElFitsIO::writeObtParams(const Euclid::Fits::Header &header,\n-                                              const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                              const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"OBT1\"));\n     writeParamAsUInt16(header, metadata->getParameter(\"OBT2\"));\n     writeParamAsUInt16(header, metadata->getParameter(\"OBT3\"));\n   }\n \n   void DetectorWriterElFitsIO::writeObsDateTime(const Euclid::Fits::Header &header,\n-                                                const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     // To be set by SOC. Now setting it equal to the OBT\n-    header.write(\"DATE-OBS\", metadata->getObt()->toIsoExtended(), \"\", \"UTC Date of observation (start), e.g. '2014-03-15T09:30:09.313'\");\n-    header.write(\"MJD-OBS\", metadata->getObt()->toModifiedJulianDay(), \"\", \"MJD start time, e.g. 56731.39594113\");\n+    header.write(\"DATE-OBS\", metadata->getObt()->getIsoExtendedString(), \"\", \"UTC Date of observation (start), e.g. '2014-03-15T09:30:09.313'\");\n+    header.write(\"MJD-OBS\", metadata->getObt()->getModifiedJulianDay(), \"\", \"MJD start time, e.g. 56731.39594113\");\n   }\n \n   void DetectorWriterElFitsIO::writeDataProductParams(const Euclid::Fits::Header &header,\n-                                                      const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                      const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     header.write(\"IMG_CAT\", metadata->getExposureConfiguration()->getProductCategory(), \"\", \"DP category (SCIENCE, CALIB, ...)\");\n     header.write(\"IMG_T1\", metadata->getExposureConfiguration()->getProductFirstType(), \"\", \"DP type (OBJ, SRD, DARK, ...)\");\n     header.write(\"IMG_T2\", metadata->getExposureConfiguration()->getProductSecondType(), \"\", \"DP type (LAMP, SKY, ...)\");\n@@ -285,19 +286,19 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n   void DetectorWriterElFitsIO::writeReadMode(const Euclid::Fits::Header &header,\n-                                             const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                             const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     header.write(\"READMODE\", metadata->getReadoutMode(), \"\", \"Readout Mode Method: (Multiaccum, UpTheRamp, FowlerSamples)\");\n   }\n \n   void DetectorWriterElFitsIO::writeMaccParams(const Euclid::Fits::Header &header,\n-                                               const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                               const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt8(header, metadata->getParameter(\"NR\"));\n     writeParamAsUInt8(header, metadata->getParameter(\"NG\"));\n-    header.write(\"ND\", metadata->getMaccDropedFrames(), \"\", \"MACC Number of drops\");\n+    header.write(\"ND\", metadata->getMaccDroppedFrames(), \"\", \"MACC Number of drops\");\n   }\n \n   void DetectorWriterElFitsIO::writeExposureTimeParams(const Euclid::Fits::Header &header,\n-                                                       const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                       const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     header.write(\"FRTIME\", metadata->getFrameTime(), \"\", \"Exposure time in seconds for single readout sample. Default value =1.45 sec\");\n     header.write(\"LINETIME\", metadata->getLineTime(),\"\", \"Time in seconds to read a single line of 2048 pixels. Default value = 710E-6\");\n     header.write(\"EXPTIME\", metadata->getExposureTime(), \"\", \"Effective integration time in seconds, e.g. 60.0005\");\n@@ -305,7 +306,7 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n   void DetectorWriterElFitsIO::writePointingParams(const Euclid::Fits::Header &header,\n-                                                   const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                   const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsDouble(header, metadata->getCommonParameter(\"RA\"));\n     writeParamAsDouble(header, metadata->getCommonParameter(\"DEC\"));\n     writeParamAsDouble(header, metadata->getCommonParameter(\"PA\"));\n@@ -314,7 +315,7 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n   void DetectorWriterElFitsIO::writeObservationIds(const Euclid::Fits::Header &header,\n-                                                   const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                   const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writePlanId(header, metadata);\n     header.write(\"OBS_ID\", metadata->getPlanningId()->getObservationId(), \"\", \"Observation ID, e.g. 1\");\n     header.write(\"DITHOBS\", metadata->getPlanningId()->getDitherId(), \"\", \"Number sequence of dithering, e.g. 1\");\n@@ -322,13 +323,13 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n   void DetectorWriterElFitsIO::writePlanId(const Euclid::Fits::Header &header,\n-                                           const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                           const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     auto planIdParam = metadata->getParameter(\"PLAN_ID\");\n     header.write(planIdParam->getName(), metadata->getPlanningId()->getRawValue(), planIdParam->getUnit(),planIdParam->getComment());\n   }\n \n   void DetectorWriterElFitsIO::writeExposureCounters(const Euclid::Fits::Header &header,\n-                                                     const std::shared_ptr<DetectorMetadata> &metadata,\n+                                                     const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata,\n                                                      const size_t totalExpCnt) const {\n \n     // EXPNUM and TOTEXP can only be know depending on the sequence commanded\n@@ -337,7 +338,7 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n   void DetectorWriterElFitsIO::writeFwaConfig(const Euclid::Fits::Header &header,\n-                                               const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                               const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     header.write(\"FWA_POS\", metadata->getExposureConfiguration()->getFwaPos(), \"\", \"FWA position (J,H,Y,OPEN,CLOSED, HOMECHECK)\");\n     // To be provided by SOC\n     writeParamAsUInt(header, metadata->getCommonParameter(\"FWA_ANG\"));\n@@ -345,7 +346,7 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n   void DetectorWriterElFitsIO::writeGwaConfig(const Euclid::Fits::Header &header,\n-                                              const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                              const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     header.write(\"GWA_POS\", metadata->getExposureConfiguration()->getGwaPos(), \"\", \"GWA position (RGS270,RGS000,RGS180,BGS000,OPEN, HOMECHECK)\");\n     // To be provided by SOC\n     writeParamAsUInt(header, metadata->getCommonParameter(\"GWA_ANG\"));\n@@ -355,50 +356,50 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n   void DetectorWriterElFitsIO::writeInstrumentConfig(const Euclid::Fits::Header &header,\n-                                                     const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                     const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     header.write(\"KEYS_CNF\", metadata->getExposureConfiguration()->getKeysConfigCaption(), \"\", \"Keys configuration. Derived from EXP_CNF. Enumerative\");\n     header.write(\"INST_CNF\", metadata->getExposureConfiguration()->getInstConfigCaption(), \"\", \"Instrument configuration. Derived from EXP_CNF. Enumerative\");\n   }\n \n   void DetectorWriterElFitsIO::writeExposureConfig(const Euclid::Fits::Header &header,\n-                                                   const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                   const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"EXP_CNF\"));\n   }\n \n   void DetectorWriterElFitsIO::writeCuState(const Euclid::Fits::Header &header,\n-                                            const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                            const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     // CU_STATE, LED_ID and FLUX_ID are provided by SOC\n     writeParamAsBool(header, metadata->getCommonParameter(\"CU_STATE\"));\n   }\n \n   void DetectorWriterElFitsIO::writeAcquisitionCounter(const Euclid::Fits::Header &header,\n-                                                       const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                       const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt8(header, metadata->getParameter(\"ACQ_CNT\"));\n   }\n \n   void DetectorWriterElFitsIO::writeTotalResets(const Euclid::Fits::Header &header,\n-                                                const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"T_RESETS\"));\n   }\n \n   void DetectorWriterElFitsIO::writeTotalReads(const Euclid::Fits::Header &header,\n-                                               const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                               const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"T_READS\"));\n   }\n \n   void DetectorWriterElFitsIO::writeTotalDropLines(const Euclid::Fits::Header &header,\n-                                                   const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                   const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"T_DROPL1\"));\n     header.write(\"T_DROPL2\", metadata->getPostReadDropLines(), \"\", \"[12:13]: PostRead DropLines\");\n   }\n \n   void DetectorWriterElFitsIO::writeTotalGroups(const Euclid::Fits::Header &header,\n-                                                const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"T_GROUPS\"));\n   }\n \n   void DetectorWriterElFitsIO::writeCurrentRampCounters(const Euclid::Fits::Header &header,\n-                                                        const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                        const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"RESETS\"));\n     writeParamAsUInt16(header, metadata->getParameter(\"READS\"));\n     writeParamAsUInt16(header, metadata->getParameter(\"DROPL1\"));\n@@ -407,82 +408,82 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n   void DetectorWriterElFitsIO::writeModeStatus(const Euclid::Fits::Header &header,\n-                                               const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                               const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"MODESTAT\"));\n   }\n \n   void DetectorWriterElFitsIO::writeRampStatus(const Euclid::Fits::Header &header,\n-                                               const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                               const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"RAMPSTAT\"));\n   }\n \n   void DetectorWriterElFitsIO::writeCompressionParams(const Euclid::Fits::Header &header,\n-                                                      const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                      const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"CMP_BLKS\"));\n     writeParamAsUInt16(header, metadata->getParameter(\"CMPFSBIT\"));\n     writeParamAsUInt16(header, metadata->getParameter(\"CMPFSMAX\"));\n   }\n \n   void DetectorWriterElFitsIO::writeTimeTagDelay(const Euclid::Fits::Header &header,\n-                                                 const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                 const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"TMTAGDEL\"));\n   }\n \n   void DetectorWriterElFitsIO::writeSignalParams(const Euclid::Fits::Header &header,\n-                                                 const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                 const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"S_OFFSET\"));\n     writeParamAsUInt16(header, metadata->getParameter(\"S_FACTOR\"));\n   }\n \n   void DetectorWriterElFitsIO::writeHistoryParamIndex(const Euclid::Fits::Header &header,\n-                                                      const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                      const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"TLMHISTP\"));\n   }\n \n   void DetectorWriterElFitsIO::writeDetectorId(const Euclid::Fits::Header &header,\n-                                               const std::shared_ptr<Detector> &detector) const {\n+                                               const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const {\n     header.write(\"DET_ID\", detector->getId().getScePos(), \"\", \"Detector ID, e.g. '13'\");\n   }\n \n   void DetectorWriterElFitsIO::writeSceIndex(const Euclid::Fits::Header &header,\n-                                             const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                             const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt8(header,  metadata->getParameter(\"SCEINDEX\"));\n   }\n \n   void DetectorWriterElFitsIO::writeScaId(const Euclid::Fits::Header &header,\n-                                             const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                             const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     header.write(\"SCA_ID\", metadata->getScaId(), \"\", \"SCA full name given by NASA\");\n   }\n \n   void DetectorWriterElFitsIO::writeSceStatus(const Euclid::Fits::Header &header,\n-                                              const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                              const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsBool(header,  metadata->getParameter(\"SCE_STAT\"));\n   }\n \n   void DetectorWriterElFitsIO::writePacketType(const Euclid::Fits::Header &header,\n-                                               const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                               const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt8(header,  metadata->getParameter(\"PKT_TYPE\"));\n   }\n \n   void DetectorWriterElFitsIO::writeCommandCounters(const Euclid::Fits::Header &header,\n-                                                    const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                    const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"VCMD_CNT\"));\n     writeParamAsUInt16(header, metadata->getParameter(\"RCMD_CNT\"));\n   }\n \n   void DetectorWriterElFitsIO::writeCheckErrors(const Euclid::Fits::Header &header,\n-                                                const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"LCHK_ERR\"));\n     writeParamAsUInt16(header, metadata->getParameter(\"FCHK_ERR\"));\n   }\n \n   void DetectorWriterElFitsIO::writeAliveCounter(const Euclid::Fits::Header &header,\n-                                                 const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                 const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"ALIVECNT\"));\n   }\n \n   void DetectorWriterElFitsIO::writeIpcParams(const Euclid::Fits::Header &header,\n-                                              const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                              const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"IPCVSPOS\"));\n     writeParamAsUInt16(header, metadata->getParameter(\"IPCVSPAC\"));\n     writeParamAsUInt16(header, metadata->getParameter(\"IPCHSPOS\"));\n@@ -491,67 +492,67 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n   void DetectorWriterElFitsIO::writePreampParams(const Euclid::Fits::Header &header,\n-                                                 const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                 const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"SHORTPIR\"));\n     writeParamAsUInt16(header, metadata->getParameter(\"PREAGAIN\"));\n   }\n \n   void DetectorWriterElFitsIO::writeTestPatternParams(const Euclid::Fits::Header &header,\n-                                                      const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                      const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"P_TYPE\"));\n     writeParamAsUInt16(header, metadata->getParameter(\"P_SLOPE\"));\n     writeParamAsUInt16(header, metadata->getParameter(\"P_OFFSET\"));\n   }\n \n   void DetectorWriterElFitsIO::writeDetectorReadOutNoise(const Euclid::Fits::Header &header,\n-                                                         const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                         const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"RON_DET\"));\n   }\n \n   void DetectorWriterElFitsIO::writeDetectorGainFactor(const Euclid::Fits::Header &header,\n-                                                       const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                       const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"GAIN_DET\"));\n   }\n \n   void DetectorWriterElFitsIO::writeChi2Threshold(const Euclid::Fits::Header &header,\n-                                                  const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                  const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"CHI2THRE\"));\n   }\n \n   void DetectorWriterElFitsIO::writeUsedRawLines(const Euclid::Fits::Header &header,\n-                                                 const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                 const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"N_RAWLIN\"));\n   }\n \n   void DetectorWriterElFitsIO::writeKtcCicles(const Euclid::Fits::Header &header,\n-                                              const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                              const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"DTEXPNUM\"));\n   }\n \n   void DetectorWriterElFitsIO::writeDpuParams(const Euclid::Fits::Header &header,\n-                                              const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                              const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt8(header,  metadata->getParameter(\"DPU_ID\"));\n     writeParamAsUInt8(header,  metadata->getParameter(\"MASTER\"));\n   }\n \n   void DetectorWriterElFitsIO::writeCompressionFactors(const Euclid::Fits::Header &header,\n-                                                       const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                       const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"S_COMPR\"));\n     writeParamAsUInt16(header, metadata->getParameter(\"C_COMPR\"));\n   }\n \n   void DetectorWriterElFitsIO::writeProcessingExecTime(const Euclid::Fits::Header &header,\n-                                                       const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                       const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"PROC_T\"));\n   }\n \n   void DetectorWriterElFitsIO::writeCrcMask(const Euclid::Fits::Header &header,\n-                                            const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                            const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"CRCGMASK\"));\n   }\n \n   void DetectorWriterElFitsIO::writeRawlineIndexes(const Euclid::Fits::Header &header,\n-                                                   const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                   const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     writeParamAsUInt16(header, metadata->getParameter(\"RAWLINE1\"));\n     writeParamAsUInt16(header, metadata->getParameter(\"RAWLINE2\"));\n     writeParamAsUInt16(header, metadata->getParameter(\"RAWLINE3\"));\n@@ -560,24 +561,24 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n   void DetectorWriterElFitsIO::writeRefPixelProcMode(const Euclid::Fits::Header &header,\n-                                                     const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                     const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     // To be provided by SOC, setting to a default value 2\n     writeParamAsUInt(header, metadata->getCommonParameter(\"RPIX_PRC\"));\n   }\n \n   void DetectorWriterElFitsIO::writeScienceCompressionRatio(const Euclid::Fits::Header &header,\n-                                                            const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                            const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     header.write(\"CMPRTSCI\", metadata->getScienceCompressionRatio(), \"\", \"Detector image compression ratio obtained on-board\");\n   }\n \n   void DetectorWriterElFitsIO::writeDataQualityCompressionRatio(const Euclid::Fits::Header &header,\n-                                                             const std::shared_ptr<DetectorMetadata> &metadata) const {\n+                                                             const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const {\n     header.write(\"CMPRTX2\", metadata->getQualityDataCompressionRatio(), \"\", \"CHI2 compression ratio obtained on-board\");\n   }\n \n \n   void DetectorWriterElFitsIO::writeWcsKeywords(const Euclid::Fits::Header& header,\n-                                                const std::shared_ptr<LE1_NISP_ProcessScience::DetectorMetadata> &metadata) {\n+                                                const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) {\n \n     Euclid::Fits::Record<double> crVal1(\"CRVAL1\", metadata->getWcs().crVal(0), metadata->getWcs().cUnit1, \"Right ascension at ref pixel\");\n     Euclid::Fits::Record<double> crVal2(\"CRVAL2\", metadata->getWcs().crVal(1), metadata->getWcs().cUnit2, \"Declination at ref pixel\");\n@@ -601,7 +602,7 @@ namespace LE1_NISP_ProcessScience {\n     header.write(cd22);\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/QualityDataDecoder.cpp": [
                        [
                            "@@ -53,14 +53,14 @@ namespace LE1_NISP_Interactors {\n \n     double comprRatio = 1;\n \n-    if (detector->getQualityDataSection()->getSize() != 0 && isQualityDataCompressed(detector)) {\n+    if (isQualityDataCompressed(detector)) {\n       initCompressionParams(detector);\n       auto decompressedData = m_decompressor->decompress(data, data->getSize(), m_comprParams);\n \n       validatePointer<NullByteArrayException>(decompressedData,\n                                               m_decoderName + \"Decoder::decode: null ByteArray. \"\n                                               \"Some problem occurred during decompression\");\n-      comprRatio = (double) decompressedData->getSize() / (double) data->getSize();\n+      comprRatio = computeCompressionRatio(data->getSize(), decompressedData->getSize());\n       data = decompressedData;\n     }\n \n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -21,10 +21,13 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/QualityDataDecoder.h\"\n-#include \"LE1_NISP_ProcessScience/Utils.h\"\n+#include \"LE1_NISP_Interactors/QualityDataDecoder.h\"\n+#include \"LE1_NISP_Entities/Utils.h\"\n+#include \"LE1_NISP_Interactors/Exception.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+using namespace LE1_NISP_Entities;\n+\n+namespace LE1_NISP_Interactors {\n \n   QualityDataSpectroDecoder::QualityDataSpectroDecoder(const std::shared_ptr<Decompressor> decompressor)\n     : m_decompressor(decompressor),\n@@ -35,7 +38,7 @@ namespace LE1_NISP_ProcessScience {\n \n   QualityDataSpectroDecoder::~QualityDataSpectroDecoder(){}\n \n-  std::shared_ptr<ByteArray> QualityDataSpectroDecoder::decode(const std::shared_ptr<Detector> detector) {\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> QualityDataSpectroDecoder::decode(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) {\n     validateInputs(detector);\n \n     auto data = detector->getTelemetryDetector()->readBytes(detector->getQualityDataSection()->getOffset(), \n@@ -66,12 +69,12 @@ namespace LE1_NISP_ProcessScience {\n     return data;\n   }\n \n-  void QualityDataSpectroDecoder::validateInputs(const std::shared_ptr<Detector> &detector) const {\n+  void QualityDataSpectroDecoder::validateInputs(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const {\n     validateDecompressor();\n     validateDetector(detector);\n   }\n \n-  void QualityDataSpectroDecoder::validateDetector(const std::shared_ptr<Detector> &detector) const {\n+  void QualityDataSpectroDecoder::validateDetector(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const {\n     validatePointer<NullDetectorException>(detector,\n                                            \"QualityDataSpectroDecoder::validateDetector: \"\n                                            \"null Detector\");\n@@ -84,7 +87,7 @@ namespace LE1_NISP_ProcessScience {\n                                                     \"QualityDataSpectroDecoder::validateDetector: \"\n                                                     \"null TelemetryDetector\");\n \n-    validatePointer<NullTelemetryConfigurationException>(detector->getTelemetryConfiguration(),\n+    validatePointer<LE1_NISP_Entities::NullTelemetryConfigurationException>(detector->getTelemetryConfiguration(),\n                                                          \"QualityDataSpectroDecoder::validateDetector: \"\n                                                          \"null TelemetryConfiguration\");\n \n@@ -107,11 +110,11 @@ namespace LE1_NISP_ProcessScience {\n                                                \"null Decompressor\");\n   }\n \n-  bool QualityDataSpectroDecoder::isQualityDataCompressed(const std::shared_ptr<Detector> &detector) const {\n+  bool QualityDataSpectroDecoder::isQualityDataCompressed(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const {\n     return detector->isQualityDataSpectroCompressed();\n   }\n \n-  void QualityDataSpectroDecoder::initCompressionParams(const std::shared_ptr<Detector> &detector) {\n+  void QualityDataSpectroDecoder::initCompressionParams(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) {\n     m_comprParams.setComprBlockSize(detector->getMetadata()->getUsedComprBlockSize());\n     m_comprParams.setComprFundSeqPar1(3);\n     m_comprParams.setComprFundSeqPar2(6);\n@@ -119,7 +122,7 @@ namespace LE1_NISP_ProcessScience {\n   }\n   \n   QualityDataPhotoDecoder::QualityDataPhotoDecoder(const std::shared_ptr<Decompressor> decompressor, \n-                                                   const std::shared_ptr<ByteArrayCreator> byteArrayCreator)\n+                                                   const std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> byteArrayCreator)\n     : QualityDataSpectroDecoder(decompressor), \n       m_byteArrayCreator(byteArrayCreator)\n     {\n@@ -128,11 +131,11 @@ namespace LE1_NISP_ProcessScience {\n \n   QualityDataPhotoDecoder::~QualityDataPhotoDecoder(){}\n \n-  std::shared_ptr<ByteArray> QualityDataPhotoDecoder::decode(const std::shared_ptr<Detector> detector) {\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> QualityDataPhotoDecoder::decode(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) {\n     return bytesToPixels(QualityDataSpectroDecoder::decode(detector));  \n   }\n \n-  void QualityDataPhotoDecoder::validateInputs(const std::shared_ptr<Detector> &detector) const {\n+  void QualityDataPhotoDecoder::validateInputs(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const {\n     validateDecompressor();\n     validateByteArrayCreator();\n     validateDetector(detector);\n@@ -144,18 +147,18 @@ namespace LE1_NISP_ProcessScience {\n                                                    \"null ByteArrayCreator\");\n   }\n \n-  bool QualityDataPhotoDecoder::isQualityDataCompressed(const std::shared_ptr<Detector> &detector) const {\n+  bool QualityDataPhotoDecoder::isQualityDataCompressed(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const {\n     return detector->isQualityDataPhotoCompressed();\n   }\n   \n-  void QualityDataPhotoDecoder::initCompressionParams(const std::shared_ptr<Detector> &detector) {\n+  void QualityDataPhotoDecoder::initCompressionParams(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) {\n     m_comprParams.setComprBlockSize(detector->getMetadata()->getUsedComprBlockSize());\n     m_comprParams.setComprFundSeqPar1(3);\n     m_comprParams.setComprFundSeqPar2(6);\n     m_comprParams.setNumberOfValues(detector->getTelemetryConfiguration()->getQualityDataPhotoNumberOfValues());\n   }\n \n-  std::shared_ptr<ByteArray> QualityDataPhotoDecoder::bytesToPixels(const std::shared_ptr<ByteArray> &inputData) {\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> QualityDataPhotoDecoder::bytesToPixels(const std::shared_ptr<LE1_NISP_Entities::ByteArray> &inputData) {\n     auto outputData = m_byteArrayCreator->create(inputData->getSize() * 8);\n     int pxItr = 0;\n     uint8_t bytePixel;\n@@ -181,11 +184,11 @@ namespace LE1_NISP_ProcessScience {\n     m_decompressor = decompressor;\n   }\n \n-  void QualityDataPhotoDecoder::setByteArrayCreator(const std::shared_ptr<ByteArrayCreator> byteArrayCreator) {\n+  void QualityDataPhotoDecoder::setByteArrayCreator(const std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> byteArrayCreator) {\n     m_byteArrayCreator = byteArrayCreator;\n   }\n   \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/ScienceDecoder.cpp": [
                        [
                            "@@ -51,17 +51,16 @@ namespace LE1_NISP_Interactors {\n       decodedData = m_decompressor->decompress(data,\n                                                detector->getTelemetryConfiguration()->getScienceDataMaxSize(),\n                                                comprParams);\n+      comprRatio = computeCompressionRatio(data->getSize(), decodedData->getSize());\n     }\n     else\n       decodedData = data->swap16();\n \n-    comprRatio = (double) decodedData->getSize() / (double) data->getSize();\n     detector->getMetadata()->setScienceCompressionRatio(comprRatio);\n \n     return decodedData;\n   }\n \n-\n   void ScienceDecoder::validateDetector(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const{\n     validatePointer<NullDetectorException>(detector,\n                                            \"ScienceDecoder::validateDetector: \"\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -21,27 +21,30 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/ScienceDecoder.h\"\n-#include \"LE1_NISP_ProcessScience/Utils.h\"\n+#include \"LE1_NISP_Interactors/ScienceDecoder.h\"\n+#include \"LE1_NISP_Entities/Utils.h\"\n+#include \"LE1_NISP_Interactors/Exception.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+using namespace LE1_NISP_Entities;\n+\n+namespace LE1_NISP_Interactors {\n \n   ScienceDecoder::ScienceDecoder(const std::shared_ptr<Decompressor> decompressor)\n   : m_decompressor(decompressor){}\n \n   ScienceDecoder::~ScienceDecoder(){}\n \n-  std::shared_ptr<ByteArray> ScienceDecoder::decode(const std::shared_ptr<Detector> detector) {\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> ScienceDecoder::decode(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) {\n     validateDecompressor();\n     validateDetector(detector);\n \n     auto data = detector->getTelemetryDetector()->readBytes(detector->getScienceSection()->getOffset(),\n                                                             detector->getScienceSection()->getSize());\n     double comprRatio = 1;\n-    std::shared_ptr<ByteArray> decodedData;\n+    std::shared_ptr<LE1_NISP_Entities::ByteArray> decodedData;\n \n     if(detector->isScienceCompressed()){\n-      CompressionParams comprParams(detector->getMetadata()->getUsedComprBlockSize(),\n+      LE1_NISP_Entities::CompressionParams comprParams(detector->getMetadata()->getUsedComprBlockSize(),\n                                     detector->getMetadata()->getUsedComprFundSeqPar1(),\n                                     detector->getMetadata()->getUsedComprFundSeqPar2(),\n                                     detector->getTelemetryConfiguration()->getScienceDataNumberOfValues());\n@@ -59,7 +62,7 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n \n-  void ScienceDecoder::validateDetector(const std::shared_ptr<Detector> &detector) const{\n+  void ScienceDecoder::validateDetector(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const{\n     validatePointer<NullDetectorException>(detector,\n                                            \"ScienceDecoder::validateDetector: \"\n                                            \"null Detector\");\n@@ -72,7 +75,7 @@ namespace LE1_NISP_ProcessScience {\n                                                     \"ScienceDecoder::validateDetector: \"\n                                                     \"null TelemetryDetector\");\n \n-    validatePointer<NullTelemetryConfigurationException>(detector->getTelemetryConfiguration(),\n+    validatePointer<LE1_NISP_Entities::NullTelemetryConfigurationException>(detector->getTelemetryConfiguration(),\n                                                          \"ScienceDecoder::validateDetector: \"\n                                                          \"null TelemetryConfiguration\");\n \n@@ -87,7 +90,7 @@ namespace LE1_NISP_ProcessScience {\n                                                \"null Decompressor\");\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/ScienceWriterElFitsIO.cpp": [
                        [
                            "@@ -73,6 +73,7 @@ namespace LE1_NISP_Interactors {\n     writeTotalResets(primary, metadata);\n     writeTotalDropLines(primary, metadata);\n     writeSignalParams(primary, metadata);\n+    writeRefPixelProcMode(primary, metadata);\n   }\n \n   void ScienceWriterElFitsIO::writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<LE1_NISP_Entities::Detector> detector) {\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -21,11 +21,11 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/ScienceWriterElFitsIO.h\"\n+#include \"LE1_NISP_Interactors/ScienceWriterElFitsIO.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n-  ScienceWriterElFitsIO::ScienceWriterElFitsIO(const std::shared_ptr<DateTimeManager> dateTimeManager, const std::shared_ptr<ExposuresCounter> exposuresCounter)\n+  ScienceWriterElFitsIO::ScienceWriterElFitsIO(const std::shared_ptr<LE1_NISP_Entities::DateTimeManager> dateTimeManager, const std::shared_ptr<ExposuresCounter> exposuresCounter)\n   : DetectorWriterElFitsIO(dateTimeManager), m_exposuresCounter(exposuresCounter){\n     m_writerName = \"Science\";\n     m_productType = \"SCI\";\n@@ -42,7 +42,7 @@ namespace LE1_NISP_ProcessScience {\n     validateExposuresCounter();\n   }\n \n-  void ScienceWriterElFitsIO::validateDetectorWriterSpecific(const std::shared_ptr<Detector> &detector) const {\n+  void ScienceWriterElFitsIO::validateDetectorWriterSpecific(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const {\n     if(!detector->getScienceData())\n       throw NullScienceDataException(m_writerName + \n                                               \"WriterElFitsIO::validateDetector: \"\n@@ -50,7 +50,7 @@ namespace LE1_NISP_ProcessScience {\n                                               \"has null Science ByteArray\");\n   } \n \n-  void ScienceWriterElFitsIO::writePrimaryHeader(Euclid::Fits::MefFile& fits, const std::shared_ptr<DetectorMetadata> metadata) {\n+  void ScienceWriterElFitsIO::writePrimaryHeader(Euclid::Fits::MefFile& fits, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> metadata) {\n     auto &primary = fits.primary().header();\n \n     writeCommonMetadata(primary, metadata);\n@@ -75,7 +75,7 @@ namespace LE1_NISP_ProcessScience {\n     writeSignalParams(primary, metadata);\n   }\n \n-  void ScienceWriterElFitsIO::writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<Detector> detector) {\n+  void ScienceWriterElFitsIO::writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<LE1_NISP_Entities::Detector> detector) {\n     auto const metadata = detector->getMetadata();\n \n     std::string prefix = \"DET\" + detector->getId().getScePos();\n@@ -99,7 +99,7 @@ namespace LE1_NISP_ProcessScience {\n     }\n   }\n \n-  void ScienceWriterElFitsIO::writeDataQualityExtensionHeader(const Euclid::Fits::Header &header, const std::shared_ptr<Detector> detector){\n+  void ScienceWriterElFitsIO::writeDataQualityExtensionHeader(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::Detector> detector){\n       auto metadata = detector->getMetadata();\n       writeDetectorId(header, detector);\n       writeDataQualityCompressionRatio(header, metadata);\n@@ -112,7 +112,7 @@ namespace LE1_NISP_ProcessScience {\n                                           \"WriterElFitsIO::validateExposuresCounter: \"\n                                           \"ExposuresCounter is set to nullptr\");\n   } \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/include/ByteArrayCreatorMock.h": [
                        [
                            "@@ -26,6 +26,7 @@\n #define _LE1_NISP_INTERACTORS_BYTEARRAYCREATORMOCK_H\n \n #include \"LE1_NISP_Entities/ByteArrayCreator.h\"\n+#include \"LE1_NISP_Entities/tests/include/ByteArrayMock.h\"\n \n namespace LE1_NISP_Interactors {\n \n@@ -44,6 +45,19 @@ public:\n   }\n };\n \n+class ByteArraySizeOnlyCreator: public LE1_NISP_Entities::ByteArrayCreator{\n+public:\n+  virtual ~ByteArraySizeOnlyCreator() = default;\n+\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> create(const std::unique_ptr<uint8_t[]> data, const size_t size) const override {\n+    (void) data;\n+    return std::make_shared<LE1_NISP_Entities::ByteArraySizeOnly>(size);\n+  }\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> create(const size_t size) const override {\n+    return std::make_shared<LE1_NISP_Entities::ByteArraySizeOnly>(size);\n+  }\n+};\n+\n }// namespace LE1_NISP_Interactors\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -1,6 +1,6 @@\n \n  /**\n- * @file LE1_NISP_ProcessScience/tests/include/ByteArrayCreatorMock.h\n+ * @file LE1_NISP_Interactors/tests/include/ByteArrayCreatorMock.h\n  * @date 11/24/20\n  * @author user\n  *\n@@ -22,28 +22,28 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_BYTEARRAYCREATORMOCK_H\n-#define _LE1_NISP_PROCESSSCIENCE_BYTEARRAYCREATORMOCK_H\n+#ifndef _LE1_NISP_INTERACTORS_BYTEARRAYCREATORMOCK_H\n+#define _LE1_NISP_INTERACTORS_BYTEARRAYCREATORMOCK_H\n \n-#include \"LE1_NISP_ProcessScience//ByteArrayCreator.h\"\n+#include \"LE1_NISP_Entities/ByteArrayCreator.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n-class ByteArrayCreatorDummy: public ByteArrayCreator{\n+class ByteArrayCreatorDummy: public LE1_NISP_Entities::ByteArrayCreator{\n public:\n   virtual ~ByteArrayCreatorDummy() = default;\n \n-  inline virtual std::shared_ptr<ByteArray> create(const std::unique_ptr<uint8_t[]> data, const size_t size) const override { \n+  inline virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> create(const std::unique_ptr<uint8_t[]> data, const size_t size) const override {\n     (void) data;\n     (void) size;\n     return nullptr; \n   }\n-  inline virtual std::shared_ptr<ByteArray> create(const size_t size) const override { \n+  inline virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> create(const size_t size) const override {\n     (void) size;\n     return nullptr;\n   }\n };\n \n-}// namespace LE1_NISP_ProcessScience\n+}// namespace LE1_NISP_Interactors\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/src/DecompressorByte_test.cpp": [
                        [
                            "@@ -33,6 +33,7 @@ using namespace LE1_NISP_Entities;\n struct DecompressorByteFixture_test\n {\n   std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> byteArrayCreatorDummy = std::make_shared<ByteArrayCreatorDummy>();\n+  std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> byteArraySizeOnlyCreator = std::make_shared<ByteArraySizeOnlyCreator>();\n };\n \n \n@@ -50,11 +51,17 @@ BOOST_AUTO_TEST_CASE( GivenNullInputByteArrayShouldThrowNullByteArrayException )\n \n BOOST_AUTO_TEST_CASE( GivenMaxOutputSizeLowerThanInputByteArraySizeShouldThrowMaxDecompressedSizeLowerThenCompressedSizeException ) {\n   BOOST_REQUIRE_THROW(DecompressorByte(byteArrayCreatorDummy).decompress(std::make_shared<ByteArraySizeOnly>(10),\n-                                                     9, \n+                                                     9,\n                                                      LE1_NISP_Entities::CompressionParams()),\n                       MaxDecompressedSizeLowerThenCompressedSizeException);\n }\n \n+BOOST_AUTO_TEST_CASE(GivenInputByteArrayWithZeroSizeShouldReturnAnEmptyByteArray) {\n+  DecompressorByte decompressor(byteArraySizeOnlyCreator);\n+  BOOST_REQUIRE_EQUAL(decompressor.decompress(std::make_shared<ByteArraySizeOnly>(0), 1234,\n+                                              LE1_NISP_Entities::CompressionParams())->getSize(), 0);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END ()\n \n \n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -23,34 +23,35 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//DecompressorByte.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ByteArrayMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ByteArrayCreatorMock.h\"\n+#include \"LE1_NISP_Interactors/DecompressorByte.h\"\n+#include \"LE1_NISP_Entities/tests/include/ByteArrayMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/ByteArrayCreatorMock.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Interactors;\n+using namespace LE1_NISP_Entities;\n \n struct DecompressorByteFixture_test\n {\n-  std::shared_ptr<ByteArrayCreator> byteArrayCreatorDummy = std::make_shared<ByteArrayCreatorDummy>();\n+  std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> byteArrayCreatorDummy = std::make_shared<ByteArrayCreatorDummy>();\n };\n \n \n BOOST_FIXTURE_TEST_SUITE (DecompressorByte_test, DecompressorByteFixture_test)\n \n BOOST_AUTO_TEST_CASE( GivenNullByteArrayCreatorShouldThrowNullByteArrayCreatorException ) {\n-  BOOST_REQUIRE_THROW(DecompressorByte(nullptr).decompress(nullptr, 0, CompressionParams()), \n-                      NullByteArrayCreatorException);\n+  BOOST_REQUIRE_THROW(DecompressorByte(nullptr).decompress(nullptr, 0, LE1_NISP_Entities::CompressionParams()),\n+                      LE1_NISP_Interactors::NullByteArrayCreatorException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenNullInputByteArrayShouldThrowNullByteArrayException ) {\n-  BOOST_REQUIRE_THROW(DecompressorByte(byteArrayCreatorDummy).decompress(nullptr, 0, CompressionParams()), \n+  BOOST_REQUIRE_THROW(DecompressorByte(byteArrayCreatorDummy).decompress(nullptr, 0, LE1_NISP_Entities::CompressionParams()),\n                       NullByteArrayException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenMaxOutputSizeLowerThanInputByteArraySizeShouldThrowMaxDecompressedSizeLowerThenCompressedSizeException ) {\n-  BOOST_REQUIRE_THROW(DecompressorByte(byteArrayCreatorDummy).decompress(std::make_shared<ByteArraySizeOnly>(10), \n+  BOOST_REQUIRE_THROW(DecompressorByte(byteArrayCreatorDummy).decompress(std::make_shared<ByteArraySizeOnly>(10),\n                                                      9, \n-                                                     CompressionParams()), \n+                                                     LE1_NISP_Entities::CompressionParams()),\n                       MaxDecompressedSizeLowerThenCompressedSizeException);\n }\n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/src/DecompressorShort_test.cpp": [
                        [
                            "@@ -33,6 +33,7 @@ using namespace LE1_NISP_Entities;\n struct DecompressorShortFixture_test\n {\n   std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> byteArrayCreatorDummy = std::make_shared<ByteArrayCreatorDummy>();\n+  std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> byteArraySizeOnlyCreator = std::make_shared<ByteArraySizeOnlyCreator>();\n };\n \n \n@@ -55,6 +56,12 @@ BOOST_AUTO_TEST_CASE( GivenMaxOutputSizeLowerThanInputByteArraySizeShouldThrowMa\n                       MaxDecompressedSizeLowerThenCompressedSizeException);\n }\n \n+BOOST_AUTO_TEST_CASE(GivenInputByteArrayWithZeroSizeShouldReturnAnEmptyByteArray) {\n+  DecompressorShort decompressor(byteArraySizeOnlyCreator);\n+  BOOST_REQUIRE_EQUAL(decompressor.decompress(std::make_shared<ByteArraySizeOnly>(0), 1234,\n+                                              LE1_NISP_Entities::CompressionParams())->getSize(), 0);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END ()\n \n \n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -23,34 +23,35 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//DecompressorShort.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ByteArrayMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ByteArrayCreatorMock.h\"\n+#include \"LE1_NISP_Interactors/DecompressorShort.h\"\n+#include \"LE1_NISP_Entities/tests/include/ByteArrayMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/ByteArrayCreatorMock.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Interactors;\n+using namespace LE1_NISP_Entities;\n \n struct DecompressorShortFixture_test\n {\n-  std::shared_ptr<ByteArrayCreator> byteArrayCreatorDummy = std::make_shared<ByteArrayCreatorDummy>();\n+  std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> byteArrayCreatorDummy = std::make_shared<ByteArrayCreatorDummy>();\n };\n \n \n BOOST_FIXTURE_TEST_SUITE (DecompressorShort_test, DecompressorShortFixture_test)\n \n BOOST_AUTO_TEST_CASE( GivenNullByteArrayCreatorShouldThrowNullByteArrayCreatorException ) {\n-  BOOST_REQUIRE_THROW(DecompressorShort(nullptr).decompress(nullptr, 0, CompressionParams()), \n-                      NullByteArrayCreatorException);\n+  BOOST_REQUIRE_THROW(DecompressorShort(nullptr).decompress(nullptr, 0, LE1_NISP_Entities::CompressionParams()),\n+                      LE1_NISP_Interactors::NullByteArrayCreatorException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenNullInputByteArrayShouldThrowNullByteArrayException ) {\n-  BOOST_REQUIRE_THROW(DecompressorShort(byteArrayCreatorDummy).decompress(nullptr, 0, CompressionParams()), \n+  BOOST_REQUIRE_THROW(DecompressorShort(byteArrayCreatorDummy).decompress(nullptr, 0, LE1_NISP_Entities::CompressionParams()),\n                       NullByteArrayException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenMaxOutputSizeLowerThanInputByteArraySizeShouldThrowMaxDecompressedSizeLowerThenCompressedSizeException ) {\n-  BOOST_REQUIRE_THROW(DecompressorShort(byteArrayCreatorDummy).decompress(std::make_shared<ByteArraySizeOnly>(10), \n+  BOOST_REQUIRE_THROW(DecompressorShort(byteArrayCreatorDummy).decompress(std::make_shared<ByteArraySizeOnly>(10),\n                                                      9, \n-                                                     CompressionParams()), \n+                                                     LE1_NISP_Entities::CompressionParams()),\n                       MaxDecompressedSizeLowerThenCompressedSizeException);\n }\n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/src/QualityDataDecoder_test.cpp": [
                        [
                            "@@ -329,6 +329,34 @@ BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldSetExpectedCompressionRatioParamT\n   BOOST_REQUIRE_EQUAL(detector->getMetadata()->getQualityDataCompressionRatio(), expectedRatio);\n }\n \n+BOOST_AUTO_TEST_CASE( GivenZeroDataSizeShouldSetCompressionRatioParamToDetectorMetadataEqualToOne ) {\n+    size_t comprMaxSize = 148;\n+    size_t comprDataSize = 0;\n+    size_t uncomprDataSize = 0;\n+    double expectedRatio = 1;\n+\n+  auto decompressorFake = std::make_shared<DecompressorFake>();\n+  decompressorFake->decompressedDataSize = uncomprDataSize;\n+\n+  auto tmDetectorFake = std::make_shared<TmDetStubReturnEmptyArrayInputSize>();\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, comprDataSize);\n+\n+  tmConfig->setScienceDataMaxSize(comprMaxSize);\n+\n+  auto detector = std::make_shared<DetectorFake>();\n+  detector->setMetadata(std::make_shared<DetectorMetadataStubCustomReturns>());\n+  detector->setTelemetryDetector(tmDetectorFake);\n+  detector->setTelemetryConfiguration(tmConfig);\n+  detector->setQualityDataSection(tmSection);\n+  detector->setIsQualityDataSpectroCompressed(true);\n+\n+  QualityDataSpectroDecoder decoder(decompressorFake);\n+\n+  auto bytes = decoder.decode(detector);\n+\n+  BOOST_REQUIRE_EQUAL(detector->getMetadata()->getQualityDataCompressionRatio(), expectedRatio);\n+}\n+\n BOOST_AUTO_TEST_CASE( GivenUncompressedDataShouldSetCompressionRatioParamToDetectorMetadataEqualToOne ) {\n   size_t comprMaxSize = 148;\n   size_t comprDataSize = 128;\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -23,34 +23,35 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//QualityDataDecoder.h\"\n+#include \"LE1_NISP_Interactors/QualityDataDecoder.h\"\n \n-#include \"LE1_NISP_ProcessScience/tests/include/TelemetryDetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMetadataMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ByteArrayMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DecompressorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ExposureConfigurationMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ByteArrayCreatorMock.h\"\n-#include \"LE1_NISP_ProcessScience/ByteArrayCreatorStandard.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMetadataMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/ByteArrayMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/TelemetryDetectorMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/DecompressorMock.h\"\n+#include \"tests/include/ExposureConfigurationMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/ByteArrayCreatorMock.h\"\n+#include \"LE1_NISP_Entities/ByteArrayCreatorStandard.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Interactors;\n+using namespace LE1_NISP_Entities;\n \n struct QualityDataDecoderFixture_test\n {\n-  std::shared_ptr<TelemetryDetectorInterface> tmDetDummy;\n-  std::shared_ptr<TelemetrySection> tmZeroSection;\n+  std::shared_ptr<LE1_NISP_Entities::TelemetryDetectorInterface> tmDetDummy;\n+  std::shared_ptr<LE1_NISP_Entities::TelemetrySection> tmZeroSection;\n   std::shared_ptr<DecompressorDummy> decompressorDummy;\n-  std::shared_ptr<TelemetryConfiguration> tmConfig;\n-  std::shared_ptr<ByteArrayCreator> byteArrayCreatorStub;\n-  std::shared_ptr<DetectorMetadata> metadataDummy;\n+  std::shared_ptr<LE1_NISP_Entities::TelemetryConfiguration> tmConfig;\n+  std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> byteArrayCreatorStub;\n+  std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> metadataDummy;\n \n   QualityDataDecoderFixture_test(){\n     tmDetDummy = std::make_shared<TelemetryDetectorDummy>();\n-    tmZeroSection = std::make_shared<TelemetrySection>(0, 0);\n+    tmZeroSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, 0);\n     decompressorDummy = std::make_shared<DecompressorDummy>();\n-    tmConfig = std::make_shared<TelemetryConfiguration>();\n-    byteArrayCreatorStub = std::make_shared<ByteArrayCreatorStandard>();\n+    tmConfig = std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>();\n+    byteArrayCreatorStub = std::make_shared<LE1_NISP_Entities::ByteArrayCreatorStandard>();\n     metadataDummy = std::make_shared<DetectorMetadataDummy>();\n   }\n \n@@ -95,14 +96,14 @@ BOOST_AUTO_TEST_CASE( GivenNullTelemetryConfigShouldThrowNullTelemetryConfigurat\n \n   QualityDataSpectroDecoder decoder(decompressorDummy);\n \n-  BOOST_REQUIRE_THROW(decoder.decode(detector), NullTelemetryConfigurationException);\n+  BOOST_REQUIRE_THROW(decoder.decode(detector), LE1_NISP_Entities::NullTelemetryConfigurationException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenNullQualityDataSectionShouldThrowNullQualityDataSectionException ) {\n   auto detector = std::make_shared<DetectorFake>();\n   detector->setMetadata(metadataDummy);\n   detector->setTelemetryDetector(tmDetDummy);\n-  detector->setTelemetryConfiguration(std::make_shared<TelemetryConfiguration>());\n+  detector->setTelemetryConfiguration(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   detector->setQualityDataSection(nullptr);\n \n   QualityDataSpectroDecoder decoder(decompressorDummy);\n@@ -114,7 +115,7 @@ BOOST_AUTO_TEST_CASE( GivenTelemetryDetectorReturningNullByteArrayShouldThrowNul\n   auto detector = std::make_shared<DetectorFake>();\n   detector->setMetadata(metadataDummy);\n   detector->setTelemetryDetector(tmDetDummy);\n-  detector->setTelemetryConfiguration(std::make_shared<TelemetryConfiguration>());\n+  detector->setTelemetryConfiguration(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   detector->setQualityDataSection(tmZeroSection);\n   \n   QualityDataSpectroDecoder decoder(decompressorDummy);\n@@ -128,7 +129,7 @@ BOOST_AUTO_TEST_CASE( GivenQualityDataSectionWithZeroSizeShouldReturnZeroSizeByt\n   auto detector = std::make_shared<DetectorFake>();\n   detector->setMetadata(metadataDummy);\n   detector->setTelemetryDetector(tmDetStubReturnInputSizeArray);\n-  detector->setTelemetryConfiguration(std::make_shared<TelemetryConfiguration>());\n+  detector->setTelemetryConfiguration(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   detector->setQualityDataSection(tmZeroSection);\n \n   QualityDataSpectroDecoder decoder(decompressorDummy);\n@@ -140,12 +141,12 @@ BOOST_AUTO_TEST_CASE( GivenQualityDataSectionWithZeroSizeShouldReturnZeroSizeByt\n BOOST_AUTO_TEST_CASE( GivenNotCompressedDataShouldReturnByteArrayOfTheExpectedSize ) {\n   unsigned long expectedNumberOfBytes = 128;\n   auto tmDetStubReturnInputSizeArray = std::make_shared<TmDetStubReturnEmptyArrayInputSize>();\n-  auto tmSection = std::make_shared<TelemetrySection>(0, expectedNumberOfBytes);\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, expectedNumberOfBytes);\n \n   auto detector = std::make_shared<DetectorFake>();\n   detector->setMetadata(metadataDummy);\n   detector->setTelemetryDetector(tmDetStubReturnInputSizeArray);\n-  detector->setTelemetryConfiguration(std::make_shared<TelemetryConfiguration>());\n+  detector->setTelemetryConfiguration(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   detector->setQualityDataSection(tmSection);\n   detector->setIsQualityDataSpectroCompressed(false);\n  \n@@ -159,12 +160,12 @@ BOOST_AUTO_TEST_CASE( ShouldReturnBytesReadingFromTmDetectorAtQualityDataSection\n   auto tmDetectorSpy = std::make_shared<TmDetSpyReturnDefaultByteArray>(std::make_shared<ByteArrayVector>());\n   unsigned long expectedOffset = 1078963;\n   unsigned long dataSize = 128;\n-  auto tmSection = std::make_shared<TelemetrySection>(expectedOffset, dataSize);\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(expectedOffset, dataSize);\n   \n   auto detector = std::make_shared<DetectorFake>();\n   detector->setMetadata(metadataDummy);\n   detector->setTelemetryDetector(tmDetectorSpy);\n-  detector->setTelemetryConfiguration(std::make_shared<TelemetryConfiguration>());\n+  detector->setTelemetryConfiguration(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   detector->setQualityDataSection(tmSection);\n   detector->setIsQualityDataSpectroCompressed(false);\n  \n@@ -180,12 +181,12 @@ BOOST_AUTO_TEST_CASE( GivenNonCompressedDataShouldReturnExpectedBytes ) {\n                                   0x09, 0x10, 0x11};\n   auto expectedBytes = std::make_shared<ByteArrayVector>(bytesVec);\n   auto tmDetStubReturnCustomBytes = std::make_shared<TmDetStubReturnBytesFromVec>(bytesVec);\n-  auto tmSection = std::make_shared<TelemetrySection>(0, 11);\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, 11);\n   \n   auto detector = std::make_shared<DetectorFake>();\n   detector->setMetadata(metadataDummy);\n   detector->setTelemetryDetector(tmDetStubReturnCustomBytes);\n-  detector->setTelemetryConfiguration(std::make_shared<TelemetryConfiguration>());\n+  detector->setTelemetryConfiguration(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   detector->setQualityDataSection(tmSection);\n   detector->setIsQualityDataSpectroCompressed(false);\n  \n@@ -197,12 +198,12 @@ BOOST_AUTO_TEST_CASE( GivenNonCompressedDataShouldReturnExpectedBytes ) {\n \n BOOST_AUTO_TEST_CASE( GivenDecompressorReturningNullByteArrayShouldThrowNullByteArrayException ) {\n   auto tmDetStubReturnInputSizeArray = std::make_shared<TmDetStubReturnEmptyArrayInputSize>();\n-  auto tmSection = std::make_shared<TelemetrySection>(0, 128);\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, 128);\n \n   auto detector = std::make_shared<DetectorFake>();\n   detector->setMetadata(metadataDummy);\n   detector->setTelemetryDetector(tmDetStubReturnInputSizeArray);\n-  detector->setTelemetryConfiguration(std::make_shared<TelemetryConfiguration>());\n+  detector->setTelemetryConfiguration(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   detector->setQualityDataSection(tmSection);\n   detector->setIsQualityDataSpectroCompressed(true);\n \n@@ -213,12 +214,12 @@ BOOST_AUTO_TEST_CASE( GivenDecompressorReturningNullByteArrayShouldThrowNullByte\n \n BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldReturnExpectedDecompressedBytes ) {\n   auto tmDetStubReturnInputSizeArray = std::make_shared<TmDetStubReturnEmptyArrayInputSize>();\n-  auto tmSection = std::make_shared<TelemetrySection>(0, 128);\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, 128);\n \n   auto detector = std::make_shared<DetectorFake>();\n   detector->setMetadata(metadataDummy);\n   detector->setTelemetryDetector(tmDetStubReturnInputSizeArray);\n-  detector->setTelemetryConfiguration(std::make_shared<TelemetryConfiguration>());\n+  detector->setTelemetryConfiguration(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   detector->setQualityDataSection(tmSection);\n   detector->setIsQualityDataSpectroCompressed(true);\n \n@@ -235,16 +236,16 @@ BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldReturnExpectedDecompressedBytes )\n }\n \n BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldDecompressDataUsingExpectedDecompressionParams ) {\n-  CompressionParams expectedParams(1, 3, 6, 4);\n+  LE1_NISP_Entities::CompressionParams expectedParams(1, 3, 6, 4);\n   auto tmDetStubReturnInputSizeArray = std::make_shared<TmDetStubReturnEmptyArrayInputSize>();\n-  auto tmSection = std::make_shared<TelemetrySection>(0, 128);\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, 128);\n \n   auto metadataFake = std::make_shared<DetectorMetadataStubCustomReturns>();\n   metadataFake->setUsedComprBlockSize(1);\n   metadataFake->setUsedComprFundSeqPar1(2);\n   metadataFake->setUsedComprFundSeqPar2(3);\n \n-  tmConfig = std::make_shared<TelemetryConfiguration>();\n+  tmConfig = std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>();\n   tmConfig->setQualityDataSpectroNumberOfValues(4);\n \n   auto detector = std::make_shared<DetectorFake>();\n@@ -266,7 +267,7 @@ BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldDecompressDataUsingExpectedDecomp\n BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldDecompressDataReadFromTelemetry ) {\n   auto expectedData = std::make_shared<ByteArrayRandom>(128);\n   auto tmDetectorFake = std::make_shared<TmDetSpyReturnDefaultByteArray>(expectedData);\n-  auto tmSection = std::make_shared<TelemetrySection>(0, expectedData->getSize());\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, expectedData->getSize());\n   auto decompressorSpy = std::make_shared<DecompressorSpyReturnInput>();\n  \n   auto detector = std::make_shared<DetectorFake>();\n@@ -284,7 +285,7 @@ BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldDecompressDataReadFromTelemetry )\n \n BOOST_AUTO_TEST_CASE( GivenQualityDataSectionSizeGreaterThanQFMaxSizeShouldThrowQualityDataSizeGreaterThanMaxSizeException ) {\n  \n-  auto tmSection = std::make_shared<TelemetrySection>(0, 216); \n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, 216);\n   tmConfig->setQualityDataMaxSize(128);\n \n   auto detector = std::make_shared<DetectorFake>();\n@@ -310,7 +311,7 @@ BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldSetExpectedCompressionRatioParamT\n   decompressorFake->decompressedDataSize = uncomprDataSize;\n \n   auto tmDetectorFake = std::make_shared<TmDetStubReturnEmptyArrayInputSize>();\n-  auto tmSection = std::make_shared<TelemetrySection>(0, comprDataSize);\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, comprDataSize);\n \n   tmConfig->setScienceDataMaxSize(comprMaxSize);\n \n@@ -334,7 +335,7 @@ BOOST_AUTO_TEST_CASE( GivenUncompressedDataShouldSetCompressionRatioParamToDetec\n   size_t expectedRatio = 1;\n \n   auto tmDetectorFake = std::make_shared<TmDetStubReturnEmptyArrayInputSize>();\n-  auto tmSection = std::make_shared<TelemetrySection>(0, comprDataSize);\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, comprDataSize);\n \n   tmConfig->setScienceDataMaxSize(comprMaxSize);\n \n@@ -376,7 +377,7 @@ BOOST_AUTO_TEST_CASE( GivenNonCompressedDataShouldReturnExpectedData ) {\n \n   auto tmDetStubReturnCustomBytes = std::make_shared<TmDetStubReturnBytesFromVec>(vec);\n   \n-  auto tmSection = std::make_shared<TelemetrySection>(0, 8);\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, 8);\n   \n   auto detector = std::make_shared<DetectorFake>();\n   detector->setMetadata(metadataDummy);\n@@ -408,7 +409,7 @@ BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldReturnExpectedData ) {\n \n   auto tmDetStubReturnCustomBytes = std::make_shared<TmDetStubReturnBytesFromVec>(vec);\n   \n-  auto tmSection = std::make_shared<TelemetrySection>(0, 8);\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, 8);\n   \n   auto detector = std::make_shared<DetectorFake>();\n   detector->setMetadata(metadataDummy);\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/src/ScienceDecoder_test.cpp": [
                        [
                            "@@ -219,7 +219,37 @@ BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldSetExpectedCompressionRatioParamT\n   BOOST_REQUIRE_EQUAL(detector->getMetadata()->getScienceCompressionRatio(), expectedRatio);\n }\n \n-BOOST_AUTO_TEST_CASE( GivenUncompressedDataShouldSetExpectedCompressionRatioParamToDetectorMetadata ) {\n+BOOST_AUTO_TEST_CASE( GivenZeroDataSizeShouldSetCompressionRatioParamToDetectorMetadataEqualToOne ) {\n+  size_t comprMaxSize = 148;\n+  size_t comprDataSize = 0;\n+  size_t uncomprDataSize = 0;\n+  double expectedRatio = 1;\n+\n+  auto decompressorFake = std::make_shared<DecompressorFake>();\n+  decompressorFake->decompressedDataSize = uncomprDataSize;\n+\n+  auto expectedData = std::make_shared<ByteArrayRandom>(comprDataSize);\n+  auto tmDetectorFake = std::make_shared<TmDetStubReturnEmptyArrayInputSize>();\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, expectedData->getSize());\n+\n+  auto tmConfig = std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>();\n+  tmConfig->setScienceDataMaxSize(comprMaxSize);\n+\n+  auto detector = std::make_shared<DetectorFake>();\n+  detector->setMetadata(std::make_shared<DetectorMetadataStubCustomReturns>());\n+  detector->setTelemetryDetector(tmDetectorFake);\n+  detector->setTelemetryConfiguration(tmConfig);\n+  detector->setScienceSection(tmSection);\n+  detector->setIsScienceCompressed(true);\n+\n+  ScienceDecoder decoder(decompressorFake);\n+\n+  auto bytes = decoder.decode(detector);\n+\n+  BOOST_REQUIRE_EQUAL(detector->getMetadata()->getScienceCompressionRatio(), expectedRatio);\n+}\n+\n+BOOST_AUTO_TEST_CASE( GivenUncompressedDataShouldSetCompressionRatioParamToDetectorMetadataEqualToOne ) {\n   size_t comprMaxSize = 148;\n   size_t comprDataSize = 128;\n   size_t expectedRatio = 1;\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -23,20 +23,21 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//ScienceDecoder.h\"\n+#include \"LE1_NISP_Interactors/ScienceDecoder.h\"\n \n-#include \"LE1_NISP_ProcessScience/tests/include/DecompressorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/TelemetryDetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMetadataMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ByteArrayMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/DecompressorMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/TelemetryDetectorMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMetadataMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/ByteArrayMock.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Interactors;\n+using namespace LE1_NISP_Entities;\n \n struct ScienceDecoderFixture{\n   std::shared_ptr<Decompressor> decompressorDummy;\n-  std::shared_ptr<TelemetryDetectorInterface> tmDetReturnInputSizeArray;\n-  std::shared_ptr<DetectorMetadata> metadataDummy;\n+  std::shared_ptr<LE1_NISP_Entities::TelemetryDetectorInterface> tmDetReturnInputSizeArray;\n+  std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> metadataDummy;\n   \n   ScienceDecoderFixture(){\n     decompressorDummy = std::make_shared<DecompressorDummy>();\n@@ -82,14 +83,14 @@ BOOST_AUTO_TEST_CASE( GivenNullTelemetryConfigShouldThrowNullTelemetryConfigurat\n \n   ScienceDecoder decoder(decompressorDummy);\n \n-  BOOST_REQUIRE_THROW(decoder.decode(detector), NullTelemetryConfigurationException);\n+  BOOST_REQUIRE_THROW(decoder.decode(detector), LE1_NISP_Entities::NullTelemetryConfigurationException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenNullScienceSectionShouldThrowNullScienceSectionException ) {\n   auto detector = std::make_shared<DetectorFake>();\n   detector->setMetadata(metadataDummy);\n   detector->setTelemetryDetector(std::make_shared<TelemetryDetectorDummy>());\n-  detector->setTelemetryConfiguration(std::make_shared<TelemetryConfiguration>());\n+  detector->setTelemetryConfiguration(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   detector->setScienceSection(nullptr);\n \n   ScienceDecoder decoder(decompressorDummy);\n@@ -100,12 +101,12 @@ BOOST_AUTO_TEST_CASE( GivenNullScienceSectionShouldThrowNullScienceSectionExcept\n BOOST_AUTO_TEST_CASE( GivenNotCompressedDataShouldReturnExpectedByteArray ) {\n   auto expectedData = std::make_shared<ByteArrayRandom>(128);\n   auto tmDetectorFake = std::make_shared<TmDetSpyReturnDefaultByteArray>(expectedData);\n-  auto tmSection = std::make_shared<TelemetrySection>(0, expectedData->getSize());\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, expectedData->getSize());\n \n   auto detector = std::make_shared<DetectorFake>();\n   detector->setMetadata(metadataDummy);\n   detector->setTelemetryDetector(tmDetectorFake);\n-  detector->setTelemetryConfiguration(std::make_shared<TelemetryConfiguration>());\n+  detector->setTelemetryConfiguration(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   detector->setScienceSection(tmSection);\n   detector->setIsScienceCompressed(false);\n \n@@ -118,13 +119,13 @@ BOOST_AUTO_TEST_CASE( GivenNotCompressedDataShouldReturnExpectedByteArray ) {\n BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldReturnExpectedByteArray ) {\n   auto expectedData = std::make_shared<ByteArrayRandom>(128);\n   auto tmDetectorFake = std::make_shared<TmDetSpyReturnDefaultByteArray>(expectedData);\n-  auto tmSection = std::make_shared<TelemetrySection>(0, expectedData->getSize());\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, expectedData->getSize());\n   auto decompressorReturnInput = std::make_shared<DecompressorSpyReturnInput>();\n \n   auto detector = std::make_shared<DetectorFake>();\n   detector->setMetadata(metadataDummy);\n   detector->setTelemetryDetector(tmDetectorFake);\n-  detector->setTelemetryConfiguration(std::make_shared<TelemetryConfiguration>());\n+  detector->setTelemetryConfiguration(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   detector->setScienceSection(tmSection);\n   detector->setIsScienceCompressed(true);\n \n@@ -135,11 +136,11 @@ BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldReturnExpectedByteArray ) {\n }\n \n BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldDecompressThemUsingExpectedDecompressionParams ) {\n-  CompressionParams expectedParams(1, 2, 3, 4);\n+  LE1_NISP_Entities::CompressionParams expectedParams(1, 2, 3, 4);\n \n   auto expectedData = std::make_shared<ByteArrayRandom>(128);\n   auto tmDetectorFake = std::make_shared<TmDetStubReturnEmptyArrayInputSize>();\n-  auto tmSection = std::make_shared<TelemetrySection>(0, expectedData->getSize());\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, expectedData->getSize());\n   auto decompressorSpy = std::make_shared<DecompressorSpyReturnInput>();\n \n   auto metadataFake = std::make_shared<DetectorMetadataStubCustomReturns>();\n@@ -147,7 +148,7 @@ BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldDecompressThemUsingExpectedDecomp\n   metadataFake->setUsedComprFundSeqPar1(2);\n   metadataFake->setUsedComprFundSeqPar2(3);\n \n-  auto tmConfig = std::make_shared<TelemetryConfiguration>();\n+  auto tmConfig = std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>();\n   tmConfig->setScienceDataNumberOfValues(4);\n \n   auto detector = std::make_shared<DetectorFake>();\n@@ -168,10 +169,10 @@ BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldDecompressThemUsingExpectedMaxSiz\n \n   auto expectedData = std::make_shared<ByteArrayRandom>(128);\n   auto tmDetectorFake = std::make_shared<TmDetStubReturnEmptyArrayInputSize>();\n-  auto tmSection = std::make_shared<TelemetrySection>(0, expectedData->getSize());\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, expectedData->getSize());\n   auto decompressorSpy = std::make_shared<DecompressorSpyReturnInput>();\n \n-  auto tmConfig = std::make_shared<TelemetryConfiguration>();\n+  auto tmConfig = std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>();\n   tmConfig->setScienceDataMaxSize(expectedComprMaxSize);\n \n   auto detector = std::make_shared<DetectorFake>();\n@@ -199,9 +200,9 @@ BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldSetExpectedCompressionRatioParamT\n \n   auto expectedData = std::make_shared<ByteArrayRandom>(comprDataSize);\n   auto tmDetectorFake = std::make_shared<TmDetStubReturnEmptyArrayInputSize>();\n-  auto tmSection = std::make_shared<TelemetrySection>(0, expectedData->getSize());\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, expectedData->getSize());\n \n-  auto tmConfig = std::make_shared<TelemetryConfiguration>();\n+  auto tmConfig = std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>();\n   tmConfig->setScienceDataMaxSize(comprMaxSize);\n \n   auto detector = std::make_shared<DetectorFake>();\n@@ -225,9 +226,9 @@ BOOST_AUTO_TEST_CASE( GivenUncompressedDataShouldSetExpectedCompressionRatioPara\n \n   auto expectedData = std::make_shared<ByteArrayRandom>(comprDataSize);\n   auto tmDetectorFake = std::make_shared<TmDetStubReturnEmptyArrayInputSize>();\n-  auto tmSection = std::make_shared<TelemetrySection>(0, expectedData->getSize());\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, expectedData->getSize());\n \n-  auto tmConfig = std::make_shared<TelemetryConfiguration>();\n+  auto tmConfig = std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>();\n   tmConfig->setScienceDataMaxSize(comprMaxSize);\n \n   auto detector = std::make_shared<DetectorFake>();\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/src/ScienceWriterElFitsIO_test.cpp": [
                        [
                            "@@ -145,14 +145,15 @@ struct ScienceWriterElFitsIOFixture_test{\n       \"PLAN_ID\", \"OBS_ID\", \"DITHOBS\", \"PTGID\", \"EXPNUM\", \"TOTEXP\",\n       \"FWA_POS\", \"FWA_ANG\", \"FWA_REF\", \"GWA_POS\", \"GWA_ANG\", \"GWA_REF\", \"GWA_TILT\",\n       \"KEYS_CNF\", \"INST_CNF\", \"CU_STATE\", \"ACQ_CNT\", \"EXP_CNF\",\n-      \"T_RESETS\", \"T_DROPL1\", \"T_DROPL2\", \"S_OFFSET\", \"S_FACTOR\"\n+      \"T_RESETS\", \"T_DROPL1\", \"T_DROPL2\", \"S_OFFSET\", \"S_FACTOR\",\n+      \"RPIXPRC1\", \"RPIXPRC2\"\n   };\n \n   const std::vector<std::string> mandatoryScienceImageKeywords = {\n       \"EXTNAME\", \"DET_ID\", \"SCEINDEX\", \"SCA_ID\",\n       \"CRVAL1\", \"CRVAL2\", \"CRPIX1\", \"CRPIX2\", \"CTYPE1\", \"CTYPE2\",\n       \"CUNIT1\", \"CUNIT2\", \"CD1_1\", \"CD1_2\", \"CD2_1\", \"CD2_2\",\n-      \"BUNIT\", \"RPIX_PRC\", \"RON_DET\", \"GAIN_DET\",\n+      \"BUNIT\", \"RON_DET\", \"GAIN_DET\",\n       \"DTEXPNUM\", \"DPU_ID\", \"MASTER\", \"CMPRTSCI\"\n   };\n };\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -24,23 +24,23 @@\n #include <boost/test/unit_test.hpp>\n \n #include \"ElementsKernel/Temporary.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DateTimeManagerMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorIteratorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMetadataMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ParameterMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ByteArrayMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ExposuresCounterMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ExposureConfigurationMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/PlanningIdMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/TestUtils.h\"\n-\n-#include \"LE1_NISP_ProcessScience//ScienceWriterElFitsIO.h\"\n-#include \"LE1_NISP_ProcessScience//DateTimeManagerBoost.h\"\n-\n+#include \"LE1_NISP_Entities/tests/include/DetectorMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMetadataMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/ParameterMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/ByteArrayMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/DateTimeManagerMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/DetectorIteratorMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/ExposuresCounterMock.h\"\n+#include \"tests/include/ExposureConfigurationMock.h\"\n+#include \"tests/include/PlanningIdMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/TestUtils.h\"\n+\n+#include \"LE1_NISP_Interactors/ScienceWriterElFitsIO.h\"\n+#include \"LE1_NISP_Entities/DateTimeBoost.h\"\n \n using Euclid::Fits::MefFile;\n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Interactors;\n+using namespace LE1_NISP_Entities;\n \n struct ScienceWriterElFitsIOFixture_test{\n   \n@@ -49,19 +49,18 @@ struct ScienceWriterElFitsIOFixture_test{\n     exposuresCounterDummy = std::make_shared<ExposuresCounterDummy>();\n     \n     dateTimeManagerStub = std::make_shared<DateTimeManagerStubCustomReturns>();\n-    dateTimeManagerStub->setDateTimeIsoStr(\"20210201T122830\");\n     dateTimeManagerStub->setDateTime(std::make_shared<DateTimeBoost>());\n   }\n \n-  std::shared_ptr<Detector> createDetectorFake(){\n+  std::shared_ptr<LE1_NISP_Entities::Detector> createDetectorFake(){\n     auto detFake = std::make_shared<DetectorFake>();\n     detFake->setScienceData(std::make_shared<ByteArrayVector>(std::vector<uint8_t>(2048*2048*2)));\n     detFake->setMetadata(createMetadataFake());\n-    detFake->setTelemetryConfiguration(std::make_shared<TelemetryConfiguration>());\n+    detFake->setTelemetryConfiguration(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n     return detFake;\n   }\n \n-  std::shared_ptr<Detector> createDetectorFakeSpectro(){\n+  std::shared_ptr<LE1_NISP_Entities::Detector> createDetectorFakeSpectro(){\n     auto expConfigFake = createExpConfigFake();\n     expConfigFake->setIsSpectro(true); \n \n@@ -73,7 +72,7 @@ struct ScienceWriterElFitsIOFixture_test{\n     return detFake;\n   }\n \n-  std::shared_ptr<Detector> createDetectorFakePhoto(){\n+  std::shared_ptr<LE1_NISP_Entities::Detector> createDetectorFakePhoto(){\n     auto expConfigFake = createExpConfigFake();\n \n     auto metadataFake = createMetadataFake();\n@@ -187,7 +186,7 @@ BOOST_AUTO_TEST_CASE( GivenNoDetectorsShouldThrowZeroDetectorsFoundException ) {\n   writer.setDateTimeManager(dateTimeManagerStub);\n   writer.setExposuresCounter(exposuresCounterDummy);\n \n-  std::vector<std::shared_ptr<Detector>> emptyDetVec;\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> emptyDetVec;\n   auto detItrStub = std::make_shared<DetIterStubDetVector>(emptyDetVec);\n \n   BOOST_REQUIRE_THROW(writer.write(detItrStub, outputDir), ZeroDetectorsFoundException);\n@@ -224,9 +223,11 @@ BOOST_AUTO_TEST_CASE( GivenValidInputsShouldReturnOneWrittenFileAfterWriteOperat\n BOOST_AUTO_TEST_CASE( GivenValidInputsShouldReturnTheExpectedWrittenFilename ) {\n   Elements::TempDir tmpDir;\n   std::string outputDir = std::string(tmpDir.path().c_str());\n+  std::string expectedIsoString = \"20230701T000000.000000\";\n \n-  auto expectedFilename = \"product-id_SCI_\" + dateTimeManagerStub->getDateTimeIsoStr() + \"Z.fits\";\n+  auto expectedFilename = \"product-id_SCI_\" + expectedIsoString + \"Z.fits\";\n \n+  dateTimeManagerStub->setDateTime(std::make_shared<DateTimeFake>(2023, 7, 1, 0, 0, 0, 0, 0, expectedIsoString, \"\", 0));\n   writer.setDateTimeManager(dateTimeManagerStub);\n   writer.setExposuresCounter(exposuresCounterDummy);\n \n@@ -298,7 +299,7 @@ BOOST_AUTO_TEST_CASE( GivenValidInputsShouldCreateFitsWithExpectedKeywordsInPrim\n   Elements::TempDir tmpDir;\n   std::string outputDir = std::string(tmpDir.path().c_str());\n \n-  std::map<std::string, std::shared_ptr<ParameterInterface>> params;\n+  std::map<std::string, std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> params;\n   for(auto const &keyword: mandatoryPrimaryKeywords)\n     params.insert({keyword, std::make_shared<ParameterStubNameOnly>(keyword)});\n \n@@ -326,12 +327,16 @@ BOOST_AUTO_TEST_CASE( GivenValidInputsWithNoMasterDpuDetectorsShouldCreateFitsWi\n   Elements::TempDir tmpDir;\n   std::string outputDir = std::string(tmpDir.path().c_str());\n \n-  auto obt = std::make_shared<LE1_NISP::OnBoardTime>(0x12345678, 0x87654321);\n-  std::string expectedObsObt = obt->toIsoExtended();\n-  uint32_t expectedObtSta1 = obt->coarseTime();\n-  uint32_t expectedObtSta2 = obt->fineTimeMusec();\n+  std::string expectedObsObt = \"2023-07-01T00:00:00.000000000\";\n+  uint32_t expectedObtSta1 = 0x12345678;\n+  uint32_t expectedObtSta2 = 0x87654321;\n \n-  std::map<std::string, std::shared_ptr<ParameterInterface>> params;\n+  auto obt = std::make_shared<ObtCustomReturns>();\n+  obt->customIsoExtended = expectedObsObt;\n+  obt->customCoarseTime = expectedObtSta1;\n+  obt->customFineTimeMicroSec = expectedObtSta2;\n+\n+  std::map<std::string, std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> params;\n   for(auto const &keyword: mandatoryPrimaryKeywords)\n     params.insert({keyword, std::make_shared<ParameterStubNameOnly>(keyword)});\n \n@@ -351,7 +356,7 @@ BOOST_AUTO_TEST_CASE( GivenValidInputsWithNoMasterDpuDetectorsShouldCreateFitsWi\n   metadataSecondDet->setExposureConfiguration(createExpConfigFake());\n   metadataSecondDet->setParamsMap(params);\n   metadataSecondDet->setProductId(\"product-id\");\n-  metadataSecondDet->setObt(std::make_shared<LE1_NISP::OnBoardTime>(0, 0));\n+  metadataSecondDet->setObt(std::make_shared<LE1_NISP_Entities::ObtDummy>());\n   metadataSecondDet->setMasterDpuId(0x00);\n \n   auto firstDet = createDetectorFake();\n@@ -359,7 +364,7 @@ BOOST_AUTO_TEST_CASE( GivenValidInputsWithNoMasterDpuDetectorsShouldCreateFitsWi\n   auto secondDet = createDetectorFake();\n   secondDet->setMetadata(metadataSecondDet);\n \n-  std::vector<std::shared_ptr<Detector>> detVec = {firstDet, secondDet};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detVec = {firstDet, secondDet};\n   auto detItrStub = std::make_shared<DetIterStubDetVector>(detVec);\n \n   writer.write(detItrStub, outputDir);\n@@ -375,12 +380,16 @@ BOOST_AUTO_TEST_CASE( GivenValidInputsWithDetectorsFromDifferentDpusShouldCreate\n   Elements::TempDir tmpDir;\n   std::string outputDir = std::string(tmpDir.path().c_str());\n \n-  auto obt = std::make_shared<LE1_NISP::OnBoardTime>(0x12345678, 0x87654321);\n-  std::string expectedObsObt = obt->toIsoExtended();\n-  uint32_t expectedObtSta1 = obt->coarseTime();\n-  uint32_t expectedObtSta2 = obt->fineTimeMusec();\n+  std::string expectedObsObt = \"2023-07-01T00:00:00.000000000\";\n+  uint32_t expectedObtSta1 = 0x12345678;\n+  uint32_t expectedObtSta2 = 0x87654321;\n+\n+  auto obt = std::make_shared<ObtCustomReturns>();\n+  obt->customIsoExtended = expectedObsObt;\n+  obt->customCoarseTime = expectedObtSta1;\n+  obt->customFineTimeMicroSec = expectedObtSta2;\n \n-  std::map<std::string, std::shared_ptr<ParameterInterface>> params;\n+  std::map<std::string, std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> params;\n   for(auto const &keyword: mandatoryPrimaryKeywords)\n     params.insert({keyword, std::make_shared<ParameterStubNameOnly>(keyword)});\n \n@@ -392,7 +401,7 @@ BOOST_AUTO_TEST_CASE( GivenValidInputsWithDetectorsFromDifferentDpusShouldCreate\n   metadataFirstDet->setExposureConfiguration(createExpConfigFake());\n   metadataFirstDet->setParamsMap(params);\n   metadataFirstDet->setProductId(\"product-id\");\n-  metadataFirstDet->setObt(std::make_shared<LE1_NISP::OnBoardTime>(0, 0));\n+  metadataFirstDet->setObt(std::make_shared<LE1_NISP_Entities::ObtDummy>());\n   metadataFirstDet->setMasterDpuId(0x00);\n \n   auto metadataSecondDet = std::make_shared<DetMetadataReturnParamsMapOrNameOnlyParam>();\n@@ -408,7 +417,7 @@ BOOST_AUTO_TEST_CASE( GivenValidInputsWithDetectorsFromDifferentDpusShouldCreate\n   auto secondDet = createDetectorFake();\n   secondDet->setMetadata(metadataSecondDet);\n \n-  std::vector<std::shared_ptr<Detector>> detVec = {firstDet, secondDet};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detVec = {firstDet, secondDet};\n   auto detItrStub = std::make_shared<DetIterStubDetVector>(detVec);\n \n   writer.write(detItrStub, outputDir);\n@@ -427,7 +436,7 @@ BOOST_AUTO_TEST_CASE( GivenFiveDetectorsShouldCreateFitsWithFiveSCIExtensions )\n   writer.setDateTimeManager(dateTimeManagerStub);\n   writer.setExposuresCounter(exposuresCounterDummy);\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(), \n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(),\n                                                       createDetectorFake(), \n                                                       createDetectorFake(), \n                                                       createDetectorFake(),\n@@ -449,7 +458,7 @@ BOOST_AUTO_TEST_CASE( GivenDetectorsWithoutChi2DataShouldCreateFitsWithExpectedK\n   Elements::TempDir tmpDir;\n   std::string outputDir = std::string(tmpDir.path().c_str());\n \n-  std::map<std::string, std::shared_ptr<ParameterInterface>> params;\n+  std::map<std::string, std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> params;\n   for(auto const &keyword: mandatoryScienceImageKeywords)\n     params.insert({keyword, std::make_shared<ParameterStubNameOnly>(keyword)});\n \n@@ -483,7 +492,7 @@ BOOST_AUTO_TEST_CASE( GivenFiveDetectorsWithQualityFactorDataShouldCreateFitsWit\n   detStub->setScienceData(std::make_shared<ByteArrayVector>(std::vector<uint8_t>(2048*2048)));\n   detStub->setQualityData(std::make_shared<ByteArrayVector>(std::vector<uint8_t>(2048*2048)));\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {detStub, detStub, detStub, detStub, detStub};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {detStub, detStub, detStub, detStub, detStub};\n   auto detIterStub = std::make_shared<DetIterStubDetVector>(detectors);\n   writer.write(detIterStub, outputDir);\n \n@@ -507,7 +516,7 @@ BOOST_AUTO_TEST_CASE( GivenSpectroExposureConfigurationShouldCreateFitsWithCHI2E\n   auto detStub = createDetectorFakeSpectro();\n   detStub->setQualityData(std::make_shared<ByteArrayVector>(std::vector<uint8_t>(2048*2048)));\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {detStub, detStub, detStub, detStub, detStub};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {detStub, detStub, detStub, detStub, detStub};\n   auto detIterStub = std::make_shared<DetIterStubDetVector>(detectors);\n   writer.write(detIterStub, outputDir);\n \n@@ -531,7 +540,7 @@ BOOST_AUTO_TEST_CASE( GivenPhotoExposureConfigurationShouldCreateFitsWithDQExten\n   auto detStub = createDetectorFakePhoto();\n   detStub->setQualityData(std::make_shared<ByteArrayVector>(std::vector<uint8_t>(2048*2048)));\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {detStub, detStub, detStub, detStub, detStub};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {detStub, detStub, detStub, detStub, detStub};\n   auto detIterStub = std::make_shared<DetIterStubDetVector>(detectors);\n   writer.write(detIterStub, outputDir);\n \n@@ -586,7 +595,7 @@ BOOST_AUTO_TEST_CASE( GivenPhotoExposureWithChi2DataShouldCreateFitsWithExpected\n     \"EXTNAME\",\"DET_ID\", \"CMPRTX2\"\n   };\n \n-  std::map<std::string, std::shared_ptr<ParameterInterface>> params;\n+  std::map<std::string, std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> params;\n   for(auto const &keyword: expectedKeywords)\n     params.insert({keyword, std::make_shared<ParameterStubNameOnly>(keyword)});\n \n@@ -620,7 +629,7 @@ BOOST_AUTO_TEST_CASE( GivenSpectroExposureWithChi2DataShouldCreateFitsWithExpect\n     \"EXTNAME\",\"DET_ID\", \"CMPRTX2\"\n   };\n \n-  std::map<std::string, std::shared_ptr<ParameterInterface>> params;\n+  std::map<std::string, std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> params;\n   for(auto const &keyword: expectedKeywords)\n     params.insert({keyword, std::make_shared<ParameterStubNameOnly>(keyword)});\n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/auxdir/LE1_NISP_Processor/exposure_config.xml": [
                        [
                            "@@ -105,7 +105,7 @@\n             <mode>Science</mode>\n             <productCategory>SCIENCE</productCategory>\n             <productFirstType>SURVEY</productFirstType>\n-            <productSecondType>SKY</productSecondType>\n+            <productSecondType>OTHER</productSecondType>\n             <observationMode>WIDE</observationMode>\n         </config>\n         <config>\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/auxdir/LE1_NISP_Processor/param_descriptions.xml": [
                        [
                            "@@ -39,7 +39,7 @@\n         <param keyword=\"OBASW\">\n             <name>OBASW</name>\n             <type>string</type>\n-            <value>3.1</value>\n+            <value>1.3.9</value>\n             <unit></unit>\n             <comment>On board application software version (NISP DPU SW version)</comment>\n         </param>\n@@ -99,12 +99,19 @@\n             <unit></unit>\n             <comment>NI-CU state: ON=1,OFF=0</comment>\n         </param>\n-        <param keyword=\"RPIX_PRC\">\n-            <name>RPIX_PRC</name>\n+        <param keyword=\"RPIXPRC1\">\n+            <name>RPIXPRC1</name>\n             <type>uint</type>\n             <value>2</value>\n             <unit></unit>\n-            <comment>Reference Pixel proc mode (0=no_correction,1=horiz_correction,2=horiz+vert_correction)</comment>\n+            <comment>DPU1 Reference Pixel proc mode (0=NoCorrect,1=H_Correct,2=H+V_Corret)</comment>\n+        </param>\n+        <param keyword=\"RPIXPRC2\">\n+            <name>RPIXPRC2</name>\n+            <type>uint</type>\n+            <value>2</value>\n+            <unit></unit>\n+            <comment>DPU2 Reference Pixel proc mode (0=NoCorrect,1=H_Correct,2=H+V_Corret)</comment>\n         </param>\n     </fixedParameters>\n     <descriptions>\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -39,7 +39,7 @@\n         <param keyword=\"OBASW\">\n             <name>OBASW</name>\n             <type>string</type>\n-            <value>3.1</value>\n+            <value>1.3.9</value>\n             <unit></unit>\n             <comment>On board application software version (NISP DPU SW version)</comment>\n         </param>\n",
                            "[upd] Updates OBASW version to 1.3.9",
                            "Alberto Alessio",
                            "2023-06-20T11:59:22.000+00:00",
                            "38cb8e328543f1188b5f6ab215e8640251c2fad0"
                        ],
                        [
                            "@@ -99,12 +99,19 @@\n             <unit></unit>\n             <comment>NI-CU state: ON=1,OFF=0</comment>\n         </param>\n-        <param keyword=\"RPIX_PRC\">\n-            <name>RPIX_PRC</name>\n+        <param keyword=\"RPIXPRC1\">\n+            <name>RPIXPRC1</name>\n             <type>uint</type>\n             <value>2</value>\n             <unit></unit>\n-            <comment>Reference Pixel proc mode (0=no_correction,1=horiz_correction,2=horiz+vert_correction)</comment>\n+            <comment>DPU1 Reference Pixel proc mode (0=NoCorrect,1=H_Correct,2=H+V_Corret)</comment>\n+        </param>\n+        <param keyword=\"RPIXPRC2\">\n+            <name>RPIXPRC2</name>\n+            <type>uint</type>\n+            <value>2</value>\n+            <unit></unit>\n+            <comment>DPU2 Reference Pixel proc mode (0=NoCorrect,1=H_Correct,2=H+V_Corret)</comment>\n         </param>\n     </fixedParameters>\n     <descriptions>\n",
                            "[upd] Replaces RPIX_PRC with RPIXPRC1 and RPIXPRC2",
                            "Alberto Alessio",
                            "2023-06-14T12:50:29.000+00:00",
                            "269dda7a79c0be1260b408ea51d8b35623196b49"
                        ],
                        [
                            "",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/src/program/LE1_NISP_Processor.cpp": [
                        [
                            "@@ -156,11 +156,11 @@ private:\n     auto model = args[\"model\"].as<std::string>();\n \n     if(args[\"auxiliary_dir\"].empty()){\n-      m_detConfigFile = Elements::getAuxiliaryPath(\"LE1_NISP_ProcessScience/detectors_config_\" + model + \".xml\").c_str();\n-      m_telemetryConfigFile = Elements::getAuxiliaryPath(\"LE1_NISP_ProcessScience/telemetry_config.xml\").c_str();\n-      m_paramDescriptionsFile = Elements::getAuxiliaryPath(\"LE1_NISP_ProcessScience/param_descriptions.xml\").c_str();\n-      m_exposureConfigFile = Elements::getAuxiliaryPath(\"LE1_NISP_ProcessScience/exposure_config.xml\").c_str();\n-      m_dataModelConfigFile = Elements::getAuxiliaryPath(\"LE1_NISP_ProcessScience/datamodel_config.xml\").c_str();\n+      m_detConfigFile = Elements::getAuxiliaryPath(\"LE1_NISP_Processor/detectors_config_\" + model + \".xml\").c_str();\n+      m_telemetryConfigFile = Elements::getAuxiliaryPath(\"LE1_NISP_Processor/telemetry_config.xml\").c_str();\n+      m_paramDescriptionsFile = Elements::getAuxiliaryPath(\"LE1_NISP_Processor/param_descriptions.xml\").c_str();\n+      m_exposureConfigFile = Elements::getAuxiliaryPath(\"LE1_NISP_Processor/exposure_config.xml\").c_str();\n+      m_dataModelConfigFile = Elements::getAuxiliaryPath(\"LE1_NISP_Processor/datamodel_config.xml\").c_str();\n     }\n     else{\n       auto auxiliaryDir = args[\"auxiliary_dir\"].as<std::string>() + \"/\";\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -28,58 +28,56 @@\n #include \"ElementsKernel/ProgramHeaders.h\"\n #include \"ElementsKernel/Auxiliary.h\" \n \n-#include \"LE1_NISP_ProcessScience/ProductGenerator.h\"\n+#include \"LE1_NISP_Interactors/ProductGenerator.h\"\n \n-#include \"LE1_NISP_ProcessScience/TelemetryConfigParserXml.h\"\n-#include \"LE1_NISP_ProcessScience/TelemetryDetectorInitializer.h\"\n-#include \"LE1_NISP_ProcessScience/DetectorImpl.h\"\n-#include \"LE1_NISP_ProcessScience/ParserXml.h\"\n+#include \"LE1_NISP_Interactors/TelemetryDetectorInitializer.h\"\n+#include \"LE1_NISP_Entities/DetectorImpl.h\"\n+#include \"LE1_NISP_Adapters/ParserXml.h\"\n \n-#include \"LE1_NISP_ProcessScience/DetectorConfigParserXml.h\"\n-#include \"LE1_NISP_ProcessScience/DetectorConfigMapper.h\"\n+#include \"LE1_NISP_Entities/DetectorConfigMapper.h\"\n \n-#include \"LE1_NISP_ProcessScience/ExposureConfigParserXml.h\"\n-#include \"LE1_NISP_ProcessScience/ExposureConfigurationImpl.h\"\n+#include \"LE1_NISP_Entities/ExposureConfigurationImpl.h\"\n \n-#include \"LE1_NISP_ProcessScience/ConfigurationParserMdb.h\"\n+#include \"LE1_NISP_Adapters/ConfigurationParserMdb.h\"\n \n-#include \"LE1_NISP_ProcessScience/PlanningIdGroundTests.h\"\n-#include \"LE1_NISP_ProcessScience/PlanningIdSoc20210215.h\"\n+#include \"LE1_NISP_Entities/PlanningIdGroundTests.h\"\n+#include \"LE1_NISP_Entities/PlanningIdSoc20210215.h\"\n \n-#include \"LE1_NISP_ProcessScience/MetadataParserParamDescriptions.h\"\n+#include \"LE1_NISP_Interactors/MetadataParserParamDescriptions.h\"\n \n-#include \"LE1_NISP_ProcessScience/DetectorMap.h\"\n-#include \"LE1_NISP_ProcessScience/DetectorCollectorObt.h\"\n+#include \"LE1_NISP_Entities/DetectorMap.h\"\n+#include \"LE1_NISP_Interactors/DetectorCollectorObt.h\"\n \n-#include \"LE1_NISP_ProcessScience/ExposuresCounter.h\"\n+#include \"LE1_NISP_Interactors/ExposuresCounter.h\"\n \n-#include \"LE1_NISP_ProcessScience/ByteArrayCreatorEuclid.h\"\n-#include \"LE1_NISP_ProcessScience/ByteArrayCreatorStandard.h\"\n-#include \"LE1_NISP_ProcessScience/DecompressorShort.h\"\n-#include \"LE1_NISP_ProcessScience/ScienceDecoder.h\"\n-#include \"LE1_NISP_ProcessScience/DecompressorByte.h\"\n-#include \"LE1_NISP_ProcessScience/QualityDataDecoder.h\"\n-#include \"LE1_NISP_ProcessScience/RawLinesDecoder.h\"\n-#include \"LE1_NISP_ProcessScience/EngDecoder.h\"\n-#include \"LE1_NISP_ProcessScience/AnalogTelemetryDecoder.h\"\n-#include \"LE1_NISP_ProcessScience/ErrorsDecoder.h\"\n-#include \"LE1_NISP_ProcessScience/HistoryDecoder.h\"\n+#include \"LE1_NISP_Entities/ByteArrayCreatorEuclid.h\"\n+#include \"LE1_NISP_Entities/ByteArrayCreatorStandard.h\"\n+#include \"LE1_NISP_Interactors/DecompressorShort.h\"\n+#include \"LE1_NISP_Interactors/ScienceDecoder.h\"\n+#include \"LE1_NISP_Interactors/DecompressorByte.h\"\n+#include \"LE1_NISP_Interactors/QualityDataDecoder.h\"\n+#include \"LE1_NISP_Interactors/RawLinesDecoder.h\"\n+#include \"LE1_NISP_Interactors/EngDecoder.h\"\n+#include \"LE1_NISP_Interactors/AnalogTelemetryDecoder.h\"\n+#include \"LE1_NISP_Interactors/ErrorsDecoder.h\"\n+#include \"LE1_NISP_Interactors/HistoryDecoder.h\"\n \n-#include \"LE1_NISP_ProcessScience/DateTimeManagerBoost.h\"\n+#include \"LE1_NISP_Entities/DateTimeManagerBoost.h\"\n \n-#include \"LE1_NISP_ProcessScience/ProductsWriter.h\"\n-#include \"LE1_NISP_ProcessScience/ScienceWriterElFitsIO.h\"\n-#include \"LE1_NISP_ProcessScience/HkWriterElFitsIO.h\"\n-#include \"LE1_NISP_ProcessScience/EngUnprocessedGroupsFitsWriter.h\"\n-#include \"LE1_NISP_ProcessScience/EngPixelsOverThresholdFitsWriter.h\"\n-#include \"LE1_NISP_ProcessScience/EngUncompressedImageFitsWriter.h\"\n+#include \"LE1_NISP_Interactors/ProductsWriter.h\"\n+#include \"LE1_NISP_Interactors/ScienceWriterElFitsIO.h\"\n+#include \"LE1_NISP_Interactors/HkWriterElFitsIO.h\"\n+#include \"LE1_NISP_Interactors/EngUnprocessedGroupsFitsWriter.h\"\n+#include \"LE1_NISP_Interactors/EngPixelsOverThresholdFitsWriter.h\"\n+#include \"LE1_NISP_Interactors/EngUncompressedImageFitsWriter.h\"\n \n-#include \"LE1_NISP_ProcessScience/ProductsArchiverDataModelBindings.h\"\n+#include \"LE1_NISP_Interactors/ProductsArchiverDataModelBindings.h\"\n \n using boost::program_options::options_description;\n using boost::program_options::value;\n using boost::program_options::variable_value;\n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Interactors;\n+using namespace LE1_NISP_Adapters;\n \n class LE1_NISP_Processor : public Elements::Program\n {\n@@ -174,19 +172,20 @@ private:\n     }\n   }\n \n-  LE1_NISP_ProcessScience::ProductGenerator initProductGenerator() {\n-    LE1_NISP_ProcessScience::ProductGenerator generator;\n+  LE1_NISP_Interactors::ProductGenerator initProductGenerator() {\n+    LE1_NISP_Interactors::ProductGenerator generator;\n \n     auto detectorConfig = initDetectorConfig();\n+    auto dateTimeManager = initDateTimeManager();\n \n     auto metadataParser = initMetadataParser(detectorConfig,\n                                              initExposureConfigCreator(), \n-                                             initPlanningIdCreator(), \n+                                             initPlanningIdCreator(),\n+                                             dateTimeManager,\n                                              initParamDescriptions(),\n                                              initFixedParams());\n     auto exposuresCounter = std::make_shared<ExposuresCounter>();\n-    auto dateTimeManager = initDateTimeManager();\n-    auto byteArrayCreator = std::make_shared<ByteArrayCreatorStandard>();\n+    auto byteArrayCreator = std::make_shared<LE1_NISP_Entities::ByteArrayCreatorStandard>();\n \n     generator.setDetectorsInitializer(initDetectorsInitializer(initTelemetryConfig(), \n                                                                initTelemetryFileCreator(byteArrayCreator)));\n@@ -200,8 +199,8 @@ private:\n     return generator;\n   }\n \n-  std::shared_ptr<TelemetryConfiguration> initTelemetryConfig() {\n-    auto telemetryConfig = TelemetryConfigParserXml().parse(m_telemetryConfigFile);\n+  std::shared_ptr<LE1_NISP_Entities::TelemetryConfiguration> initTelemetryConfig() {\n+    auto telemetryConfig = ParserXml().parseTelemetryConfig(m_telemetryConfigFile);\n     \n     if(!m_mdb.empty())\n       ConfigurationParserMdb().parseTelemetryConfig(telemetryConfig, m_mdb);\n@@ -209,30 +208,29 @@ private:\n     return telemetryConfig;\n   }\n \n-  std::shared_ptr<TelemetryFileCreator> initTelemetryFileCreator(const std::shared_ptr<ByteArrayCreator> byteArrCreator) {\n-    auto tmFileCreator = std::make_shared<TelemetryFileCreator>();\n+  std::shared_ptr<LE1_NISP_Entities::TelemetryFileCreator> initTelemetryFileCreator(const std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> byteArrCreator) {\n+    auto tmFileCreator = std::make_shared<LE1_NISP_Entities::TelemetryFileCreator>();\n     tmFileCreator->setByteArrayCreator(byteArrCreator);\n     return tmFileCreator;\n   }\n \n-  std::shared_ptr<TelemetryDetectorInitializer> initDetectorsInitializer(const std::shared_ptr<TelemetryConfiguration> telemetryConfig, \n-                                                                         const std::shared_ptr<TelemetryFileCreator> tmFileCreator) {\n-    auto detectorCreator = std::make_shared<DetectorImplCreator>();\n+  std::shared_ptr<TelemetryDetectorInitializer> initDetectorsInitializer(const std::shared_ptr<LE1_NISP_Entities::TelemetryConfiguration> telemetryConfig,\n+                                                                         const std::shared_ptr<LE1_NISP_Entities::TelemetryFileCreator> tmFileCreator) {\n+    auto detectorCreator = std::make_shared<LE1_NISP_Entities::DetectorImplCreator>();\n     return std::make_shared<TelemetryDetectorInitializer>(telemetryConfig, detectorCreator, tmFileCreator);\n   }\n \n-  std::vector<std::shared_ptr<ParameterDescription>> initParamDescriptions() {\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::ParameterDescription>> initParamDescriptions() {\n     return ParserXml().parseParamDescriptions(m_paramDescriptionsFile);\n   }\n \n-  std::vector<std::shared_ptr<ParameterInterface>> initFixedParams() {\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> initFixedParams() {\n     return ParserXml().parseFixedParams(m_paramDescriptionsFile);\n   }\n \n-  std::shared_ptr<DetectorConfigManager> initDetectorConfig() {\n-    DetectorConfigParserXml detConfigParser;\n-    auto detConfigManager = std::make_shared<DetectorConfigMapper>();\n-    detConfigParser.parse(detConfigManager, m_detConfigFile);\n+  std::shared_ptr<LE1_NISP_Entities::DetectorConfigManager> initDetectorConfig() {\n+    auto detConfigManager = std::make_shared<LE1_NISP_Entities::DetectorConfigMapper>();\n+    ParserXml().parseDetectorConfig(detConfigManager, m_detConfigFile);\n     \n     if(!m_mdb.empty())\n       ConfigurationParserMdb().parseDetectorConfig(detConfigManager, m_mdb);\n@@ -240,47 +238,47 @@ private:\n     return detConfigManager;\n   }\n \n-  std::shared_ptr<ExposureConfigurationCreator> initExposureConfigCreator() {\n-    ExposureConfigParserXml expConfigParser;\n-    auto expConfigManager = expConfigParser.parse(m_exposureConfigFile);\n+  std::shared_ptr<LE1_NISP_Entities::ExposureConfigurationCreator> initExposureConfigCreator() {\n+    auto expConfigManager = ParserXml().parseExposureConfig(m_exposureConfigFile);\n         \n     if(!m_mdb.empty())\n       ConfigurationParserMdb().parseExposureConfiguration(expConfigManager, m_mdb);\n \n-    auto exposureConfigCreator = std::make_shared<ExposureConfigurationImplCreator>();\n+    auto exposureConfigCreator = std::make_shared<LE1_NISP_Entities::ExposureConfigurationImplCreator>();\n     exposureConfigCreator->setExposureConfigManager(expConfigManager);\n     return exposureConfigCreator;\n   }\n \n-  std::shared_ptr<PlanningIdCreator> initPlanningIdCreator() {\n-    std::shared_ptr<PlanningIdCreator> planningIdCreator;\n+  std::shared_ptr<LE1_NISP_Entities::PlanningIdCreator> initPlanningIdCreator() {\n+    std::shared_ptr<LE1_NISP_Entities::PlanningIdCreator> planningIdCreator;\n     if(m_planningId == \"GROUND_TESTS\")\n-      return std::make_shared<PlanningIdGroundTestsCreator>();\n+      return std::make_shared<LE1_NISP_Entities::PlanningIdGroundTestsCreator>();\n     else if(m_planningId == \"SOC_20210215\")\n-      return std::make_shared<PlanningIdSoc20210215Creator>();\n+      return std::make_shared<LE1_NISP_Entities::PlanningIdSoc20210215Creator>();\n     return nullptr;\n   }\n \n-  std::shared_ptr<DetectorMetadataParser> initMetadataParser(const std::shared_ptr<DetectorConfigManager> configManager, \n-                                                             const std::shared_ptr<ExposureConfigurationCreator> expConfigCreator,\n-                                                             const std::shared_ptr<PlanningIdCreator> planningIdCreator,\n-                                                             const std::vector<std::shared_ptr<ParameterDescription>> &descriptions,\n-                                                             const std::vector<std::shared_ptr<ParameterInterface>> &fixedParams) {\n+  std::shared_ptr<DetectorMetadataParser> initMetadataParser(const std::shared_ptr<LE1_NISP_Entities::DetectorConfigManager> configManager,\n+                                                             const std::shared_ptr<LE1_NISP_Entities::ExposureConfigurationCreator> expConfigCreator,\n+                                                             const std::shared_ptr<LE1_NISP_Entities::PlanningIdCreator> planningIdCreator,\n+                                                             const std::shared_ptr<LE1_NISP_Entities::DateTimeManager> obtCreator,\n+                                                             const std::vector<std::shared_ptr<LE1_NISP_Entities::ParameterDescription>> &descriptions,\n+                                                             const std::vector<std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> &fixedParams) {\n     auto metadataParser = std::make_shared<MetadataParserParamDescriptions>();\n-    metadataParser->setMetadataCreator(std::make_shared<DetectorMetadataCreatorNISP>(configManager, expConfigCreator, planningIdCreator));\n+    metadataParser->setMetadataCreator(std::make_shared<LE1_NISP_Entities::DetectorMetadataCreatorNISP>(configManager, expConfigCreator, planningIdCreator, obtCreator));\n     metadataParser->setParameterDescriptions(descriptions);\n     metadataParser->setFixedParameters(fixedParams);\n     return metadataParser;\n   }\n \n   std::shared_ptr<DetectorCollector> initDetectorCollector(const double detectorObtTolerance) {\n-    auto exposureCreator = std::make_shared<DetectorMapCreator>();\n+    auto exposureCreator = std::make_shared<LE1_NISP_Entities::DetectorMapCreator>();\n     auto detCollector = std::make_shared<DetectorCollectorObt>(exposureCreator);\n     detCollector->setTolerance(detectorObtTolerance);\n     return detCollector;\n   }\n \n-  std::shared_ptr<TelemetryDecoder> initTelemetryDecoder(const std::shared_ptr<ByteArrayCreator> byteArrayCreator) {\n+  std::shared_ptr<TelemetryDecoder> initTelemetryDecoder(const std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> byteArrayCreator) {\n     auto tmDecoder = std::make_shared<TelemetryDecoder>();\n \n     auto decompressorShort = std::make_shared<DecompressorShort>(byteArrayCreator);\n@@ -306,11 +304,11 @@ private:\n     return tmDecoder;  \n   }\n \n-  std::shared_ptr<DateTimeManager> initDateTimeManager(){\n-    return std::make_shared<DateTimeManagerBoost>(m_dummyDate);\n+  std::shared_ptr<LE1_NISP_Entities::DateTimeManager> initDateTimeManager(){\n+    return std::make_shared<LE1_NISP_Entities::DateTimeManagerBoost>(m_dummyDate);\n   }\n \n-  std::shared_ptr<ProductsWriter> initProductsWriter(const std::shared_ptr<DateTimeManager> dateTimeManager,\n+  std::shared_ptr<ProductsWriter> initProductsWriter(const std::shared_ptr<LE1_NISP_Entities::DateTimeManager> dateTimeManager,\n                                                      const std::shared_ptr<ExposuresCounter> exposuresCounter) {\n     auto productsWriter = std::make_shared<ProductsWriter>();\n \n@@ -328,7 +326,7 @@ private:\n     return productsWriter;\n   }\n \n-  std::shared_ptr<ProductsArchiver> initProductsArchiver(const std::shared_ptr<DateTimeManager> dateTimeManager,\n+  std::shared_ptr<ProductsArchiver> initProductsArchiver(const std::shared_ptr<LE1_NISP_Entities::DateTimeManager> dateTimeManager,\n                                                          const std::shared_ptr<ExposuresCounter> exposuresCounter) {\n     auto archiver = std::make_shared<ProductsArchiverDataModelBindings>(dateTimeManager, exposuresCounter);\n     auto dataModelParams = ParserXml().parseDataModelParams(m_dataModelConfigFile);\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/tests/integration-tests/resources/product_generator_integration_test_config.ini": [
                        [
                            "@@ -1,6 +1,6 @@\n paramDescriptionFile = ../../../auxdir/LE1_NISP_Processor/param_descriptions.xml\n telemetryConfigFile = ../../../auxdir/LE1_NISP_Processor/telemetry_config.xml\n detectorsConfigFile = ../../../auxdir/LE1_NISP_Processor/detectors_config_FM.xml\n-mdbFile = ../../../../LE1_NISP_Adapters/tests/integration-tests/resources/DpdMdbDataBase_20230412_101050.xml\n+mdbFile = ../../../../LE1_NISP_Adapters/tests/integration-tests/resources/DpdMdbDataBase_20230614_120000.xml\n exposureConfigFile = ../../../auxdir/LE1_NISP_Processor/exposure_config.xml\n dataModelConfigFile = ../../../auxdir/LE1_NISP_Processor/datamodel_config.xml\n\\ No newline at end of file\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ],
                        [
                            "@@ -0,0 +1,6 @@\n+paramDescriptionFile = ../../../auxdir/LE1_NISP_Processor/param_descriptions.xml\n+telemetryConfigFile = ../../../auxdir/LE1_NISP_Processor/telemetry_config.xml\n+detectorsConfigFile = ../../../auxdir/LE1_NISP_Processor/detectors_config_FM.xml\n+mdbFile = ../../../../LE1_NISP_Adapters/tests/integration-tests/resources/DpdMdbDataBase_20230412_101050.xml\n+exposureConfigFile = ../../../auxdir/LE1_NISP_Processor/exposure_config.xml\n+dataModelConfigFile = ../../../auxdir/LE1_NISP_Processor/datamodel_config.xml\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "docker/LE1_NISP_Proc_dependencies.txt": [
                        [
                            "@@ -1,10 +0,0 @@\n-Elements_6.1.1\n-Elements_6.1.1-devel\n-EL_ArrayLib_2.2.0\n-EL_ArrayLib_2.2.0-devel\n-EleFits_5.1.0\n-EleFits_5.1.0-devel\n-EL_ImageLib_2.2.0\n-EL_ImageLib_2.2.0-devel\n-ST_DataModelTools_9.1.2\n-ST_DataModelTools_9.1.2-devel\n\\ No newline at end of file\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ]
                    ],
                    "docker/conda/condarc": [
                        [
                            "@@ -1,11 +0,0 @@\n-pkgs_dirs:\n-  - $HOME/.pkgs\n-  - ./pkgs\n-\n-channel_alias: https://condaread:euclid_2020@codeen-repo.euclid-ec.org/nexus/repository/\n-default_channels:\n-  - conda-euclid\n-  - conda-forge\n-\n-allow_softlinks: False\n-auto_update_conda: False\n\\ No newline at end of file\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ]
                    ],
                    "docker/scripts/install_lodeen.sh": [
                        [
                            "@@ -1,255 +0,0 @@\n-#!/bin/bash\n-\n-################# INSTALL #################\n-\n-# Add argument for username?\n-\n-\n-set +x\n-\n-install_if(){\n-\trpm_pkg=$1\n-\tyum_pkg=${2:-$rpm_pkg}\n-\tif [[ ! $(rpm -q $rpm_pkg) == 0 ]]; then\n-\t\techo \"---- install $rpm_pkg\"\n-\t\techo \"------ cmd: yum install -y $yum_pkg\"\n-\t\tyum install -y $yum_pkg\n-\tfi\n-}\n-check_install(){\n-\trpm_pkg=$1\n-\tyum_pkg=${2:-$rpm_pkg}\n-\tif [[ ! $(rpm -q $rpm_pkg) == 0 ]]; then\n-\t\techo \"$yum_pkg\"\n-\tfi\n-}\n-install_or_update(){\n-\trpm_pkg=$1\n-\tyum_pkg=${2:-$rpm_pkg}\n-\tif [[ ! $(rpm -q $rpm_pkg) == 0 ]]; then\n-\t\techo \"---- install $rpm_pkg\"\n-\t\tyum install -y $yum_pkg\n-\telse\n-\t\tyum update -y $yum_pkg\n-\tfi\n-}\n-while getopts \"atcdsr:x:u:\" option; do\n-\tcase \"${option}\" in\n-\t\ta) export AUTO_FS=\"yes\";;\n-\t\tt) export TOOLS=\"yes\";;\n-\t\tc) export CVMFS=\"yes\";;\n-\t\td) export DOCKER=\"yes\";;\n-\t\ts) export SERVICES=\"yes\";;\n-\t\tr) export SGS=$OPTARG;;\n-\t\tx) export HTTP_PROXY=$OPTARG;;\n-\t\tu) export EUCLID_USER=$OPTARGS;;\n-\t\t*);;\n-\tesac\n-done\n-echo \"-- Will install AUTO_FS: ${AUTO_FS:-no}\"\n-echo \"-- Will install TOOLS: ${TOOLS:-no}\"\n-echo \"-- Will install CVMFS: ${CVMFS:-no}\"\n-echo \"-- Will install docker: ${DOCKER:-no}\"\n-echo \"-- Will activate services: ${SERVICES:-no}\"\n-echo \"-- With proxy: ${HTTP_PROXY:-noproxy}\"\n-echo \"-- With sgs script: ${SGS}\"\n-echo \"-- For Unix user: ${EUCLID_USER:-user}\"\n-# Repositories\n-\n-cp yum.conf /etc/yum.conf\n-if [ ! -z \"$HTTP_PROXY\" ];\n-then\n-\techo \"--- Setting PROXY in yum configuration\"\n-\techo \"proxy=$HTTP_PROXY\\n\" >> /etc/yum.conf\n-fi\n-\n-echo \"--- install repositories\"\n-/bin/bash $SGS\n-\n-\n-echo \"---- install lodeen packages:\"\n-install_if epel-release\n-install_if ius-release https://$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm\n-\n-yum install -y wget \\\n-\tattr \\\n-\tautofs \\\n-\tbc \\\n-\tbzip2 \\\n-\tcmake \\\n-\tfuse fuse-devel fuse-libs \\\n-\tgcc-c++ \\\n-\tgcc-gfortran \\\n-\tgdb \\\n-\tgit2u \\\n-\tgraphviz \\\n-\tinitscripts \\\n-\tlibXScrnSaver \\\n-\tmake \\\n-\tperl \\\n-\tpsmisc \\\n-\tpython-setuptools \\\n-\trpm-build \\\n-\tsingularity \\\n-\tselinux-policy policycoreutils-devel \\\n-\tsudo \\\n-\tsysvinit-tools \\\n-\ttcl \\\n-\ttk \\\n-\tvim \\\n-\twhich \\\n-\tyum-utils\n-\n-echo \"--- install lodeen tools\"\n-install_or_update lodeen-env\n-install_or_update lodeen-utils\n-\n-cp data_.bashrc_eden.2.0 /home/${EUCLID_USER:-user}/.bashrc_eden.2.0\n-cp data_.bashrc_eden.2.1 /home/${EUCLID_USER:-user}/.bashrc_eden.2.1\n-\n-cp eden.2.0.desktop /home/${EUCLID_USER:-user}/Desktop/\n-cp eden.2.1.desktop /home/${EUCLID_USER:-user}/Desktop/\n-\n-chown ${EUCLID_USER:-user}:${EUCLID_USER:-user} /home/${EUCLID_USER:-user}/.bashrc_eden.2.0\n-chown ${EUCLID_USER:-user}:${EUCLID_USER:-user} /home/${EUCLID_USER:-user}/.bashrc_eden.2.1\n-\n-chown ${EUCLID_USER:-user}:${EUCLID_USER:-user} /home/${EUCLID_USER:-user}/Desktop/eden.2.0.desktop\n-chown ${EUCLID_USER:-user}:${EUCLID_USER:-user} /home/${EUCLID_USER:-user}/Desktop/eden.2.1.desktop\n-\n-\n-\n-if [[ \"$CVMFS\" == \"yes\" ]];\n-then\n-\techo \"--- install cvmfs\"\n-\tinstall_if cvmfs-release-latest https://ecsft.cern.ch/dist/cvmfs/cvmfs-release/cvmfs-release-latest.noarch.rpm\n-\tinstall_if cvmfs\n-\tinstall_if euclid-cvmfs-config\n-else\n-\techo \"--- skip install cvmfs\"\n-fi\n-\n-# AUTOFS\n-if [[ \"$AUTO_FS\" == \"yes\" ]];\n-then\n-\techo \"--- install autofs\"\n-\tif [[ ! $(rpm -q autofs) == 0 ]]; then\n-\t\techo \"---- install autofs\"\n-\t\tyum install -y autofs\n-\tfi\n-\techo \"/cvmfs /etc/auto.cvmfs\" >> /etc/auto.master\n-else\n-\techo \"--- skip install autofs\"\n-fi\n-# LODEEN extra tools\n-if [[ \"$TOOLS\" == \"yes\" ]];\n-then\n-\techo \"--- install extra tools\"\n-\tinstall_list=\"\"\n-\tremove_list=\"\"\n-\tif [[ ! $(rpm -q git2u) == 0 ]]; then\n-\t\tinstall_list=\"${install_list} git2u\"\n-\t\tremove_list=\"${remove_list} git\"\n-\tfi\n-\tif [[ ! $(rpm -q nodejs) == 0 ]]; then\n-\t\tinstall_list=\"${install_list} nodejs\"\n-\tfi\n-\tif [[ ! $(rpm -q valgrind) == 0 ]]; then\n-\t\tinstall_list=\"${install_list} valgrind\"\n-\tfi\n-\tif [[ ! $(rpm -q bleachbit) == 0 ]]; then\n-\t\tinstall_list=\"${install_list} bleachbit\"\n-\tfi\n-\tif [[ ! $(rpm -q eclipse-lodeen) == 0 ]]; then\n-\t\tinstall_list=\"${install_list} eclipse-lodeen\"\n-\tfi\n-\tif [[ \"${remove_list}\" != \"\" ]]; then\n-\t\tyum remove -y ${remove_list}\n-\tfi\n-\tif [[ \"${install_list}\" != \"\" ]]; then\n-\t\techo \"---- packages: '${install_list}'\"\n-\t\tyum install -y ${install_list}\n-\tfi\n-\tif [[ $(rpm -q eclipse-lodeen) == 0 ]]; then\n-\t\tcp data_Eclipse_EDEN-2.0.desktop /home/${EUCLID_USER:-user}/Desktop/Eclipse_EDEN-2.0.desktop\n-\t\tcp data_Eclipse_EDEN-2.1.desktop /home/${EUCLID_USER:-user}/Desktop/Eclipse_EDEN-2.1.desktop\n-\t\tcp data_.launch_eclipse_eden.2.0.sh /home/${EUCLID_USER:-user}/.launch_eclipse_eden.2.0.sh\n-\t\tchown ${EUCLID_USER:-user}:${EUCLID_USER:-user} /home/${EUCLID_USER:-user}/.launch_eclipse_eden.2.0.sh\n-\t\tchown ${EUCLID_USER:-user}:${EUCLID_USER:-user} /home/${EUCLID_USER:-user}/Desktop/Eclipse_EDEN-2.0.desktop\n-\t\tchown ${EUCLID_USER:-user}:${EUCLID_USER:-user} /home/${EUCLID_USER:-user}/Desktop/Eclipse_EDEN-2.1.desktop\n-\tfi\n-\n-\tif [ ! -f /opt/fv5.5/fv ]; then\n-\t\techo \"---- deploy: fv\"\n-\t\t# https://heasarc.gsfc.nasa.gov/ftools/fv/fv_download.html\n-\t\tcurl -u userread:password https://codeen-repo.euclid-ec.org/nexus/repository/raw.sgsservices/fv/5.5/fv5.5_Linux.tar.gz --output /tmp/fv5.5_Linux.tar.gz ${HTTP_PROXY:+\"-x $HTTP_PROXY\"}\n-\t\ttar -xzvf  /tmp/fv5.5_Linux.tar.gz -C /opt\n-\t\tln -s /opt/fv5.5/fv /usr/local/bin/fv\n-    \tln -s /opt/fv5.5/Tix8.4.3 /usr/local/bin/Tix8.4.3\n-    \tln -s /opt/fv5.5/Tix8.4.3 /usr/local/lib/Tix8.4.3\n-\tfi\n-\tif [ ! -f opt/ds9.8.1/ds9 ]; then\n-\t\techo \"---- deploy: ds9\"\n-\t\t# http://ds9.si.edu/site/Home.html\n-\t\tcurl -u userread:password https://codeen-repo.euclid-ec.org/nexus/repository/raw.sgsservices/ds9/8.1/ds9.centos7.8.1.tar.gz --output /tmp/ds9.centos7.8.1.tar.gz ${HTTP_PROXY:+\"-x $HTTP_PROXY\"}\n-\t\tmkdir -p /opt/ds9.8.1\n-\t\ttar -xzvf  /tmp/ds9.centos7.8.1.tar.gz -C /opt/ds9.8.1\n-\t\tln -s /opt/ds9.8.1/ds9 /usr/local/bin/ds9\n-\tfi\n-\n-else\n-\techo \"-- skip install extra tools\"\n-fi\n-\n-\n-if [[ \"$DOCKER\" == \"yes\" ]];\n-then\n-\t# DOCKER\n-\tinstall_list=\"\"\n-\tif [[ ! $(rpm -q yum-utils) == 0 ]]; then\n-\t\tinstall_list=\"$install_list yum-utils\"\n-\tfi\n-\tif [[ ! $(rpm -q device-mapper-persistent-data) ]]; then\n-\t\tinstall_list=\"$install_list device-mapper-persistent-data\"\n-\tfi\n-\tif [[ ! $(rpm -q lvm2) == 0 ]]; then\n-\t\tinstall_list=\"$install_list lvm2\"\n-\tfi\n-\tif [[ ! -z \"$install_list\" ]]; then\n-\t\techo \"---- packages: ${install_list}\"\n-\t\tyum install -y $install_list\n-\tfi\n-\tyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n-\tif [[ ! $(rpm -q docker-ce) ]]; then\n-\t\tyum -y install docker-ce\n-\tfi\n-else\n-\techo \"-- skipping docker service\"\n-fi\n-\n-\n-if [[ \"$SERVICES\" == \"yes\" ]];\n-then\n-\tif [[ \"$CVMFS\" == \"yes\" ]];\n-\tthen\n-\t\techo \"-- activate cmvfs service\"\n-\t\t## Activate autofs\n-\t\tsystemctl daemon-reload\n-\t\tservice cvmfs start\n-\telse\n-\t\techo \"-- skipping cvmfs service\"\n-\tfi\n-\tif [[ \"$DOCKER\" == \"yes\" ]];\n-\tthen\n-\t\techo \"-- activate docker service\"\n-\t\t## Activate autofs\n-\t\tsystemctl daemon-reload\n-\t\tservice docker start\n-\telse\n-\t\techo \"-- skipping docker service\"\n-\tfi\n-else\n-\techo \"-- skipping services activation\"\n-fi\n-\n-cp ./yum.conf /etc/yum.conf\n-echo 'exclude=kernel* redhat-release* centos-release* gcc libgcc libstdc++' >> /etc/yum.conf\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ]
                    ],
                    "docker/scripts/sgs_standalone_install.sh": [
                        [
                            "Binary files a/docker/scripts/sgs_standalone_install.sh and /dev/null differ\n",
                            "Merge branch 'feature-eden-3.1' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-20T15:12:23.000+00:00",
                            "5c3b63d9ea56e0637f92dc76e2e45c7455e39f32"
                        ]
                    ],
                    "LE1_NISP_Adapters/CMakeLists.txt": [
                        [
                            "@@ -0,0 +1,96 @@\n+CMAKE_MINIMUM_REQUIRED(VERSION 2.8.12)\n+\n+#===============================================================================\n+# Load elements_subdir macro here\n+# Examples:\n+#   For declaring a project module:\n+#         elements_subdir(ElementsExamples)\n+#===============================================================================\n+elements_subdir(LE1_NISP_Adapters)\n+\n+#===============================================================================\n+# Load elements_depends_on_subdirs macro here\n+#   For creating a dependency onto an other accessible module\n+#         elements_depends_on_subdirs(ElementsKernel)\n+#===============================================================================\n+elements_depends_on_subdirs(ElementsKernel)\n+elements_depends_on_subdirs(LE1_NISP_Entities)\n+elements_depends_on_subdirs(ST_DM_MDBTools)\n+\n+#===============================================================================\n+# Add the find_package macro (a pure CMake command) here to locate the\n+# libraries.\n+# Examples:\n+#          find_package(CppUnit)\n+#===============================================================================\n+\n+#===============================================================================\n+# Declare the library dependencies here\n+# Example:\n+#         elements_add_library(ElementsExamples src/Lib/*.cpp\n+#                     INCLUDE_DIRS Boost ElementsKernel\n+#                     LINK_LIBRARIES Boost ElementsKernel\n+#                     PUBLIC_HEADERS ElementsExamples)\n+#===============================================================================\n+elements_add_library(LE1_NISP_Adapters src/lib/*.cpp\n+        LINK_LIBRARIES ElementsKernel LE1_NISP_Entities ST_DM_MDBTools\n+        INCLUDE_DIRS LE1_NISP_Entities\n+        PUBLIC_HEADERS LE1_NISP_Adapters)\n+\n+#===============================================================================\n+# Declare the Boost tests here\n+# Example:\n+# elements_add_unit_test(BoostClassExample tests/src/Boost/ClassExample_test.cpp\n+#                       EXECUTABLE BoostClassExample_test\n+#                       INCLUDE_DIRS ElementsExamples\n+#                       LINK_LIBRARIES ElementsExamples TYPE Boost)\n+#===============================================================================\n+if(BUILD_INTEGRATION_TESTS)\n+elements_add_unit_test(ConfigurationParserMdbIntegration tests/integration-tests/src/ConfigurationParserMdb_integration_test.cpp\n+        EXECUTABLE LE1_NISP_Adapters_ConfigurationParserMdb_integration_test\n+        LINK_LIBRARIES LE1_NISP_Adapters WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests/integration-tests/resources/\n+        TYPE Boost)\n+endif()\n+elements_add_unit_test(ParamDescriptionParserXml tests/src/ParamDescriptionParserXml_test.cpp\n+        EXECUTABLE LE1_NISP_Adapters_ParamDescriptionParserXml_test\n+        LINK_LIBRARIES LE1_NISP_Adapters\n+        TYPE Boost)\n+elements_add_unit_test(TelemetryConfigParserXml tests/src/TelemetryConfigParserXml_test.cpp\n+        EXECUTABLE LE1_NISP_Adapters_TelemetryConfigParserXml_test\n+        LINK_LIBRARIES LE1_NISP_Adapters\n+        TYPE Boost)\n+elements_add_unit_test(DetectorConfigParserXml tests/src/DetectorConfigParserXml_test.cpp\n+        EXECUTABLE LE1_NISP_Adapters_DetectorConfigParserXml_test\n+        LINK_LIBRARIES LE1_NISP_Adapters\n+        TYPE Boost)\n+elements_add_unit_test(ExposureConfigParserXml tests/src/ExposureConfigParserXml_test.cpp\n+        EXECUTABLE LE1_NISP_Adapters_ExposureConfigParserXml_test\n+        LINK_LIBRARIES LE1_NISP_Adapters\n+        TYPE Boost)\n+elements_add_unit_test(ConfigurationParserMdb tests/src/ConfigurationParserMdb_test.cpp\n+        EXECUTABLE LE1_NISP_Adapters_ConfigurationParserMdb_test\n+        LINK_LIBRARIES LE1_NISP_Adapters\n+        TYPE Boost)\n+elements_add_unit_test(DataModelParamsParserXml tests/src/DataModelParamsParserXml_test.cpp\n+        EXECUTABLE LE1_NISP_Adapters_DataModelParamsParserXml_test\n+        LINK_LIBRARIES LE1_NISP_Adapters\n+        TYPE Boost)\n+\n+#===============================================================================\n+# Use the following macro for python modules, scripts and aux files:\n+#  elements_install_python_modules()\n+#  elements_install_scripts()\n+#===============================================================================\n+\n+#===============================================================================\n+# Declare the Python programs here\n+# Examples :\n+# elements_add_python_program(PythonProgramExample\n+#                             ElementsExamples.PythonProgramExample)\n+#===============================================================================\n+\n+#===============================================================================\n+# Add the elements_install_conf_files macro\n+# Examples:\n+#          elements_install_conf_files()\n+#===============================================================================\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Adapters/LE1_NISP_Adapters/ConfigurationParserMdb.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/ConfigurationParserMdb.h\n+ * @file LE1_NISP_Adapters/ConfigurationParserMdb.h\n  * @date 05/27/21\n  * @author user\n  *\n@@ -21,55 +21,75 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_CONFIGURATIONPARSERMDB_H\n-#define _LE1_NISP_PROCESSSCIENCE_CONFIGURATIONPARSERMDB_H\n+#ifndef _LE1_NISP_ADAPTERS_CONFIGURATIONPARSERMDB_H\n+#define _LE1_NISP_ADAPTERS_CONFIGURATIONPARSERMDB_H\n \n #include <memory>\n-#include \"LE1_NISP_ProcessScience/Exception.h\"\n-#include \"LE1_NISP_ProcessScience/DetectorConfigManager.h\"\n-#include \"LE1_NISP_ProcessScience/TelemetryConfiguration.h\"\n-#include \"LE1_NISP_ProcessScience/ExposureConfigManager.h\"\n+#include \"LE1_NISP_Adapters/Exception.h\"\n+#include \"LE1_NISP_Entities/DetectorConfigManager.h\"\n+#include \"LE1_NISP_Entities/TelemetryConfiguration.h\"\n+#include \"LE1_NISP_Entities/ExposureConfigManager.h\"\n #include \"ST_DM_MDBTools/Mdb.h\"\n #include \"boost/filesystem.hpp\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Adapters {\n \n /**\n  * @class ConfigurationParserMdb\n- * @brief\n+ * @brief Parse the configurations provided in the MDB input file using the ST_DM_MDBTools library, such as:\n+ * \\li Detector configuration parameters\n+ * \\li Telemetry configuration parameters\n+ * \\li Exposure configuration parameters\n  *\n  */\n class ConfigurationParserMdb {\n \n public:\n \n+  /**\n+   * @brief Default constructor\n+   */\n   ConfigurationParserMdb();\n   \n   /**\n-   * @brief \n-   * \n+   * @brief Destructor\n    */\n   virtual ~ConfigurationParserMdb();\n \n-  virtual void parseDetectorConfig(std::shared_ptr<DetectorConfigManager> detConfigManager, const std::string &mdbFile);\n-  virtual void parseTelemetryConfig(std::shared_ptr<TelemetryConfiguration> telemetryConfig, const std::string &mdbFile);\n-  virtual void parseExposureConfiguration(std::shared_ptr<ExposureConfigManager> expConfigManager, const std::string &mdbFile);\n+  /**\n+   * @brief Update the detectors configuration with parameters parsed from MDB file\n+   * @param detConfigManager A DetectorConfigManager smart pointer\n+   * @param mdbFile The MDB file containing the detectors configuration\n+   */\n+  virtual void parseDetectorConfig(std::shared_ptr<LE1_NISP_Entities::DetectorConfigManager> detConfigManager, const std::string &mdbFile);\n+  /**\n+   * @brief Update the telemetry configuration with parameters parsed from MDB file\n+   * @param telemetryConfig A TelemetryConfiguration smart pointer\n+   * @param mdbFile The MDB file containing the telemetry configuration\n+   */\n+  virtual void parseTelemetryConfig(std::shared_ptr<LE1_NISP_Entities::TelemetryConfiguration> telemetryConfig, const std::string &mdbFile);\n+  /**\n+   * @brief Update the exposure configuration with parameters parsed from MDB file\n+   * @param expConfigManager A ExposureConfigManager smart pointer\n+   * @param mdbFile The MDB file containing the exposure configuration\n+   */\n+  virtual void parseExposureConfiguration(std::shared_ptr<LE1_NISP_Entities::ExposureConfigManager> expConfigManager, const std::string &mdbFile);\n \n private:\n   boost::filesystem::path m_mdbFile;  \n   \n-  void validateDetectorConfigManager(const std::shared_ptr<DetectorConfigManager> detConfigManager) const;\n+  void validateDetectorConfigManager(const std::shared_ptr<LE1_NISP_Entities::DetectorConfigManager> detConfigManager) const;\n   void checkFileExists(const std::string &file) const;\n-  void updateCommonConfig(std::shared_ptr<DetectorConfigManager> detConfigManager, const Mdb &mdb);\n-  void updateDetectorConfig(std::shared_ptr<DetectorConfigManager> detConfigManager, const Mdb &mdb);\n+  void updateCommonConfig(std::shared_ptr<LE1_NISP_Entities::DetectorConfigManager> detConfigManager, const Mdb &mdb);\n+  void updateDetectorConfig(std::shared_ptr<LE1_NISP_Entities::DetectorConfigManager> detConfigManager, const Mdb &mdb);\n \n-  void validateTelemetryConfiguration(const std::shared_ptr<TelemetryConfiguration> telemetryConfig) const;\n-  void validateExposureConfiguration(const std::shared_ptr<ExposureConfigManager> expConfigManager) const;\n+  void validateTelemetryConfiguration(const std::shared_ptr<LE1_NISP_Entities::TelemetryConfiguration> telemetryConfig) const;\n+  void validateExposureConfiguration(const std::shared_ptr<LE1_NISP_Entities::ExposureConfigManager> expConfigManager) const;\n \n \n };  // End of ConfigurationParserMdb class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Adapters\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Adapters/LE1_NISP_Adapters/DataModelParamsParser.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/DataModelParamsParser.h\n+ * @file LE1_NISP_Adapters/DataModelParamsParser.h\n  * @date 03/29/22\n  * @author user\n  *\n@@ -21,17 +21,17 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DATAMODELPARAMSPARSER_H\n-#define _LE1_NISP_PROCESSSCIENCE_DATAMODELPARAMSPARSER_H\n+#ifndef _LE1_NISP_ADAPTERS_DATAMODELPARAMSPARSER_H\n+#define _LE1_NISP_ADAPTERS_DATAMODELPARAMSPARSER_H\n \n #include <map>\n #include <any>\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Adapters {\n \n /**\n  * @class DataModelParamsParser\n- * @brief\n+ * @brief Interface to parse the data model parameters provided in the dedicated auxiliary file\n  *\n  */\n class DataModelParamsParser {\n@@ -43,11 +43,16 @@ public:\n    */\n   virtual ~DataModelParamsParser() = default;\n \n+  /**\n+   * @brief Parse the data model parameters\n+   * @param filename The file containing the data model parameters\n+   * @return Map containing the parameters with parameter name as key\n+   */\n   virtual std::map<std::string, std::any> parseDataModelParams(const std::string &filename) = 0;\n \n };  // End of DataModelParamsParser class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Adapters\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Adapters/LE1_NISP_Adapters/DetectorConfigParser.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/DetectorConfigParserXml.h\n+ * @file LE1_NISP_Adapters/DetectorConfigParserXml.h\n  * @date 02/24/21\n  * @author user\n  *\n@@ -21,36 +21,39 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORCONFIGPARSERXML_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORCONFIGPARSERXML_H\n+#ifndef _LE1_NISP_ADAPTERS_DETECTORCONFIGPARSER_H\n+#define _LE1_NISP_ADAPTERS_DETECTORCONFIGPARSER_H\n \n #include <memory>\n-#include \"LE1_NISP_ProcessScience/Exception.h\"\n-#include \"LE1_NISP_ProcessScience/DetectorConfigManager.h\"\n+#include \"LE1_NISP_Adapters/Exception.h\"\n+#include \"LE1_NISP_Entities/DetectorConfigManager.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Adapters {\n \n /**\n- * @class DetectorConfigParserXml\n- * @brief\n+ * @class DetectorConfigParser\n+ * @brief Parser for detector configurations\n  *\n  */\n-class DetectorConfigParserXml {\n+class DetectorConfigParser {\n \n public:\n \n-  DetectorConfigParserXml();\n-\n   /**\n    * @brief Destructor\n    */\n-  virtual ~DetectorConfigParserXml();\n+  virtual ~DetectorConfigParser() = default;\n \n-  virtual void parse(const std::shared_ptr<DetectorConfigManager> &detConfigManager, const std::string &filename);\n+  /**\n+   * @brief Parse the detector configuration parameters from XML file and updates the DetectorConfigurationManager entity\n+   * @param detConfigManager The DetectorConfigManager object\n+   * @param filename The file containing the detector configurations\n+   */\n+  virtual void parseDetectorConfig(const std::shared_ptr<LE1_NISP_Entities::DetectorConfigManager> &detConfigManager, const std::string &filename) = 0;\n \n };  // End of DetectorConfigParserXml class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Adapters\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Adapters/LE1_NISP_Adapters/Exception.h": [
                        [
                            "@@ -0,0 +1,108 @@\n+/**\n+ * @file LE1_NISP_Entities/Exception.h\n+ * @date 10/15/20\n+ * @author user\n+ *\n+ * @copyright (C) 2012-2020 Euclid Science Ground Segment\n+ *\n+ * This library is free software; you can redistribute it and/or modify it under\n+ * the terms of the GNU Lesser General Public License as published by the Free\n+ * Software Foundation; either version 3.0 of the License, or (at your option)\n+ * any later version.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+ * details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this library; if not, write to the Free Software Foundation, Inc.,\n+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+ *\n+ */\n+\n+#ifndef _LE1_NISP_ADAPTERS_EXCEPTION_H\n+#define _LE1_NISP_ADAPTERS_EXCEPTION_H\n+\n+#include \"ElementsKernel/Exception.h\"\n+\n+namespace LE1_NISP_Adapters {\n+\n+/**\n+ * @class Exception\n+ * @brief\n+ *\n+ */\n+class Exception : public Elements::Exception{\n+\n+public:\n+\n+  Exception(const std::string &errMsg = \"\");\n+  virtual ~Exception() override;  \n+\n+};\n+\n+class FileNotFoundException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class NullDetectorConfigManagerException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class NullTelemetryConfigurationException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class NullExposureConfigurationException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class ErrorReadingParamDescriptionInfoException:  public Exception{\n+  using Exception::Exception;\n+};\n+\n+class ParamDescriptionNodeException:  public Exception{\n+  using Exception::Exception;\n+};\n+\n+class UnknownParameterTypeException:  public Exception{\n+  using Exception::Exception;\n+};\n+\n+class FixedParamNodeException:  public Exception{\n+  using Exception::Exception;\n+};\n+\n+class DataModelParamsParserException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class ErrorReadingFixedParamElementException:  public Exception{\n+  using Exception::Exception;\n+};\n+\n+class IncompleteExposureConfigException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class ErrorReadingDetectorConfigException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class IncompleteDetectorConfigException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class ZeroDetectorConfigFoundException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class IncompleteTelemetryConfigException:  public Exception{\n+  using Exception::Exception;\n+};\n+\n+}  // namespace LE1_NISP_Adapters\n+\n+\n+#endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Adapters/LE1_NISP_Adapters/ExposureConfigParser.h": [
                        [
                            "@@ -0,0 +1,60 @@\n+/**\n+ * @file LE1_NISP_Adapters/ExposureConfigParserXml.h\n+ * @date 02/25/21\n+ * @author user\n+ *\n+ * @copyright (C) 2012-2020 Euclid Science Ground Segment\n+ *\n+ * This library is free software; you can redistribute it and/or modify it under\n+ * the terms of the GNU Lesser General Public License as published by the Free\n+ * Software Foundation; either version 3.0 of the License, or (at your option)\n+ * any later version.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+ * details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this library; if not, write to the Free Software Foundation, Inc.,\n+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+ *\n+ */\n+\n+#ifndef _LE1_NISP_ADAPTERS_EXPOSURECONFIGPARSER_H\n+#define _LE1_NISP_ADAPTERS_EXPOSURECONFIGPARSER_H\n+\n+#include <memory>\n+\n+#include \"LE1_NISP_Adapters/Exception.h\"\n+#include \"LE1_NISP_Entities/ExposureConfigManager.h\"\n+\n+namespace LE1_NISP_Adapters {\n+\n+/**\n+ * @class ExposureConfigParser\n+ * @brief This adapter parses the available exposure configurations provided in a dedicated auxiliary file.\n+ *\n+ */\n+class ExposureConfigParser {\n+\n+public:\n+\n+  /**\n+   * @brief Destructor\n+   */\n+  virtual ~ExposureConfigParser() = default;\n+\n+  /**\n+   * @brief Parse the exposure configuration from file\n+   * @param filename The file containing the exposure configuration\n+   * @return An ExposureConfigManager smart pointer\n+   */\n+  virtual std::shared_ptr<LE1_NISP_Entities::ExposureConfigManager> parseExposureConfig(const std::string &filename) = 0;\n+\n+};  // End of ExposureConfigParser class\n+\n+}  // namespace LE1_NISP_Adapters\n+\n+\n+#endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Adapters/LE1_NISP_Adapters/ParamDescriptionParser.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/ParamDescriptionParser.h\n+ * @file LE1_NISP_Adapters/ParamDescriptionParser.h\n  * @date 02/22/21\n  * @author user\n  *\n@@ -21,19 +21,19 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_PARAMDESCRIPTIONPARSER_H\n-#define _LE1_NISP_PROCESSSCIENCE_PARAMDESCRIPTIONPARSER_H\n+#ifndef _LE1_NISP_ADAPTERS_PARAMDESCRIPTIONPARSER_H\n+#define _LE1_NISP_ADAPTERS_PARAMDESCRIPTIONPARSER_H\n \n #include <vector>\n #include <memory>\n-#include \"LE1_NISP_ProcessScience/ParameterDescription.h\"\n-#include \"LE1_NISP_ProcessScience/Parameter.h\"\n+#include \"LE1_NISP_Entities/ParameterDescription.h\"\n+#include \"LE1_NISP_Entities/Parameter.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Adapters {\n \n /**\n  * @class ParamDescriptionParser\n- * @brief\n+ * @brief Interface to parse the descriptions of parameters from configuration files\n  *\n  */\n class ParamDescriptionParser {\n@@ -45,12 +45,22 @@ public:\n    */\n   virtual ~ParamDescriptionParser() = default;\n \n-  virtual std::vector<std::shared_ptr<ParameterDescription>> parseParamDescriptions(const std::string &filename) = 0;\n-  virtual std::vector<std::shared_ptr<ParameterInterface>> parseFixedParams(const std::string &filename) = 0;\n+  /**\n+   * @brief Parse the ParameterDescription from a configuration file\n+   * @param filename The filename of the configuration file\n+   * @return A vector of ParameterDescription smart pointers\n+   */\n+  virtual std::vector<std::shared_ptr<LE1_NISP_Entities::ParameterDescription>> parseParamDescriptions(const std::string &filename) = 0;\n+  /**\n+   * @brief Parse the parameters from a configuration file\n+   * @param filename The filename of the configuration file\n+   * @return A vector of ParameterInterface smart pointers\n+   */\n+  virtual std::vector<std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> parseFixedParams(const std::string &filename) = 0;\n \n };  // End of ParamDescriptionParser class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Adapters\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Adapters/LE1_NISP_Adapters/ParserXml.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/ParserXml.h\n+ * @file LE1_NISP_Adapters/ParserXml.h\n  * @date 02/22/21\n  * @author user\n  *\n@@ -21,22 +21,30 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_PARSERXML_H\n-#define _LE1_NISP_PROCESSSCIENCE_PARSERXML_H\n+#ifndef _LE1_NISP_ADAPTERS_PARSERXML_H\n+#define _LE1_NISP_ADAPTERS_PARSERXML_H\n \n-#include \"LE1_NISP_ProcessScience/Exception.h\"\n-#include \"LE1_NISP_ProcessScience/ParamDescriptionParser.h\"\n-#include \"LE1_NISP_ProcessScience/Parameter.h\"\n-#include \"LE1_NISP_ProcessScience/DataModelParamsParser.h\"\n+#include \"LE1_NISP_Adapters/Exception.h\"\n+#include \"ParamDescriptionParser.h\"\n+#include \"LE1_NISP_Entities/Parameter.h\"\n+#include \"DataModelParamsParser.h\"\n+#include \"ExposureConfigParser.h\"\n+#include \"DetectorConfigParser.h\"\n+#include \"TelemetryConfigParser.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Adapters {\n \n /**\n  * @class ParserXml\n- * @brief\n+ * @brief Implementation of auxiliary file parsers that uses XML format\n  *\n  */\n-class ParserXml: public ParamDescriptionParser, public DataModelParamsParser {\n+class ParserXml\n+    : public ParamDescriptionParser,\n+      public DataModelParamsParser,\n+      public ExposureConfigParser,\n+      public DetectorConfigParser,\n+      public TelemetryConfigParser {\n \n public:\n \n@@ -50,13 +58,16 @@ public:\n    */\n   ~ParserXml() override;\n \n-  std::vector<std::shared_ptr<ParameterDescription>> parseParamDescriptions(const std::string &filename) override;\n-  std::vector<std::shared_ptr<ParameterInterface>> parseFixedParams(const std::string &filename) override;\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::ParameterDescription>> parseParamDescriptions(const std::string &filename) override;\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> parseFixedParams(const std::string &filename) override;\n   std::map<std::string, std::any> parseDataModelParams(const std::string &filename) override;\n+  std::shared_ptr<LE1_NISP_Entities::ExposureConfigManager> parseExposureConfig(const std::string &filename) override;\n+  void parseDetectorConfig(const std::shared_ptr<LE1_NISP_Entities::DetectorConfigManager> &detConfigManager, const std::string &filename) override;\n+  std::shared_ptr<LE1_NISP_Entities::TelemetryConfiguration> parseTelemetryConfig(const std::string &filename) override;\n \n };  // End of ParserXml class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Adapters\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Adapters/LE1_NISP_Adapters/TelemetryConfigParser.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/TelemetryConfigParserXml.h\n+ * @file LE1_NISP_Adapters/TelemetryConfigParserXml.h\n  * @date 02/23/21\n  * @author user\n  *\n@@ -21,38 +21,39 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_TELEMETRYCONFIGPARSERXML_H\n-#define _LE1_NISP_PROCESSSCIENCE_TELEMETRYCONFIGPARSERXML_H\n+#ifndef _LE1_NISP_ADAPTERS_TELEMETRYCONFIGPARSER_H\n+#define _LE1_NISP_ADAPTERS_TELEMETRYCONFIGPARSER_H\n \n #include <memory>\n-#include \"LE1_NISP_ProcessScience/Exception.h\"\n-#include \"LE1_NISP_ProcessScience/TelemetryConfiguration.h\"\n+#include \"LE1_NISP_Adapters/Exception.h\"\n+#include \"LE1_NISP_Entities/TelemetryConfiguration.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Adapters {\n \n /**\n- * @class TelemetryConfigParserXml\n- * @brief\n+ * @class TelemetryConfigParser\n+ * @brief Parser for telemetry configuration\n  *\n  */\n-class TelemetryConfigParserXml {\n+class TelemetryConfigParser {\n \n public:\n \n-  /**\n-   * @brief Constructor\n-   */\n-  TelemetryConfigParserXml();\n   /**\n    * @brief Destructor\n    */\n-  virtual ~TelemetryConfigParserXml();\n+  virtual ~TelemetryConfigParser() = default;\n \n-  virtual std::shared_ptr<TelemetryConfiguration> parse(const std::string &filename);\n+  /**\n+   * @brief Parse the telemetry configuration from file\n+   * @param filename The file containing the telemetry configuration\n+   * @return A TelemetryConfiguration smart pointer\n+   */\n+   virtual std::shared_ptr<LE1_NISP_Entities::TelemetryConfiguration> parseTelemetryConfig(const std::string &filename) = 0;\n \n-};  // End of TelemetryConfigParserXml class\n+};  // End of TelemetryConfigParser class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Adapters\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Adapters/doc/doc_module.rst": [
                        [
                            "",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Adapters/src/lib/Exception.cpp": [
                        [
                            "@@ -21,9 +21,9 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/Exception.h\"\n+#include \"LE1_NISP_Adapters/Exception.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Adapters {\n \n   Exception::Exception(const std::string &errMsg)\n   : Elements::Exception(errMsg){\n@@ -32,7 +32,7 @@ namespace LE1_NISP_ProcessScience {\n   Exception::~Exception(){}\n \n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Adapters\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Adapters/src/lib/ParserXml.cpp": [
                        [
                            "@@ -21,19 +21,19 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/ParserXml.h\"\n+#include \"LE1_NISP_Adapters/ParserXml.h\"\n #include <iostream>\n #include \"boost/property_tree/xml_parser.hpp\"\n #include \"boost/property_tree/ptree.hpp\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Adapters {\n     \n     ParserXml::ParserXml(){}\n \n     ParserXml::~ParserXml(){}\n \n-    std::vector<std::shared_ptr<ParameterDescription>> ParserXml::parseParamDescriptions(const std::string &filename){\n-        std::vector<std::shared_ptr<ParameterDescription>> descriptions;\n+    std::vector<std::shared_ptr<LE1_NISP_Entities::ParameterDescription>> ParserXml::parseParamDescriptions(const std::string &filename){\n+        std::vector<std::shared_ptr<LE1_NISP_Entities::ParameterDescription>> descriptions;\n         std::ifstream inputFile(filename);\n         \n         if(!inputFile.good())\n@@ -49,7 +49,7 @@ namespace LE1_NISP_ProcessScience {\n         for( ptree::value_type const& val: tree.get_child(\"paramConfigurations.descriptions\")) {\n             if(val.first == \"param\"){\n                 try{\n-                    auto desc = std::make_shared<ParameterDescription>(\n+                    auto desc = std::make_shared<LE1_NISP_Entities::ParameterDescription>(\n                         val.second.get<std::string>(\"name\"),\n                         val.second.get<size_t>(\"offset\"),\n                         val.second.get<size_t>(\"offbit\"),\n@@ -77,8 +77,8 @@ namespace LE1_NISP_ProcessScience {\n         return descriptions;\n     }\n \n-  std::vector<std::shared_ptr<ParameterInterface>> ParserXml::parseFixedParams(const std::string &filename) {\n-    std::vector<std::shared_ptr<ParameterInterface>> fixedParams;\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> ParserXml::parseFixedParams(const std::string &filename) {\n+    std::vector<std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> fixedParams;\n     std::ifstream inputFile(filename);\n \n     if(!inputFile.good())\n@@ -93,7 +93,7 @@ namespace LE1_NISP_ProcessScience {\n       read_xml(inputFile, tree);\n       for( ptree::value_type const& val: tree.get_child(\"paramConfigurations.fixedParameters\")) {\n         if(val.first == \"param\"){\n-          auto paramDesc = std::make_shared<ParameterDescription>();\n+          auto paramDesc = std::make_shared<LE1_NISP_Entities::ParameterDescription>();\n \n           try{\n             paramDesc->setName(val.second.get<std::string>(\"name\"));\n@@ -102,11 +102,11 @@ namespace LE1_NISP_ProcessScience {\n             auto type = val.second.get<std::string>(\"type\");\n             paramDesc->setType(type);\n             if(type == \"string\")\n-              fixedParams.push_back(std::make_shared<Parameter>(paramDesc, val.second.get<std::string>(\"value\")));\n+              fixedParams.push_back(std::make_shared<LE1_NISP_Entities::Parameter>(paramDesc, val.second.get<std::string>(\"value\")));\n             else if(type == \"uint\")\n-              fixedParams.push_back(std::make_shared<Parameter>(paramDesc, val.second.get<unsigned int>(\"value\")));\n+              fixedParams.push_back(std::make_shared<LE1_NISP_Entities::Parameter>(paramDesc, val.second.get<unsigned int>(\"value\")));\n             else if(type == \"double\")\n-              fixedParams.push_back(std::make_shared<Parameter>(paramDesc, val.second.get<double>(\"value\")));\n+              fixedParams.push_back(std::make_shared<LE1_NISP_Entities::Parameter>(paramDesc, val.second.get<double>(\"value\")));\n             else\n               throw UnknownParameterTypeException(\"ParserXml::parseFixedParams: \"\n                                                   \"unknown type \" + type);\n@@ -169,7 +169,248 @@ namespace LE1_NISP_ProcessScience {\n     return dataModelParams;\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+  std::shared_ptr<LE1_NISP_Entities::ExposureConfigManager> ParserXml::parseExposureConfig(const std::string &filename){\n+    std::ifstream inputFile(filename);\n+\n+    if(!inputFile.good())\n+      throw FileNotFoundException(\"ParserXml::parseExposureConfig: \"\n+                                  \"cannot find file \\\"\" + filename + \"\\\"\");\n+\n+    using boost::property_tree::ptree;\n+    ptree tree;\n+    read_xml(inputFile, tree);\n+\n+    std::vector<std::string> keysConfigCaptions;\n+    std::vector<std::string> instConfigCaptions;\n+    std::vector<std::string> gwaPositions;\n+    std::vector<std::string> fwaPositions;\n+    std::vector<std::string> productCategories;\n+    std::vector<std::string> productFirstTypes;\n+    std::vector<std::string> productSecondTypes;\n+    std::vector<std::string> observationModes;\n+    std::vector<std::string> productTechniques;\n+    std::vector<int> gwaTilts;\n+    std::string gwaRefPos;\n+    std::string fwaRefPos;\n+\n+    try{\n+\n+      auto const &exposureConfig = tree.get_child(\"exposureConfig\");\n+\n+      for(auto const &keysConfig: exposureConfig.get_child(\"keywordConfigs\")){\n+        if(keysConfig.first == \"config\"){\n+          keysConfigCaptions.push_back(keysConfig.second.get_child(\"mode\").get_value<std::string>());\n+          gwaPositions.push_back(keysConfig.second.get_child(\"gwaPos\").get_value<std::string>());\n+          fwaPositions.push_back(keysConfig.second.get_child(\"fwaPos\").get_value<std::string>());\n+          productTechniques.push_back(keysConfig.second.get_child(\"productTechnique\").get_value<std::string>());\n+          gwaTilts.push_back(keysConfig.second.get_child(\"gwaTilt\").get_value<int>());\n+        }\n+      }\n+      for(auto const &instConfig: exposureConfig.get_child(\"instrumentConfigs\")){\n+        if(instConfig.first == \"config\"){\n+          instConfigCaptions.push_back(instConfig.second.get_child(\"mode\").get_value<std::string>());\n+          productCategories.push_back(instConfig.second.get_child(\"productCategory\").get_value<std::string>());\n+          productFirstTypes.push_back(instConfig.second.get_child(\"productFirstType\").get_value<std::string>());\n+          productSecondTypes.push_back(instConfig.second.get_child(\"productSecondType\").get_value<std::string>());\n+          observationModes.push_back(instConfig.second.get_child(\"observationMode\").get_value<std::string>());\n+        }\n+      }\n+      gwaRefPos = exposureConfig.get_child(\"gwaRefPosition\").get_value<std::string>();\n+      fwaRefPos = exposureConfig.get_child(\"fwaRefPosition\").get_value<std::string>();\n+\n+    }catch(const boost::property_tree::ptree_bad_path& er){\n+      inputFile.close();\n+      throw IncompleteExposureConfigException(\"ParserXml::parseExposureConfig: \"\n+                                              + std::string(er.what()));\n+    }\n+\n+    auto expConfigManager = std::make_shared<LE1_NISP_Entities::ExposureConfigManager>();\n+    expConfigManager->setKeysConfigCaptions(keysConfigCaptions);\n+    expConfigManager->setInstConfigCaptions(instConfigCaptions);\n+    expConfigManager->setGwaPositions(gwaPositions);\n+    expConfigManager->setFwaPositions(fwaPositions);\n+    expConfigManager->setProductCategories(productCategories);\n+    expConfigManager->setProductFirstTypes(productFirstTypes);\n+    expConfigManager->setProductSecondTypes(productSecondTypes);\n+    expConfigManager->setObservationModes(observationModes);\n+    expConfigManager->setProductTechniques(productTechniques);\n+    expConfigManager->setGwaRefPosition(gwaRefPos);\n+    expConfigManager->setFwaRefPosition(fwaRefPos);\n+    expConfigManager->setGwaTilts(gwaTilts);\n+\n+    inputFile.close();\n+\n+    return expConfigManager;\n+  }\n+\n+  void ParserXml::parseDetectorConfig(const std::shared_ptr<LE1_NISP_Entities::DetectorConfigManager> &detConfigManager, const std::string &filename){\n+    if(detConfigManager == nullptr)\n+      throw NullDetectorConfigManagerException(\"ParserXml::parseDetectorConfig: \"\n+                                               \"null DetectorConfigManager\");\n+\n+    std::ifstream inputFile(filename);\n+\n+    if(!inputFile.good())\n+      throw FileNotFoundException(\"ParserXml::parseDetectorConfig: \"\n+                                  \"cannot find file \\\"\" + filename + \"\\\"\");\n+\n+    using boost::property_tree::ptree;\n+    ptree tree;\n+\n+    read_xml(inputFile, tree);\n+    tree = tree.get_child(\"detectorConfig\");\n+\n+    std::string cType1;\n+    std::string cType2;\n+    std::string cUnit1;\n+    std::string cUnit2;\n+\n+    try{\n+      detConfigManager->setDetectorObtTolerance(tree.get<double>(\"commonConfig.detectorObtTolerance\"));\n+      detConfigManager->setFrameLineSize(tree.get<unsigned short>(\"commonConfig.frameLineSize\"));\n+      detConfigManager->setFrameTime(tree.get<double>(\"commonConfig.frameTime\"));\n+      detConfigManager->setLineTime(detConfigManager->getFrameTime()/detConfigManager->getFrameLineSize());\n+      cType1 = tree.get<std::string>(\"commonConfig.CType1\");\n+      cType2 = tree.get<std::string>(\"commonConfig.CType2\");\n+      cUnit1 = tree.get<std::string>(\"commonConfig.CUnit1\");\n+      cUnit2 = tree.get<std::string>(\"commonConfig.CUnit2\");\n+    }catch(const boost::property_tree::ptree_error& er){\n+      inputFile.close();\n+      throw ErrorReadingDetectorConfigException(\"ParserXml::parseDetectorConfig: \"\n+                                                + std::string(er.what()));\n+    }\n+\n+    try{\n+      for( ptree::value_type const& val: tree.get_child(\"detectors\")) {\n+        try{\n+          if(val.first == \"detector\"){\n+\n+            LE1_NISP_Entities::DetectorConfiguration detConfig;\n+\n+            auto scePos = val.second.get<std::string>(\"scePos\");\n+            auto dpuId  = val.second.get<unsigned short>(\"dpuId\");\n+            auto sceId  = val.second.get<unsigned short>(\"sceId\");\n+\n+            detConfig.detectorId = LE1_NISP_Entities::DetectorId(dpuId, sceId, scePos);\n+            detConfig.sceIndex   = val.second.get<unsigned short>(\"sceIndex\");\n+            detConfig.scaId      = val.second.get<std::string>(\"scaId\");\n+            detConfig.wcs.cType1 = cType1;\n+            detConfig.wcs.cType2 = cType2;\n+            detConfig.wcs.cUnit1 = cUnit1;\n+            detConfig.wcs.cUnit2 = cUnit2;\n+\n+            detConfigManager->addConfiguration(detConfig);\n+          }\n+        }catch(const boost::property_tree::ptree_error& er){\n+          inputFile.close();\n+          throw ErrorReadingDetectorConfigException(\"ParserXml::parseDetectorConfig: \"\n+                                                    + std::string(er.what()));\n+        }\n+      }\n+    }\n+    catch(const boost::property_tree::ptree_bad_path& er){\n+      inputFile.close();\n+      throw IncompleteDetectorConfigException(\"ParserXml::parseDetectorConfig: \"\n+                                              + std::string(er.what()));\n+    }\n+\n+    inputFile.close();\n+\n+    if(detConfigManager->countConfigurations() == 0)\n+      throw ZeroDetectorConfigFoundException(\"ParserXml::parseDetectorConfig: \"\n+                                             \"Zero detector configurations have been found \"\n+                                             \"in file \" + filename);\n+  }\n+\n+  std::shared_ptr<LE1_NISP_Entities::TelemetryConfiguration> ParserXml::parseTelemetryConfig(const std::string &filename){\n+    std::ifstream inputFile(filename);\n+\n+    if(!inputFile.good())\n+      throw FileNotFoundException(\"ParserXml::parseTelemetryConfig: \"\n+                                  \"cannot find file \\\"\" + filename + \"\\\"\");\n+\n+    auto tmConfig = std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>();\n+    using boost::property_tree::ptree;\n+    ptree tree;\n+\n+    read_xml(inputFile, tree);\n+    try{\n+\n+      auto const &spare = tree.get_child(\"telemetry\");\n+      tmConfig->setMemoryBufferMaxSize(spare.get<uint32_t>(\"memBuffSize\"));\n+      tmConfig->setSync(spare.get<uint32_t>(\"sync\"));\n+      tmConfig->setTail1(spare.get<uint32_t>(\"tail1\"));\n+      tmConfig->setTail2(spare.get<uint32_t>(\"tail2\"));\n+      tmConfig->setTail3(spare.get<uint32_t>(\"tail3\"));\n+      tmConfig->setTail4(spare.get<uint32_t>(\"tail4\"));\n+\n+      auto const &det = spare.get_child(\"detectors\");\n+      tmConfig->setNumberOfDetectors(det.get<uint32_t>(\"number\"));\n+      tmConfig->setMaxGroups(det.get<uint32_t>(\"groups\"));\n+      tmConfig->setMaxFrames(det.get<uint32_t>(\"frames\"));\n+      tmConfig->setDetectorPxSizeX(det.get<uint32_t>(\"width\"));\n+      tmConfig->setDetectorPxSizeY(det.get<uint32_t>(\"height\"));\n+      tmConfig->setDetectorPxSize(tmConfig->getDetectorPxSizeX() * tmConfig->getDetectorPxSizeY());\n+\n+      auto const &rawlines = spare.get_child(\"rawlines\");\n+      tmConfig->setNumberOfRawLines(rawlines.get<unsigned int>(\"number\"));\n+      tmConfig->setRawLineSize(rawlines.get<uint32_t>(\"size\"));\n+      tmConfig->setRawLinesDataMaxSize(tmConfig->getNumberOfRawLines() *\n+                                       tmConfig->getRawLineSize() *\n+                                       tmConfig->getMaxGroups() *\n+                                       tmConfig->getMaxFrames());\n+\n+      auto const &digitalTlm = spare.get_child(\"digitalTlm\");\n+      tmConfig->setDigitalTelemetrySize(digitalTlm.get<uint32_t>(\"size\"));\n+\n+      auto const &analogTlm = spare.get_child(\"analogTlm\");\n+      tmConfig->setAnalogTelemetryMaxSize(analogTlm.get<uint32_t>(\"size\"));\n+      tmConfig->setAnalogTelemetryNumberOfValues(analogTlm.get<unsigned int>(\"values\"));\n+\n+      auto const &history = spare.get_child(\"history\");\n+      tmConfig->setHistoryDataMaxSize(history.get<uint32_t>(\"size\"));\n+      tmConfig->setHistoryCompressedDataMaxSize(history.get<uint32_t>(\"comprSize\"));\n+      tmConfig->setHistoryNumberOfValues(history.get<unsigned int>(\"values\"));\n+\n+      auto const &errors = spare.get_child(\"errors\");\n+      tmConfig->setErrorDataMaxSize(errors.get<uint32_t>(\"size\"));\n+      tmConfig->setErrorCompressedDataMaxSize(errors.get<uint32_t>(\"comprSize\"));\n+      tmConfig->setErrorValuesPerGroup(errors.get<unsigned int>(\"values\"));\n+\n+      auto const &science = spare.get_child(\"science\");\n+      tmConfig->setScienceDataMaxSize(science.get<uint32_t>(\"size\"));\n+      tmConfig->setScienceCompressedDataMaxSize(science.get<uint32_t>(\"comprSize\"));\n+      tmConfig->setScienceDataNumberOfValues(science.get<unsigned int>(\"values\"));\n+\n+      auto const &qualityFactorSpectro = spare.get_child(\"qualityFactorSpectro\");\n+      tmConfig->setQualityDataSpectroMaxSize(qualityFactorSpectro.get<uint32_t>(\"size\"));\n+      tmConfig->setQualityCompressedDataMaxSize(qualityFactorSpectro.get<uint32_t>(\"comprSize\"));\n+      tmConfig->setQualityDataSpectroNumberOfValues(qualityFactorSpectro.get<unsigned int>(\"values\"));\n+\n+      auto const &qualityFactorPhoto = spare.get_child(\"qualityFactorPhoto\");\n+      tmConfig->setQualityDataPhotoMaxSize(qualityFactorPhoto.get<uint32_t>(\"size\"));\n+      tmConfig->setQualityDataPhotoNumberOfValues(qualityFactorPhoto.get<unsigned int>(\"values\"));\n+\n+      tmConfig->setQualityDataMaxSize(tmConfig->getQualityDataSpectroMaxSize());\n+\n+      auto const &engineering = spare.get_child(\"engineering\");\n+      tmConfig->setEngineeringDataMaxSize(engineering.get<uint32_t>(\"size\"));\n+      tmConfig->setEngDebugMaxNumberOfValues(engineering.get<unsigned int>(\"values\"));\n+\n+      tmConfig->setEngRawTableSize(tmConfig->getEngineeringDataMaxSize());\n+\n+    }catch(const boost::property_tree::ptree_bad_path& er){\n+      inputFile.close();\n+      throw IncompleteTelemetryConfigException(\"ParserXml::parseTelemetryConfig: \"\n+                                               + std::string(er.what()));\n+    }\n+\n+    inputFile.close();\n+\n+    return tmConfig;\n+  }\n+\n+}  // namespace LE1_NISP_Adapters\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Adapters/tests/integration-tests/resources/DpdMdbDataBase_20230412_101050.xml": [
                        [
                            "",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Adapters/tests/integration-tests/resources/NISPDetectorSlots_2.1.csv": [
                        [
                            "",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Adapters/tests/integration-tests/src/ConfigurationParserMdb_integration_test.cpp": [
                        [
                            "@@ -27,11 +27,12 @@\n \n #include \"ElementsKernel/Temporary.h\"\n \n-#include \"LE1_NISP_ProcessScience//ConfigurationParserMdb.h\"\n-#include \"LE1_NISP_ProcessScience//DetectorConfigMapper.h\"\n-#include \"LE1_NISP_ProcessScience//ExposureConfigurationImpl.h\"\n+#include \"LE1_NISP_Adapters/ConfigurationParserMdb.h\"\n+#include \"LE1_NISP_Entities/DetectorConfigMapper.h\"\n+#include \"LE1_NISP_Entities/ExposureConfigurationImpl.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Adapters;\n+using namespace LE1_NISP_Entities;\n \n std::string readMdbFileTestConfig(const std::string &configFile){\n   boost::property_tree::ptree pt;\n@@ -128,22 +129,22 @@ struct ConfigurationParserMdbFixture {\n     detConfig->setFrameTime(0);\n     detConfig->setLineTime(0);\n \n-    detConfig->addConfiguration(DetectorConfiguration(DetectorId(1, 1, \"11\"), 1, \"0000\"));\n-    detConfig->addConfiguration(DetectorConfiguration(DetectorId(1, 2, \"12\"), 2, \"0000\"));\n-    detConfig->addConfiguration(DetectorConfiguration(DetectorId(1, 3, \"13\"), 3, \"0000\"));\n-    detConfig->addConfiguration(DetectorConfiguration(DetectorId(1, 4, \"14\"), 4, \"0000\"));\n-    detConfig->addConfiguration(DetectorConfiguration(DetectorId(2, 1, \"21\"), 1, \"0000\"));\n-    detConfig->addConfiguration(DetectorConfiguration(DetectorId(2, 2, \"22\"), 2, \"0000\"));\n-    detConfig->addConfiguration(DetectorConfiguration(DetectorId(2, 3, \"23\"), 3, \"0000\"));\n-    detConfig->addConfiguration(DetectorConfiguration(DetectorId(2, 4, \"24\"), 4, \"0000\"));\n-    detConfig->addConfiguration(DetectorConfiguration(DetectorId(3, 1, \"31\"), 1, \"0000\"));\n-    detConfig->addConfiguration(DetectorConfiguration(DetectorId(3, 2, \"32\"), 2, \"0000\"));\n-    detConfig->addConfiguration(DetectorConfiguration(DetectorId(3, 3, \"33\"), 3, \"0000\"));\n-    detConfig->addConfiguration(DetectorConfiguration(DetectorId(3, 4, \"34\"), 4, \"0000\"));\n-    detConfig->addConfiguration(DetectorConfiguration(DetectorId(4, 1, \"41\"), 1, \"0000\"));\n-    detConfig->addConfiguration(DetectorConfiguration(DetectorId(4, 2, \"42\"), 2, \"0000\"));\n-    detConfig->addConfiguration(DetectorConfiguration(DetectorId(4, 3, \"43\"), 3, \"0000\"));\n-    detConfig->addConfiguration(DetectorConfiguration(DetectorId(4, 4, \"44\"), 4, \"0000\"));\n+    detConfig->addConfiguration(LE1_NISP_Entities::DetectorConfiguration(DetectorId(1, 1, \"11\"), 1, \"0000\"));\n+    detConfig->addConfiguration(LE1_NISP_Entities::DetectorConfiguration(DetectorId(1, 2, \"12\"), 2, \"0000\"));\n+    detConfig->addConfiguration(LE1_NISP_Entities::DetectorConfiguration(DetectorId(1, 3, \"13\"), 3, \"0000\"));\n+    detConfig->addConfiguration(LE1_NISP_Entities::DetectorConfiguration(DetectorId(1, 4, \"14\"), 4, \"0000\"));\n+    detConfig->addConfiguration(LE1_NISP_Entities::DetectorConfiguration(DetectorId(2, 1, \"21\"), 1, \"0000\"));\n+    detConfig->addConfiguration(LE1_NISP_Entities::DetectorConfiguration(DetectorId(2, 2, \"22\"), 2, \"0000\"));\n+    detConfig->addConfiguration(LE1_NISP_Entities::DetectorConfiguration(DetectorId(2, 3, \"23\"), 3, \"0000\"));\n+    detConfig->addConfiguration(LE1_NISP_Entities::DetectorConfiguration(DetectorId(2, 4, \"24\"), 4, \"0000\"));\n+    detConfig->addConfiguration(LE1_NISP_Entities::DetectorConfiguration(DetectorId(3, 1, \"31\"), 1, \"0000\"));\n+    detConfig->addConfiguration(LE1_NISP_Entities::DetectorConfiguration(DetectorId(3, 2, \"32\"), 2, \"0000\"));\n+    detConfig->addConfiguration(LE1_NISP_Entities::DetectorConfiguration(DetectorId(3, 3, \"33\"), 3, \"0000\"));\n+    detConfig->addConfiguration(LE1_NISP_Entities::DetectorConfiguration(DetectorId(3, 4, \"34\"), 4, \"0000\"));\n+    detConfig->addConfiguration(LE1_NISP_Entities::DetectorConfiguration(DetectorId(4, 1, \"41\"), 1, \"0000\"));\n+    detConfig->addConfiguration(LE1_NISP_Entities::DetectorConfiguration(DetectorId(4, 2, \"42\"), 2, \"0000\"));\n+    detConfig->addConfiguration(LE1_NISP_Entities::DetectorConfiguration(DetectorId(4, 3, \"43\"), 3, \"0000\"));\n+    detConfig->addConfiguration(LE1_NISP_Entities::DetectorConfiguration(DetectorId(4, 4, \"44\"), 4, \"0000\"));\n   }\n \n   std::string createNispDetectorSlotsParam(const std::string &fileContent) {\n@@ -250,22 +251,22 @@ BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateDetectorConfigurationsWithExpec\n \n   parser.parseDetectorConfig(detConfig, readMdbFileTestConfig(\"mdb_test_config.ini\"));\n \n-  BOOST_REQUIRE_EQUAL(detConfig->getScaId(DetectorConfigKey(1, 1)),  \"18453\");\n-  BOOST_REQUIRE_EQUAL(detConfig->getScaId(DetectorConfigKey(1, 2)),  \"18272\");\n-  BOOST_REQUIRE_EQUAL(detConfig->getScaId(DetectorConfigKey(1, 3)),  \"18632\");\n-  BOOST_REQUIRE_EQUAL(detConfig->getScaId(DetectorConfigKey(1, 4)),  \"18267\");\n-  BOOST_REQUIRE_EQUAL(detConfig->getScaId(DetectorConfigKey(2, 1)),  \"18268\");\n-  BOOST_REQUIRE_EQUAL(detConfig->getScaId(DetectorConfigKey(2, 2)),  \"18285\");\n-  BOOST_REQUIRE_EQUAL(detConfig->getScaId(DetectorConfigKey(2, 3)),  \"18548\");\n-  BOOST_REQUIRE_EQUAL(detConfig->getScaId(DetectorConfigKey(2, 4)),  \"18452\");\n-  BOOST_REQUIRE_EQUAL(detConfig->getScaId(DetectorConfigKey(3, 1)),  \"18280\");\n-  BOOST_REQUIRE_EQUAL(detConfig->getScaId(DetectorConfigKey(3, 2)), \"18284\");\n-  BOOST_REQUIRE_EQUAL(detConfig->getScaId(DetectorConfigKey(3, 3)), \"18278\");\n-  BOOST_REQUIRE_EQUAL(detConfig->getScaId(DetectorConfigKey(3, 4)), \"18269\");\n-  BOOST_REQUIRE_EQUAL(detConfig->getScaId(DetectorConfigKey(4, 1)), \"18458\");\n-  BOOST_REQUIRE_EQUAL(detConfig->getScaId(DetectorConfigKey(4, 2)), \"18249\");\n-  BOOST_REQUIRE_EQUAL(detConfig->getScaId(DetectorConfigKey(4, 3)), \"18221\");\n-  BOOST_REQUIRE_EQUAL(detConfig->getScaId(DetectorConfigKey(4, 4)), \"18628\");\n+  BOOST_REQUIRE_EQUAL(detConfig->getScaId(LE1_NISP_Entities::DetectorConfigKey(1, 1)),  \"18453\");\n+  BOOST_REQUIRE_EQUAL(detConfig->getScaId(LE1_NISP_Entities::DetectorConfigKey(1, 2)),  \"18272\");\n+  BOOST_REQUIRE_EQUAL(detConfig->getScaId(LE1_NISP_Entities::DetectorConfigKey(1, 3)),  \"18632\");\n+  BOOST_REQUIRE_EQUAL(detConfig->getScaId(LE1_NISP_Entities::DetectorConfigKey(1, 4)),  \"18267\");\n+  BOOST_REQUIRE_EQUAL(detConfig->getScaId(LE1_NISP_Entities::DetectorConfigKey(2, 1)),  \"18268\");\n+  BOOST_REQUIRE_EQUAL(detConfig->getScaId(LE1_NISP_Entities::DetectorConfigKey(2, 2)),  \"18285\");\n+  BOOST_REQUIRE_EQUAL(detConfig->getScaId(LE1_NISP_Entities::DetectorConfigKey(2, 3)),  \"18548\");\n+  BOOST_REQUIRE_EQUAL(detConfig->getScaId(LE1_NISP_Entities::DetectorConfigKey(2, 4)),  \"18452\");\n+  BOOST_REQUIRE_EQUAL(detConfig->getScaId(LE1_NISP_Entities::DetectorConfigKey(3, 1)),  \"18280\");\n+  BOOST_REQUIRE_EQUAL(detConfig->getScaId(LE1_NISP_Entities::DetectorConfigKey(3, 2)), \"18284\");\n+  BOOST_REQUIRE_EQUAL(detConfig->getScaId(LE1_NISP_Entities::DetectorConfigKey(3, 3)), \"18278\");\n+  BOOST_REQUIRE_EQUAL(detConfig->getScaId(LE1_NISP_Entities::DetectorConfigKey(3, 4)), \"18269\");\n+  BOOST_REQUIRE_EQUAL(detConfig->getScaId(LE1_NISP_Entities::DetectorConfigKey(4, 1)), \"18458\");\n+  BOOST_REQUIRE_EQUAL(detConfig->getScaId(LE1_NISP_Entities::DetectorConfigKey(4, 2)), \"18249\");\n+  BOOST_REQUIRE_EQUAL(detConfig->getScaId(LE1_NISP_Entities::DetectorConfigKey(4, 3)), \"18221\");\n+  BOOST_REQUIRE_EQUAL(detConfig->getScaId(LE1_NISP_Entities::DetectorConfigKey(4, 4)), \"18628\");\n }\n \n BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateDetectorConfigurationsWithExpectedCd11Values, * boost::unit_test::tolerance(0.00001) ) {\n@@ -273,22 +274,22 @@ BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateDetectorConfigurationsWithExpec\n \n   parser.parseDetectorConfig(detConfig, readMdbFileTestConfig(\"mdb_test_config.ini\"));\n \n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 2)).cd(0, 0), -0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 2)).cd(0, 0), -0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 4)).cd(0, 0), 0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 4)).cd(0, 0), -0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 3)).cd(0, 0), -0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 2)).cd(0, 0), 0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 4)).cd(0, 0), 0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 2)).cd(0, 0), 0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 4)).cd(0, 0), -0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 3)).cd(0, 0), 0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 1)).cd(0, 0), 0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 3)).cd(0, 0), 0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 1)).cd(0, 0), 0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 1)).cd(0, 0), -0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 1)).cd(0, 0), -0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 3)).cd(0, 0), -0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 2)).cd(0, 0), -0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 2)).cd(0, 0), -0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 4)).cd(0, 0), 0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 4)).cd(0, 0), -0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 3)).cd(0, 0), -0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 2)).cd(0, 0), 0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 4)).cd(0, 0), 0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 2)).cd(0, 0), 0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 4)).cd(0, 0), -0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 3)).cd(0, 0), 0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 1)).cd(0, 0), 0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 3)).cd(0, 0), 0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 1)).cd(0, 0), 0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 1)).cd(0, 0), -0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 1)).cd(0, 0), -0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 3)).cd(0, 0), -0.017921);\n }\n \n BOOST_AUTO_TEST_CASE( GivenEmptyNispDetectorSlotsFileShouldNotUpdateAnyConfiguration ) {\n@@ -304,22 +305,22 @@ BOOST_AUTO_TEST_CASE( GivenEmptyNispDetectorSlotsFileShouldNotUpdateAnyConfigura\n   ConfigurationParserMdb parser;\n   parser.parseDetectorConfig(detConfig, mdbFile.path().c_str());\n \n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(1, 1)) == Wcs(), \"WCS params of detConfig 11 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(1, 2)) == Wcs(), \"WCS params of detConfig 12 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(1, 3)) == Wcs(), \"WCS params of detConfig 13 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(1, 4)) == Wcs(), \"WCS params of detConfig 14 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(2, 1)) == Wcs(), \"WCS params of detConfig 21 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(2, 2)) == Wcs(), \"WCS params of detConfig 22 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(2, 3)) == Wcs(), \"WCS params of detConfig 23 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(2, 4)) == Wcs(), \"WCS params of detConfig 24 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(3, 1)) == Wcs(), \"WCS params of detConfig 31 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(3, 2)) == Wcs(), \"WCS params of detConfig 32 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(3, 3)) == Wcs(), \"WCS params of detConfig 33 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(3, 4)) == Wcs(), \"WCS params of detConfig 34 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(4, 2)) == Wcs(), \"WCS params of detConfig 42 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(4, 3)) == Wcs(), \"WCS params of detConfig 43 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(4, 4)) == Wcs(), \"WCS params of detConfig 44 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(4, 1)) == Wcs(), \"WCS params of detConfig 41 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 1)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 11 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 2)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 12 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 3)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 13 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 4)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 14 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 1)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 21 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 2)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 22 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 3)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 23 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 4)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 24 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 1)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 31 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 2)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 32 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 3)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 33 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 4)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 34 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 2)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 42 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 3)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 43 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 4)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 44 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 1)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 41 is different from default ones\");\n }\n \n BOOST_AUTO_TEST_CASE( GivenNispDetectorSlotsFileWithEmptyLinesAndSpacesShouldNotUpdateAnyConfiguration ) {\n@@ -335,22 +336,22 @@ BOOST_AUTO_TEST_CASE( GivenNispDetectorSlotsFileWithEmptyLinesAndSpacesShouldNot\n   ConfigurationParserMdb parser;\n   parser.parseDetectorConfig(detConfig, mdbFile.path().c_str());\n \n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(1, 1)) == Wcs(), \"WCS params of detConfig 11 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(1, 2)) == Wcs(), \"WCS params of detConfig 12 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(1, 3)) == Wcs(), \"WCS params of detConfig 13 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(1, 4)) == Wcs(), \"WCS params of detConfig 14 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(2, 1)) == Wcs(), \"WCS params of detConfig 21 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(2, 2)) == Wcs(), \"WCS params of detConfig 22 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(2, 3)) == Wcs(), \"WCS params of detConfig 23 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(2, 4)) == Wcs(), \"WCS params of detConfig 24 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(3, 1)) == Wcs(), \"WCS params of detConfig 31 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(3, 2)) == Wcs(), \"WCS params of detConfig 32 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(3, 3)) == Wcs(), \"WCS params of detConfig 33 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(3, 4)) == Wcs(), \"WCS params of detConfig 34 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(4, 2)) == Wcs(), \"WCS params of detConfig 42 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(4, 3)) == Wcs(), \"WCS params of detConfig 43 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(4, 4)) == Wcs(), \"WCS params of detConfig 44 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(4, 1)) == Wcs(), \"WCS params of detConfig 41 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 1)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 11 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 2)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 12 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 3)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 13 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 4)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 14 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 1)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 21 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 2)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 22 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 3)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 23 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 4)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 24 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 1)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 31 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 2)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 32 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 3)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 33 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 4)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 34 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 2)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 42 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 3)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 43 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 4)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 44 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 1)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 41 is different from default ones\");\n }\n \n BOOST_AUTO_TEST_CASE( GivenNispDetectorSlotsFileWithTrailingLinesAndSpacesShouldUpdateConfigigurationsProperly ) {\n@@ -370,22 +371,22 @@ BOOST_AUTO_TEST_CASE( GivenNispDetectorSlotsFileWithTrailingLinesAndSpacesShould\n   ConfigurationParserMdb parser;\n   parser.parseDetectorConfig(detConfig, mdbFile.path().c_str());\n \n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(1, 1)) == Wcs(), \"WCS params of detConfig 11 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(1, 2)) == Wcs(), \"WCS params of detConfig 12 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(1, 3)) == Wcs(), \"WCS params of detConfig 13 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(1, 4)) == Wcs(), \"WCS params of detConfig 14 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(2, 1)) == Wcs(), \"WCS params of detConfig 21 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(2, 2)) == Wcs(), \"WCS params of detConfig 22 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(2, 3)) == Wcs(), \"WCS params of detConfig 23 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(2, 4)) == Wcs(), \"WCS params of detConfig 24 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(3, 1)) == Wcs(), \"WCS params of detConfig 31 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(3, 2)) != Wcs(), \"WCS params of detConfig 32 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(3, 3)) == Wcs(), \"WCS params of detConfig 33 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(3, 4)) == Wcs(), \"WCS params of detConfig 34 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(4, 2)) == Wcs(), \"WCS params of detConfig 42 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(4, 3)) == Wcs(), \"WCS params of detConfig 43 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(4, 4)) == Wcs(), \"WCS params of detConfig 44 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(4, 1)) == Wcs(), \"WCS params of detConfig 41 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 1)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 11 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 2)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 12 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 3)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 13 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 4)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 14 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 1)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 21 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 2)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 22 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 3)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 23 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 4)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 24 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 1)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 31 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 2)) != LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 32 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 3)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 33 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 4)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 34 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 2)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 42 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 3)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 43 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 4)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 44 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 1)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 41 is different from default ones\");\n }\n \n BOOST_AUTO_TEST_CASE( GivenNispDetectorSlotsFileWithDowsLineEndigsShouldUpdateConfigigurationsProperly ) {\n@@ -404,22 +405,22 @@ BOOST_AUTO_TEST_CASE( GivenNispDetectorSlotsFileWithDowsLineEndigsShouldUpdateCo\n   ConfigurationParserMdb parser;\n   parser.parseDetectorConfig(detConfig, mdbFile.path().c_str());\n \n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(1, 1)) == Wcs(), \"WCS params of detConfig 11 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(1, 2)) == Wcs(), \"WCS params of detConfig 12 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(1, 3)) == Wcs(), \"WCS params of detConfig 13 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(1, 4)) == Wcs(), \"WCS params of detConfig 14 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(2, 1)) == Wcs(), \"WCS params of detConfig 21 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(2, 2)) == Wcs(), \"WCS params of detConfig 22 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(2, 3)) == Wcs(), \"WCS params of detConfig 23 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(2, 4)) == Wcs(), \"WCS params of detConfig 24 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(3, 1)) == Wcs(), \"WCS params of detConfig 31 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(3, 2)) != Wcs(), \"WCS params of detConfig 32 has not been updated\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(3, 3)) == Wcs(), \"WCS params of detConfig 33 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(3, 4)) == Wcs(), \"WCS params of detConfig 34 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(4, 2)) == Wcs(), \"WCS params of detConfig 42 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(4, 3)) == Wcs(), \"WCS params of detConfig 43 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(4, 4)) == Wcs(), \"WCS params of detConfig 44 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(4, 1)) == Wcs(), \"WCS params of detConfig 41 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 1)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 11 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 2)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 12 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 3)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 13 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 4)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 14 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 1)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 21 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 2)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 22 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 3)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 23 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 4)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 24 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 1)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 31 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 2)) != LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 32 has not been updated\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 3)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 33 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 4)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 34 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 2)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 42 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 3)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 43 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 4)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 44 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 1)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 41 is different from default ones\");\n }\n \n BOOST_AUTO_TEST_CASE( GivenNispDetectorSlotsFileContainingEmptyLinesShouldUpdateConfigigurationsProperly ) {\n@@ -447,22 +448,22 @@ BOOST_AUTO_TEST_CASE( GivenNispDetectorSlotsFileContainingEmptyLinesShouldUpdate\n   ConfigurationParserMdb parser;\n   parser.parseDetectorConfig(detConfig, mdbFile.path().c_str());\n \n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(1, 1)) == Wcs(), \"WCS params of detConfig 11 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(1, 2)) == Wcs(), \"WCS params of detConfig 12 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(1, 3)) == Wcs(), \"WCS params of detConfig 13 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(1, 4)) == Wcs(), \"WCS params of detConfig 14 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(2, 1)) == Wcs(), \"WCS params of detConfig 21 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(2, 2)) == Wcs(), \"WCS params of detConfig 22 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(2, 3)) == Wcs(), \"WCS params of detConfig 23 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(2, 4)) == Wcs(), \"WCS params of detConfig 24 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(3, 1)) == Wcs(), \"WCS params of detConfig 31 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(3, 2)) != Wcs(), \"WCS params of detConfig 32 has not been updated\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(3, 3)) == Wcs(), \"WCS params of detConfig 33 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(3, 4)) == Wcs(), \"WCS params of detConfig 34 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(4, 2)) != Wcs(), \"WCS params of detConfig 32 has not been updated\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(4, 3)) == Wcs(), \"WCS params of detConfig 43 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(4, 4)) == Wcs(), \"WCS params of detConfig 44 is different from default ones\");\n-  BOOST_CHECK_MESSAGE(detConfig->getWcs(DetectorConfigKey(4, 1)) == Wcs(), \"WCS params of detConfig 41 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 1)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 11 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 2)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 12 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 3)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 13 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 4)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 14 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 1)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 21 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 2)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 22 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 3)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 23 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 4)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 24 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 1)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 31 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 2)) != LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 32 has not been updated\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 3)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 33 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 4)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 34 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 2)) != LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 32 has not been updated\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 3)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 43 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 4)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 44 is different from default ones\");\n+  BOOST_CHECK_MESSAGE(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 1)) == LE1_NISP_Entities::Wcs(), \"WCS params of detConfig 41 is different from default ones\");\n }\n \n BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateDetectorConfigurationsWithExpectedCd12Values, * boost::unit_test::tolerance(0.00001) ) {\n@@ -470,22 +471,22 @@ BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateDetectorConfigurationsWithExpec\n \n   parser.parseDetectorConfig(detConfig, readMdbFileTestConfig(\"mdb_test_config.ini\"));\n \n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 2)).cd(0, 1), -2.9e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 2)).cd(0, 1), -3.2e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 4)).cd(0, 1), 6e-06);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 4)).cd(0, 1), -8e-06);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 3)).cd(0, 1), -3.2e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 2)).cd(0, 1), 2.8e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 4)).cd(0, 1), 2.1e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 2)).cd(0, 1), 2.6e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 4)).cd(0, 1), -3.2e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 3)).cd(0, 1), 1.4e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 1)).cd(0, 1), 3.1e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 3)).cd(0, 1), 4e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 1)).cd(0, 1), 3.1e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 1)).cd(0, 1), -1e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 1)).cd(0, 1), -1.9e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 3)).cd(0, 1), -1.1e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 2)).cd(0, 1), -2.9e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 2)).cd(0, 1), -3.2e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 4)).cd(0, 1), 6e-06);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 4)).cd(0, 1), -8e-06);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 3)).cd(0, 1), -3.2e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 2)).cd(0, 1), 2.8e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 4)).cd(0, 1), 2.1e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 2)).cd(0, 1), 2.6e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 4)).cd(0, 1), -3.2e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 3)).cd(0, 1), 1.4e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 1)).cd(0, 1), 3.1e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 3)).cd(0, 1), 4e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 1)).cd(0, 1), 3.1e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 1)).cd(0, 1), -1e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 1)).cd(0, 1), -1.9e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 3)).cd(0, 1), -1.1e-05);\n }\n \n BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateDetectorConfigurationsWithExpectedCd21Values, * boost::unit_test::tolerance(0.00001) ) {\n@@ -493,22 +494,22 @@ BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateDetectorConfigurationsWithExpec\n \n   parser.parseDetectorConfig(detConfig, readMdbFileTestConfig(\"mdb_test_config.ini\"));\n \n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 2)).cd(1, 0), 2.9e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 2)).cd(1, 0), 3.2e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 4)).cd(1, 0), -6e-06);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 4)).cd(1, 0), 8e-06);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 3)).cd(1, 0), 3.2e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 2)).cd(1, 0), -2.8e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 4)).cd(1, 0), -2.1e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 2)).cd(1, 0), -2.6e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 4)).cd(1, 0), 3.2e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 3)).cd(1, 0), -1.4e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 1)).cd(1, 0), -3.1e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 3)).cd(1, 0), -4e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 1)).cd(1, 0), -3.1e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 1)).cd(1, 0), 1e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 1)).cd(1, 0), 1.9e-05);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 3)).cd(1, 0), 1.1e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 2)).cd(1, 0), 2.9e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 2)).cd(1, 0), 3.2e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 4)).cd(1, 0), -6e-06);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 4)).cd(1, 0), 8e-06);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 3)).cd(1, 0), 3.2e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 2)).cd(1, 0), -2.8e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 4)).cd(1, 0), -2.1e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 2)).cd(1, 0), -2.6e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 4)).cd(1, 0), 3.2e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 3)).cd(1, 0), -1.4e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 1)).cd(1, 0), -3.1e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 3)).cd(1, 0), -4e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 1)).cd(1, 0), -3.1e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 1)).cd(1, 0), 1e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 1)).cd(1, 0), 1.9e-05);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 3)).cd(1, 0), 1.1e-05);\n }\n \n BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateDetectorConfigurationsWithExpectedCd22Values, * boost::unit_test::tolerance(0.00001) ) {\n@@ -516,22 +517,22 @@ BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateDetectorConfigurationsWithExpec\n \n   parser.parseDetectorConfig(detConfig, readMdbFileTestConfig(\"mdb_test_config.ini\"));\n \n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 2)).cd(1, 1), -0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 2)).cd(1, 1), -0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 4)).cd(1, 1), 0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 4)).cd(1, 1), -0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 3)).cd(1, 1), -0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 2)).cd(1, 1), 0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 4)).cd(1, 1), 0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 2)).cd(1, 1), 0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 4)).cd(1, 1), -0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 3)).cd(1, 1), 0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 1)).cd(1, 1), 0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 3)).cd(1, 1), 0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 1)).cd(1, 1), 0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 1)).cd(1, 1), -0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 1)).cd(1, 1), -0.017921);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 3)).cd(1, 1), -0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 2)).cd(1, 1), -0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 2)).cd(1, 1), -0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 4)).cd(1, 1), 0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 4)).cd(1, 1), -0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 3)).cd(1, 1), -0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 2)).cd(1, 1), 0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 4)).cd(1, 1), 0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 2)).cd(1, 1), 0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 4)).cd(1, 1), -0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 3)).cd(1, 1), 0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 1)).cd(1, 1), 0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 3)).cd(1, 1), 0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 1)).cd(1, 1), 0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 1)).cd(1, 1), -0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 1)).cd(1, 1), -0.017921);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 3)).cd(1, 1), -0.017921);\n }\n \n BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateDetectorConfigurationsWithExpectedCrPix1, * boost::unit_test::tolerance(0.00001) ) {\n@@ -539,22 +540,22 @@ BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateDetectorConfigurationsWithExpec\n \n   parser.parseDetectorConfig(detConfig, readMdbFileTestConfig(\"mdb_test_config.ini\"));\n \n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 2)).crPix(0), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 2)).crPix(0), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 4)).crPix(0), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 4)).crPix(0), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 3)).crPix(0), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 2)).crPix(0), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 4)).crPix(0), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 2)).crPix(0), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 4)).crPix(0), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 3)).crPix(0), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 1)).crPix(0), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 3)).crPix(0), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 1)).crPix(0), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 1)).crPix(0), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 1)).crPix(0), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 3)).crPix(0), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 2)).crPix(0), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 2)).crPix(0), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 4)).crPix(0), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 4)).crPix(0), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 3)).crPix(0), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 2)).crPix(0), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 4)).crPix(0), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 2)).crPix(0), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 4)).crPix(0), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 3)).crPix(0), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 1)).crPix(0), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 3)).crPix(0), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 1)).crPix(0), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 1)).crPix(0), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 1)).crPix(0), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 3)).crPix(0), 4);\n }\n \n BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateDetectorConfigurationsWithExpectedCrPix2, * boost::unit_test::tolerance(0.00001) ) {\n@@ -562,22 +563,22 @@ BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateDetectorConfigurationsWithExpec\n \n   parser.parseDetectorConfig(detConfig, readMdbFileTestConfig(\"mdb_test_config.ini\"));\n \n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 2)).crPix(1), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 2)).crPix(1), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 4)).crPix(1), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 4)).crPix(1), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 3)).crPix(1), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 2)).crPix(1), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 4)).crPix(1), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 2)).crPix(1), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 4)).crPix(1), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 3)).crPix(1), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 1)).crPix(1), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 3)).crPix(1), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 1)).crPix(1), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 1)).crPix(1), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 1)).crPix(1), 4);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 3)).crPix(1), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 2)).crPix(1), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 2)).crPix(1), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 4)).crPix(1), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 4)).crPix(1), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 3)).crPix(1), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 2)).crPix(1), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 4)).crPix(1), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 2)).crPix(1), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 4)).crPix(1), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 3)).crPix(1), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 1)).crPix(1), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 3)).crPix(1), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 1)).crPix(1), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 1)).crPix(1), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 1)).crPix(1), 4);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 3)).crPix(1), 4);\n }\n \n BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateDetectorConfigurationsWithExpectedCrVal1, * boost::unit_test::tolerance(0.00001) ) {\n@@ -585,22 +586,22 @@ BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateDetectorConfigurationsWithExpec\n \n   parser.parseDetectorConfig(detConfig, readMdbFileTestConfig(\"mdb_test_config.ini\"));\n \n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 2)).crVal(0), -1.507418);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 2)).crVal(0), -1.509616);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 4)).crVal(0), 41.231023);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 4)).crVal(0), 77.925605);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 3)).crVal(0), 38.24906);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 2)).crVal(0), -38.189211);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 4)).crVal(0), 41.256901);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 2)).crVal(0), -38.22488);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 4)).crVal(0), 77.913416);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 3)).crVal(0), 1.520706);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 1)).crVal(0), -77.9317);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 3)).crVal(0), 1.514711);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 1)).crVal(0), -77.938494);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 1)).crVal(0), -41.243113);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 1)).crVal(0), -41.250906);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 3)).crVal(0), 38.160735);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 2)).crVal(0), -1.507418);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 2)).crVal(0), -1.509616);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 4)).crVal(0), 41.231023);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 4)).crVal(0), 77.925605);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 3)).crVal(0), 38.24906);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 2)).crVal(0), -38.189211);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 4)).crVal(0), 41.256901);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 2)).crVal(0), -38.22488);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 4)).crVal(0), 77.913416);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 3)).crVal(0), 1.520706);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 1)).crVal(0), -77.9317);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 3)).crVal(0), 1.514711);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 1)).crVal(0), -77.938494);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 1)).crVal(0), -41.243113);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 1)).crVal(0), -41.250906);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 3)).crVal(0), 38.160735);\n }\n \n BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateDetectorConfigurationsWithExpectedCrVal2, * boost::unit_test::tolerance(0.00001) ) {\n@@ -608,22 +609,22 @@ BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateDetectorConfigurationsWithExpec\n \n   parser.parseDetectorConfig(detConfig, readMdbFileTestConfig(\"mdb_test_config.ini\"));\n \n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 2)).crVal(1), 39.286377);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 2)).crVal(1), 82.217854);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 4)).crVal(1), -82.236338);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 4)).crVal(1), 82.184582);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 3)).crVal(1), 82.205164);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 2)).crVal(1), -82.185681);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 4)).crVal(1), -39.308359);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 2)).crVal(1), -39.27089);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 4)).crVal(1), 39.282381);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 3)).crVal(1), -39.355818);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 1)).crVal(1), -39.232923);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 3)).crVal(1), -82.175889);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 1)).crVal(1), -82.1629);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(4, 1)).crVal(1), 82.216355);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 1)).crVal(1), 39.294171);\n-  BOOST_CHECK_EQUAL(detConfig->getWcs(DetectorConfigKey(3, 3)).crVal(1), 39.263697);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 2)).crVal(1), 39.286377);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 2)).crVal(1), 82.217854);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 4)).crVal(1), -82.236338);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 4)).crVal(1), 82.184582);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 3)).crVal(1), 82.205164);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 2)).crVal(1), -82.185681);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 4)).crVal(1), -39.308359);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 2)).crVal(1), -39.27089);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 4)).crVal(1), 39.282381);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 3)).crVal(1), -39.355818);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 1)).crVal(1), -39.232923);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 3)).crVal(1), -82.175889);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 1)).crVal(1), -82.1629);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(4, 1)).crVal(1), 82.216355);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 1)).crVal(1), 39.294171);\n+  BOOST_CHECK_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(3, 3)).crVal(1), 39.263697);\n }\n \n //-----------------------------------------------------------------------------\n@@ -640,7 +641,7 @@ BOOST_AUTO_TEST_SUITE (DetectorConfigurationParserMdb_integration_test )\n BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateTelemetryConfigWithExpectedDetectorNumber ) {\n   ConfigurationParserMdb parser;\n \n-  auto tmConfig = std::make_shared<TelemetryConfiguration>();\n+  auto tmConfig = std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>();\n   tmConfig->setNumberOfDetectors(8);\n \n   parser.parseTelemetryConfig(tmConfig, readMdbFileTestConfig(\"mdb_test_config.ini\"));\n@@ -651,7 +652,7 @@ BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateTelemetryConfigWithExpectedDete\n BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateTelemetryConfigWithExpectedDetectorWidth ) {\n   ConfigurationParserMdb parser;\n \n-  auto tmConfig = std::make_shared<TelemetryConfiguration>();\n+  auto tmConfig = std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>();\n   tmConfig->setDetectorPxSizeX(1024);\n \n   parser.parseTelemetryConfig(tmConfig, readMdbFileTestConfig(\"mdb_test_config.ini\"));\n@@ -662,7 +663,7 @@ BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateTelemetryConfigWithExpectedDete\n BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateTelemetryConfigWithExpectedDetectorHeight ) {\n   ConfigurationParserMdb parser;\n \n-  auto tmConfig = std::make_shared<TelemetryConfiguration>();\n+  auto tmConfig = std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>();\n   tmConfig->setDetectorPxSizeY(1024);\n \n   parser.parseTelemetryConfig(tmConfig, readMdbFileTestConfig(\"mdb_test_config.ini\"));\n@@ -673,7 +674,7 @@ BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateTelemetryConfigWithExpectedDete\n BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateTelemetryConfigWithExpectedDetectorSize ) {\n   ConfigurationParserMdb parser;\n \n-  auto tmConfig = std::make_shared<TelemetryConfiguration>();\n+  auto tmConfig = std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>();\n   tmConfig->setDetectorPxSize(1024*1024);\n \n   parser.parseTelemetryConfig(tmConfig, readMdbFileTestConfig(\"mdb_test_config.ini\"));\n@@ -694,7 +695,7 @@ BOOST_AUTO_TEST_SUITE (ExposureConfigurationParserMdb_integration_test )\n BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateExposureConfigWithExpectedGwaRefPos ) {\n   ConfigurationParserMdb parser;\n \n-  auto expConfig = std::make_shared<ExposureConfigManager>();\n+  auto expConfig = std::make_shared<LE1_NISP_Entities::ExposureConfigManager>();\n   expConfig->setGwaRefPosition(\"anyRefPos\");\n \n   parser.parseExposureConfiguration(expConfig, readMdbFileTestConfig(\"mdb_test_config.ini\"));\n@@ -705,7 +706,7 @@ BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateExposureConfigWithExpectedGwaRe\n BOOST_AUTO_TEST_CASE( GivenMdbXmlFileShouldUpdateExposureConfigWithExpectedFwaRefPos ) {\n   ConfigurationParserMdb parser;\n \n-  auto expConfig = std::make_shared<ExposureConfigManager>();\n+  auto expConfig = std::make_shared<LE1_NISP_Entities::ExposureConfigManager>();\n   expConfig->setFwaRefPosition(\"anyRefPos\");\n \n   parser.parseExposureConfiguration(expConfig, readMdbFileTestConfig(\"mdb_test_config.ini\"));\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Adapters/tests/src/ConfigurationParserMdb_test.cpp": [
                        [
                            "@@ -23,11 +23,12 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//ConfigurationParserMdb.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorConfigManagerMock.h\"\n-#include \"LE1_NISP_ProcessScience/ExposureConfigManager.h\"\n+#include \"LE1_NISP_Adapters/ConfigurationParserMdb.h\"\n+#include \"tests/include/DetectorConfigManagerMock.h\"\n+#include \"LE1_NISP_Entities/ExposureConfigManager.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Adapters;\n+using namespace LE1_NISP_Entities;\n \n //-----------------------------------------------------------------------------\n \n@@ -45,14 +46,14 @@ BOOST_AUTO_TEST_CASE( GivenEmptyInputFilepathShouldThrowFileNotFoundException )\n   ConfigurationParserMdb parser;\n \n   BOOST_REQUIRE_THROW(parser.parseDetectorConfig(std::make_shared<DetConfigManagerDummy>(), \"\"), \n-                      FileNotFoundException);\n+                      LE1_NISP_Adapters::FileNotFoundException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenANonExistentInputFilepathShouldThrowFileNotFoundException ) {\n   ConfigurationParserMdb parser;\n \n   BOOST_REQUIRE_THROW(parser.parseDetectorConfig(std::make_shared<DetConfigManagerDummy>(), \"/not/existing-file/path.something\"), \n-                      FileNotFoundException);\n+                      LE1_NISP_Adapters::FileNotFoundException);\n }\n \n //-----------------------------------------------------------------------------\n@@ -69,21 +70,21 @@ BOOST_AUTO_TEST_SUITE (TelemetryConfigurationParserMdb_test)\n BOOST_AUTO_TEST_CASE( GivenNullTelemetryConfigurationShouldThrowNullTelemetryConfigurationException ) {\n   ConfigurationParserMdb parser;\n \n-  BOOST_REQUIRE_THROW(parser.parseTelemetryConfig(nullptr, \"\"), NullTelemetryConfigurationException);\n+  BOOST_REQUIRE_THROW(parser.parseTelemetryConfig(nullptr, \"\"), LE1_NISP_Adapters::NullTelemetryConfigurationException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenEmptyInputFilepathShouldThrowFileNotFoundException ) {\n   ConfigurationParserMdb parser;\n \n-  BOOST_REQUIRE_THROW(parser.parseTelemetryConfig(std::make_shared<TelemetryConfiguration>(), \"\"), \n-                      FileNotFoundException);\n+  BOOST_REQUIRE_THROW(parser.parseTelemetryConfig(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>(), \"\"),\n+                      LE1_NISP_Adapters::FileNotFoundException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenANonExistentInputFilepathShouldThrowFileNotFoundException ) {\n   ConfigurationParserMdb parser;\n \n-  BOOST_REQUIRE_THROW(parser.parseTelemetryConfig(std::make_shared<TelemetryConfiguration>(), \"/not/existing-file/path.something\"), \n-                      FileNotFoundException);\n+  BOOST_REQUIRE_THROW(parser.parseTelemetryConfig(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>(), \"/not/existing-file/path.something\"),\n+                      LE1_NISP_Adapters::FileNotFoundException);\n }\n \n //-----------------------------------------------------------------------------\n@@ -106,15 +107,15 @@ BOOST_AUTO_TEST_CASE( GivenNullExposureConfigurationShouldThrowNullExposureConfi\n BOOST_AUTO_TEST_CASE( GivenEmptyInputFilepathShouldThrowFileNotFoundException ) {\n   ConfigurationParserMdb parser;\n \n-  BOOST_REQUIRE_THROW(parser.parseExposureConfiguration(std::make_shared<ExposureConfigManager>(), \"\"), \n-                      FileNotFoundException);\n+  BOOST_REQUIRE_THROW(parser.parseExposureConfiguration(std::make_shared<LE1_NISP_Entities::ExposureConfigManager>(), \"\"),\n+                      LE1_NISP_Adapters::FileNotFoundException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenANonExistentInputFilepathShouldThrowFileNotFoundException ) {\n   ConfigurationParserMdb parser;\n \n-  BOOST_REQUIRE_THROW(parser.parseExposureConfiguration(std::make_shared<ExposureConfigManager>(), \"/not/existing-file/path.something\"), \n-                      FileNotFoundException);\n+  BOOST_REQUIRE_THROW(parser.parseExposureConfiguration(std::make_shared<LE1_NISP_Entities::ExposureConfigManager>(), \"/not/existing-file/path.something\"),\n+                      LE1_NISP_Adapters::FileNotFoundException);\n }\n \n //-----------------------------------------------------------------------------\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Adapters/tests/src/DataModelParamsParserXml_test.cpp": [
                        [
                            "@@ -24,9 +24,9 @@\n #include <boost/test/unit_test.hpp>\n \n #include \"ElementsKernel/Temporary.h\"\n-#include \"LE1_NISP_ProcessScience//ParserXml.h\"\n+#include \"LE1_NISP_Adapters/ParserXml.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Adapters;\n \n namespace{\n \n@@ -57,19 +57,19 @@ BOOST_AUTO_TEST_SUITE (DataModelParamsParserXml_test)\n BOOST_AUTO_TEST_CASE( GivenEmptyFilenameShouldThrowFileNotFoundException ) {\n   ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parseDataModelParams(\"\"), FileNotFoundException);\n+  BOOST_REQUIRE_THROW(parser.parseDataModelParams(\"\"), LE1_NISP_Adapters::FileNotFoundException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenNotExistingFileShouldThrowFileNotFoundException ) {\n     ParserXml parser;\n \n-    BOOST_REQUIRE_THROW(parser.parseDataModelParams(\"./not-existing-file\"), FileNotFoundException);\n+    BOOST_REQUIRE_THROW(parser.parseDataModelParams(\"./not-existing-file\"), LE1_NISP_Adapters::FileNotFoundException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenNotExistingFilepathShouldThrowFileNotFoundException ) {\n     ParserXml parser;\n \n-    BOOST_REQUIRE_THROW(parser.parseDataModelParams(\"/not/existing/filepath/anyfilename\"), FileNotFoundException);\n+    BOOST_REQUIRE_THROW(parser.parseDataModelParams(\"/not/existing/filepath/anyfilename\"), LE1_NISP_Adapters::FileNotFoundException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithNoDataModelConfigurationNodeShouldThrowDataModelParamsParserException ) {\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Adapters/tests/src/DetectorConfigParserXml_test.cpp": [
                        [
                            "@@ -24,17 +24,17 @@\n #include <boost/test/unit_test.hpp>\n \n #include \"ElementsKernel/Temporary.h\"\n-#include \"LE1_NISP_ProcessScience//DetectorConfigParserXml.h\"\n-#include \"LE1_NISP_ProcessScience//DetectorConfigMapper.h\"\n+#include \"LE1_NISP_Adapters/ParserXml.h\"\n \n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorConfigManagerMock.h\"\n+#include \"tests/include/DetectorConfigManagerMock.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Adapters;\n+using namespace LE1_NISP_Entities;\n \n struct DetectorConfigParserXmlFixture{\n \n-  DetectorConfigParserXml parser;\n-  std::shared_ptr<DetectorConfigManager> detConfigManagerDummy;\n+  ParserXml parser;\n+  std::shared_ptr<LE1_NISP_Entities::DetectorConfigManager> detConfigManagerDummy;\n \n   DetectorConfigParserXmlFixture(){\n     detConfigManagerDummy = std::make_shared<DetConfigManagerDummy>();\n@@ -84,26 +84,26 @@ BOOST_FIXTURE_TEST_SUITE (DetectorConfigParserXml_test, DetectorConfigParserXmlF\n \n BOOST_AUTO_TEST_CASE( GivenNullDetectorConfigManagerShouldThrowNullDetectorConfigManagerException ) {\n \n-  BOOST_REQUIRE_THROW(parser.parse(nullptr, \"\"), NullDetectorConfigManagerException);\n+  BOOST_REQUIRE_THROW(parser.parseDetectorConfig(nullptr, \"\"), NullDetectorConfigManagerException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenEmptyFilenameShouldThrowFileNotFoundException ) {\n-  BOOST_REQUIRE_THROW(parser.parse(detConfigManagerDummy, \"\"), FileNotFoundException);\n+  BOOST_REQUIRE_THROW(parser.parseDetectorConfig(detConfigManagerDummy, \"\"), LE1_NISP_Adapters::FileNotFoundException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenNotExistingFileShouldThrowFileNotFoundException ) {\n-  BOOST_REQUIRE_THROW(parser.parse(detConfigManagerDummy, \"./not-existing-file\"), FileNotFoundException);\n+  BOOST_REQUIRE_THROW(parser.parseDetectorConfig(detConfigManagerDummy, \"./not-existing-file\"), LE1_NISP_Adapters::FileNotFoundException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenNotExistingFilepathShouldThrowFileNotFoundException ) {\n-  BOOST_REQUIRE_THROW(parser.parse(detConfigManagerDummy, \"/not/existing/filepath/anyfilename\"), FileNotFoundException);\n+  BOOST_REQUIRE_THROW(parser.parseDetectorConfig(detConfigManagerDummy, \"/not/existing/filepath/anyfilename\"), LE1_NISP_Adapters::FileNotFoundException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithNoCommonConfigElementShouldThrowErrorReadingDetectorConfigException ) {\n   Elements::TempFile tmpFile = createTmpXml(\"<detectors>\"\n                                               + createFakeDetectorElement() +\n                                             \"</detectors>\");\n-  BOOST_REQUIRE_THROW(parser.parse(detConfigManagerDummy, tmpFile.path().c_str()), ErrorReadingDetectorConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseDetectorConfig(detConfigManagerDummy, tmpFile.path().c_str()), ErrorReadingDetectorConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithNoFrameLineSizeElementShouldThrowErrorReadingDetectorConfigException ) {\n@@ -116,7 +116,7 @@ BOOST_AUTO_TEST_CASE( GivenFileWithNoFrameLineSizeElementShouldThrowErrorReading\n                                               + createFakeDetectorElement() +\n                                             \"</detectors>\");\n \n-  BOOST_REQUIRE_THROW(parser.parse(detConfigManagerDummy, tmpFile.path().c_str()), ErrorReadingDetectorConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseDetectorConfig(detConfigManagerDummy, tmpFile.path().c_str()), ErrorReadingDetectorConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithNoFrameTimeElementShouldThrowErrorReadingDetectorConfigException ) {\n@@ -129,7 +129,7 @@ BOOST_AUTO_TEST_CASE( GivenFileWithNoFrameTimeElementShouldThrowErrorReadingDete\n                                               + createFakeDetectorElement() +\n                                             \"</detectors>\");\n \n-  BOOST_REQUIRE_THROW(parser.parse(detConfigManagerDummy, tmpFile.path().c_str()), ErrorReadingDetectorConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseDetectorConfig(detConfigManagerDummy, tmpFile.path().c_str()), ErrorReadingDetectorConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithNoCType1ElementShouldThrowErrorReadingDetectorConfigException ) {\n@@ -143,7 +143,7 @@ BOOST_AUTO_TEST_CASE( GivenFileWithNoCType1ElementShouldThrowErrorReadingDetecto\n                                               + createFakeDetectorElement() +\n                                             \"</detectors>\");\n \n-  BOOST_REQUIRE_THROW(parser.parse(detConfigManagerDummy, tmpFile.path().c_str()), ErrorReadingDetectorConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseDetectorConfig(detConfigManagerDummy, tmpFile.path().c_str()), ErrorReadingDetectorConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithNoCType2ElementShouldThrowErrorReadingDetectorConfigException ) {\n@@ -158,7 +158,7 @@ BOOST_AUTO_TEST_CASE( GivenFileWithNoCType2ElementShouldThrowErrorReadingDetecto\n                                               + createFakeDetectorElement() +\n                                             \"</detectors>\");\n \n-  BOOST_REQUIRE_THROW(parser.parse(detConfigManagerDummy, tmpFile.path().c_str()), ErrorReadingDetectorConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseDetectorConfig(detConfigManagerDummy, tmpFile.path().c_str()), ErrorReadingDetectorConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithNoCUnit1ElementShouldThrowErrorReadingDetectorConfigException ) {\n@@ -174,7 +174,7 @@ BOOST_AUTO_TEST_CASE( GivenFileWithNoCUnit1ElementShouldThrowErrorReadingDetecto\n                                               + createFakeDetectorElement() +\n                                             \"</detectors>\");\n \n-  BOOST_REQUIRE_THROW(parser.parse(detConfigManagerDummy, tmpFile.path().c_str()), ErrorReadingDetectorConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseDetectorConfig(detConfigManagerDummy, tmpFile.path().c_str()), ErrorReadingDetectorConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithNoCUnit2ElementShouldThrowErrorReadingDetectorConfigException ) {\n@@ -191,13 +191,13 @@ BOOST_AUTO_TEST_CASE( GivenFileWithNoCUnit2ElementShouldThrowErrorReadingDetecto\n                                               + createFakeDetectorElement() +\n                                             \"</detectors>\");\n \n-  BOOST_REQUIRE_THROW(parser.parse(detConfigManagerDummy, tmpFile.path().c_str()), ErrorReadingDetectorConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseDetectorConfig(detConfigManagerDummy, tmpFile.path().c_str()), ErrorReadingDetectorConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithNoDetectorsElementShouldThrowIncompleteDetectorConfigException ) {\n   Elements::TempFile tmpFile = createTmpXml(createFakeCommonConfigElement());\n \n-  BOOST_REQUIRE_THROW(parser.parse(detConfigManagerDummy, tmpFile.path().c_str()), IncompleteDetectorConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseDetectorConfig(detConfigManagerDummy, tmpFile.path().c_str()), IncompleteDetectorConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithNoDetectorElementShouldZeroDetectorConfigFoundException ) {\n@@ -205,7 +205,7 @@ BOOST_AUTO_TEST_CASE( GivenFileWithNoDetectorElementShouldZeroDetectorConfigFoun\n                                             \"<detectors>\"\n                                             \"</detectors>\");\n \n-  BOOST_REQUIRE_THROW(parser.parse(detConfigManagerDummy, tmpFile.path().c_str()), ZeroDetectorConfigFoundException);\n+  BOOST_REQUIRE_THROW(parser.parseDetectorConfig(detConfigManagerDummy, tmpFile.path().c_str()), ZeroDetectorConfigFoundException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithNoScePosElementShouldThrowErrorReadingDetectorConfigException ) {\n@@ -218,7 +218,7 @@ BOOST_AUTO_TEST_CASE( GivenFileWithNoScePosElementShouldThrowErrorReadingDetecto\n                                               \"</detector>\"\n                                             \"</detectors>\");\n \n-  BOOST_REQUIRE_THROW(parser.parse(detConfigManagerDummy, tmpFile.path().c_str()), ErrorReadingDetectorConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseDetectorConfig(detConfigManagerDummy, tmpFile.path().c_str()), ErrorReadingDetectorConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithNoDpuIdElementShouldThrowErrorReadingDetectorConfigException ) {\n@@ -231,7 +231,7 @@ BOOST_AUTO_TEST_CASE( GivenFileWithNoDpuIdElementShouldThrowErrorReadingDetector\n                                               \"</detector>\"\n                                             \"</description>\");\n \n-  BOOST_REQUIRE_THROW(parser.parse(detConfigManagerDummy, tmpFile.path().c_str()), ErrorReadingDetectorConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseDetectorConfig(detConfigManagerDummy, tmpFile.path().c_str()), ErrorReadingDetectorConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithNoSceIdElementShouldThrowErrorReadingDetectorConfigException ) {\n@@ -244,7 +244,7 @@ BOOST_AUTO_TEST_CASE( GivenFileWithNoSceIdElementShouldThrowErrorReadingDetector\n                                               \"</detector>\"\n                                             \"</description>\");\n \n-  BOOST_REQUIRE_THROW(parser.parse(detConfigManagerDummy, tmpFile.path().c_str()), ErrorReadingDetectorConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseDetectorConfig(detConfigManagerDummy, tmpFile.path().c_str()), ErrorReadingDetectorConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithNoScaIdElementShouldThrowErrorReadingDetectorConfigException ) {\n@@ -258,7 +258,7 @@ BOOST_AUTO_TEST_CASE( GivenFileWithNoScaIdElementShouldThrowErrorReadingDetector\n                                               \"</detector>\"\n                                             \"</description>\");\n \n-  BOOST_REQUIRE_THROW(parser.parse(detConfigManagerDummy, tmpFile.path().c_str()), ErrorReadingDetectorConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseDetectorConfig(detConfigManagerDummy, tmpFile.path().c_str()), ErrorReadingDetectorConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithNoSceIndexElementShouldThrowErrorReadingDetectorConfigException ) {\n@@ -272,7 +272,7 @@ BOOST_AUTO_TEST_CASE( GivenFileWithNoSceIndexElementShouldThrowErrorReadingDetec\n                                               \"</detector>\"\n                                             \"</description>\");\n \n-  BOOST_REQUIRE_THROW(parser.parse(detConfigManagerDummy, tmpFile.path().c_str()), ErrorReadingDetectorConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseDetectorConfig(detConfigManagerDummy, tmpFile.path().c_str()), ErrorReadingDetectorConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithCommonConfigShouldReturnTheExpectedFrameLineSize ) {\n@@ -284,7 +284,7 @@ BOOST_AUTO_TEST_CASE( GivenFileWithCommonConfigShouldReturnTheExpectedFrameLineS\n                                             + createFakeDetectorElement() +\n                                             \"</detectors>\");\n \n-  parser.parse(detConfig, tmpFile.path().c_str());\n+    parser.parseDetectorConfig(detConfig, tmpFile.path().c_str());\n   BOOST_REQUIRE_EQUAL(detConfig->getFrameLineSize(), expectedFrameLineSize);\n }\n \n@@ -298,7 +298,7 @@ BOOST_AUTO_TEST_CASE( GivenFileWithCommonConfigShouldReturnTheExpectedFrameTime,\n                                             + createFakeDetectorElement() +\n                                             \"</detectors>\");\n \n-  parser.parse(detConfig, tmpFile.path().c_str());\n+    parser.parseDetectorConfig(detConfig, tmpFile.path().c_str());\n   BOOST_REQUIRE_EQUAL(detConfig->getFrameTime(), expectedFrameTime);\n }\n \n@@ -312,7 +312,7 @@ BOOST_AUTO_TEST_CASE( GivenFileWithCommonConfigShouldReturnTheExpectedObtToleran\n                                             + createFakeDetectorElement() +\n                                             \"</detectors>\");\n \n-  parser.parse(detConfig, tmpFile.path().c_str());\n+    parser.parseDetectorConfig(detConfig, tmpFile.path().c_str());\n   BOOST_REQUIRE_EQUAL(detConfig->getDetectorObtTolerance(), expectedObtTolerance);\n }\n \n@@ -329,11 +329,11 @@ BOOST_AUTO_TEST_CASE( GivenFileWithCommonConfigShouldReturnTheExpectedCType1AndC\n                                             createFakeDetectorElement(\"2\", 2, 2) +\n                                             \"</detectors>\");\n \n-  parser.parse(detConfig, tmpFile.path().c_str());\n-  BOOST_REQUIRE_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 1)).cType1, expectedCtype1);\n-  BOOST_REQUIRE_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 1)).cType2, expectedCtype2);\n-  BOOST_REQUIRE_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 2)).cType1, expectedCtype1);\n-  BOOST_REQUIRE_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 2)).cType2, expectedCtype2);\n+    parser.parseDetectorConfig(detConfig, tmpFile.path().c_str());\n+  BOOST_REQUIRE_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 1)).cType1, expectedCtype1);\n+  BOOST_REQUIRE_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 1)).cType2, expectedCtype2);\n+  BOOST_REQUIRE_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 2)).cType1, expectedCtype1);\n+  BOOST_REQUIRE_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 2)).cType2, expectedCtype2);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithCommonConfigShouldReturnTheExpectedCUnit1AndCUnit2ForEachDetector ) {\n@@ -349,11 +349,11 @@ BOOST_AUTO_TEST_CASE( GivenFileWithCommonConfigShouldReturnTheExpectedCUnit1AndC\n                                             createFakeDetectorElement(\"2\", 2, 2) +\n                                             \"</detectors>\");\n \n-  parser.parse(detConfig, tmpFile.path().c_str());\n-  BOOST_REQUIRE_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 1)).cUnit1, expectedCUnit1);\n-  BOOST_REQUIRE_EQUAL(detConfig->getWcs(DetectorConfigKey(1, 1)).cUnit2, expectedCUnit2);\n-  BOOST_REQUIRE_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 2)).cUnit1, expectedCUnit1);\n-  BOOST_REQUIRE_EQUAL(detConfig->getWcs(DetectorConfigKey(2, 2)).cUnit2, expectedCUnit2);\n+    parser.parseDetectorConfig(detConfig, tmpFile.path().c_str());\n+  BOOST_REQUIRE_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 1)).cUnit1, expectedCUnit1);\n+  BOOST_REQUIRE_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(1, 1)).cUnit2, expectedCUnit2);\n+  BOOST_REQUIRE_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 2)).cUnit1, expectedCUnit1);\n+  BOOST_REQUIRE_EQUAL(detConfig->getWcs(LE1_NISP_Entities::DetectorConfigKey(2, 2)).cUnit2, expectedCUnit2);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithOneDetectorShouldReturnTheExpectedDetectorIdGivenDpuIdAndSceId ) {\n@@ -367,8 +367,8 @@ BOOST_AUTO_TEST_CASE( GivenFileWithOneDetectorShouldReturnTheExpectedDetectorIdG\n                                             + createFakeDetectorElement(expectedId, dpuId, sceId) +\n                                             \"</detectors>\");\n \n-  parser.parse(detConfig, tmpFile.path().c_str());\n-  BOOST_REQUIRE_EQUAL(detConfig->getDetectorId(DetectorConfigKey(dpuId, sceId)), expectedId);\n+    parser.parseDetectorConfig(detConfig, tmpFile.path().c_str());\n+  BOOST_REQUIRE_EQUAL(detConfig->getDetectorId(LE1_NISP_Entities::DetectorConfigKey(dpuId, sceId)), expectedId);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithOneDetectorShouldReturnTheExpectedScaIdGivenDpuIdAndSceId ) {\n@@ -382,8 +382,8 @@ BOOST_AUTO_TEST_CASE( GivenFileWithOneDetectorShouldReturnTheExpectedScaIdGivenD\n                                             + createFakeDetectorElement(\"detId\", dpuId, sceId, expectedScaId) +\n                                             \"</detectors>\");\n \n-  parser.parse(detConfig, tmpFile.path().c_str());\n-  BOOST_REQUIRE_EQUAL(detConfig->getScaId(DetectorConfigKey(dpuId, sceId)), expectedScaId);\n+    parser.parseDetectorConfig(detConfig, tmpFile.path().c_str());\n+  BOOST_REQUIRE_EQUAL(detConfig->getScaId(LE1_NISP_Entities::DetectorConfigKey(dpuId, sceId)), expectedScaId);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithOneDetectorShouldReturnTheExpectedSceIndexGivenDpuIdAndSceId ) {\n@@ -398,8 +398,8 @@ BOOST_AUTO_TEST_CASE( GivenFileWithOneDetectorShouldReturnTheExpectedSceIndexGiv\n                                             + createFakeDetectorElement(\"detId\", dpuId, sceId, \"123\", expectedSceIndex) +\n                                             \"</detectors>\");\n \n-  parser.parse(detConfig, tmpFile.path().c_str());\n-  BOOST_REQUIRE_EQUAL(detConfig->getSceIndex(DetectorConfigKey(dpuId, sceId)), expectedSceIndex);\n+    parser.parseDetectorConfig(detConfig, tmpFile.path().c_str());\n+  BOOST_REQUIRE_EQUAL(detConfig->getSceIndex(LE1_NISP_Entities::DetectorConfigKey(dpuId, sceId)), expectedSceIndex);\n }\n \n BOOST_AUTO_TEST_SUITE_END ()\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Adapters/tests/src/ExposureConfigParserXml_test.cpp": [
                        [
                            "@@ -25,9 +25,10 @@\n \n #include \"ElementsKernel/Temporary.h\"\n \n-#include \"LE1_NISP_ProcessScience//ExposureConfigParserXml.h\"\n+#include \"LE1_NISP_Adapters/ParserXml.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Adapters;\n+using namespace LE1_NISP_Entities;\n \n namespace{\n   Elements::TempFile createTmpXml(const std::string &content = \"\"){  \n@@ -102,28 +103,28 @@ namespace{\n BOOST_AUTO_TEST_SUITE (ExposureConfigParserXml_test)\n \n BOOST_AUTO_TEST_CASE( GivenEmptyFilenameShouldThrowFileNotFoundException ) {\n-  ExposureConfigParserXml parser;\n+  ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parse(\"\"), FileNotFoundException);\n+  BOOST_REQUIRE_THROW(parser.parseExposureConfig(\"\"), LE1_NISP_Adapters::FileNotFoundException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenNotExistingFileShouldThrowFileNotFoundException ) {\n-  ExposureConfigParserXml parser;\n+  ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parse(\"./not-existing-file\"), FileNotFoundException);\n+  BOOST_REQUIRE_THROW(parser.parseExposureConfig(\"./not-existing-file\"), LE1_NISP_Adapters::FileNotFoundException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenNotExistingFilepathShouldThrowFileNotFoundException ) {\n-  ExposureConfigParserXml parser;\n+  ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parse(\"/not/existing/filepath/anyfilename\"), FileNotFoundException);\n+  BOOST_REQUIRE_THROW(parser.parseExposureConfig(\"/not/existing/filepath/anyfilename\"), LE1_NISP_Adapters::FileNotFoundException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithNoExposureConfigElementShouldThrowIncompleteExposureConfigException ) {\n   Elements::TempFile tmpFile;\n-  ExposureConfigParserXml parser;\n+  ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parse(tmpFile.path().c_str()), IncompleteExposureConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseExposureConfig(tmpFile.path().c_str()), IncompleteExposureConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithoutKeywordConfigurationsElementShouldThrowIncompleteExposureConfigException ) {\n@@ -138,9 +139,9 @@ BOOST_AUTO_TEST_CASE( GivenFileWithoutKeywordConfigurationsElementShouldThrowInc\n     + fwaRefPosition()\n     + \"</exposureConfig>\");\n \n-  ExposureConfigParserXml parser;\n+  ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parse(tmpFile.path().c_str()), IncompleteExposureConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseExposureConfig(tmpFile.path().c_str()), IncompleteExposureConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithoutInstrumentConfigurationsElementShouldThrowIncompleteExposureConfigException ) {\n@@ -155,9 +156,9 @@ BOOST_AUTO_TEST_CASE( GivenFileWithoutInstrumentConfigurationsElementShouldThrow\n     + fwaRefPosition()\n     + \"</exposureConfig>\");\n \n-  ExposureConfigParserXml parser;\n+  ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parse(tmpFile.path().c_str()), IncompleteExposureConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseExposureConfig(tmpFile.path().c_str()), IncompleteExposureConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithoutFwaReferencePositionElementShouldThrowIncompleteExposureConfigException ) {\n@@ -172,9 +173,9 @@ BOOST_AUTO_TEST_CASE( GivenFileWithoutFwaReferencePositionElementShouldThrowInco\n     + gwaRefPosition()\n     + \"</exposureConfig>\");\n \n-  ExposureConfigParserXml parser;\n+  ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parse(tmpFile.path().c_str()), IncompleteExposureConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseExposureConfig(tmpFile.path().c_str()), IncompleteExposureConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithoutGwaReferencePositionElementShouldThrowIncompleteExposureConfigException ) {\n@@ -189,9 +190,9 @@ BOOST_AUTO_TEST_CASE( GivenFileWithoutGwaReferencePositionElementShouldThrowInco\n     + fwaRefPosition()\n     + \"</exposureConfig>\");\n \n-  ExposureConfigParserXml parser;\n+  ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parse(tmpFile.path().c_str()), IncompleteExposureConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseExposureConfig(tmpFile.path().c_str()), IncompleteExposureConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithAllExposureElementsShouldReturnExpectedExposureConfigManager ) {\n@@ -209,7 +210,7 @@ BOOST_AUTO_TEST_CASE( GivenFileWithAllExposureElementsShouldReturnExpectedExposu\n \n   Elements::TempFile tmpFile = createTmpXml(content);\n \n-  ExposureConfigParserXml parser;\n+  ParserXml parser;\n \n   ExposureConfigManager expectedExpConfigManager;\n   expectedExpConfigManager.setKeysConfigCaptions({\"key0\", \"key1\", \"key2\"});\n@@ -225,7 +226,7 @@ BOOST_AUTO_TEST_CASE( GivenFileWithAllExposureElementsShouldReturnExpectedExposu\n   expectedExpConfigManager.setFwaRefPosition(\"fwaRefPos\");\n   expectedExpConfigManager.setGwaTilts({0, -1, 5});\n \n-  BOOST_REQUIRE_EQUAL(*parser.parse(tmpFile.path().c_str()), expectedExpConfigManager);\n+  BOOST_REQUIRE_EQUAL(*parser.parseExposureConfig(tmpFile.path().c_str()), expectedExpConfigManager);\n }\n \n BOOST_AUTO_TEST_SUITE_END ()\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Adapters/tests/src/ParamDescriptionParserXml_test.cpp": [
                        [
                            "@@ -24,9 +24,9 @@\n #include <boost/test/unit_test.hpp>\n \n #include \"ElementsKernel/Temporary.h\"\n-#include \"LE1_NISP_ProcessScience//ParserXml.h\"\n+#include \"LE1_NISP_Adapters/ParserXml.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Adapters;\n \n namespace{\n   Elements::TempFile createParamDescriptionsXml(const std::string &content = \"\"){  \n@@ -86,19 +86,19 @@ BOOST_AUTO_TEST_SUITE (ParamDescriptionParserXml_test)\n BOOST_AUTO_TEST_CASE( GivenEmptyFilenameShouldThrowFileNotFoundException ) {\n   ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parseParamDescriptions(\"\"), FileNotFoundException);\n+  BOOST_REQUIRE_THROW(parser.parseParamDescriptions(\"\"), LE1_NISP_Adapters::FileNotFoundException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenNotExistingFileShouldThrowFileNotFoundException ) {\n   ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parseParamDescriptions(\"./not-existing-file\"), FileNotFoundException);\n+  BOOST_REQUIRE_THROW(parser.parseParamDescriptions(\"./not-existing-file\"), LE1_NISP_Adapters::FileNotFoundException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenNotExistingFilepathShouldThrowFileNotFoundException ) {\n   ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parseParamDescriptions(\"/not/existing/filepath/anyfilename\"), FileNotFoundException);\n+  BOOST_REQUIRE_THROW(parser.parseParamDescriptions(\"/not/existing/filepath/anyfilename\"), LE1_NISP_Adapters::FileNotFoundException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithNoParamDescriptionInfoShouldThrowParamDescriptionNodeException ) {\n@@ -244,8 +244,8 @@ BOOST_AUTO_TEST_CASE( GivenFileWithTwoParameterDescritionsShouldReturnVectorOfTw\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithMultipleParameterDescriptionsShouldReturnVectorOfDescriptionsWithExpectedContent ) {\n-  auto expectedParamDesc1 = std::make_shared<ParameterDescription>(\"p1\", 1, 2, 3, false, \"u1\", \"c1\");\n-  auto expectedParamDesc2 = std::make_shared<ParameterDescription>(\"p2\", 4, 5, 6, true, \"u2\", \"c2\");\n+  auto expectedParamDesc1 = std::make_shared<LE1_NISP_Entities::ParameterDescription>(\"p1\", 1, 2, 3, false, \"u1\", \"c1\");\n+  auto expectedParamDesc2 = std::make_shared<LE1_NISP_Entities::ParameterDescription>(\"p2\", 4, 5, 6, true, \"u2\", \"c2\");\n \n   Elements::TempFile tmpFile = createParamDescriptionsXml(createFakeParamInfoXml(\"p1\", 1, 2, 3, \"u1\", \"c1\", false, \"\") +\n                                                          createFakeParamInfoXml(\"p2\", 4, 5, 6, \"u2\", \"c2\", true, \"\"));\n@@ -327,18 +327,18 @@ BOOST_AUTO_TEST_CASE( GivenFileWithAnyFixedParamShouldReturnTheExpectedNumberOfP\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithAnyFixedParamShouldReturnParamsWithExpectedValues ) {\n-  auto paramDescUint = std::make_shared<ParameterDescription>(\"pUint\", 0, 0, 0, false, \"u1\", \"c1\", \"uint\");\n-  auto paramDescStr = std::make_shared<ParameterDescription>(\"pStr\", 0, 0, 0, false, \"u2\", \"c2\", \"string\");\n-  auto paramDescDouble = std::make_shared<ParameterDescription>(\"pDouble\", 0, 0, 0, false, \"u3\", \"c3\", \"double\");\n+  auto paramDescUint = std::make_shared<LE1_NISP_Entities::ParameterDescription>(\"pUint\", 0, 0, 0, false, \"u1\", \"c1\", \"uint\");\n+  auto paramDescStr = std::make_shared<LE1_NISP_Entities::ParameterDescription>(\"pStr\", 0, 0, 0, false, \"u2\", \"c2\", \"string\");\n+  auto paramDescDouble = std::make_shared<LE1_NISP_Entities::ParameterDescription>(\"pDouble\", 0, 0, 0, false, \"u3\", \"c3\", \"double\");\n \n   Elements::TempFile tmpFile = createFixedParamsXml(\n       createFakeFixedParam(paramDescUint->getName(), \"111\", paramDescUint->getType(), paramDescUint->getUnit(), paramDescUint->getComment()) +\n       createFakeFixedParam(paramDescStr->getName(), \"valueStr\", paramDescStr->getType(), paramDescStr->getUnit(), paramDescStr->getComment()) +\n       createFakeFixedParam(paramDescDouble->getName(), \"123.456\", paramDescDouble->getType(), paramDescDouble->getUnit(), paramDescDouble->getComment()));\n \n-  auto pUint = std::make_shared<Parameter>(paramDescUint, (uint)111);\n-  auto pStr = std::make_shared<Parameter>(paramDescStr, std::string(\"value\"));\n-  auto pDouble = std::make_shared<Parameter>(paramDescDouble, (double)123.456);\n+  auto pUint = std::make_shared<LE1_NISP_Entities::Parameter>(paramDescUint, (uint)111);\n+  auto pStr = std::make_shared<LE1_NISP_Entities::Parameter>(paramDescStr, std::string(\"value\"));\n+  auto pDouble = std::make_shared<LE1_NISP_Entities::Parameter>(paramDescDouble, (double)123.456);\n \n   ParserXml parser;\n   auto params = parser.parseFixedParams(tmpFile.path().c_str());\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Adapters/tests/src/TelemetryConfigParserXml_test.cpp": [
                        [
                            "@@ -24,9 +24,9 @@\n #include <boost/test/unit_test.hpp>\n \n #include \"ElementsKernel/Temporary.h\"\n-#include \"LE1_NISP_ProcessScience//TelemetryConfigParserXml.h\"\n+#include \"LE1_NISP_Adapters/ParserXml.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Adapters;\n \n namespace{\n   Elements::TempFile createTmpXml(const std::string &content = \"\"){  \n@@ -119,28 +119,28 @@ namespace{\n BOOST_AUTO_TEST_SUITE (TelemetryConfigParserXml_test)\n \n BOOST_AUTO_TEST_CASE( GivenEmptyFilenameShouldThrowFileNotFoundException ) {\n-  TelemetryConfigParserXml parser;\n+  ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parse(\"\"), FileNotFoundException);\n+  BOOST_REQUIRE_THROW(parser.parseTelemetryConfig(\"\"), LE1_NISP_Adapters::FileNotFoundException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenNotExistingFileShouldThrowFileNotFoundException ) {\n-  TelemetryConfigParserXml parser;\n+  ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parse(\"./not-existing-file\"), FileNotFoundException);\n+  BOOST_REQUIRE_THROW(parser.parseTelemetryConfig(\"./not-existing-file\"), LE1_NISP_Adapters::FileNotFoundException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenNotExistingFilepathShouldThrowFileNotFoundException ) {\n-  TelemetryConfigParserXml parser;\n+  ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parse(\"/not/existing/filepath/anyfilename\"), FileNotFoundException);\n+  BOOST_REQUIRE_THROW(parser.parseTelemetryConfig(\"/not/existing/filepath/anyfilename\"), LE1_NISP_Adapters::FileNotFoundException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithNoTelemetryInfoShouldThrowIncompleteTelemetryConfigException ) {\n   Elements::TempFile tmpFile;\n-  TelemetryConfigParserXml parser;\n+  ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parse(tmpFile.path().c_str()), IncompleteTelemetryConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseTelemetryConfig(tmpFile.path().c_str()), IncompleteTelemetryConfigException);\n }\n BOOST_AUTO_TEST_CASE( GivenFileWithoutSpareValuesConfigShouldThrowIncompleteTelemetryConfigException ) {\n     Elements::TempFile tmpFile = createTmpXml(\n@@ -157,9 +157,9 @@ BOOST_AUTO_TEST_CASE( GivenFileWithoutSpareValuesConfigShouldThrowIncompleteTele\n     + engineering()\n     + \"</telemetry>\");\n \n-  TelemetryConfigParserXml parser;\n+  ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parse(tmpFile.path().c_str()), IncompleteTelemetryConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseTelemetryConfig(tmpFile.path().c_str()), IncompleteTelemetryConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWitoutDetectorsConfigShouldThrowIncompleteTelemetryConfigException ) {\n@@ -176,9 +176,9 @@ BOOST_AUTO_TEST_CASE( GivenFileWitoutDetectorsConfigShouldThrowIncompleteTelemet\n     + qualityFactorPhoto()\n     + engineering()\n     + \"</telemetry>\");\n-  TelemetryConfigParserXml parser;\n+  ParserXml parser;\n   \n-  BOOST_REQUIRE_THROW(parser.parse(tmpFile.path().c_str()), IncompleteTelemetryConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseTelemetryConfig(tmpFile.path().c_str()), IncompleteTelemetryConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWitoutRawlinesConfigShouldThrowIncompleteTelemetryConfigException ) {\n@@ -195,9 +195,9 @@ BOOST_AUTO_TEST_CASE( GivenFileWitoutRawlinesConfigShouldThrowIncompleteTelemetr\n     + qualityFactorPhoto()\n     + engineering()\n     + \"</telemetry>\");\n-  TelemetryConfigParserXml parser;\n+  ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parse(tmpFile.path().c_str()), IncompleteTelemetryConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseTelemetryConfig(tmpFile.path().c_str()), IncompleteTelemetryConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWitoutDigitalTlmConfigShouldThrowIncompleteTelemetryConfigException ) {\n@@ -214,9 +214,9 @@ BOOST_AUTO_TEST_CASE( GivenFileWitoutDigitalTlmConfigShouldThrowIncompleteTeleme\n     + qualityFactorPhoto()\n     + engineering()\n     + \"</telemetry>\");\n-  TelemetryConfigParserXml parser;\n+  ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parse(tmpFile.path().c_str()), IncompleteTelemetryConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseTelemetryConfig(tmpFile.path().c_str()), IncompleteTelemetryConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWitoutAnalogTlmConfigShouldThrowIncompleteTelemetryConfigException ) {\n@@ -233,9 +233,9 @@ BOOST_AUTO_TEST_CASE( GivenFileWitoutAnalogTlmConfigShouldThrowIncompleteTelemet\n     + qualityFactorPhoto()\n     + engineering()\n     + \"</telemetry>\");\n-  TelemetryConfigParserXml parser;\n+  ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parse(tmpFile.path().c_str()), IncompleteTelemetryConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseTelemetryConfig(tmpFile.path().c_str()), IncompleteTelemetryConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWitoutHistoryConfigShouldThrowIncompleteTelemetryConfigException ) {\n@@ -252,9 +252,9 @@ BOOST_AUTO_TEST_CASE( GivenFileWitoutHistoryConfigShouldThrowIncompleteTelemetry\n     + qualityFactorPhoto()\n     + engineering()\n     + \"</telemetry>\");\n-  TelemetryConfigParserXml parser;\n+  ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parse(tmpFile.path().c_str()), IncompleteTelemetryConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseTelemetryConfig(tmpFile.path().c_str()), IncompleteTelemetryConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWitoutErrorsConfigShouldThrowIncompleteTelemetryConfigException ) {\n@@ -271,9 +271,9 @@ BOOST_AUTO_TEST_CASE( GivenFileWitoutErrorsConfigShouldThrowIncompleteTelemetryC\n     + qualityFactorPhoto()\n     + engineering()\n     + \"</telemetry>\");\n-  TelemetryConfigParserXml parser;\n+  ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parse(tmpFile.path().c_str()), IncompleteTelemetryConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseTelemetryConfig(tmpFile.path().c_str()), IncompleteTelemetryConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWitoutScienceConfigShouldThrowIncompleteTelemetryConfigException ) {\n@@ -290,9 +290,9 @@ BOOST_AUTO_TEST_CASE( GivenFileWitoutScienceConfigShouldThrowIncompleteTelemetry\n     + qualityFactorPhoto()\n     + engineering()\n     + \"</telemetry>\");\n-  TelemetryConfigParserXml parser;\n+  ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parse(tmpFile.path().c_str()), IncompleteTelemetryConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseTelemetryConfig(tmpFile.path().c_str()), IncompleteTelemetryConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWitoutQualityFactorSpectroConfigShouldThrowIncompleteTelemetryConfigException ) {\n@@ -309,9 +309,9 @@ BOOST_AUTO_TEST_CASE( GivenFileWitoutQualityFactorSpectroConfigShouldThrowIncomp\n     + qualityFactorPhoto()\n     + engineering()\n     + \"</telemetry>\");\n-  TelemetryConfigParserXml parser;\n+  ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parse(tmpFile.path().c_str()), IncompleteTelemetryConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseTelemetryConfig(tmpFile.path().c_str()), IncompleteTelemetryConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWitoutQualityFactorPhotoConfigShouldThrowIncompleteTelemetryConfigException ) {\n@@ -328,9 +328,9 @@ BOOST_AUTO_TEST_CASE( GivenFileWitoutQualityFactorPhotoConfigShouldThrowIncomple\n     + qualityFactorSpectro()\n     + engineering()\n     + \"</telemetry>\");\n-  TelemetryConfigParserXml parser;\n+  ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parse(tmpFile.path().c_str()), IncompleteTelemetryConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseTelemetryConfig(tmpFile.path().c_str()), IncompleteTelemetryConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWitoutEngineeringConfigShouldThrowIncompleteTelemetryConfigException ) {\n@@ -347,13 +347,13 @@ BOOST_AUTO_TEST_CASE( GivenFileWitoutEngineeringConfigShouldThrowIncompleteTelem\n     + qualityFactorSpectro()\n     + qualityFactorPhoto()\n     + \"</telemetry>\");\n-  TelemetryConfigParserXml parser;\n+  ParserXml parser;\n \n-  BOOST_REQUIRE_THROW(parser.parse(tmpFile.path().c_str()), IncompleteTelemetryConfigException);\n+  BOOST_REQUIRE_THROW(parser.parseTelemetryConfig(tmpFile.path().c_str()), IncompleteTelemetryConfigException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFileWithTelemetryConfigShouldReturnExpectedTelemetryConfigValues ) {\n-  TelemetryConfiguration expectedTelemetryConfig;\n+  LE1_NISP_Entities::TelemetryConfiguration expectedTelemetryConfig;\n   \n   Elements::TempFile tmpFile = createTmpXml(\n     \"<telemetry>\"\n@@ -370,9 +370,9 @@ BOOST_AUTO_TEST_CASE( GivenFileWithTelemetryConfigShouldReturnExpectedTelemetryC\n     + engineering()\n     + \"</telemetry>\");\n \n-  TelemetryConfigParserXml parser;\n+  ParserXml parser;\n \n-  auto tmConfig = parser.parse(tmpFile.path().c_str());\n+  auto tmConfig = parser.parseTelemetryConfig(tmpFile.path().c_str());\n   BOOST_REQUIRE_EQUAL(*tmConfig, expectedTelemetryConfig);\n }\n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/ByteArray.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/ByteArray.h\n+ * @file LE1_NISP_Entities/ByteArray.h\n  * @date 10/19/20\n  * @author user\n  *\n@@ -21,39 +21,88 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_BYTEARRAY_H\n-#define _LE1_NISP_PROCESSSCIENCE_BYTEARRAY_H\n+#ifndef _LE1_NISP_ENTITIES_BYTEARRAY_H\n+#define _LE1_NISP_ENTITIES_BYTEARRAY_H\n \n #include <memory>\n #include <iostream>\n \n-#include \"LE1_NISP_ProcessScience//Exception.h\"\n+#include \"Exception.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class ByteArray\n- * @brief\n+ * @brief Interface to manage an array of bytes\n  *\n  */\n class ByteArray{\n public:\n+  /**\n+   * @brief Destructor\n+   */\n   virtual ~ByteArray();\n \n+  /**\n+   * @brief Clone the byte array\n+   * @return A copy of the byte array\n+   */\n   virtual std::shared_ptr<ByteArray> clone() const = 0;\n+  /**\n+   * @class Correct endianness\n+   * @return The byte array with endianness corrected\n+   */\n   virtual std::shared_ptr<ByteArray> swap16() const = 0;\n \n+  /**\n+   * @brief Equal to operator overloading\n+   * @param other Another ByteArray object\n+   * @return \\c true if the two objects are equal, \\c false otherwise\n+   */\n   bool operator==(const ByteArray &other) const;\n+  /**\n+   * @brief Not equal to operator overloading\n+   * @param other Another ByteArray object\n+   * @return \\c true if the two objects are not equal, \\c false otherwise\n+   */\n   bool operator!=(const ByteArray &other) const;\n-  \n+\n+  /**\n+   * @brief Access element\n+   * @param i The position of an element in the array\n+   * @return The reference to the element at the given position\n+   */\n   virtual uint8_t& operator [](const unsigned int i) = 0;\n+  /**\n+   * @brief Access element\n+   * @param i The position of an element in the array\n+   * @return A copy of the element at the given position\n+   */\n   virtual uint8_t at(const unsigned int i) const = 0;\n \n+  /**\n+   * @brief Get the size of the array\n+   * @return The size in bytes of the array\n+   */\n   virtual size_t getSize() const = 0;\n+  /**\n+   * @brief Get data as \\c uint8_t\n+   * @return A smart pointer to the data as \\c uint8_t\n+   */\n   virtual std::shared_ptr<uint8_t[]> getData() const = 0;\n \n+  /**\n+   * @brief Append another byte array\n+   * @param array The byte array to be appended\n+   */\n   virtual void append(const ByteArray &array) = 0;\n \n+  /**\n+   * @brief Extraction operator overloading\n+   * @param os The output stream\n+   * @param array The ByteArray object\n+   * @return The reference to the output stream\n+   */\n   friend std::ostream& operator<<(std::ostream& os, const ByteArray& array){ \n     array.print(os);\n     return os;\n@@ -65,7 +114,7 @@ private:\n \n };// End of ByteArray class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/ByteArrayCreator.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/ByteArrayCreator.h\n+ * @file LE1_NISP_Entities/ByteArrayCreator.h\n  * @date 11/23/20\n  * @author user\n  *\n@@ -21,18 +21,18 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_BYTEARRAYCREATOR_H\n-#define _LE1_NISP_PROCESSSCIENCE_BYTEARRAYCREATOR_H\n+#ifndef _LE1_NISP_ENTITIES_BYTEARRAYCREATOR_H\n+#define _LE1_NISP_ENTITIES_BYTEARRAYCREATOR_H\n \n #include <memory>\n \n-#include \"LE1_NISP_ProcessScience//ByteArray.h\"\n+#include \"ByteArray.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class ByteArrayCreator\n- * @brief\n+ * @brief Interface declaring the factory method to create a ByteArray object\n  *\n  */\n class ByteArrayCreator {\n@@ -44,14 +44,25 @@ public:\n    */\n   virtual ~ByteArrayCreator() = default;\n \n+  /**\n+   * @brief Factory method to create a ByteArray\n+   * @param data Bytes pointer\n+   * @param size The amount of bytes\n+   * @return The ByteArray smart pointer\n+   */\n   virtual std::shared_ptr<ByteArray> create(const std::unique_ptr<uint8_t[]> data, const size_t size) const = 0;\n+  /**\n+   * @brief Factory method to create a ByteArray\n+   * @param size The amount of bytes\n+   * @return The ByteArray smart pointer\n+   */\n   virtual std::shared_ptr<ByteArray> create(const size_t size) const = 0;\n \n private:\n \n };  // End of ByteArrayCreator class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/ByteArrayCreatorEuclid.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/ByteArrayCreatorEuclid.h\n+ * @file LE1_NISP_Entities/ByteArrayCreatorEuclid.h\n  * @date 11/23/20\n  * @author user\n  *\n@@ -21,16 +21,16 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_BYTEARRAYCREATOREUCLID_H\n-#define _LE1_NISP_PROCESSSCIENCE_BYTEARRAYCREATOREUCLID_H\n+#ifndef _LE1_NISP_ENTITIES_BYTEARRAYCREATOREUCLID_H\n+#define _LE1_NISP_ENTITIES_BYTEARRAYCREATOREUCLID_H\n \n-#include \"LE1_NISP_ProcessScience//ByteArrayCreator.h\"\n+#include \"ByteArrayCreator.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class ByteArrayCreatorEuclid\n- * @brief\n+ * @brief Concrete ByteArray creator overriding the ByteArrayCreator factory method to create ByteArrayEuclid object\n  *\n  */\n class ByteArrayCreatorEuclid : public ByteArrayCreator{\n@@ -52,7 +52,7 @@ public:\n \n };  // End of ByteArrayCreatorEuclid class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/ByteArrayCreatorStandard.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/ByteArrayCreatorStandard.h\n+ * @file LE1_NISP_Entities/ByteArrayCreatorStandard.h\n  * @date 11/23/20\n  * @author user\n  *\n@@ -21,17 +21,18 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_BYTEARRAYCREATORSTANDARD_H\n-#define _LE1_NISP_PROCESSSCIENCE_BYTEARRAYCREATORSTANDARD_H\n+#ifndef _LE1_NISP_ENTITIES_BYTEARRAYCREATORSTANDARD_H\n+#define _LE1_NISP_ENTITIES_BYTEARRAYCREATORSTANDARD_H\n \n #include <memory>\n-#include \"LE1_NISP_ProcessScience/ByteArrayCreator.h\"\n+#include \"ByteArrayCreator.h\"\n+\n+namespace LE1_NISP_Entities {\n \n-namespace LE1_NISP_ProcessScience {\n \n /**\n  * @class ByteArrayCreatorStandard\n- * @brief\n+ * @brief Concrete ByteArray creator overriding the ByteArrayCreator factory method to create ByteArrayStandard object\n  *\n  */\n class ByteArrayCreatorStandard: public ByteArrayCreator {\n@@ -53,7 +54,7 @@ public:\n \n };  // End of ByteArrayCreatorStandard class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/ByteArrayEuclid.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/ByteArrayEuclid.h\n+ * @file LE1_NISP_Entities/ByteArrayEuclid.h\n  * @date 11/13/20\n  * @author user\n  *\n@@ -21,17 +21,17 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_BYTEARRAYEUCLID_H\n-#define _LE1_NISP_PROCESSSCIENCE_BYTEARRAYEUCLID_H\n+#ifndef _LE1_NISP_ENTITIES_BYTEARRAYEUCLID_H\n+#define _LE1_NISP_ENTITIES_BYTEARRAYEUCLID_H\n \n #include \"EL_Array/Array.h\"\n-#include \"LE1_NISP_ProcessScience/ByteArray.h\"\n+#include \"ByteArray.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class ByteArrayEuclid\n- * @brief\n+ * @brief Implementation of the ByteArray interface using EL_Array Euclid common library\n  *\n  */\n class ByteArrayEuclid : public ByteArray{\n@@ -42,7 +42,16 @@ public:\n    * @brief Constructor\n    */\n   ByteArrayEuclid();\n+  /**\n+  * @brief Construct a ByteArrayEuclid object with a given size\n+  * @param sizeInBytes The number of bytes for the array to be created\n+  */\n   ByteArrayEuclid(const size_t sizeInBytes);\n+  /**\n+   * @brief Construct a ByteArrayEuclid object from pointer of \\c uint8_t and size\n+   * @param data The smart pointer to the data as \\c uint8_t\n+   * @param sizeInBytes The number of bytes for the array to be created\n+   */\n   ByteArrayEuclid(const std::unique_ptr<uint8_t[]> data, const size_t sizeInBytes);\n \n   /**\n@@ -69,6 +78,6 @@ private:\n \n };  // End of ByteArrayEuclid class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/ByteArrayStandard.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/ByteArrayStandard.h\n+ * @file LE1_NISP_Entities/ByteArrayStandard.h\n  * @date 11/23/20\n  * @author user\n  *\n@@ -21,29 +21,46 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_BYTEARRAYSTANDARD_H\n-#define _LE1_NISP_PROCESSSCIENCE_BYTEARRAYSTANDARD_H\n+#ifndef _LE1_NISP_ENTITIES_BYTEARRAYSTANDARD_H\n+#define _LE1_NISP_ENTITIES_BYTEARRAYSTANDARD_H\n \n #include <vector>\n #include <cstring>\n \n-#include \"LE1_NISP_ProcessScience//ByteArray.h\"\n+#include \"ByteArray.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class ByteArrayStandard\n- * @brief\n+ * @brief Implementation of the ByteArray interface using C++ standard library\n  *\n  */\n class ByteArrayStandard: public ByteArray{\n public:\n \n+  /**\n+   * @brief Construct a ByteArrayStandard object from vector of \\c uint8_t\n+   * @param bytes The vector of bytes\n+   */\n   ByteArrayStandard(const std::vector<uint8_t> &bytes);\n+  /**\n+   * @brief Construct a ByteArrayStandard object from pointer of \\c uint8_t and size\n+   * @param bytes The smart pointer to the data as \\c uint8_t\n+   * @param size The number of bytes for the array to be created\n+   */\n   ByteArrayStandard(std::unique_ptr<uint8_t[]> bytes, const size_t size);\n+  /**\n+   * @brief Construct a ByteArrayStandard object with a given size\n+   * @param size The number of bytes for the array to be created\n+   */\n   ByteArrayStandard(const size_t size = 0);\n+  /**\n+   * @brief Construct a ByteArrayStandard object from vector of \\c uint8_t\n+   * @param bytes The vector of bytes\n+   */\n   ByteArrayStandard(const ByteArrayStandard &other);\n-  virtual ~ByteArrayStandard();\n+  virtual ~ByteArrayStandard() override;\n \n   virtual std::shared_ptr<ByteArray> clone() const override;\n   virtual std::shared_ptr<ByteArray> swap16() const override;\n@@ -70,7 +87,7 @@ private:\n \n };  // End of ByteArrayStandard class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/CompressionParams.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/CompressionParams.h\n+ * @file LE1_NISP_Entities/CompressionParams.h\n  * @date 02/05/21\n  * @author user\n  *\n@@ -21,17 +21,17 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_COMPRESSIONPARAMS_H\n-#define _LE1_NISP_PROCESSSCIENCE_COMPRESSIONPARAMS_H\n+#ifndef _LE1_NISP_ENTITIES_COMPRESSIONPARAMS_H\n+#define _LE1_NISP_ENTITIES_COMPRESSIONPARAMS_H\n \n #include <cstdint>\n #include <ostream>\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class CompressionParams\n- * @brief\n+ * @brief Store compression parameters\n  *\n  */\n class CompressionParams{\n@@ -70,7 +70,7 @@ private:\n \n };  // End of CompressionParams class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/DateTime.h": [
                        [
                            "@@ -0,0 +1,104 @@\n+/**\n+ * @file LE1_NISP_Entities/DateTime.h\n+ * @date 04/19/23\n+ * @author Alberto Alessio\n+ *\n+ * @copyright (C) 2012-2020 Euclid Science Ground Segment\n+ *\n+ * This library is free software; you can redistribute it and/or modify it under\n+ * the terms of the GNU Lesser General Public License as published by the Free\n+ * Software Foundation; either version 3.0 of the License, or (at your option)\n+ * any later version.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+ * details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this library; if not, write to the Free Software Foundation, Inc.,\n+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+ *\n+ */\n+\n+#ifndef _LE1_NISP_ENTITIES_DATETIME_H\n+#define _LE1_NISP_ENTITIES_DATETIME_H\n+\n+#include <string>\n+\n+namespace LE1_NISP_Entities {\n+\n+/**\n+ * @class DateTime\n+ * @brief Interface for DateTime object storing information about date and time\n+ */\n+  class DateTime{\n+  public:\n+    /**\n+     * Destructor\n+     */\n+    virtual ~DateTime() = default;\n+\n+    /**\n+     * @brief Get the year of the DateTime\n+     * @return The year value as an integer\n+     */\n+    [[nodiscard]] virtual int getYear() const = 0;\n+    /**\n+     * @brief Get the month of the DateTime\n+     * @return The month value as an unsigned short\n+     */\n+    [[nodiscard]] virtual unsigned short getMonth() const = 0;\n+    /**\n+     * @brief Get the day of the DateTime\n+     * @return The day value as an unsigned short\n+     */\n+    [[nodiscard]] virtual unsigned short getDay() const = 0;\n+    /**\n+     * @brief Get the hours of the DateTime\n+     * @return The hours value as an unsigned short\n+     */\n+    [[nodiscard]] virtual unsigned short getHours() const = 0;\n+    /**\n+     * @brief Get the minutes of the DateTime\n+     * @return The minutes value as an unsigned short\n+     */\n+    [[nodiscard]] virtual unsigned short getMinutes() const = 0;\n+    /**\n+     * @brief Get the seconds of the DateTime\n+     * @return The seconds value as a double\n+     */\n+    [[nodiscard]] virtual unsigned short getSeconds() const = 0;\n+    /**\n+     * @brief Get the total seconds of the DateTime\n+     * @return The total seconds value as a long\n+     */\n+    [[nodiscard]] virtual double getTotalSeconds() const = 0;\n+    /**\n+     * @brief Get the total microseconds of the DateTime\n+     * @return The total microseconds value as a long\n+     */\n+    [[nodiscard]] virtual double getTotalMicroSeconds() const = 0;\n+\n+    /**\n+     * @brief Get the DateTime in ISO format (YYYYMMDDTHHMMSS.fffffffff)\n+     * @return The ISO format DateTime string\n+     */\n+    [[nodiscard]] virtual std::string getIsoString() const = 0;\n+    /**\n+     * @brief Get the DateTime in ISO extended format (YYYY-MM-DDTHH:MM:SS.fffffffff)\n+     * @return The ISO extended format DateTime string\n+     */\n+    [[nodiscard]] virtual std::string getIsoExtendedString() const = 0;\n+    /**\n+     * @brief Get the modified Julian day of the date\n+     * @return The MJD value\n+     */\n+    [[nodiscard]] virtual double getModifiedJulianDay() const = 0;\n+\n+  };\n+\n+}  // namespace LE1_NISP_Entities\n+\n+\n+#endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/DateTimeBoost.h": [
                        [
                            "@@ -0,0 +1,80 @@\n+/**\n+ * @file LE1_NISP_Entities/DateTimeBoost.h\n+ * @date 04/19/23\n+ * @author Alberto Alessio\n+ *\n+ * @copyright (C) 2012-2020 Euclid Science Ground Segment\n+ *\n+ * This library is free software; you can redistribute it and/or modify it under\n+ * the terms of the GNU Lesser General Public License as published by the Free\n+ * Software Foundation; either version 3.0 of the License, or (at your option)\n+ * any later version.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+ * details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this library; if not, write to the Free Software Foundation, Inc.,\n+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+ *\n+ */\n+\n+#ifndef _LE1_NISP_ENTITIES_DATETIMEBOOST_H\n+#define _LE1_NISP_ENTITIES_DATETIMEBOOST_H\n+\n+#include \"DateTime.h\"\n+#include <boost/date_time.hpp>\n+\n+namespace LE1_NISP_Entities {\n+\n+/**\n+ * @class DateTimeBoost\n+ * @brief Implementation of DateTime interface using boost\n+ */\n+  class DateTimeBoost: public DateTime{\n+  public:\n+    /**\n+     * @brief Construct a DateTimeBoost object\n+     * @param useMinDate Use minimum date time to initialize object\n+     */\n+    explicit DateTimeBoost(bool useMinDate = false);\n+    /**\n+     * @brief Construct a DateTimeBoost object\n+     * @param year The year of the date time\n+     * @param month The month of the date time\n+     * @param day The day of the date time\n+     * @param hours The hours of the date time\n+     * @param minutes The minutes of the date time\n+     * @param seconds The seconds of the date time\n+     */\n+    DateTimeBoost(int year, unsigned short month, unsigned short day,\n+                  unsigned short hours, unsigned short minutes, double seconds);\n+    /**\n+     * @brief Destructor\n+     */\n+    ~DateTimeBoost() override;\n+\n+    [[nodiscard]] int getYear() const override;\n+    [[nodiscard]] unsigned short getMonth() const override;\n+    [[nodiscard]] unsigned short getDay() const override;\n+    [[nodiscard]] unsigned short getHours() const override;\n+    [[nodiscard]] unsigned short getMinutes() const override;\n+    [[nodiscard]] unsigned short getSeconds() const override;\n+    [[nodiscard]] double getTotalSeconds() const override;\n+    [[nodiscard]] double getTotalMicroSeconds() const override;\n+\n+    [[nodiscard]] std::string getIsoString() const override;\n+    [[nodiscard]] std::string getIsoExtendedString() const override;\n+    [[nodiscard]] double getModifiedJulianDay() const override;\n+\n+  protected:\n+    boost::posix_time::ptime m_dateTime;\n+  };\n+\n+\n+}  // namespace LE1_NISP_Entities\n+\n+\n+#endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/DateTimeManager.h": [
                        [
                            "@@ -1,6 +1,6 @@\n /**\n- * @file LE1_NISP_ProcessScience/OnBoardTime.h\n- * @date 06/12/20\n+ * @file LE1_NISP_Entities/DateTimeManager.h\n+ * @date 11/24/20\n  * @author user\n  *\n  * @copyright (C) 2012-2020 Euclid Science Ground Segment\n@@ -21,69 +21,61 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_ONBOARDTIME_H\n-#define _LE1_NISP_PROCESSSCIENCE_ONBOARDTIME_H\n+#ifndef _LE1_NISP_ENTITIES_DATETIMEMANAGER_H\n+#define _LE1_NISP_ENTITIES_DATETIMEMANAGER_H\n \n-#include <cstdint>\n #include <string>\n+#include <memory>\n \n-#define SPC_DPU_CLOCK_RATIO 59.6/50\n-\n-namespace LE1_NISP {\n-\n-struct DateTime {\n-  int year;\n-  unsigned short month;\n-  unsigned short day;\n-  unsigned short hours;\n-  unsigned short minutes;\n-  double seconds;\n-};\n+#include \"LE1_NISP_Entities/DateTime.h\"\n+#include \"LE1_NISP_Entities/OnBoardTime.h\"\n \n+namespace LE1_NISP_Entities {\n \n /**\n- * @class OnBoardTime\n- * @brief \n+ * @class DateTimeManager\n+ * @brief Interface to manage date and time\n  *\n  */\n-class OnBoardTime {\n+class DateTimeManager {\n \n public:\n-  /** Constructor\n-   * \n+    /**\n+   * @brief Destructor\n    */\n-  explicit OnBoardTime(uint32_t coarseTime, uint16_t fineTime);\n+  virtual ~DateTimeManager() = default;\n \n   /**\n-   * @brief Destructor\n+   * @brief Get the current DateTime\n+   * @return The current DateTime smart pointer\n    */\n-  virtual ~OnBoardTime() = default;\n-\n-  // Coarse time in seconds\n-  virtual uint32_t coarseTime() const;\n-  // Fine time in the hardware units i.e. 50 ns\n-  virtual uint16_t fineTime() const;\n-  /// Fine time in microseconds = fineTime * (2^8) * (50*10^-3), rounding included\n-  virtual uint32_t fineTimeMusec() const;\n-\n-  virtual double getObtTotalSeconds() const;\n+  [[nodiscard]] virtual std::shared_ptr<DateTime> getCurrentDateTime() const = 0;\n \n-  virtual std::string toIsoExtended(int epoch = 1970) const;\n-  virtual DateTime toDateTime(int epoch = 1970) const;\n-  virtual double toModifiedJulianDay(int epoch = 1970) const;\n-\n-  /// Comparison operator to use it in maps\n-  bool operator <(const OnBoardTime &rhs) const;\n-\n-private:\n-  // coarse time in seconds\n-  uint32_t m_coarseTime;\n-  // fine time in ticks of 50 ns as defined in the NISP DPU ASW to Spacecraft ICD\n-  uint16_t m_fineTime;\n+  /**\n+   * @brief Create a DateTime\n+   * @param year The year of the DateTime\n+   * @param month The month of the DateTime\n+   * @param day The day of the DateTime\n+   * @param hours The hours of the DateTime\n+   * @param minutes The minutes of the DateTime\n+   * @param seconds The seconds of the DateTime\n+   * @return The DateTime smart pointer\n+   */\n+  [[nodiscard]] virtual std::shared_ptr<DateTime> createDateTime(int year, unsigned short month, unsigned short day, unsigned short hours, unsigned short minutes, double seconds) const = 0;\n+  /**\n+   * @brief Create an on-board time object\n+   * @param coarseTime The local time seconds at the start of the exposure\n+   * @param fineTime The local time sub-seconds at the start of the exposure (in units of 2^16x50n [s])\n+   * @param epochYear The epoch year\n+   * @param epochMonth The epoch month\n+   * @param epochDay The epoch day\n+   * @return The OnBoardTime smart pointer\n+   */\n+  [[nodiscard]] virtual std::shared_ptr<OnBoardTime> createOnBoardTime(uint32_t coarseTime, uint16_t fineTime, int epochYear, unsigned short epochMonth, unsigned short epochDay) const = 0;\n \n-};  // End of OnBoardTime class\n+};  // End of DateTimeManager class\n \n-}  // namespace LE1_NISP\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/DateTimeManagerBoost.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/DateTimeManagerBoost.h\n+ * @file LE1_NISP_Entities/DateTimeManagerBoost.h\n  * @date 02/14/21\n  * @author user\n  *\n@@ -21,62 +21,46 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DATETIMEMANAGERBOOST_H\n-#define _LE1_NISP_PROCESSSCIENCE_DATETIMEMANAGERBOOST_H\n+#ifndef _LE1_NISP_ENTITIES_DATETIMEMANAGERBOOST_H\n+#define _LE1_NISP_ENTITIES_DATETIMEMANAGERBOOST_H\n \n-#include \"LE1_NISP_ProcessScience/DateTimeManager.h\"\n+#include \"DateTimeManager.h\"\n #include <boost/date_time.hpp>\n \n-namespace LE1_NISP_ProcessScience {\n-\n-class DateTimeBoost: public DateTime{\n-public:\n-  DateTimeBoost(const bool useMinDate = false);\n-  virtual ~DateTimeBoost();\n-\n-  virtual int getYear() const override;\n-  virtual unsigned short getMonth() const override;\n-  virtual unsigned short getDay() const override;\n-  virtual unsigned short getHours() const override;\n-  virtual unsigned short getMinutes() const override;\n-  virtual double getSeconds() const override;\n-  virtual long getTotalSeconds() const override;\n-  virtual long getTotalMicroseconds() const override;\n-\n-  virtual std::string getIsoString() const override;\n-  virtual std::string getIsoExtendedString() const override;\n-\n-private:\n-  boost::posix_time::ptime m_dateTime;\n-};\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class DateTimeManagerBoost\n- * @brief\n+ * @brief Implementation of DateTimeManagerBoost interface using boost\n  *\n  */\n class DateTimeManagerBoost: public DateTimeManager{\n \n public:\n \n-  DateTimeManagerBoost(const bool useMinDate = false);\n+  /**\n+   * @brief Construct a DateTimeManagerBoost object\n+   * @param useMinDate Use minimum date time to initialize object\n+   */\n+  explicit DateTimeManagerBoost(const bool useMinDate = false);\n \n   /**\n    * @brief Destructor\n    */\n-  virtual ~DateTimeManagerBoost();\n+  ~DateTimeManagerBoost() override;\n \n-  virtual std::shared_ptr<DateTime> getDateTime() const override;\n+  [[nodiscard]] std::shared_ptr<DateTime> getCurrentDateTime() const override;\n+  [[nodiscard]] std::shared_ptr<DateTime> createDateTime(int year, unsigned short month, unsigned short day,\n+                                                         unsigned short hours, unsigned short minutes,\n+                                                         double seconds) const override;\n+  [[nodiscard]] std::shared_ptr<OnBoardTime> createOnBoardTime(uint32_t coarseTime, uint16_t fineTime, int epochYear, unsigned short epochMonth, unsigned short epochDay) const override;\n \n-  virtual std::string getDateTimeIsoStr() const override;\n-  virtual std::string getDateTimeIsoExtendedStr() const override;\n-  \n private:\n   bool m_useMinDate;\n \n };  // End of DateTimeManagerBoost class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/Detector.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/Detector.h\n+ * @file LE1_NISP_Entities/Detector.h\n  * @date 01/20/21\n  * @author user\n  *\n@@ -21,105 +21,343 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTOR_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTOR_H\n+#ifndef _LE1_NISP_ENTITIES_DETECTOR_H\n+#define _LE1_NISP_ENTITIES_DETECTOR_H\n \n #include <vector>\n \n-#include \"LE1_NISP_ProcessScience/DetectorHeader.h\"\n-#include \"LE1_NISP_ProcessScience/TelemetryDetector.h\"\n-#include \"LE1_NISP_ProcessScience/DetectorMetadata.h\"\n-#include \"LE1_NISP_ProcessScience/OnBoardTime.h\"\n-#include \"LE1_NISP_ProcessScience/TelemetryConfiguration.h\"\n-#include \"LE1_NISP_ProcessScience/TelemetrySection.h\"\n+#include \"DetectorHeader.h\"\n+#include \"TelemetryDetector.h\"\n+#include \"DetectorMetadata.h\"\n+#include \"OnBoardTime.h\"\n+#include \"TelemetryConfiguration.h\"\n+#include \"TelemetrySection.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class Detector\n- * @brief\n+ * @brief Interface to access information, data, and parameters of a detector\n  *\n  */\n class Detector{\n public:\n+  /**\n+   * @brief Destructor\n+   */\n   virtual ~Detector() = default;\n \n+  /**\n+   * @brief Set the header of the detector\n+   * @param header The detector header\n+   */\n   virtual void setHeader(const DetectorHeader  &header) = 0;\n+  /**\n+   * @brief Get the header of the detector\n+   * @return The detector header\n+   */\n   virtual DetectorHeader getHeader() const = 0;\n \n+  /**\n+   * @brief Set the TelemetryDetectorInterface smart pointer\n+   * @param tmDetector The TelemetryDetectorInterface smart pointer\n+   */\n   virtual void setTelemetryDetector(const std::shared_ptr<TelemetryDetectorInterface> tmDetector) = 0;\n+  /**\n+   * @brief Get the TelemetryDetectorInterface smart pointer\n+   * @return The TelemetryDetectorInterface smart pointer\n+   */\n   virtual std::shared_ptr<TelemetryDetectorInterface> getTelemetryDetector() const = 0;\n-  \n+\n+  /**\n+   * @brief Set the detector metadata\n+   * @param metadata The metadata of the detector\n+   */\n   virtual void setMetadata(const std::shared_ptr<DetectorMetadata> metadata) = 0;\n+  /**\n+   * @brief Get the detector metadata\n+   * @return The detector metadata\n+   */\n   virtual std::shared_ptr<DetectorMetadata> getMetadata() const = 0;\n-  virtual void setRawlines(const std::shared_ptr<ByteArray> rawLines) = 0;\n-  virtual std::shared_ptr<ByteArray> getRawLines() const = 0;\n-  virtual void setEngData(const std::shared_ptr<ByteArray> engData) = 0;\n-  virtual std::shared_ptr<ByteArray> getEngData() const = 0;\n-  virtual void setScienceData(const std::shared_ptr<ByteArray> data) = 0;\n-  virtual std::shared_ptr<ByteArray> getScienceData() const = 0;\n-  virtual void setQualityData(const std::shared_ptr<ByteArray> data) = 0;\n-  virtual std::shared_ptr<ByteArray> getQualityData() const = 0;\n-  virtual void setAnalogTelemetry(const std::shared_ptr<ByteArray> data) = 0;\n-  virtual std::shared_ptr<ByteArray> getAnalogTelemetry() const = 0;\n-  virtual void setErrorsData(const std::shared_ptr<ByteArray> data) = 0;\n-  virtual std::shared_ptr<ByteArray> getErrorsData() const = 0;\n-  virtual void setHistoryData(const std::shared_ptr<ByteArray> data) = 0;\n-  virtual std::shared_ptr<ByteArray> getHistoryData() const = 0;\n+  /**\n+   * @brief Set the rawlines of the detector\n+   * @param rawLines The rawlines byte array\n+   */\n+  virtual void setRawlines(const std::shared_ptr<LE1_NISP_Entities::ByteArray> rawLines) = 0;\n+  /**\n+   * @brief Get the rawlines of the detector\n+   * @return The rawlines byte array\n+   */\n+  virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> getRawLines() const = 0;\n+  /**\n+   * @brief Set the engineering data of the detector\n+   * @param engData The engineering data byte array\n+   */\n+  virtual void setEngData(const std::shared_ptr<LE1_NISP_Entities::ByteArray> engData) = 0;\n+  /**\n+   * @brief Get the engineering data of the detector\n+   * @return The engineering data byte array\n+   */\n+  virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> getEngData() const = 0;\n+  /**\n+   * @brief Set the ScienceData of the detector\n+   * @param data The science data byte array\n+   */\n+  virtual void setScienceData(const std::shared_ptr<LE1_NISP_Entities::ByteArray> data) = 0;\n+  /**\n+   * @brief Get the ScienceData of the detector\n+   * @return The science data byte array\n+   */\n+  virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> getScienceData() const = 0;\n+  /**\n+   * @brief Set the QualityData of the detector\n+   * @param data The quality data byte array\n+   */\n+  virtual void setQualityData(const std::shared_ptr<LE1_NISP_Entities::ByteArray> data) = 0;\n+  /**\n+   * @brief Get the QualityData of the detector\n+   * @return The quality data byte array\n+   */\n+  virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> getQualityData() const = 0;\n+  /**\n+   * @brief Set the analog telemetry data of the detector\n+   * @param data The analog telemetry byte array\n+   */\n+  virtual void setAnalogTelemetry(const std::shared_ptr<LE1_NISP_Entities::ByteArray> data) = 0;\n+  /**\n+   * @brief Get the analog telemetry data of the detector\n+   * @return The analog telemetry byte array\n+   */\n+  virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> getAnalogTelemetry() const = 0;\n+  /**\n+   * @brief Set the errors data of the detector\n+   * @param data The errors data byte array\n+   */\n+  virtual void setErrorsData(const std::shared_ptr<LE1_NISP_Entities::ByteArray> data) = 0;\n+  /**\n+   * @brief Get the errors data of the detector\n+   * @return The errors data byte array\n+   */\n+  virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> getErrorsData() const = 0;\n+  /**\n+   * @brief Set the history buffer data of the detector\n+   * @param data The history buffer byte array\n+   */\n+  virtual void setHistoryData(const std::shared_ptr<LE1_NISP_Entities::ByteArray> data) = 0;\n+  /**\n+   * @brief Get the history buffer data of the detector\n+   * @return The history buffer byte array\n+   */\n+  virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> getHistoryData() const = 0;\n \n+  /**\n+   * @brief Get the detector ID\n+   * @return The detector ID\n+   */\n   virtual DetectorId getId() const = 0;\n-  virtual std::shared_ptr<LE1_NISP::OnBoardTime> getObt() const = 0;\n+  /**\n+   * @brief Get the detector OBT (on-board time)\n+   * @return The detector OBT\n+   */\n+  virtual std::shared_ptr<OnBoardTime> getObt() const = 0;\n \n+  /**\n+   * @brief Set the telemetry configuration\n+   * @param tmConfig The telemetry configuration\n+   */\n   virtual void setTelemetryConfiguration(const std::shared_ptr<TelemetryConfiguration> tmConfig) = 0;\n+  /**\n+   * @brief Get the telemetry configuration\n+   * @return The telemetry configuration\n+   */\n   virtual std::shared_ptr<TelemetryConfiguration> getTelemetryConfiguration() const = 0;\n \n+  /**\n+   * @brief Set the SYNC telemetry section\n+   * @param section The telemetry section of SYNC bytes\n+   */\n   virtual void setSyncSection(const std::shared_ptr<TelemetrySection> section) = 0;\n+  /**\n+   * @brief Set the digital telemetry telemetry section\n+   * @param section The telemetry section of digital telemetry\n+   */\n   virtual void setDigitalTmSection(const std::shared_ptr<TelemetrySection> section) = 0;\n+  /**\n+   * @brief Set the rawlines telemetry section\n+   * @param section The telemetry section of rawlines\n+   */\n   virtual void setRawlinesSection(const std::shared_ptr<TelemetrySection> section) = 0;\n+  /**\n+   * @brief Set the science telemetry data section\n+   * @param section The telemetry section of science data\n+   */\n   virtual void setScienceSection(const std::shared_ptr<TelemetrySection> section) = 0;\n+  /**\n+   * @brief Set the TAIL1 telemetry section\n+   * @param section The telemetry section of TAIL1 bytes\n+   */\n   virtual void setTail1Section(const std::shared_ptr<TelemetrySection> section) = 0;\n+  /**\n+   * @brief Set the quality data telemetry section\n+   * @param section The telemetry section of quality data\n+   */\n   virtual void setQualityDataSection(const std::shared_ptr<TelemetrySection> section) = 0;\n+  /**\n+   * @brief Set the TAIL2 telemetry section\n+   * @param section The telemetry section of TAIL2 bytes\n+   */\n   virtual void setTail2Section(const std::shared_ptr<TelemetrySection> section) = 0;\n+  /**\n+   * @brief Set the analog TLM telemetry section\n+   * @param section The telemetry section of analog TLM\n+   */\n   virtual void setAnalogTmSection(const std::shared_ptr<TelemetrySection> section) = 0;\n+  /**\n+   * @brief Set the history data telemetry section\n+   * @param section The telemetry section of history data\n+   */\n   virtual void setHistorySection(const std::shared_ptr<TelemetrySection> section) = 0;\n+  /**\n+   * @brief Set the errors data telemetry section\n+   * @param section The telemetry section of errors data\n+   */\n   virtual void setErrorsSection(const std::shared_ptr<TelemetrySection> section) = 0;\n+  /**\n+   * @brief Set the TAIL3 telemetry section\n+   * @param section The telemetry section of TAIL3 bytes\n+   */\n   virtual void setTail3Section(const std::shared_ptr<TelemetrySection> section) = 0;\n+  /**\n+   * @brief Set the engineering data telemetry section\n+   * @param section The telemetry section of engineering data bytes\n+   */\n   virtual void setEngSections(const std::vector<std::shared_ptr<TelemetrySection>> sections) = 0;\n+  /**\n+   * @brief Set the TAIL4 telemetry section\n+   * @param section The telemetry section of TAIL4 bytes\n+   */\n   virtual void setTail4Section(const std::shared_ptr<TelemetrySection> section) = 0;\n-  \n+\n+  /**\n+   * @brief Get the SYNC telemetry section\n+   * @return The telemetry section of SYNC bytes\n+   */\n   virtual std::shared_ptr<TelemetrySection> getSyncSection() const  = 0;\n+  /**\n+   * @brief Get the digital telemetry telemetry section\n+   * @return The telemetry section of digital telemetry\n+   */\n   virtual std::shared_ptr<TelemetrySection> getDigitalTmSection() const = 0;\n+  /**\n+   * @brief Get the rawlines telemetry section\n+   * @return The telemetry section of rawlines\n+   */\n   virtual std::shared_ptr<TelemetrySection> getRawlinesSection() const = 0;\n+  /**\n+   * @brief Get the science telemetry data section\n+   * @return The telemetry section of science data\n+   */\n   virtual std::shared_ptr<TelemetrySection> getScienceSection() const = 0;\n+  /**\n+   * @brief Get the TAIL1 telemetry section\n+   * @return The telemetry section of TAIL1 bytes\n+   */\n   virtual std::shared_ptr<TelemetrySection> getTail1Section() const  = 0;\n+  /**\n+   * @brief Get the quality data telemetry section\n+   * @return The telemetry section of quality data\n+   */\n   virtual std::shared_ptr<TelemetrySection> getQualityDataSection() const = 0;\n+  /**\n+   * @brief Get the TAIL2 telemetry section\n+   * @return The telemetry section of TAIL2 bytes\n+   */\n   virtual std::shared_ptr<TelemetrySection> getTail2Section() const  = 0;\n+  /**\n+   * @brief Get the analog TLM telemetry section\n+   * @return The telemetry section of analog TLM\n+   */\n   virtual std::shared_ptr<TelemetrySection> getAnalogTmSection() const = 0;\n+  /**\n+   * @brief Get the history data telemetry section\n+   * @return The telemetry section of history data\n+   */\n   virtual std::shared_ptr<TelemetrySection> getHistorySection() const = 0;\n+  /**\n+   * @brief Get the errors data telemetry section\n+   * @return The telemetry section of errors data\n+   */\n   virtual std::shared_ptr<TelemetrySection> getErrorsSection() const = 0;\n+  /**\n+   * @brief Get the TAIL3 telemetry section\n+   * @return The telemetry section of TAIL3 bytes\n+   */\n   virtual std::shared_ptr<TelemetrySection> getTail3Section() const  = 0;\n+  /**\n+   * @brief Get the engineering data telemetry section\n+   * @return The telemetry section of engineering data bytes\n+   */\n   virtual std::vector<std::shared_ptr<TelemetrySection>> getEngSections() const = 0;\n+  /**\n+   * @brief Get the TAIL4 telemetry section\n+   * @return The telemetry section of TAIL4 bytes\n+   */\n   virtual std::shared_ptr<TelemetrySection> getTail4Section() const  = 0;\n \n+  /**\n+   * @brief Check if photo quality data are compressed\n+   * @return \\c true if photo quality data are compressed, \\c false otherwise\n+   */\n   virtual bool isQualityDataPhotoCompressed() const = 0;\n+  /**\n+   * @brief Check if spectro quality data are compressed\n+   * @return \\c true if spectro quality data are compressed, \\c false otherwise\n+   */\n   virtual bool isQualityDataSpectroCompressed() const = 0;\n+  /**\n+   * @brief Check if science data are compressed\n+   * @return \\c true if science data are compressed, \\c false otherwise\n+   */\n   virtual bool isScienceCompressed() const = 0;\n+  /**\n+   * @brief Check if history data are compressed\n+   * @return \\c true if history data are compressed, \\c false otherwise\n+   */\n   virtual bool isHistoryCompressed() const = 0;\n+  /**\n+   * @brief Check if analog telemetry is compressed\n+   * @return \\c true if analog telemetry is compressed, \\c false otherwise\n+   */\n   virtual bool isAnalogTmCompressed() const = 0;\n+  /**\n+   * @brief Check if errors data are compressed\n+   * @return \\c true if errors data are compressed, \\c false otherwise\n+   */\n   virtual bool isErrorCompressed() const = 0;\n \n };  // End of Detector class\n \n-\n+/**\n+ * @class DetectorCreator\n+ * @brief Interface declaring the factory method to create a Detector object\n+ *\n+ */\n class DetectorCreator{\n public:\n+  /**\n+   * @brief Destructor\n+   */\n   virtual ~DetectorCreator() = default;\n \n+  /**\n+   * @brief Create a Detector object\n+   * @return A Detector smart pointer\n+   */\n   virtual std::shared_ptr<Detector> createDetector() = 0;\n };\n \n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/DetectorCollection.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/DetectorCollection.h\n+ * @file LE1_NISP_Entities/DetectorCollection.h\n  * @date 01/27/21\n  * @author user\n  *\n@@ -21,18 +21,25 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORCOLLECTION_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORCOLLECTION_H\n+#ifndef _LE1_NISP_ENTITIES_DETECTORCOLLECTION_H\n+#define _LE1_NISP_ENTITIES_DETECTORCOLLECTION_H\n \n-#include \"LE1_NISP_ProcessScience/Detector.h\"\n-#include \"LE1_NISP_ProcessScience/DetectorIterator.h\"\n+#include \"Detector.h\"\n+#include \"DetectorIterator.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n \n /**\n  * @class DetectorCollection\n- * @brief\n+ * @brief Interface to manage a set of detectors, such as:\n+ * \\li Add a detector\n+ * \\li Get a detector by its ID\n+ * \\li Count detectors\n+ * \\li Check if a detector is available by its ID\n+ * \\li Get a DetectorIterator to traverse the collection\n+ *\n+ * It is implemented following the Iterator design pattern.\n  *\n  */\n class DetectorCollection {\n@@ -43,17 +50,39 @@ public:\n    */\n   virtual ~DetectorCollection();\n \n+  /**\n+   * @brief Create a DetectorIterator to iterate over the collection\n+   * @return A DetectorIterator smart pointer\n+   */\n   virtual std::shared_ptr<DetectorIterator> createDetectorIterator() = 0;\n-  \n+\n+  /**\n+   * @brief Add a detector to the collection\n+   * @param detector The detector\n+   */\n   virtual void addDetector(const std::shared_ptr<Detector> detector) = 0;\n+  /**\n+   * @brief Get a detector given a DetectorId\n+   * @param detId The detector ID\n+   * @return The detector corresponding to the given ID\n+   */\n   virtual std::shared_ptr<Detector> getDetector(const DetectorId &detId) = 0;\n \n+  /**\n+   * @brief Check if the collection contains a detector with a given ID\n+   * @param detId The detector ID\n+   * @return \\c true if the collection contains a detector with the given ID, \\c false otherwise\n+   */\n   virtual bool hasDetector(const DetectorId &detId) const = 0;\n+  /**\n+   * @brief Count the number of detectors of the collection\n+   * @return The number of detectors\n+   */\n   virtual size_t countDetectors() const = 0;\n \n };  // End of DetectorCollection class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/DetectorHeader.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/DetectorHeader.h\n+ * @file LE1_NISP_Entities/DetectorHeader.h\n  * @date 01/20/21\n  * @author user\n  *\n@@ -21,16 +21,16 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORHEADER_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORHEADER_H\n+#ifndef _LE1_NISP_ENTITIES_DETECTORHEADER_H\n+#define _LE1_NISP_ENTITIES_DETECTORHEADER_H\n \n #include <fstream>\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class DetectorHeader\n- * @brief\n+ * @brief The uncompressed header of a detector\n  *\n  */\n class DetectorHeader{\n@@ -49,21 +49,52 @@ public:\n   uint32_t rawlinesSize;\n   uint32_t engDataSize;\n \n+  /**\n+   * @brief Default constructor\n+   */\n   DetectorHeader();\n+  /**\n+   * @brief Destructor\n+   */\n   virtual ~DetectorHeader();\n-  \n+\n+  /**\n+   * @brief DetectorHeader copy constructor\n+   * @param other Another DetectorHeader\n+   */\n   DetectorHeader(const DetectorHeader &other);\n \n+  /**\n+   * @brief Assignment operator overloading\n+   * @param source The DetectorHeader source object\n+   * @return The reference to the current DetectorHeader object\n+   */\n   DetectorHeader& operator=(const DetectorHeader &source);\n \n+  /**\n+    * @brief Equal to operator overloading\n+    * @param other Another DetectorHeader object\n+    * @return \\c true if the two objects are equal, \\c false otherwise\n+    */\n   bool operator==(const DetectorHeader &other) const;\n+  /**\n+  * @brief Not equal to operator overloading\n+  * @param other Another DetectorHeader object\n+  * @return \\c true if the two objects are not equal, \\c false otherwise\n+  */\n   bool operator!=(const DetectorHeader &other) const;\n \n+  /**\n+   * @brief Extraction operator overloading\n+   * @param os The output stream\n+   * @param header The DetectorHeader object\n+   * @return The reference to the output stream\n+   */\n   friend std::ostream& operator<<(std::ostream& os, const DetectorHeader &header);\n \n };  // End of DetectorHeader class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/DetectorId.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/DetectorId.h\n+ * @file LE1_NISP_Entities/DetectorId.h\n  * @date 01/27/21\n  * @author user\n  *\n@@ -21,34 +21,93 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORID_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORID_H\n+#ifndef _LE1_NISP_ENTITIES_DETECTORID_H\n+#define _LE1_NISP_ENTITIES_DETECTORID_H\n \n #include <fstream>\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class DetectorId\n- * @brief\n+ * @brief Unique identifier of a detector\n  *\n  */\n class DetectorId{\n public:\n+\n+  /**\n+   * Constructor\n+   * @param dpuId the DPU ID\n+   * @param sceId the SCE ID\n+   * @param scePos the SCE position\n+   */\n   DetectorId(const unsigned int dpuId = 0, const unsigned int sceId = 0, const std::string &scePos = \"\");\n-  \n+\n+  /**\n+   * Destructor\n+   */\n   virtual ~DetectorId();\n \n+  /**\n+   * @brief Equal to operator overloading\n+   * @param other Another DetectorId object\n+   * @return \\c true if the two objects are equal in terms of SCE ID, DPU ID, and SCE POS, \\c false otherwise\n+   */\n   bool operator==(const DetectorId &other) const;\n+\n+  /**\n+   * @brief Not equal to operator overloading\n+   * @param other Another DetectorId object\n+   * @return \\c true if the two objects are not equal in terms of SCE ID, DPU ID, and SCE POS, \\c false otherwise\n+   */\n   bool operator!=(const DetectorId &other) const;\n+\n+  /**\n+   * @brief Equal to operator overloading\n+   * @param other Another SCE position string\n+   * @return \\c true if the two objects are equal in terms of SCE POS, \\c false otherwise\n+   */\n   bool operator==(const std::string &other) const;\n+\n+  /**\n+   * @brief Not equal to operator overloading\n+   * @param other Another SCE position string\n+   * @return \\c true if the two objects are not equal in terms of SCE POS, \\c false otherwise\n+   */\n   bool operator!=(const std::string &other) const;\n+\n+  /**\n+   * @brief SCE ID getter\n+   * @return The SCE ID of the detector\n+   */\n   unsigned int getSceId() const;\n+\n+  /**\n+   * @brief DPU ID getter\n+   * @return The DPU ID of the detector\n+   */\n   unsigned int getDpuId() const;\n+\n+  /**\n+   * @brief SCE position getter\n+   * @return The SCE position of the detector\n+   */\n   std::string getScePos() const;\n \n-  bool operator<(const DetectorId &other) const;\n+  /**\n+   * @brief Less than operator overloading\n+   * @param other Another DetectorId object\n+   * @return \\c true if \\a lhs is less than \\a rhs object, \\c false otherwise\n+   */\n+   bool operator<(const DetectorId &other) const;\n \n+   /**\n+    * @brief Extraction operator overloading\n+    * @param os The output stream\n+    * @param detId The \\c DetectorId object\n+    * @return The reference to the output stream\n+    */\n   friend std::ostream& operator<<(std::ostream& os, const DetectorId& detId);\n \n private:\n@@ -61,7 +120,7 @@ private:\n };  // End of DetectorId class\n \n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/DetectorIdIterator.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/DetectorIdIterator.h\n+ * @file LE1_NISP_Entities/DetectorIdIterator.h\n  * @date 01/27/21\n  * @author user\n  *\n@@ -21,31 +21,38 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORIDITERATOR_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORIDITERATOR_H\n+#ifndef _LE1_NISP_ENTITIES_DETECTORIDITERATOR_H\n+#define _LE1_NISP_ENTITIES_DETECTORIDITERATOR_H\n \n #include <map>\n-#include \"LE1_NISP_ProcessScience/DetectorIterator.h\"\n+#include \"DetectorIterator.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n class DetectorMap;\n \n /**\n  * @class DetectorIdIterator\n- * @brief\n+ * @brief It implements the specific algorithm for traversing a collection, tracks the traversal progress on its own to allow several iterators to traverse the same collection independently of each other.\n  *\n  */\n class DetectorIdIterator: public DetectorIterator{\n public:\n-  DetectorIdIterator(const std::shared_ptr<DetectorMap> exposure);\n-  virtual ~DetectorIdIterator() override;\n+  /**\n+   * @brief Constructor\n+   * @param exposure The DetectorMap smart pointer\n+   */\n+  explicit DetectorIdIterator(const std::shared_ptr<DetectorMap> exposure);\n+  /**\n+   * @brief Destructor\n+   */\n+  ~DetectorIdIterator() override;\n \n-  virtual bool hasNext() const override;\n+  bool hasNext() const override;\n \n-  virtual std::shared_ptr<Detector> getNext() override;\n+  std::shared_ptr<Detector> getNext() override;\n \n-  virtual void first() override;\n+  void first() override;\n \n private:\n   std::shared_ptr<DetectorMap> m_exposure;\n@@ -53,7 +60,7 @@ private:\n \n };  // End of DetectorIdIterator class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/DetectorImpl.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/DetectorImpl.h\n+ * @file LE1_NISP_Entities/DetectorImpl.h\n  * @date 01/28/21\n  * @author user\n  *\n@@ -21,16 +21,16 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORIMPL_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORIMPL_H\n+#ifndef _LE1_NISP_ENTITIES_DETECTORIMPL_H\n+#define _LE1_NISP_ENTITIES_DETECTORIMPL_H\n \n-#include \"LE1_NISP_ProcessScience/Detector.h\"\n+#include \"Detector.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class DetectorImpl\n- * @brief\n+ * @brief Implementation of the Detector interface\n  *\n  */\n class DetectorImpl: public Detector{\n@@ -47,23 +47,23 @@ public:\n   virtual void  setMetadata(const std::shared_ptr<DetectorMetadata> metadata) override;\n   virtual std::shared_ptr<DetectorMetadata> getMetadata() const override;\n \n-  virtual void  setRawlines(const std::shared_ptr<ByteArray> rawLines) override;\n-  std::shared_ptr<ByteArray> getRawLines() const override;\n-  virtual void setEngData(const std::shared_ptr<ByteArray> engData) override;\n-  virtual std::shared_ptr<ByteArray> getEngData() const override;\n-  virtual void setScienceData(const std::shared_ptr<ByteArray> data) override;\n-  virtual std::shared_ptr<ByteArray> getScienceData() const override;\n-  virtual void setQualityData(const std::shared_ptr<ByteArray> data) override;\n-  virtual std::shared_ptr<ByteArray> getQualityData() const override;\n-  virtual void setAnalogTelemetry(const std::shared_ptr<ByteArray> data) override;\n-  virtual std::shared_ptr<ByteArray> getAnalogTelemetry() const override;\n-  virtual void setErrorsData(const std::shared_ptr<ByteArray> data) override;\n-  virtual std::shared_ptr<ByteArray> getErrorsData() const override;\n-  virtual void setHistoryData(const std::shared_ptr<ByteArray> data) override;\n-  virtual std::shared_ptr<ByteArray> getHistoryData() const override;\n+  virtual void  setRawlines(const std::shared_ptr<LE1_NISP_Entities::ByteArray> rawLines) override;\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> getRawLines() const override;\n+  virtual void setEngData(const std::shared_ptr<LE1_NISP_Entities::ByteArray> engData) override;\n+  virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> getEngData() const override;\n+  virtual void setScienceData(const std::shared_ptr<LE1_NISP_Entities::ByteArray> data) override;\n+  virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> getScienceData() const override;\n+  virtual void setQualityData(const std::shared_ptr<LE1_NISP_Entities::ByteArray> data) override;\n+  virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> getQualityData() const override;\n+  virtual void setAnalogTelemetry(const std::shared_ptr<LE1_NISP_Entities::ByteArray> data) override;\n+  virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> getAnalogTelemetry() const override;\n+  virtual void setErrorsData(const std::shared_ptr<LE1_NISP_Entities::ByteArray> data) override;\n+  virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> getErrorsData() const override;\n+  virtual void setHistoryData(const std::shared_ptr<LE1_NISP_Entities::ByteArray> data) override;\n+  virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> getHistoryData() const override;\n \n   virtual DetectorId getId() const override;\n-  virtual std::shared_ptr<LE1_NISP::OnBoardTime> getObt() const override;\n+  virtual std::shared_ptr<OnBoardTime> getObt() const override;\n   \n   virtual void setTelemetryConfiguration(const std::shared_ptr<TelemetryConfiguration> tmConfig) override;\n   virtual std::shared_ptr<TelemetryConfiguration> getTelemetryConfiguration() const override;\n@@ -108,13 +108,13 @@ private:\n   DetectorHeader m_header;\n   std::shared_ptr<TelemetryDetectorInterface> m_telemetryDetector;\n   std::shared_ptr<DetectorMetadata> m_metadata;\n-  std::shared_ptr<ByteArray> m_rawLines;\n-  std::shared_ptr<ByteArray> m_engData;\n-  std::shared_ptr<ByteArray> m_scienceData;\n-  std::shared_ptr<ByteArray> m_qualityData;\n-  std::shared_ptr<ByteArray> m_analogTm;\n-  std::shared_ptr<ByteArray> m_errorsData;\n-  std::shared_ptr<ByteArray> m_historyData;\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> m_rawLines;\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> m_engData;\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> m_scienceData;\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> m_qualityData;\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> m_analogTm;\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> m_errorsData;\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> m_historyData;\n   std::shared_ptr<TelemetrySection> m_syncSection;\n   std::shared_ptr<TelemetrySection> m_digitalTmSection;\n   std::shared_ptr<TelemetrySection> m_rawlinesSection;\n@@ -131,7 +131,11 @@ private:\n \n };  // End of DetectorImpl class\n \n-\n+/**\n+ * @class DetectorImplCreator\n+ * @brief Concrete Detector creator overriding the DetectorCreator factory method to create DetectorImpl object\n+ *\n+ */\n class DetectorImplCreator: public DetectorCreator{\n public:\n   DetectorImplCreator();\n@@ -141,7 +145,7 @@ public:\n \n };\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/DetectorIterator.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/DetectorIterator.h\n+ * @file LE1_NISP_Entities/DetectorIterator.h\n  * @date 01/27/21\n  * @author user\n  *\n@@ -21,30 +21,44 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORITERATOR_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORITERATOR_H\n+#ifndef _LE1_NISP_ENTITIES_DETECTORITERATOR_H\n+#define _LE1_NISP_ENTITIES_DETECTORITERATOR_H\n \n-#include \"LE1_NISP_ProcessScience/Detector.h\"\n-namespace LE1_NISP_ProcessScience {\n+#include \"Detector.h\"\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class DetectorIterator\n- * @brief\n+ * @brief Interface to traverse a collection of detectors\n  *\n  */\n class DetectorIterator{\n public:\n+  /**\n+   * @brief Destructor\n+   */\n   virtual ~DetectorIterator() = default;\n \n+  /**\n+   * @brief Check if another detector is available\n+   * @return \\c true if another detector is available, \\c false otherwise\n+   */\n   virtual bool hasNext() const = 0;\n \n+  /**\n+   * @brief Get the next detector\n+   * @return The next Detector object\n+   */\n   virtual std::shared_ptr<Detector> getNext() = 0;\n \n+  /**\n+   * @brief Restart the iteration\n+   */\n   virtual void first() = 0;\n \n };  // End of DetectorIterator class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/DetectorMap.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/DetectorMap.h\n+ * @file LE1_NISP_Entities/DetectorMap.h\n  * @date 01/27/21\n  * @author user\n  *\n@@ -21,40 +21,46 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORMAP_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORMAP_H\n+#ifndef _LE1_NISP_ENTITIES_DETECTORMAP_H\n+#define _LE1_NISP_ENTITIES_DETECTORMAP_H\n \n #include <map>\n-#include \"LE1_NISP_ProcessScience/Exposure.h\"\n+#include \"Exposure.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class DetectorMap\n- * @brief\n+ * @brief Concrete implementation of the Exposure interface.\n+ * Detectors are stored in a map with the DetectorId as a key.\n+ * The addition of multiple detectors with the same ID is not permitted.\n  *\n  */\n class DetectorMap : public Exposure, public std::enable_shared_from_this<DetectorMap>{\n friend class DetectorIdIterator;\n \n public:\n-  DetectorMap(const ExposureId &exposureId);\n+  /**\n+   * @brief Constructor\n+   * @param exposureId The exposure unique identifier\n+   */\n+  explicit DetectorMap(const ExposureId &exposureId);\n \n   /**\n    * @brief Destructor\n    */\n-  virtual ~DetectorMap();\n+  ~DetectorMap() override;\n \n-  virtual std::shared_ptr<DetectorIterator> createDetectorIterator() override;\n+  std::shared_ptr<DetectorIterator> createDetectorIterator() override;\n   \n-  virtual void addDetector(const std::shared_ptr<Detector> detector) override;\n-  virtual std::shared_ptr<Detector> getDetector(const DetectorId &detId) override;  \n+  void addDetector(const std::shared_ptr<Detector> detector) override;\n+  std::shared_ptr<Detector> getDetector(const DetectorId &detId) override;\n \n-  virtual size_t countDetectors() const override;\n+  size_t countDetectors() const override;\n   bool hasDetector(const DetectorId &detId) const override;\n \n-  virtual ExposureId getExposureId() const override;\n-  virtual std::shared_ptr<CommonDetectorMetadata> getCommonDetectorMetadata() const override;\n+  ExposureId getExposureId() const override;\n+  std::shared_ptr<CommonDetectorMetadata> getCommonDetectorMetadata() const override;\n \n private:\n   std::map<DetectorId, std::shared_ptr<Detector>> m_detectorsMap;\n@@ -63,17 +69,27 @@ private:\n };  // End of DetectorMap class\n \n \n-\n+/**\n+ * @class DetectorMapCreator\n+ * @brief Concrete Exposure creator overriding the ExposureCreator factory method to create DetectorMap object\n+ *\n+ */\n class DetectorMapCreator : public ExposureCreator{\n public:\n+  /**\n+   * @brief Constructor\n+   */\n   DetectorMapCreator();\n-  virtual ~DetectorMapCreator();\n+  /**\n+   * @brief Destructor\n+   */\n+  ~DetectorMapCreator() override;\n \n-  virtual std::shared_ptr<Exposure> createExposure(const ExposureId &exposureId) override;\n+  std::shared_ptr<Exposure> createExposure(const ExposureId &exposureId) override;\n };\n \n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/DetectorMetadata.h": [
                        [
                            "@@ -0,0 +1,974 @@\n+/**\n+ * @file LE1_NISP_Entities/DetectorMetadata.h\n+ * @date 06/16/20\n+ * @author user\n+ *\n+ * @copyright (C) 2012-2020 Euclid Science Ground Segment\n+ *\n+ * This library is free software; you can redistribute it and/or modify it under\n+ * the terms of the GNU Lesser General Public License as published by the Free\n+ * Software Foundation; either version 3.0 of the License, or (at your option)\n+ * any later version.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+ * details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this library; if not, write to the Free Software Foundation, Inc.,\n+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+ *\n+ */\n+\n+#ifndef _LE1_NISP_ENTITIES_DETECTORMETADATA_H\n+#define _LE1_NISP_ENTITIES_DETECTORMETADATA_H\n+\n+#include <cstdint>\n+#include <map>\n+\n+#include \"OnBoardTime.h\"\n+#include \"Parameter.h\"\n+#include \"LE1_NISP_Entities/DetectorConfigManager.h\"\n+#include \"ExposureConfiguration.h\"\n+#include \"PlanningId.h\"\n+#include \"DateTimeManager.h\"\n+\n+namespace LE1_NISP_Entities{\n+\n+/**\n+ * @class CommonDetectorMetadata\n+ * @brief Interface for common metadata for detectors of a same exposure\n+ */\n+class CommonDetectorMetadata{\n+public:\n+  /**\n+   * @brief Destructor\n+   */\n+  virtual ~CommonDetectorMetadata() = default;\n+\n+  /**\n+   * @brief Count the common parameters\n+   * @return The number of common parameters\n+   */\n+  [[nodiscard]] virtual unsigned int countCommonParameters() const = 0;\n+  /**\n+   * @brief Check if a parameter is available\n+   * @param paramName The parameter name\n+   * @return \\c true if the parameter is available, \\c false otherwise\n+   */\n+  [[nodiscard]] virtual bool hasCommonParameter(const std::string &paramName) const = 0;\n+  /**\n+   * @brief Add a parameter\n+   * @param param The parameter smart pointer\n+   */\n+  virtual void addCommonParameter(const std::shared_ptr<ParameterInterface> param) = 0;\n+  /**\n+   * @brief Get a parameter\n+   * @param paramName The parameter name\n+   * @return The smart pointer of the parameter\n+   */\n+  [[nodiscard]] virtual std::shared_ptr<const ParameterInterface> getCommonParameter(const std::string &paramName) const = 0;\n+\n+  /**\n+   * @brief Get the product ID\n+   * @return The product ID string\n+   */\n+  [[nodiscard]] virtual std::string getProductId() const = 0;\n+\n+  /**\n+   * @brief Get the acquisition counter parameter\n+   * @return The acquisition counter parameter as an 8-bit unsigned integer\n+   */\n+  [[nodiscard]] virtual uint8_t getAcquisitionCounter() const = 0;\n+  /**\n+   * @brief Get the number of MACC groups\n+   * @return The number of MACC groups as an 8-bit unsigned integer\n+   */\n+  [[nodiscard]] virtual uint8_t getMaccGroups() const = 0;\n+  /**\n+   * @brief Get the number of MACC frames per group\n+   * @return The number of MACC frames per group as an 8-bit unsigned integer\n+   */\n+  [[nodiscard]] virtual uint8_t getMaccFramesPerGroup() const = 0;\n+  /**\n+   * @brief Get the number of MACC dropped frames between two successive group\n+   * @return The number of MACC dropped frames between two successive group as an 8-bit unsigned integer\n+   */\n+  [[nodiscard]] virtual uint8_t getMaccDroppedFrames() const = 0;\n+\n+  /**\n+   * @brief Get the readout mode parameter\n+   * @return The readout mode string parameter\n+   */\n+  [[nodiscard]] virtual std::string getReadoutMode() const = 0;\n+\n+  /**\n+   * @brief Get the frame time parameter\n+   * @return The value of frame time\n+   */\n+  [[nodiscard]] virtual double getFrameTime() const = 0;\n+  /**\n+   * @brief Get the line time parameter\n+   * @return The value of line time\n+   */\n+  [[nodiscard]] virtual double getLineTime() const  = 0;\n+\n+  /**\n+   * @brief Get the planning ID\n+   * @return The PlanningId smart pointer\n+   */\n+  [[nodiscard]] virtual std::shared_ptr<PlanningId> getPlanningId() const = 0;\n+  /**\n+   * @brief Get PID1 parameter\n+   * @return The MSW of planning ID\n+   */\n+  [[nodiscard]] virtual uint16_t getPid1() const = 0;\n+  /**\n+   * @brief Get PID2 parameter\n+   * @return The LSW of planning ID\n+   */\n+  [[nodiscard]] virtual uint16_t getPid2() const = 0;\n+\n+  /**\n+   * @brief Get the exposure configuration\n+   * @return The ExposureConfiguration smart pointer\n+   */\n+  [[nodiscard]] virtual std::shared_ptr<ExposureConfiguration> getExposureConfiguration() const = 0;\n+  /**\n+   * @brief The exposure configuration raw value\n+   * @return The 16-bits raw value of exposure configuration\n+   */\n+  [[nodiscard]] virtual uint16_t getExposureConfigValue() const = 0;\n+\n+  /**\n+   * @brief Get the OBT1 (ACQ Start Gros Seconds) parameter\n+   * @return The 16-bits value of the OBT1\n+   */\n+  [[nodiscard]] virtual uint16_t getObt1() const = 0;\n+  /**\n+   * @brief Get the OBT2 (ACS Start Seconds) parameter\n+   * @return The 16-bits value of the OBT2\n+   */\n+  [[nodiscard]] virtual uint16_t getObt2() const = 0;\n+  /**\n+   * @brief Get the OBT3 (ACQ Start subseconds) parameter\n+   * @return The 16-bits value of the OBT3\n+   */\n+  [[nodiscard]] virtual uint16_t getObt3() const = 0;\n+  /**\n+   * @brief Get the On-Board Time of the observation\n+   * @return The OBT smart pointer\n+   */\n+  [[nodiscard]] virtual std::shared_ptr<OnBoardTime> getObt() const = 0;\n+\n+  /**\n+   * @brief Get the acquisition resets parameter\n+   * @return The acquisition resets parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getAcquisitionResets() const = 0;\n+  /**\n+   * @brief Get the acquisition reads parameter\n+   * @return The acquisition reads parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getAcquisitionReads() const = 0;\n+  /**\n+   * @brief Get the post reset drop lines parameter\n+   * @return The post reset drop lines parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getPostResetDropLines() const = 0;\n+  /**\n+   * @brief Get the acquisition groups parameter\n+   * @return The acquisition groups parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getAcquisitionGroups() const = 0;\n+  /**\n+   * @brief Get the post read drop lines parameter\n+   * @return The post read drop lines parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint32_t getPostReadDropLines() const = 0;\n+\n+  /**\n+   * @brief Get the current resets parameter\n+   * @return The current resets parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getCurrentResets() const = 0;\n+  /**\n+   * @brief Get the current reads parameter\n+   * @return The current reads parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getCurrentReads() const = 0;\n+  /**\n+   * @brief Get the current post reset drop lines parameter\n+   * @return The current post reset drop lines parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getCurrentPostResetDropLines() const = 0;\n+  /**\n+   * @brief Get the current groups parameter\n+   * @return The current groups parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getCurrentGroups() const = 0;\n+  /**\n+   * @brief Get the current post read drop lines parameter\n+   * @return The current post read drop lines parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint32_t getCurrentPostReadDropLines() const = 0;\n+  \n+  /**\n+   * @brief Get the mode status parameter\n+   * @return The mode status parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getModeStatus() const = 0;\n+  /**\n+   * @brief Get the ramp status parameter\n+   * @return The ramp status parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getRampStatus() const = 0;\n+\n+  /**\n+   * @brief Get the readout noise parameter\n+   * @return The readout noise parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getReadoutNoise() const = 0;\n+  /**\n+   * @brief Get the gain factor parameter\n+   * @return The gain factor parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getGainFactor() const = 0;\n+  /**\n+   * @brief Get the chi2 pixel threshold parameter\n+   * @return The chi2 pixel threshold parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getChi2PxThresh() const = 0;\n+  /**\n+   * @brief Get the used rawlines parameter\n+   * @return The used rawlines parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getUsedRawLines() const = 0;\n+\n+  /**\n+   * @brief Get the used compr block size parameter\n+   * @return The used compr block size parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getUsedComprBlockSize() const = 0;\n+  /**\n+   * @brief Get the used compr fund seq par1 parameter\n+   * @return The used compr fund seq par1 parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getUsedComprFundSeqPar1() const = 0;\n+  /**\n+   * @brief Get the used compr fund seq par2 parameter\n+   * @return The used compr fund seq par2 parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getUsedComprFundSeqPar2() const = 0;\n+\n+  /**\n+   * @brief Get the time tag delay parameter\n+   * @return The time tag delay parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getTimeTagDelay() const = 0;\n+\n+  /**\n+   * @brief Get the signal offset parameter\n+   * @return The signal offset parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getSignalOffset() const = 0;\n+  /**\n+   * @brief Get the signal scaling factor parameter\n+   * @return The signal scaling factor parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getSignalScalingFactor() const = 0;\n+\n+  /**\n+   * @brief Get the rawline index 1 parameter\n+   * @return The rawline index 1 parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getRawLineIndex1() const = 0;\n+  /**\n+   * @brief Get the rawline index 2 parameter\n+   * @return The rawline index 2 parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getRawLineIndex2() const = 0;\n+  /**\n+   * @brief Get the rawline index 3 parameter\n+   * @return The rawline index 3 parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getRawLineIndex3() const = 0;\n+  /**\n+   * @brief Get the rawline index 4 parameter\n+   * @return The rawline index 4 parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getRawLineIndex4() const = 0;\n+  /**\n+   * @brief Get the rawline index 5 parameter\n+   * @return The rawline index 5 parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getRawLineIndex5() const = 0;\n+  /**\n+   * @brief Get the history param index parameter\n+   * @return The history param index parameter as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getHistoryParamIndex() const = 0;\n+\n+  /**\n+   * @brief Get the effective integration time\n+   * @return The exposure time\n+   */\n+  [[nodiscard]] virtual double getExposureTime() const = 0;\n+\n+};\n+\n+/**\n+ * @class DetectorMetadata\n+ * @brief The detector metadata interface\n+ */\n+class DetectorMetadata: public CommonDetectorMetadata{\n+public:\n+  /**\n+   * @brief Destructor\n+   */\n+  ~DetectorMetadata() override = default;\n+\n+  /**\n+   * @brief Count the detector metadata parameters\n+   * @return The number of detector metadata parameters\n+   */\n+  [[nodiscard]] virtual unsigned int countParameters() const = 0;\n+  /**\n+   * @brief Check if a parameter is available given the name\n+   * @param paramName The parameter name\n+   * @return \\c true if the parameter is available, \\c false otherwise\n+   */\n+  [[nodiscard]] virtual bool hasParameter(const std::string &paramName) const = 0;\n+  /**\n+   * @brief Add a parameter\n+   * @param param The parameter smart pointer\n+   */\n+  virtual void addParameter(const std::shared_ptr<ParameterInterface> param) = 0;\n+  /**\n+   * @brief Get a parameter\n+   * @param paramName The parameter name\n+   * @return The smart pointer of the parameter\n+   */\n+  [[nodiscard]] virtual std::shared_ptr<const ParameterInterface> getParameter(const std::string &paramName) const = 0;\n+\n+  /**\n+   * @brief Get the master DPU ID parameter\n+   * @return The 8-bit value of master DPU ID parameter\n+   */\n+  [[nodiscard]] virtual uint8_t getMasterDpuId() const = 0;\n+  /**\n+   * @brief Get the DPU ID parameter\n+   * @return The 8-bit value of DPU ID parameter\n+   */\n+  [[nodiscard]] virtual uint8_t getDpuId() const = 0;\n+  /**\n+   * @brief Get the SCE ID parameter\n+   * @return The 8-bit value of SCE ID parameter\n+   */\n+  [[nodiscard]] virtual uint8_t getSceId() const = 0;\n+  /**\n+   * @brief Get the SCE status parameter\n+   * @return The 8-bit value of SCE status parameter\n+   */\n+  [[nodiscard]] virtual uint8_t getSceStatus() const = 0;\n+  /**\n+   * @brief Get the packet type parameter\n+   * @return The 8-bit value of packet type parameter\n+   */\n+  [[nodiscard]] virtual uint8_t getPacketType() const = 0;\n+\n+  /**\n+   * @brief Get the Detector ID\n+   * @return The DetectorId object\n+   */\n+  [[nodiscard]] virtual DetectorId getDetectorId() const = 0;\n+  /**\n+   * @brief Get the SCA ID\n+   * @return The SCA ID string\n+   */\n+  [[nodiscard]] virtual std::string getScaId() const = 0;\n+\n+  /**\n+   * @brief Get the WCS parameters\n+   * @return The detector WCS object\n+   */\n+  [[nodiscard]] virtual Wcs getWcs() const = 0;\n+\n+  /**\n+   * @brief Get the valid command counter parameter\n+   * @return The valid command counter parameter value as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getValidCommandCounter() const = 0;\n+  /**\n+   * @brief Get the rejected command counter parameter\n+   * @return The rejected command counter parameter value as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getRejectedCommandCounter() const = 0;\n+\n+  /**\n+   * @brief Get the frame check err counter parameter\n+   * @return The frame check err counter parameter value as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getFrameCheckErrCounter() const = 0;\n+  /**\n+   * @brief Get the line check err counter parameter\n+   * @return The line check err counter parameter value as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getLineCheckErrCounter() const = 0;\n+  /**\n+   * @brief Get the ImAliveCounter parameter\n+   * @return The ImAliveCounter parameter value as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getImAliveCounter() const = 0;\n+\n+  /**\n+   * @brief Get the IPC vertical start position parameter\n+   * @return The IPC vertical start position parameter value as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getIpcVerStartPos() const = 0;\n+  /**\n+   * @brief Get the IPC vertical space parameter\n+   * @return The IPC vertical space parameter value as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getIpcVerSpace() const = 0;\n+  /**\n+   * @brief Get the IPC horizontal start position parameter\n+   * @return The IPC horizontal start position parameter value as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getIpcHorStartPos() const = 0;\n+  /**\n+   * @brief Get the IPC horizontal space parameter\n+   * @return The IPC horizontal space parameter value as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getIpcHorSpace() const = 0;\n+  /**\n+   * @brief Get the IpcVResetBias parameter\n+   * @return The IpcVResetBias parameter value as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getIpcVResetBias() const = 0;\n+  \n+  /**\n+   * @brief Get the shorted preamp input rows parameter\n+   * @return The shorted preamp input rows parameter value as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getShortedPreampInputRows() const = 0;\n+  /**\n+   * @brief Get the preamp gain parameter\n+   * @return The preamp gain parameter value as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getPreampGain() const = 0;\n+  /**\n+   * @brief Get the digital test pattern parameter\n+   * @return The digital test pattern parameter value as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getDigitalTestPattern() const = 0;\n+  /**\n+   * @brief Get the test pattern frame slope parameter\n+   * @return The test pattern frame slope parameter value as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getTestPatternFrameSlope() const = 0;\n+  /**\n+   * @brief Get the test pattern offset parameter\n+   * @return The test pattern offset parameter value as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getTestPatternOffset() const = 0;\n+\n+  /**\n+   * @brief Get the ExpCyclesFrames parameter\n+   * @return The ExpCyclesFrames parameter value as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getExpCyclesFrames() const = 0;\n+  /**\n+   * @brief Get the compression factor signal parameter\n+   * @return The compression factor signal parameter value as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getComprFactorSignal() const = 0;\n+  /**\n+   * @brief Get the compression factor chi2 parameter\n+   * @return The compression factor chi2 parameter value as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getComprFactorChi2() const = 0;\n+  /**\n+   * @brief Get the processing execution time parameter\n+   * @return The processing execution time parameter value as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getProcessingExecTime() const = 0;\n+\n+  /**\n+   * @brief Get the CRC group mask parameter\n+   * @return The CRC group mask parameter value as a 16-bits unsigned integer\n+   */\n+  [[nodiscard]] virtual uint16_t getCrcGroupMask() const = 0;\n+\n+  /**\n+   * @brief Get the elapsed time of the observation\n+   * @return Return the elapsed time\n+   */\n+  [[nodiscard]] virtual double getElapsedTime() const  = 0;\n+\n+  /**\n+   * @brief Get the science compression ratio\n+   * @return Return the science compression ratio\n+   */\n+  [[nodiscard]] virtual double getScienceCompressionRatio() const = 0;\n+  /**\n+   * @brief Set the science compression ratio\n+   * @param ratio The science compression ratio\n+   */\n+  virtual void setScienceCompressionRatio(double ratio) = 0;\n+\n+  /**\n+   * @brief Get the quality data compression ratio\n+   * @return Return the quality data compression ratio\n+   */\n+  [[nodiscard]] virtual double getQualityDataCompressionRatio() const = 0;\n+  /**\n+   * @brief Set the quality data compression ratio\n+   * @param ratio The quality data compression ratio\n+   */\n+  virtual void setQualityDataCompressionRatio(double ratio) = 0;\n+};\n+\n+class DetectorMetadataNISP: public DetectorMetadata{\n+public:\n+  DetectorMetadataNISP(const std::shared_ptr<DetectorConfigManager> configManager, \n+                       const std::shared_ptr<ExposureConfigurationCreator> expConfigCreator,\n+                       const std::shared_ptr<PlanningIdCreator> planningIdCreator,\n+                       const std::shared_ptr<DateTimeManager> obtCreator);\n+  ~DetectorMetadataNISP() override;\n+\n+  void setDetectorConfigManager(const std::shared_ptr<DetectorConfigManager> detConfigManager);\n+  void setExposureConfigCreator(const std::shared_ptr<ExposureConfigurationCreator> expConfigCreator);\n+  void setPlanningIdCreator(const std::shared_ptr<PlanningIdCreator> planningIdCreator);\n+  void setOnBoardTimeCreator(const std::shared_ptr<DateTimeManager> obtCreator);\n+\n+  [[nodiscard]] unsigned int countParameters() const override;\n+  [[nodiscard]] bool hasParameter(const std::string &paramName) const override;\n+  void addParameter(const std::shared_ptr<ParameterInterface> param) override;\n+  [[nodiscard]] std::shared_ptr<const ParameterInterface> getParameter(const std::string &paramName) const override;\n+\n+  [[nodiscard]] unsigned int countCommonParameters() const override;\n+  [[nodiscard]] bool hasCommonParameter(const std::string &paramName) const override;\n+  void addCommonParameter(const std::shared_ptr<ParameterInterface> param) override;\n+  [[nodiscard]] std::shared_ptr<const ParameterInterface> getCommonParameter(const std::string &paramName) const override;\n+\n+  [[nodiscard]] std::string getProductId() const override;\n+\n+  [[nodiscard]] std::shared_ptr<PlanningId> getPlanningId() const override;\n+\n+  /**\n+   * @brief Get the PID1 parameter\n+   * @return value of the ThePID1 parameter\n+   */\n+  [[nodiscard]] uint16_t getPid1() const override;\n+  /**\n+   * @brief Get the PID2 parameter\n+   * @return value of the ThePID2 parameter\n+   */\n+  [[nodiscard]] uint16_t getPid2() const override;\n+\n+  /**\n+   * @brief Get the DPU_ID parameter\n+   * @return The value of the DPU_ID parameter\n+   */\n+  [[nodiscard]] uint8_t getDpuId() const override;\n+  /**\n+   * @brief Get the MASTER parameter\n+   * @return The value of the MASTER parameter\n+   */\n+  [[nodiscard]] uint8_t getMasterDpuId() const override;\n+  /**\n+   * @brief Get the SCEINDEX parameter\n+   * @return The value of the SCEINDEX parameter\n+   */\n+  [[nodiscard]] uint8_t getSceId() const override;\n+  /**\n+   * @brief Get the SCE_STAT parameter\n+   * @return The value of the SCE_STAT parameter\n+   */\n+  [[nodiscard]] uint8_t getSceStatus() const override;\n+  /**\n+   * @brief Get the PKT_TYPE parameter\n+   * @return The value of the PKT_TYPE parameter\n+   */\n+  [[nodiscard]] uint8_t getPacketType() const override;\n+\n+  [[nodiscard]] DetectorId getDetectorId() const override;\n+  [[nodiscard]] std::string getScaId() const override;\n+\n+  [[nodiscard]] Wcs getWcs() const override;\n+\n+  /**\n+   * @brief Get the OBT1 parameter\n+   * @return value of the TheOBT1 parameter\n+   */\n+  [[nodiscard]] uint16_t getObt1() const override;\n+  /**\n+   * @brief Get the OBT2 parameter\n+   * @return value of the TheOBT2 parameter\n+   */\n+  [[nodiscard]] uint16_t getObt2() const override;\n+  /**\n+   * @brief Get the OBT3 parameter\n+   * @return value of the TheOBT3 parameter\n+   */\n+  [[nodiscard]] uint16_t getObt3() const override;\n+\n+  [[nodiscard]] std::shared_ptr<ExposureConfiguration> getExposureConfiguration() const override;\n+  /**\n+   * @brief Get the EXP_CNF parameter\n+   * @return The value of the EXP_CNF parameter\n+   */\n+  [[nodiscard]] uint16_t getExposureConfigValue() const override;\n+\n+  /**\n+   * @brief Get the VCMD_CNT parameter\n+   * @return The value of the VCMD_CNT parameter\n+   */\n+  [[nodiscard]] uint16_t getValidCommandCounter() const override;\n+  /**\n+   * @brief Get the RCMD_CNT parameter\n+   * @return The value of the RCMD_CNT parameter\n+   */\n+  [[nodiscard]] uint16_t getRejectedCommandCounter() const override;\n+\n+  /**\n+   * @brief Get the FCHK_ERR parameter\n+   * @return The value of the FCHK_ERR parameter\n+   */\n+  [[nodiscard]] uint16_t getFrameCheckErrCounter() const override;\n+  /**\n+   * @brief Get the LCHK_ERR parameter\n+   * @return The value of the LCHK_ERR parameter\n+   */\n+  [[nodiscard]] uint16_t getLineCheckErrCounter() const override;\n+  /**\n+   * @brief Get the ALIVECNT parameter\n+   * @return The value of the ALIVECNT parameter\n+   */\n+  [[nodiscard]] uint16_t getImAliveCounter() const override;\n+\n+  /**\n+   * @brief Get the ACQ_CNT parameter\n+   * @return The value of the ACQ_CNT parameter\n+   */\n+  [[nodiscard]] uint8_t getAcquisitionCounter() const override;\n+\n+  /**\n+   * @brief Get the NG parameter\n+   * @return value of the TNG parameterhe\n+   */\n+  [[nodiscard]] uint8_t getMaccGroups() const override;\n+  /**\n+   * @brief Get the NR parameter\n+   * @return value of the TNR parameterhe\n+   */\n+  [[nodiscard]] uint8_t getMaccFramesPerGroup() const override;\n+  [[nodiscard]] uint8_t getMaccDroppedFrames() const override;\n+\n+  [[nodiscard]] std::string getReadoutMode() const override;\n+\n+  /**\n+   * @brief Get the T_RESETS parameter\n+   * @return The value of the T_RESETS parameter\n+   */\n+  [[nodiscard]] uint16_t getAcquisitionResets() const override;\n+  /**\n+   * @brief Get the T_READS parameter\n+   * @return The value of the T_READS parameter\n+   */\n+  [[nodiscard]] uint16_t getAcquisitionReads() const override;\n+  /**\n+   * @brief Get the T_DROPL1 parameter\n+   * @return The value of the T_DROPL1 parameter\n+   */\n+  [[nodiscard]] uint16_t getPostResetDropLines() const override;\n+  /**\n+   * @brief Get the T_DROPL2B parameter\n+   * @return The value of the T_DROPL2B parameter\n+   */\n+  [[nodiscard]] uint16_t getAcquisitionGroups() const override;\n+  /**\n+   * @brief Get the the post read drop lines parameter\n+   * @return The the post read drop lines parameter as ((T_DROPL2B << 16) + T_DROPL2A)\n+   */\n+  [[nodiscard]] uint32_t getPostReadDropLines() const override;\n+\n+  /**\n+   * @brief Get the T_DROPL2A parameter\n+   * @return The value of the T_DROPL2A parameter\n+   */\n+  [[nodiscard]] uint16_t getCurrentResets() const override;\n+  /**\n+   * @brief Get the T_GROUPS parameter\n+   * @return The value of the T_GROUPS parameter\n+   */\n+  [[nodiscard]] uint16_t getCurrentReads() const override;\n+  /**\n+   * @brief Get the RESETS parameter\n+   * @return The value of the RESETS parameter\n+   */\n+  [[nodiscard]] uint16_t getCurrentPostResetDropLines() const override;\n+  /**\n+   * @brief Get the READS parameter\n+   * @return The value of the READS parameter\n+   */\n+  [[nodiscard]] uint16_t getCurrentGroups() const override;\n+  /**\n+   * @brief Get the current post read drop lines parameter\n+   * @return The current post read drop lines parameter as ((DROPL2B << 16) + DROPL2A)\n+   */\n+  [[nodiscard]] uint32_t getCurrentPostReadDropLines() const override;\n+\n+  /**\n+   * @brief Get the DROPL1 parameter\n+   * @return The value of the DROPL1 parameter\n+   */\n+  [[nodiscard]] uint16_t getModeStatus() const override;\n+  /**\n+   * @brief Get the GROUPS parameter\n+   * @return The value of the GROUPS parameter\n+   */\n+  [[nodiscard]] uint16_t getRampStatus() const override;\n+\n+  /**\n+   * @brief Get the DROPL2B parameter\n+   * @return The value of the DROPL2B parameter\n+   */\n+  [[nodiscard]] uint16_t getIpcVerStartPos() const override;\n+  /**\n+   * @brief Get the DROPL2A parameter\n+   * @return The value of the DROPL2A parameter\n+   */\n+  [[nodiscard]] uint16_t getIpcVerSpace() const override;\n+  /**\n+   * @brief Get the MODESTAT parameter\n+   * @return The value of the MODESTAT parameter\n+   */\n+  [[nodiscard]] uint16_t getIpcHorStartPos() const override;\n+  /**\n+   * @brief Get the RAMPSTAT parameter\n+   * @return The value of the RAMPSTAT parameter\n+   */\n+  [[nodiscard]] uint16_t getIpcHorSpace() const override;\n+  /**\n+   * @brief Get the IPCVSPOS parameter\n+   * @return The value of the IPCVSPOS parameter\n+   */\n+  [[nodiscard]] uint16_t getIpcVResetBias() const override;\n+\n+  /**\n+   * @brief Get the IPCVSPAC parameter\n+   * @return The value of the IPCVSPAC parameter\n+   */\n+  [[nodiscard]] uint16_t getShortedPreampInputRows() const override;\n+  /**\n+   * @brief Get the IPCHSPOS parameter\n+   * @return The value of the IPCHSPOS parameter\n+   */\n+  [[nodiscard]] uint16_t getPreampGain() const override;\n+\n+  /**\n+   * @brief Get the IPCHSPAC parameter\n+   * @return The value of the IPCHSPAC parameter\n+   */\n+  [[nodiscard]] uint16_t getDigitalTestPattern() const override;\n+  /**\n+   * @brief Get the IPCVRBIA parameter\n+   * @return The value of the IPCVRBIA parameter\n+   */\n+  [[nodiscard]] uint16_t getTestPatternFrameSlope() const override;\n+  /**\n+   * @brief Get the SHORTPIR parameter\n+   * @return The value of the SHORTPIR parameter\n+   */\n+  [[nodiscard]] uint16_t getTestPatternOffset() const override;\n+\n+  /**\n+   * @brief Get the PREAGAIN parameter\n+   * @return The value of the PREAGAIN parameter\n+   */\n+  [[nodiscard]] uint16_t getReadoutNoise() const override;\n+  /**\n+   * @brief Get the P_TYPE parameter\n+   * @return The value of the P_TYPE parameter\n+   */\n+  [[nodiscard]] uint16_t getGainFactor() const override;\n+  /**\n+   * @brief Get the P_SLOPE parameter\n+   * @return The value of the P_SLOPE parameter\n+   */\n+  [[nodiscard]] uint16_t getChi2PxThresh() const override;\n+  /**\n+   * @brief Get the P_OFFSET parameter\n+   * @return The value of the P_OFFSET parameter\n+   */\n+  [[nodiscard]] uint16_t getUsedRawLines() const override;\n+  /**\n+   * @brief Get the RON_DET parameter\n+   * @return The value of the RON_DET parameter\n+   */\n+  [[nodiscard]] uint16_t getUsedComprBlockSize() const override;\n+  /**\n+   * @brief Get the GAIN_DET parameter\n+   * @return The value of the GAIN_DET parameter\n+   */\n+  [[nodiscard]] uint16_t getUsedComprFundSeqPar1() const override;\n+  /**\n+   * @brief Get the CHI2THRE parameter\n+   * @return The value of the CHI2THRE parameter\n+   */\n+  [[nodiscard]] uint16_t getUsedComprFundSeqPar2() const override;\n+  /**\n+   * @brief Get the N_RAWLIN parameter\n+   * @return The value of the N_RAWLIN parameter\n+   */\n+  [[nodiscard]] uint16_t getTimeTagDelay() const override;\n+  /**\n+   * @brief Get the CMP_BLKS parameter\n+   * @return The value of the CMP_BLKS parameter\n+   */\n+  [[nodiscard]] uint16_t getExpCyclesFrames() const override;\n+\n+  /**\n+   * @brief Get the CMPFSBIT parameter\n+   * @return The value of the CMPFSBIT parameter\n+   */\n+  [[nodiscard]] uint16_t getComprFactorSignal() const override;\n+  /**\n+   * @brief Get the CMPFSMAX parameter\n+   * @return The value of the CMPFSMAX parameter\n+   */\n+  [[nodiscard]] uint16_t getComprFactorChi2() const override;\n+\n+  /**\n+   * @brief Get the TMTAGDEL parameter\n+   * @return The value of the TMTAGDEL parameter\n+   */\n+  [[nodiscard]] uint16_t getProcessingExecTime() const override;\n+  /**\n+   * @brief Get the DTEXPNUM parameter\n+   * @return The value of the DTEXPNUM parameter\n+   */\n+  [[nodiscard]] uint16_t getSignalOffset() const override;\n+  /**\n+   * @brief Get the S_COMPR parameter\n+   * @return The value of the S_COMPR parameter\n+   */\n+  [[nodiscard]] uint16_t getSignalScalingFactor() const override;\n+  /**\n+   * @brief Get the C_COMPR parameter\n+   * @return The value of the C_COMPR parameter\n+   */\n+  [[nodiscard]] uint16_t getCrcGroupMask() const override;\n+\n+  /**\n+   * @brief Get the PROC_T parameter\n+   * @return The value of the PROC_T parameter\n+   */\n+  [[nodiscard]] uint16_t getRawLineIndex1() const override;\n+  /**\n+   * @brief Get the S_OFFSET parameter\n+   * @return The value of the S_OFFSET parameter\n+   */\n+  [[nodiscard]] uint16_t getRawLineIndex2() const override;\n+  /**\n+   * @brief Get the S_FACTOR parameter\n+   * @return The value of the S_FACTOR parameter\n+   */\n+  [[nodiscard]] uint16_t getRawLineIndex3() const override;\n+  /**\n+   * @brief Get the CRCGMASK parameter\n+   * @return The value of the CRCGMASK parameter\n+   */\n+  [[nodiscard]] uint16_t getRawLineIndex4() const override;\n+  /**\n+   * @brief Get the RAWLINE1 parameter\n+   * @return The value of the RAWLINE1 parameter\n+   */\n+  [[nodiscard]] uint16_t getRawLineIndex5() const override;\n+  /**\n+   * @brief Get the RAWLINE2 parameter\n+   * @return The value of the RAWLINE2 parameter\n+   */\n+  [[nodiscard]] uint16_t getHistoryParamIndex() const override;\n+\n+  [[nodiscard]] std::shared_ptr<OnBoardTime> getObt() const override;\n+\n+  [[nodiscard]] double getFrameTime() const override;\n+  [[nodiscard]] double getLineTime() const override;\n+\n+  [[nodiscard]] double getExposureTime() const override;\n+  [[nodiscard]] double getElapsedTime() const override;\n+\n+  [[nodiscard]] double getScienceCompressionRatio() const override;\n+  void setScienceCompressionRatio(double ratio) override;\n+\n+  [[nodiscard]] double getQualityDataCompressionRatio() const override;\n+  void setQualityDataCompressionRatio(double ratio) override;\n+\n+private:\n+  std::map<std::string, std::shared_ptr<ParameterInterface>> params;\n+  std::map<std::string, std::shared_ptr<ParameterInterface>> m_commonParams;\n+  std::shared_ptr<DetectorConfigManager> m_detConfigManager;\n+  std::shared_ptr<ExposureConfigurationCreator> m_expConfigCreator;\n+  std::shared_ptr<PlanningIdCreator> m_planningIdCreator;\n+  std::shared_ptr<DateTimeManager> m_obtCreator;\n+  double m_scienceComprRatio;\n+  double m_qualityDataComprRatio;\n+\n+};\n+\n+/**\n+ * @class DetectorMetadataCreator\n+ * @brief Interface declaring the factory method to create a DetectorMetadata object\n+ */\n+class DetectorMetadataCreator{\n+public:\n+  virtual ~DetectorMetadataCreator() = default;\n+\n+  /**\n+   * @brief Create a DetectorMetadata object\n+   * @return A smart pointer to a DetectorMetadata object\n+   */\n+  virtual std::shared_ptr<DetectorMetadata> createDetectorMetadata() = 0;\n+};\n+\n+/**\n+ * @class DetectorMetadataCreatorNISP\n+ * @brief Concrete DetectorMetadata creator overriding the DetectorMetadataCreator factory method to create DetectorMetadataNISP object\n+ *\n+ */\n+class DetectorMetadataCreatorNISP: public DetectorMetadataCreator{\n+public:\n+  /**\n+   * @brief Construct a DetectorMetadataCreatorNISP object\n+   * @param configManager The DetectorConfigManager smart pointer\n+   * @param expConfigCreator The ExposureConfigurationCreator smart pointer\n+   * @param planningIdCreator The PlanningIdCreator smart pointer\n+   */\n+  DetectorMetadataCreatorNISP(const std::shared_ptr<DetectorConfigManager> configManager, \n+                              const std::shared_ptr<ExposureConfigurationCreator> expConfigCreator,\n+                              const std::shared_ptr<PlanningIdCreator> planningIdCreator,\n+                              const std::shared_ptr<DateTimeManager> obtCreator);\n+  ~DetectorMetadataCreatorNISP() override = default;\n+\n+  /**\n+   * @brief Create and init the DetectorMetadata object\n+   * @return A smart pointer to a DetectorMetadata object\n+   */\n+  std::shared_ptr<DetectorMetadata> createDetectorMetadata() override;\n+\n+private:\n+  std::shared_ptr<DetectorConfigManager> m_detConfigManager; \n+  std::shared_ptr<ExposureConfigurationCreator> m_expConfigCreator;\n+  std::shared_ptr<PlanningIdCreator> m_planningIdCreator;\n+  std::shared_ptr<DateTimeManager> m_obtCreator;\n+\n+};\n+\n+\n+}\n+\n+#endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/Exception.h": [
                        [
                            "@@ -0,0 +1,208 @@\n+/**\n+ * @file LE1_NISP_Entities/Exception.h\n+ * @date 10/15/20\n+ * @author user\n+ *\n+ * @copyright (C) 2012-2020 Euclid Science Ground Segment\n+ *\n+ * This library is free software; you can redistribute it and/or modify it under\n+ * the terms of the GNU Lesser General Public License as published by the Free\n+ * Software Foundation; either version 3.0 of the License, or (at your option)\n+ * any later version.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+ * details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this library; if not, write to the Free Software Foundation, Inc.,\n+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+ *\n+ */\n+\n+#ifndef _LE1_NISP_ENTITIES_EXCEPTION_H\n+#define _LE1_NISP_ENTITIES_EXCEPTION_H\n+\n+#include \"ElementsKernel/Exception.h\"\n+\n+namespace LE1_NISP_Entities {\n+\n+/**\n+ * @class Exception\n+ * @brief\n+ *\n+ */\n+class Exception : public Elements::Exception{\n+\n+public:\n+\n+  Exception(const std::string &errMsg = \"\");\n+  virtual ~Exception() override;  \n+\n+};\n+\n+class IndexOutOfBoundException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class IncompatibleArraySizeException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class NullObtCreatorException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class NullPlanningIdCreatorException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class ParameterNotFoundException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class ParameterWithTheSameNameException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class UnknownDetectorConfiguration: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class NullConfigManagerException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class NullParameterDescriptionException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class UnableToRepresentParamValueAsUInt8Exception: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class UnableToRepresentParamValueAsUInt16Exception: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class UnableToRepresentParamValueAsUInt32Exception: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class UnableToRepresentParamValueAsStringException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class UnableToRepresentParamValueAsDoubleException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class OffsetExceedingEndOfFileException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class FileNotFoundException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class TelemetryFileReadingException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class NoFileHasBeenOpenedException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class NullByteArrayCreatorException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class NullTelemetryFilePointerException: public Exception{\n+public:\n+  using Exception::Exception;\n+};\n+\n+class StartPositionHigherThanEndPositionException: public Exception{\n+public:\n+  using Exception::Exception;\n+};\n+\n+class BytesToBeReadExceedTelemetryDetectorEndPositionException: public Exception{\n+public:\n+  using Exception::Exception;\n+};\n+\n+class MultipleDetectorWithSameIdsException: public Exception{\n+public:\n+  using Exception::Exception;\n+};\n+\n+class NullTelemetryConfigurationException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class ConfigurationAlreadyExistsException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class NullExposureConfigManagerException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class NullExposureConfigCreatorException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class NoDetectorAvailableException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class InvalidOffbitValueException: public Exception{\n+  using Exception::Exception;\n+};\n+\n+class UnknownKeysConfigException: public Exception {\n+  using Exception::Exception;\n+};\n+\n+class UnknownInstConfigException: public Exception {\n+  using Exception::Exception;\n+};\n+\n+class UnknownGwaPosConfigException: public Exception {\n+  using Exception::Exception;\n+};\n+\n+class UnknownFwaPosConfigException: public Exception {\n+  using Exception::Exception;\n+};\n+\n+class UnknownProductCategoryException: public Exception {\n+  using Exception::Exception;\n+};\n+\n+class UnknownProductFirstTypeException: public Exception {\n+  using Exception::Exception;\n+};\n+\n+class UnknownProductSecondTypeException: public Exception {\n+  using Exception::Exception;\n+};\n+\n+class UnknownObservationModeException: public Exception {\n+  using Exception::Exception;\n+};\n+\n+class UnknownProductTechniqueException: public Exception {\n+  using Exception::Exception;\n+};\n+\n+class UnknownGwaTiltConfigException: public Exception {\n+  using Exception::Exception;\n+};\n+\n+}  // namespace LE1_NISP_Entities\n+\n+\n+#endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/Exposure.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/Exposure.h\n+ * @file LE1_NISP_Entities/Exposure.h\n  * @date 01/27/21\n  * @author user\n  *\n@@ -21,44 +21,77 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_EXPOSURE_H\n-#define _LE1_NISP_PROCESSSCIENCE_EXPOSURE_H\n+#ifndef _LE1_NISP_ENTITIES_EXPOSURE_H\n+#define _LE1_NISP_ENTITIES_EXPOSURE_H\n \n-#include \"LE1_NISP_ProcessScience/DetectorCollection.h\"\n+#include \"DetectorCollection.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n+/**\n+ * @class ExposureId\n+ * @brief Unique identifier of an exposure\n+ */\n class ExposureId{\n public:\n   uint32_t exposureId;\n \n-  bool operator<(const ExposureId &other) const{\n-    return exposureId < other.exposureId;\n+  /**\n+   * @brief Less than operator overloading\n+   * @param rhs Another ExposureId object\n+   * @return \\c true if \\a lhs is less than \\a rhs object, \\c false otherwise\n+   */\n+  bool operator<(const ExposureId &rhs) const{\n+    return exposureId < rhs.exposureId;\n   }\n };\n \n /**\n  * @class Exposure\n- * @brief\n+ * @brief Interface extending DetectorCollection to be able to retrieve the exposure unique ID and the common detector metadata.\n  *\n  */\n class Exposure: public DetectorCollection{\n public:\n+  /**\n+   * @brief Destructor\n+   */\n   virtual ~Exposure() = default;\n \n+  /**\n+   * @brief Get the exposure unique identifier\n+   * @return The exposure ID\n+   */\n   virtual ExposureId getExposureId() const = 0;\n+  /**\n+   * @brief Get the detector common metadata\n+   * @return The detector common metadata smart pointer\n+   */\n   virtual std::shared_ptr<CommonDetectorMetadata> getCommonDetectorMetadata() const = 0;\n \n }; // End of Exposure class\n \n+/**\n+ * @class ExposureCreator\n+ * @brief Interface to create an Exposure object\n+ *\n+ */\n class ExposureCreator{\n   public:\n-  virtual ~ExposureCreator() =default;\n+  /**\n+   * @brief Destructor\n+   */\n+  virtual ~ExposureCreator() = default;\n \n+  /**\n+   * @brief Create an Exposure\n+   * @param exposureId The exposure unique identifier\n+   * @return The newly created exposure smart pointer\n+   */\n   virtual std::shared_ptr<Exposure> createExposure(const ExposureId &exposureId) = 0;\n };\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/ExposureConfigManager.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/ExposureConfigManager.h\n+ * @file LE1_NISP_Entities/ExposureConfigManager.h\n  * @date 02/25/21\n  * @author user\n  *\n@@ -21,53 +21,181 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_EXPOSURECONFIGMANAGER_H\n-#define _LE1_NISP_PROCESSSCIENCE_EXPOSURECONFIGMANAGER_H\n+#ifndef _LE1_NISP_ENTITIES_EXPOSURECONFIGMANAGER_H\n+#define _LE1_NISP_ENTITIES_EXPOSURECONFIGMANAGER_H\n \n #include <vector>\n-#include \"LE1_NISP_ProcessScience/Exception.h\"\n+#include \"LE1_NISP_Entities/Exception.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class ExposureConfigManager\n- * @brief\n+ * @brief Manage parameters related to exposure configurations, both keyword and instrument config\n  *\n  */\n class ExposureConfigManager{\n public:\n+  /**\n+   * @brief Default constructor\n+   */\n   ExposureConfigManager();\n+  /**\n+   * @brief Destructor\n+   */\n   virtual ~ExposureConfigManager();\n \n+  /**\n+   * @brief Equal to operator overloading\n+   * @param other Another ExposureConfigManager object\n+   * @return \\c true if the two objects are equal, \\c false otherwise\n+   */\n   bool operator==(const ExposureConfigManager &other) const;\n+  /**\n+   * @brief Not equal to operator overloading\n+   * @param other Another ExposureConfigManager object\n+   * @return \\c true if the two objects are not equal, \\c false otherwise\n+   */\n   bool operator!=(const ExposureConfigManager &other) const;\n \n+  /**\n+   * @brief Extraction operator overloading\n+   * @param os The output stream\n+   * @param expConfigManager The ExposureConfigManager object\n+   * @return The reference to the output stream\n+   */\n   friend std::ostream& operator<<(std::ostream &os, const ExposureConfigManager &expConfigManager);\n \n+  /**\n+   * @brief The keyword configuration caption getter\n+   * @param keysConfig The keyword configuration value\n+   * @return The caption of the keyword configuration\n+   */\n   virtual std::string getKeysConfigCaption(unsigned short keysConfig) const;\n+  /**\n+   * @brief The instrument configuration caption getter\n+   * @param instConfig The instrument configuration value\n+   * @return The caption of the instrument configuration\n+   */\n   virtual std::string getInstConfigCaption(unsigned short instConfig) const;\n+  /**\n+   * @brief The GWA position caption getter\n+   * @param keysConfig The keyword configuration value\n+   * @return The caption of the GWA position\n+   */\n   virtual std::string getGwaPos(unsigned short keysConfig) const;\n+  /**\n+   * @brief The FWA position caption getter\n+   * @param keysConfig The keyword configuration value\n+   * @return The caption of the FWA position\n+   */\n   virtual std::string getFwaPos(unsigned short keysConfig) const;\n+  /**\n+   * @brief The GWA reference position getter\n+   * @return The GWA reference position\n+   */\n   virtual std::string getGwaRefPos() const;\n+  /**\n+   * @brief The FWA reference position getter\n+   * @return The FWA reference position\n+   */\n   virtual std::string getFwaRefPos() const;\n+  /**\n+   * @brief The GWA tilt getter\n+   * @param keysConfig The keyword configuration value\n+   * @return The value of the GWA tilt\n+   */\n   virtual int getGwaTilt(unsigned short keysConfig) const;\n+  /**\n+   * @brief The product category caption getter\n+   * @param instConfig The instrument configuration value\n+   * @return The caption of the product technique\n+   */\n   virtual std::string getProductCategory(unsigned short instConfig) const;\n+  /**\n+   * @brief The product first type caption getter\n+   * @param instConfig The instrument configuration value\n+   * @return The caption of the product first type\n+   */\n   virtual std::string getProductFirstType(unsigned short instConfig) const;\n+  /**\n+   * @brief The product second type caption getter\n+   * @param instConfig The instrument configuration value\n+   * @return The caption of the product second type\n+   */\n   virtual std::string getProductSecondType(unsigned short instConfig) const;\n+  /**\n+   * @brief The observation mode caption getter\n+   * @param instConfig The instrument configuration value\n+   * @return The caption of the observation mode\n+   */\n   virtual std::string getObservationMode(unsigned short instConfig) const;\n+  /**\n+   * @brief The product technique caption getter\n+   * @param keysConfig The keyword configuration value\n+   * @return The caption of the product technique\n+   */\n   virtual std::string getProductTechnique(unsigned short keysConfig) const;\n \n+  /**\n+   * @brief Set the keyword configuration captions\n+   * @param keysConfigCaptions The vector of keyword configuration captions\n+   */\n   void setKeysConfigCaptions(const std::vector<std::string> &keysConfigCaptions);\n+  /**\n+   * @brief Set the instrument configuration captions\n+   * @param instConfigCaptions The vector of instrument configuration captions\n+   */\n   void setInstConfigCaptions(const std::vector<std::string> &instConfigCaptions);\n+  /**\n+   * @brief Set the GWA position captions\n+   * @param gwaPositions The vector of GWA position captions\n+   */\n   void setGwaPositions(const std::vector<std::string> &gwaPositions);\n+  /**\n+   * @brief Set the FWA position captions\n+   * @param fwaPositions The vector of FWA position captions\n+   */\n   void setFwaPositions(const std::vector<std::string> &fwaPositions);\n+  /**\n+   * @brief Set the tilt values\n+   * @param tilts The vector of tilt values\n+   */\n   void setGwaTilts(const std::vector<int> &tilts);\n+  /**\n+   * @brief Set the product category captions\n+   * @param productCategories The vector of product category captions\n+   */\n   void setProductCategories(const std::vector<std::string> &productCategories);\n+  /**\n+   * @brief Set the product first type captions\n+   * @param productFirstTypes The vector of product first type captions\n+   */\n   void setProductFirstTypes(const std::vector<std::string> &productFirstTypes);\n+  /**\n+   * @brief Set the product second type captions\n+   * @param productSecondTypes The vector of product second type captions\n+   */\n   void setProductSecondTypes(const std::vector<std::string> &productSecondTypes);\n+  /**\n+   * @brief Set the observation mode captions\n+   * @param obsModes The vector of observation mode captions\n+   */\n   void setObservationModes(const std::vector<std::string> &obsModes);\n+  /**\n+   * @brief Set the product technique captions\n+   * @param productTechniques The vector of product technique captions\n+   */\n   void setProductTechniques(const std::vector<std::string> &productTechniques);\n+  /**\n+   * @brief Set the GWA reference position\n+   * @param refPos The GWA reference position\n+   */\n   void setGwaRefPosition(const std::string &refPos);\n+  /**\n+   * @brief Set the FWA reference position\n+   * @param refPos The FWA reference position\n+   */\n   void setFwaRefPosition(const std::string &refPos);\n \n private:\n@@ -86,7 +214,7 @@ private:\n \n };  // End of ExposureConfigManager class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/ExposureConfiguration.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/ExposureConfiguration.h\n+ * @file LE1_NISP_Entities/ExposureConfiguration.h\n  * @date 02/08/21\n  * @author user\n  *\n@@ -21,71 +21,209 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_EXPCONFIGURATION_H\n-#define _LE1_NISP_PROCESSSCIENCE_EXPCONFIGURATION_H\n+#ifndef _LE1_NISP_ENTITIES_EXPCONFIGURATION_H\n+#define _LE1_NISP_ENTITIES_EXPCONFIGURATION_H\n \n #include <string>\n #include <cstdint>\n #include <memory>\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class ExposureConfiguration\n- * @brief\n+ * @brief Interface representing an exposure configuration\n  *\n  */\n class ExposureConfiguration{\n public:\n+  /**\n+   * @brief Destructor\n+   */\n   virtual ~ExposureConfiguration() = default;\n \n+  /**\n+   * @brief Get the instrument configuration value\n+   * @return The instrument configuration value as an unsigned integer\n+   */\n   virtual unsigned short getInstConfigValue() const = 0;\n+  /**\n+   * @brief Get the keyword configuration value\n+   * @return The keyword configuration value as an unsigned integer\n+   */\n   virtual unsigned short getKeysConfigValue() const = 0;\n \n+  /**\n+   * @brief Get the exposure configuration raw value\n+   * @return The exposure configuration value as a 16-bit unsigned integer\n+   */\n   virtual uint16_t getRawValue() const = 0;\n \n+  /**\n+   * @brief Get the keyword configuration caption\n+   * @return The caption of the keyword configuration\n+   */\n   virtual std::string getKeysConfigCaption() const = 0;\n+  /**\n+   * @brief Get the instrument configuration caption\n+   * @return The caption of the instrument configuration\n+   */\n   virtual std::string getInstConfigCaption() const = 0;\n+  /**\n+   * @brief Get the GWA position\n+   * @return The the GWA position\n+   */\n   virtual std::string getGwaPos() const = 0;\n+  /**\n+   * @brief Get the GWA reference position\n+   * @return The the GWA reference position\n+   */\n   virtual std::string getGwaRefPos() const = 0;\n+  /**\n+   * @brief Get the FWA position\n+   * @return The the FWA position\n+   */\n   virtual std::string getFwaPos() const = 0;\n+  /**\n+   * @brief Get the FWA reference position\n+   * @return The the FWA reference position\n+   */\n   virtual std::string getFwaRefPos() const = 0;\n+  /**\n+   * @brief Get the product category caption\n+   * @return The caption of the product category\n+   */\n   virtual std::string getProductCategory() const = 0;\n+  /**\n+   * @brief Get the product first type caption\n+   * @return The caption of the product first type\n+   */\n   virtual std::string getProductFirstType() const = 0;\n+  /**\n+   * @brief Get the product second type caption\n+   * @return The caption of the product second type\n+   */\n   virtual std::string getProductSecondType() const = 0;\n+  /**\n+   * @brief Get the observation mode caption\n+   * @return The caption of the observation mode\n+   */\n   virtual std::string getObservationMode() const = 0;\n+  /**\n+   * @brief Get the product technique caption\n+   * @return The caption of the technique category\n+   */\n   virtual std::string getProductTechnique() const = 0;\n+  /**\n+   * @brief Get the GWA tilt value\n+   * @return The value of GWA tilt as an integer\n+   */\n   virtual int getGwaTilt() const = 0;\n-  \n+\n+  /**\n+   * @brief Check if exposure is configured for Science acquisition\n+   * @return \\c true if exposure is configured for Science acquisition, \\c false otherwise\n+   */\n   virtual bool isScience() const = 0;\n+  /**\n+   * @brief Check if exposure is configured for EngineeringRaw acquisition\n+   * @return \\c true if exposure is configured for EngineeringRaw acquisition, \\c false otherwise\n+   */\n   virtual bool isEngineeringRaw() const = 0;\n+  /**\n+   * @brief Check if exposure is configured for EngineeringDebug acquisition\n+   * @return \\c true if exposure is configured for EngineeringDebug acquisition, \\c false otherwise\n+   */\n   virtual bool isEngineeringDebug() const = 0;\n+  /**\n+   * @brief Check if exposure is configured for CompressionVerification acquisition\n+   * @return \\c true if exposure is configured for CompressionVerification acquisition, \\c false otherwise\n+   */\n   virtual bool isCompressionVerification() const = 0;\n+  /**\n+   * @brief Check if exposure is configured for NumericalSimSCEPixel acquisition\n+   * @return \\c true if exposure is configured for NumericalSimSCEPixel acquisition, \\c false otherwise\n+   */\n   virtual bool isNumericalSimSCEPixel() const = 0;\n+  /**\n+   * @brief Check if exposure is configured for NumericalSimSCEFrame acquisition\n+   * @return \\c true if exposure is configured for NumericalSimSCEFrame acquisition, \\c false otherwise\n+   */\n   virtual bool isNumericalSimSCEFrame() const = 0;\n+  /**\n+   * @brief Check if exposure is configured for CalibNonLinearity acquisition\n+   * @return \\c true if exposure is configured for CalibNonLinearity acquisition, \\c false otherwise\n+   */\n   virtual bool isCalibNonLinearity() const = 0;\n+  /**\n+   * @brief Check if exposure is configured for CalibIPC acquisition\n+   * @return \\c true if exposure is configured for CalibIPC acquisition, \\c false otherwise\n+   */\n   virtual bool isCalibIPC() const = 0;\n+  /**\n+   * @brief Check if exposure is configured for CalibKTCBias acquisition\n+   * @return \\c true if exposure is configured for CalibKTCBias acquisition, \\c false otherwise\n+   */\n   virtual bool isCalibKTCBias() const = 0;\n+  /**\n+   * @brief Check if exposure is configured for SpectroEngDark acquisition\n+   * @return \\c true if exposure is configured for SpectroEngDark acquisition, \\c false otherwise\n+   */\n   virtual bool isSpectroEngDark() const = 0;\n+  /**\n+   * @brief Check if exposure is configured for PhotoEngDark acquisition\n+   * @return \\c true if exposure is configured for PhotoEngDark acquisition, \\c false otherwise\n+   */\n   virtual bool isPhotoEngDark() const = 0;\n+  /**\n+   * @brief Check if exposure is configured for DcuSimulator acquisition\n+   * @return \\c true if exposure is configured for DcuSimulator acquisition, \\c false otherwise\n+   */\n   virtual bool isDcuSimulator() const = 0;\n \n+  /**\n+   * @brief Check if exposure is configured for a spectro acquisition\n+   * @return \\c true if exposure is configured for a spectro acquisition, \\c false otherwise\n+   */\n   virtual bool isSpectro() const = 0;\n+  /**\n+   * @brief Check if exposure is configured for a photo acquisition\n+   * @return \\c true if exposure is configured for a photo acquisition, \\c false otherwise\n+   */\n   virtual bool isPhoto() const = 0;\n+  /**\n+   * @brief Check if exposure is configured for a calibration\n+   * @return \\c true if exposure is configured for a calibration, \\c false otherwise\n+   */\n   virtual bool isCalib() const = 0;\n+  /**\n+   * @brief Check if exposure is configured for an engineering data acquisition\n+   * @return \\c true if exposure is configured for an engineering data acquisition, \\c false otherwise\n+   */\n   virtual bool isEngineering() const = 0;\n \n };  // End of ExposureConfiguration class\n \n-\n+/**\n+ * @class ExposureConfigurationCreator\n+ * @brief Interface declaring the factory method to create a ExposureConfiguration object\n+ */\n class ExposureConfigurationCreator{\n public:\n+  /**\n+   * @brief Destructor\n+   */\n   virtual ~ExposureConfigurationCreator() = default;\n \n+  /**\n+   * @brief Create an ExposureConfiguration object\n+   * @param expConf A 16-bit unsigned integer representing the exposure configuration\n+   * @return A smart pointer to an ExposureConfiguration object\n+   */\n   virtual std::shared_ptr<ExposureConfiguration> create(const uint16_t expConf) = 0;\n };\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/ExposureConfigurationImpl.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/ExposureConfigurationImpl.h\n+ * @file LE1_NISP_Entities/ExposureConfigurationImpl.h\n  * @date 02/25/21\n  * @author user\n  *\n@@ -21,23 +21,62 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_EXPOSURECONFIGURATIONIMPL_H\n-#define _LE1_NISP_PROCESSSCIENCE_EXPOSURECONFIGURATIONIMPL_H\n+#ifndef _LE1_NISP_ENTITIES_EXPOSURECONFIGURATIONIMPL_H\n+#define _LE1_NISP_ENTITIES_EXPOSURECONFIGURATIONIMPL_H\n \n \n #include <ostream>\n #include <memory>\n \n-#include \"LE1_NISP_ProcessScience//Exception.h\"\n-#include \"LE1_NISP_ProcessScience/ExposureConfiguration.h\"\n-#include \"LE1_NISP_ProcessScience/ExposureConfigManager.h\"\n+#include \"LE1_NISP_Entities//Exception.h\"\n+#include \"ExposureConfiguration.h\"\n+#include \"LE1_NISP_Entities/ExposureConfigManager.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class ExposureConfigurationImpl\n- * @brief\n+ * @brief Implementation of the ExposureConfiguration interface.\n  *\n+ * The exposure configuration is a 16 bits value, the bits in the range [15, 8] represent the keyword configuration, the bits in the range [7, 0] represent the instrument configuration.\n+ *\n+ * Below are reported the available configurations as defined by the NISP DPU to Spacecraft ICD:\n+ *\n+ *\n+ * \\par Keyword configuration [15, 8]\n+ * | Value | Config |\n+ * | ----- | ------- |\n+ * | 0 | Void |\n+ * | 1 | Spectro Grism RGS0 |\n+ * | 2 | Spectro Grism RGS270 |\n+ * | 3 | Spectro Grism RGS180 |\n+ * | 4 | Spectro Grism BGS0 |\n+ * | 5 | Photo Filter Y |\n+ * | 6 | Photo Filter J |\n+ * | 7 | Photo Filter H |\n+ * | 8 | SPECTRO_DARK |\n+ * | 9 | PHOTO_DARK |\n+ * | 10 | Spectro Grism RGS0  4 |\n+ * | 11 | Spectro Grism RGS180 + 4 |\n+ * | 12 | Home search/check of Filter wheel |\n+ * | 13 | Home search/check of Grism wheel |\n+ *\n+ *\n+ * \\par Instrument configuration [7, 0]\n+ * | Value | Config |\n+ * | ----- | -------|\n+ * | 0 | Science |\n+ * | 1 | Engineering Raw |\n+ * | 2 | Engineering Debug |\n+ * | 3 | Compression Verification |\n+ * | 4 | Numerical Simulated by SCE pixel by pixel |\n+ * | 5 | Numerical Simulated by SCE frame by frame |\n+ * | 6 | Calibration Linearity |\n+ * | 7 | Calibration IPC |\n+ * | 8 | Calibration KTC Bias |\n+ * | 9 | DCU Simulator |\n+ * | 10 | Spectro Engineering Dark |\n+ * | 11 | Photo Engineering Dark |\n  */\n class ExposureConfigurationImpl: public ExposureConfiguration{\n public:\n@@ -96,16 +135,29 @@ private:\n \n };  // End of ExposureConfigurationImpl class\n \n-\n+/**\n+ * @class ExposureConfigurationImplCreator\n+ * @brief Concrete ExposureConfiguration creator overriding the ExposureConfigurationCreator factory method to create ExposureConfigurationImpl object\n+ *\n+ */\n class ExposureConfigurationImplCreator: public ExposureConfigurationCreator{\n public:\n   ExposureConfigurationImplCreator() = default;\n   virtual ~ExposureConfigurationImplCreator() = default;\n \n+  /**\n+   * @brief Set the ExposureConfigManager\n+   * @param expConfigManager An ExposureConfigManager smart pointer\n+   */\n   void setExposureConfigManager(const std::shared_ptr<ExposureConfigManager> expConfigManager){\n     m_expConfigManager = expConfigManager;\n   }\n \n+  /**\n+   * @brief Create the ExposureConfiguration and init with the ExposureConfigManager\n+   * @param expConf A 16-bit unsigned integer representing the exposure configuration\n+   * @return A smart pointer to an ExposureConfiguration object\n+   */\n   virtual std::shared_ptr<ExposureConfiguration> create(const uint16_t expConf) override{\n     auto expCnf = std::make_shared<ExposureConfigurationImpl>(expConf);\n     expCnf->setExposureConfigManager(m_expConfigManager);\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/OnBoardTime.h": [
                        [
                            "@@ -1,6 +1,6 @@\n /**\n- * @file LE1_NISP_ProcessScience/DateTimeManager.h\n- * @date 11/24/20\n+ * @file LE1_NISP_Entities/OnBoardTime.h\n+ * @date 06/12/20\n  * @author user\n  *\n  * @copyright (C) 2012-2020 Euclid Science Ground Segment\n@@ -21,54 +21,52 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DATETIMEMANAGER_H\n-#define _LE1_NISP_PROCESSSCIENCE_DATETIMEMANAGER_H\n+#ifndef _LE1_NISP_ENTITIES_ONBOARDTIME_H\n+#define _LE1_NISP_ENTITIES_ONBOARDTIME_H\n \n+#include <cstdint>\n #include <string>\n-#include <memory>\n+#include \"DateTime.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n-\n-class DateTime{\n-public:\n-  virtual ~DateTime() = default;\n-\n-  virtual int getYear() const = 0;\n-  virtual unsigned short getMonth() const = 0;\n-  virtual unsigned short getDay() const = 0;\n-  virtual unsigned short getHours() const = 0;\n-  virtual unsigned short getMinutes() const = 0;\n-  virtual double getSeconds() const = 0;\n-  virtual long getTotalSeconds() const = 0;\n-  virtual long getTotalMicroseconds() const = 0;\n-\n-  virtual std::string getIsoString() const = 0;\n-  virtual std::string getIsoExtendedString() const = 0;\n-};\n-\n-\n-/**\n- * @class DateTimeManager\n- * @brief\n- *\n- */\n-class DateTimeManager {\n-\n-public:\n-    /**\n-   * @brief Destructor\n+  /**\n+   * @class OnBoardTime\n+   * @brief Interface to store on-board time information\n    */\n-  virtual ~DateTimeManager() = default;\n+  class OnBoardTime: public DateTime {\n+  public:\n+    /**\n+     * @brief Destructor\n+     */\n+    ~OnBoardTime() override = default;\n \n-  virtual std::shared_ptr<DateTime> getDateTime() const = 0;\n+    /**\n+     * @brief Get the coarse time\n+     * @return The number of seconds of OBT\n+     */\n+    [[nodiscard]] virtual uint32_t getCoarseTime() const = 0;\n+    /**\n+     * @brief Get the fine time\n+     * @return The number of sub-seconds of OBT\n+     */\n+    [[nodiscard]] virtual uint16_t getFineTime() const = 0;\n+    /**\n+     * @brief Computes the number of microseconds of OBT\n+     * @return The number of microseconds of OBT\n+     */\n+    [[nodiscard]] virtual uint32_t getFineTimeMicroSeconds() const = 0;\n \n-  virtual std::string getDateTimeIsoStr() const = 0;\n-  virtual std::string getDateTimeIsoExtendedStr() const = 0;\n+    /**\n+     * @brief Less than operator overloading\n+     * @param rhs Another OnBoardTime object\n+     * @return \\c true if \\a lhs is less than \\a rhs object, \\c false otherwise\n+     */\n+    bool operator <(const OnBoardTime &rhs) const;\n \n-};  // End of DateTimeManager class\n+  };\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/OnBoardTimeBoost.h": [
                        [
                            "@@ -0,0 +1,150 @@\n+/**\n+ * @file LE1_NISP_Entities/OnBoardTimeBoost.h\n+ * @date 04/20/23\n+ * @author Alberto Alessio\n+ *\n+ * @copyright (C) 2012-2020 Euclid Science Ground Segment\n+ *\n+ * This library is free software; you can redistribute it and/or modify it under\n+ * the terms of the GNU Lesser General Public License as published by the Free\n+ * Software Foundation; either version 3.0 of the License, or (at your option)\n+ * any later version.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+ * details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this library; if not, write to the Free Software Foundation, Inc.,\n+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+ *\n+ */\n+\n+#ifndef _LE1_NISP_ENTITIES_ONBOARDTIMEBOOST_H\n+#define _LE1_NISP_ENTITIES_ONBOARDTIMEBOOST_H\n+\n+#include <cstdint>\n+#include <string>\n+#include \"OnBoardTime.h\"\n+#include \"DateTimeBoost.h\"\n+\n+/**\n+ * @def Ratio between the clock of the SpC and the one of the NISP instrument\n+ */\n+#define SPC_DPU_CLOCK_RATIO 59.6/50\n+\n+namespace LE1_NISP_Entities {\n+\n+/**\n+ * @class OnBoardTimeBoost\n+ * @brief Implementation of OnBoardTime interface\n+ *\n+ */\n+class OnBoardTimeBoost: public DateTimeBoost, public OnBoardTime {\n+\n+public:\n+  /**\n+   * @brief Construct an OBT object\n+   * @param coarseTime The local time seconds at the start of the exposure\n+   * @param fineTime The local time sub-seconds at the start of the exposure (in units of 2^16x50n [s])\n+   * @param epochYear The epoch year for OBT-UTC conversion\n+   * @param epochMonth The epoch month for OBT-UTC conversion\n+   * @param epochDay The epoch day for OBT-UTC conversion\n+   */\n+  explicit OnBoardTimeBoost(uint32_t coarseTime, uint16_t fineTime, int epochYear = 1970, unsigned short epochMonth = 1, unsigned short epochDay = 1);\n+\n+  /**\n+   * @brief Destructor\n+   */\n+  ~OnBoardTimeBoost() override = default;\n+\n+  /**\n+   * @brief Get the coarse time\n+   * @return The number of seconds of OBT\n+   */\n+  [[nodiscard]] uint32_t getCoarseTime() const override;\n+  /**\n+   * @brief Get the fine time\n+   * @return The number of sub-seconds of OBT (in units of 2^16x50n [s])\n+   */\n+   [[nodiscard]] uint16_t getFineTime() const override;\n+\n+  /**\n+   * @brief Computes the number of microseconds of OBT considering the SPC_DPU_CLOCK_RATIO\n+   * @return The number of microseconds of OBT\n+   */\n+  [[nodiscard]] uint32_t getFineTimeMicroSeconds() const override;\n+\n+  /**\n+   * @brief Get the year of the UTC date\n+   * @return The year value as an integer\n+   */\n+  [[nodiscard]] int getYear() const override;\n+  /**\n+   * @brief Get the month of the UTC date\n+   * @return The month value as an unsigned short\n+   */\n+  [[nodiscard]] unsigned short getMonth() const override;\n+  /**\n+   * @brief Get the day of the UTC date\n+   * @return The day value as an unsigned short\n+   */\n+  [[nodiscard]] unsigned short getDay() const override;\n+  /**\n+   * @brief Get the hours of the UTC date\n+   * @return The hours value as an unsigned short\n+   */\n+  [[nodiscard]] unsigned short getHours() const override;\n+  /**\n+   * @brief Get the minutes of the UTC date\n+   * @return The minutes value as an unsigned short\n+   */\n+  [[nodiscard]] unsigned short getMinutes() const override;\n+  /**\n+   * @brief Get the seconds of the UTC date\n+   * @return The seconds value as an unsigned short\n+   */\n+  [[nodiscard]] unsigned short getSeconds() const override;\n+  /**\n+   * @brief Get the amount of total seconds of OBT from the configured epoch time in double precision, calculate as Coarse time + fine time\n+   * @return The the amount of total seconds of OBT from the configured epoch time\n+   */\n+  [[nodiscard]] double getTotalSeconds() const override;\n+  /**\n+   * @brief Get the amount of total microseconds from the configured epoch time in double precision\n+   * @return The the amount of total microseconds from the configured epoch time\n+   */\n+  [[nodiscard]] double getTotalMicroSeconds() const override;\n+\n+  /**\n+   * @brief Get the UTC date time in ISO format (YYYYMMDDTHHMMSS.fffffffff)\n+   * @return The ISO format UTC date string\n+   */\n+  [[nodiscard]] std::string getIsoString() const override;\n+  /**\n+   * @brief Get the UTC date in ISO extended format (YYYY-MM-DDTHH:MM:SS.fffffffff)\n+   * @return The ISO extended format UTC date string\n+   */\n+  [[nodiscard]] std::string getIsoExtendedString() const override;\n+  /**\n+   * @brief Get the modified Julian day\n+   * @return The MJD value\n+   */\n+  [[nodiscard]] double getModifiedJulianDay() const override;\n+\n+private:\n+  // coarse time in seconds\n+  uint32_t m_coarseTime;\n+  // fine time in ticks of 50 ns as defined in the NISP DPU ASW to Spacecraft ICD\n+  uint16_t m_fineTime;\n+  int m_epochYear;\n+  unsigned short m_epochMonth;\n+  unsigned short m_epochDay;\n+\n+};  // End of OnBoardTimeBoost class\n+\n+}  // namespace LE1_NISP_Entities\n+\n+\n+#endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ],
                        [
                            "@@ -80,32 +80,32 @@ public:\n    * @brief Get the year of the UTC date\n    * @return The year value as an integer\n    */\n-  [[nodiscard]] inline int getYear() const override;\n+  [[nodiscard]] int getYear() const override;\n   /**\n    * @brief Get the month of the UTC date\n    * @return The month value as an unsigned short\n    */\n-  [[nodiscard]] inline unsigned short getMonth() const override;\n+  [[nodiscard]] unsigned short getMonth() const override;\n   /**\n    * @brief Get the day of the UTC date\n    * @return The day value as an unsigned short\n    */\n-  [[nodiscard]] inline unsigned short getDay() const override;\n+  [[nodiscard]] unsigned short getDay() const override;\n   /**\n    * @brief Get the hours of the UTC date\n    * @return The hours value as an unsigned short\n    */\n-  [[nodiscard]] inline unsigned short getHours() const override;\n+  [[nodiscard]] unsigned short getHours() const override;\n   /**\n    * @brief Get the minutes of the UTC date\n    * @return The minutes value as an unsigned short\n    */\n-  [[nodiscard]] inline unsigned short getMinutes() const override;\n+  [[nodiscard]] unsigned short getMinutes() const override;\n   /**\n    * @brief Get the seconds of the UTC date\n    * @return The seconds value as an unsigned short\n    */\n-  [[nodiscard]] inline unsigned short getSeconds() const override;\n+  [[nodiscard]] unsigned short getSeconds() const override;\n   /**\n    * @brief Get the amount of total seconds of OBT from the configured epoch time in double precision, calculate as Coarse time + fine time\n    * @return The the amount of total seconds of OBT from the configured epoch time\n@@ -121,12 +121,12 @@ public:\n    * @brief Get the UTC date time in ISO format (YYYYMMDDTHHMMSS.fffffffff)\n    * @return The ISO format UTC date string\n    */\n-  [[nodiscard]] inline std::string getIsoString() const override;\n+  [[nodiscard]] std::string getIsoString() const override;\n   /**\n    * @brief Get the UTC date in ISO extended format (YYYY-MM-DDTHH:MM:SS.fffffffff)\n    * @return The ISO extended format UTC date string\n    */\n-  [[nodiscard]] inline std::string getIsoExtendedString() const override;\n+  [[nodiscard]] std::string getIsoExtendedString() const override;\n   /**\n    * @brief Get the modified Julian day\n    * @return The MJD value\n",
                            "[fix] Fixes compile errors",
                            "Alberto Alessio",
                            "2023-06-13T12:07:33.000+00:00",
                            "11f710ab001a4ba36ff630fd33333d2181e0b32b"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/Parameter.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/Parameter.h\n+ * @file LE1_NISP_Entities/Parameter.h\n  * @date 11/10/20\n  * @author user\n  *\n@@ -21,44 +21,107 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_PARAMETER_H\n-#define _LE1_NISP_PROCESSSCIENCE_PARAMETER_H\n+#ifndef _LE1_NISP_ENTITIES_PARAMETER_H\n+#define _LE1_NISP_ENTITIES_PARAMETER_H\n \n-#include \"LE1_NISP_ProcessScience//Exception.h\"\n-#include \"LE1_NISP_ProcessScience//ParameterDescription.h\"\n+#include \"LE1_NISP_Entities//Exception.h\"\n+#include \"ParameterDescription.h\"\n #include <sstream>\n #include <iomanip>\n #include <byteswap.h>\n #include <any>\n #include <memory>\n \n-namespace LE1_NISP_ProcessScience {\n-\n+namespace LE1_NISP_Entities {\n+/**\n+ * @class ParameterInterface\n+ * @brief Interface to access parameter's information in terms of:\n+ * \\li Description\n+ * \\li Name\n+ * \\li Unit\n+ * \\li Comment\n+ * \\li Value\n+ */\n class ParameterInterface{\n public:\n+  /**\n+   * @brief Destructor\n+   */\n   virtual ~ParameterInterface(){}\n \n+  /**\n+   * @brief Equal to operator overloading\n+   * @param other Another ParameterInterface object\n+   * @return \\c true if the two objects are equal, \\c false otherwise\n+   */\n   bool operator==(const ParameterInterface &other) const{\n     return compareParam(other);\n   }\n+  /**\n+   * @brief Not equal to operator overloading\n+   * @param other Another ParameterInterface object\n+   * @return \\c true if the two objects are not equal, \\c false otherwise\n+   */\n   bool operator!=(const ParameterInterface &other) const{\n     return !(*this == other);\n   }\n \n+  /**\n+   * @brief Extraction operator overloading\n+   * @param os The output stream\n+   * @param desc The ParameterInterface object\n+   * @return The reference to the output stream\n+   */\n   friend std::ostream& operator<<(std::ostream& os, const ParameterInterface &param){\n     param.print(os);\n     return os;\n   }\n \n+  /**\n+   * @brief Parameter name getter\n+   * @return The name of the parameter\n+   */\n   virtual std::string getName() const = 0;\n+  /**\n+   * @brief Parameter unit getter\n+   * @return The unit of the parameter\n+   */\n   virtual std::string getUnit() const = 0;\n+  /**\n+   * @brief Parameter comment getter\n+   * @return The comment of the parameter\n+   */\n   virtual std::string getComment() const = 0;\n \n+  /**\n+   * @brief Parameter value getter\n+   * @return The value of the parameter as a 8-bit unsigned int\n+   */\n   virtual uint8_t getValueAsUInt8() const = 0;\n+  /**\n+   * @brief Parameter value getter\n+   * @return The value of the parameter as a 16-bit unsigned int\n+   */\n   virtual uint16_t getValueAsUInt16() const = 0;\n+  /**\n+   * @brief Parameter value getter\n+   * @return The value of the parameter as a 32-bit unsigned int\n+   */\n   virtual uint32_t getValueAsUInt32() const = 0;\n+  /**\n+   * @brief Parameter value getter\n+   * @return The value of the parameter as an unsigned int\n+   */\n   virtual uint getValueAsUInt() const = 0;\n+  /**\n+   * @brief Parameter value getter\n+   * @return The value of the parameter as a string\n+   */\n   virtual std::string getValueAsString() const = 0;\n+  /**\n+   * @brief Parameter value getter\n+   * @return The value of the parameter as a double\n+   */\n   virtual double getValueAsDouble() const = 0;\n \n private:\n@@ -69,15 +132,24 @@ private:\n \n /**\n  * @class Parameter\n- * @brief\n+ * @brief Realization of the ParameterInterface\n  *\n  */\n class Parameter: public ParameterInterface {\n \n public:\n+  /**\n+   * @brief Parameter constructor\n+   * @param description The ParameterDescription smart pointer\n+   * @param m_value The parameter value\n+   */\n   Parameter(const std::shared_ptr<ParameterDescription> description, const std::any &m_value);\n   ~Parameter() override;\n \n+  /**\n+   * @brief ParameterDescription getter\n+   * @return The description of the parameter as a smart pointer\n+   */\n   std::shared_ptr<const ParameterDescription> getDescription() const;\n \n   inline std::string getName() const override { return m_description->getName(); }\n@@ -104,7 +176,7 @@ private:\n \n };  // End of Parameter class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/ParameterDescription.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/ParameterDescription.h\n+ * @file LE1_NISP_Entities/ParameterDescription.h\n  * @date 11/10/20\n  * @author user\n  *\n@@ -21,26 +21,42 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_PARAMETERDESCRIPTION_H\n-#define _LE1_NISP_PROCESSSCIENCE_PARAMETERDESCRIPTION_H\n+#ifndef _LE1_NISP_ENTITIES_PARAMETERDESCRIPTION_H\n+#define _LE1_NISP_ENTITIES_PARAMETERDESCRIPTION_H\n \n #include <string>\n-#include \"LE1_NISP_ProcessScience//Exception.h\"\n+#include \"LE1_NISP_Entities//Exception.h\"\n \n-namespace LE1_NISP_ProcessScience {\n-\n-class InvalidOffbitValueException: public Exception{\n-  using Exception::Exception;\n-};\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class ParameterDescription\n- * @brief\n+ * @brief Store the information describing how to parse the detector parameters from the telemetry uncompressed header and the digital telemetry.\n+ * The available configurations are:\n+ * @li \\c name: a string representing the parameter name.\n+ * @li \\c offset: the position of the parameter in the telemetry. The first position (offset = 0) is the first byte of the uncompressed header, corresponding to the first byte of the SYNC.\n+ * @li \\c offbit: the offset inside a byte, used for parameter with size lower than 8 bits.\n+ * @li \\c size: the size of the parameter in bits.\n+ * @li \\c unit: the unit of the parameter.\n+ * @li \\c comment: the parameter description or some additional information.\n+ * @li \\c endiannessCorrection: a boolean that indicates if endianness correction is required or not.\n+ * @li \\c type: the type of the parameter. The supported types are: uint8, uint16, uint32.\n  *\n  */\n \n class ParameterDescription {\n public:\n+  /**\n+   * @brief Constructor\n+   * @param name The parameter name.\n+   * @param offset The position of the parameter in the telemetry. The first position (offset = 0) is the first byte of the uncompressed header, corresponding to the first byte of the SYNC.\n+   * @param offbit The offset inside a byte, used for parameter with size lower than 8 bits.\n+   * @param sizeInBits The size of the parameter in bits.\n+   * @param correctEndianness A boolean that indicates if endianness correction is required or not.\n+   * @param unit The unit of the parameter.\n+   * @param comment The parameter description or some additional information.\n+   * @param type The type of the parameter. The supported types are: uint8, uint16, uint32.\n+   */\n   ParameterDescription(const std::string &name = \"\",\n             const unsigned int offset = 0, \n             const unsigned int offbit = 0, \n@@ -49,39 +65,133 @@ public:\n             const std::string &unit = \"\",\n             const std::string &comment = \"\",\n             const std::string &type = \"\");\n+  /**\n+   * @brief Destructor\n+   */\n   virtual ~ParameterDescription();\n \n+  /**\n+   * @brief Copy constructor\n+   * @param description The other ParameterDescription object\n+   */\n   ParameterDescription(const ParameterDescription &description);\n \n+  /**\n+   * @brief Assignment operator overloading\n+   * @param source The ParameterDescription source object\n+   * @return The reference to the current ParameterDescription object\n+   */\n   ParameterDescription& operator=(const ParameterDescription& source);\n+  /**\n+   * @brief Equal to operator overloading\n+   * @param other Another ParameterDescription object\n+   * @return \\c true if the two objects are equal, \\c false otherwise\n+   */\n   bool operator==(const ParameterDescription &other) const;\n+  /**\n+   * @brief Not equal to operator overloading\n+   * @param other Another ParameterDescription object\n+   * @return \\c true if the two objects are not equal, \\c false otherwise\n+   */\n   bool operator!=(const ParameterDescription &other) const;\n \n+  /**\n+   * @brief Parameter name setter\n+   * @param name the name of the parameter\n+   */\n   virtual void setName(const std::string &name);\n+  /**\n+   * @brief Parameter name getter\n+   * @return the name of the parameter\n+   */\n   virtual std::string getName() const;\n \n+  /**\n+   * @brief Parameter type setter\n+   * @param type The type of the parameter\n+   */\n   virtual void setType(const std::string &type);\n+  /**\n+   * @brief Parameter type getter\n+   * @return The type of the parameter\n+   */\n   virtual std::string getType() const;\n \n+  /**\n+   * @brief Parameter unit setter\n+   * @param unit The unit of the parameter\n+   */\n   virtual void setUnit(const std::string &unit);\n+  /**\n+   * @brief Parameter unit getter\n+   * @return The unit of the parameter\n+   */\n   virtual std::string getUnit() const;\n \n+  /**\n+   * @brief Parameter comment setter\n+   * @param comment The comment of the parameter\n+   */\n   virtual void setComment(const std::string &comment);\n+  /**\n+   * @brief Parameter comment getter\n+   * @return The comment of the parameter\n+   */\n   virtual std::string getComment() const;\n \n+  /**\n+   * @brief Parameter offset setter\n+   * @param offset The displacement of the parameter from the first byte of the uncompressed header (offset = 0)\n+   */\n   virtual void setOffset(const unsigned int offset);\n+  /**\n+   * @brief Parameter offset getter\n+   * @return The displacement of the parameter from the first byte of the uncompressed header (offset = 0)\n+   */\n   virtual unsigned int getOffset() const;\n-  \n+\n+  /**\n+   * @brief Parameter offbit setter\n+   * @param offbit The offset inside a byte of the parameter\n+   */\n   virtual void setOffbit(const unsigned int offbit);\n+  /**\n+   * @brief Parameter offbit getter\n+   * @return The offset inside a byte of the parameter\n+   */\n   virtual unsigned int getOffbit() const;\n \n+  /**\n+   * @brief Parameter bits size setter\n+   * @param sizeInBits The size in bits of the parameter\n+   */\n   virtual void setSize(const unsigned int sizeInBits);\n+  /**\n+   * @brief Parameter bits size getter\n+   * @return The size in bits of the parameter\n+   */\n   virtual unsigned int getSize() const;\n \n+  /**\n+   * @brief Check if the parameter requires the endianness correction\n+   * @return \\c true if the parameter requires the endianness correction, \\c false otherwise\n+   */\n   virtual bool isEndiannessCorrectionEnabled() const;\n+  /**\n+   * @brief Turn on the endianness correction\n+   */\n   virtual void enableEndiannessCorrection();\n+  /**\n+   * @brief Turn off the endianness correction\n+   */\n   virtual void disableEndiannessCorrection();\n \n+  /**\n+   * @brief Extraction operator overloading\n+   * @param os The output stream\n+   * @param desc The ParameterDescription object\n+   * @return The reference to the output stream\n+   */\n   friend std::ostream& operator<<(std::ostream& os, const ParameterDescription& desc);\n \n private:\n@@ -96,7 +206,7 @@ private:\n \n };  // End of ParameterDescription class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/PlanningId.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/PlanningId.h\n+ * @file LE1_NISP_Entities/PlanningId.h\n  * @date 03/12/21\n  * @author user\n  *\n@@ -21,12 +21,13 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_PLANNINGID_H\n-#define _LE1_NISP_PROCESSSCIENCE_PLANNINGID_H\n+#ifndef _LE1_NISP_ENTITIES_PLANNINGID_H\n+#define _LE1_NISP_ENTITIES_PLANNINGID_H\n \n #include <memory>\n+#include <string>\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class PlanningId\n@@ -62,7 +63,7 @@ public:\n \n };  // End of PlanningId class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ],
                        [
                            "@@ -25,6 +25,7 @@\n #define _LE1_NISP_ENTITIES_PLANNINGID_H\n \n #include <memory>\n+#include <string>\n \n namespace LE1_NISP_Entities {\n \n",
                            "[fix] Fixes compile errors",
                            "Alberto Alessio",
                            "2023-06-13T12:07:33.000+00:00",
                            "11f710ab001a4ba36ff630fd33333d2181e0b32b"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/PlanningIdGroundTests.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/PlanningIdGroundTests.h\n+ * @file LE1_NISP_Entities/PlanningIdGroundTests.h\n  * @date 03/12/21\n  * @author user\n  *\n@@ -21,12 +21,12 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_PLANNINGIDGROUNDTESTS_H\n-#define _LE1_NISP_PROCESSSCIENCE_PLANNINGIDGROUNDTESTS_H\n+#ifndef _LE1_NISP_ENTITIES_PLANNINGIDGROUNDTESTS_H\n+#define _LE1_NISP_ENTITIES_PLANNINGIDGROUNDTESTS_H\n \n-#include \"LE1_NISP_ProcessScience/PlanningId.h\"\n+#include \"LE1_NISP_Entities/PlanningId.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class PlanningIdGroundTests\n@@ -37,7 +37,7 @@ class PlanningIdGroundTests: public PlanningId {\n public:\n   explicit PlanningIdGroundTests(uint16_t pid1, uint16_t pid2);\n   explicit PlanningIdGroundTests(uint32_t pid);\n-  virtual ~PlanningIdGroundTests();\n+  ~PlanningIdGroundTests() override;\n \n   unsigned int getPointingId() const override;\n   unsigned int getRawValue() const override;\n@@ -55,12 +55,12 @@ private:\n \n /**\n  * @class PlanningIdGroundTestsCreator\n- * @brief Implementation of PlanningIdCreator interface to manage the creation of PlanningIdGroundTests entity \n- * \n+ * @brief Concrete PlanningIdGroundTests creator overriding the PlanningIdCreator factory method to create PlanningIdGroundTests object\n+ *\n  */\n class PlanningIdGroundTestsCreator: public PlanningIdCreator {\n public:\n-  virtual ~PlanningIdGroundTestsCreator() = default;\n+  ~PlanningIdGroundTestsCreator() override = default;\n \n   /**\n    * @brief Create PlanningId entity using PlanningIdGroundTests implementation\n@@ -69,7 +69,7 @@ public:\n    * @param pid2 16 lsb of PlanningId\n    * @return std::shared_ptr<PlanningId> pointing to a PlanningIdGroundTests object\n    */\n-  virtual std::shared_ptr<PlanningId> create(uint16_t pid1, uint16_t pid2) override;\n+  std::shared_ptr<PlanningId> create(uint16_t pid1, uint16_t pid2) override;\n \n   /**\n    * @brief Create PlanningId entity using PlanningIdGroundTests impementation\n@@ -77,11 +77,11 @@ public:\n    * @param pid 32 bits value\n    * @return std::shared_ptr<PlanningId> pointing to a PlanningIdGroundTests object\n    */\n-  virtual std::shared_ptr<PlanningId> create(uint32_t pid) override;\n+  std::shared_ptr<PlanningId> create(uint32_t pid) override;\n \n };  // End of PlanningId class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/PlanningIdSoc20210215.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/PlanningIdSoc20210215.h\n+ * @file LE1_NISP_Entities/PlanningIdSoc20210215.h\n  * @date 03/12/21\n  * @author user\n  *\n@@ -21,12 +21,12 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_PLANNINGIDSOC20210215_H\n-#define _LE1_NISP_PROCESSSCIENCE_PLANNINGIDSOC20210215_H\n+#ifndef _LE1_NISP_ENTITIES_PLANNINGIDSOC20210215_H\n+#define _LE1_NISP_ENTITIES_PLANNINGIDSOC20210215_H\n \n-#include \"LE1_NISP_ProcessScience/PlanningId.h\"\n+#include \"LE1_NISP_Entities/PlanningId.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class PlanningIdSoc20210215\n@@ -72,8 +72,8 @@ private:\n \n /**\n  * @class PlanningIdSoc20210215Creator\n- * @brief Implementation of PlanningIdCreator interface to manage the creation of PlanningIdSoc20210215 entity \n- * \n+ * @brief Concrete PlanningIdSoc20210215 creator overriding the PlanningIdCreator factory method to create PlanningIdSoc20210215Creator object\n+ *\n  */\n class PlanningIdSoc20210215Creator: public PlanningIdCreator {\n public:\n@@ -81,7 +81,6 @@ public:\n \n   /**\n    * @brief Create PlanningId entity using PlanningIdSoc20210215 implementation\n-   * \n    * @param pid1 16 msb of PlanningId\n    * @param pid2 16 lsb of PlanningId\n    * @return std::shared_ptr<PlanningId> pointing to a PlanningIdSoc20210215 object\n@@ -89,8 +88,7 @@ public:\n   virtual std::shared_ptr<PlanningId> create(uint16_t pid1, uint16_t pid2) override;\n \n   /**\n-   * @brief Create PlanningId entity using PlanningIdSoc20210215 impementation\n-   * \n+   * @brief Create PlanningId entity using PlanningIdSoc20210215 implementation\n    * @param pid 32 bits value\n    * @return std::shared_ptr<PlanningId> pointing to a PlanningIdSoc20210215 object\n    */\n@@ -98,7 +96,7 @@ public:\n \n };  // End of PlanningId class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/TelemetryConfiguration.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/TelemetryConfiguration.h\n+ * @file LE1_NISP_Entities/TelemetryConfiguration.h\n  * @date 01/20/21\n  * @author user\n  *\n@@ -21,29 +21,52 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_TELEMETRYCONFIGURATION_H\n-#define _LE1_NISP_PROCESSSCIENCE_TELEMETRYCONFIGURATION_H\n+#ifndef _LE1_NISP_ENTITIES_TELEMETRYCONFIGURATION_H\n+#define _LE1_NISP_ENTITIES_TELEMETRYCONFIGURATION_H\n \n #include <iostream>\n #include <cstdint>\n #include <cstddef>\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class TelemetryConfiguration\n- * @brief\n+ * @brief Store the information about the telemetry configuration\n  *\n  */\n class TelemetryConfiguration{\n \n public:\n+\n+  /**\n+   * @brief Default constructor\n+   */\n   TelemetryConfiguration();\n+  /**\n+   * Destructor\n+   */\n   virtual ~TelemetryConfiguration();\n \n+  /**\n+   * @brief Equal to operator overloading\n+   * @param other The other TelemetryConfiguration object\n+   * @return \\c true lhs is equal to \\a rhs object, \\c false otherwise\n+   */\n   bool operator==(const TelemetryConfiguration &other) const;\n+  /**\n+   * @brief Not equal to operator overloading\n+   * @param other The other TelemetryConfiguration object\n+   * @return \\c true lhs is not equal to \\a rhs object, \\c false otherwise\n+   */\n   bool operator!=(const TelemetryConfiguration &other) const;\n \n+  /**\n+   * @brief Extraction operator overloading\n+   * @param os The output stream\n+   * @param detId The TelemetryConfiguration object\n+   * @return The reference to the output stream\n+   */\n   friend std::ostream& operator<<(std::ostream& os, const TelemetryConfiguration &tmConfig){\n     os << tmConfig.m_numberOfDetectors << \", \"\n        << tmConfig.m_maxGroups << \", \"\n@@ -86,110 +109,406 @@ public:\n        return os;\n   }\n \n+  /**\n+   * @brief The SYNC getter\n+   * @return The value of the SYNC bytes\n+   */\n   virtual uint32_t getSync() const;\n+  /**\n+   * @brief The SYNC setter\n+   * @param sync the value of the SYNC bytes\n+   */\n   virtual void setSync(const uint32_t sync);\n \n+  /**\n+   * @brief The TAIL1 getter\n+   * @return The value of the TAIL1 bytes\n+   */\n   virtual uint32_t getTail1() const;\n+  /**\n+   * @brief The TAIL1 setter\n+   * @param tail1 the value of the TAIL1 bytes\n+   */\n   virtual void setTail1(const uint32_t tail1);\n \n+  /**\n+   * @brief The TAIL2 getter\n+   * @return The value of the TAIL2 bytes\n+   */\n   virtual uint32_t getTail2() const;\n+  /**\n+   * @brief The TAIL2 setter\n+   * @param tail2 the value of the TAIL2 bytes\n+   */\n   virtual void setTail2(const uint32_t tail2);\n \n+  /**\n+   * @brief The TAIL3 getter\n+   * @return The value of the TAIL3 bytes\n+   */\n   virtual uint32_t getTail3() const;\n+  /**\n+   * @brief The TAIL3 setter\n+   * @param tail3 the value of the TAIL3 bytes\n+   */\n   virtual void setTail3(const uint32_t tail3);\n \n+  /**\n+   * @brief The TAIL4 getter\n+   * @return The value of the TAIL4 bytes\n+   */\n   virtual uint32_t getTail4() const;\n+  /**\n+   * @brief The TAIL4 setter\n+   * @param tail4 the value of the TAIL4 bytes\n+   */\n   virtual void setTail4(const uint32_t tail4);\n \n+  /**\n+   * @brief The maximum size of science compressed data getter\n+   * @return The maximum size of the science compressed data\n+   */\n   virtual uint32_t getScienceCompressedDataMaxSize() const;\n+  /**\n+   * @brief The maximum size of science compressed data setter\n+   * @param size maximum size of the science compressed data\n+   */\n   virtual void setScienceCompressedDataMaxSize(const uint32_t size);\n \n+  /**\n+   * @brief The maximum size of science data getter\n+   * @return The maximum size of the science data\n+   */\n   virtual uint32_t getScienceDataMaxSize() const;\n+  /**\n+   * @brief The maximum size of science data setter\n+   * @param size maximum size of the science data\n+   */\n   virtual void setScienceDataMaxSize(const uint32_t size);\n \n+  /**\n+   * @brief The maximum size of history compressed data getter\n+   * @return The maximum size of the history compressed data\n+   */\n   virtual uint32_t getHistoryCompressedDataMaxSize() const;\n+  /**\n+   * @brief The maximum size of history compressed data setter\n+   * @param size maximum size of the history compressed data\n+   */\n   virtual void setHistoryCompressedDataMaxSize(const uint32_t size);\n \n+  /**\n+   * @brief The maximum size of history data getter\n+   * @return The maximum size of the history data\n+   */\n   virtual uint32_t getHistoryDataMaxSize() const;\n+  /**\n+   * @brief The maximum size of history data setter\n+   * @param size maximum size of the history data\n+   */\n   virtual void setHistoryDataMaxSize(const uint32_t size);\n \n+  /**\n+   * @brief The maximum size of analog TLM data getter\n+   * @return The maximum size of the analog TLM data\n+   */\n   virtual uint32_t getAnalogTelemetryMaxSize() const;\n+  /**\n+   * @brief The maximum size of analog TLM data setter\n+   * @param size maximum size of the analog TLM data\n+   */\n   virtual void setAnalogTelemetryMaxSize(const uint32_t size);\n \n+  /**\n+   * @brief The maximum size of error buffer compressed data getter\n+   * @return The maximum size of the error buffer compressed data\n+   */\n   virtual uint32_t getErrorCompressedDataMaxSize() const;\n+  /**\n+   * @brief The maximum size of error buffer compressed data setter\n+   * @param ) maximum size of the error buffer compressed data\n+   */\n   virtual void setErrorCompressedDataMaxSize(const uint32_t size) ;\n \n+  /**\n+   * @brief The maximum size of error buffer data getter\n+   * @return The maximum size of the error buffer data\n+   */\n   virtual uint32_t getErrorDataMaxSize() const;\n+  /**\n+   * @brief The maximum size of error buffer data setter\n+   * @param ) maximum size of the error buffer data\n+   */\n   virtual void setErrorDataMaxSize(const uint32_t size) ;\n \n+  /**\n+   * @brief The maximum size of quality compressed data getter\n+   * @return The maximum size of the quality compressed data\n+   */\n   virtual uint32_t getQualityCompressedDataMaxSize() const;\n+  /**\n+   * @brief The maximum size of quality compressed data setter\n+   * @param size maximum size of the quality compressed data\n+   */\n   virtual void setQualityCompressedDataMaxSize(const uint32_t size);\n \n+  /**\n+   * @brief The maximum size of quality data getter\n+   * @return The maximum size of the quality data\n+   */\n   virtual uint32_t getQualityDataMaxSize() const;\n+  /**\n+   * @brief The maximum size of quality data setter\n+   * @param size maximum size of the quality data\n+   */\n   virtual void setQualityDataMaxSize(const uint32_t size);\n \n+  /**\n+   * @brief The maximum size of photo quality data getter\n+   * @return The maximum size of the photo quality data\n+   */\n   virtual uint32_t getQualityDataPhotoMaxSize() const;\n+  /**\n+   * @brief The maximum size of photo quality data setter\n+   * @param size maximum size of the photo quality data\n+   */\n   virtual void setQualityDataPhotoMaxSize(const uint32_t size);\n \n+  /**\n+   * @brief The maximum size of spectro quality data getter\n+   * @return The maximum size of the spectro quality data\n+   */\n   virtual uint32_t getQualityDataSpectroMaxSize() const;\n+  /**\n+   * @brief The maximum size of spectro quality data setter\n+   * @param size maximum size of the spectro quality data\n+   */\n   virtual void setQualityDataSpectroMaxSize(const uint32_t size);\n \n+  /**\n+   * @brief The maximum size of the rawlines data getter\n+   * @return The maximum size of the rawlines data\n+   */\n   virtual uint32_t getRawLinesDataMaxSize() const;\n+  /**\n+   * @brief The maximum size of the rawlines data setter\n+   * @param size maximum size of the rawlines data\n+   */\n   virtual void setRawLinesDataMaxSize(const uint32_t size);\n \n+  /**\n+   * @brief The maximum size of the engineering data getter\n+   * @return The maximum size of the engineering data\n+   */\n   virtual uint32_t getEngineeringDataMaxSize() const;\n+  /**\n+   * @brief The maximum size of the engineering data setter\n+   * @param size maximum size of the engineering data\n+   */\n   virtual void setEngineeringDataMaxSize(const uint32_t size);\n \n+  /**\n+   * @brief The maximum size of the memory buffer getter\n+   * @return The maximum size of the memory buffer\n+   */\n   virtual uint32_t getMemoryBufferMaxSize() const;\n+  /**\n+   * @brief The maximum size of the memory buffer setter\n+   * @param size maximum size of the memory buffer\n+   */\n   virtual void setMemoryBufferMaxSize(const uint32_t size);\n \n+  /**\n+   * @brief The size of the digital telemetry getter\n+   * @return The size of the digital telemetry\n+   */\n   virtual size_t getDigitalTelemetrySize() const;\n+  /**\n+   * @brief The size of the digital telemetry setter\n+   * @param size size of the digital telemetry\n+   */\n   virtual void setDigitalTelemetrySize(const size_t size);\n \n+  /**\n+   * @brief The detectors number getter\n+   * @return The number of detectors\n+   */\n   virtual unsigned int getNumberOfDetectors() const;\n+  /**\n+   * @brief The detectors number setter\n+   * @param size the number of detectors\n+   */\n   virtual void setNumberOfDetectors(const unsigned int size);\n   \n+  /**\n+   * @brief The max number of groups getter\n+   * @return The maximum number of groups\n+   */\n   virtual unsigned int getMaxGroups() const;\n+  /**\n+   * @brief The max number of groups setter\n+   * @param size the maximum number of groups\n+   */\n   virtual void setMaxGroups(const unsigned int size);\n \n+  /**\n+   * @brief The max number of frames getter\n+   * @return The maximum number of frames\n+   */\n   virtual unsigned int getMaxFrames() const;\n+  /**\n+   * @brief The max number of frames setter\n+   * @param size the maximum number of frames\n+   */\n   virtual void setMaxFrames(const unsigned int size);\n \n+  /**\n+   * @brief The detector size for X axis in pixels getter\n+   * @return The size of X axis in pixel\n+   */\n   virtual unsigned int getDetectorPxSizeX() const;\n+  /**\n+   * @brief The detector size for X axis in pixels setter\n+   * @param size the size of X axis in pixel\n+   */\n   virtual void setDetectorPxSizeX(const unsigned int size);\n \n+  /**\n+   * @brief The detector size for Y axis in pixels getter\n+   * @return The size of Y axis in pixels\n+   */\n   virtual unsigned int getDetectorPxSizeY() const;\n+  /**\n+   * @brief The detector size for Y axis in pixels setter\n+   * @param size the size of Y axis in pixels\n+   */\n   virtual void setDetectorPxSizeY(const unsigned int size);\n \n+  /**\n+   * @brief The size of a detector in pixels getter\n+   * @return The size of a detector in pixels\n+   */\n   virtual unsigned int getDetectorPxSize() const;\n+  /**\n+   * @brief The size of a detector in pixels setter\n+   * @param size the size of a detector in pixels\n+   */\n   virtual void setDetectorPxSize(const unsigned int size);\n \n+  /**\n+   * @brief The number of rawlines getter\n+   * @return The number of rawlines\n+   */\n   virtual unsigned int getNumberOfRawLines() const;\n+  /**\n+   * @brief The number of rawlines setter\n+   * @param size the number of rawlines\n+   */\n   virtual void setNumberOfRawLines(const unsigned int size);\n \n+  /**\n+   * @brief The size of rawlines getter\n+   * @return The size of rawlines\n+   */\n   virtual unsigned int getRawLineSize() const;\n+  /**\n+   * @brief The size of rawlines setter\n+   * @param size the size of rawlines\n+   */\n   virtual void setRawLineSize(const unsigned int size);\n \n+  /**\n+   * @brief The temperature buffer size getter\n+   * @return The size of the temperature buffer\n+   */\n   virtual unsigned int getTemperatureBufferSize() const;\n+  /**\n+   * @brief The temperature buffer size setter\n+   * @param size the size of the temperature buffer\n+   */\n   virtual void setTemperatureBufferSize(const unsigned int size);\n \n+  /**\n+   * @brief The number of error values per group getter\n+   * @return The number of error values per group\n+   */\n   virtual unsigned int getErrorValuesPerGroup() const;\n+  /**\n+   * @brief The number of error values per group setter\n+   * @param size the number of error values per group\n+   */\n   virtual void setErrorValuesPerGroup(const unsigned int size);\n \n+  /**\n+   * @brief The EngRaw table size getter\n+   * @return The size of the EngRaw table\n+   */\n   virtual unsigned int getEngRawTableSize() const;\n+  /**\n+   * @brief The EngRaw table size setter\n+   * @param size the size of the EngRaw table\n+   */\n   virtual void setEngRawTableSize(const unsigned int size);\n \n+  /**\n+   * @brief The science data number of values getter\n+   * @return The number of values for the science data\n+   */\n   virtual uint32_t getScienceDataNumberOfValues() const;\n+  /**\n+   * @brief The science data number of values setter\n+   * @param values The number of values for the science data\n+   */\n   virtual void setScienceDataNumberOfValues(const uint32_t values);\n+  /**\n+   * @brief The spectro quality data number of values getter\n+   * @return The the number of values for the spectro quality data\n+   */\n   virtual uint32_t getQualityDataSpectroNumberOfValues() const;\n+  /**\n+   * @brief The spectro quality data number of values setter\n+   * @param values the number of values for the spectro quality data\n+   */\n   virtual void setQualityDataSpectroNumberOfValues(const uint32_t values);\n+  /**\n+   * @brief The photo quality data number of values getter\n+   * @return The number of values for the photo quality data\n+   */\n   virtual uint32_t getQualityDataPhotoNumberOfValues() const;\n+  /**\n+   * @brief The photo quality data number of values setter\n+   * @param values the number of values for the photo quality data\n+   */\n   virtual void setQualityDataPhotoNumberOfValues(const uint32_t values);\n+  /**\n+   * @brief The EngDebug max number of values getter\n+   * @return The maximum number of values for the engineering debug\n+   */\n   virtual unsigned int getEngDebugMaxNumberOfValues() const;\n+  /**\n+   * @brief The EngDebug max number of values setter\n+   * @param numberOfValues the maximum number of values for the engineering debug\n+   */\n   virtual void setEngDebugMaxNumberOfValues(const unsigned int numberOfValues);\n+  /**\n+   * @brief The analog telemetry number of values getter\n+   * @return The number of values for the analog telemetry\n+   */\n   virtual unsigned int getAnalogTelemetryNumberOfValues() const;\n+  /**\n+   * @brief The analog telemetry number of values setter\n+   * @param numberOfValues the number of values for the analog telemetry\n+   */\n   virtual void setAnalogTelemetryNumberOfValues(const unsigned int numberOfValues);\n+  /**\n+   * @brief The history buffer number of values getter\n+   * @return The number of values for the history buffer\n+   */\n   virtual unsigned int getHistoryNumberOfValues() const;\n+  /**\n+   * @brief The history buffer number of values setter\n+   * @param numberOfValues the number of values for the history buffer\n+   */\n   virtual void setHistoryNumberOfValues(const unsigned int numberOfValues);\n \n private:\n@@ -234,7 +553,7 @@ private:\n \n }; // End of TelemetryConfiguration class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/TelemetryDetector.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/TelemetryDetector.h\n+ * @file LE1_NISP_Entities/TelemetryDetector.h\n  * @date 10/20/20\n  * @author user\n  *\n@@ -21,30 +21,55 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_TELEMETRYDETECTOR_H\n-#define _LE1_NISP_PROCESSSCIENCE_TELEMETRYDETECTOR_H\n+#ifndef _LE1_NISP_ENTITIES_TELEMETRYDETECTOR_H\n+#define _LE1_NISP_ENTITIES_TELEMETRYDETECTOR_H\n \n-#include \"LE1_NISP_ProcessScience//TelemetryFile.h\"\n-#include \"LE1_NISP_ProcessScience//Exception.h\"\n-#include \"LE1_NISP_ProcessScience//DetectorMetadata.h\"\n-\n-namespace LE1_NISP_ProcessScience {\n+#include \"TelemetryFile.h\"\n+#include \"LE1_NISP_Entities//Exception.h\"\n+#include \"DetectorMetadata.h\"\n \n+namespace LE1_NISP_Entities {\n \n+/**\n+ * @class TelemetryDetectorInterface\n+ * @brief Interface to manage the portion of telemetry containing the data of a detector\n+ *\n+ */\n class TelemetryDetectorInterface{\n   public:\n+  /**\n+   * @brief Destructor\n+   */\n   virtual ~TelemetryDetectorInterface(){}\n \n+  /**\n+   * @brief Get the displacement inside the telemetry where the data of the detector starts\n+   * @return The start position of detector data in the telemetry\n+   */\n   virtual unsigned long getStartPosition() const = 0;\n+  /**\n+   * @brief Get the displacement inside the telemetry where the data of the detector ends\n+   * @return The end position of detector data in the telemetry\n+   */\n   virtual unsigned long getEndPosition() const = 0;\n+  /**\n+   * @brief Get the filename of the telemetry file containing the detector data\n+   * @return The filename of the telemetry file\n+   */\n   virtual std::string getTelemetryFileName() const = 0;\n \n-  virtual std::shared_ptr<ByteArray> readBytes(const long offset, const long numberOfBytes) = 0;\n+  /**\n+   * @brief Read bytes of a detector data between start and end position\n+   * @param offset The position of the first byte to read\n+   * @param numberOfBytes The number of bytes to read\n+   * @return The bytes read as a ByteArray smart pointer\n+   */\n+  virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> readBytes(const long offset, const long numberOfBytes) = 0;\n };\n \n /**\n  * @class TelemetryDetector\n- * @brief\n+ * @brief Implementation of TelemetryDetectorInterface\n  *\n  */\n class TelemetryDetector: public TelemetryDetectorInterface{\n@@ -52,6 +77,9 @@ class TelemetryDetector: public TelemetryDetectorInterface{\n public:\n   /**\n    * @brief Constructor\n+   * @param tmFile The telemetry file containing the detector data\n+   * @param startPosition the displacement inside the telemetry where the data of the detector starts\n+   * @param endPosition the displacement inside the telemetry where the data of the detector ends\n    */\n   TelemetryDetector(const std::shared_ptr<TelemetryFile> tmFile, const unsigned long startPosition, const unsigned long endPosition);\n   /**\n@@ -59,15 +87,24 @@ public:\n    */\n   virtual ~TelemetryDetector();\n \n+  /**\n+   * @brief TelemetryDetector copy constructor\n+   * @param source The other TelemetryDetector object\n+   */\n   TelemetryDetector(const TelemetryDetector& source);\n \n+  /**\n+   * @brief Assignment operator overloading\n+   * @param source The TelemetryDetector source object\n+   * @return The reference to the current TelemetryDetector object\n+   */\n   TelemetryDetector& operator=(const TelemetryDetector &source);\n   \n   virtual unsigned long getStartPosition() const override;\n   virtual unsigned long getEndPosition() const override;\n   virtual std::string getTelemetryFileName() const override;\n \n-  virtual std::shared_ptr<ByteArray> readBytes(const long offset, const long numberOfBytes) override;\n+  virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> readBytes(const long offset, const long numberOfBytes) override;\n \n private:\n   std::shared_ptr<TelemetryFile> m_tmFile;\n@@ -76,7 +113,7 @@ private:\n \n };  // End of TelemetryDetector class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/TelemetryFile.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/TelemetryFile.h\n+ * @file LE1_NISP_Entities/TelemetryFile.h\n  * @date 10/20/20\n  * @author user\n  *\n@@ -21,47 +21,115 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_TELEMETRYFILE_H\n-#define _LE1_NISP_PROCESSSCIENCE_TELEMETRYFILE_H\n+#ifndef _LE1_NISP_ENTITIES_TELEMETRYFILE_H\n+#define _LE1_NISP_ENTITIES_TELEMETRYFILE_H\n \n #include <memory>\n #include <fstream>\n \n-#include \"LE1_NISP_ProcessScience//Exception.h\"\n-#include \"LE1_NISP_ProcessScience//ByteArrayCreator.h\"\n+#include \"LE1_NISP_Entities//Exception.h\"\n+#include \"LE1_NISP_Entities/ByteArrayCreator.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class TelemetryFile\n- * @brief\n+ * @brief This entity allow to access all information about an input telemetry file, such as filename and size, and safely read data into ByteArray\n  *\n  */\n class TelemetryFile {\n \n public:\n+  /**\n+   * @brief Default constructor\n+   */\n   TelemetryFile();\n+  /**\n+   * @brief Construct a TelemetryFile opening a given file\n+   * @param filename The telemetry file\n+   */\n   TelemetryFile(const std::string &filename);\n+  /**\n+   * @brief Destructor\n+   */\n   virtual ~TelemetryFile();\n \n   TelemetryFile(const TelemetryFile &source) = delete;\n   TelemetryFile(const TelemetryFile &&source) = delete;\n \n+  /**\n+   * @brief Check if the file is empty\n+   * @return \\c true if the file is empty, \\c false otherwise\n+   */\n   virtual bool isEmpty();\n+  /**\n+   * @brief Check if the file is open\n+   * @return \\c true if the file is open, \\c false otherwise\n+   */\n   virtual bool isOpen() const;\n+  /**\n+   * @brief Open a file\n+   * @param filename The file to be open\n+   */\n   void open(const std::string &filename);\n-  virtual std::shared_ptr<ByteArray> readBytes(const long offset, const long numberOfBytes);\n+  /**\n+   * @brief Read bytes from the telemetry file\n+   * @param offset The position of the first byte to read\n+   * @param numberOfBytes The number of bytes to read\n+   * @return The bytes read as a ByteArray smart pointer\n+   */\n+  virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> readBytes(const long offset, const long numberOfBytes);\n+  /**\n+   * @brief Get the filename of the telemetry file\n+   * @return The filename of the telemetry file\n+   */\n   virtual std::string getFilename() const;\n+  /**\n+   * @brief Get the size of the telemetry file\n+   * @return The size of the  telemetry file\n+   */\n   virtual long getFileSize();\n \n-  void setByteArrayCreator(const std::shared_ptr<ByteArrayCreator> creator);\n+  /**\n+   * @brief Set the ByteArray creator\n+   * @param creator The ByteArray creator\n+   */\n+  void setByteArrayCreator(const std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> creator);\n \n+  /**\n+   * @brief Get the current position in the telemetry file\n+   * @return The current absolute position\n+   */\n   virtual long getCurrentPos();\n+  /**\n+   * @brief Get the last position read\n+   * @return The last absolute position read\n+   */\n   virtual long getLastPos() const;\n+  /**\n+   * @brief Set the position of the next byte to be read from the telemetry file\n+   * @param pos The absolute position within the file\n+   */\n   virtual void seekPos(const long pos);\n+  /**\n+   * @brief Check if EOF has been reached\n+   * @return \\c true if EOF has been reached, \\c false otherwise\n+   */\n   virtual bool hasReachedEof() const;\n+  /**\n+   * @brief Check if there are enough bytes to read in the telemetry file\n+   * @param amount The amount of bytes to read\n+   * @return \\c true if there are enough bytes to read, \\c false otherwise\n+   */\n   virtual bool hasEnoughBytesLeft(const size_t &amount);\n \n+  /**\n+   * @brief Read bytes from the given offset\n+   * @tparam T The type of the returned value\n+   * @param offset The absolute starting offset\n+   * @param size The number of bytes to read\n+   * @return The value read\n+   */\n   template<typename T>\n   T readAt(const long offset, const size_t &size){\n     validateOffset(offset);\n@@ -77,6 +145,12 @@ public:\n     return val;\n   }\n \n+  /**\n+   * @brief Read bytes from current offset position\n+   * @tparam T The type of the returned value\n+   * @param size The number of bytes to read\n+   * @return The value read\n+   */\n   template<typename T>\n   T readNext(const size_t &size){\n     T val;\n@@ -95,27 +169,47 @@ private:\n   std::ifstream m_filestream;\n   std::string m_filename;\n   std::streamoff m_lastPos;\n-  std::shared_ptr<ByteArrayCreator> m_byteArrayCreator;\n+  std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> m_byteArrayCreator;\n \n   void validateFileHasBeenInited(const std::string &errMsgIncipit = \"\") const;\n   void validateOffset(const std::streamoff &offset) const;\n \n };  // End of TelemetryFile class\n \n+/**\n+ * @class TelemetryFileCreator\n+ * @brief Class to manage the creation of a TelemetryFile object\n+ *\n+ */\n class TelemetryFileCreator {\n public:\n+  /**\n+   * @brief Default constructor\n+   */\n   TelemetryFileCreator() = default;\n+  /**\n+   * @brief Destructor\n+   */\n   virtual ~TelemetryFileCreator() = default;\n \n+  /**\n+   * @brief Create the telemetry file\n+   * @param filename The file\n+   * @return The TelemetryFile smart pointer\n+   */\n   std::shared_ptr<TelemetryFile> createTelemetryFile(const std::string &filename);\n-  void setByteArrayCreator(const std::shared_ptr<ByteArrayCreator> byteArrCreator);\n+  /**\n+   * @brief Set the ByteArray creator\n+   * @param creator The ByteArray creator\n+   */\n+  void setByteArrayCreator(const std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> byteArrCreator);\n \n private:\n-  std::shared_ptr<ByteArrayCreator> m_byteArrayCreator;\n+  std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> m_byteArrayCreator;\n   \n };\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/TelemetrySection.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/TelemetrySection.h\n+ * @file LE1_NISP_Entities/TelemetrySection.h\n  * @date 11/17/20\n  * @author user\n  *\n@@ -21,36 +21,85 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_TELEMETRYSECTION_H\n-#define _LE1_NISP_PROCESSSCIENCE_TELEMETRYSECTION_H\n+#ifndef _LE1_NISP_ENTITIES_TELEMETRYSECTION_H\n+#define _LE1_NISP_ENTITIES_TELEMETRYSECTION_H\n \n-#include <stdlib.h>\n #include <ostream>\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class TelemetrySection\n- * @brief\n+ * @brief Store information to identify a segment of the telemetry\n+ * \\li Offset: the byte where the section starts\n+ * \\li Size: the size of the telemetry data\n+ * \\li Padding: padding bytes\n  *\n  */\n class TelemetrySection{\n public:\n+  /**\n+   * @brief Constructor\n+   * @param offset The byte where the section starts\n+   * @param size The number of bytes of the telemetry data\n+   * @param padding The number of padding bytes\n+   */\n   TelemetrySection(const size_t offset = 0, const size_t size = 0, const size_t padding = 0);\n+  /**\n+   * @brief Destructor\n+   */\n   virtual ~TelemetrySection();\n \n+  /**\n+   * @brief Equal to operator overloading\n+   * @param other The other TelemetrySection object\n+   * @return \\c true if the two objects are equal, \\c false otherwise\n+   */\n   bool operator==(const TelemetrySection &other) const;\n+  /**\n+   * @brief Not equal to operator overloading\n+   * @param other The other TelemetrySection object\n+   * @return \\c true if the two objects are not equal, \\c false otherwise\n+   */\n   bool operator!=(const TelemetrySection &other) const;\n \n+  /**\n+   * @brief Set the starting offset of the telemetry section\n+   * @param offset The first byte where the telemetry section starts\n+   */\n   virtual void setOffset(const size_t offset);\n-  virtual size_t getOffset() const;\n-  \n+  /**\n+   * @brief Get the starting offset of the telemetry section\n+   * @return The first byte where the telemetry section starts\n+   */\n+  [[nodiscard]] virtual size_t getOffset() const;\n+  /**\n+   * @brief Set the size of the telemetry section in bytes\n+   * @param size The number of bytes of the telemetry section\n+   */\n   virtual void setSize(const size_t size);\n-  virtual size_t getSize() const;\n-\n+  /**\n+   * @brief Get the size of the telemetry section in bytes\n+   * @return The number of bytes of the telemetry section\n+   */\n+  [[nodiscard]] virtual size_t getSize() const;\n+  /**\n+   * @brief Set the size of the padding of telemetry section in bytes\n+   * @param size The number of bytes of the padding of the telemetry section\n+   */\n   virtual void setPadding(const size_t size);\n-  virtual size_t getPadding() const;\n+  /**\n+   * @brief Get the size of the padding of telemetry section in bytes\n+   * @return The number of bytes of the padding of the telemetry section\n+   */\n+  [[nodiscard]] virtual size_t getPadding() const;\n \n+  /**\n+   * @brief Extraction operator overloading\n+   * @param os The output stream\n+   * @param section The TelemetrySection object\n+   * @return The reference to the output stream\n+   */\n   friend std::ostream& operator<<(std::ostream &os, const TelemetrySection &section);\n \n private:\n@@ -60,7 +109,7 @@ private:\n   \n };  // End of TelemetrySection class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/LE1_NISP_Entities/Wcs.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/Wcs.h\n+ * @file LE1_NISP_Entities/Wcs.h\n  * @date 03/09/22\n  * @author aalessio\n  *\n@@ -21,35 +21,70 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_WCS_H\n-#define _LE1_NISP_PROCESSSCIENCE_WCS_H\n+#ifndef _LE1_NISP_ENTITIES_WCS_H\n+#define _LE1_NISP_ENTITIES_WCS_H\n \n #include \"EL_Image/Point.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n /**\n  * @class Wcs\n- * @brief\n+ * @brief Store the information about the WCS parameters\n  *\n  */\n class Wcs {\n \n public:\n+  /**\n+   * @brief Construct a WCS object\n+   * @param cdMatrix The CD matrix\n+   * @param pCrPix The location of the reference point in pixels\n+   * @param pCrVal The coordinate value at reference point\n+   * @param pCType1 The axis1 type\n+   * @param pCType2 The axis2 type\n+   * @param pCUnit1 The axis1 unit\n+   * @param pCUnit2 The axis2 unit\n+   */\n   Wcs(const Eigen::Matrix2d &cdMatrix,\n       const Euclid::Image::Point2D &pCrPix,\n       const Euclid::Image::Point2D &pCrVal,\n       const std::string &pCType1, const std::string &pCType2,\n       const std::string &pCUnit1, const std::string &pCUnit2);\n \n+  /**\n+   * @brief Equal to operator overloading\n+   * @param rhs Another Wcs object\n+   * @return \\c true if the two objects are equal, \\c false otherwise\n+   */\n   bool operator==(const Wcs &rhs) const;\n-\n+  /**\n+   * @brief Not equal to operator overloading\n+   * @param rhs Another Wcs object\n+   * @return \\c true if the two objects are not equal, \\c false otherwise\n+   */\n   bool operator!=(const Wcs &rhs) const;\n \n+  /**\n+   * @brief Default constructor.\n+   * Init CD matrix, CRPIX and CRVAL to zero.\n+   */\n   Wcs();\n+  /**\n+   * @brief Destructor\n+   */\n   virtual ~Wcs() = default;\n \n+  /**\n+   * @brief Copy constructor\n+   * @param other The Wcs source object\n+   */\n   Wcs(const Wcs &other);\n+  /**\n+   * @brief Assignment operator overloading\n+   * @param source The Wcs source object\n+   * @return The reference to the current Wcs object\n+   */\n   Wcs& operator=(const Wcs &source);\n \n   Eigen::Matrix2d cd;\n@@ -62,7 +97,7 @@ public:\n \n };  // End of Wcs class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/doc/doc_module.rst": [
                        [
                            "@@ -0,0 +1,25 @@\n+Module Overview <----------------- TO BE WRITTEN ------------------------>\n+==========================================================================\n+\n+.. important:: Please edit ./@_el_pack_short@/doc/module.rst to replace this section.\n+\n+.. The following sections can be replaced or updated. \n+   You may also use a toctree directive for sub documents. \n+\n+Introduction\n+------------\n+\n+Purpose of this Elements Module.\n+\n+What does it do?\n+\n+Architecture overview\n+---------------------\n+\n+Highlevel overview of the Module.\n+\n+How is it done?\n+\n+  1. List of packages\n+  2. Explanation of used design patterns\n+  3. Useful UML diagrams: UML Package, UML Structure and Deployment, UML Use Case\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/ByteArray.cpp": [
                        [
                            "@@ -21,9 +21,9 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/ByteArray.h\"\n+#include \"LE1_NISP_Entities/ByteArray.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n   \n   ByteArray::~ByteArray(){}\n \n@@ -35,7 +35,7 @@ namespace LE1_NISP_ProcessScience {\n     return !(*this == other);\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/ByteArrayCreatorEuclid.cpp": [
                        [
                            "@@ -21,10 +21,10 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/ByteArrayCreatorEuclid.h\"\n-#include \"LE1_NISP_ProcessScience//ByteArrayEuclid.h\"\n+#include \"LE1_NISP_Entities/ByteArrayCreatorEuclid.h\"\n+#include \"LE1_NISP_Entities/ByteArrayEuclid.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n     ByteArrayCreatorEuclid::ByteArrayCreatorEuclid(){}\n     \n@@ -37,7 +37,7 @@ namespace LE1_NISP_ProcessScience {\n         return std::make_shared<ByteArrayEuclid>(size);\n     }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/ByteArrayCreatorStandard.cpp": [
                        [
                            "@@ -21,10 +21,10 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/ByteArrayCreatorStandard.h\"\n-#include \"LE1_NISP_ProcessScience/ByteArrayStandard.h\"\n+#include \"LE1_NISP_Entities/ByteArrayCreatorStandard.h\"\n+#include \"LE1_NISP_Entities/ByteArrayStandard.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n     \n     ByteArrayCreatorStandard::ByteArrayCreatorStandard(){}\n   \n@@ -37,7 +37,7 @@ namespace LE1_NISP_ProcessScience {\n         return std::make_shared<ByteArrayStandard>(size);\n     }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/ByteArrayEuclid.cpp": [
                        [
                            "@@ -21,10 +21,10 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/ByteArrayEuclid.h\"\n+#include \"LE1_NISP_Entities/ByteArrayEuclid.h\"\n #include <byteswap.h>\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n     ByteArrayEuclid::ByteArrayEuclid(){}\n \n@@ -112,7 +112,7 @@ namespace LE1_NISP_ProcessScience {\n         return std::make_shared<ByteArrayEuclid>(std::move(data8), getSize());\n     }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/ByteArrayStandard.cpp": [
                        [
                            "@@ -21,11 +21,11 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/ByteArrayStandard.h\"\n+#include \"LE1_NISP_Entities/ByteArrayStandard.h\"\n #include <byteswap.h>\n #include <cstring>\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n   ByteArrayStandard::ByteArrayStandard(const std::vector<uint8_t> &bytes)\n   :  ByteArrayStandard(bytes.size()){\n@@ -139,7 +139,7 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/CompressionParams.cpp": [
                        [
                            "@@ -21,9 +21,9 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/CompressionParams.h\"\n+#include \"LE1_NISP_Entities/CompressionParams.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n   CompressionParams::CompressionParams(uint16_t comprBlockSize, uint16_t comprFundSeqPar1, uint16_t comprFundSeqPar2, int numberOfValues)\n   : m_comprBlockSize(comprBlockSize),\n@@ -60,7 +60,7 @@ namespace LE1_NISP_ProcessScience {\n   void CompressionParams::setNumberOfValues( const int value) { m_numberOfValues = value; }\n \n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/DateTimeBoost.cpp": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file src/lib/DateTimeManagerBoost.cpp\n+ * @file src/lib/DateTimeBoost.cpp\n  * @date 02/14/21\n  * @author user\n  *\n@@ -21,11 +21,11 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/DateTimeManagerBoost.h\"\n+#include \"LE1_NISP_Entities/DateTimeBoost.h\"\n \n using namespace boost::posix_time;\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n   DateTimeBoost::DateTimeBoost(const bool useMinDate){\n     if(useMinDate)\n@@ -34,6 +34,11 @@ namespace LE1_NISP_ProcessScience {\n       m_dateTime = boost::posix_time::microsec_clock::universal_time();\n   }\n \n+  DateTimeBoost::DateTimeBoost(const int year, const unsigned short month, const unsigned short day,\n+                               const unsigned short hours, const unsigned short minutes, const double seconds) {\n+    m_dateTime = ptime(boost::gregorian::date(year, month, day), time_duration(hours, minutes, seconds));\n+  }\n+\n   DateTimeBoost::~DateTimeBoost(){}\n \n   int DateTimeBoost::getYear() const {\n@@ -51,13 +56,13 @@ namespace LE1_NISP_ProcessScience {\n   unsigned short DateTimeBoost::getMinutes() const {\n     return m_dateTime.time_of_day().minutes();\n   }\n-  double DateTimeBoost::getSeconds() const {\n+  unsigned short DateTimeBoost::getSeconds() const {\n     return m_dateTime.time_of_day().seconds();\n   }\n-  long DateTimeBoost::getTotalSeconds() const {\n+  double DateTimeBoost::getTotalSeconds() const {\n     return m_dateTime.time_of_day().total_seconds();\n   }\n-  long DateTimeBoost::getTotalMicroseconds() const {\n+  double DateTimeBoost::getTotalMicroSeconds() const {\n     return m_dateTime.time_of_day().total_microseconds();\n   }\n \n@@ -68,27 +73,11 @@ namespace LE1_NISP_ProcessScience {\n     return to_iso_extended_string(m_dateTime);\n   }\n \n-  DateTimeManagerBoost::DateTimeManagerBoost(const bool useMinDate)\n-  : m_useMinDate(useMinDate){\n-\n-  }\n-\n-  DateTimeManagerBoost::~DateTimeManagerBoost(){\n-\n+  double DateTimeBoost::getModifiedJulianDay() const {\n+    return m_dateTime.date().modjulian_day();\n   }\n \n-  std::shared_ptr<DateTime> DateTimeManagerBoost::getDateTime() const{\n-    return std::make_shared<DateTimeBoost>(m_useMinDate);\n-  }\n-\n-  std::string DateTimeManagerBoost::getDateTimeIsoStr() const {\n-    return getDateTime()->getIsoString();\n-  }\n-\n-  std::string DateTimeManagerBoost::getDateTimeIsoExtendedStr() const {\n-    return getDateTime()->getIsoExtendedString();\n-  }\n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/DateTimeManagerBoost.cpp": [
                        [
                            "@@ -0,0 +1,59 @@\n+/**\n+ * @file src/lib/DateTimeManagerBoost.cpp\n+ * @date 02/14/21\n+ * @author user\n+ *\n+ * @copyright (C) 2012-2020 Euclid Science Ground Segment\n+ *\n+ * This library is free software; you can redistribute it and/or modify it under\n+ * the terms of the GNU Lesser General Public License as published by the Free\n+ * Software Foundation; either version 3.0 of the License, or (at your option)\n+ * any later version.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+ * details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this library; if not, write to the Free Software Foundation, Inc.,\n+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+ *\n+ */\n+\n+#include \"LE1_NISP_Entities/DateTimeManagerBoost.h\"\n+#include \"LE1_NISP_Entities/DateTimeBoost.h\"\n+#include \"LE1_NISP_Entities/OnBoardTimeBoost.h\"\n+\n+using namespace boost::posix_time;\n+\n+namespace LE1_NISP_Entities {\n+\n+  DateTimeManagerBoost::DateTimeManagerBoost(const bool useMinDate)\n+  : m_useMinDate(useMinDate){\n+\n+  }\n+\n+  DateTimeManagerBoost::~DateTimeManagerBoost(){\n+\n+  }\n+\n+  std::shared_ptr<DateTime> DateTimeManagerBoost::getCurrentDateTime() const{\n+    return std::make_shared<DateTimeBoost>(m_useMinDate);\n+  }\n+\n+  std::shared_ptr<DateTime>\n+  DateTimeManagerBoost::createDateTime(int year, unsigned short month, unsigned short day, unsigned short hours,\n+                                       unsigned short minutes, double seconds) const {\n+    return std::make_shared<DateTimeBoost>(year, month, day, hours, minutes, seconds);\n+  }\n+\n+  std::shared_ptr<OnBoardTime> DateTimeManagerBoost::createOnBoardTime(uint32_t coarseTime, uint16_t fineTime,\n+                                                                       int epochYear, unsigned short epochMonth,\n+                                                                       unsigned short epochDay) const {\n+    return std::make_shared<OnBoardTimeBoost>(coarseTime, fineTime, epochYear, epochMonth, epochDay);\n+  }\n+}  // namespace LE1_NISP_Entities\n+\n+\n+\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/DetectorCollection.cpp": [
                        [
                            "@@ -21,14 +21,14 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/DetectorCollection.h\"\n+#include \"LE1_NISP_Entities/DetectorCollection.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n   DetectorCollection::~DetectorCollection(){}\n \n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/DetectorHeader.cpp": [
                        [
                            "@@ -21,9 +21,9 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/DetectorHeader.h\"\n+#include \"LE1_NISP_Entities/DetectorHeader.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n   DetectorHeader::DetectorHeader() :\n     acquisitionCounter(0),\n@@ -126,7 +126,7 @@ namespace LE1_NISP_ProcessScience {\n        << \", engDataSize: \" << header.engDataSize;\n     return os;\n   }\n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/DetectorId.cpp": [
                        [
                            "@@ -21,9 +21,9 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/DetectorId.h\"\n+#include \"LE1_NISP_Entities/DetectorId.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n   DetectorId::DetectorId(const unsigned int dpuId, const unsigned int sceId, const std::string &scePos)\n   : m_dpuId(dpuId), m_sceId(sceId), m_scePos(scePos){}\n@@ -95,7 +95,7 @@ namespace LE1_NISP_ProcessScience {\n     return os;\n   }\n   \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/DetectorIdIterator.cpp": [
                        [
                            "@@ -21,10 +21,10 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/DetectorIdIterator.h\"\n-#include \"LE1_NISP_ProcessScience/DetectorMap.h\"\n+#include \"LE1_NISP_Entities/DetectorIdIterator.h\"\n+#include \"LE1_NISP_Entities/DetectorMap.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n DetectorIdIterator::DetectorIdIterator(const std::shared_ptr<DetectorMap> exposure)\n   : m_exposure(exposure){\n@@ -47,7 +47,7 @@ void DetectorIdIterator::first(){\n       m_iter = m_exposure->m_detectorsMap.begin();\n }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/DetectorImpl.cpp": [
                        [
                            "@@ -21,9 +21,9 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/DetectorImpl.h\"\n+#include \"LE1_NISP_Entities/DetectorImpl.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n   DetectorImpl::DetectorImpl(){}\n   DetectorImpl::~DetectorImpl(){}\n@@ -47,11 +47,11 @@ namespace LE1_NISP_ProcessScience {\n     return m_metadata;\n   }\n \n-  void DetectorImpl::setRawlines(const std::shared_ptr<ByteArray> rawLines){\n+  void DetectorImpl::setRawlines(const std::shared_ptr<LE1_NISP_Entities::ByteArray> rawLines){\n     m_rawLines = rawLines;\n   }\n \n-  std::shared_ptr<ByteArray> DetectorImpl::getRawLines() const{\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> DetectorImpl::getRawLines() const{\n     return m_rawLines;\n   }\n \n@@ -59,49 +59,49 @@ namespace LE1_NISP_ProcessScience {\n     return m_metadata->getDetectorId();\n   }\n \n-  std::shared_ptr<LE1_NISP::OnBoardTime> DetectorImpl::getObt() const{\n+  std::shared_ptr<OnBoardTime> DetectorImpl::getObt() const{\n     return m_metadata->getObt();\n   }\n \n-  void DetectorImpl::setEngData(const std::shared_ptr<ByteArray> engData){\n+  void DetectorImpl::setEngData(const std::shared_ptr<LE1_NISP_Entities::ByteArray> engData){\n     m_engData = engData;\n   }\n-  std::shared_ptr<ByteArray> DetectorImpl::getEngData() const{\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> DetectorImpl::getEngData() const{\n     return m_engData;\n   }\n   \n-  void DetectorImpl::setScienceData(const std::shared_ptr<ByteArray> data){\n+  void DetectorImpl::setScienceData(const std::shared_ptr<LE1_NISP_Entities::ByteArray> data){\n     m_scienceData = data;\n   }\n-  std::shared_ptr<ByteArray> DetectorImpl::getScienceData() const{\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> DetectorImpl::getScienceData() const{\n     return m_scienceData;\n   }\n   \n-  void DetectorImpl::setQualityData(const std::shared_ptr<ByteArray> data){\n+  void DetectorImpl::setQualityData(const std::shared_ptr<LE1_NISP_Entities::ByteArray> data){\n     m_qualityData = data;\n   }\n-  std::shared_ptr<ByteArray> DetectorImpl::getQualityData() const{\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> DetectorImpl::getQualityData() const{\n     return m_qualityData;\n   }\n   \n-  void DetectorImpl::setAnalogTelemetry(const std::shared_ptr<ByteArray> data){\n+  void DetectorImpl::setAnalogTelemetry(const std::shared_ptr<LE1_NISP_Entities::ByteArray> data){\n     m_analogTm = data;\n   }\n-  std::shared_ptr<ByteArray> DetectorImpl::getAnalogTelemetry() const{\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> DetectorImpl::getAnalogTelemetry() const{\n     return m_analogTm;\n   }\n \n-  void DetectorImpl::setErrorsData(const std::shared_ptr<ByteArray> data){\n+  void DetectorImpl::setErrorsData(const std::shared_ptr<LE1_NISP_Entities::ByteArray> data){\n     m_errorsData = data;\n   }\n-  std::shared_ptr<ByteArray> DetectorImpl::getErrorsData() const{\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> DetectorImpl::getErrorsData() const{\n     return m_errorsData;\n   }\n \n-  void DetectorImpl::setHistoryData(const std::shared_ptr<ByteArray> data){\n+  void DetectorImpl::setHistoryData(const std::shared_ptr<LE1_NISP_Entities::ByteArray> data){\n     m_historyData = data;\n   }\n-  std::shared_ptr<ByteArray> DetectorImpl::getHistoryData() const{\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> DetectorImpl::getHistoryData() const{\n     return m_historyData;\n   }\n \n@@ -236,7 +236,7 @@ namespace LE1_NISP_ProcessScience {\n     return std::make_shared<DetectorImpl>();\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/DetectorMap.cpp": [
                        [
                            "@@ -21,10 +21,10 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/DetectorMap.h\"\n-#include \"LE1_NISP_ProcessScience/DetectorIdIterator.h\"\n+#include \"LE1_NISP_Entities/DetectorMap.h\"\n+#include \"LE1_NISP_Entities/DetectorIdIterator.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n   DetectorMap::DetectorMap(const ExposureId &exposureId)\n   : m_expId(exposureId){}\n@@ -79,7 +79,7 @@ namespace LE1_NISP_ProcessScience {\n     return std::make_shared<DetectorMap>(exposureId);\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/DetectorMetadata.cpp": [
                        [
                            "@@ -21,17 +21,21 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/DetectorMetadata.h\"\n+#include \"LE1_NISP_Entities/DetectorMetadata.h\"\n+#include \"LE1_NISP_Entities/DateTimeManagerBoost.h\"\n+#include \"LE1_NISP_Entities/Utils.h\"\n \n-namespace LE1_NISP_ProcessScience{\n+namespace LE1_NISP_Entities{\n \n   DetectorMetadataNISP::DetectorMetadataNISP(const std::shared_ptr<DetectorConfigManager> configManager, \n                                              const std::shared_ptr<ExposureConfigurationCreator> expConfigCreator,\n-                                             const std::shared_ptr<PlanningIdCreator> planningIdCreator)\n+                                             const std::shared_ptr<PlanningIdCreator> planningIdCreator,\n+                                             const std::shared_ptr<DateTimeManager> obtCreator)\n   :\n       m_detConfigManager(configManager),\n       m_expConfigCreator(expConfigCreator),\n       m_planningIdCreator(planningIdCreator),\n+      m_obtCreator(obtCreator),\n       m_scienceComprRatio(0.0),\n       m_qualityDataComprRatio(0.0){}\n   \n@@ -46,6 +50,9 @@ namespace LE1_NISP_ProcessScience{\n   void DetectorMetadataNISP::setPlanningIdCreator(const std::shared_ptr<PlanningIdCreator> planningIdCreator){\n     m_planningIdCreator = planningIdCreator;\n   }\n+  void DetectorMetadataNISP::setOnBoardTimeCreator(const std::shared_ptr<DateTimeManager> obtCreator){\n+    m_obtCreator = obtCreator;\n+  }\n \n   unsigned int DetectorMetadataNISP::countParameters() const {\n     return params.size();\n@@ -174,9 +181,9 @@ namespace LE1_NISP_ProcessScience{\n   uint8_t DetectorMetadataNISP::getMaccFramesPerGroup() const { \n     return getParameter(\"NR\")->getValueAsUInt8();\n   }\n-  uint8_t DetectorMetadataNISP::getMaccDropedFrames() const {\n+  uint8_t DetectorMetadataNISP::getMaccDroppedFrames() const {\n     if(!m_detConfigManager)\n-      throw NullConfigManagerException(\"DetectorMetadataNISP::getMaccDropedFrames: \"\n+      throw NullConfigManagerException(\"DetectorMetadataNISP::getMaccDroppedFrames: \"\n                                        \"nullptr DetectorConfigManager\");\n     return getPostReadDropLines()/m_detConfigManager->getFrameLineSize();\n   }\n@@ -317,9 +324,11 @@ namespace LE1_NISP_ProcessScience{\n   uint16_t DetectorMetadataNISP::getHistoryParamIndex() const {\n     return getParameter(\"TLMHISTP\")->getValueAsUInt16();\n   }\n-  std::shared_ptr<LE1_NISP::OnBoardTime> DetectorMetadataNISP::getObt() const {\n-    return std::make_shared<LE1_NISP::OnBoardTime>((getObt1() << 16) | getObt2(),\n-                                                   getObt3());\n+  std::shared_ptr<OnBoardTime> DetectorMetadataNISP::getObt() const {\n+    validatePointer<NullObtCreatorException>(m_obtCreator, \"DetectorMetadataNISP::getObt: \"\n+                                                           \"null OBT creator DateTimeManager\");\n+    return m_obtCreator->createOnBoardTime((getObt1() << 16) | getObt2(), getObt3(),\n+                                           1970, 1, 1);\n   }\n \n   double DetectorMetadataNISP::getFrameTime() const {\n@@ -395,15 +404,15 @@ namespace LE1_NISP_ProcessScience{\n \n   DetectorMetadataCreatorNISP::DetectorMetadataCreatorNISP(const std::shared_ptr<DetectorConfigManager> configManager,\n                                                            const std::shared_ptr<ExposureConfigurationCreator> expConfigCreator,\n-                                                           const std::shared_ptr<PlanningIdCreator> planningIdCreator)\n+                                                           const std::shared_ptr<PlanningIdCreator> planningIdCreator,\n+                                                           const std::shared_ptr<DateTimeManager> obtCreator)\n     : m_detConfigManager(configManager),\n       m_expConfigCreator(expConfigCreator),\n-      m_planningIdCreator(planningIdCreator){}\n+      m_planningIdCreator(planningIdCreator),\n+      m_obtCreator(obtCreator){}\n \n-  DetectorMetadataCreatorNISP::~DetectorMetadataCreatorNISP(){}\n-  \n   std::shared_ptr<DetectorMetadata> DetectorMetadataCreatorNISP::createDetectorMetadata(){\n-    return std::make_shared<DetectorMetadataNISP>(m_detConfigManager, m_expConfigCreator, m_planningIdCreator);\n+    return std::make_shared<DetectorMetadataNISP>(m_detConfigManager, m_expConfigCreator, m_planningIdCreator, m_obtCreator);\n   }\n \n }\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/Exception.cpp": [
                        [
                            "@@ -1,7 +1,6 @@\n-\n- /**\n- * @file LE1_NISP_ProcessScience/tests/include/ObtMock.h\n- * @date 10/21/21\n+/**\n+ * @file src/lib/Exception.cpp\n+ * @date 10/15/20\n  * @author user\n  *\n  * @copyright (C) 2012-2020 Euclid Science Ground Segment\n@@ -22,22 +21,18 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_OBTMOCK_H\n-#define _LE1_NISP_PROCESSSCIENCE_OBTMOCK_H\n+#include \"LE1_NISP_Entities/Exception.h\"\n+\n+namespace LE1_NISP_Entities {\n+\n+  Exception::Exception(const std::string &errMsg)\n+  : Elements::Exception(errMsg){\n+  }\n \n-#include \"LE1_NISP_ProcessScience/OnBoardTime.h\"\n+  Exception::~Exception(){}\n \n-namespace LE1_NISP_ProcessScience {\n \n-  class ObtCustomReturns: public LE1_NISP::OnBoardTime {\n-  public:\n-    double customObtTotSecs;\n+}  // namespace LE1_NISP_Entities\n \n-    ObtCustomReturns(): LE1_NISP::OnBoardTime(0, 0), customObtTotSecs(0){}\n-    ~ObtCustomReturns() override = default;\n-    double getObtTotalSeconds() const override { return customObtTotSecs; }\n-  };\n \n-} // namespace LE1_NISP_ProcessScience\n \n-#endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/ExposureConfigManager.cpp": [
                        [
                            "@@ -21,9 +21,9 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/ExposureConfigManager.h\"\n+#include \"LE1_NISP_Entities/ExposureConfigManager.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n   ExposureConfigManager::ExposureConfigManager(){}\n \n@@ -228,7 +228,7 @@ namespace LE1_NISP_ProcessScience {\n     m_fwaRefPos = refPos;\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/ExposureConfigurationImpl.cpp": [
                        [
                            "@@ -21,9 +21,9 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/ExposureConfigurationImpl.h\"\n+#include \"LE1_NISP_Entities/ExposureConfigurationImpl.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n   ExposureConfigurationImpl::ExposureConfigurationImpl(const uint16_t expConf)\n   : m_expConf(expConf){}\n@@ -189,7 +189,7 @@ namespace LE1_NISP_ProcessScience {\n     return os;\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/OnBoardTimeBoost.cpp": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file src/lib/OnBoardTime.cpp\n+ * @file src/lib/OnBoardTimeBoost.cpp\n  * @date 06/12/20\n  * @author user\n  *\n@@ -21,63 +21,85 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/OnBoardTime.h\"\n+#include \"LE1_NISP_Entities/OnBoardTimeBoost.h\"\n #include <boost/date_time.hpp>\n #include <cmath>\n \n-namespace LE1_NISP {\n+namespace LE1_NISP_Entities {\n \n using namespace boost::posix_time;\n using namespace boost::gregorian;\n \n+  OnBoardTimeBoost::OnBoardTimeBoost(uint32_t coarseTime, uint16_t fineTime,\n+                                     int epochYear, unsigned short epochMonth, unsigned short epochDay) :\n+      DateTimeBoost(),\n+      m_coarseTime(coarseTime), m_fineTime(fineTime),\n+      m_epochYear(epochYear), m_epochMonth(epochMonth), m_epochDay(epochDay) {\n+    m_dateTime = ptime(date(epochYear, epochMonth, epochDay), seconds(coarseTime));\n+  }\n \n-  OnBoardTime::OnBoardTime(uint32_t coarseTime, uint16_t fineTime):\n-  m_coarseTime(coarseTime), m_fineTime(fineTime) {}\n-\n-  uint32_t OnBoardTime::coarseTime() const {\n+  uint32_t OnBoardTimeBoost::getCoarseTime() const {\n     return m_coarseTime;\n   }\n-  uint16_t OnBoardTime::fineTime() const {\n+\n+  uint16_t OnBoardTimeBoost::getFineTime() const {\n     return m_fineTime;\n   }\n-  uint32_t OnBoardTime::fineTimeMusec() const {\n+\n+  uint32_t OnBoardTimeBoost::getFineTimeMicroSeconds() const {\n     uint32_t restoredFineTime = m_fineTime;\n     return lround(double(restoredFineTime << 8) * 0.05 * SPC_DPU_CLOCK_RATIO);\n   }\n \n-  double OnBoardTime::getObtTotalSeconds() const {\n-    return coarseTime() + fineTimeMusec()*1E-6;\n+  double OnBoardTimeBoost::getTotalSeconds() const {\n+    return getCoarseTime() + getFineTimeMicroSeconds() * 1E-6;\n+  }\n+\n+  double OnBoardTimeBoost::getTotalMicroSeconds() const {\n+    return getTotalSeconds() * 1E6;\n   }\n \n   bool OnBoardTime::operator<(const OnBoardTime &rhs) const {\n-    return (m_coarseTime != rhs.m_coarseTime) ? m_coarseTime < rhs.m_coarseTime : m_fineTime < rhs.m_fineTime;\n-  }\n-\n-std::string OnBoardTime::toIsoExtended(int epoch) const\n-{\n-  date time_epoch(epoch, 1, 1);\n-  time_duration dt = seconds(m_coarseTime) + microseconds(fineTimeMusec());\n-  return (to_iso_extended_string(ptime(time_epoch, dt)));\n-}\n-\n-DateTime OnBoardTime::toDateTime(int epoch) const\n-{\n-  auto t = ptime(date(epoch, 1, 1), seconds(m_coarseTime));\n-  auto tdate = t.date();\n-  auto ttime = t.time_of_day();\n-  return {tdate.year(), tdate.month(), tdate.day(), \n-          (unsigned short)ttime.hours(), (unsigned short) ttime.minutes(), \n-          ttime.seconds() + fineTimeMusec()*1E-6};\n-}\n-\n-double OnBoardTime::toModifiedJulianDay(int epoch) const\n-{\n-  auto t = ptime(date(epoch, 1, 1), seconds(m_coarseTime));\n-  auto mjd = t.date().modjulian_day();\n-  auto ttime = t.time_of_day();\n-  return mjd + (ttime.total_seconds() + fineTimeMusec()*1E-6)/86400.0;\n-}\n+    return (getCoarseTime() != rhs.getCoarseTime()) ? getCoarseTime() < rhs.getCoarseTime() : getFineTime() < rhs.getFineTime();\n+  }\n+\n+  double OnBoardTimeBoost::getModifiedJulianDay() const {\n+    auto mjd = m_dateTime.date().modjulian_day();\n+    auto ttime = m_dateTime.time_of_day();\n+    return mjd + (ttime.total_seconds() + getFineTimeMicroSeconds()*1E-6)/86400.0;\n+  }\n+\n+  unsigned short OnBoardTimeBoost::getSeconds() const {\n+    return DateTimeBoost::getSeconds();\n+  }\n+\n+  int OnBoardTimeBoost::getYear() const {\n+    return DateTimeBoost::getYear();\n+  }\n+\n+  unsigned short OnBoardTimeBoost::getMonth() const {\n+    return DateTimeBoost::getMonth();\n+  }\n+\n+  unsigned short OnBoardTimeBoost::getDay() const {\n+    return DateTimeBoost::getDay();\n+  }\n+\n+  unsigned short OnBoardTimeBoost::getHours() const {\n+    return DateTimeBoost::getHours();\n+  }\n+\n+  unsigned short OnBoardTimeBoost::getMinutes() const {\n+    return DateTimeBoost::getMinutes();\n+  }\n \n+  std::string OnBoardTimeBoost::getIsoString() const {\n+    return DateTimeBoost::getIsoString();\n+  }\n+\n+  std::string OnBoardTimeBoost::getIsoExtendedString() const {\n+    return DateTimeBoost::getIsoExtendedString();\n+  }\n \n }  // namespace LE1_NISP\n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/Parameter.cpp": [
                        [
                            "@@ -21,9 +21,9 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/Parameter.h\"\n+#include \"LE1_NISP_Entities/Parameter.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n Parameter::Parameter(const std::shared_ptr<ParameterDescription> description, const std::any &value){\n     m_description = description;\n@@ -112,7 +112,7 @@ std::string Parameter::unrepresentableErrorStr(const std::string &requestedType)\n           \" cannot be represented as type \" + requestedType;\n }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/ParameterDescription.cpp": [
                        [
                            "@@ -21,9 +21,9 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/ParameterDescription.h\"\n+#include \"LE1_NISP_Entities/ParameterDescription.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n   ParameterDescription::ParameterDescription(const std::string &name, const unsigned int offset, const unsigned int offbit, const unsigned int size, const bool correctEndianness, const std::string &unit, const std::string &comment, const std::string &type)\n   : m_name(name),\n@@ -163,7 +163,7 @@ namespace LE1_NISP_ProcessScience {\n     return os;\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/PlanningIdGroundTests.cpp": [
                        [
                            "@@ -21,9 +21,9 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/PlanningIdGroundTests.h\"\n+#include \"LE1_NISP_Entities/PlanningIdGroundTests.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n   PlanningIdGroundTests::PlanningIdGroundTests(uint16_t pid1, uint16_t pid2):\n     m_planningId((pid1 << 16) + pid2) {}\n@@ -72,7 +72,7 @@ namespace LE1_NISP_ProcessScience {\n     return std::make_shared<PlanningIdGroundTests>(pid);\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/PlanningIdSoc20210215.cpp": [
                        [
                            "@@ -21,10 +21,10 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/PlanningIdSoc20210215.h\"\n-#include \"LE1_NISP_ProcessScience/Exception.h\"\n+#include \"LE1_NISP_Entities/PlanningIdSoc20210215.h\"\n+#include \"LE1_NISP_Entities/Exception.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n   PlanningIdSoc20210215::PlanningIdSoc20210215(uint16_t pid1, uint16_t pid2)\n   : PlanningIdSoc20210215((pid1 << 16) + pid2){}\n@@ -92,7 +92,7 @@ namespace LE1_NISP_ProcessScience {\n     return std::make_shared<PlanningIdSoc20210215>(pid);\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/TelemetryConfiguration.cpp": [
                        [
                            "@@ -21,9 +21,9 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/TelemetryConfiguration.h\"\n+#include \"LE1_NISP_Entities/TelemetryConfiguration.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n     \n     TelemetryConfiguration::TelemetryConfiguration()\n     : m_numberOfDetectors(16),\n@@ -420,7 +420,7 @@ namespace LE1_NISP_ProcessScience {\n     m_historyNumberOfValues = numberOfValues;\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/TelemetryFile.cpp": [
                        [
                            "@@ -21,15 +21,15 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/TelemetryFile.h\"\n-#include \"LE1_NISP_ProcessScience/ByteArrayCreatorStandard.h\"\n+#include \"LE1_NISP_Entities/TelemetryFile.h\"\n+#include \"LE1_NISP_Entities/ByteArrayCreatorStandard.h\"\n #include \"ElementsKernel/Logging.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n   TelemetryFile::TelemetryFile()\n   : m_lastPos(0)\n   {\n-    setByteArrayCreator(std::make_shared<ByteArrayCreatorStandard>());\n+    setByteArrayCreator(std::make_shared<LE1_NISP_Entities::ByteArrayCreatorStandard>());\n   }\n   \n   TelemetryFile::TelemetryFile(const std::string &filename): TelemetryFile(){\n@@ -64,7 +64,7 @@ namespace LE1_NISP_ProcessScience {\n       m_filestream.seekg(0);\n   }\n \n-  std::shared_ptr<ByteArray> TelemetryFile::readBytes(const long offset, const long numberOfBytes) {\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> TelemetryFile::readBytes(const long offset, const long numberOfBytes) {\n     validateFileHasBeenInited(\"TelemetryFile::readBytes: \");\n     if(!m_byteArrayCreator)\n       throw NullByteArrayCreatorException(\"TelemetryFile::readBytes: cannot read bytes with nullptr ByteArrayCreator\");\n@@ -97,7 +97,7 @@ namespace LE1_NISP_ProcessScience {\n     return (end - begin);\n   }\n \n-  void TelemetryFile::setByteArrayCreator(const std::shared_ptr<ByteArrayCreator> creator){\n+  void TelemetryFile::setByteArrayCreator(const std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> creator){\n     m_byteArrayCreator = creator;\n   }\n   \n@@ -133,10 +133,10 @@ namespace LE1_NISP_ProcessScience {\n     return tmFile;\n   }\n \n-  void TelemetryFileCreator::setByteArrayCreator(const std::shared_ptr<ByteArrayCreator> byteArrCreator) {\n+  void TelemetryFileCreator::setByteArrayCreator(const std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> byteArrCreator) {\n     m_byteArrayCreator = byteArrCreator;\n   }\n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/TelemetrySection.cpp": [
                        [
                            "@@ -21,9 +21,9 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/TelemetrySection.h\"\n+#include \"LE1_NISP_Entities/TelemetrySection.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n   TelemetrySection::TelemetrySection(const size_t offset, const size_t size, const size_t padding)\n     : m_offset(offset), \n@@ -75,7 +75,7 @@ namespace LE1_NISP_ProcessScience {\n     return os;\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/TelemetrySectionDetector.cpp": [
                        [
                            "@@ -21,9 +21,9 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/TelemetryDetector.h\"\n+#include \"LE1_NISP_Entities/TelemetryDetector.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n     TelemetryDetector::TelemetryDetector(const std::shared_ptr<TelemetryFile> tmFile, const unsigned long startPosition, const unsigned long endPosition){\n       if(tmFile == nullptr)\n@@ -69,7 +69,7 @@ namespace LE1_NISP_ProcessScience {\n       return path.substr(path.find_last_of(\"/\\\\\") + 1);\n     }\n \n-    std::shared_ptr<ByteArray> TelemetryDetector::readBytes(const long offset, const long numberOfBytes){\n+    std::shared_ptr<LE1_NISP_Entities::ByteArray> TelemetryDetector::readBytes(const long offset, const long numberOfBytes){\n       if(m_startPos + offset + (numberOfBytes-1) > m_endPos)\n           throw BytesToBeReadExceedTelemetryDetectorEndPositionException(\"TelemetryDetector::readBytes: reading error. \"\n                                                                           \"TelemetryDetector start = \" + std::to_string(m_startPos) + \", \"\n@@ -79,7 +79,7 @@ namespace LE1_NISP_ProcessScience {\n       return m_tmFile->readBytes(m_startPos + offset, numberOfBytes);\n     }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/src/lib/Wcs.cpp": [
                        [
                            "@@ -21,9 +21,9 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/Wcs.h\"\n+#include \"LE1_NISP_Entities/Wcs.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n   Wcs::Wcs(const Eigen::Matrix2d &cdMatrix,\n            const Euclid::Image::Point2D &pCrPix,\n@@ -80,7 +80,7 @@ namespace LE1_NISP_ProcessScience {\n     return !(rhs == *this);\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Entities\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/include/ByteArrayMock.h": [
                        [
                            "@@ -1,6 +1,6 @@\n \n  /**\n- * @file LE1_NISP_ProcessScience/tests/include/ByteArrayMock.h\n+ * @file LE1_NISP_Entities/tests/include/ByteArrayMock.h\n  * @date 11/24/20\n  * @author user\n  *\n@@ -22,23 +22,23 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_BYTEARRAYMOCK_H\n-#define _LE1_NISP_PROCESSSCIENCE_BYTEARRAYMOCK_H\n+#ifndef _LE1_NISP_ENTITIES_BYTEARRAYMOCK_H\n+#define _LE1_NISP_ENTITIES_BYTEARRAYMOCK_H\n \n-#include <time.h>\n-#include \"LE1_NISP_ProcessScience//ByteArray.h\"\n-#include \"LE1_NISP_ProcessScience//ByteArrayStandard.h\"\n+#include <ctime>\n+#include \"LE1_NISP_Entities/ByteArray.h\"\n+#include \"LE1_NISP_Entities/ByteArrayStandard.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n-class ByteArrayDummy: public ByteArray{\n+class ByteArrayDummy: public LE1_NISP_Entities::ByteArray{\n public:\n   virtual ~ByteArrayDummy(){}\n \n-  inline virtual std::shared_ptr<ByteArray> clone() const override{\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> clone() const override{\n     return  nullptr;\n   } \n-  inline virtual std::shared_ptr<ByteArray> swap16() const override{\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> swap16() const override{\n     return clone();\n   } \n   inline virtual uint8_t& operator [](const unsigned int i) override{\n@@ -71,26 +71,26 @@ private:\n   }\n };\n \n-class ByteArrayVector: public ByteArrayStandard{\n+class ByteArrayVector: public LE1_NISP_Entities::ByteArrayStandard{\n public:\n-  ByteArrayVector(const std::vector<uint8_t> &bytes = {}): ByteArrayStandard(bytes){}\n+  ByteArrayVector(const std::vector<uint8_t> &bytes = {}): LE1_NISP_Entities::ByteArrayStandard(bytes){}\n   virtual ~ByteArrayVector(){}\n   \n-  inline virtual std::shared_ptr<ByteArray> swap16() const override{\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> swap16() const override{\n     return clone();\n   } \n };\n \n-class ByteArrayRandom: public ByteArrayStandard{\n+class ByteArrayRandom: public LE1_NISP_Entities::ByteArrayStandard{\n public:\n-  ByteArrayRandom(const size_t size): ByteArrayStandard(size){\n+  ByteArrayRandom(const size_t size): LE1_NISP_Entities::ByteArrayStandard(size){\n     srand(time(nullptr));\n     for(int i = 0; i < (int)getSize(); ++i)\n       operator[](i) = rand()%256;\n   }\n   virtual ~ByteArrayRandom(){}\n \n-  inline virtual std::shared_ptr<ByteArray> swap16() const override{\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> swap16() const override{\n     return clone();\n   } \n };\n@@ -107,6 +107,6 @@ private:\n \n };\n \n-}// namespace LE1_NISP_ProcessScience\n+}// namespace LE1_NISP_Entities\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/include/DetectorMetadataMock.h": [
                        [
                            "@@ -1,6 +1,6 @@\n \n  /**\n- * @file LE1_NISP_ProcessScience/tests/include/DetectorMetadataMock.h\n+ * @file LE1_NISP_Entities/tests/include/DetectorMetadataMock.h\n  * @date 11/24/20\n  * @author user\n  *\n@@ -22,15 +22,16 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORMETADATAMOCK_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORMETADATAMOCK_H\n+#ifndef _LE1_NISP_ENTITIES_DETECTORMETADATAMOCK_H\n+#define _LE1_NISP_ENTITIES_DETECTORMETADATAMOCK_H\n \n-#include \"LE1_NISP_ProcessScience//DetectorMetadata.h\"\n-#include \"LE1_NISP_ProcessScience//tests/include/ParameterMock.h\"\n+#include \"LE1_NISP_Entities/DetectorMetadata.h\"\n+#include \"tests/include/ParameterMock.h\"\n+#include \"tests/include/ObtMock.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n-class DetectorMetadataDummy: public DetectorMetadata{\n+class DetectorMetadataDummy: public LE1_NISP_Entities::DetectorMetadata{\n public:\n   DetectorMetadataDummy(){}\n   ~DetectorMetadataDummy() override = default;\n@@ -42,8 +43,8 @@ public:\n     (void) paramName;\n     return false;\n   }\n-  inline void addParameter(const std::shared_ptr<ParameterInterface> param) override {(void) param;}\n-  inline std::shared_ptr<const ParameterInterface> getParameter(const std::string &paramName) const override {\n+  inline void addParameter(const std::shared_ptr<LE1_NISP_Entities::ParameterInterface> param) override {(void) param;}\n+  inline std::shared_ptr<const LE1_NISP_Entities::ParameterInterface> getParameter(const std::string &paramName) const override {\n     (void) paramName;\n     return nullptr;\n   }\n@@ -54,8 +55,8 @@ public:\n     (void) paramName;\n     return false;\n   }\n-  inline void addCommonParameter(const std::shared_ptr<ParameterInterface> param) override {(void) param;}\n-  inline std::shared_ptr<const ParameterInterface> getCommonParameter(const std::string &paramName) const override {\n+  inline void addCommonParameter(const std::shared_ptr<LE1_NISP_Entities::ParameterInterface> param) override {(void) param;}\n+  inline std::shared_ptr<const LE1_NISP_Entities::ParameterInterface> getCommonParameter(const std::string &paramName) const override {\n     (void) paramName;\n     return nullptr;\n   }\n@@ -65,24 +66,24 @@ public:\n   inline uint8_t getAcquisitionCounter() const override { return 0; }\n   inline uint8_t getMaccGroups() const override { return 0; }\n   inline uint8_t getMaccFramesPerGroup() const override { return 0; }\n-  inline uint8_t getMaccDropedFrames() const override { return 0; }\n+  inline uint8_t getMaccDroppedFrames() const override { return 0; }\n \n   inline std::string getReadoutMode() const override { return \"\"; }\n \n   inline double getFrameTime() const override { return 0; } \n   inline double getLineTime() const override { return 0; } \n \n-  inline std::shared_ptr<PlanningId> getPlanningId() const override { return nullptr; }\n+  inline std::shared_ptr<LE1_NISP_Entities::PlanningId> getPlanningId() const override { return nullptr; }\n   inline uint16_t getPid1() const override { return 0; }\n   inline uint16_t getPid2() const override { return 0; }\n \n-  inline std::shared_ptr<ExposureConfiguration> getExposureConfiguration() const override{ return nullptr; }\n+  inline std::shared_ptr<LE1_NISP_Entities::ExposureConfiguration> getExposureConfiguration() const override{ return nullptr; }\n   inline uint16_t getExposureConfigValue() const override { return 0; }\n \n   inline uint16_t getObt1() const override { return 0; }\n   inline uint16_t getObt2() const override { return 0; }\n   inline uint16_t getObt3() const override { return 0; }\n-  inline std::shared_ptr<LE1_NISP::OnBoardTime> getObt() const override { return std::make_shared<LE1_NISP::OnBoardTime>(0, 0); }\n+  inline std::shared_ptr<OnBoardTime> getObt() const override { return std::make_shared<ObtDummy>(); }\n \n   inline uint16_t getAcquisitionResets() const override { return 0; }\n   inline uint16_t getAcquisitionReads() const override { return 0; }\n@@ -126,7 +127,7 @@ public:\n   inline uint8_t getSceId() const override {return 0; }\n   inline uint8_t getPacketType() const override { return 0; }\n \n-  inline DetectorId getDetectorId() const override { return DetectorId(); }\n+  inline LE1_NISP_Entities::DetectorId getDetectorId() const override { return LE1_NISP_Entities::DetectorId(); }\n   inline std::string getScaId() const override { return \"\"; }\n \n   inline uint16_t getValidCommandCounter() const override { return 0; }\n@@ -158,7 +159,7 @@ public:\n   inline double getExposureTime() const override { return 0; }\n   inline double getElapsedTime() const override { return 0; }\n \n-  Wcs getWcs() const override { return Wcs(); }\n+  LE1_NISP_Entities::Wcs getWcs() const override { return LE1_NISP_Entities::Wcs(); }\n \n   inline double getScienceCompressionRatio() const override { return 0; }\n   inline void setScienceCompressionRatio(double ratio) override { (void) ratio; }\n@@ -178,13 +179,13 @@ public:\n     m_scienceComprRatio(0.0),\n     m_qualityDataComprRatio(0.0),\n     m_masterDpuId(0),\n-    m_obt(std::make_shared<LE1_NISP::OnBoardTime>(0, 0)){}\n+    m_obt(std::make_shared<ObtDummy>()){}\n \n   virtual ~DetectorMetadataStubCustomReturns() = default;\n \n-  inline void setPlanningId(const std::shared_ptr<PlanningId> pid) { m_pid = pid; }\n-  inline void setDetectorId(const DetectorId &id) { m_detId = id; }\n-  inline void setExposureConfiguration(const std::shared_ptr<ExposureConfiguration> expConf) { m_expConf = expConf; }\n+  inline void setPlanningId(const std::shared_ptr<LE1_NISP_Entities::PlanningId> pid) { m_pid = pid; }\n+  inline void setDetectorId(const LE1_NISP_Entities::DetectorId &id) { m_detId = id; }\n+  inline void setExposureConfiguration(const std::shared_ptr<LE1_NISP_Entities::ExposureConfiguration> expConf) { m_expConf = expConf; }\n   inline void setProductId(const std::string &prodId){ m_prodId = prodId; }\n   inline void setMaccGroups(const uint8_t groups){ m_groups = groups; }\n   inline void setMaccFramesPerGroup(const uint8_t frames){ m_framesPerGroup = frames; }\n@@ -193,16 +194,16 @@ public:\n   inline void setUsedComprFundSeqPar2(const uint16_t comprFundSeqPar2){ m_comprFundSeqPar2 = comprFundSeqPar2; }\n   inline void setExposureTime(const double expTime){ m_expTime = expTime; }\n   inline void setMasterDpuId(const uint8_t masterDpuId){ m_masterDpuId = masterDpuId; }\n-  inline void setObt(const std::shared_ptr<LE1_NISP::OnBoardTime> obt){ m_obt = obt; }\n+  inline void setObt(const std::shared_ptr<OnBoardTime> obt){ m_obt = obt; }\n \n-  inline std::shared_ptr<const ParameterInterface> getParameter(const std::string &name) const override{\n+  inline std::shared_ptr<const LE1_NISP_Entities::ParameterInterface> getParameter(const std::string &name) const override{\n     return std::make_shared<ParameterStubNameOnly>(name);\n-  }  inline std::shared_ptr<const ParameterInterface> getCommonParameter(const std::string &name) const override{\n+  }  inline std::shared_ptr<const LE1_NISP_Entities::ParameterInterface> getCommonParameter(const std::string &name) const override{\n     return std::make_shared<ParameterStubNameOnly>(name);\n   }\n-  inline std::shared_ptr<PlanningId> getPlanningId() const override { return m_pid; }\n-  inline DetectorId getDetectorId() const override { return m_detId; }\n-  inline std::shared_ptr<ExposureConfiguration> getExposureConfiguration() const override{ return m_expConf; }\n+  inline std::shared_ptr<LE1_NISP_Entities::PlanningId> getPlanningId() const override { return m_pid; }\n+  inline LE1_NISP_Entities::DetectorId getDetectorId() const override { return m_detId; }\n+  inline std::shared_ptr<LE1_NISP_Entities::ExposureConfiguration> getExposureConfiguration() const override{ return m_expConf; }\n   inline std::string getProductId() const override{ return m_prodId; }\n   inline uint8_t getMaccGroups() const override{ return m_groups; }\n   inline uint8_t getMaccFramesPerGroup() const override{ return m_framesPerGroup; }\n@@ -211,7 +212,7 @@ public:\n   inline uint16_t getUsedComprFundSeqPar2() const override { return m_comprFundSeqPar2; }\n   inline double getExposureTime() const override { return m_expTime; }\n   inline uint8_t getMasterDpuId() const override { return m_masterDpuId; }\n-  inline std::shared_ptr<LE1_NISP::OnBoardTime> getObt() const override { return m_obt; }\n+  inline std::shared_ptr<OnBoardTime> getObt() const override { return m_obt; }\n \n   inline double getScienceCompressionRatio() const override { return m_scienceComprRatio; }\n   inline void setScienceCompressionRatio(double ratio) override { m_scienceComprRatio = ratio; }\n@@ -219,9 +220,9 @@ public:\n   inline void setQualityDataCompressionRatio(double ratio) override { m_qualityDataComprRatio = ratio; }\n \n protected:\n-  std::shared_ptr<PlanningId> m_pid;\n-  DetectorId m_detId;\n-  std::shared_ptr<ExposureConfiguration> m_expConf;\n+  std::shared_ptr<LE1_NISP_Entities::PlanningId> m_pid;\n+  LE1_NISP_Entities::DetectorId m_detId;\n+  std::shared_ptr<LE1_NISP_Entities::ExposureConfiguration> m_expConf;\n   std::string m_prodId;\n   uint8_t m_groups;\n   uint8_t m_framesPerGroup;\n@@ -232,7 +233,7 @@ protected:\n   double m_scienceComprRatio;\n   double m_qualityDataComprRatio;\n   uint8_t m_masterDpuId;\n-  std::shared_ptr<LE1_NISP::OnBoardTime> m_obt;\n+  std::shared_ptr<OnBoardTime> m_obt;\n };\n \n class DetMetadataReturnParamsMapOrNameOnlyParam: public DetectorMetadataStubCustomReturns{\n@@ -240,27 +241,27 @@ public:\n   DetMetadataReturnParamsMapOrNameOnlyParam(): DetectorMetadataStubCustomReturns(){}\n   virtual ~DetMetadataReturnParamsMapOrNameOnlyParam(){}\n \n-  inline void setParamsMap(const std::map<std::string, std::shared_ptr<ParameterInterface>> &map){\n+  inline void setParamsMap(const std::map<std::string, std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> &map){\n     m_paramsMap = map;\n   }\n \n-  inline std::shared_ptr<const ParameterInterface> getParameter(const std::string &name) const override{\n+  inline std::shared_ptr<const LE1_NISP_Entities::ParameterInterface> getParameter(const std::string &name) const override{\n     if(m_paramsMap.count(name))\n       return m_paramsMap.at(name);\n     return std::make_shared<ParameterStubNameOnly>(name);\n   }\n-  inline std::shared_ptr<const ParameterInterface> getCommonParameter(const std::string &name) const override{\n+  inline std::shared_ptr<const LE1_NISP_Entities::ParameterInterface> getCommonParameter(const std::string &name) const override{\n     return getParameter(name);\n   }\n \n private:\n-  std::map<std::string, std::shared_ptr<ParameterInterface>> m_paramsMap;\n+  std::map<std::string, std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> m_paramsMap;\n };\n \n-class MetadataCreatorStub: public DetectorMetadataCreator{\n+class MetadataCreatorStub: public LE1_NISP_Entities::DetectorMetadataCreator{\n public:\n   MetadataCreatorStub() = default;\n-  virtual std::shared_ptr<DetectorMetadata> createDetectorMetadata() override{\n+  virtual std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> createDetectorMetadata() override{\n     return std::make_shared<DetMetadataReturnParamsMapOrNameOnlyParam>();\n   }\n \n@@ -271,7 +272,7 @@ public:\n   inline bool hasParameter(const std::string &paramName) const override{\n     return params.count(paramName) > 0;\n   }\n-  inline void addParameter(const std::shared_ptr<ParameterInterface> param) override {\n+  inline void addParameter(const std::shared_ptr<LE1_NISP_Entities::ParameterInterface> param) override {\n     params.insert({param->getName(), param});\n   }\n \n@@ -279,7 +280,7 @@ public:\n     return params.size();\n   }\n \n-  inline std::shared_ptr<const ParameterInterface> getParameter(const std::string &paramName) const override{\n+  inline std::shared_ptr<const LE1_NISP_Entities::ParameterInterface> getParameter(const std::string &paramName) const override{\n     if(hasParameter(paramName))\n       return params.at(paramName);\n     return nullptr;\n@@ -288,7 +289,7 @@ public:\n   inline bool hasCommonParameter(const std::string &paramName) const override{\n     return commonParams.count(paramName) > 0;\n   }\n-  inline void addCommonParameter(const std::shared_ptr<ParameterInterface> param) override {\n+  inline void addCommonParameter(const std::shared_ptr<LE1_NISP_Entities::ParameterInterface> param) override {\n     commonParams.insert({param->getName(), param});\n   }\n \n@@ -296,27 +297,27 @@ public:\n     return commonParams.size();\n   }\n \n-  inline std::shared_ptr<const ParameterInterface> getCommonParameter(const std::string &paramName) const override{\n+  inline std::shared_ptr<const LE1_NISP_Entities::ParameterInterface> getCommonParameter(const std::string &paramName) const override{\n     if(hasCommonParameter(paramName))\n       return commonParams.at(paramName);\n     return nullptr;\n   }\n \n private:\n-  std::map<std::string, std::shared_ptr<ParameterInterface>> params;\n-  std::map<std::string, std::shared_ptr<ParameterInterface>> commonParams;\n+  std::map<std::string, std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> params;\n+  std::map<std::string, std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> commonParams;\n \n };\n \n-class MetadataCreatorSpy: public DetectorMetadataCreator{\n+class MetadataCreatorSpy: public LE1_NISP_Entities::DetectorMetadataCreator{\n public:\n   MetadataCreatorSpy() = default;\n-  virtual std::shared_ptr<DetectorMetadata> createDetectorMetadata() override{\n+  virtual std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> createDetectorMetadata() override{\n     return std::make_shared<DetMetadataCollectParam>();\n   }\n \n };\n \n-}// namespace LE1_NISP_ProcessScience\n+}// namespace LE1_NISP_Entities\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/include/DetectorMock.h": [
                        [
                            "@@ -1,6 +1,6 @@\n \n  /**\n- * @file LE1_NISP_ProcessScience/tests/include/DetectorMock.h\n+ * @file LE1_NISP_Entities/tests/include/DetectorMock.h\n  * @date 01/27/21\n  * @author user\n  *\n@@ -22,76 +22,77 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORMOCK_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORMOCK_H\n+#ifndef _LE1_NISP_ENTITIES_DETECTORMOCK_H\n+#define _LE1_NISP_ENTITIES_DETECTORMOCK_H\n \n-#include \"LE1_NISP_ProcessScience//Detector.h\"\n-#include \"LE1_NISP_ProcessScience//DetectorImpl.h\"\n+#include \"LE1_NISP_Entities/Detector.h\"\n+#include \"LE1_NISP_Entities/DetectorImpl.h\"\n+#include \"tests/include/ObtMock.h\"\n \n-namespace LE1_NISP_ProcessScience{\n+namespace LE1_NISP_Entities{\n \n-class DetectorDummy: public Detector{\n+class DetectorDummy: public LE1_NISP_Entities::Detector {\n public:\n   DetectorDummy(){}\n   virtual ~DetectorDummy(){}\n \n-  inline virtual void setHeader(const DetectorHeader &header) { (void) header; }\n-  inline virtual DetectorHeader getHeader() const override { return DetectorHeader(); }\n+  inline virtual void setHeader(const LE1_NISP_Entities::DetectorHeader &header) { (void) header; }\n+  inline virtual LE1_NISP_Entities::DetectorHeader getHeader() const override { return LE1_NISP_Entities::DetectorHeader(); }\n \n-  inline virtual void setTelemetryDetector(const std::shared_ptr<TelemetryDetectorInterface> tmDetector) override { (void) tmDetector; }\n-  inline virtual std::shared_ptr<TelemetryDetectorInterface> getTelemetryDetector() const override { return nullptr; }\n+  inline virtual void setTelemetryDetector(const std::shared_ptr<LE1_NISP_Entities::TelemetryDetectorInterface> tmDetector) override { (void) tmDetector; }\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::TelemetryDetectorInterface> getTelemetryDetector() const override { return nullptr; }\n   \n-  inline virtual void setMetadata(const std::shared_ptr<DetectorMetadata> metadata) override { (void) metadata; }\n-  inline virtual std::shared_ptr<DetectorMetadata> getMetadata() const override { return nullptr; }\n-\n-  inline virtual void setRawlines(const std::shared_ptr<ByteArray> rawLines) override { (void) rawLines; }\n-  inline virtual std::shared_ptr<ByteArray> getRawLines() const override { return nullptr; }\n-  inline virtual void setEngData(const std::shared_ptr<ByteArray> engData) override{ (void) engData; }\n-  inline virtual std::shared_ptr<ByteArray> getEngData() const override{ return nullptr; }\n-  inline virtual void setScienceData(const std::shared_ptr<ByteArray> data) override{ (void) data; }\n-  inline virtual std::shared_ptr<ByteArray> getScienceData() const override{ return nullptr; }\n-  inline virtual void setQualityData(const std::shared_ptr<ByteArray> data) override{ (void) data; }\n-  inline virtual std::shared_ptr<ByteArray> getQualityData() const override{ return nullptr; }\n-  inline virtual void setAnalogTelemetry(const std::shared_ptr<ByteArray> data) override { (void) data; }\n-  inline virtual std::shared_ptr<ByteArray> getAnalogTelemetry() const override { return nullptr; }\n-  inline virtual void setErrorsData(const std::shared_ptr<ByteArray> data) override { (void) data; }\n-  inline virtual std::shared_ptr<ByteArray> getErrorsData() const override { return nullptr; }\n-  inline virtual void setHistoryData(const std::shared_ptr<ByteArray> data) override { (void) data; }\n-  inline virtual std::shared_ptr<ByteArray> getHistoryData() const override { return nullptr; }\n-\n-  inline virtual DetectorId getId() const override { return DetectorId(0, 0, \"\"); }\n-  inline virtual std::shared_ptr<LE1_NISP::OnBoardTime> getObt() const override { return std::make_shared<LE1_NISP::OnBoardTime>(0, 0); }\n-\n-  inline virtual void setTelemetryConfiguration(const std::shared_ptr<TelemetryConfiguration> tmConfig) { (void) tmConfig; }\n-  inline virtual std::shared_ptr<TelemetryConfiguration> getTelemetryConfiguration() const override { return nullptr; }\n-\n-  inline virtual void setSyncSection(const std::shared_ptr<TelemetrySection> section) override { (void) section; }\n-  inline virtual void setDigitalTmSection(const std::shared_ptr<TelemetrySection> section) override { (void) section; }\n-  inline virtual void setRawlinesSection(const std::shared_ptr<TelemetrySection> section) override { (void) section; }\n-  inline virtual void setScienceSection(const std::shared_ptr<TelemetrySection> section) override { (void) section; }\n-  inline virtual void setTail1Section(const std::shared_ptr<TelemetrySection> section) override { (void) section; }\n-  inline virtual void setQualityDataSection(const std::shared_ptr<TelemetrySection> section) override { (void) section; }\n-  inline virtual void setTail2Section(const std::shared_ptr<TelemetrySection> section) override { (void) section; }\n-  inline virtual void setAnalogTmSection(const std::shared_ptr<TelemetrySection> section) override { (void) section; }\n-  inline virtual void setHistorySection(const std::shared_ptr<TelemetrySection> section) override { (void) section; }\n-  inline virtual void setErrorsSection(const std::shared_ptr<TelemetrySection> section) override { (void) section; }\n-  inline virtual void setTail3Section(const std::shared_ptr<TelemetrySection> section) override { (void) section; }\n-  inline virtual void setEngSections(const std::vector<std::shared_ptr<TelemetrySection>> sections) override { (void) sections; }\n-  inline virtual void setTail4Section(const std::shared_ptr<TelemetrySection> section) override { (void) section; }\n-\n-  inline virtual std::shared_ptr<TelemetrySection> getSyncSection() const override { return nullptr; }\n-  inline virtual std::shared_ptr<TelemetrySection> getDigitalTmSection() const override { return nullptr; }\n-  inline virtual std::shared_ptr<TelemetrySection> getRawlinesSection() const override { return nullptr; }\n-  inline virtual std::shared_ptr<TelemetrySection> getScienceSection() const override { return nullptr; }\n-  inline virtual std::shared_ptr<TelemetrySection> getTail1Section() const  override { return nullptr; }\n-  inline virtual std::shared_ptr<TelemetrySection> getQualityDataSection() const override { return nullptr; }\n-  inline virtual std::shared_ptr<TelemetrySection> getTail2Section() const  override { return nullptr; }\n-  inline virtual std::shared_ptr<TelemetrySection> getAnalogTmSection() const override { return nullptr; }\n-  inline virtual std::shared_ptr<TelemetrySection> getHistorySection() const override { return nullptr; }\n-  inline virtual std::shared_ptr<TelemetrySection> getErrorsSection() const override { return nullptr; }\n-  inline virtual std::shared_ptr<TelemetrySection> getTail3Section() const  override { return nullptr; }\n-  inline virtual std::vector<std::shared_ptr<TelemetrySection>> getEngSections() const override { return {}; }\n-  inline virtual std::shared_ptr<TelemetrySection> getTail4Section() const  override { return nullptr; }\n+  inline virtual void setMetadata(const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> metadata) override { (void) metadata; }\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> getMetadata() const override { return nullptr; }\n+\n+  inline virtual void setRawlines(const std::shared_ptr<LE1_NISP_Entities::ByteArray> rawLines) override { (void) rawLines; }\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> getRawLines() const override { return nullptr; }\n+  inline virtual void setEngData(const std::shared_ptr<LE1_NISP_Entities::ByteArray> engData) override{ (void) engData; }\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> getEngData() const override{ return nullptr; }\n+  inline virtual void setScienceData(const std::shared_ptr<LE1_NISP_Entities::ByteArray> data) override{ (void) data; }\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> getScienceData() const override{ return nullptr; }\n+  inline virtual void setQualityData(const std::shared_ptr<LE1_NISP_Entities::ByteArray> data) override{ (void) data; }\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> getQualityData() const override{ return nullptr; }\n+  inline virtual void setAnalogTelemetry(const std::shared_ptr<LE1_NISP_Entities::ByteArray> data) override { (void) data; }\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> getAnalogTelemetry() const override { return nullptr; }\n+  inline virtual void setErrorsData(const std::shared_ptr<LE1_NISP_Entities::ByteArray> data) override { (void) data; }\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> getErrorsData() const override { return nullptr; }\n+  inline virtual void setHistoryData(const std::shared_ptr<LE1_NISP_Entities::ByteArray> data) override { (void) data; }\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> getHistoryData() const override { return nullptr; }\n+\n+  inline virtual LE1_NISP_Entities::DetectorId getId() const override { return LE1_NISP_Entities::DetectorId(0, 0, \"\"); }\n+  inline virtual std::shared_ptr<OnBoardTime> getObt() const override { return std::make_shared<LE1_NISP_Entities::ObtDummy>(); }\n+\n+  inline virtual void setTelemetryConfiguration(const std::shared_ptr<LE1_NISP_Entities::TelemetryConfiguration> tmConfig) { (void) tmConfig; }\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::TelemetryConfiguration> getTelemetryConfiguration() const override { return nullptr; }\n+\n+  inline virtual void setSyncSection(const std::shared_ptr<LE1_NISP_Entities::TelemetrySection> section) override { (void) section; }\n+  inline virtual void setDigitalTmSection(const std::shared_ptr<LE1_NISP_Entities::TelemetrySection> section) override { (void) section; }\n+  inline virtual void setRawlinesSection(const std::shared_ptr<LE1_NISP_Entities::TelemetrySection> section) override { (void) section; }\n+  inline virtual void setScienceSection(const std::shared_ptr<LE1_NISP_Entities::TelemetrySection> section) override { (void) section; }\n+  inline virtual void setTail1Section(const std::shared_ptr<LE1_NISP_Entities::TelemetrySection> section) override { (void) section; }\n+  inline virtual void setQualityDataSection(const std::shared_ptr<LE1_NISP_Entities::TelemetrySection> section) override { (void) section; }\n+  inline virtual void setTail2Section(const std::shared_ptr<LE1_NISP_Entities::TelemetrySection> section) override { (void) section; }\n+  inline virtual void setAnalogTmSection(const std::shared_ptr<LE1_NISP_Entities::TelemetrySection> section) override { (void) section; }\n+  inline virtual void setHistorySection(const std::shared_ptr<LE1_NISP_Entities::TelemetrySection> section) override { (void) section; }\n+  inline virtual void setErrorsSection(const std::shared_ptr<LE1_NISP_Entities::TelemetrySection> section) override { (void) section; }\n+  inline virtual void setTail3Section(const std::shared_ptr<LE1_NISP_Entities::TelemetrySection> section) override { (void) section; }\n+  inline virtual void setEngSections(const std::vector<std::shared_ptr<LE1_NISP_Entities::TelemetrySection>> sections) override { (void) sections; }\n+  inline virtual void setTail4Section(const std::shared_ptr<LE1_NISP_Entities::TelemetrySection> section) override { (void) section; }\n+\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::TelemetrySection> getSyncSection() const override { return nullptr; }\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::TelemetrySection> getDigitalTmSection() const override { return nullptr; }\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::TelemetrySection> getRawlinesSection() const override { return nullptr; }\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::TelemetrySection> getScienceSection() const override { return nullptr; }\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::TelemetrySection> getTail1Section() const  override { return nullptr; }\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::TelemetrySection> getQualityDataSection() const override { return nullptr; }\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::TelemetrySection> getTail2Section() const  override { return nullptr; }\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::TelemetrySection> getAnalogTmSection() const override { return nullptr; }\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::TelemetrySection> getHistorySection() const override { return nullptr; }\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::TelemetrySection> getErrorsSection() const override { return nullptr; }\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::TelemetrySection> getTail3Section() const  override { return nullptr; }\n+  inline virtual std::vector<std::shared_ptr<LE1_NISP_Entities::TelemetrySection>> getEngSections() const override { return {}; }\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::TelemetrySection> getTail4Section() const  override { return nullptr; }\n \n   inline bool isQualityDataPhotoCompressed() const{ return false; }\n   inline bool isQualityDataSpectroCompressed() const{ return false; }\n@@ -106,8 +107,8 @@ public:\n   DetectorStubIdOnly(const std::string &id): m_scePos(id){}\n   inline virtual ~DetectorStubIdOnly(){}\n \n-  inline virtual DetectorId getId() const override{\n-    return DetectorId(0, 0, m_scePos);\n+  inline virtual LE1_NISP_Entities::DetectorId getId() const override{\n+    return LE1_NISP_Entities::DetectorId(0, 0, m_scePos);\n   }\n \n private:\n@@ -116,18 +117,18 @@ private:\n \n class DetectorStubCustomObt: public DetectorStubIdOnly{\n public:\n-    DetectorStubCustomObt(const std::string &id, const std::shared_ptr<LE1_NISP::OnBoardTime> obt)\n+    DetectorStubCustomObt(const std::string &id, const std::shared_ptr<OnBoardTime> obt)\n     : DetectorStubIdOnly(id), m_obt(obt){}\n     inline virtual ~DetectorStubCustomObt(){}\n \n-    inline virtual std::shared_ptr<LE1_NISP::OnBoardTime> getObt() const override { return m_obt; }\n+    inline virtual std::shared_ptr<OnBoardTime> getObt() const override { return m_obt; }\n \n \n private:\n-    std::shared_ptr<LE1_NISP::OnBoardTime> m_obt;\n+    std::shared_ptr<OnBoardTime> m_obt;\n };\n \n-class DetectorFake: public DetectorImpl{\n+class DetectorFake: public LE1_NISP_Entities::DetectorImpl{\n public:\n   DetectorFake()\n   : m_isQualityDataPhotoCompressed(false),\n@@ -139,8 +140,8 @@ public:\n   \n   virtual ~DetectorFake() = default;\n \n-  inline virtual void setId(const DetectorId &id){ m_scePos = id; }\n-  inline virtual DetectorId getId() const override { return m_scePos; }\n+  inline virtual void setId(const LE1_NISP_Entities::DetectorId &id){ m_scePos = id; }\n+  inline virtual LE1_NISP_Entities::DetectorId getId() const override { return m_scePos; }\n \n   inline void setIsQualityDataPhotoCompressed(const bool val) { m_isQualityDataPhotoCompressed = val; }\n   inline void setIsQualityDataSpectroCompressed(const bool val) { m_isQualityDataSpectroCompressed = val; }\n@@ -157,7 +158,7 @@ public:\n   inline virtual bool isHistoryCompressed() const override { return m_isHistoryCompressed; }\n \n private:\n-  DetectorId m_scePos;\n+  LE1_NISP_Entities::DetectorId m_scePos;\n   bool m_isQualityDataPhotoCompressed;\n   bool m_isQualityDataSpectroCompressed;\n   bool m_isScienceCompressed;\n@@ -167,6 +168,6 @@ private:\n   \n };\n \n-}// namespace LE1_NISP_ProcessScience\n+}// namespace LE1_NISP_Entities\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/include/ExposureConfigurationMock.h": [
                        [
                            "@@ -1,6 +1,6 @@\n \n  /**\n- * @file LE1_NISP_ProcessScience/tests/include/ExposureConfigurationMock.h\n+ * @file LE1_NISP_Entities/tests/include/ExposureConfigurationMock.h\n  * @date 02/08/2021\n  * @author user\n  *\n@@ -22,14 +22,14 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_EXPOSURECONFIGURATIONMOCK_H\n-#define _LE1_NISP_PROCESSSCIENCE_EXPOSURECONFIGURATIONMOCK_H\n+#ifndef _LE1_NISP_ENTITIES_EXPOSURECONFIGURATIONMOCK_H\n+#define _LE1_NISP_ENTITIES_EXPOSURECONFIGURATIONMOCK_H\n \n-#include \"LE1_NISP_ProcessScience//ExposureConfiguration.h\"\n+#include \"LE1_NISP_Entities/ExposureConfiguration.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n-class ExposureConfigDummy: public ExposureConfiguration{\n+class ExposureConfigDummy: public LE1_NISP_Entities::ExposureConfiguration{\n public:\n   ExposureConfigDummy() = default;\n   virtual ~ExposureConfigDummy() = default;\n@@ -301,24 +301,24 @@ private:\n \n };\n \n-class ExposureConfigCreatorDummy: public ExposureConfigurationCreator{\n+class ExposureConfigCreatorDummy: public LE1_NISP_Entities::ExposureConfigurationCreator{\n   public:\n-    inline std::shared_ptr<ExposureConfiguration> create(const uint16_t expConf) override{\n+    inline std::shared_ptr<LE1_NISP_Entities::ExposureConfiguration> create(const uint16_t expConf) override{\n       (void) expConf;\n       return std::make_shared<ExposureConfigDummy>();\n     }\n };\n \n-class ExposureConfigCreatorStub: public ExposureConfigurationCreator{\n+class ExposureConfigCreatorStub: public LE1_NISP_Entities::ExposureConfigurationCreator{\n   public:\n-    std::shared_ptr<ExposureConfiguration> expConfig;\n+    std::shared_ptr<LE1_NISP_Entities::ExposureConfiguration> expConfig;\n \n-    inline std::shared_ptr<ExposureConfiguration> create(const uint16_t expConf) override{\n+    inline std::shared_ptr<LE1_NISP_Entities::ExposureConfiguration> create(const uint16_t expConf) override{\n       (void) expConf;\n       return expConfig;\n     }\n };\n \n-}// namespace LE1_NISP_ProcessScience\n+}// namespace LE1_NISP_Entities\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/include/ObtMock.h": [
                        [
                            "@@ -0,0 +1,57 @@\n+\n+ /**\n+ * @file LE1_NISP_Entities/tests/include/ObtMock.h\n+ * @date 10/21/21\n+ * @author user\n+ *\n+ * @copyright (C) 2012-2020 Euclid Science Ground Segment\n+ *\n+ * This library is free software; you can redistribute it and/or modify it under\n+ * the terms of the GNU Lesser General Public License as published by the Free\n+ * Software Foundation; either version 3.0 of the License, or (at your option)\n+ * any later version.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+ * details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this library; if not, write to the Free Software Foundation, Inc.,\n+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+ *\n+ */\n+\n+#ifndef _LE1_NISP_ENTITIES_OBTMOCK_H\n+#define _LE1_NISP_ENTITIES_OBTMOCK_H\n+\n+#include \"LE1_NISP_Entities/OnBoardTime.h\"\n+\n+namespace LE1_NISP_Entities {\n+\n+  class ObtDummy: public OnBoardTime {\n+  public:\n+    ObtDummy() = default;\n+    ~ObtDummy() override = default;\n+\n+    [[nodiscard]] uint32_t getCoarseTime() const override { return 0; };\n+    [[nodiscard]] uint16_t getFineTime() const override { return 0; };\n+    [[nodiscard]] uint32_t getFineTimeMicroSeconds() const override { return 0; };\n+\n+    [[nodiscard]] int getYear() const override { return 0; };\n+    [[nodiscard]] unsigned short getMonth() const override { return 0; };\n+    [[nodiscard]] unsigned short getDay() const override { return 0; };\n+    [[nodiscard]] unsigned short getHours() const override { return 0; };\n+    [[nodiscard]] unsigned short getMinutes() const override { return 0; };\n+    [[nodiscard]] unsigned short getSeconds() const override { return 0; };\n+    [[nodiscard]] double getTotalSeconds() const override { return 0; };\n+    [[nodiscard]] double getTotalMicroSeconds() const override { return 0; };\n+\n+    [[nodiscard]] std::string getIsoString() const override { return \"\"; };\n+    [[nodiscard]] std::string getIsoExtendedString() const override { return \"\"; };\n+    [[nodiscard]] double getModifiedJulianDay() const override { return 0; };\n+  };\n+\n+} // namespace LE1_NISP_Entities\n+\n+#endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/include/ParameterMock.h": [
                        [
                            "@@ -1,6 +1,6 @@\n \n  /**\n- * @file LE1_NISP_ProcessScience/tests/include/ParameterMock.h\n+ * @file LE1_NISP_Entities/tests/include/ParameterMock.h\n  * @date 11/24/20\n  * @author user\n  *\n@@ -22,15 +22,15 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_PARAMETERMOCK_H\n-#define _LE1_NISP_PROCESSSCIENCE_PARAMETERMOCK_H\n+#ifndef _LE1_NISP_ENTITIES_PARAMETERMOCK_H\n+#define _LE1_NISP_ENTITIES_PARAMETERMOCK_H\n \n-#include \"LE1_NISP_ProcessScience//Parameter.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ByteArrayMock.h\"\n+#include \"LE1_NISP_Entities/Parameter.h\"\n+#include \"LE1_NISP_Entities/tests/include/ByteArrayMock.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n-class ParameterDummy: public ParameterInterface{\n+class ParameterDummy: public LE1_NISP_Entities::ParameterInterface{\n public:\n     ParameterDummy() = default;\n     ~ParameterDummy() = default;\n@@ -72,7 +72,7 @@ private:\n class ParameterStubNameOnly: public ParameterDummy{\n public:\n     ParameterStubNameOnly(const std::string &name){\n-        desc = std::make_shared<ParameterDescription>(name);\n+        desc = std::make_shared<LE1_NISP_Entities::ParameterDescription>(name);\n     }\n     ~ParameterStubNameOnly() override = default;\n \n@@ -81,21 +81,21 @@ public:\n     }\n \n private:\n-    std::shared_ptr<ParameterDescription> desc;\n+    std::shared_ptr<LE1_NISP_Entities::ParameterDescription> desc;\n \n     bool compareParam(const ParameterInterface &other) const override{\n         return desc->getName() == other.getName();\n     }\n };\n \n-class ParamStubCustomReturns: public ParameterInterface{\n+class ParamStubCustomReturns: public LE1_NISP_Entities::ParameterInterface{\n public:\n     ParamStubCustomReturns(const std::string &name){\n-        m_desc = std::make_shared<ParameterDescription>(name);\n+        m_desc = std::make_shared<LE1_NISP_Entities::ParameterDescription>(name);\n     }\n     ~ParamStubCustomReturns() override = default;\n \n-    void setDescriptionCustomVal(std::shared_ptr<const ParameterDescription> desc){\n+    void setDescriptionCustomVal(std::shared_ptr<const LE1_NISP_Entities::ParameterDescription> desc){\n         m_desc = desc;\n     }\n \n@@ -126,7 +126,7 @@ public:\n     }\n \n private:\n-    std::shared_ptr<const ParameterDescription> m_desc;\n+    std::shared_ptr<const LE1_NISP_Entities::ParameterDescription> m_desc;\n     std::any value;\n \n     void print(std::ostream &stream) const override{\n@@ -139,6 +139,6 @@ private:\n     }\n };\n \n-}// namespace LE1_NISP_ProcessScience\n+}// namespace LE1_NISP_Entities\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/include/PlanningIdMock.h": [
                        [
                            "@@ -1,6 +1,6 @@\n \n  /**\n- * @file LE1_NISP_ProcessScience/tests/include/PlanningIdMock.h\n+ * @file LE1_NISP_Entities/tests/include/PlanningIdMock.h\n  * @date 03/12/21\n  * @author user\n  *\n@@ -22,28 +22,28 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_PLANNINGIDMOCK_H\n-#define _LE1_NISP_PROCESSSCIENCE_PLANNINGIDMOCK_H\n+#ifndef _LE1_NISP_ENTITIES_PLANNINGIDMOCK_H\n+#define _LE1_NISP_ENTITIES_PLANNINGIDMOCK_H\n \n-#include \"LE1_NISP_ProcessScience//PlanningId.h\"\n+#include \"LE1_NISP_Entities/PlanningId.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Entities {\n \n-class PlanningIdCreatorDummy: public PlanningIdCreator{\n+class PlanningIdCreatorDummy: public LE1_NISP_Entities::PlanningIdCreator{\n public:\n   virtual ~PlanningIdCreatorDummy() = default;\n-  inline virtual std::shared_ptr<PlanningId> create(uint16_t pid1, uint16_t pid2) override { \n+  inline virtual std::shared_ptr<LE1_NISP_Entities::PlanningId> create(uint16_t pid1, uint16_t pid2) override {\n     (void) pid1;\n     (void) pid2;\n     return nullptr; \n   }\n-  inline virtual std::shared_ptr<PlanningId> create(uint32_t pid) override { \n+  inline virtual std::shared_ptr<LE1_NISP_Entities::PlanningId> create(uint32_t pid) override {\n     (void) pid;\n     return nullptr; \n   }\n };\n \n-class PlanningIdCreatorSpy: public PlanningIdCreator{\n+class PlanningIdCreatorSpy: public LE1_NISP_Entities::PlanningIdCreator{\n public:\n     unsigned int usedPid1;\n     unsigned int usedPid2;\n@@ -52,34 +52,34 @@ public:\n     PlanningIdCreatorSpy(): usedPid1(0), usedPid2(0){}\n     virtual ~PlanningIdCreatorSpy() = default;\n     \n-    virtual std::shared_ptr<PlanningId> create(uint16_t pid1, uint16_t pid2) override{\n+    virtual std::shared_ptr<LE1_NISP_Entities::PlanningId> create(uint16_t pid1, uint16_t pid2) override{\n         this->usedPid1 = pid1;\n         this->usedPid2 = pid2;\n         return nullptr;\n     }\n-    inline virtual std::shared_ptr<PlanningId> create(uint32_t pid) override { \n+    inline virtual std::shared_ptr<LE1_NISP_Entities::PlanningId> create(uint32_t pid) override {\n       this->usedPid32 = pid;\n       return nullptr; \n     }\n };\n \n-class PlanningIdCreatorStub: public PlanningIdCreator{\n+class PlanningIdCreatorStub: public LE1_NISP_Entities::PlanningIdCreator{\n public:\n-  std::shared_ptr<PlanningId> planId;\n+  std::shared_ptr<LE1_NISP_Entities::PlanningId> planId;\n \n-  inline virtual std::shared_ptr<PlanningId> create(uint16_t pid1, uint16_t pid2) override { \n+  inline virtual std::shared_ptr<LE1_NISP_Entities::PlanningId> create(uint16_t pid1, uint16_t pid2) override {\n     (void) pid1;\n     (void) pid2;\n     return planId;\n   }\n \n-  inline virtual std::shared_ptr<PlanningId> create(uint32_t pid) override { \n+  inline virtual std::shared_ptr<LE1_NISP_Entities::PlanningId> create(uint32_t pid) override {\n     (void) pid;\n     return nullptr; \n   }\n };\n \n-class PlanningIdDummy: public PlanningId{\n+class PlanningIdDummy: public LE1_NISP_Entities::PlanningId{\n public:\n   ~PlanningIdDummy() override = default;\n \n@@ -92,7 +92,7 @@ public:\n   inline std::string getInstrument() const override {return \"\";}\n };\n \n-class PlanningIdCustomRet: public PlanningId{\n+class PlanningIdCustomRet: public LE1_NISP_Entities::PlanningId{\n public:\n   unsigned int rawValue;\n   unsigned int pointingId;\n@@ -118,6 +118,6 @@ public:\n   inline std::string getInstrument() const override {return instrument;};\n };\n \n-}// namespace LE1_NISP_ProcessScience\n+}// namespace LE1_NISP_Entities\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/src/ByteArrayCreatorEuclid_test.cpp": [
                        [
                            "@@ -23,10 +23,10 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//ByteArrayCreatorEuclid.h\"\n-#include \"LE1_NISP_ProcessScience//ByteArrayEuclid.h\"\n+#include \"LE1_NISP_Entities/ByteArrayCreatorEuclid.h\"\n+#include \"LE1_NISP_Entities/ByteArrayEuclid.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Entities;\n \n BOOST_AUTO_TEST_SUITE (ByteArrayCreatorEuclid_test)\n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/src/ByteArrayCreatorStandard_test.cpp": [
                        [
                            "@@ -23,10 +23,10 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//ByteArrayCreatorStandard.h\"\n-#include \"LE1_NISP_ProcessScience//ByteArrayStandard.h\"\n+#include \"LE1_NISP_Entities/ByteArrayCreatorStandard.h\"\n+#include \"LE1_NISP_Entities/ByteArrayStandard.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Entities;\n \n BOOST_AUTO_TEST_SUITE (ByteArrayCreatorStandard_test)\n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/src/ByteArrayEuclid_test.cpp": [
                        [
                            "@@ -23,9 +23,9 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//ByteArrayEuclid.h\"\n+#include \"LE1_NISP_Entities/ByteArrayEuclid.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Entities;\n \n BOOST_AUTO_TEST_SUITE (ByteArrayEuclid_test)\n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/src/ByteArrayStandard_test.cpp": [
                        [
                            "@@ -23,9 +23,9 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//ByteArrayStandard.h\"\n+#include \"LE1_NISP_Entities/ByteArrayStandard.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Entities;\n \n BOOST_AUTO_TEST_SUITE (ByteArrayStandard_test)\n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/src/DetectorId_test.cpp": [
                        [
                            "@@ -23,9 +23,9 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//DetectorId.h\"\n+#include \"LE1_NISP_Entities/DetectorId.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Entities;\n \n BOOST_AUTO_TEST_SUITE (DetectorId_test)\n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/src/DetectorImpl_test.cpp": [
                        [
                            "@@ -23,9 +23,9 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//DetectorImpl.h\"\n+#include \"LE1_NISP_Entities/DetectorImpl.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Entities;\n \n BOOST_AUTO_TEST_SUITE (DetectorImpl_test)\n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/src/DetectorMap_test.cpp": [
                        [
                            "@@ -23,11 +23,11 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//DetectorMap.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMetadataMock.h\"\n+#include \"LE1_NISP_Entities/DetectorMap.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMetadataMock.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Entities;\n \n struct  DetectorMapFixture_test\n {\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/src/DetectorMetadata_test.cpp": [
                        [
                            "@@ -28,21 +28,21 @@\n #include <stdlib.h>\n #include <time.h>\n \n-#include \"LE1_NISP_ProcessScience/tests/include/ParameterMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ByteArrayMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorConfigManagerMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ExposureConfigurationMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/PlanningIdMock.h\"\n-#include \"LE1_NISP_ProcessScience//DetectorMetadata.h\"\n-#include \"LE1_NISP_ProcessScience//DetectorConfigMapper.h\"\n-\n-using namespace LE1_NISP_ProcessScience;\n+#include \"LE1_NISP_Entities/tests/include/DetectorConfigManagerMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/ExposureConfigurationMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/PlanningIdMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/ParameterMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/ByteArrayMock.h\"\n+#include \"LE1_NISP_Entities/DetectorMetadata.h\"\n+#include \"LE1_NISP_Entities//DetectorConfigMapper.h\"\n+\n+using namespace LE1_NISP_Entities;\n namespace bdata = boost::unit_test::data;\n \n namespace{\n     struct DetectorMetadataEmpty_test{\n         DetectorMetadataEmpty_test(){\n-            metadataEmpty = std::make_unique<DetectorMetadataNISP>(nullptr, nullptr, nullptr);\n+            metadataEmpty = std::make_unique<DetectorMetadataNISP>(nullptr, nullptr, nullptr, nullptr);\n         }\n         ~DetectorMetadataEmpty_test(){}\n \n@@ -382,19 +382,19 @@ BOOST_AUTO_TEST_CASE( GivenMetadataInitedWithPostReadDropLinesParamShouldReturnT\n }\n \n BOOST_AUTO_TEST_CASE( GivenNullptrConfigManagerShouldThrowNullConfigManagerExceptionWhenCallingGetMaccDropedFrames ) {\n-    BOOST_REQUIRE_THROW(metadataEmpty->getMaccDropedFrames(), NullConfigManagerException);\n+    BOOST_REQUIRE_THROW(metadataEmpty->getMaccDroppedFrames(), NullConfigManagerException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenNoParamNamedT_DROPL2AShouldThrowParameterNotFoundExceptionWhenCallingGetMaccDroppedFrames ) {\n     metadataEmpty->setDetectorConfigManager(std::make_shared<DetConfigManagerDummy>());\n-    BOOST_REQUIRE_THROW(metadataEmpty->getMaccDropedFrames(), ParameterNotFoundException);\n+    BOOST_REQUIRE_THROW(metadataEmpty->getMaccDroppedFrames(), ParameterNotFoundException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenNoParamNamedT_DROPL2BShouldThrowParameterNotFoundExceptionWhenCallingGetMaccDroppedFrames ) {\n     auto param = std::make_shared<ParameterStubNameOnly>(\"T_DROPL2A\");\n     metadataEmpty->setDetectorConfigManager(std::make_shared<DetConfigManagerDummy>());\n     metadataEmpty->addParameter(param);\n-    BOOST_REQUIRE_THROW(metadataEmpty->getMaccDropedFrames(), ParameterNotFoundException);\n+    BOOST_REQUIRE_THROW(metadataEmpty->getMaccDroppedFrames(), ParameterNotFoundException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenMetadataInitedWithPostReadDropLinesParamAndConfigManagerStubShouldReturnTheExpectedMaccDroppedFramesValue ) {\n@@ -411,12 +411,12 @@ BOOST_AUTO_TEST_CASE( GivenMetadataInitedWithPostReadDropLinesParamAndConfigMana\n \n     uint16_t expectedDroppedFrames = 4;\n     \n-    BOOST_REQUIRE_EQUAL(metadataEmpty->getMaccDropedFrames(), expectedDroppedFrames);\n+    BOOST_REQUIRE_EQUAL(metadataEmpty->getMaccDroppedFrames(), expectedDroppedFrames);\n \n     configManager->setFrameLineSize(1024);\n     expectedDroppedFrames = 8;\n \n-    BOOST_REQUIRE_EQUAL(metadataEmpty->getMaccDropedFrames(), expectedDroppedFrames);\n+    BOOST_REQUIRE_EQUAL(metadataEmpty->getMaccDroppedFrames(), expectedDroppedFrames);\n }\n \n BOOST_AUTO_TEST_CASE( GivenNoParamNamedT_DROPL2ShouldThrowParameterNotFoundExceptionWhenCallingGetReadoutMode ) {\n@@ -1060,6 +1060,10 @@ BOOST_AUTO_TEST_CASE( GivenPlanningIdCreatorSpyShouldCreatePlanningIdWithExpecte\n     BOOST_REQUIRE_EQUAL(planIdCreatorSpy->usedPid2, pid2);\n }\n \n+BOOST_AUTO_TEST_CASE( GivenNullObtCreatorShouldThrowNullObtCreatorExceptionWhenCallingGetObt ) {\n+  BOOST_REQUIRE_THROW(metadataEmpty->getObt(), NullObtCreatorException);\n+}\n+\n BOOST_AUTO_TEST_CASE( GivenNullptrConfigManagerShouldThrowNullConfigManagerExceptionWhenCallingGetLineTime ) {\n     metadataEmpty->setDetectorConfigManager(nullptr);\n     BOOST_REQUIRE_THROW(metadataEmpty->getLineTime(), NullConfigManagerException);\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/src/Exception_test.cpp": [
                        [
                            "@@ -23,9 +23,9 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//Exception.h\"\n+#include \"LE1_NISP_Entities//Exception.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Entities;\n \n BOOST_AUTO_TEST_SUITE (Exception_test)\n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/src/ExposureConfigurationImpl_test.cpp": [
                        [
                            "@@ -26,9 +26,9 @@\n #include <boost/test/data/test_case.hpp>\n #include <boost/test/data/monomorphic.hpp>\n \n-#include \"LE1_NISP_ProcessScience//ExposureConfigurationImpl.h\"\n+#include \"LE1_NISP_Entities/ExposureConfigurationImpl.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Entities;\n namespace bdata = boost::unit_test::data;\n \n BOOST_AUTO_TEST_SUITE (ExposureConfigurationImpl_test)\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/src/OnBoardTime_test.cpp": [
                        [
                            "@@ -22,56 +22,98 @@\n  */\n \n #include <boost/test/unit_test.hpp>\n-#include <boost/test/floating_point_comparison.hpp>\n+#include <boost/test/tools/floating_point_comparison.hpp>\n+#include <boost/date_time.hpp>\n \n #include <cmath>\n \n-#include \"LE1_NISP_ProcessScience//OnBoardTime.h\"\n+#include \"LE1_NISP_Entities/OnBoardTimeBoost.h\"\n \n-using namespace LE1_NISP;\n+using namespace LE1_NISP_Entities;\n+using namespace boost::posix_time;\n+using namespace boost::gregorian;\n \n BOOST_AUTO_TEST_SUITE (OnBoardTime_test)\n \n BOOST_AUTO_TEST_CASE( GivenOBTFineTimeShouldReturnTheExpectedFineTimeInMuSec ) {\n   u_int16_t fineTime = 0xFF00;\n-  OnBoardTime obt(0, fineTime);\n+  OnBoardTimeBoost obt(0, fineTime);\n   // expectedFineTimeMuSec = fineTime * std::pow(2, 8) * 0.05 * rationSpcDpuClock;\n   //   - rationSpcDpuClock = 59.6 / 50\n   uint32_t expectedFineTimeMuSec = 996016;\n \n-  BOOST_REQUIRE_EQUAL(obt.fineTimeMusec(), expectedFineTimeMuSec);\n+  BOOST_REQUIRE_EQUAL(obt.getFineTimeMicroSeconds(), expectedFineTimeMuSec);\n }\n \n BOOST_AUTO_TEST_CASE( GivenOBTFineTimeShouldReturnTheExpectedFineTimeInMuSecRounded ) {\n   u_int16_t fineTime = 1;\n-  OnBoardTime obt(0, fineTime);\n+  OnBoardTimeBoost obt(0, fineTime);\n   // expectedFineTimeMuSec = fineTime * std::pow(2, 8) * 0.05 * rationSpcDpuClock;\n   //   - rationSpcDpuClock = 59.6 / 50\n   uint32_t expectedFineTimeMuSec = 15;\n \n-  BOOST_REQUIRE_EQUAL(obt.fineTimeMusec(), expectedFineTimeMuSec);\n+  BOOST_REQUIRE_EQUAL(obt.getFineTimeMicroSeconds(), expectedFineTimeMuSec);\n+}\n+\n+BOOST_AUTO_TEST_CASE( GivenOBTShouldReturnTheExpectedHours ) {\n+  u_int32_t coarseTime = 0x00ABCD01; //11259137\n+  u_int16_t fineTime = 0xF001; //61441\n+  OnBoardTimeBoost obt(coarseTime, fineTime);\n+  unsigned short expectedHours = 7;\n+\n+  BOOST_REQUIRE_EQUAL(obt.getHours(), expectedHours);\n+}\n+\n+BOOST_AUTO_TEST_CASE( GivenOBTShouldReturnTheExpectedMinutes ) {\n+  u_int32_t coarseTime = 0x00ABCD01; //11259137\n+  u_int16_t fineTime = 0xF001; //61441\n+  OnBoardTimeBoost obt(coarseTime, fineTime);\n+  unsigned short expectedMinutes = 32;\n+\n+  BOOST_REQUIRE_EQUAL(obt.getMinutes(), expectedMinutes);\n+}\n+\n+BOOST_AUTO_TEST_CASE( GivenOBTShouldReturnTheExpectedSeconds,\n+                      * boost::unit_test::tolerance(std::numeric_limits<double>::epsilon()) ) {\n+  u_int32_t coarseTime = 0x00ABCD01; //11259137\n+  u_int16_t fineTime = 0xF001; //61441\n+  OnBoardTimeBoost obt(coarseTime, fineTime);\n+  double expectedSeconds = 17;\n+\n+  BOOST_REQUIRE_EQUAL(obt.getSeconds(), expectedSeconds);\n }\n \n BOOST_AUTO_TEST_CASE( GivenOBTShouldReturnTheExpectedTotalSeconds,\n-                      * boost::unit_test::tolerance(0.00001) ) {\n+                      * boost::unit_test::tolerance(std::numeric_limits<double>::epsilon()) ) {\n   u_int32_t coarseTime = 0x00ABCD01; //11259137\n   u_int16_t fineTime = 0xF001; //61441\n-  OnBoardTime obt(coarseTime, fineTime);\n+  OnBoardTimeBoost obt(coarseTime, fineTime);\n   // expectedTotalSeconds = coarseTime + (fineTime * std::pow(2, 8) * 0.05 * rationSpcDpuClock * 1E-6);\n   //   - rationSpcDpuClock = 59.6 / 50\n   double expectedTotalSeconds = 11259137.937442;\n \n-  BOOST_REQUIRE_EQUAL(obt.getObtTotalSeconds(), expectedTotalSeconds);\n+  BOOST_REQUIRE_EQUAL(obt.getTotalSeconds(), expectedTotalSeconds);\n+}\n+\n+BOOST_AUTO_TEST_CASE( GivenOBTShouldReturnTheExpectedTotalMicroSeconds,\n+                      * boost::unit_test::tolerance(std::numeric_limits<double>::epsilon()) ) {\n+  u_int32_t coarseTime = 0x00ABCD01; //11259137\n+  u_int16_t fineTime = 0xF001; //61441\n+  OnBoardTimeBoost obt(coarseTime, fineTime);\n+  double expectedTotalMuSeconds = 11259137.937442 * 1E6;\n+\n+  BOOST_REQUIRE_EQUAL(obt.getTotalMicroSeconds(), expectedTotalMuSeconds);\n }\n \n-BOOST_AUTO_TEST_CASE( GivenOBTShouldReturnTheExpectedModifiedJulianDay ) {\n+BOOST_AUTO_TEST_CASE( GivenOBTShouldReturnTheExpectedModifiedJulianDay,\n+                      * boost::unit_test::tolerance(std::numeric_limits<double>::epsilon()) ) {\n   u_int32_t coarseTime = 0x5E327C5B; //1580366939\n   u_int16_t fineTime = 0x4EE3; //20195\n   double expectedMjd = 58878.284019769992;\n \n-  OnBoardTime obt(coarseTime, fineTime);\n+  OnBoardTimeBoost obt(coarseTime, fineTime);\n \n-  BOOST_REQUIRE_SMALL((obt.toModifiedJulianDay() - expectedMjd), std::numeric_limits<double>::epsilon());\n+  BOOST_REQUIRE_EQUAL(obt.getModifiedJulianDay(), expectedMjd);\n }\n \n BOOST_AUTO_TEST_SUITE_END ()\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ],
                        [
                            "@@ -22,7 +22,7 @@\n  */\n \n #include <boost/test/unit_test.hpp>\n-#include <boost/test/floating_point_comparison.hpp>\n+#include <boost/test/tools/floating_point_comparison.hpp>\n #include <boost/date_time.hpp>\n \n #include <cmath>\n",
                            "[fix] Fixes compile errors",
                            "Alberto Alessio",
                            "2023-06-13T12:07:33.000+00:00",
                            "11f710ab001a4ba36ff630fd33333d2181e0b32b"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/src/ParameterDescription_test.cpp": [
                        [
                            "@@ -23,9 +23,9 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//ParameterDescription.h\"\n+#include \"LE1_NISP_Entities/ParameterDescription.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Entities;\n \n BOOST_AUTO_TEST_SUITE (ParameterDescription_test)\n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/src/Parameter_test.cpp": [
                        [
                            "@@ -25,9 +25,9 @@\n #include <boost/test/data/test_case.hpp>\n #include <boost/test/data/monomorphic.hpp>\n \n-#include \"LE1_NISP_ProcessScience//Parameter.h\"\n+#include \"LE1_NISP_Entities/Parameter.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Entities;\n namespace bdata = boost::unit_test::data;\n \n namespace{\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/src/PlanningIdGroundTests_test.cpp": [
                        [
                            "@@ -25,9 +25,9 @@\n #include <boost/test/data/test_case.hpp>\n #include <boost/test/data/monomorphic.hpp>\n \n-#include \"LE1_NISP_ProcessScience//PlanningIdGroundTests.h\"\n+#include \"LE1_NISP_Entities/PlanningIdGroundTests.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Entities;\n namespace bdata = boost::unit_test::data;\n \n BOOST_AUTO_TEST_SUITE (PlanningIdGroundTests_test)\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/src/PlanningIdSoc20210215_test.cpp": [
                        [
                            "@@ -25,9 +25,9 @@\n #include <boost/test/data/test_case.hpp>\n #include <boost/test/data/monomorphic.hpp>\n \n-#include \"LE1_NISP_ProcessScience//PlanningIdSoc20210215.h\"\n+#include \"LE1_NISP_Entities/PlanningIdSoc20210215.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Entities;\n namespace bdata = boost::unit_test::data;\n \n BOOST_AUTO_TEST_SUITE (PlanningIdSoc20210215_test)\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/src/TelemetryConfiguration_test.cpp": [
                        [
                            "@@ -23,9 +23,9 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//TelemetryConfiguration.h\"\n+#include \"LE1_NISP_Entities/TelemetryConfiguration.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Entities;\n \n BOOST_AUTO_TEST_SUITE (TelemetryConfiguration_test)\n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/src/TelemetryDetector_test.cpp": [
                        [
                            "@@ -26,11 +26,11 @@\n \n #include \"ElementsKernel//Temporary.h\"\n \n-#include \"LE1_NISP_ProcessScience//TelemetryDetector.h\"\n-#include \"LE1_NISP_ProcessScience//ByteArrayStandard.h\"\n+#include \"LE1_NISP_Entities/TelemetryDetector.h\"\n+#include \"LE1_NISP_Entities/ByteArrayStandard.h\"\n \n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Entities;\n \n namespace{\n   Elements::TempFile createTmpFile(const std::vector<uint8_t> &bytes = {}){  \n@@ -100,7 +100,7 @@ BOOST_AUTO_TEST_CASE( ShouldReadBytesFromTheSpecifiedStartingPositionWithZeroOff\n   TelemetryDetector tmDet(tmFile, startPosition, 9);\n   unsigned long offset = 0;\n   unsigned long numberOfBytes = 3;\n-  ByteArrayStandard expectedBytes(3);\n+  LE1_NISP_Entities::ByteArrayStandard expectedBytes(3);\n   expectedBytes[0] = 0x03;\n   expectedBytes[1] = 0x04;\n   expectedBytes[2] = 0x05;\n@@ -115,7 +115,7 @@ BOOST_AUTO_TEST_CASE( ShouldReadBytesFromTheSpecifiedStartingPositionWithOffsetD\n   TelemetryDetector tmDet(tmFile, startPosition, endPosition);\n   unsigned long offset = 1;\n   unsigned long numberOfBytes = 3;\n-  ByteArrayStandard expectedBytes(3);\n+  LE1_NISP_Entities::ByteArrayStandard expectedBytes(3);\n   expectedBytes[0] = 0x04;\n   expectedBytes[1] = 0x05;\n   expectedBytes[2] = 0x06;\n@@ -130,7 +130,7 @@ BOOST_AUTO_TEST_CASE( ShouldReadAllBytesFromZeroStartingPositionToLastEndPositio\n   TelemetryDetector tmDet(tmFile, startPosition, endPosition);\n   unsigned long offset = 0;\n   unsigned long numberOfBytes = 9;\n-  ByteArrayStandard expectedBytes(9);\n+  LE1_NISP_Entities::ByteArrayStandard expectedBytes(9);\n   expectedBytes[0] = 0x01;\n   expectedBytes[1] = 0x02;\n   expectedBytes[2] = 0x03;\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/src/TelemetryFile_test.cpp": [
                        [
                            "@@ -24,10 +24,10 @@\n #include <boost/test/unit_test.hpp>\n #include \"ElementsKernel/Temporary.h\"\n \n-#include \"LE1_NISP_ProcessScience//TelemetryFile.h\"\n-#include \"LE1_NISP_ProcessScience//ByteArrayStandard.h\"\n+#include \"LE1_NISP_Entities/TelemetryFile.h\"\n+#include \"LE1_NISP_Entities/ByteArrayStandard.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Entities;\n \n namespace{\n   Elements::TempFile createTmpFile(const std::vector<uint8_t> &bytes = {}){  \n@@ -121,7 +121,7 @@ BOOST_AUTO_TEST_CASE( ShouldReturnContentOfBytesReadFromOffsetZero ) {\n   TelemetryFile tmFile(tmpFile.path().c_str());\n   long startingPos = 0;\n   long numberOfBytes = 5;\n-  ByteArrayStandard expectedBytes(numberOfBytes);\n+  LE1_NISP_Entities::ByteArrayStandard expectedBytes(numberOfBytes);\n   expectedBytes[0] = 0x01;\n   expectedBytes[1] = 0x02;\n   expectedBytes[2] = 0x03;\n@@ -136,7 +136,7 @@ BOOST_AUTO_TEST_CASE( ShouldReturnContentOfBytesReadFromOffsetDifferentFromZero\n   TelemetryFile tmFile(tmpFile.path().c_str());\n   long startingPos = 5;\n   long numberOfBytes = 5;\n-  ByteArrayStandard expectedBytes(numberOfBytes);\n+  LE1_NISP_Entities::ByteArrayStandard expectedBytes(numberOfBytes);\n   expectedBytes[0] = 0x06;\n   expectedBytes[1] = 0x07;\n   expectedBytes[2] = 0x08;\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/src/TelemetrySection_test.cpp": [
                        [
                            "@@ -23,9 +23,9 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//TelemetrySection.h\"\n+#include \"LE1_NISP_Entities/TelemetrySection.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Entities;\n \n BOOST_AUTO_TEST_SUITE (TelemetrySection_test)\n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Entities/tests/src/Wcs_test.cpp": [
                        [
                            "@@ -23,9 +23,9 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//Wcs.h\"\n+#include \"LE1_NISP_Entities/Wcs.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Entities;\n \n //-----------------------------------------------------------------------------\n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/CMakeLists.txt": [
                        [
                            "@@ -0,0 +1,129 @@\n+CMAKE_MINIMUM_REQUIRED(VERSION 2.8.12)\n+\n+#===============================================================================\n+# Load elements_subdir macro here\n+# Examples:\n+#   For declaring a project module:\n+#         elements_subdir(ElementsExamples)\n+#===============================================================================\n+elements_subdir(LE1_NISP_Interactors)\n+\n+#===============================================================================\n+# Load elements_depends_on_subdirs macro here\n+#   For creating a dependency onto an other accessible module\n+#         elements_depends_on_subdirs(ElementsKernel)\n+#===============================================================================\n+elements_depends_on_subdirs(ElementsKernel)\n+elements_depends_on_subdirs(LE1_NISP_Entities)\n+elements_depends_on_subdirs(EleFits)\n+elements_depends_on_subdirs(ST_DataModelBindings)\n+\n+#===============================================================================\n+# Declare the library dependencies here\n+# Example:\n+#         elements_add_library(ElementsExamples src/Lib/*.cpp\n+#                     INCLUDE_DIRS Boost ElementsKernel\n+#                     LINK_LIBRARIES Boost ElementsKernel\n+#                     PUBLIC_HEADERS ElementsExamples)\n+#===============================================================================\n+elements_add_library(LE1_NISP_Interactors src/lib/*.cpp\n+        LINK_LIBRARIES ElementsKernel LE1_NISP_Entities EleFits ST_DataModelBindings\n+        INCLUDE_DIRS LE1_NISP_Entities\n+        PUBLIC_HEADERS LE1_NISP_Interactors)\n+\n+#===============================================================================\n+# Declare the Boost tests here\n+# Example:\n+# elements_add_unit_test(BoostClassExample tests/src/Boost/ClassExample_test.cpp\n+#                       EXECUTABLE BoostClassExample_test\n+#                       INCLUDE_DIRS ElementsExamples\n+#                       LINK_LIBRARIES ElementsExamples TYPE Boost)\n+#===============================================================================\n+elements_add_unit_test(ProductGenerator tests/src/ProductGenerator_test.cpp\n+        EXECUTABLE LE1_NISP_Interactors_ProductGenerator_test\n+        LINK_LIBRARIES LE1_NISP_Interactors\n+        TYPE Boost)\n+elements_add_unit_test(MetadataParserParamDescriptions tests/src/MetadataParserParamDescriptions_test.cpp\n+        EXECUTABLE LE1_NISP_Interactors_MetadataParserParamDescriptions_test\n+        LINK_LIBRARIES LE1_NISP_Interactors\n+        TYPE Boost)\n+elements_add_unit_test(RawLinesDecoder tests/src/RawLinesDecoder_test.cpp\n+        EXECUTABLE LE1_NISP_Interactors_RawLinesDecoder_test\n+        LINK_LIBRARIES LE1_NISP_Interactors\n+        TYPE Boost)\n+elements_add_unit_test(TelemetryDetectorInitializer tests/src/TelemetryDetectorInitializer_test.cpp\n+        EXECUTABLE LE1_NISP_Interactors_TelemetryDetectorInitializer_test\n+        LINK_LIBRARIES LE1_NISP_Interactors\n+        TYPE Boost)\n+elements_add_unit_test(HkWriterElFitsIO tests/src/HkWriterElFitsIO_test.cpp\n+        EXECUTABLE LE1_NISP_Interactors_HkWriterElFitsIO_test\n+        LINK_LIBRARIES LE1_NISP_Interactors\n+        TYPE Boost)\n+elements_add_unit_test(DetectorCollectorObt tests/src/DetectorCollectorObt_test.cpp\n+        EXECUTABLE LE1_NISP_Interactors_DetectorCollectorObt_test\n+        LINK_LIBRARIES LE1_NISP_Interactors\n+        TYPE Boost)\n+elements_add_unit_test(EngDecoder tests/src/EngDecoder_test.cpp\n+        EXECUTABLE LE1_NISP_Interactors_EngDecoder_test\n+        LINK_LIBRARIES LE1_NISP_Interactors\n+        TYPE Boost)\n+elements_add_unit_test(EngUnprocessedGroupsFitsWriter tests/src/EngUnprocessedGroupsFitsWriter_test.cpp\n+        EXECUTABLE LE1_NISP_Interactors_EngUnprocessedGroupsFitsWriter_test\n+        LINK_LIBRARIES LE1_NISP_Interactors\n+        TYPE Boost)\n+elements_add_unit_test(ExposuresCounter tests/src/ExposuresCounter_test.cpp\n+        EXECUTABLE LE1_NISP_Interactors_ExposuresCounter_test\n+        LINK_LIBRARIES LE1_NISP_Interactors\n+        TYPE Boost)\n+elements_add_unit_test(ScienceDecoder tests/src/ScienceDecoder_test.cpp\n+        EXECUTABLE LE1_NISP_Interactors_ScienceDecoder_test\n+        LINK_LIBRARIES LE1_NISP_Interactors\n+        TYPE Boost)\n+elements_add_unit_test(DecompressorShort tests/src/DecompressorShort_test.cpp\n+        EXECUTABLE LE1_NISP_Interactors_DecompressorShort_test\n+        LINK_LIBRARIES LE1_NISP_Interactors\n+        TYPE Boost)\n+elements_add_unit_test(ScienceWriterElFitsIO tests/src/ScienceWriterElFitsIO_test.cpp\n+        EXECUTABLE LE1_NISP_Interactors_ScienceWriterElFitsIO_test\n+        LINK_LIBRARIES LE1_NISP_Interactors\n+        TYPE Boost)\n+elements_add_unit_test(QualityDataDecoder tests/src/QualityDataDecoder_test.cpp\n+        EXECUTABLE LE1_NISP_Interactors_QualityDataDecoder_test\n+        LINK_LIBRARIES LE1_NISP_Interactors\n+        TYPE Boost)\n+elements_add_unit_test(DecompressorByte tests/src/DecompressorByte_test.cpp\n+        EXECUTABLE LE1_NISP_Interactors_DecompressorByte_test\n+        LINK_LIBRARIES LE1_NISP_Interactors\n+        TYPE Boost)\n+elements_add_unit_test(EngPixelsOverThresholdFitsWriter tests/src/EngPixelsOverThresholdFitsWriter_test.cpp\n+        EXECUTABLE LE1_NISP_Interactors_EngPixelsOverThresholdFitsWriter_test\n+        LINK_LIBRARIES LE1_NISP_Interactors\n+        TYPE Boost)\n+elements_add_unit_test(AnalogTelemetryDecoder tests/src/AnalogTelemetryDecoder_test.cpp\n+        EXECUTABLE LE1_NISP_Interactors_AnalogTelemetryDecoder_test\n+        LINK_LIBRARIES LE1_NISP_Interactors\n+        TYPE Boost)\n+elements_add_unit_test(ErrorsDecoder tests/src/ErrorsDecoder_test.cpp\n+        EXECUTABLE LE1_NISP_Interactors_ErrorsDecoder_test\n+        LINK_LIBRARIES LE1_NISP_Interactors\n+        TYPE Boost)\n+elements_add_unit_test(HistoryDecoder tests/src/HistoryDecoder_test.cpp\n+        EXECUTABLE LE1_NISP_Interactors_HistoryDecoder_test\n+        LINK_LIBRARIES LE1_NISP_Interactors\n+        TYPE Boost)\n+elements_add_unit_test(ProductsArchiverDataModelBindings tests/src/ProductsArchiverDataModelBindings_test.cpp\n+        EXECUTABLE LE1_NISP_Interactors_ProductsArchiverDataModelBindings_test\n+        LINK_LIBRARIES LE1_NISP_Interactors\n+        TYPE Boost)\n+elements_add_unit_test(TelemetryDecoder tests/src/TelemetryDecoder_test.cpp\n+        EXECUTABLE LE1_NISP_Interactors_TelemetryDecoder_test\n+        LINK_LIBRARIES LE1_NISP_Interactors\n+        TYPE Boost)\n+elements_add_unit_test(EngUncompressedImageFitsWriter tests/src/EngUncompressedImageFitsWriter_test.cpp\n+        EXECUTABLE LE1_NISP_Interactors_EngUncompressedImageFitsWriter_test\n+        LINK_LIBRARIES LE1_NISP_Interactors\n+        TYPE Boost)\n+elements_add_unit_test(ProductsWriter tests/src/ProductsWriter_test.cpp\n+        EXECUTABLE LE1_NISP_Interactors_ProductsWriter_test\n+        LINK_LIBRARIES LE1_NISP_Interactors\n+        TYPE Boost)\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/AnalogTelemetryDecoder.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/AnalogTelemetryDecoder.h\n+ * @file LE1_NISP_Interactors/AnalogTelemetryDecoder.h\n  * @date 02/19/21\n  * @author user\n  *\n@@ -21,42 +21,52 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_ANALOGTELEMETRYDECODER_H\n-#define _LE1_NISP_PROCESSSCIENCE_ANALOGTELEMETRYDECODER_H\n+#ifndef _LE1_NISP_INTERACTORS_ANALOGTELEMETRYDECODER_H\n+#define _LE1_NISP_INTERACTORS_ANALOGTELEMETRYDECODER_H\n \n-#include \"LE1_NISP_ProcessScience//TelemetrySectionDecoder.h\"\n-#include \"LE1_NISP_ProcessScience//Decompressor.h\"\n+#include \"TelemetrySectionDecoder.h\"\n+#include \"Decompressor.h\"\n+#include \"Exception.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class AnalogTelemetryDecoder\n- * @brief\n+ * @brief Implementation of the TelemetrySectionDecoder interface to decode analog telemetry\n  *\n  */\n class AnalogTelemetryDecoder: public TelemetrySectionDecoder {\n \n public:\n \n-  AnalogTelemetryDecoder(const std::shared_ptr<Decompressor> decompressor);\n+  /**\n+   * @brief Constructor\n+   * @param decompressor The decompressor smart pointer\n+   */\n+  explicit AnalogTelemetryDecoder(const std::shared_ptr<Decompressor> decompressor);\n \n   /**\n    * @brief Destructor\n    */\n-  virtual ~AnalogTelemetryDecoder();\n-  \n-  virtual std::shared_ptr<ByteArray> decode(const std::shared_ptr<Detector> detector) override;\n+  ~AnalogTelemetryDecoder() override;\n+\n+  /**\n+   * @brief Decode the analog telemetry data of a detector\n+   * @param detector The detector containing the required information to decode analog telemetry\n+   * @return The decoded data\n+   */\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> decode(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) override;\n \n private:\n   std::shared_ptr<Decompressor> m_decompressor;\n \n-  void validateDetector(const std::shared_ptr<Detector> &detector) const;\n+  void validateDetector(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const;\n   void validateEndiannessCorrector() const;\n   void validateDecompressor() const;\n \n };  // End of AnalogTelemetryDecoder class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/Decompressor.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/Decompressor.h\n+ * @file LE1_NISP_Interactors/Decompressor.h\n  * @date 02/05/21\n  * @author user\n  *\n@@ -21,29 +21,39 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DECOMPRESSOR_H\n-#define _LE1_NISP_PROCESSSCIENCE_DECOMPRESSOR_H\n+#ifndef _LE1_NISP_INTERACTORS_DECOMPRESSOR_H\n+#define _LE1_NISP_INTERACTORS_DECOMPRESSOR_H\n \n-#include \"LE1_NISP_ProcessScience//ByteArray.h\"\n-#include \"LE1_NISP_ProcessScience//CompressionParams.h\"\n+#include \"LE1_NISP_Entities//ByteArray.h\"\n+#include \"LE1_NISP_Entities/CompressionParams.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class Decompressor\n- * @brief\n+ * @brief Interface for decompressing an array of bytes\n  *\n  */\n class Decompressor{\n public:\n+  /**\n+   * @brief Destructor\n+   */\n   virtual ~Decompressor() = default;\n \n-  virtual std::shared_ptr<ByteArray> decompress(const std::shared_ptr<ByteArray> bytes, \n+  /**\n+   * @brief Decompress data\n+   * @param bytes The array of bytes to be decompressed\n+   * @param maxOutputSize The maximum size of decompressed data\n+   * @param compressionParams The parameters used for data compression\n+   * @return The decompressed byte array\n+   */\n+  virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> decompress(const std::shared_ptr<LE1_NISP_Entities::ByteArray> bytes,\n                                                 const size_t maxOutputSize,\n-                                                const CompressionParams &compressionParams) = 0;\n+                                                const LE1_NISP_Entities::CompressionParams &compressionParams) = 0;\n };  // End of Decompressor class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/DecompressorByte.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/DecompressorByte.h\n+ * @file LE1_NISP_Interactors/DecompressorByte.h\n  * @date 02/09/21\n  * @author user\n  *\n@@ -21,18 +21,18 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DECOMPRESSORBYTE_H\n-#define _LE1_NISP_PROCESSSCIENCE_DECOMPRESSORBYTE_H\n+#ifndef _LE1_NISP_INTERACTORS_DECOMPRESSORBYTE_H\n+#define _LE1_NISP_INTERACTORS_DECOMPRESSORBYTE_H\n \n-#include \"LE1_NISP_ProcessScience//Exception.h\"\n-#include \"LE1_NISP_ProcessScience//Decompressor.h\"\n-#include \"LE1_NISP_ProcessScience//ByteArrayCreator.h\"\n+#include \"Exception.h\"\n+#include \"Decompressor.h\"\n+#include \"LE1_NISP_Entities/ByteArrayCreator.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class DecompressorByte\n- * @brief\n+ * @brief Implementation of Decompressor interface to decompress array of 8-bit elements\n  *\n  */\n class DecompressorByte: public Decompressor{\n@@ -41,22 +41,23 @@ public:\n \n   /**\n    * @brief Constructor\n+   * @param byteArrayCreator The creator interface for byte array\n    */\n-  DecompressorByte(const std::shared_ptr<ByteArrayCreator> byteArrayCreator);\n+  explicit DecompressorByte(const std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> byteArrayCreator);\n \n   /**\n    * @brief Destructor\n    */\n-  virtual ~DecompressorByte();\n+  ~DecompressorByte() override;\n \n-  virtual std::shared_ptr<ByteArray> decompress(const std::shared_ptr<ByteArray> compressedData,\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> decompress(const std::shared_ptr<LE1_NISP_Entities::ByteArray> compressedData,\n                                                 const size_t maxDecompressedSize,\n-                                                const CompressionParams &compressionParams) override;\n+                                                const LE1_NISP_Entities::CompressionParams &compressionParams) override;\n \n private:\n-  std::shared_ptr<ByteArrayCreator> m_byteArrayCreator;\n+  std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> m_byteArrayCreator;\n \n-  void validateInputs(const std::shared_ptr<ByteArray> &compressedData,\n+  void validateInputs(const std::shared_ptr<LE1_NISP_Entities::ByteArray> &compressedData,\n                       const size_t maxDecompressedSize) const;\n \n   int fits_rdecomp_byte (unsigned char *c,\t\t  // input buffer\n@@ -69,7 +70,7 @@ private:\n \n };  // End of DecompressorByte class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/DecompressorShort.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/DecompressorShort.h\n+ * @file LE1_NISP_Interactors/DecompressorShort.h\n  * @date 02/05/21\n  * @author user\n  *\n@@ -21,18 +21,18 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DECOMPRESSORSHORT_H\n-#define _LE1_NISP_PROCESSSCIENCE_DECOMPRESSORSHORT_H\n+#ifndef _LE1_NISP_INTERACTORS_DECOMPRESSORSHORT_H\n+#define _LE1_NISP_INTERACTORS_DECOMPRESSORSHORT_H\n \n-#include \"LE1_NISP_ProcessScience//Exception.h\"\n-#include \"LE1_NISP_ProcessScience//Decompressor.h\"\n-#include \"LE1_NISP_ProcessScience//ByteArrayCreator.h\"\n+#include \"Exception.h\"\n+#include \"Decompressor.h\"\n+#include \"LE1_NISP_Entities/ByteArrayCreator.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class DecompressorShort\n- * @brief\n+ * @brief Implementation of Decompressor interface to decompress array of 16-bit elements\n  *\n  */\n class DecompressorShort : public Decompressor{\n@@ -41,22 +41,23 @@ public:\n \n   /**\n    * @brief Constructor\n+   * @param byteArrayCreator The creator interface for byte array\n    */\n-  DecompressorShort(const std::shared_ptr<ByteArrayCreator> byteArrayCreator);\n+  explicit DecompressorShort(const std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> byteArrayCreator);\n \n   /**\n    * @brief Destructor\n    */\n-  virtual ~DecompressorShort();\n+  ~DecompressorShort() override;\n \n-  virtual std::shared_ptr<ByteArray> decompress(const std::shared_ptr<ByteArray> compressedData,\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> decompress(const std::shared_ptr<LE1_NISP_Entities::ByteArray> compressedData,\n                                                 const size_t maxDecompressedSize,\n-                                                const CompressionParams &compressionParams) override;\n+                                                const LE1_NISP_Entities::CompressionParams &compressionParams) override;\n \n private:\n-  std::shared_ptr<ByteArrayCreator> m_byteArrayCreator;\n+  std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> m_byteArrayCreator;\n \n-  void validateInputs(const std::shared_ptr<ByteArray> &compressedData,\n+  void validateInputs(const std::shared_ptr<LE1_NISP_Entities::ByteArray> &compressedData,\n                       const size_t maxDecompressedSize) const;\n \n   int fits_rdecomp_short (unsigned char *c,       // input buffer\n@@ -69,7 +70,7 @@ private:\n \n };  // End of DecompressorShort class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/DetectorCollector.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/DetectorCollector.h\n+ * @file LE1_NISP_Interactors/DetectorCollector.h\n  * @date 01/27/21\n  * @author user\n  *\n@@ -21,15 +21,20 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORCOLLECTOR_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORCOLLECTOR_H\n+#ifndef _LE1_NISP_INTERACTORS_DETECTORCOLLECTOR_H\n+#define _LE1_NISP_INTERACTORS_DETECTORCOLLECTOR_H\n \n #include <map>\n #include <vector>\n-#include \"LE1_NISP_ProcessScience/Exposure.h\"\n+#include \"LE1_NISP_Entities/Exposure.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n+/**\n+ * @class DetectorCollector\n+ * @brief Interface to group detectors per exposure\n+ *\n+ */\n class DetectorCollector{\n public: \n    /**\n@@ -39,16 +44,15 @@ public:\n \n   /**\n    * @brief Group detector per exposure\n-   * \n    * @param detectorList List of detectors to be grouped\n-   * @return std::map<ExposureId, std::shared_ptr<Exposure>> \n+   * @return The map of exposures with detectors\n    */\n-  virtual std::map<ExposureId, std::shared_ptr<Exposure>> collectPerExposure(\n-          const std::vector<std::shared_ptr<Detector>> &detectorList) = 0;\n+  virtual std::map<LE1_NISP_Entities::ExposureId, std::shared_ptr<LE1_NISP_Entities::Exposure>> collectPerExposure(\n+          const std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> &detectorList) = 0;\n  \n };\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/DetectorCollectorObt.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/DetectorCollectorObt.h\n+ * @file LE1_NISP_Interactors/DetectorCollectorObt.h\n  * @date 01/28/21\n  * @author user\n  *\n@@ -21,45 +21,60 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORCOLLECTOROBT_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORCOLLECTOROBT_H\n+#ifndef _LE1_NISP_INTERACTORS_DETECTORCOLLECTOROBT_H\n+#define _LE1_NISP_INTERACTORS_DETECTORCOLLECTOROBT_H\n \n-#include \"LE1_NISP_ProcessScience/Exception.h\"\n-#include \"LE1_NISP_ProcessScience/DetectorCollector.h\"\n+#include \"Exception.h\"\n+#include \"DetectorCollector.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class DetectorCollectorObt\n- * @brief\n+ * @brief Implementation of the DetectorCollector interface to group detectors into exposures based on their OBT\n  *\n  */\n class DetectorCollectorObt : public DetectorCollector{\n \n public:\n \n-  explicit DetectorCollectorObt(const std::shared_ptr<ExposureCreator> exposureCreator = nullptr);\n+  /**\n+   * @brief Constructor\n+   * @param exposureCreator The creator interface for exposures\n+   */\n+  explicit DetectorCollectorObt(const std::shared_ptr<LE1_NISP_Entities::ExposureCreator> exposureCreator = nullptr);\n    /**\n    * @brief Destructor\n    */\n   ~DetectorCollectorObt() override;\n \n-  std::map<ExposureId, std::shared_ptr<Exposure>> collectPerExposure(\n-          const std::vector<std::shared_ptr<Detector>> &detectorList) override;\n+  /**\n+   * @brief Group detector per exposure based on their OBT.\n+   * Detectors with OBT value within a configurable tolerance are added to the same exposure.\n+   * A progressive number is used as ExposureId.\n+   * @param detectorList List of detectors to be grouped\n+   * @return The map of exposures with detectors\n+   */\n+  std::map<LE1_NISP_Entities::ExposureId, std::shared_ptr<LE1_NISP_Entities::Exposure>> collectPerExposure(\n+          const std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> &detectorList) override;\n \n+  /**\n+   * @brief Set the tolerance to be applied to OBT during comparison\n+   * @param value The tolerance value in seconds\n+   */\n   void setTolerance(double value);\n \n private:\n-  std::shared_ptr<ExposureCreator> m_exposureCreator;\n+  std::shared_ptr<LE1_NISP_Entities::ExposureCreator> m_exposureCreator;\n   double m_tolerance;\n \n   void validateDetCollectionCreator() const;\n \n-  std::vector<std::shared_ptr<Detector>>\n-  sortDetectorByObt(const std::vector<std::shared_ptr<Detector>> &detectorOrderedList) const;\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>>\n+  sortDetectorByObt(const std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> &detectorOrderedList) const;\n };  // End of DetectorCollectorObt class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/DetectorMetadataParser.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/DetectorMetadataParser.h\n+ * @file LE1_NISP_Interactors/DetectorMetadataParser.h\n  * @date 10/30/20\n  * @author user\n  *\n@@ -21,17 +21,17 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORMETADATAPARSER_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORMETADATAPARSER_H\n+#ifndef _LE1_NISP_INTERACTORS_DETECTORMETADATAPARSER_H\n+#define _LE1_NISP_INTERACTORS_DETECTORMETADATAPARSER_H\n \n-#include \"LE1_NISP_ProcessScience//TelemetryDetector.h\"\n-#include \"LE1_NISP_ProcessScience//DetectorMetadata.h\"\n+#include \"LE1_NISP_Entities/TelemetryDetector.h\"\n+#include \"LE1_NISP_Entities/DetectorMetadata.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class DetectorMetadataParser\n- * @brief\n+ * @brief Interface to extract the detector metadata from a telemetry file\n  *\n  */\n class DetectorMetadataParser {\n@@ -44,16 +44,15 @@ public:\n   virtual ~DetectorMetadataParser() = default;\n \n   /**\n-   * @brief Parse the telemetry of a detector and extract its metadata\n-   * \n+   * @brief Parse the telemetry of a detector to extract its metadata\n    * @param telemetryDetector TelemetryDetector from which metadata are read\n-   * @return std::shared_ptr<DetectorMetadata> \n+   * @return The detector metadata smart pointer\n    */\n-  virtual std::shared_ptr<DetectorMetadata> parseMetadata(const std::shared_ptr<TelemetryDetectorInterface> telemetryDetector) = 0;\n+  virtual std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> parseMetadata(const std::shared_ptr<LE1_NISP_Entities::TelemetryDetectorInterface> telemetryDetector) = 0;\n \n };  // End of DetectorMetadataParser class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/DetectorWriter.h": [
                        [
                            "@@ -0,0 +1,58 @@\n+/**\n+ * @file LE1_NISP_Interactors/DetectorWriter.h\n+ * @date 11/24/20\n+ * @author user\n+ *\n+ * @copyright (C) 2012-2020 Euclid Science Ground Segment\n+ *\n+ * This library is free software; you can redistribute it and/or modify it under\n+ * the terms of the GNU Lesser General Public License as published by the Free\n+ * Software Foundation; either version 3.0 of the License, or (at your option)\n+ * any later version.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+ * details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this library; if not, write to the Free Software Foundation, Inc.,\n+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+ *\n+ */\n+\n+#ifndef _LE1_NISP_INTERACTORS_DETECTORWRITER_H\n+#define _LE1_NISP_INTERACTORS_DETECTORWRITER_H\n+\n+#include <vector>\n+#include \"LE1_NISP_Entities/Detector.h\"\n+#include \"LE1_NISP_Entities/DetectorIterator.h\"\n+\n+namespace LE1_NISP_Interactors {\n+\n+/**\n+ * @class DetectorWriter\n+ * @brief Interface to write detectors belonging to the same exposure and generate the output product.\n+ *\n+ */\n+class DetectorWriter{\n+  public:\n+  /**\n+   * @brief Destructor\n+   */\n+  virtual ~DetectorWriter();\n+\n+  /**\n+   * @brief Write detectors generating output products\n+   * @param detectorIterator The iterator to travers a detector collection\n+   * @param outputPath The path of output directory\n+   * @return The list of written products\n+   */\n+  virtual std::vector<std::string> write(std::shared_ptr<LE1_NISP_Entities::DetectorIterator> detectorIterator, const std::string &outputPath) = 0;\n+\n+};  // End of DetectorWriter class\n+\n+}  // namespace LE1_NISP_Interactors\n+\n+\n+#endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/DetectorWriterElFitsIO.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/DetectorWriterElFitsIO.h\n+ * @file LE1_NISP_Interactors/DetectorWriterElFitsIO.h\n  * @date 02/04/21\n  * @author user\n  *\n@@ -21,127 +21,175 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORWRITERELFITSIO_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORWRITERELFITSIO_H\n+#ifndef _LE1_NISP_INTERACTORS_DETECTORWRITERELFITSIO_H\n+#define _LE1_NISP_INTERACTORS_DETECTORWRITERELFITSIO_H\n \n #include <memory>\n #include \"EleFits/MefFile.h\"\n \n-#include \"LE1_NISP_ProcessScience//Exception.h\"\n-#include \"LE1_NISP_ProcessScience//DetectorWriter.h\"\n-#include \"LE1_NISP_ProcessScience//DetectorIterator.h\"\n-#include \"LE1_NISP_ProcessScience//DateTimeManager.h\"\n+#include \"Exception.h\"\n+#include \"DetectorWriter.h\"\n+#include \"LE1_NISP_Entities/DetectorIterator.h\"\n+#include \"LE1_NISP_Entities/DateTimeManager.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class DetectorWriterElFitsIO\n- * @brief\n+ * @brief Extends DetectorWriter interface to generated FITS products.\n  *\n+ * This class provides the basic functionalities to write detector data to FITS products,\n+ * but it need to be extended and its abstract method implemented to write different data.\n+ *\n+ * @see ScienceWriterElFitsIO\n+ * @see HkWriterElFitsIO\n+ * @see EngFitsWriter\n  */\n class DetectorWriterElFitsIO: public DetectorWriter{\n public:\n-  explicit DetectorWriterElFitsIO(const std::shared_ptr<DateTimeManager> dateTimeManager = nullptr);\n+  /**\n+   * @brief Constructor\n+   * @param dateTimeManager The DateTimeManager smart pointer\n+   */\n+  explicit DetectorWriterElFitsIO(const std::shared_ptr<LE1_NISP_Entities::DateTimeManager> dateTimeManager = nullptr);\n+  /**\n+   * @brief Destructor\n+   */\n   ~DetectorWriterElFitsIO() override;\n \n-  std::vector<std::string> write(std::shared_ptr<DetectorIterator> detectorIterator, const std::string &outputPath) override;\n-\n-  virtual void setDateTimeManager(const std::shared_ptr<DateTimeManager> dateTimeManager);\n-\n-  virtual std::string getOutputPath() const;\n+  /**\n+   * @brief Write detectors data to output products in FITS format following this steps:\n+   * \\li input validation\n+   * \\li primary header writing\n+   * \\li detectors data writing\n+   *\n+   * @param detectorIterator The iterator to travers a detector collection\n+   * @param outputPath The path of output directory\n+   * @return The list of written products\n+   */\n+  std::vector<std::string> write(std::shared_ptr<LE1_NISP_Entities::DetectorIterator> detectorIterator, const std::string &outputPath) override;\n+\n+  /**\n+   * @brief Set the DateTimeManager\n+   * @param dateTimeManager the DateTimeManager smart pointer\n+   */\n+  virtual void setDateTimeManager(const std::shared_ptr<LE1_NISP_Entities::DateTimeManager> dateTimeManager);\n+\n+  /**\n+   * @brief Get the output directory\n+   * @return The path of output directory\n+   */\n+  [[nodiscard]] virtual std::string getOutputPath() const;\n \n protected:\n   std::string m_writerName;\n   std::string m_productType;\n   std::string m_fitsDefinitionName;\n   std::string m_outputPath;\n-  std::shared_ptr<DateTimeManager> m_dateTimeManager;\n+  std::shared_ptr<LE1_NISP_Entities::DateTimeManager> m_dateTimeManager;\n \n-  virtual void validateInputs(const std::shared_ptr<DetectorIterator> detectorIterator, const std::string &outputPath) const;\n+  virtual void validateInputs(const std::shared_ptr<LE1_NISP_Entities::DetectorIterator> detectorIterator, const std::string &outputPath) const;\n   virtual void validateOutputPath(const std::string &outputPath) const;\n   virtual void validateDateTimeManager() const;\n-  virtual void validateDetectorIterator(const std::shared_ptr<DetectorIterator> detectorIterator) const;\n-  virtual void validateDetector(const std::shared_ptr<Detector> detector) const;\n+  virtual void validateDetectorIterator(const std::shared_ptr<LE1_NISP_Entities::DetectorIterator> detectorIterator) const;\n+  virtual void validateDetector(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) const;\n \n   void initOutputPath(const std::string &outputPath);\n \n-  std::shared_ptr<DetectorMetadata> getPrimaryDetectorMetadata(const std::shared_ptr<DetectorIterator> detectorIterator) const;\n-  virtual std::string createFilename(const std::shared_ptr<DetectorMetadata> metadata, const std::string &productType);\n+  std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> getPrimaryDetectorMetadata(const std::shared_ptr<LE1_NISP_Entities::DetectorIterator> detectorIterator) const;\n+  virtual std::string createFilename(const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> metadata, const std::string &productType);\n \n+  /**\n+   * @brief Validate additional inputs\n+   */\n   virtual void validateInputsWriterSpecific() const = 0;\n-  virtual void validateDetectorWriterSpecific(const std::shared_ptr<Detector> &detector) const = 0;\n-  virtual void writePrimaryHeader(Euclid::Fits::MefFile& fits, const std::shared_ptr<DetectorMetadata> metadata) = 0;\n-  virtual void writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<Detector> detector) = 0;\n-\n-  virtual void writeImageExtHeaderMandatoryKeywords(const Euclid::Fits::Header& header, const std::shared_ptr<Detector> detector);\n-  void writeWcsKeywords(const Euclid::Fits::Header& header, const std::shared_ptr<LE1_NISP_ProcessScience::DetectorMetadata> &metadata);\n-  void writeCommonMetadata(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeObtObs(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeObtStaParams(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeObsDateTime(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeObtParams(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeDataProductParams(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeReadMode(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeMaccParams(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeExposureTimeParams(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writePointingParams(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeObservationIds(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeExposureCounters(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata, size_t totalExpCnt) const;\n-  void writeFwaConfig(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeGwaConfig(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeInstrumentConfig(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeExposureConfig(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeCuState(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeAcquisitionCounter(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeTotalResets(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeTotalReads(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeTotalDropLines(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeTotalGroups(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeCurrentRampCounters(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeModeStatus(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeRampStatus(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeCompressionParams(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeTimeTagDelay(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeSignalParams(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeHistoryParamIndex(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeDetectorId(const Euclid::Fits::Header &header, const std::shared_ptr<Detector> &detector) const;\n-  void writeSceIndex(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeScaId(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeSceStatus(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writePacketType(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeCommandCounters(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeCheckErrors(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeAliveCounter(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeIpcParams(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writePreampParams(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeTestPatternParams(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeDetectorReadOutNoise(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeDetectorGainFactor(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeChi2Threshold(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeUsedRawLines(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeKtcCicles(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeDpuParams(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeCompressionFactors(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeProcessingExecTime(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeCrcMask(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeRawlineIndexes(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeRefPixelProcMode(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeScienceCompressionRatio(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-  void writeDataQualityCompressionRatio(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n-\n-  virtual void writeParamAsBool(const Euclid::Fits::Header& hdu, const std::shared_ptr<const ParameterInterface> param) const;\n-  virtual void writeParamAsUInt8(const Euclid::Fits::Header& hdu, const std::shared_ptr<const ParameterInterface> param) const;\n-  virtual void writeParamAsUInt16(const Euclid::Fits::Header& hdu, const std::shared_ptr<const ParameterInterface> param) const;\n-  virtual void writeParamAsUInt(const Euclid::Fits::Header& hdu, const std::shared_ptr<const ParameterInterface> param) const;\n-  virtual void writeParamAsString(const Euclid::Fits::Header& hdu, const std::shared_ptr<const ParameterInterface> param) const;\n-  virtual void writeParamAsDouble(const Euclid::Fits::Header& hdu, const std::shared_ptr<const ParameterInterface> param) const;\n+  /**\n+   * @brief Validate content of the detector to write specific products (e.g. science data, eng. data, etc.)\n+   * @param detector The detector smart pointer\n+   */\n+  virtual void validateDetectorWriterSpecific(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const = 0;\n+  /**\n+   * @brief Write the FITS primary header\n+   * @param fits The FITS file\n+   * @param metadata The detector metadata\n+   */\n+  virtual void writePrimaryHeader(Euclid::Fits::MefFile& fits, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> metadata) = 0;\n+  /**\n+   * @brief Write an extension with the specific data of a detector\n+   * @param fits The FITS file\n+   * @param detector The detector smart pointer\n+   */\n+  virtual void writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<LE1_NISP_Entities::Detector> detector) = 0;\n+\n+  virtual void writeImageExtHeaderMandatoryKeywords(const Euclid::Fits::Header& header, const std::shared_ptr<LE1_NISP_Entities::Detector> detector);\n+  void writeWcsKeywords(const Euclid::Fits::Header& header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata);\n+  void writeCommonMetadata(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeObtObs(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeObtStaParams(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeObsDateTime(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeObtParams(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeDataProductParams(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeReadMode(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeMaccParams(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeExposureTimeParams(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writePointingParams(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeObservationIds(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeExposureCounters(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata, size_t totalExpCnt) const;\n+  void writeFwaConfig(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeGwaConfig(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeInstrumentConfig(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeExposureConfig(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeCuState(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeAcquisitionCounter(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeTotalResets(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeTotalReads(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeTotalDropLines(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeTotalGroups(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeCurrentRampCounters(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeModeStatus(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeRampStatus(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeCompressionParams(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeTimeTagDelay(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeSignalParams(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeHistoryParamIndex(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeDetectorId(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const;\n+  void writeSceIndex(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeScaId(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeSceStatus(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writePacketType(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeCommandCounters(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeCheckErrors(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeAliveCounter(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeIpcParams(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writePreampParams(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeTestPatternParams(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeDetectorReadOutNoise(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeDetectorGainFactor(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeChi2Threshold(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeUsedRawLines(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeKtcCicles(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeDpuParams(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeCompressionFactors(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeProcessingExecTime(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeCrcMask(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeRawlineIndexes(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeRefPixelProcMode(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeScienceCompressionRatio(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+  void writeDataQualityCompressionRatio(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n+\n+  virtual void writeParamAsBool(const Euclid::Fits::Header& hdu, const std::shared_ptr<const LE1_NISP_Entities::ParameterInterface> param) const;\n+  virtual void writeParamAsUInt8(const Euclid::Fits::Header& hdu, const std::shared_ptr<const LE1_NISP_Entities::ParameterInterface> param) const;\n+  virtual void writeParamAsUInt16(const Euclid::Fits::Header& hdu, const std::shared_ptr<const LE1_NISP_Entities::ParameterInterface> param) const;\n+  virtual void writeParamAsUInt(const Euclid::Fits::Header& hdu, const std::shared_ptr<const LE1_NISP_Entities::ParameterInterface> param) const;\n+  virtual void writeParamAsString(const Euclid::Fits::Header& hdu, const std::shared_ptr<const LE1_NISP_Entities::ParameterInterface> param) const;\n+  virtual void writeParamAsDouble(const Euclid::Fits::Header& hdu, const std::shared_ptr<const LE1_NISP_Entities::ParameterInterface> param) const;\n \n   template<typename T>\n   const Euclid::Fits::ImageHdu& writeRasterImage(Euclid::Fits::MefFile& fits,\n                                                     const std::string &extensionName, \n                                                     const size_t &height, \n                                                     const size_t &width, \n-                                                    const std::shared_ptr<ByteArray> data){\n+                                                    const std::shared_ptr<LE1_NISP_Entities::ByteArray> data){\n     return writeRasterImage<T>(fits, extensionName, height, width, data, 0, data->getSize());\n   }\n \n@@ -150,7 +198,7 @@ protected:\n                                                     const std::string &extensionName, \n                                                     const size_t &height, \n                                                     const size_t &width, \n-                                                    const std::shared_ptr<ByteArray> data, \n+                                                    const std::shared_ptr<LE1_NISP_Entities::ByteArray> data,\n                                                     const size_t &offset,\n                                                     const size_t &size){\n     auto dataPtr = std::reinterpret_pointer_cast<T[]>(data->getData());    \n@@ -158,10 +206,10 @@ protected:\n     return fits.assignImageExt(extensionName, raster);\n   }\n \n-  void writePlanId(const Euclid::Fits::Header &header, const std::shared_ptr<DetectorMetadata> &metadata) const;\n+  void writePlanId(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> &metadata) const;\n };  // End of DetectorWriterElFitsIO class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/DetectorsInitializer.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/DetectorsInitializer.h\n+ * @file LE1_NISP_Interactors/DetectorsInitializer.h\n  * @date 02/11/21\n  * @author user\n  *\n@@ -21,17 +21,17 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORSINITIALIZER_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORSINITIALIZER_H\n+#ifndef _LE1_NISP_INTERACTORS_DETECTORSINITIALIZER_H\n+#define _LE1_NISP_INTERACTORS_DETECTORSINITIALIZER_H\n \n #include <vector>\n-#include \"LE1_NISP_ProcessScience/Detector.h\"\n+#include \"LE1_NISP_Entities/Detector.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class DetectorsInitializer\n- * @brief\n+ * @brief Interface to find and initialize detectors from the input telemetry file\n  *\n  */\n class DetectorsInitializer {\n@@ -39,15 +39,15 @@ public:\n   virtual ~DetectorsInitializer() = default;\n   \n   /**\n-   * @brief Read DPU telemetry file, identify and init detectors.\n-   * \n-   * @param dpuFile filepath and filename of the DPU telemetry file\n-   * @return std::vector<std::shared_ptr<Detector>> \n+   * @brief Read telemetry file, identify and init detectors.\n+   * @param dpuFile filepath and filename of the telemetry file\n+   * @return Vector of identified detectors\n    */\n-  virtual std::vector<std::shared_ptr<Detector>> initDetectors(const std::string &dpuFile) = 0;\n+  virtual std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> initDetectors(const std::string &dpuFile) = 0;\n+\n };  // End of DetectorsInitializer class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/EngDecoder.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/EngDecoder.h\n+ * @file LE1_NISP_Interactors/EngDecoder.h\n  * @date 01/29/21\n  * @author user\n  *\n@@ -21,18 +21,18 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_ENGDECODER_H\n-#define _LE1_NISP_PROCESSSCIENCE_ENGDECODER_H\n+#ifndef _LE1_NISP_INTERACTORS_ENGDECODER_H\n+#define _LE1_NISP_INTERACTORS_ENGDECODER_H\n \n-#include \"LE1_NISP_ProcessScience//Exception.h\"\n-#include \"LE1_NISP_ProcessScience//TelemetrySectionDecoder.h\"\n-#include \"LE1_NISP_ProcessScience//TelemetryConfiguration.h\"\n+#include \"Exception.h\"\n+#include \"TelemetrySectionDecoder.h\"\n+#include \"LE1_NISP_Entities/TelemetryConfiguration.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class EngDecoder\n- * @brief\n+ * @brief Implementation of the TelemetrySectionDecoder interface to decode engineering telemetry data\n  *\n  */\n class EngDecoder : public TelemetrySectionDecoder{\n@@ -47,20 +47,25 @@ public:\n   /**\n    * @brief Destructor\n    */\n-  virtual ~EngDecoder();\n+  ~EngDecoder() override;\n \n-  virtual std::shared_ptr<ByteArray> decode(const std::shared_ptr<Detector> detector) override;\n+  /**\n+   * @brief Decode the engineering telemetry data of a detector\n+   * @param detector The detector containing the required information to decode engineering telemetry data\n+   * @return The decoded data\n+   */\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> decode(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) override;\n   \n private:\n-  void validateDetector(const std::shared_ptr<Detector> detector) const;\n-  void validateTelemetryDetector(const std::shared_ptr<TelemetryDetectorInterface> tmDetector) const;\n-  void validateTelemetrySection(const std::shared_ptr<TelemetrySection> section, const std::string &sectionName = \"\") const;\n+  void validateDetector(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) const;\n+  void validateTelemetryDetector(const std::shared_ptr<LE1_NISP_Entities::TelemetryDetectorInterface> tmDetector) const;\n+  void validateTelemetrySection(const std::shared_ptr<LE1_NISP_Entities::TelemetrySection> section, const std::string &sectionName = \"\") const;\n \n-  std::shared_ptr<ByteArray> decodeSection(const std::shared_ptr<TelemetryDetectorInterface> tmDetector, const std::shared_ptr<TelemetrySection> section) const;\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> decodeSection(const std::shared_ptr<LE1_NISP_Entities::TelemetryDetectorInterface> tmDetector, const std::shared_ptr<LE1_NISP_Entities::TelemetrySection> section) const;\n \n };  // End of EngDecoder class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/EngFitsWriter.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/EngFitsWriter.h\n+ * @file LE1_NISP_Interactors/EngFitsWriter.h\n  * @date 02/18/21\n  * @author user\n  *\n@@ -21,17 +21,24 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_ENGFITSWRITER_H\n-#define _LE1_NISP_PROCESSSCIENCE_ENGFITSWRITER_H\n+#ifndef _LE1_NISP_INTERACTORS_ENGFITSWRITER_H\n+#define _LE1_NISP_INTERACTORS_ENGFITSWRITER_H\n \n-#include \"LE1_NISP_ProcessScience//ExposuresCounter.h\"\n-#include \"LE1_NISP_ProcessScience//DetectorWriterElFitsIO.h\"\n+#include \"ExposuresCounter.h\"\n+#include \"DetectorWriterElFitsIO.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class EngFitsWriter\n- * @brief\n+ * @brief Extends DetectorWriterElFitsIO interface to generated engineering FITS products.\n+ *\n+ * This class provides the basic functionalities to validate engineering data and write the primary header,\n+ * but it need to be extended and its abstract method implemented to write every kind of engineering data.\n+ *\n+ * @see EngUnprocessedGroupsFitsWriter\n+ * @see EngPixelsOverThresholdFitsWriter\n+ * @see EngUncompressedImageFitsWriter\n  *\n  */\n class EngFitsWriter: public DetectorWriterElFitsIO {\n@@ -40,34 +47,48 @@ public:\n \n   /**\n    * @brief Constructor\n+   * @param dateTimeManager The DateTimeManager smart pointer\n+   * @param exposuresCounter The ExposuresCounter smart pointer\n    */\n-  EngFitsWriter(const std::shared_ptr<DateTimeManager> dateTimeManager = nullptr, \n+  explicit EngFitsWriter(const std::shared_ptr<LE1_NISP_Entities::DateTimeManager> dateTimeManager = nullptr,\n                     const std::shared_ptr<ExposuresCounter> exposuresCounter = nullptr);\n \n   /**\n    * @brief Destructor\n    */\n-  virtual ~EngFitsWriter();\n+  ~EngFitsWriter() override;\n \n+  /**\n+   * @brief Set the ExposuresCounter\n+   * @param exposuresCounter the ExposuresCounter smart pointer\n+   */\n   void setExposuresCounter(const std::shared_ptr<ExposuresCounter> exposuresCounter);\n \n protected:\n   std::shared_ptr<ExposuresCounter> m_exposuresCounter;\n \n+  /**\n+   * @brief Validate input specific for EngFitsWriter\n+   */\n   void validateInputsWriterSpecific() const override;\n-  virtual void validateDetectorWriterSpecific(const std::shared_ptr<Detector> &detector) const = 0;\n+  virtual void validateDetectorWriterSpecific(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const = 0;\n \n   void validateExposuresCounter() const;\n-  void validateEngData(const std::shared_ptr<Detector> &detector) const;\n-  void validateDetectorGroups(const std::shared_ptr<Detector> &detector) const;\n+  void validateEngData(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const;\n+  void validateDetectorGroups(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const;\n \n-  void writePrimaryHeader(Euclid::Fits::MefFile& fits, const std::shared_ptr<DetectorMetadata> metadata) override;\n-  virtual void writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<Detector> detector) = 0;\n+  /**\n+   * @brief Write the FITS primary header for engineering product\n+   * @param fits The engineering FITS file\n+   * @param metadata The detector metadata\n+   */\n+  void writePrimaryHeader(Euclid::Fits::MefFile& fits, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> metadata) override;\n+  virtual void writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<LE1_NISP_Entities::Detector> detector) = 0;\n \n };  // End of EngFitsWriter class\n \n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/EngPixelsOverThresholdFitsWriter.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/EngPixelsOverThresholdFitsWriter.h\n+ * @file LE1_NISP_Interactors/EngPixelsOverThresholdFitsWriter.h\n  * @date 02/18/21\n  * @author user\n  *\n@@ -21,16 +21,19 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience//EngFitsWriter.h\"\n+#include \"EngFitsWriter.h\"\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_ENGPIXELSOVERTHRESHOLDFITSWRITER_H\n-#define _LE1_NISP_PROCESSSCIENCE_ENGPIXELSOVERTHRESHOLDFITSWRITER_H\n+#ifndef _LE1_NISP_INTERACTORS_ENGPIXELSOVERTHRESHOLDFITSWRITER_H\n+#define _LE1_NISP_INTERACTORS_ENGPIXELSOVERTHRESHOLDFITSWRITER_H\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class EngPixelsOverThresholdFitsWriter\n- * @brief\n+ * @brief Implementation of EngFitsWriter to generated engineering debug FITS products.\n+ *\n+ * The generated FITS file contains a number of HDUs equal to the number of detectors.\n+ * Each HDU, named DET<XX>.ENG, is an image HDU with size (number of groups x number of selected pixels).\n  *\n  */\n class EngPixelsOverThresholdFitsWriter: public EngFitsWriter {\n@@ -39,24 +42,33 @@ public:\n \n   /**\n    * @brief Constructor\n+   * @param dateTimeManager  The DateTimeManager smart pointer\n+   * @param exposuresCounter  The ExposuresCounter smart pointer\n    */\n-  EngPixelsOverThresholdFitsWriter(const std::shared_ptr<DateTimeManager> dateTimeManager = nullptr, \n-                         const std::shared_ptr<ExposuresCounter> exposuresCounter = nullptr);\n+  explicit EngPixelsOverThresholdFitsWriter(const std::shared_ptr<LE1_NISP_Entities::DateTimeManager> dateTimeManager = nullptr,\n+                                            const std::shared_ptr<ExposuresCounter> exposuresCounter = nullptr);\n \n   /**\n    * @brief Destructor\n    */\n-  virtual ~EngPixelsOverThresholdFitsWriter();\n+  ~EngPixelsOverThresholdFitsWriter() override;\n \n private:\n-\n-  void validateDetectorWriterSpecific(const std::shared_ptr<Detector> &detector) const override;\n-\n-  void writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<Detector> detector) override;\n+  /**\n+   * @brief Validate engineering data of the detector\n+   * @param detector The detector object\n+   */\n+  void validateDetectorWriterSpecific(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const override;\n+  /**\n+   * @brief Write the engineering extensions for a detector\n+   * @param fits The engineering FITS file\n+   * @param detector The detector smart pointer\n+   */\n+  void writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<LE1_NISP_Entities::Detector> detector) override;\n \n };  // End of EngPixelsOverThresholdFitsWriter class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/EngUncompressedImageFitsWriter.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/EngUncompressedImageFitsWriter.h\n+ * @file LE1_NISP_Interactors/EngUncompressedImageFitsWriter.h\n  * @date 05/06/21\n  * @author user\n  *\n@@ -21,16 +21,24 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_ENGUNCOMPRESSEDIMAGEFITSWRITER_H\n-#define _LE1_NISP_PROCESSSCIENCE_ENGUNCOMPRESSEDIMAGEFITSWRITER_H\n+#ifndef _LE1_NISP_INTERACTORS_ENGUNCOMPRESSEDIMAGEFITSWRITER_H\n+#define _LE1_NISP_INTERACTORS_ENGUNCOMPRESSEDIMAGEFITSWRITER_H\n \n-#include \"LE1_NISP_ProcessScience//EngFitsWriter.h\"\n+#include \"EngFitsWriter.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class EngUncompressedImageFitsWriter\n- * @brief\n+This component provides the interface to find and initialize detectors from the input telemetry file.\n+The detector telemetry data can be identified in the NISP telemetry searching for the uncompressed header, which is the first item transmitted before each detector data. It starts with a specific sequence of bytes (SYNC) and has a fixed size and structure. The header contains all information that allow to distinguish each telemetry data section for that specific detector.\n+Once the SYNC has been found the header is parsed and the telemetry sections are calculated defining:\n+\tOffset: the byte where the section starts\n+\tSize: the size of the telemetry data\n+\tPadding: padding bytes\n+ *\n+ * The generated FITS file contains a number of HDUs equal to the number of detectors.\n+ * Each HDU, named DET<XX>.ENG, is an image HDU with the uncompressed science data acquired.\n  *\n  */\n class EngUncompressedImageFitsWriter: public EngFitsWriter {\n@@ -40,7 +48,7 @@ public:\n   /**\n    * @brief Constructor\n    */\n-  EngUncompressedImageFitsWriter(const std::shared_ptr<DateTimeManager> dateTimeManager = nullptr, \n+  EngUncompressedImageFitsWriter(const std::shared_ptr<LE1_NISP_Entities::DateTimeManager> dateTimeManager = nullptr,\n                                         const std::shared_ptr<ExposuresCounter> exposuresCounter = nullptr);\n \n   /**\n@@ -49,14 +57,21 @@ public:\n   virtual ~EngUncompressedImageFitsWriter();\n \n private:\n-\n-  void validateDetectorWriterSpecific(const std::shared_ptr<Detector> &detector) const override;\n-  \n-  void writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<Detector> detector) override;\n+  /**\n+   * @brief Validate engineering data of the detector\n+   * @param detector The detector object\n+   */\n+  void validateDetectorWriterSpecific(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const override;\n+  /**\n+   * @brief Write the engineering extensions for a detector\n+   * @param fits The engineering FITS file\n+   * @param detector The detector smart pointer\n+   */\n+  void writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<LE1_NISP_Entities::Detector> detector) override;\n \n };  // End of EngUncompressedImageFitsWriter class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/EngUnprocessedGroupsFitsWriter.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/EngUnprocessedGroupsFitsWriter.h\n+ * @file LE1_NISP_Interactors/EngUnprocessedGroupsFitsWriter.h\n  * @date 02/01/21\n  * @author user\n  *\n@@ -21,17 +21,20 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_ENGUNPROCESSEDGROUPSFITSWRITER_H\n-#define _LE1_NISP_PROCESSSCIENCE_ENGUNPROCESSEDGROUPSFITSWRITER_H\n+#ifndef _LE1_NISP_INTERACTORS_ENGUNPROCESSEDGROUPSFITSWRITER_H\n+#define _LE1_NISP_INTERACTORS_ENGUNPROCESSEDGROUPSFITSWRITER_H\n \n-#include \"LE1_NISP_ProcessScience//EngFitsWriter.h\"\n+#include \"EngFitsWriter.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n \n /**\n  * @class EngUnprocessedGroupsFitsWriter\n- * @brief\n+ * @brief Implementation of EngFitsWriter to generated engineering raw FITS products.\n+ *\n+ * It is generated one FITS file per detector, containing a number of Image HDUs equal to the number of groups in the MACC acquisition, named DET<XX>.GROUP<N>.ENG.\n+ * Each image has the nominal NISP detector size, i.e. (2048x2048) since it provides the unprocessed detector frame for each group of the MACC acquisition.\n  *\n  */\n class EngUnprocessedGroupsFitsWriter: public EngFitsWriter {\n@@ -40,27 +43,37 @@ public:\n \n   /**\n    * @brief Constructor\n+   * @param dateTimeManager  The DateTimeManager smart pointer\n+   * @param exposuresCounter  The ExposuresCounter smart pointer\n    */\n-  EngUnprocessedGroupsFitsWriter(const std::shared_ptr<DateTimeManager> dateTimeManager = nullptr, \n-                       const std::shared_ptr<ExposuresCounter> exposuresCounter = nullptr);\n+  explicit EngUnprocessedGroupsFitsWriter(const std::shared_ptr<LE1_NISP_Entities::DateTimeManager> dateTimeManager = nullptr,\n+                                          const std::shared_ptr<ExposuresCounter> exposuresCounter = nullptr);\n \n   /**\n    * @brief Destructor\n    */\n   ~EngUnprocessedGroupsFitsWriter() override;\n \n-  std::vector<std::string> write(std::shared_ptr<DetectorIterator> detectorIterator, const std::string &outputPath) override;\n+  std::vector<std::string> write(std::shared_ptr<LE1_NISP_Entities::DetectorIterator> detectorIterator, const std::string &outputPath) override;\n \n private:\n-\n-  void validateDetectorWriterSpecific(const std::shared_ptr<Detector> &detector) const override;\n+  /**\n+   * @brief Validate engineering data of the detector\n+   * @param detector The detector object\n+   */\n+  void validateDetectorWriterSpecific(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const override;\n   \n-  std::string createFilename(const std::shared_ptr<DetectorMetadata> metadata, const std::string &productType) override;\n-  void writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<Detector> detector) override;\n+  std::string createFilename(const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> metadata, const std::string &productType) override;\n+  /**\n+   * @brief Write the engineering extensions for a detector\n+   * @param fits The engineering FITS file\n+   * @param detector The detector smart pointer\n+   */\n+  void writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<LE1_NISP_Entities::Detector> detector) override;\n   \n };  // End of EngUnprocessedGroupsFitsWriter class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/ErrorsDecoder.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/ErrorsDecoder.h\n+ * @file LE1_NISP_Interactors/ErrorsDecoder.h\n  * @date 02/19/21\n  * @author user\n  *\n@@ -21,41 +21,51 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_ERRORSDECODER_H\n-#define _LE1_NISP_PROCESSSCIENCE_ERRORSDECODER_H\n+#ifndef _LE1_NISP_INTERACTORS_ERRORSDECODER_H\n+#define _LE1_NISP_INTERACTORS_ERRORSDECODER_H\n \n-#include \"LE1_NISP_ProcessScience//TelemetrySectionDecoder.h\"\n-#include \"LE1_NISP_ProcessScience//Decompressor.h\"\n+#include \"TelemetrySectionDecoder.h\"\n+#include \"Decompressor.h\"\n+#include \"Exception.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class ErrorsDecoder\n- * @brief\n+ * @brief Implementation of the TelemetrySectionDecoder interface to decode errors telemetry data\n  *\n  */\n class ErrorsDecoder: public TelemetrySectionDecoder{\n \n public:\n \n-  ErrorsDecoder(const std::shared_ptr<Decompressor> decompressor);\n+  /**\n+   * @brief Constructor\n+   * @param decompressor The decompressor smart pointer\n+   */\n+  explicit ErrorsDecoder(const std::shared_ptr<Decompressor> decompressor);\n \n   /**\n    * @brief Destructor\n    */\n-  virtual ~ErrorsDecoder();\n+  ~ErrorsDecoder() override;\n \n-  virtual std::shared_ptr<ByteArray> decode(const std::shared_ptr<Detector> detector) override;\n+  /**\n+   * @brief Decode the errors telemetry data of a detector\n+   * @param detector The detector containing the required information to decode errors telemetry data\n+   * @return The decoded data\n+   */\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> decode(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) override;\n   \n private:\n   std::shared_ptr<Decompressor> m_decompressor;\n \n-  void validateDetector(const std::shared_ptr<Detector> &detector) const;\n+  void validateDetector(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const;\n   void validateDecompressor() const;\n \n };  // End of ErrorsDecoder class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/Exception.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/Exception.h\n+ * @file LE1_NISP_Interactors/Exception.h\n  * @date 10/15/20\n  * @author user\n  *\n@@ -21,12 +21,12 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_EXCEPTION_H\n-#define _LE1_NISP_PROCESSSCIENCE_EXCEPTION_H\n+#ifndef _LE1_NISP_INTERACTORS_EXCEPTION_H\n+#define _LE1_NISP_INTERACTORS_EXCEPTION_H\n \n #include \"ElementsKernel/Exception.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class Exception\n@@ -42,10 +42,6 @@ public:\n \n };\n \n-class IndexOutOfBoundException: public Exception{\n-  using Exception::Exception;\n-};\n-\n class NullByteArrayException: public Exception{\n   using Exception::Exception;\n };\n@@ -62,50 +58,6 @@ class ParameterWithTheSameNameException: public Exception{\n   using Exception::Exception;\n };\n \n-class UnknownDetectorConfiguration: public Exception{\n-  using Exception::Exception;\n-};\n-\n-class UnknownKeysConfigException: public Exception{\n-  using Exception::Exception;\n-};\n-\n-class UnknownInstConfigException: public Exception{\n-  using Exception::Exception;\n-};\n-\n-class UnknownGwaPosConfigException: public Exception{\n-  using Exception::Exception;\n-};\n-\n-class UnknownFwaPosConfigException: public Exception{\n-  using Exception::Exception;\n-};\n-\n-class UnknownGwaTiltConfigException: public Exception{\n-  using Exception::Exception;\n-};\n-\n-class UnknownProductCategoryException: public Exception{\n-  using Exception::Exception;\n-};\n-\n-class UnknownProductFirstTypeException: public Exception{\n-  using Exception::Exception;\n-};\n-\n-class UnknownProductSecondTypeException: public Exception{\n-  using Exception::Exception;\n-};\n-\n-class UnknownObservationModeException: public Exception{\n-  using Exception::Exception;\n-};\n-\n-class UnknownProductTechniqueException: public Exception{\n-  using Exception::Exception;\n-};\n-\n class NullConfigManagerException: public Exception{\n   using Exception::Exception;\n };\n@@ -114,10 +66,6 @@ class NullParameterDescriptionException: public Exception{\n   using Exception::Exception;\n };\n \n-class IncompatibleArraySizeException: public Exception{\n-  using Exception::Exception;\n-};\n-\n class IncompatibleParameterAndByteArraySizeException: public Exception{\n   using Exception::Exception;\n };\n@@ -126,38 +74,6 @@ class IncompatibleDescriptionSizeAndOffbitException: public Exception{\n   using Exception::Exception;\n };\n \n-class UnableToRepresentParamValueAsInt8Exception: public Exception{\n-  using Exception::Exception;\n-};\n-\n-class UnableToRepresentParamValueAsInt16Exception: public Exception{\n-  using Exception::Exception;\n-};\n-\n-class UnableToRepresentParamValueAsInt32Exception: public Exception{\n-  using Exception::Exception;\n-};\n-\n-class UnableToRepresentParamValueAsUInt8Exception: public Exception{\n-  using Exception::Exception;\n-};\n-\n-class UnableToRepresentParamValueAsUInt16Exception: public Exception{\n-  using Exception::Exception;\n-};\n-\n-class UnableToRepresentParamValueAsUInt32Exception: public Exception{\n-  using Exception::Exception;\n-};\n-\n-class UnableToRepresentParamValueAsStringException: public Exception{\n-  using Exception::Exception;\n-};\n-\n-class UnableToRepresentParamValueAsDoubleException: public Exception{\n-  using Exception::Exception;\n-};\n-\n class UnsupportedParamSizeException: public Exception{\n   using Exception::Exception;\n };\n@@ -201,10 +117,6 @@ class EngineeringDataSizeGreaterThanMaxSizeException: public Exception{\n   using Exception::Exception;\n };\n \n-class OffsetExceedingEndOfFileException: public Exception{\n-  using Exception::Exception;\n-};\n-\n class Tail1NotFoundException: public Exception{\n   using Exception::Exception;\n };\n@@ -228,10 +140,6 @@ class FileNotFoundException: public Exception{\n   using Exception::Exception;\n };\n \n-class TelemetryFileReadingException: public Exception{\n-  using Exception::Exception;\n-};\n-\n class NoFileHasBeenOpenedException: public Exception{\n   using Exception::Exception;\n };\n@@ -331,10 +239,6 @@ class NullQualityDataSectionException: public Exception{\n   using Exception::Exception;\n };\n \n-class NullTelemetryConfigurationException: public Exception{\n-  using Exception::Exception;\n-};\n-\n class NullEngDataByteArrayException: public Exception{\n   using Exception::Exception;\n };\n@@ -375,7 +279,7 @@ class NullDetectorMetadataParserException: public Exception{\n   using Exception::Exception;\n };\n \n-class NullDetectorCollectorEception: public Exception{\n+class NullDetectorCollectorException: public Exception{\n   using Exception::Exception;\n };\n \n@@ -478,30 +382,6 @@ class NullErrorsDecoderException: public Exception{\n   using Exception::Exception;\n };\n \n-class ParamDescriptionNodeException:  public Exception{\n-  using Exception::Exception;\n-};\n-\n-class ErrorReadingParamDescriptionInfoException:  public Exception{\n-  using Exception::Exception;\n-};\n-\n-class IncompleteTelemetryConfigException:  public Exception{\n-  using Exception::Exception;\n-};\n-\n-class IncompleteDetectorConfigException: public Exception{\n-  using Exception::Exception;\n-};\n-\n-class ErrorReadingDetectorConfigException: public Exception{\n-  using Exception::Exception;\n-};\n-\n-class ZeroDetectorConfigFoundException: public Exception{\n-  using Exception::Exception;\n-};\n-\n class NullDetectorConfigManagerException: public Exception{\n   using Exception::Exception;\n };\n@@ -510,10 +390,6 @@ class ConfigurationAlreadyExistsException: public Exception{\n   using Exception::Exception;\n };\n \n-class IncompleteExposureConfigException: public Exception{\n-  using Exception::Exception;\n-};\n-\n class NullExposureConfigManagerException: public Exception{\n   using Exception::Exception;\n };\n@@ -534,10 +410,6 @@ class NullHistoryDecoderException: public Exception{\n   using Exception::Exception;\n };\n \n-class EmptyScienceProductException: public Exception{\n-  using Exception::Exception;\n-};\n-\n class NoDetectorAvailableException: public Exception{\n   using Exception::Exception;\n };\n@@ -550,39 +422,23 @@ class NullPlanningIdException: public Exception{\n   using Exception::Exception;\n };\n \n-class NotImplementedException: public Exception{\n-  using Exception::Exception;\n-};\n-\n class UnknownExposureConfigurationException: public Exception{\n   using Exception::Exception;\n };\n \n-class UnknownObservationTypeException:  public Exception{\n-  using Exception::Exception;\n-};\n-\n class UnknownParameterTypeException:  public Exception{\n   using Exception::Exception;\n };\n \n-class ErrorReadingFixedParamElementException:  public Exception{\n-  using Exception::Exception;\n-};\n-\n-class FixedParamNodeException:  public Exception{\n-  using Exception::Exception;\n-};\n-\n-class DataModelParamsParserException: public Exception{\n+class ZeroDetectorsFoundException: public Exception{\n   using Exception::Exception;\n };\n \n-class ZeroDetectorsFoundException: public Exception{\n+class InvalidOffbitValueException: public Exception{\n   using Exception::Exception;\n };\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/ExposuresCounter.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/ExposuresCounter.h\n+ * @file LE1_NISP_Interactors/ExposuresCounter.h\n  * @date 02/03/21\n  * @author user\n  *\n@@ -21,14 +21,14 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_EXPOSURESCOUNTER_H\n-#define _LE1_NISP_PROCESSSCIENCE_EXPOSURESCOUNTER_H\n+#ifndef _LE1_NISP_INTERACTORS_EXPOSURESCOUNTER_H\n+#define _LE1_NISP_INTERACTORS_EXPOSURESCOUNTER_H\n \n #include <memory>\n #include <map>\n-#include \"LE1_NISP_ProcessScience/Exception.h\"\n+#include \"Exception.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class ExposuresCounter\n@@ -37,12 +37,35 @@ namespace LE1_NISP_ProcessScience {\n  */\n class ExposuresCounter{\n public:\n+  /**\n+   * Default constructor\n+   */\n   ExposuresCounter();\n+  /**\n+   * Destructor\n+   */\n   virtual ~ExposuresCounter();\n \n+  /**\n+   * @brief Increment the number of exposures for a given pointing ID\n+   * @param pointingId The pointing ID of the exposure\n+   */\n   virtual void addExposure(const uint32_t pointingId);\n+  /**\n+   * @brief Count the total number of exposures\n+   * @return The total number of exposures\n+   */\n   virtual size_t countTotalExposures() const;\n+  /**\n+   * @brief Count the number of exposure for a given pointing ID\n+   * @param pointingId The pointing ID\n+   * @return The number of exposure\n+   */\n   virtual size_t countExposuresPerPointing(const uint32_t pointingId) const;\n+  /**\n+   * @brief Count the number of different pointings\n+   * @return The total number of pointings\n+   */\n   virtual size_t countPointings() const;\n   \n private:\n@@ -50,7 +73,7 @@ private:\n \n };  // End of ExposuresCounter class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/HistoryDecoder.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/HistoryDecoder.h\n+ * @file LE1_NISP_Interactors/HistoryDecoder.h\n  * @date 03/01/21\n  * @author user\n  *\n@@ -21,42 +21,52 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_HISTORYDECODER_H\n-#define _LE1_NISP_PROCESSSCIENCE_HISTORYDECODER_H\n+#ifndef _LE1_NISP_INTERACTORS_HISTORYDECODER_H\n+#define _LE1_NISP_INTERACTORS_HISTORYDECODER_H\n \n-#include \"LE1_NISP_ProcessScience//TelemetrySectionDecoder.h\"\n-#include \"LE1_NISP_ProcessScience//Decompressor.h\"\n+#include \"TelemetrySectionDecoder.h\"\n+#include \"Decompressor.h\"\n+#include \"Exception.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class HistoryDecoder\n- * @brief\n+ * @brief Implementation of the TelemetrySectionDecoder interface to decode history telemetry data\n  *\n  */\n class HistoryDecoder: public TelemetrySectionDecoder {\n \n public:\n \n-  HistoryDecoder(const std::shared_ptr<Decompressor> decompressor);\n+  /**\n+   * @brief Constructor\n+   * @param decompressor The decompressor smart pointer\n+   */\n+  explicit HistoryDecoder(const std::shared_ptr<Decompressor> decompressor);\n \n   /**\n    * @brief Destructor\n    */\n-  virtual ~HistoryDecoder();\n+  ~HistoryDecoder() override;\n \n-  virtual std::shared_ptr<ByteArray> decode(const std::shared_ptr<Detector> detector) override;\n+  /**\n+   * @brief Decode the history telemetry data of a detector\n+   * @param detector The detector containing the required information to decode history telemetry data\n+   * @return The decoded data\n+   */\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> decode(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) override;\n   \n private:\n   std::shared_ptr<Decompressor> m_decompressor;\n \n-  void validateDetector(const std::shared_ptr<Detector> &detector) const;\n+  void validateDetector(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const;\n   void validateDecompressor() const;\n \n \n };  // End of HistoryDecoder class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/HkWriterElFitsIO.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/HkWriterElFitsIO.h\n+ * @file LE1_NISP_Interactors/HkWriterElFitsIO.h\n  * @date 01/26/21\n  * @author user\n  *\n@@ -21,18 +21,22 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_HKWRITERELFITSIO_H\n-#define _LE1_NISP_PROCESSSCIENCE_HKWRITERELFITSIO_H\n+#ifndef _LE1_NISP_INTERACTORS_HKWRITERELFITSIO_H\n+#define _LE1_NISP_INTERACTORS_HKWRITERELFITSIO_H\n \n #include <memory>\n-#include \"LE1_NISP_ProcessScience//Exception.h\"\n-#include \"LE1_NISP_ProcessScience//DetectorWriterElFitsIO.h\"\n+#include \"Exception.h\"\n+#include \"DetectorWriterElFitsIO.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class HkWriterElFitsIO\n- * @brief\n+ * @brief Implementation of DetectorWriterElFitsIO to generated housekeeping FITS product.\n+ * It consists of three extensions for each detector:\n+ * \\li Rawlines binary table: table which  contains rawlines data and both Digital and Analog TLM values in the header\n+ * \\li History binary table: table with number of rows equal to the number of groups and 32 columns (32 word values), containing the complete history of a selected parameter.\n+ * \\li Errors image: image with size 1024 x number of groups, containing the readout frames/lines errors.\n  *\n  */\n class HkWriterElFitsIO : public DetectorWriterElFitsIO{\n@@ -40,36 +44,54 @@ public:\n   \n   /**\n    * @brief Constructor\n+   * @param dateTimeManager The DateTimeManager smart pointer\n    */\n-  HkWriterElFitsIO(const std::shared_ptr<DateTimeManager> dateTimeManager = nullptr);\n+  explicit HkWriterElFitsIO(const std::shared_ptr<LE1_NISP_Entities::DateTimeManager> dateTimeManager = nullptr);\n \n   /**\n    * @brief Destructor\n    */\n-  virtual ~HkWriterElFitsIO();\n+  ~HkWriterElFitsIO() override;\n \n private:\n   std::vector<std::tuple<std::string, std::string, std::string>> analogTmInfo;\n \n   void initAnalogTmInfo();\n+  /**\n+   * @brief Validate input specific for ScienceWriterElFitsIO\n+   */\n   void validateInputsWriterSpecific() const override;\n-  void validateDetectorWriterSpecific(const std::shared_ptr<Detector> &detector) const override;\n-  void writePrimaryHeader(Euclid::Fits::MefFile& fits, const std::shared_ptr<DetectorMetadata> metadata) override;\n-  void writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<Detector> detector) override;\n+  /**\n+   * @brief Validate housekeeping data of the detector\n+   * @param detector The detector object\n+   */\n+  void validateDetectorWriterSpecific(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const override;\n+  /**\n+   * @brief Write the FITS primary header for housekeeping product\n+   * @param fits The housekeeping FITS file\n+   * @param metadata The detector metadata\n+   */\n+  void writePrimaryHeader(Euclid::Fits::MefFile& fits, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> metadata) override;\n+  /**\n+   * @brief Write the rawlines, errors, and history extensions for a detector\n+   * @param fits The housekeeping FITS file\n+   * @param detector The detector smart pointer\n+   */\n+  void writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<LE1_NISP_Entities::Detector> detector) override;\n \n-  void writeRawlines(Euclid::Fits::MefFile& fits, const std::string &extName, const std::shared_ptr<Detector> detector);\n-  void writeRawlinesHeader(const Euclid::Fits::Header &header, const std::shared_ptr<Detector> &detector);\n-  void writeAnalogTelemetry(const Euclid::Fits::Header &header, const std::shared_ptr<Detector> detector);\n+  void writeRawlines(Euclid::Fits::MefFile& fits, const std::string &extName, const std::shared_ptr<LE1_NISP_Entities::Detector> detector);\n+  void writeRawlinesHeader(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::Detector> &detector);\n+  void writeAnalogTelemetry(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::Detector> detector);\n   \n-  void writeErrors(Euclid::Fits::MefFile& fits, const std::string &extName, const std::shared_ptr<Detector> detector);\n-  void writeHistory(Euclid::Fits::MefFile& fits, const std::string &extName, const std::shared_ptr<Detector> detector);\n+  void writeErrors(Euclid::Fits::MefFile& fits, const std::string &extName, const std::shared_ptr<LE1_NISP_Entities::Detector> detector);\n+  void writeHistory(Euclid::Fits::MefFile& fits, const std::string &extName, const std::shared_ptr<LE1_NISP_Entities::Detector> detector);\n \n-  std::unique_ptr<unsigned short[]> readHistoryValidData(const std::shared_ptr<ByteArray> &historyData, const unsigned short groups, const unsigned short valuesPerGroup, const unsigned short maxValuesPerGroup) const;\n+  std::unique_ptr<unsigned short[]> readHistoryValidData(const std::shared_ptr<LE1_NISP_Entities::ByteArray> &historyData, const unsigned short groups, const unsigned short valuesPerGroup, const unsigned short maxValuesPerGroup) const;\n \n \n };  // End of HkWriterElFitsIO class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/MetadataParserParamDescriptions.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/MetadataParserParamDescriptions.h\n+ * @file LE1_NISP_Interactors/MetadataParserParamDescriptions.h\n  * @date 10/30/20\n  * @author user\n  *\n@@ -21,19 +21,19 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORMETADATAPARSERIMPL_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORMETADATAPARSERIMPL_H\n+#ifndef _LE1_NISP_INTERACTORS_DETECTORMETADATAPARSERIMPL_H\n+#define _LE1_NISP_INTERACTORS_DETECTORMETADATAPARSERIMPL_H\n \n #include <vector>\n #include <memory>\n-#include \"LE1_NISP_ProcessScience//DetectorMetadataParser.h\"\n-#include \"LE1_NISP_ProcessScience//Exception.h\"\n+#include \"DetectorMetadataParser.h\"\n+#include \"Exception.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class MetadataParserParamDescriptions\n- * @brief\n+ * @brief Implementation of DetectorMetadataParser that populates the detector metadata parsing the parameters from the telemetry file based on the list of ParameterDescription objects, and adding a list of additional and preconfigured parameters.\n  *\n  */\n class MetadataParserParamDescriptions : public DetectorMetadataParser{\n@@ -47,37 +47,49 @@ public:\n   /**\n    * @brief Destructor\n    */\n-  virtual ~MetadataParserParamDescriptions();\n+  ~MetadataParserParamDescriptions() override;\n \n-  void setMetadataCreator(const std::shared_ptr<DetectorMetadataCreator> creator);\n-  void setParameterDescriptions(const std::vector<std::shared_ptr<ParameterDescription>> &descriptions);\n-  void setFixedParameters(const std::vector<std::shared_ptr<ParameterInterface>> &params);\n+  /**\n+   * @brief Set the DetectorMetadata creator\n+   * @param creator the DetectorMetadata creator smart pointer\n+   */\n+  void setMetadataCreator(const std::shared_ptr<LE1_NISP_Entities::DetectorMetadataCreator> creator);\n+  /**\n+   * @brief Set the list of descriptions of the parameters to be parsed\n+   * @param descriptions The list of descriptions of parameters\n+   */\n+  void setParameterDescriptions(const std::vector<std::shared_ptr<LE1_NISP_Entities::ParameterDescription>> &descriptions);\n+  /**\n+   * @brief Set the list of preconfigured parameters\n+   * @param params The list of preconfigured parameters\n+   */\n+  void setFixedParameters(const std::vector<std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> &params);\n \n-  std::shared_ptr<DetectorMetadata> parseMetadata(const std::shared_ptr<TelemetryDetectorInterface> telemetryDetector) override;\n+  std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> parseMetadata(const std::shared_ptr<LE1_NISP_Entities::TelemetryDetectorInterface> telemetryDetector) override;\n \n private:\n-  std::shared_ptr<DetectorMetadataCreator> m_detectorMetadataCreator;\n-  std::vector<std::shared_ptr<ParameterInterface>> m_fixedParams;\n-  std::vector<std::shared_ptr<ParameterDescription>> m_descriptions;\n+  std::shared_ptr<LE1_NISP_Entities::DetectorMetadataCreator> m_detectorMetadataCreator;\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> m_fixedParams;\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::ParameterDescription>> m_descriptions;\n \n-  void validateTelemetryDetector(const std::shared_ptr<TelemetryDetectorInterface> &telemetryDetector) const;\n+  void validateTelemetryDetector(const std::shared_ptr<LE1_NISP_Entities::TelemetryDetectorInterface> &telemetryDetector) const;\n   void validateMetadataCreator() const;\n-  void validateParamDescription(const std::shared_ptr<ParameterDescription> &paramDesc) const;\n-  void validateByteArray(const std::shared_ptr<ByteArray> &bytes) const;\n-  void validateSizes(const std::shared_ptr<ByteArray> &bytes, const std::shared_ptr<ParameterDescription> &paramDesc) const;\n-  void validateSizeLowerThan8Bits(const std::shared_ptr<ByteArray> &bytes, const std::shared_ptr<ParameterDescription> &paramDesc) const;\n-  void validateSizeHigherOrEqualThan8Bits(const std::shared_ptr<ByteArray> &bytes, const std::shared_ptr<ParameterDescription> &paramDesc) const;\n-  std::string unsupportedSizeErrorStr(const std::shared_ptr<ParameterDescription> &paramDesc) const;\n+  void validateParamDescription(const std::shared_ptr<LE1_NISP_Entities::ParameterDescription> &paramDesc) const;\n+  void validateByteArray(const std::shared_ptr<LE1_NISP_Entities::ByteArray> &bytes) const;\n+  void validateSizes(const std::shared_ptr<LE1_NISP_Entities::ByteArray> &bytes, const std::shared_ptr<LE1_NISP_Entities::ParameterDescription> &paramDesc) const;\n+  void validateSizeLowerThan8Bits(const std::shared_ptr<LE1_NISP_Entities::ByteArray> &bytes, const std::shared_ptr<LE1_NISP_Entities::ParameterDescription> &paramDesc) const;\n+  void validateSizeHigherOrEqualThan8Bits(const std::shared_ptr<LE1_NISP_Entities::ByteArray> &bytes, const std::shared_ptr<LE1_NISP_Entities::ParameterDescription> &paramDesc) const;\n+  std::string unsupportedSizeErrorStr(const std::shared_ptr<LE1_NISP_Entities::ParameterDescription> &paramDesc) const;\n \n   template<typename T>\n-  T getParamValueAs(const std::shared_ptr<ByteArray> &bytes, const std::shared_ptr<ParameterDescription> &paramDesc) const;\n-  uint8_t getValueConsideringOffbit(const std::shared_ptr<ByteArray> &bytes,\n-                                    const std::shared_ptr<ParameterDescription> &paramDesc) const;\n+  T getParamValueAs(const std::shared_ptr<LE1_NISP_Entities::ByteArray> &bytes, const std::shared_ptr<LE1_NISP_Entities::ParameterDescription> &paramDesc) const;\n+  uint8_t getValueConsideringOffbit(const std::shared_ptr<LE1_NISP_Entities::ByteArray> &bytes,\n+                                    const std::shared_ptr<LE1_NISP_Entities::ParameterDescription> &paramDesc) const;\n \n \n };  // End of MetadataParserParamDescriptions class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/ProductGenerator.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/ProductGenerator.h\n+ * @file LE1_NISP_Interactors/ProductGenerator.h\n  * @date 10/20/20\n  * @author user\n  *\n@@ -21,27 +21,27 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_PRODUCTGENERATOR_H\n-#define _LE1_NISP_PROCESSSCIENCE_PRODUCTGENERATOR_H\n+#ifndef _LE1_NISP_INTERACTORS_PRODUCTGENERATOR_H\n+#define _LE1_NISP_INTERACTORS_PRODUCTGENERATOR_H\n \n #include <map>\n #include <vector>\n #include <string>\n #include <memory>\n \n-#include \"LE1_NISP_ProcessScience/DetectorsInitializer.h\"\n-#include \"LE1_NISP_ProcessScience/DetectorMetadataParser.h\"\n-#include \"LE1_NISP_ProcessScience/DetectorCollector.h\"\n-#include \"LE1_NISP_ProcessScience/ExposuresCounter.h\"\n-#include \"LE1_NISP_ProcessScience/TelemetryDecoder.h\"\n-#include \"LE1_NISP_ProcessScience/ProductsWriter.h\"\n-#include \"LE1_NISP_ProcessScience/ProductsArchiver.h\"\n+#include \"DetectorsInitializer.h\"\n+#include \"DetectorMetadataParser.h\"\n+#include \"DetectorCollector.h\"\n+#include \"ExposuresCounter.h\"\n+#include \"TelemetryDecoder.h\"\n+#include \"ProductsWriter.h\"\n+#include \"ProductsArchiver.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class ProductGenerator\n- * @brief\n+ * @brief It is responsible for managing the core logic of the telemetry processing.\n  *\n  */\n class ProductGenerator {\n@@ -57,16 +57,50 @@ public:\n    */\n   virtual ~ProductGenerator();\n \n+  /**\n+   * @brief Process the telemetry and generate the output products\n+   * @param telemetryFiles The input telemetry files\n+   * @param outputPath The output directory\n+   * @return\n+   */\n   virtual int generateProducts(const std::vector<std::string> &telemetryFiles, const std::string &outputPath = \"./\");\n-  \n+\n+  /**\n+   * @brief Set the DetectorsInitializer\n+   * @param detectorsInitializer The DetectorsInitializer smart pointer\n+   */\n   void setDetectorsInitializer(const std::shared_ptr<DetectorsInitializer> detectorsInitializer);\n+  /**\n+   * @brief Set the DetectorMetadataParser\n+   * @param detectorMetadataParser The DetectorMetadataParser smart pointer\n+   */\n   void setDetectorMetadataParser(const std::shared_ptr<DetectorMetadataParser> detectorMetadataParser);\n+  /**\n+   * @brief Set the DetectorCollector\n+   * @param detectorCollector The DetectorCollector smart pointer\n+   */\n   void setDetectorCollector(const std::shared_ptr<DetectorCollector> detectorCollector);\n+  /**\n+   * @brief Set the ExposuresCounter\n+   * @param exposuresCounter The ExposuresCounter smart pointer\n+   */\n   void setExposuresCounter(const std::shared_ptr<ExposuresCounter> exposuresCounter);\n-  \n+\n+  /**\n+   * @brief Set the TelemetryDecoder\n+   * @param decoder The TelemetryDecoder smart pointer\n+   */\n   void setTelemetryDecoder(const std::shared_ptr<TelemetryDecoder> decoder);\n \n-  void setProductsWriter(const std::shared_ptr<ProductsWriter> productsWriter);  \n+  /**\n+   * @brief Set the ProductsWriter\n+   * @param productsWriter The ProductsWriter smart pointer\n+   */\n+  void setProductsWriter(const std::shared_ptr<ProductsWriter> productsWriter);\n+  /**\n+   * @brief Set the ProductsArchiver\n+   * @param productsArchiver The ProductsArchiver smart pointer\n+   */\n   void setProductsArchiver(const std::shared_ptr<ProductsArchiver> productsArchiver);  \n \n private:\n@@ -77,10 +111,10 @@ private:\n   std::shared_ptr<TelemetryDecoder> m_decoder;\n   std::shared_ptr<ProductsWriter> m_productsWriter;\n   std::shared_ptr<ProductsArchiver> m_productsArchiver;\n-  std::vector<std::shared_ptr<Detector>> m_detectorList; \n-  std::map<ExposureId, std::shared_ptr<Exposure>> m_exposures;\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> m_detectorList;\n+  std::map<LE1_NISP_Entities::ExposureId, std::shared_ptr<LE1_NISP_Entities::Exposure>> m_exposures;\n   std::string m_outputPath;\n-  std::shared_ptr<ExposureConfiguration> m_currExposureConfig;\n+  std::shared_ptr<LE1_NISP_Entities::ExposureConfiguration> m_currExposureConfig;\n \n   void createOutputDirectory(const std::string &outputPath);\n   void findDetectors(const std::vector<std::string> &telemetryFiles);\n@@ -88,23 +122,23 @@ private:\n   void groupDetectorsPerExposure();\n   void countExposures();\n \n-  void validateExposure(const std::shared_ptr<Exposure> &exposure) const;\n+  void validateExposure(const std::shared_ptr<LE1_NISP_Entities::Exposure> &exposure) const;\n   void validateDecoder() const;\n   void validateProductsWriter() const;\n   void validateProductsArchiver() const;\n \n-  void decodeTelemetry(std::shared_ptr<DetectorIterator> detItr);\n-  void checkRawlines(const std::shared_ptr<Detector> &detector);\n-  void checkScience(const std::shared_ptr<Detector> &detector);\n-  void checkQualityData(const std::shared_ptr<Detector> &detector);\n-  void checkEngineering(const std::shared_ptr<Detector> &detector);\n-  void checkHistory(const std::shared_ptr<Detector> &detector);\n-  void checkErrors(const std::shared_ptr<Detector> &detector);\n-  void checkAnalogTm(const std::shared_ptr<Detector> &detector);\n+  void decodeTelemetry(std::shared_ptr<LE1_NISP_Entities::DetectorIterator> detItr);\n+  void checkRawlines(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector);\n+  void checkScience(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector);\n+  void checkQualityData(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector);\n+  void checkEngineering(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector);\n+  void checkHistory(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector);\n+  void checkErrors(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector);\n+  void checkAnalogTm(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector);\n   \n };  // End of ProductGenerator class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/ProductsArchiver.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/ProductsArchiver.h\n+ * @file LE1_NISP_Interactors/ProductsArchiver.h\n  * @date 02/15/21\n  * @author user\n  *\n@@ -21,18 +21,18 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_PRODUCTSARCHIVER_H\n-#define _LE1_NISP_PROCESSSCIENCE_PRODUCTSARCHIVER_H\n+#ifndef _LE1_NISP_INTERACTORS_PRODUCTSARCHIVER_H\n+#define _LE1_NISP_INTERACTORS_PRODUCTSARCHIVER_H\n \n #include <string>\n #include <vector>\n-#include \"LE1_NISP_ProcessScience/Exposure.h\"\n+#include \"LE1_NISP_Entities/Exposure.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class ProductsArchiver\n- * @brief\n+ * @brief Interface to archive the output products\n  *\n  */\n class ProductsArchiver {\n@@ -44,7 +44,16 @@ public:\n    */\n   virtual ~ProductsArchiver() = default;\n \n-  virtual std::string archive(const std::shared_ptr<Exposure> exposure, \n+  /**\n+   * @brief Archive the output products related to an exposure and generate a file with metadata and various information\n+   * @param exposure The exposure smart pointer\n+   * @param scienceProduct The science product filename\n+   * @param hkProduct The housekeeping product filename\n+   * @param engProducts The engineering products filenames\n+   * @param outputPath The path where the output file will be created\n+   * @return The filename of the generated file\n+   */\n+  virtual std::string archive(const std::shared_ptr<LE1_NISP_Entities::Exposure> exposure,\n                        const std::string &scienceProduct, \n                        const std::string &hkProduct, \n                        const std::vector<std::string> &engProducts, \n@@ -52,7 +61,7 @@ public:\n \n };  // End of ProductsArchiver class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/ProductsArchiverDataModelBindings.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/ProductsArchiverDataModelBindings.h\n+ * @file LE1_NISP_Interactors/ProductsArchiverDataModelBindings.h\n  * @date 02/15/21\n  * @author user\n  *\n@@ -21,35 +21,41 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_PRODUCTSARCHIVERDATAMODELBINDINGS_H\n-#define _LE1_NISP_PROCESSSCIENCE_PRODUCTSARCHIVERDATAMODELBINDINGS_H\n+#ifndef _LE1_NISP_INTERACTORS_PRODUCTSARCHIVERDATAMODELBINDINGS_H\n+#define _LE1_NISP_INTERACTORS_PRODUCTSARCHIVERDATAMODELBINDINGS_H\n \n #include <memory>\n #include <map>\n #include <any>\n \n-#include \"LE1_NISP_ProcessScience/ProductsArchiver.h\"\n-#include \"LE1_NISP_ProcessScience/DetectorMetadata.h\"\n-#include \"LE1_NISP_ProcessScience/DateTimeManager.h\"\n-#include \"LE1_NISP_ProcessScience/Exposure.h\"\n-#include \"LE1_NISP_ProcessScience/ExposuresCounter.h\"\n+#include \"ProductsArchiver.h\"\n+#include \"LE1_NISP_Entities/DetectorMetadata.h\"\n+#include \"LE1_NISP_Entities/DateTimeManager.h\"\n+#include \"LE1_NISP_Entities/Exposure.h\"\n+#include \"ExposuresCounter.h\"\n \n #include \"ST_DataModelBindings/dpd/le1/euc-le1-NispRawFrame.h\"\n #include \"ST_DataModelBindings/dictionary/sys/euc-sys.h\"\n #include \"ST_DataModelBindings/dictionary/bas/img/euc-img.h\"\n #include \"ST_DataModelBindings/dictionary/pro/le1/nisp/euc-le1-nisp.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class ProductsArchiverDataModelBindings\n- * @brief\n+ * @brief Implementation of ProductsArchiver interface that conforms the output products to the Euclid Common Data Model.\n+ * In order to do that, an XML file referencing the products is created using the Data Model Bindings library.\n  *\n  */\n class ProductsArchiverDataModelBindings: public ProductsArchiver {\n \n public:\n-  ProductsArchiverDataModelBindings(const std::shared_ptr<DateTimeManager> dateTimeManager = nullptr, \n+  /**\n+   * @brief Construct a ProductsArchiverDataModelBindings object and initialize the default parameters\n+   * @param dateTimeManager Smart pointer of the DateTimeManager interface\n+   * @param exposuresCounter Smart pointer of the ExposuresCounter object\n+   */\n+  ProductsArchiverDataModelBindings(const std::shared_ptr<LE1_NISP_Entities::DateTimeManager> dateTimeManager = nullptr,\n                                     const std::shared_ptr<ExposuresCounter> exposuresCounter = nullptr);\n \n   /**\n@@ -57,14 +63,40 @@ public:\n    */\n   ~ProductsArchiverDataModelBindings() override;\n \n-  void setOutputPath(const std::string &outputPath);\n-  void setDateTimeManager(const std::shared_ptr<DateTimeManager> dateTimeManager);\n+  /**\n+   * @brief Set the DateTimeManager interface smart pointer\n+   * @param dateTimeManager A DateTimeManager interface smart pointer\n+   */\n+  void setDateTimeManager(const std::shared_ptr<LE1_NISP_Entities::DateTimeManager> dateTimeManager);\n+  /**\n+   * @brief Set the ExposuresCounter object smart pointer\n+   * @param exposuresCounter A ExposuresCounter object smart pointer\n+   */\n   void setExposuresCounter(const std::shared_ptr<ExposuresCounter> exposuresCounter);\n \n+  /**\n+   * @brief Set an additional parameter\n+   * @param paramName The parameter name\n+   * @param val The parameter value\n+   */\n   void setParam(const std::string &paramName, const std::any &val);\n+  /**\n+   * @brief Get an additional parameter value\n+   * @param paramName The name of the parameter vale to be retrieved\n+   * @return The value of the parameter\n+   */\n   std::any getParam(const std::string &paramName) const;\n \n-  std::string archive(const std::shared_ptr<Exposure> exposure,\n+  /**\n+   * @brief Create a file with common metadata and information compliant with the Euclid Common Data Model\n+   * @param exposure The exposure smart pointer\n+   * @param scienceProduct The science product filename\n+   * @param hkProduct The housekeeping product filename\n+   * @param engProducts The engineering products filenames\n+   * @param outputPath The path where the output file will be created\n+   * @return The filename of the generated file\n+   */\n+  std::string archive(const std::shared_ptr<LE1_NISP_Entities::Exposure> exposure,\n                       const std::string &scienceProduct,\n                       const std::string &hkProduct,\n                       const std::vector<std::string> &engProducts,\n@@ -72,11 +104,11 @@ public:\n \n private:\n   std::string m_outputPath;\n-  std::shared_ptr<DateTimeManager> m_dateTimeManager;\n+  std::shared_ptr<LE1_NISP_Entities::DateTimeManager> m_dateTimeManager;\n   std::shared_ptr<ExposuresCounter> m_exposuresCounter;\n-  std::shared_ptr<CommonDetectorMetadata> m_commonMetadata;\n-  std::shared_ptr<DateTime> m_creationDateTime;\n-  std::shared_ptr<Exposure> m_exposure;\n+  std::shared_ptr<LE1_NISP_Entities::CommonDetectorMetadata> m_commonMetadata;\n+  std::shared_ptr<LE1_NISP_Entities::DateTime> m_creationDateTime;\n+  std::shared_ptr<LE1_NISP_Entities::Exposure> m_exposure;\n   std::map<std::string, std::any> m_params;\n   pro::le1::nisp::nispRawFrame::DetectorList_type m_detectorList;\n   pro::le1::inputRawFiles m_inputRawFileList;\n@@ -86,9 +118,9 @@ private:\n   void validateDateTimeManager() const;\n   void validateExposuresCounter() const;\n   void validateOutputDirectoryPath(const std::string &outputPath) const;\n-  void validateExposure(const std::shared_ptr<Exposure> &exposure) const;\n-  void validateCommonMetadata(const std::shared_ptr<CommonDetectorMetadata> &commonMetadata) const;\n-  void validateDetector(const std::shared_ptr<Detector> &detector) const;\n+  void validateExposure(const std::shared_ptr<LE1_NISP_Entities::Exposure> &exposure) const;\n+  void validateCommonMetadata(const std::shared_ptr<LE1_NISP_Entities::CommonDetectorMetadata> &commonMetadata) const;\n+  void validateDetector(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const;\n \n   void initOutputPath(const std::string &outputPath);\n   std::string writeNispRawFrameDataProduct(const std::string &scienceProduct, \n@@ -98,7 +130,7 @@ private:\n   sys::genericHeader generateHeader();\n   pro::le1::nisp::nispRawFrame generateNispRawFrame();\n   bas::img::imgBaseFrame::ImgType_type generateImageType();\n-  bas::img::imgBaseFrame::AxisLengths_type generateAxisLengths(const std::shared_ptr<Detector> &detector);\n+  bas::img::imgBaseFrame::AxisLengths_type generateAxisLengths(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector);\n   bas::img::imgSpaceFrame::Instrument_type generateInstrumentInfo();\n   bas::img::imgSpaceFrame::ObservationDateTime_type generateObservationDateTime();\n   bas::img::imgSpaceFrame::ObservationSequence_type generateObservationSequence();\n@@ -116,11 +148,11 @@ private:\n \n   void serializeNispRawFrameDataProduct(std::ostream &outputStream, const dpd::le1::nisprawframe::dpdNispRawFrame &dataProduct);\n \n-  std::shared_ptr<Detector> getFirstDetector();\n+  std::shared_ptr<LE1_NISP_Entities::Detector> getFirstDetector();\n \n };  // End of ProductsArchiverDataModelBindings class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/ProductsWriter.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/ProductsWriter.h\n+ * @file LE1_NISP_Interactors/ProductsWriter.h\n  * @date 05/19/21\n  * @author user\n  *\n@@ -21,23 +21,31 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_PRODUCTSWRITER_H\n-#define _LE1_NISP_PROCESSSCIENCE_PRODUCTSWRITER_H\n+#ifndef _LE1_NISP_INTERACTORS_PRODUCTSWRITER_H\n+#define _LE1_NISP_INTERACTORS_PRODUCTSWRITER_H\n \n #include <vector>\n-#include \"LE1_NISP_ProcessScience/Exposure.h\"\n-#include \"LE1_NISP_ProcessScience/DetectorWriter.h\"\n+#include \"LE1_NISP_Entities/Exposure.h\"\n+#include \"DetectorWriter.h\"\n+#include \"Exception.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class ProductsWriter\n- * @brief\n+ * @brief Manage the generation of the products containing science, engineering, and housekeeping data of an exposure.\n+ * It uses different DetectorWriter components depending on the exposure configuration:\n+ * \\li Housekeeping products are always produced\n+ * \\li Science products are generated for all instrument modes except for the Calibration Non-Linearity\n+ * \\li Engineering products are generated only when one of the following modes is configured: Engineering Debug, Engineering Raw, Calibration Non-Linearity, and Compression Verification.\n  *\n  */\n class ProductsWriter {\n \n public:\n+  /**\n+   * @brief Constructor\n+   */\n   ProductsWriter() = default;\n \n   /**\n@@ -45,17 +53,53 @@ public:\n    */\n   virtual ~ProductsWriter() = default;\n \n+  /**\n+   * @brief Write output products\n+   * @param exposure The exposure containing the data\n+   * @param outputPath The output path\n+   */\n+  virtual void writeProducts(const std::shared_ptr<LE1_NISP_Entities::Exposure> exposure, const std::string &outputPath);\n \n-  virtual void writeProducts(const std::shared_ptr<Exposure> exposure, const std::string &outputPath);\n-\n+  /**\n+   * @brief Get the science products filenames that have been written\n+   * @return The science products filenames\n+   */\n   virtual std::vector<std::string> getWrittenSciProducts() const;\n+  /**\n+   * @brief Get the housekeeping products filenames that have been written\n+   * @return The housekeeping products filenames\n+   */\n   virtual std::vector<std::string> getWrittenHkProducts() const;\n+  /**\n+   * @brief Get the engineering products filenames that have been written\n+   * @return The engineering products filenames\n+   */\n   virtual std::vector<std::string> getWrittenEngProducts() const;\n \n+  /**\n+   * @brief Set the writer for science products\n+   * @param scienceWriter The science products writer\n+   */\n   void setScienceWriter(const std::shared_ptr<DetectorWriter> scienceWriter);\n+  /**\n+   * @brief Set the writer for housekeeping products\n+   * @param hkWriter The housekeeping products writer\n+   */\n   void setHkWriter(const std::shared_ptr<DetectorWriter> hkWriter);\n+  /**\n+   * @brief Set the writer for engineering uncompressed group products\n+   * @param scienceWriter The engineering uncompressed group products writer\n+   */\n   void setEngUnprocessedGroupsWriter(const std::shared_ptr<DetectorWriter> engWriter);\n+  /**\n+   * @brief Set the writer for engineering pixels over threshold products\n+   * @param engWriter The engineering pixels over threshold products writer\n+   */\n   void setEngPixelsOverThresholdWriter(const std::shared_ptr<DetectorWriter> engWriter);\n+  /**\n+   * @brief Set the writer for engineering uncompressed image products\n+   * @param engWriter The engineering uncompressed image products writer\n+   */\n   void setEngUncompressedImageWriter(const std::shared_ptr<DetectorWriter> engWriter);\n \n private:\n@@ -69,18 +113,18 @@ private:\n   std::vector<std::string> m_engFiles;\n \n   void validateWriters() const;\n-  void validateExposure(const std::shared_ptr<Exposure> &exposure) const;\n+  void validateExposure(const std::shared_ptr<LE1_NISP_Entities::Exposure> &exposure) const;\n   \n-  void writeScienceProducts(const std::shared_ptr<Exposure> exposure, const std::string &outputPath);\n-  void writeHkProducts(const std::shared_ptr<Exposure> exposure, const std::string &outputPath);\n-  void writeEngProducts(const std::shared_ptr<Exposure> exposure, const std::string &outputPath);\n-  void writeEng(const std::shared_ptr<DetectorWriter> engWriter, const std::shared_ptr<Exposure> exposure, const std::string &outputPath);\n+  void writeScienceProducts(const std::shared_ptr<LE1_NISP_Entities::Exposure> exposure, const std::string &outputPath);\n+  void writeHkProducts(const std::shared_ptr<LE1_NISP_Entities::Exposure> exposure, const std::string &outputPath);\n+  void writeEngProducts(const std::shared_ptr<LE1_NISP_Entities::Exposure> exposure, const std::string &outputPath);\n+  void writeEng(const std::shared_ptr<DetectorWriter> engWriter, const std::shared_ptr<LE1_NISP_Entities::Exposure> exposure, const std::string &outputPath);\n \n   void logWrittenFiles(const std::vector<std::string> files) const;\n \n };  // End of ProductsWriter class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/QualityDataDecoder.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/QualityDataDecoder.h\n+ * @file LE1_NISP_Interactors/QualityDataDecoder.h\n  * @date 02/08/21\n  * @author user\n  *\n@@ -21,46 +21,59 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_QUALITYDATADECODER_H\n-#define _LE1_NISP_PROCESSSCIENCE_QUALITYDATADECODER_H\n+#ifndef _LE1_NISP_INTERACTORS_QUALITYDATADECODER_H\n+#define _LE1_NISP_INTERACTORS_QUALITYDATADECODER_H\n \n-#include \"LE1_NISP_ProcessScience//TelemetrySectionDecoder.h\"\n-#include \"LE1_NISP_ProcessScience//TelemetrySectionDecoder.h\"\n-#include \"LE1_NISP_ProcessScience//TelemetryConfiguration.h\"\n-#include \"LE1_NISP_ProcessScience//Decompressor.h\"\n-#include \"LE1_NISP_ProcessScience//ByteArrayCreator.h\"\n+#include \"TelemetrySectionDecoder.h\"\n+#include \"Exception.h\"\n+#include \"Decompressor.h\"\n+#include \"LE1_NISP_Entities/TelemetryConfiguration.h\"\n+#include \"LE1_NISP_Entities/ByteArrayCreator.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n- * @class QualityDataDecoder\n- * @brief\n+ * @class QualityDataSpectroDecoder\n+ * @brief Implementation of the TelemetrySectionDecoder interface to decode spectro quality telemetry data\n  *\n  */\n class QualityDataSpectroDecoder: public TelemetrySectionDecoder {\n public:\n-  QualityDataSpectroDecoder(const std::shared_ptr<Decompressor> decompressor = nullptr);\n+  /**\n+   * @brief Constructor\n+   * @param decompressor The decompressor smart pointer\n+   */\n+  explicit QualityDataSpectroDecoder(const std::shared_ptr<Decompressor> decompressor = nullptr);\n \n   /**\n    * @brief Destructor\n    */\n-  virtual ~QualityDataSpectroDecoder();\n+  ~QualityDataSpectroDecoder() override;\n \n-  virtual std::shared_ptr<ByteArray> decode(const std::shared_ptr<Detector> detector) override;\n+  /**\n+   * @brief Decode the spectro quality telemetry data of a detector\n+   * @param detector The detector containing the required information to decode spectro quality telemetry data\n+   * @return The decoded data\n+   */\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> decode(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) override;\n \n+  /**\n+   * @brief Set the decompressor\n+   * @param decompressor The decompressor smart pointer\n+   */\n   void setDecompressor(const std::shared_ptr<Decompressor> decompressor);\n \n protected:\n   std::shared_ptr<Decompressor> m_decompressor;\n-  CompressionParams m_comprParams;\n+  LE1_NISP_Entities::CompressionParams m_comprParams;\n   std::string m_decoderName;\n \n-  virtual void validateInputs(const std::shared_ptr<Detector> &detector) const;\n-  void validateDetector(const std::shared_ptr<Detector> &detector) const;\n+  virtual void validateInputs(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const;\n+  void validateDetector(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const;\n   void validateDecompressor() const;\n   \n-  virtual bool isQualityDataCompressed(const std::shared_ptr<Detector> &detector) const;\n-  virtual void initCompressionParams(const std::shared_ptr<Detector> &detector);\n+  virtual bool isQualityDataCompressed(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const;\n+  virtual void initCompressionParams(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector);\n \n private:\n \n@@ -70,33 +83,51 @@ private:\n \n /**\n  * @class QualityDataPhotoDecoder\n- * @brief\n+ * @brief Implementation of the TelemetrySectionDecoder interface to decode photo quality telemetry data\n  *\n  */\n class QualityDataPhotoDecoder: public QualityDataSpectroDecoder {\n public:\n-  QualityDataPhotoDecoder(const std::shared_ptr<Decompressor> decompressor = nullptr, \n-                          const std::shared_ptr<ByteArrayCreator> byteArrayCreator = nullptr);\n-  virtual ~QualityDataPhotoDecoder();\n+  /**\n+   * @brief Constructor\n+   * @param decompressor The decompressor smart pointer\n+   * @param byteArrayCreator The creator interface for byte array\n+   */\n+  explicit QualityDataPhotoDecoder(const std::shared_ptr<Decompressor> decompressor = nullptr,\n+                          const std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> byteArrayCreator = nullptr);\n \n-  std::shared_ptr<ByteArray> decode(const std::shared_ptr<Detector> detector) override;\n+  /**\n+   * @brief Destructor\n+   */\n+  ~QualityDataPhotoDecoder() override;\n+\n+  /**\n+   * @brief Decode the photo quality telemetry data of a detector\n+   * @param detector The detector containing the required information to decode photo quality telemetry data\n+   * @return The decoded data\n+   */\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> decode(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) override;\n \n-  void setByteArrayCreator(const std::shared_ptr<ByteArrayCreator> byteArrayCreator);\n+  /**\n+   * @brief Set the decompressor\n+   * @param decompressor The decompressor smart pointer\n+   */\n+  void setByteArrayCreator(const std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> byteArrayCreator);\n \n private:\n-  std::shared_ptr<ByteArrayCreator> m_byteArrayCreator;\n+  std::shared_ptr<LE1_NISP_Entities::ByteArrayCreator> m_byteArrayCreator;\n \n-  void validateInputs(const std::shared_ptr<Detector> &detector) const override;\n+  void validateInputs(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const override;\n   void validateByteArrayCreator() const;\n \n-  virtual bool isQualityDataCompressed(const std::shared_ptr<Detector> &detector) const override;\n-  virtual void initCompressionParams(const std::shared_ptr<Detector> &detector) override;\n+  virtual bool isQualityDataCompressed(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const override;\n+  virtual void initCompressionParams(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) override;\n \n-  std::shared_ptr<ByteArray> bytesToPixels(const std::shared_ptr<ByteArray> &inputData);\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> bytesToPixels(const std::shared_ptr<LE1_NISP_Entities::ByteArray> &inputData);\n \n };  // End of QualityDataPhotoDecoder class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/RawLinesDecoder.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/RawLinesDecoder.h\n+ * @file LE1_NISP_Interactors/RawLinesDecoder.h\n  * @date 11/13/20\n  * @author user\n  *\n@@ -21,16 +21,17 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_RAWLINESDECODER_H\n-#define _LE1_NISP_PROCESSSCIENCE_RAWLINESDECODER_H\n+#ifndef _LE1_NISP_INTERACTORS_RAWLINESDECODER_H\n+#define _LE1_NISP_INTERACTORS_RAWLINESDECODER_H\n \n-#include \"LE1_NISP_ProcessScience//TelemetrySectionDecoder.h\"\n+#include \"TelemetrySectionDecoder.h\"\n+#include \"Exception.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class RawLinesDecoder\n- * @brief\n+ * @brief Implementation of the TelemetrySectionDecoder interface to decode rawlines telemetry data\n  *\n  */\n class RawLinesDecoder: public TelemetrySectionDecoder {\n@@ -43,17 +44,22 @@ public:\n   /**\n    * @brief Destructor\n    */\n-  virtual ~RawLinesDecoder();\n+   ~RawLinesDecoder() override;\n \n \n-  virtual std::shared_ptr<ByteArray> decode(const std::shared_ptr<Detector> detector) override;\n+  /**\n+   * @brief Decode the rawlines telemetry data of a detector\n+   * @param detector The detector containing the required information to decode rawlines telemetry data\n+   * @return The decoded data\n+   */\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> decode(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) override;\n   \n private:\n-  void validateDetector(const std::shared_ptr<Detector> &detector) const;\n+  void validateDetector(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const;\n \n };  // End of RawLinesDecoder class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/ScienceDecoder.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/ScienceDecoder.h\n+ * @file LE1_NISP_Interactors/ScienceDecoder.h\n  * @date 02/04/21\n  * @author user\n  *\n@@ -21,42 +21,49 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_SCIENCEDECODER_H\n-#define _LE1_NISP_PROCESSSCIENCE_SCIENCEDECODER_H\n+#ifndef _LE1_NISP_INTERACTORS_SCIENCEDECODER_H\n+#define _LE1_NISP_INTERACTORS_SCIENCEDECODER_H\n \n-#include \"LE1_NISP_ProcessScience/TelemetrySectionDecoder.h\"\n-#include \"LE1_NISP_ProcessScience//Decompressor.h\"\n+#include \"TelemetrySectionDecoder.h\"\n+#include \"Decompressor.h\"\n+#include \"Exception.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class ScienceDecoder\n- * @brief\n+ * @brief Implementation of the TelemetrySectionDecoder interface to decode science telemetry data\n  *\n  */\n class ScienceDecoder : public TelemetrySectionDecoder {\n public:\n   /**\n    * @brief Constructor\n+   * @param decompressor The decompressor smart pointer\n    */\n-  ScienceDecoder(const std::shared_ptr<Decompressor> decompressor);\n+  explicit ScienceDecoder(const std::shared_ptr<Decompressor> decompressor);\n \n   /**\n    * @brief Destructor\n    */\n-  virtual ~ScienceDecoder();\n+  ~ScienceDecoder() override;\n   \n-  virtual std::shared_ptr<ByteArray> decode(const std::shared_ptr<Detector> detector) override;\n+  /**\n+   * @brief Decode the science telemetry data of a detector\n+   * @param detector The detector containing the required information to decode science telemetry data\n+   * @return The decoded data\n+   */\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> decode(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) override;\n   \n private:\n   std::shared_ptr<Decompressor> m_decompressor;\n \n-  void validateDetector(const std::shared_ptr<Detector> &detector) const;\n+  void validateDetector(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const;\n   void validateDecompressor() const;\n \n };  // End of ScienceDecoder class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/ScienceWriterElFitsIO.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/ScienceWriterElFitsIO.h\n+ * @file LE1_NISP_Interactors/ScienceWriterElFitsIO.h\n  * @date 02/05/21\n  * @author user\n  *\n@@ -21,19 +21,22 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_SCIENCEWRITERELFITSIO_H\n-#define _LE1_NISP_PROCESSSCIENCE_SCIENCEWRITERELFITSIO_H\n+#ifndef _LE1_NISP_INTERACTORS_SCIENCEWRITERELFITSIO_H\n+#define _LE1_NISP_INTERACTORS_SCIENCEWRITERELFITSIO_H\n \n-#include \"LE1_NISP_ProcessScience/DetectorWriterElFitsIO.h\"\n-#include \"LE1_NISP_ProcessScience/ExposuresCounter.h\"\n+#include \"DetectorWriterElFitsIO.h\"\n+#include \"ExposuresCounter.h\"\n \n using Euclid::Fits::PtrRaster;\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class ScienceWriterElFitsIO\n- * @brief\n+ * @brief Implementation of DetectorWriterElFitsIO to generated science FITS product.\n+ * It consists of two extensions for each detector:\n+ * \\li Scientific image: image with 16-bit per pixel and size 2048 x 2048.\n+ * \\li Quality data image: for the photometric channels (Y,J,H), the quality data are represented as an image with a single bit of information per pixel (each one stored in one byte, in order to avoid subsequent flags unpacking), while for the spectroscopic grisms the quality data are available as an image with 8-bit value per pixel. Image size is 2048 x 2048 for both spectro and photo exposures.\n  *\n  */\n class ScienceWriterElFitsIO : public DetectorWriterElFitsIO {\n@@ -41,32 +44,55 @@ class ScienceWriterElFitsIO : public DetectorWriterElFitsIO {\n public:\n   /**\n    * @brief Constructor\n+   * @param dateTimeManager The DateTimeManager smart pointer\n+   * @param exposuresCounter The ExposuresCounter smart pointer\n    */\n-  ScienceWriterElFitsIO(const std::shared_ptr<DateTimeManager> dateTimeManager = nullptr, \n-                        const std::shared_ptr<ExposuresCounter> exposuresCounter = nullptr);\n+  explicit ScienceWriterElFitsIO(const std::shared_ptr<LE1_NISP_Entities::DateTimeManager> dateTimeManager = nullptr,\n+                                 const std::shared_ptr<ExposuresCounter> exposuresCounter = nullptr);\n \n   /**\n    * @brief Destructor\n    */\n-  virtual ~ScienceWriterElFitsIO();\n+  ~ScienceWriterElFitsIO() override;\n \n+  /**\n+   * @brief Set the ExposuresCounter\n+   * @param exposuresCounter the ExposuresCounter smart pointer\n+   */\n   void setExposuresCounter(const std::shared_ptr<ExposuresCounter> exposuresCounter);\n \n private:\n   std::shared_ptr<ExposuresCounter> m_exposuresCounter;\n \n+  /**\n+   * @brief Validate input specific for ScienceWriterElFitsIO\n+   */\n   void validateInputsWriterSpecific() const override;\n-  void validateDetectorWriterSpecific(const std::shared_ptr<Detector> &detector) const override;\n-  \n-  void writePrimaryHeader(Euclid::Fits::MefFile& fits, const std::shared_ptr<DetectorMetadata> metadata) override;\n-  void writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<Detector> detector) override;\n-  void writeDataQualityExtensionHeader(const Euclid::Fits::Header &header, const std::shared_ptr<Detector> detector);\n+  /**\n+   * @brief Validate science data of the detector\n+   * @param detector The detector object\n+   */\n+  void validateDetectorWriterSpecific(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const override;\n+\n+  /**\n+   * @brief Write the FITS primary header for science product\n+   * @param fits The science FITS file\n+   * @param metadata The detector metadata\n+   */\n+  void writePrimaryHeader(Euclid::Fits::MefFile& fits, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> metadata) override;\n+  /**\n+   * @brief Write the science and quality extensions for a detector\n+   * @param fits The science FITS file\n+   * @param detector The detector smart pointer\n+   */\n+  void writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<LE1_NISP_Entities::Detector> detector) override;\n+  void writeDataQualityExtensionHeader(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::Detector> detector);\n \n   void validateExposuresCounter() const;\n \n };  // End of ScienceWriterElFitsIO class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/TelemetryDecoder.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/TelemetryDecoder.h\n+ * @file LE1_NISP_Interactors/TelemetryDecoder.h\n  * @date 04/30/21\n  * @author user\n  *\n@@ -21,19 +21,19 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_TELEMETRYDECODER_H\n-#define _LE1_NISP_PROCESSSCIENCE_TELEMETRYDECODER_H\n+#ifndef _LE1_NISP_INTERACTORS_TELEMETRYDECODER_H\n+#define _LE1_NISP_INTERACTORS_TELEMETRYDECODER_H\n \n-#include \"LE1_NISP_ProcessScience/Utils.h\"\n-#include \"LE1_NISP_ProcessScience/Exception.h\"\n-#include \"LE1_NISP_ProcessScience/Detector.h\"\n-#include \"LE1_NISP_ProcessScience/TelemetrySectionDecoder.h\"\n+#include \"LE1_NISP_Entities/Utils.h\"\n+#include \"Exception.h\"\n+#include \"LE1_NISP_Entities/Detector.h\"\n+#include \"TelemetrySectionDecoder.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class TelemetryDecoder\n- * @brief\n+ * @brief Component containing the core logic to decode the telemetry data of a detector\n  *\n  */\n class TelemetryDecoder {\n@@ -45,15 +45,51 @@ public:\n    */\n   virtual ~TelemetryDecoder() = default;\n \n-  virtual void decode(const std::shared_ptr<Detector> detector);\n+  /**\n+   * @brief Decode the telemetry data of a detector\n+   * @param detector The detector smart pointer\n+   */\n+  virtual void decode(const std::shared_ptr<LE1_NISP_Entities::Detector> detector);\n \n+  /**\n+   * @brief Init decoder to be used for science data\n+   * @param decoder The science data decoder\n+   */\n   void setScienceDecoder(const std::shared_ptr<TelemetrySectionDecoder> decoder);\n+  /**\n+   * @brief Init decoder to be used for rawlines data\n+   * @param decoder The rawlines data decoder\n+   */\n   void setRawlinesDecoder(const std::shared_ptr<TelemetrySectionDecoder> decoder);\n+  /**\n+   * @brief Init decoder to be used for spectro quality data\n+   * @param decoder The spectro quality data decoder\n+   */\n   void setQualitySpectroDecoder(const std::shared_ptr<TelemetrySectionDecoder> decoder);\n+  /**\n+   * @brief Init decoder to be used for photo quality data\n+   * @param decoder The photo quality data decoder\n+   */\n   void setQualityPhotoDecoder(const std::shared_ptr<TelemetrySectionDecoder> decoder);\n+  /**\n+   * @brief Init decoder to be used for errors data\n+   * @param decoder The errors data decoder\n+   */\n   void setErrorsDecoder(const std::shared_ptr<TelemetrySectionDecoder> decoder);\n+  /**\n+   * @brief Init decoder to be used for analog telemetry data\n+   * @param decoder The analog telemetry data decoder\n+   */\n   void setAnalogTmDecoder(const std::shared_ptr<TelemetrySectionDecoder> decoder);\n+  /**\n+   * @brief Init decoder to be used for history data\n+   * @param decoder The history data decoder\n+   */\n   void setHistoryDecoder(const std::shared_ptr<TelemetrySectionDecoder> decoder);\n+  /**\n+   * @brief Init decoder to be used for engineering data\n+   * @param decoder The engineering data decoder\n+   */\n   void setEngDecoder(const std::shared_ptr<TelemetrySectionDecoder> decoder);\n \n private:\n@@ -66,15 +102,15 @@ private:\n   std::shared_ptr<TelemetrySectionDecoder> m_historyDecoder;\n   std::shared_ptr<TelemetrySectionDecoder> m_engDecoder;\n \n-  void validateDetector(const std::shared_ptr<Detector> &detector) const;\n-  void decodeRawlines(const std::shared_ptr<Detector> &detector);\n-  void decodeScience(const std::shared_ptr<Detector> &detector);\n-  void decodeQualitySpectro(const std::shared_ptr<Detector> &detector);\n-  void decodeQualityPhoto(const std::shared_ptr<Detector> &detector);\n-  void decodeAnalogTm(const std::shared_ptr<Detector> &detector);  \n-  void decodeErrors(const std::shared_ptr<Detector> &detector);\n-  void decodeHistory(const std::shared_ptr<Detector> &detector);\n-  void decodeEng(const std::shared_ptr<Detector> &detector);\n+  void validateDetector(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const;\n+  void decodeRawlines(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector);\n+  void decodeScience(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector);\n+  void decodeQualitySpectro(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector);\n+  void decodeQualityPhoto(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector);\n+  void decodeAnalogTm(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector);\n+  void decodeErrors(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector);\n+  void decodeHistory(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector);\n+  void decodeEng(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector);\n \n   void validateRawlinesDecoder() const;\n   void validateScienceDecoder() const;\n@@ -87,7 +123,7 @@ private:\n   \n };  // End of TelemetryDecoder class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/TelemetryDetectorInitializer.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/TelemetryDetectorInitializer.h\n+ * @file LE1_NISP_Interactors/TelemetryDetectorInitializer.h\n  * @date 01/14/21\n  * @author user\n  *\n@@ -21,42 +21,76 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_TELEMETRYDETECTORINITIALIZER_H\n-#define _LE1_NISP_PROCESSSCIENCE_TELEMETRYDETECTORINITIALIZER_H\n+#ifndef _LE1_NISP_INTERACTORS_TELEMETRYDETECTORINITIALIZER_H\n+#define _LE1_NISP_INTERACTORS_TELEMETRYDETECTORINITIALIZER_H\n \n #include <fstream>\n \n-#include \"LE1_NISP_ProcessScience/DetectorsInitializer.h\"\n-#include \"LE1_NISP_ProcessScience/Exception.h\"\n-#include \"LE1_NISP_ProcessScience/TelemetryFile.h\"\n-#include \"LE1_NISP_ProcessScience/TelemetryConfiguration.h\"\n+#include \"DetectorsInitializer.h\"\n+#include \"Exception.h\"\n+#include \"LE1_NISP_Entities/TelemetryFile.h\"\n+#include \"LE1_NISP_Entities/TelemetryConfiguration.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class TelemetryDetectorInitializer\n- * @brief\n+ * @brief Implementation of DetectorsInitializer interface to identify detectors in the NISP telemetry.\n+ *\n+ * The uncompressed header is the first item transmitted before each detector data, it starts with a specific sequence of bytes (SYNC) and has a fixed size and structure.\n+ * The header contains all information that allow to distinguish each telemetry data section for that specific detector.\n+ * Once the SYNC has been found in the telemetry file, the header is parsed and the telemetry sections are calculated defining:\n+ * \\li Offset: the byte where the section starts\n+ * \\li Size: the size of the telemetry data\n+ * \\li Padding: padding bytes\n+ *\n+ * A special case in the telemetry section identification may be represented by Engineering Raw mode whether the amount of acquired data is higher than the maximum size of memory buffer (124780544 bytes).\n+ * This can happen when the number of groups in the MACC is higher than 14.\n+ * In such a case the data are split into two chunks, if more than two chunks are identified an error is raised before the processing starts.\n+ *\n+ * In addition to the creation of each telemetry section, the DetectorInitializer instantiate the TelemetryDetector defining TelemetryFile, first offset, last offset, and set the reference of the TelemetryConfiguration.\n  *\n  */\n class TelemetryDetectorInitializer : public DetectorsInitializer{\n public:\n-  TelemetryDetectorInitializer(const std::shared_ptr<TelemetryConfiguration> configuration = nullptr,\n-                               const std::shared_ptr<DetectorCreator> detectorCreator = nullptr,\n-                               const std::shared_ptr<TelemetryFileCreator> tmFileCreator = nullptr);\n+  /**\n+   * @brief Constructor\n+   * @param configuration The configuration of telemetry to be parsed\n+   * @param detectorCreator The DetectorCreator smart pointer\n+   * @param tmFileCreator The TelemetryFileCreator smart pointer\n+   */\n+  explicit TelemetryDetectorInitializer(const std::shared_ptr<LE1_NISP_Entities::TelemetryConfiguration> configuration = nullptr,\n+                               const std::shared_ptr<LE1_NISP_Entities::DetectorCreator> detectorCreator = nullptr,\n+                               const std::shared_ptr<LE1_NISP_Entities::TelemetryFileCreator> tmFileCreator = nullptr);\n+  /**\n+   * @brief Destructor\n+   */\n   virtual ~TelemetryDetectorInitializer();\n \n-  void setTelemetryConfiguration(const std::shared_ptr<TelemetryConfiguration> tmConfig);\n-  void setDetectorCreator(const std::shared_ptr<DetectorCreator> detectorCreator);\n-  void setTelemetryFileCreator(const std::shared_ptr<TelemetryFileCreator> tmFileCreator);\n-\n-  virtual std::vector<std::shared_ptr<Detector>> initDetectors(const std::string &dpuFile) override;\n+  /**\n+   * @brief Set the configuration of telemetry\n+   * @param tmConfig The TelemetryConfiguration smart pointer\n+   */\n+  void setTelemetryConfiguration(const std::shared_ptr<LE1_NISP_Entities::TelemetryConfiguration> tmConfig);\n+  /**\n+   * @brief Set the DetectorCreator\n+   * @param tmConfig The DetectorCreator smart pointer\n+   */\n+  void setDetectorCreator(const std::shared_ptr<LE1_NISP_Entities::DetectorCreator> detectorCreator);\n+  /**\n+   * @brief Set the TelemetryFileCreator\n+   * @param tmConfig The TelemetryFileCreator smart pointer\n+   */\n+  void setTelemetryFileCreator(const std::shared_ptr<LE1_NISP_Entities::TelemetryFileCreator> tmFileCreator);\n+\n+  virtual std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> initDetectors(const std::string &dpuFile) override;\n \n private:\n-  std::shared_ptr<TelemetryConfiguration>  m_telemetryConfig;\n-  std::shared_ptr<DetectorCreator> m_detCreator;\n-  std::shared_ptr<TelemetryFileCreator> m_telemetryFileCreator;\n-  std::shared_ptr<TelemetryFile> m_telemetryFile;\n-  std::vector<std::shared_ptr<Detector>> m_detectorList;\n+  std::shared_ptr<LE1_NISP_Entities::TelemetryConfiguration>  m_telemetryConfig;\n+  std::shared_ptr<LE1_NISP_Entities::DetectorCreator> m_detCreator;\n+  std::shared_ptr<LE1_NISP_Entities::TelemetryFileCreator> m_telemetryFileCreator;\n+  std::shared_ptr<LE1_NISP_Entities::TelemetryFile> m_telemetryFile;\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> m_detectorList;\n   long m_absoluteSyncPos;\n \n   void clearContext();\n@@ -67,10 +101,10 @@ private:\n   void validateTelemetryFileCreator() const;\n \n   bool findNextDetector();\n-  std::shared_ptr<TelemetrySection> createSyncSection() const;\n-  DetectorHeader readHeader(); \n+  std::shared_ptr<LE1_NISP_Entities::TelemetrySection> createSyncSection() const;\n+  LE1_NISP_Entities::DetectorHeader readHeader();\n \n-  void validateHeader(const DetectorHeader &header) const;\n+  void validateHeader(const LE1_NISP_Entities::DetectorHeader &header) const;\n   void validateScienceDataSize(const uint32_t dataCompressedSize) const;\n   void validateHistoryDataSize(const uint32_t dataCompressedSize) const;\n   void validateAnalogTmDataSize(const uint32_t dataCompressedSize) const;\n@@ -87,10 +121,10 @@ private:\n                       std::to_string(dataSize) + \" > \" + std::to_string(dataMaxSize));\n   }\n \n-  void initTelemetrySections(const std::shared_ptr<Detector> &detector);\n-  std::shared_ptr<TelemetrySection> calculateSection(const std::shared_ptr<TelemetrySection> &prevSection, const size_t sectionSize);\n-  std::shared_ptr<TelemetrySection> createSection(const size_t offset, const size_t size, const size_t padding) const;\n-  std::vector<std::shared_ptr<TelemetrySection>> calculateSections(const std::shared_ptr<TelemetrySection> &prevSection, \n+  void initTelemetrySections(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector);\n+  std::shared_ptr<LE1_NISP_Entities::TelemetrySection> calculateSection(const std::shared_ptr<LE1_NISP_Entities::TelemetrySection> &prevSection, const size_t sectionSize);\n+  std::shared_ptr<LE1_NISP_Entities::TelemetrySection> createSection(const size_t offset, const size_t size, const size_t padding) const;\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::TelemetrySection>> calculateSections(const std::shared_ptr<LE1_NISP_Entities::TelemetrySection> &prevSection,\n                                                                    const size_t dataSize);\n   size_t searchTail4Offset(const size_t startingOffset);\n \n@@ -100,14 +134,14 @@ private:\n   int countChunks(const uint32_t dataSize, const uint32_t memoryBufferSize) const;\n   unsigned int swap32 ( unsigned int value) const;\n \n-  void validateDetectorTmStructure(const std::shared_ptr<Detector> &detector);\n-  void checkTail1(const std::shared_ptr<Detector> &detector);\n-  void checkTail2(const std::shared_ptr<Detector> &detector);\n-  void checkTail3(const std::shared_ptr<Detector> &detector);\n-  void checkTail4(const std::shared_ptr<Detector> &detector);\n+  void validateDetectorTmStructure(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector);\n+  void checkTail1(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector);\n+  void checkTail2(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector);\n+  void checkTail3(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector);\n+  void checkTail4(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector);\n \n   template<typename Exception>\n-  void checkTail(const std::shared_ptr<TelemetrySection> tailSection, const uint32_t expectedVal, const std::string &tailName = \"Tail\"){\n+  void checkTail(const std::shared_ptr<LE1_NISP_Entities::TelemetrySection> tailSection, const uint32_t expectedVal, const std::string &tailName = \"Tail\"){\n     uint32_t tailValue = swap32(readParamAt<uint32_t>(tailSection->getOffset() + m_absoluteSyncPos, tailName, tailSection->getSize()));\n \t\tif (tailValue != expectedVal)\n \t\t\tthrow Exception(\"TelemetryDetectorInitializer::checkTail: \" +\n@@ -151,7 +185,7 @@ private:\n     try{\n       return m_telemetryFile->readNext<T>(paramSize);\n     }\n-    catch(const TelemetryFileReadingException &e){\n+    catch(const LE1_NISP_Entities::TelemetryFileReadingException &e){\n \t\t  throw ErrorReadingParameterException(\"TelemetryDetectorInitializer::readNextParam: \"\n                                            \"error reading param \" + paramName + \", \" \n                                            \"with size \" + std::to_string(paramSize) +  \", \"\n@@ -165,7 +199,7 @@ private:\n     try{\n       return m_telemetryFile->readAt<T>(offset, paramSize);\n     }\n-    catch(const TelemetryFileReadingException &e){\n+    catch(const LE1_NISP_Entities::TelemetryFileReadingException &e){\n \t\t  throw ErrorReadingParameterException(\"TelemetryDetectorInitializer::readParamAt: \"\n                                            \"error reading param \" + paramName + \", \" \n                                            \"with size \" + std::to_string(paramSize) +  \", \"\n@@ -176,7 +210,7 @@ private:\n \n };  // End of TelemetryDetectorInitializer class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/LE1_NISP_Interactors/TelemetrySectionDecoder.h": [
                        [
                            "@@ -1,5 +1,5 @@\n /**\n- * @file LE1_NISP_ProcessScience/TelemetrySectionDecoder.h\n+ * @file LE1_NISP_Interactors/TelemetrySectionDecoder.h\n  * @date 02/04/21\n  * @author user\n  *\n@@ -21,18 +21,18 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_TelemetrySectionDecoder_H\n-#define _LE1_NISP_PROCESSSCIENCE_TelemetrySectionDecoder_H\n+#ifndef _LE1_NISP_INTERACTORS_TelemetrySectionDecoder_H\n+#define _LE1_NISP_INTERACTORS_TelemetrySectionDecoder_H\n \n-#include \"LE1_NISP_ProcessScience//TelemetryDetector.h\"\n-#include \"LE1_NISP_ProcessScience//TelemetrySection.h\"\n-#include \"LE1_NISP_ProcessScience//Detector.h\"\n+#include \"LE1_NISP_Entities/TelemetryDetector.h\"\n+#include \"LE1_NISP_Entities/TelemetrySection.h\"\n+#include \"LE1_NISP_Entities/Detector.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n /**\n  * @class TelemetrySectionDecoder\n- * @brief\n+ * @brief Interface for decoding the data of a specific telemetry section of a detector\n  *\n  */\n class TelemetrySectionDecoder {\n@@ -43,11 +43,16 @@ public:\n    */\n   virtual ~TelemetrySectionDecoder() = default;\n \n-  virtual std::shared_ptr<ByteArray> decode(const std::shared_ptr<Detector> detector) = 0;\n+  /**\n+   * @brief Decode the data of a detector\n+   * @param detector The detector containing the required information to decode data\n+   * @return The decoded data\n+   */\n+  virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> decode(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) = 0;\n \n }; // End of TelemetrySectionDecoder class\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n #endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/doc/doc_module.rst": [
                        [
                            "@@ -0,0 +1,25 @@\n+Module Overview <----------------- TO BE WRITTEN ------------------------>\n+==========================================================================\n+\n+.. important:: Please edit ./@_el_pack_short@/doc/module.rst to replace this section.\n+\n+.. The following sections can be replaced or updated. \n+   You may also use a toctree directive for sub documents. \n+\n+Introduction\n+------------\n+\n+Purpose of this Elements Module.\n+\n+What does it do?\n+\n+Architecture overview\n+---------------------\n+\n+Highlevel overview of the Module.\n+\n+How is it done?\n+\n+  1. List of packages\n+  2. Explanation of used design patterns\n+  3. Useful UML diagrams: UML Package, UML Structure and Deployment, UML Use Case\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/AnalogTelemetryDecoder.cpp": [
                        [
                            "@@ -21,23 +21,27 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/AnalogTelemetryDecoder.h\"\n-#include \"LE1_NISP_ProcessScience/Utils.h\"\n-namespace LE1_NISP_ProcessScience {\n+#include \"LE1_NISP_Interactors/AnalogTelemetryDecoder.h\"\n+#include \"LE1_NISP_Entities/Utils.h\"\n+#include \"LE1_NISP_Interactors/Exception.h\"\n+\n+using namespace LE1_NISP_Entities;\n+\n+namespace LE1_NISP_Interactors {\n \n   AnalogTelemetryDecoder::AnalogTelemetryDecoder(const std::shared_ptr<Decompressor> decompressor)\n     : m_decompressor(decompressor){}\n \n   AnalogTelemetryDecoder::~AnalogTelemetryDecoder(){}\n \n-  std::shared_ptr<ByteArray> AnalogTelemetryDecoder::decode(const std::shared_ptr<Detector> detector) {\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> AnalogTelemetryDecoder::decode(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) {\n     validateDecompressor();\n     validateDetector(detector);\n \n     auto data = detector->getTelemetryDetector()->readBytes(detector->getAnalogTmSection()->getOffset(), \n                                                             detector->getAnalogTmSection()->getSize());\n     if(detector->isAnalogTmCompressed()){\n-      CompressionParams comprParams(detector->getMetadata()->getUsedComprBlockSize(), \n+      LE1_NISP_Entities::CompressionParams comprParams(detector->getMetadata()->getUsedComprBlockSize(),\n                                     detector->getMetadata()->getUsedComprFundSeqPar1(), \n                                     detector->getMetadata()->getUsedComprFundSeqPar2(), \n                                     detector->getTelemetryConfiguration()->getAnalogTelemetryNumberOfValues());\n@@ -50,7 +54,7 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n \n-  void AnalogTelemetryDecoder::validateDetector(const std::shared_ptr<Detector> &detector) const{\n+  void AnalogTelemetryDecoder::validateDetector(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const{\n     validatePointer<NullDetectorException>(detector,\n                                            \"AnalogTelemetryDecoder::validateDetector: \"\n                                            \"null Detector\");\n@@ -63,7 +67,7 @@ namespace LE1_NISP_ProcessScience {\n                                                     \"AnalogTelemetryDecoder::validateDetector: \"\n                                                     \"null TelemetryDetector\");\n \n-    validatePointer<NullTelemetryConfigurationException>(detector->getTelemetryConfiguration(),\n+    validatePointer<LE1_NISP_Entities::NullTelemetryConfigurationException>(detector->getTelemetryConfiguration(),\n                                                          \"AnalogTelemetryDecoder::validateDetector: \"\n                                                          \"null TelemetryConfiguration\");\n \n@@ -78,7 +82,7 @@ namespace LE1_NISP_ProcessScience {\n                                                \"null Decompressor\");\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/DetectorCollectorObt.cpp": [
                        [
                            "@@ -21,13 +21,13 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/DetectorCollectorObt.h\"\n+#include \"LE1_NISP_Interactors/DetectorCollectorObt.h\"\n #include \"ElementsKernel/Logging.h\"\n #include <algorithm>\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n-  DetectorCollectorObt::DetectorCollectorObt(const std::shared_ptr<ExposureCreator> exposureCreator)\n+  DetectorCollectorObt::DetectorCollectorObt(const std::shared_ptr<LE1_NISP_Entities::ExposureCreator> exposureCreator)\n     : m_exposureCreator(exposureCreator),\n       m_tolerance(0){}\n   /**\n@@ -35,11 +35,11 @@ namespace LE1_NISP_ProcessScience {\n    */\n   DetectorCollectorObt::~DetectorCollectorObt(){}\n \n-  std::map<ExposureId, std::shared_ptr<Exposure>> DetectorCollectorObt::collectPerExposure(\n-          const std::vector<std::shared_ptr<Detector>> &detectorList) {\n+  std::map<LE1_NISP_Entities::ExposureId, std::shared_ptr<LE1_NISP_Entities::Exposure>> DetectorCollectorObt::collectPerExposure(\n+          const std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> &detectorList) {\n     Elements::Logging logger = Elements::Logging::getLogger(\"LE1_NISP_Processor\");\n \n-    std::map<ExposureId, std::shared_ptr<Exposure>> exposures;\n+    std::map<LE1_NISP_Entities::ExposureId, std::shared_ptr<LE1_NISP_Entities::Exposure>> exposures;\n \n     validateDetCollectionCreator();\n \n@@ -47,9 +47,9 @@ namespace LE1_NISP_ProcessScience {\n \n     if(!detectorOrderedList.empty()) {\n       auto prevDet = detectorOrderedList.front();\n-      auto prevDetObt = prevDet->getObt()->getObtTotalSeconds();\n+      auto prevDetObt = prevDet->getObt()->getTotalSeconds();\n       double currDetObt = 0;\n-      ExposureId expId = {0};\n+      LE1_NISP_Entities::ExposureId expId = {0};\n \n       exposures.insert({expId, m_exposureCreator->createExposure(expId)});\n       exposures.at(expId)->addDetector(prevDet);\n@@ -57,7 +57,7 @@ namespace LE1_NISP_ProcessScience {\n       logger.info() << \"Exposure #\" << expId.exposureId << \" - OBT: \" << std::fixed << prevDetObt;\n       logger.debug() << \"Det ID: \" << prevDet->getId() << \" - OBT: \" << std::fixed << prevDetObt;\n       for (unsigned int i = 1; i < detectorOrderedList.size(); ++i) {\n-        currDetObt = detectorOrderedList.at(i)->getObt()->getObtTotalSeconds();\n+        currDetObt = detectorOrderedList.at(i)->getObt()->getTotalSeconds();\n \n         if ((currDetObt - prevDetObt) > m_tolerance)\n           expId.exposureId++;\n@@ -76,13 +76,13 @@ namespace LE1_NISP_ProcessScience {\n     return exposures;\n   }\n \n-  std::vector<std::shared_ptr<Detector>>\n-  DetectorCollectorObt::sortDetectorByObt(const std::vector<std::shared_ptr<Detector>> &detectors) const {\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>>\n+  DetectorCollectorObt::sortDetectorByObt(const std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> &detectors) const {\n     auto detectorOrderedList = detectors;\n \n     std::sort(detectorOrderedList.begin(), detectorOrderedList.end(),\n-              [](std::shared_ptr<Detector> const &det1, std::shared_ptr<Detector> const &det2) -> bool {\n-                return det1->getObt()->getObtTotalSeconds() < det2->getObt()->getObtTotalSeconds();\n+              [](std::shared_ptr<LE1_NISP_Entities::Detector> const &det1, std::shared_ptr<LE1_NISP_Entities::Detector> const &det2) -> bool {\n+                return det1->getObt()->getTotalSeconds() < det2->getObt()->getTotalSeconds();\n               });\n \n     return detectorOrderedList;\n@@ -98,7 +98,7 @@ namespace LE1_NISP_ProcessScience {\n                                                    \"null DetectorCollectionCreator\");\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/DetectorWriter.cpp": [
                        [
                            "@@ -21,13 +21,13 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/DetectorWriter.h\"\n+#include \"LE1_NISP_Interactors/DetectorWriter.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n   DetectorWriter::~DetectorWriter(){}\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/EngDecoder.cpp": [
                        [
                            "@@ -21,19 +21,19 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/EngDecoder.h\"\n+#include \"LE1_NISP_Interactors/EngDecoder.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n   EngDecoder::EngDecoder(){}\n \n   EngDecoder::~EngDecoder(){}\n   \n-  std::shared_ptr<ByteArray> EngDecoder::decode(const std::shared_ptr<Detector> detector) {\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> EngDecoder::decode(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) {\n     validateDetector(detector);\n     validateTelemetryDetector(detector->getTelemetryDetector());\n \n-    std::shared_ptr<ByteArray> engData = nullptr;\n+    std::shared_ptr<LE1_NISP_Entities::ByteArray> engData = nullptr;\n     if(detector->getEngSections().empty())\n       return engData;\n     \n@@ -50,28 +50,28 @@ namespace LE1_NISP_ProcessScience {\n     return engData->swap16();\n   }\n \n-  void EngDecoder::validateDetector(const std::shared_ptr<Detector> detector) const {\n+  void EngDecoder::validateDetector(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) const {\n     if(!detector)\n      throw NullDetectorException(\"EngDecoder::validateDetector: Detector is null\");\n   }\n       \n-  void EngDecoder::validateTelemetryDetector(const std::shared_ptr<TelemetryDetectorInterface> tmDetector) const {\n+  void EngDecoder::validateTelemetryDetector(const std::shared_ptr<LE1_NISP_Entities::TelemetryDetectorInterface> tmDetector) const {\n     if(!tmDetector)\n       throw NullTelemetryDetectorException(\"EngDecoder::validateTelemetryDetector: \"\n                                            \"TelemetryDetector is null\");  \n   }\n   \n-  void EngDecoder::validateTelemetrySection(const std::shared_ptr<TelemetrySection> section, const std::string &sectionName) const {\n+  void EngDecoder::validateTelemetrySection(const std::shared_ptr<LE1_NISP_Entities::TelemetrySection> section, const std::string &sectionName) const {\n     if(!section)\n       throw NullTelemetrySectionException(\"EngDecoder::validateTelemetrySection: \"\n                                           + sectionName + \" TelemetrySection is null\");\n   }\n \n-  std::shared_ptr<ByteArray> EngDecoder::decodeSection(const std::shared_ptr<TelemetryDetectorInterface> tmDetector, const std::shared_ptr<TelemetrySection> section) const{\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> EngDecoder::decodeSection(const std::shared_ptr<LE1_NISP_Entities::TelemetryDetectorInterface> tmDetector, const std::shared_ptr<LE1_NISP_Entities::TelemetrySection> section) const{\n     return tmDetector->readBytes(section->getOffset(), section->getSize());\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/EngFitsWriter.cpp": [
                        [
                            "@@ -21,14 +21,16 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/EngFitsWriter.h\"\n-#include \"LE1_NISP_ProcessScience/Utils.h\"\n+#include \"LE1_NISP_Interactors/EngFitsWriter.h\"\n+#include \"LE1_NISP_Entities/Utils.h\"\n \n #include \"ElementsKernel/Project.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+using namespace LE1_NISP_Entities;\n \n-  EngFitsWriter::EngFitsWriter(const std::shared_ptr<DateTimeManager> dateTimeManager, const std::shared_ptr<ExposuresCounter> exposuresCounter)\n+namespace LE1_NISP_Interactors {\n+\n+  EngFitsWriter::EngFitsWriter(const std::shared_ptr<LE1_NISP_Entities::DateTimeManager> dateTimeManager, const std::shared_ptr<ExposuresCounter> exposuresCounter)\n   : DetectorWriterElFitsIO(dateTimeManager), m_exposuresCounter(exposuresCounter){\n     m_productType = \"ENG\";\n     m_fitsDefinitionName = \"le1.nispEngExposure\";\n@@ -36,7 +38,7 @@ namespace LE1_NISP_ProcessScience {\n \n   EngFitsWriter::~EngFitsWriter(){}\n \n-  void EngFitsWriter::writePrimaryHeader(Euclid::Fits::MefFile& fits, const std::shared_ptr<DetectorMetadata> metadata) {\n+  void EngFitsWriter::writePrimaryHeader(Euclid::Fits::MefFile& fits, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> metadata) {\n     auto &primary = fits.primary().header();\n \n     writeCommonMetadata(primary, metadata);\n@@ -69,7 +71,7 @@ namespace LE1_NISP_ProcessScience {\n     validateExposuresCounter();\n   }\n \n-  void EngFitsWriter::validateEngData(const std::shared_ptr<Detector> &detector) const{\n+  void EngFitsWriter::validateEngData(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const{\n     validatePointer<NullEngDataByteArrayException>(detector->getEngData(), \n                                                    m_writerName + \n                                                    \"WriterElFitsIO::validateDetectorWriterSpecific: \"\n@@ -81,7 +83,7 @@ namespace LE1_NISP_ProcessScience {\n                                            \"detector \" + detector->getId().getScePos() + \" \" + \n                                            \"has Eng Data with zero size\");\n     if(detector->getEngData()->getSize() % sizeof(uint16_t) != 0)\n-      throwAndLog<IncompatibleArraySizeException>(m_writerName +\n+      throwAndLog<LE1_NISP_Entities::IncompatibleArraySizeException>(m_writerName +\n                                                   \"WriterElFitsIO::validateDetectorWriterSpecific: \"\n                                                   \"detector \" + detector->getId().getScePos() + \" \" +\n                                                   \"Eng Data size (\" +\n@@ -89,7 +91,7 @@ namespace LE1_NISP_ProcessScience {\n                                                   \") must be multiple of 2 bytes\");\n   }\n \n-  void EngFitsWriter::validateDetectorGroups(const std::shared_ptr<Detector> &detector) const{\n+  void EngFitsWriter::validateDetectorGroups(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const{\n     if(detector->getHeader().groupCounter == 0)\n       throwAndLog<DetectorGroupCounterIsZeroException>(m_writerName + \n                                                        \"WriterElFitsIO::validateDetectorWriterSpecific: \"\n@@ -104,7 +106,7 @@ namespace LE1_NISP_ProcessScience {\n                                           \"ExposuresCounter is set to nullptr\");\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/EngPixelsOverThresholdFitsWriter.cpp": [
                        [
                            "@@ -21,23 +21,25 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/EngPixelsOverThresholdFitsWriter.h\"\n-#include \"LE1_NISP_ProcessScience/Utils.h\"\n+#include \"LE1_NISP_Interactors/EngPixelsOverThresholdFitsWriter.h\"\n+#include \"LE1_NISP_Entities/Utils.h\"\n \n-namespace LE1_NISP_ProcessScience {\n-  EngPixelsOverThresholdFitsWriter::EngPixelsOverThresholdFitsWriter(const std::shared_ptr<DateTimeManager> dateTimeManager, const std::shared_ptr<ExposuresCounter> exposuresCounter)\n+using namespace LE1_NISP_Entities;\n+\n+namespace LE1_NISP_Interactors {\n+  EngPixelsOverThresholdFitsWriter::EngPixelsOverThresholdFitsWriter(const std::shared_ptr<LE1_NISP_Entities::DateTimeManager> dateTimeManager, const std::shared_ptr<ExposuresCounter> exposuresCounter)\n   : EngFitsWriter(dateTimeManager, exposuresCounter){\n     m_writerName = \"EngDebug\";\n   }\n \n   EngPixelsOverThresholdFitsWriter::~EngPixelsOverThresholdFitsWriter(){}\n \n-  void EngPixelsOverThresholdFitsWriter::validateDetectorWriterSpecific(const std::shared_ptr<Detector> &detector) const {\n+  void EngPixelsOverThresholdFitsWriter::validateDetectorWriterSpecific(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const {\n     validateEngData(detector);\n     validateDetectorGroups(detector);\n   }\n \n-  void EngPixelsOverThresholdFitsWriter::writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<Detector> detector) {\n+  void EngPixelsOverThresholdFitsWriter::writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<LE1_NISP_Entities::Detector> detector) {\n \n     std::string prefix = \"DET\" + detector->getId().getScePos();\n     std::string extName = prefix + \".ENG\";\n@@ -58,7 +60,7 @@ namespace LE1_NISP_ProcessScience {\n     writeImageExtHeaderMandatoryKeywords(ext.header(), detector);\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/EngUncompressedImageFitsWriter.cpp": [
                        [
                            "@@ -21,12 +21,14 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/EngUncompressedImageFitsWriter.h\"\n-#include \"LE1_NISP_ProcessScience/Utils.h\"\n+#include \"LE1_NISP_Interactors/EngUncompressedImageFitsWriter.h\"\n+#include \"LE1_NISP_Entities/Utils.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+using namespace LE1_NISP_Entities;\n \n-  EngUncompressedImageFitsWriter::EngUncompressedImageFitsWriter(const std::shared_ptr<DateTimeManager> dateTimeManager, \n+namespace LE1_NISP_Interactors {\n+\n+  EngUncompressedImageFitsWriter::EngUncompressedImageFitsWriter(const std::shared_ptr<LE1_NISP_Entities::DateTimeManager> dateTimeManager,\n                                                                                const std::shared_ptr<ExposuresCounter> exposuresCounter)\n   : EngFitsWriter(dateTimeManager, exposuresCounter){\n     m_writerName = \"CompressionVerification\";\n@@ -34,18 +36,18 @@ namespace LE1_NISP_ProcessScience {\n \n   EngUncompressedImageFitsWriter::~EngUncompressedImageFitsWriter(){}\n \n-  void EngUncompressedImageFitsWriter::validateDetectorWriterSpecific(const std::shared_ptr<Detector> &detector) const {\n+  void EngUncompressedImageFitsWriter::validateDetectorWriterSpecific(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const {\n     validateEngData(detector);\n   }\n \n-  void EngUncompressedImageFitsWriter::writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<Detector> detector) {\n+  void EngUncompressedImageFitsWriter::writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<LE1_NISP_Entities::Detector> detector) {\n     size_t groupDataSize = detector->getTelemetryConfiguration()->getDetectorPxSize() * sizeof(unsigned short);\n     auto height = detector->getTelemetryConfiguration()->getDetectorPxSizeY();\n     auto width  = detector->getTelemetryConfiguration()->getDetectorPxSizeX();\n \n     if(detector->getEngData()->getSize() != groupDataSize)\n       throwAndLog<IncompatibleEngDataSize>(\"EngUncompressedImageFitsWriter::writeDetectorData: \"\n-                                           \"eng data size is different from the expeceted one (\" \n+                                           \"eng data size is different from the expected one (\"\n                                            + std::to_string(detector->getEngData()->getSize()) +\n                                            \" != \" + std::to_string(groupDataSize) + \")\");\n   \n@@ -58,7 +60,7 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/EngUnprocessedGroupsFitsWriter.cpp": [
                        [
                            "@@ -21,20 +21,20 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/EngUnprocessedGroupsFitsWriter.h\"\n+#include \"LE1_NISP_Interactors/EngUnprocessedGroupsFitsWriter.h\"\n \n using Euclid::Fits::MefFile;\n using Euclid::Fits::PtrRaster;\n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n-  EngUnprocessedGroupsFitsWriter::EngUnprocessedGroupsFitsWriter(const std::shared_ptr<DateTimeManager> dateTimeManager, const std::shared_ptr<ExposuresCounter> exposuresCounter)\n+  EngUnprocessedGroupsFitsWriter::EngUnprocessedGroupsFitsWriter(const std::shared_ptr<LE1_NISP_Entities::DateTimeManager> dateTimeManager, const std::shared_ptr<ExposuresCounter> exposuresCounter)\n   : EngFitsWriter(dateTimeManager, exposuresCounter){\n     m_writerName = \"EngRaw\";\n   }\n \n   EngUnprocessedGroupsFitsWriter::~EngUnprocessedGroupsFitsWriter(){}\n \n-  std::vector<std::string> EngUnprocessedGroupsFitsWriter::write(std::shared_ptr<DetectorIterator> detectorIterator, const std::string &outputPath) {\n+  std::vector<std::string> EngUnprocessedGroupsFitsWriter::write(std::shared_ptr<LE1_NISP_Entities::DetectorIterator> detectorIterator, const std::string &outputPath) {\n     validateInputs(detectorIterator, outputPath);\n     initOutputPath(outputPath);\n \n@@ -58,21 +58,21 @@ namespace LE1_NISP_ProcessScience {\n     return filenames;\n   }\n   \n-  std::string EngUnprocessedGroupsFitsWriter::createFilename(const std::shared_ptr<DetectorMetadata> metadata, const std::string &productType){\n+  std::string EngUnprocessedGroupsFitsWriter::createFilename(const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> metadata, const std::string &productType){\n     return  metadata->getProductId() + \n             \"_\" + productType + \"_\"\n             \"DPU\" + std::to_string(metadata->getDetectorId().getDpuId()) + \"_\"\n             \"DET\" +  metadata->getDetectorId().getScePos() + \"_\" +\n-            m_dateTimeManager->getDateTimeIsoStr() + \"Z\"\n+            m_dateTimeManager->getCurrentDateTime()->getIsoString() + \"Z\"\n             \".fits\";\n   }\n \n-  void EngUnprocessedGroupsFitsWriter::validateDetectorWriterSpecific(const std::shared_ptr<Detector> &detector) const {\n+  void EngUnprocessedGroupsFitsWriter::validateDetectorWriterSpecific(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const {\n     validateEngData(detector);\n     validateDetectorGroups(detector);\n   }\n \n-  void EngUnprocessedGroupsFitsWriter::writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<Detector> detector) {\n+  void EngUnprocessedGroupsFitsWriter::writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<LE1_NISP_Entities::Detector> detector) {\n     auto const metadata = detector->getMetadata();\n \n     size_t groupDataSize = detector->getTelemetryConfiguration()->getDetectorPxSize() * sizeof(unsigned short);\n@@ -82,7 +82,7 @@ namespace LE1_NISP_ProcessScience {\n     \n     if((groupCounter * groupDataSize) != detector->getEngData()->getSize())\n       throw IncompatibleEngDataSize(\"EngUnprocessedGroupsFitsWriter::writeDetectorData: \"\n-                                    \"eng data size is different from the expeceted one (\" + std::to_string(detector->getEngData()->getSize()) +\n+                                    \"eng data size is different from the expected one (\" + std::to_string(detector->getEngData()->getSize()) +\n                                     \" != \" + std::to_string(groupCounter * groupDataSize) + \")\");\n     \n     std::string detId = \"DET\" + detector->getId().getScePos();\n@@ -98,7 +98,7 @@ namespace LE1_NISP_ProcessScience {\n     }\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/ErrorsDecoder.cpp": [
                        [
                            "@@ -21,17 +21,20 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/ErrorsDecoder.h\"\n-#include \"LE1_NISP_ProcessScience/Utils.h\"\n+#include \"LE1_NISP_Interactors/ErrorsDecoder.h\"\n+#include \"LE1_NISP_Entities/Utils.h\"\n+#include \"LE1_NISP_Interactors/Exception.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+using namespace LE1_NISP_Entities;\n+\n+namespace LE1_NISP_Interactors {\n \n   ErrorsDecoder::ErrorsDecoder(const std::shared_ptr<Decompressor> decompressor)\n     : m_decompressor(decompressor){}\n \n   ErrorsDecoder::~ErrorsDecoder(){}\n \n-  std::shared_ptr<ByteArray> ErrorsDecoder::decode(const std::shared_ptr<Detector> detector) {\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> ErrorsDecoder::decode(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) {\n     validateDecompressor();\n     validateDetector(detector);\n \n@@ -41,7 +44,7 @@ namespace LE1_NISP_ProcessScience {\n       auto comprBlockSize = detector->getMetadata()->getUsedComprBlockSize();\n       auto valuesPerGroup = detector->getTelemetryConfiguration()->getErrorValuesPerGroup();\n       auto groups = detector->getHeader().groupCounter;\n-      CompressionParams comprParams(comprBlockSize, 3, 6, valuesPerGroup * groups);\n+      LE1_NISP_Entities::CompressionParams comprParams(comprBlockSize, 3, 6, valuesPerGroup * groups);\n       return m_decompressor->decompress(data, \n                                         detector->getTelemetryConfiguration()->getErrorDataMaxSize(),\n                                         comprParams);\n@@ -51,7 +54,7 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n \n-  void ErrorsDecoder::validateDetector(const std::shared_ptr<Detector> &detector) const{\n+  void ErrorsDecoder::validateDetector(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const{\n     validatePointer<NullDetectorException>(detector,\n                                            \"ErrorsDecoder::validateDetector: \"\n                                            \"null Detector\");\n@@ -64,7 +67,7 @@ namespace LE1_NISP_ProcessScience {\n                                                     \"ErrorsDecoder::validateDetector: \"\n                                                     \"null TelemetryDetector\");\n \n-    validatePointer<NullTelemetryConfigurationException>(detector->getTelemetryConfiguration(),\n+    validatePointer<LE1_NISP_Entities::NullTelemetryConfigurationException>(detector->getTelemetryConfiguration(),\n                                                          \"ErrorsDecoder::validateDetector: \"\n                                                          \"null TelemetryConfiguration\");\n \n@@ -79,7 +82,7 @@ namespace LE1_NISP_ProcessScience {\n                                                \"null Decompressor\");\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/Exception.cpp": [
                        [
                            "@@ -1,6 +1,6 @@\n /**\n- * @file LE1_NISP_ProcessScience/DetectorWriter.h\n- * @date 11/24/20\n+ * @file src/lib/Exception.cpp\n+ * @date 10/15/20\n  * @author user\n  *\n  * @copyright (C) 2012-2020 Euclid Science Ground Segment\n@@ -21,29 +21,18 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORWRITER_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORWRITER_H\n+#include \"LE1_NISP_Interactors/Exception.h\"\n \n-#include <vector>\n-#include \"LE1_NISP_ProcessScience//Detector.h\"\n-#include \"LE1_NISP_ProcessScience//DetectorIterator.h\"\n+namespace LE1_NISP_Interactors {\n \n-namespace LE1_NISP_ProcessScience {\n+  Exception::Exception(const std::string &errMsg)\n+  : Elements::Exception(errMsg){\n+  }\n+\n+  Exception::~Exception(){}\n \n-/**\n- * @class DetectorWriter\n- * @brief\n- *\n- */\n-class DetectorWriter{\n-  public:\n-  virtual ~DetectorWriter();\n-  \n-  virtual std::vector<std::string> write(std::shared_ptr<DetectorIterator> detectorIterator, const std::string &outputPath) = 0;\n \n-};  // End of DetectorWriter class\n+}  // namespace LE1_NISP_Interactors\n \n-}  // namespace LE1_NISP_ProcessScience\n \n \n-#endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/ExposuresCounter.cpp": [
                        [
                            "@@ -21,9 +21,9 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/ExposuresCounter.h\"\n+#include \"LE1_NISP_Interactors/ExposuresCounter.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n \n   ExposuresCounter::ExposuresCounter(){}\n@@ -56,7 +56,7 @@ namespace LE1_NISP_ProcessScience {\n   size_t ExposuresCounter::countPointings() const{\n     return m_exposuresPerPointing.size();\n   }\n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/HistoryDecoder.cpp": [
                        [
                            "@@ -21,10 +21,13 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/HistoryDecoder.h\"\n-#include \"LE1_NISP_ProcessScience/Utils.h\"\n+#include \"LE1_NISP_Interactors/HistoryDecoder.h\"\n+#include \"LE1_NISP_Entities/Utils.h\"\n+#include \"LE1_NISP_Interactors/Exception.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+using namespace LE1_NISP_Entities;\n+\n+namespace LE1_NISP_Interactors {\n \n   HistoryDecoder::HistoryDecoder(const std::shared_ptr<Decompressor> decompressor)\n   : m_decompressor(decompressor)\n@@ -32,7 +35,7 @@ namespace LE1_NISP_ProcessScience {\n \n   HistoryDecoder::~HistoryDecoder(){}\n \n-  std::shared_ptr<ByteArray> HistoryDecoder::decode(const std::shared_ptr<Detector> detector) {\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> HistoryDecoder::decode(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) {\n     validateDecompressor();\n     validateDetector(detector);\n \n@@ -41,7 +44,7 @@ namespace LE1_NISP_ProcessScience {\n     if(detector->isHistoryCompressed()){\n       auto valuesCnt = detector->getTelemetryConfiguration()->getHistoryNumberOfValues();\n       auto maxGroups = detector->getTelemetryConfiguration()->getMaxGroups();\n-      CompressionParams comprParams(detector->getMetadata()->getUsedComprBlockSize(), \n+      LE1_NISP_Entities::CompressionParams comprParams(detector->getMetadata()->getUsedComprBlockSize(),\n                                     detector->getMetadata()->getUsedComprFundSeqPar1(), \n                                     detector->getMetadata()->getUsedComprFundSeqPar2(), \n                                     valuesCnt * maxGroups);\n@@ -54,7 +57,7 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n \n-  void HistoryDecoder::validateDetector(const std::shared_ptr<Detector> &detector) const{\n+  void HistoryDecoder::validateDetector(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const{\n     validatePointer<NullDetectorException>(detector,\n                                            \"HistoryDecoder::validateDetector: \"\n                                            \"null Detector\");\n@@ -67,7 +70,7 @@ namespace LE1_NISP_ProcessScience {\n                                                     \"HistoryDecoder::validateDetector: \"\n                                                     \"null TelemetryDetector\");\n \n-    validatePointer<NullTelemetryConfigurationException>(detector->getTelemetryConfiguration(),\n+    validatePointer<LE1_NISP_Entities::NullTelemetryConfigurationException>(detector->getTelemetryConfiguration(),\n                                                          \"HistoryDecoder::validateDetector: \"\n                                                          \"null TelemetryConfiguration\");\n \n@@ -82,7 +85,7 @@ namespace LE1_NISP_ProcessScience {\n                                                \"null Decompressor\");\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/HkWriterElFitsIO.cpp": [
                        [
                            "@@ -21,7 +21,7 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/HkWriterElFitsIO.h\"\n+#include \"LE1_NISP_Interactors/HkWriterElFitsIO.h\"\n #include \"ElementsKernel/Logging.h\"\n #include \"ElementsKernel/Project.h\"\n \n@@ -33,9 +33,9 @@ using Euclid::Fits::ColumnInfo;\n using Euclid::Fits::PtrColumn;\n using Euclid::Fits::VecColumn;\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n-  HkWriterElFitsIO::HkWriterElFitsIO(const std::shared_ptr<DateTimeManager> dateTimeManager)\n+  HkWriterElFitsIO::HkWriterElFitsIO(const std::shared_ptr<LE1_NISP_Entities::DateTimeManager> dateTimeManager)\n   : DetectorWriterElFitsIO(dateTimeManager){\n     m_writerName = \"RawLines\";\n     m_productType = \"HK\";\n@@ -115,7 +115,7 @@ namespace LE1_NISP_ProcessScience {\n \n   void HkWriterElFitsIO::validateInputsWriterSpecific() const{}\n \n-  void HkWriterElFitsIO::validateDetectorWriterSpecific(const std::shared_ptr<Detector> &detector) const{\n+  void HkWriterElFitsIO::validateDetectorWriterSpecific(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const{\n     if(!detector->getErrorsData())\n       throw NullErrorsByteArrayException(\"RawLinesWriter::validateInputs: \"\n                                          \"detector \" + detector->getId().getScePos() + \" \" + \n@@ -126,7 +126,7 @@ namespace LE1_NISP_ProcessScience {\n                                           \"has null history data ByteArray\");\n   }\n \n-  void HkWriterElFitsIO::writePrimaryHeader(Euclid::Fits::MefFile& fits, const std::shared_ptr<DetectorMetadata> metadata){\n+  void HkWriterElFitsIO::writePrimaryHeader(Euclid::Fits::MefFile& fits, const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> metadata){\n     auto &primary = fits.primary().header();\n \n     writeCommonMetadata(primary, metadata);\n@@ -148,7 +148,7 @@ namespace LE1_NISP_ProcessScience {\n     writeHistoryParamIndex(primary, metadata);\n   }\n \n-  void HkWriterElFitsIO::writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<Detector> detector) {\n+  void HkWriterElFitsIO::writeDetectorData(Euclid::Fits::MefFile& fits, const std::shared_ptr<LE1_NISP_Entities::Detector> detector) {\n     std::string prefix = \"DET\" + detector->getId().getScePos();\n \n     writeRawlines(fits, prefix + \".RAW\", detector);\n@@ -156,7 +156,7 @@ namespace LE1_NISP_ProcessScience {\n     writeHistory(fits, prefix + \".HIST\", detector);\n   }\n \n-  void HkWriterElFitsIO::writeRawlines(Euclid::Fits::MefFile& fits, const std::string &extName, const std::shared_ptr<Detector> detector){\n+  void HkWriterElFitsIO::writeRawlines(Euclid::Fits::MefFile& fits, const std::string &extName, const std::shared_ptr<LE1_NISP_Entities::Detector> detector){\n     auto const metadata = detector->getMetadata();\n     std::vector<unsigned short> frameIds;\n     std::vector<unsigned short> rawLineIds;\n@@ -192,7 +192,7 @@ namespace LE1_NISP_ProcessScience {\n     writeRawlinesHeader(ext.header(), detector);\n   }\n \n-  void HkWriterElFitsIO::writeRawlinesHeader(const Euclid::Fits::Header& header, const std::shared_ptr<Detector> &detector){\n+  void HkWriterElFitsIO::writeRawlinesHeader(const Euclid::Fits::Header& header, const std::shared_ptr<LE1_NISP_Entities::Detector> &detector){\n     auto const metadata = detector->getMetadata();\n \n     writeDetectorId(header, detector);\n@@ -218,7 +218,7 @@ namespace LE1_NISP_ProcessScience {\n     writeAnalogTelemetry(header, detector);\n   }\n \n-  void HkWriterElFitsIO::writeAnalogTelemetry(const Euclid::Fits::Header &header, const std::shared_ptr<Detector> detector){\n+  void HkWriterElFitsIO::writeAnalogTelemetry(const Euclid::Fits::Header &header, const std::shared_ptr<LE1_NISP_Entities::Detector> detector){\n     if(detector->getAnalogTelemetry() != nullptr){\n       if(detector->getAnalogTelemetry()->getSize() > 0){\n \n@@ -242,7 +242,7 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n \n-  void HkWriterElFitsIO::writeErrors(Euclid::Fits::MefFile& fits, const std::string &extName, const std::shared_ptr<Detector> detector){\n+  void HkWriterElFitsIO::writeErrors(Euclid::Fits::MefFile& fits, const std::string &extName, const std::shared_ptr<LE1_NISP_Entities::Detector> detector){\n     auto groupCounter = detector->getHeader().groupCounter;\n     if(detector->getErrorsData()->getSize() > 0){\n       if(detector->getErrorsData()->getSize() != groupCounter * detector->getTelemetryConfiguration()->getErrorValuesPerGroup())\n@@ -256,7 +256,7 @@ namespace LE1_NISP_ProcessScience {\n     }\n   }\n \n-  void HkWriterElFitsIO::writeHistory(Euclid::Fits::MefFile& fits, const std::string &extName, const std::shared_ptr<Detector> detector){\n+  void HkWriterElFitsIO::writeHistory(Euclid::Fits::MefFile& fits, const std::string &extName, const std::shared_ptr<LE1_NISP_Entities::Detector> detector){\n     if(detector->getHistoryData()->getSize() > 0){\n       auto groups = detector->getMetadata()->getMaccGroups();\n       auto valuesPerGroup = detector->getMetadata()->getMaccFramesPerGroup();\n@@ -281,7 +281,7 @@ namespace LE1_NISP_ProcessScience {\n     }\n   }\n \n-  std::unique_ptr<unsigned short[]> HkWriterElFitsIO::readHistoryValidData(const std::shared_ptr<ByteArray> &historyData, const unsigned short groups, const unsigned short valuesPerGroup, const unsigned short maxValuesPerGroup) const{\n+  std::unique_ptr<unsigned short[]> HkWriterElFitsIO::readHistoryValidData(const std::shared_ptr<LE1_NISP_Entities::ByteArray> &historyData, const unsigned short groups, const unsigned short valuesPerGroup, const unsigned short maxValuesPerGroup) const{\n     auto data = std::make_unique<unsigned short[]>(valuesPerGroup * groups);\n     for(int grpCnt = 0; grpCnt < groups; ++grpCnt){\n       std::memcpy(data.get() + grpCnt * valuesPerGroup, \n@@ -291,7 +291,7 @@ namespace LE1_NISP_ProcessScience {\n     return std::move(data);\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/MetadataParserParamDescriptions.cpp": [
                        [
                            "@@ -21,30 +21,30 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/MetadataParserParamDescriptions.h\"\n-#include \"LE1_NISP_ProcessScience/DetectorConfigMapper.h\"\n+#include \"LE1_NISP_Interactors/MetadataParserParamDescriptions.h\"\n+#include \"LE1_NISP_Entities/DetectorConfigMapper.h\"\n \n #include <cmath>\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n   \n   MetadataParserParamDescriptions::MetadataParserParamDescriptions(){}\n   \n   MetadataParserParamDescriptions::~MetadataParserParamDescriptions(){}\n \n-  void MetadataParserParamDescriptions::setMetadataCreator(const std::shared_ptr<DetectorMetadataCreator> creator){\n+  void MetadataParserParamDescriptions::setMetadataCreator(const std::shared_ptr<LE1_NISP_Entities::DetectorMetadataCreator> creator){\n     m_detectorMetadataCreator = creator; \n   }\n \n-  void MetadataParserParamDescriptions::setParameterDescriptions(const std::vector<std::shared_ptr<ParameterDescription>> &descriptions){\n+  void MetadataParserParamDescriptions::setParameterDescriptions(const std::vector<std::shared_ptr<LE1_NISP_Entities::ParameterDescription>> &descriptions){\n     m_descriptions = descriptions;\n   }\n \n-  void MetadataParserParamDescriptions::setFixedParameters(const std::vector<std::shared_ptr<ParameterInterface>> &params){\n+  void MetadataParserParamDescriptions::setFixedParameters(const std::vector<std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> &params){\n     m_fixedParams = params;\n   }\n \n-  std::shared_ptr<DetectorMetadata> MetadataParserParamDescriptions::parseMetadata(const std::shared_ptr<TelemetryDetectorInterface> telemetryDetector){\n+  std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> MetadataParserParamDescriptions::parseMetadata(const std::shared_ptr<LE1_NISP_Entities::TelemetryDetectorInterface> telemetryDetector){\n     validateTelemetryDetector(telemetryDetector);\n     validateMetadataCreator();\n \n@@ -68,7 +68,7 @@ namespace LE1_NISP_ProcessScience {\n         throw UnknownParameterTypeException(\"MetadataParserParamDescriptions::parseMetadata: \"\n                                             \"unknown type \" + paramDesc->getType());\n \n-      metadata->addParameter(std::make_shared<Parameter>(paramDesc, paramValue));\n+      metadata->addParameter(std::make_shared<LE1_NISP_Entities::Parameter>(paramDesc, paramValue));\n     }\n \n     for(auto const &param: m_fixedParams)\n@@ -78,7 +78,7 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n   void MetadataParserParamDescriptions::validateTelemetryDetector(\n-      const std::shared_ptr<TelemetryDetectorInterface> &telemetryDetector) const {\n+      const std::shared_ptr<LE1_NISP_Entities::TelemetryDetectorInterface> &telemetryDetector) const {\n     if(!telemetryDetector)\n       throw NullTelemetryDetectorException(\"MetadataParserParamDescriptions::parseMetadata: \"\n                                            \"null TelemetryDetector pointer\");\n@@ -90,27 +90,27 @@ namespace LE1_NISP_ProcessScience {\n                                                  \"null DetectorMetadataCreator pointer\");\n   }\n \n-  void MetadataParserParamDescriptions::validateParamDescription(const std::shared_ptr<ParameterDescription> &paramDesc) const {\n+  void MetadataParserParamDescriptions::validateParamDescription(const std::shared_ptr<LE1_NISP_Entities::ParameterDescription> &paramDesc) const {\n     if(paramDesc == nullptr)\n-      throw NullParameterDescriptionException(\"MetadataParserParamDescriptions::parseMetadata: \"\n-                                              \"null ParameterDescription pointer\");\n+      throw LE1_NISP_Entities::NullParameterDescriptionException(\"MetadataParserParamDescriptions::parseMetadata: \"\n+                                                                 \"null ParameterDescription pointer\");\n   }\n \n-  void MetadataParserParamDescriptions::validateByteArray(const std::shared_ptr<ByteArray> &bytes) const {\n+  void MetadataParserParamDescriptions::validateByteArray(const std::shared_ptr<LE1_NISP_Entities::ByteArray> &bytes) const {\n     if (!bytes)\n       throw NullByteArrayException(\"MetadataParserParamDescriptions::validateByteArray: nullptr ByteArray\");\n   }\n \n-  void MetadataParserParamDescriptions::validateSizes(const std::shared_ptr<ByteArray> &bytes,\n-                                                      const std::shared_ptr<ParameterDescription> &paramDesc) const {\n+  void MetadataParserParamDescriptions::validateSizes(const std::shared_ptr<LE1_NISP_Entities::ByteArray> &bytes,\n+                                                      const std::shared_ptr<LE1_NISP_Entities::ParameterDescription> &paramDesc) const {\n     if (paramDesc->getSize() < 8)\n       validateSizeLowerThan8Bits(bytes, paramDesc);\n     else\n       validateSizeHigherOrEqualThan8Bits(bytes, paramDesc);\n   }\n \n-  void MetadataParserParamDescriptions::validateSizeLowerThan8Bits(const std::shared_ptr<ByteArray> &bytes,\n-                                                                   const std::shared_ptr<ParameterDescription> &paramDesc) const {\n+  void MetadataParserParamDescriptions::validateSizeLowerThan8Bits(const std::shared_ptr<LE1_NISP_Entities::ByteArray> &bytes,\n+                                                                   const std::shared_ptr<LE1_NISP_Entities::ParameterDescription> &paramDesc) const {\n     if (bytes->getSize() != 1)\n       throw IncompatibleParameterAndByteArraySizeException(\n           \"MetadataParserParamDescriptions::validateSizeLowerThan8Bits: \"\n@@ -129,8 +129,8 @@ namespace LE1_NISP_ProcessScience {\n           \") must be <= 8\");\n   }\n \n-  void MetadataParserParamDescriptions::validateSizeHigherOrEqualThan8Bits(const std::shared_ptr<ByteArray> &bytes,\n-                                                                           const std::shared_ptr<ParameterDescription> &paramDesc) const {\n+  void MetadataParserParamDescriptions::validateSizeHigherOrEqualThan8Bits(const std::shared_ptr<LE1_NISP_Entities::ByteArray> &bytes,\n+                                                                           const std::shared_ptr<LE1_NISP_Entities::ParameterDescription> &paramDesc) const {\n     if (paramDesc->getSize() != 8 &&\n         paramDesc->getSize() != 16 &&\n         paramDesc->getSize() != 32)\n@@ -149,8 +149,8 @@ namespace LE1_NISP_ProcessScience {\n \n   }\n \n-  uint8_t MetadataParserParamDescriptions::getValueConsideringOffbit(const std::shared_ptr<ByteArray> &bytes,\n-                                                                     const std::shared_ptr<ParameterDescription> &paramDesc) const {\n+  uint8_t MetadataParserParamDescriptions::getValueConsideringOffbit(const std::shared_ptr<LE1_NISP_Entities::ByteArray> &bytes,\n+                                                                     const std::shared_ptr<LE1_NISP_Entities::ParameterDescription> &paramDesc) const {\n     uint8_t value = (*bytes)[0];\n     value >>= paramDesc->getOffbit();\n     uint8_t mask = 0xFF >> (8 - paramDesc->getSize());\n@@ -158,7 +158,7 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n   std::string MetadataParserParamDescriptions::unsupportedSizeErrorStr(\n-      const std::shared_ptr<ParameterDescription> &paramDesc) const {\n+      const std::shared_ptr<LE1_NISP_Entities::ParameterDescription> &paramDesc) const {\n     return \"param \\\"\" + paramDesc->getName() + \"\\\" \"\n                                                \"defined with unsupported size of \" +\n            std::to_string(paramDesc->getSize()) + \" bits, \"\n@@ -166,8 +166,8 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n   template<typename T>\n-  T MetadataParserParamDescriptions::getParamValueAs(const std::shared_ptr<ByteArray> &bytes,\n-                                                     const std::shared_ptr<ParameterDescription> &paramDesc) const {\n+  T MetadataParserParamDescriptions::getParamValueAs(const std::shared_ptr<LE1_NISP_Entities::ByteArray> &bytes,\n+                                                     const std::shared_ptr<LE1_NISP_Entities::ParameterDescription> &paramDesc) const {\n     if (paramDesc->getSize() <= 8)\n       return getValueConsideringOffbit(bytes, paramDesc);\n \n@@ -189,7 +189,7 @@ namespace LE1_NISP_ProcessScience {\n     return (T) val;\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/ProductGenerator.cpp": [
                        [
                            "@@ -21,15 +21,17 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/ProductGenerator.h\"\n-#include \"LE1_NISP_ProcessScience/Utils.h\"\n+#include \"LE1_NISP_Interactors/ProductGenerator.h\"\n+#include \"LE1_NISP_Entities/Utils.h\"\n #include \"ElementsKernel/Logging.h\"\n \n+using namespace LE1_NISP_Entities;\n+\n namespace {\n   Elements::Logging logger = Elements::Logging::getLogger(\"LE1_NISP_Processor\");\n }\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n   \n   ProductGenerator::ProductGenerator(){}\n   \n@@ -113,7 +115,7 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n   void ProductGenerator::groupDetectorsPerExposure(){\n-    validatePointer<NullDetectorCollectorEception>(m_detectorCollector,\n+    validatePointer<NullDetectorCollectorException>(m_detectorCollector,\n                                                   \"ProductGenerator::groupDetectorsPerExposure: \"\n                                                   \"DetectorCollector is null\");\n     m_exposures = m_detectorCollector->collectPerExposure(m_detectorList);\n@@ -133,7 +135,7 @@ namespace LE1_NISP_ProcessScience {\n     m_detectorList.clear();\n   }\n \n-  void ProductGenerator::validateExposure(const std::shared_ptr<Exposure> &exposure) const{\n+  void ProductGenerator::validateExposure(const std::shared_ptr<LE1_NISP_Entities::Exposure> &exposure) const{\n     validatePointer<NullExposureException>(exposure,\n                                            \"ProductGenerator::validateExposure: \"\n                                            \"Null Exposure\");\n@@ -169,7 +171,7 @@ namespace LE1_NISP_ProcessScience {\n                                                   \"ProductsArchiver is null\");\n   }\n \n-  void ProductGenerator::decodeTelemetry(std::shared_ptr<DetectorIterator> detItr){\n+  void ProductGenerator::decodeTelemetry(std::shared_ptr<LE1_NISP_Entities::DetectorIterator> detItr){\n     while(detItr->hasNext()){\n       auto det = detItr->getNext();\n \n@@ -185,14 +187,14 @@ namespace LE1_NISP_ProcessScience {\n     }    \n   }\n \n-  void ProductGenerator::checkRawlines(const std::shared_ptr<Detector> &detector){\n+  void ProductGenerator::checkRawlines(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector){\n     if(detector->getRawLines() != nullptr)\n       logger.debug() << \"RawLines size = \" << detector->getRawLines()->getSize();\n     else\n       logger.debug() << \"RawLines size = 0\";\n   }\n \n-  void ProductGenerator::checkScience(const std::shared_ptr<Detector> &detector){\n+  void ProductGenerator::checkScience(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector){\n     if(detector->getScienceData() == nullptr) {\n       if(!m_currExposureConfig->isCalibNonLinearity())\n         throwAndLog<NullScienceDataException>(\"ProductGenerator::decodeTelemetry: \"\n@@ -209,42 +211,42 @@ namespace LE1_NISP_ProcessScience {\n     }\n   }\n \n-  void ProductGenerator::checkQualityData(const std::shared_ptr<Detector> &detector){\n+  void ProductGenerator::checkQualityData(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector){\n     if(detector->getQualityData() != nullptr)\n       logger.debug() << \"QualityData size = \" << detector->getQualityData()->getSize();\n     else\n       logger.debug() << \"QualityData size = 0\";\n   }\n \n-  void ProductGenerator::checkEngineering(const std::shared_ptr<Detector> &detector){\n+  void ProductGenerator::checkEngineering(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector){\n     if(detector->getEngData() != nullptr)\n       logger.debug() << \"Engineering size = \" << detector->getEngData()->getSize();\n     else\n       logger.debug() << \"Engineering size = 0\";\n   }\n \n-  void ProductGenerator::checkHistory(const std::shared_ptr<Detector> &detector){\n+  void ProductGenerator::checkHistory(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector){\n     if(detector->getHistoryData() != nullptr)\n       logger.debug() << \"History size = \" << detector->getHistoryData()->getSize();\n     else\n       logger.debug() << \"History size = 0\";\n   }\n \n-  void ProductGenerator::checkErrors(const std::shared_ptr<Detector> &detector){\n+  void ProductGenerator::checkErrors(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector){\n     if(detector->getErrorsData() != nullptr)\n       logger.debug() << \"Errors size = \" << detector->getErrorsData()->getSize();\n     else\n       logger.debug() << \"Errors size = 0\";\n   }\n \n-  void ProductGenerator::checkAnalogTm(const std::shared_ptr<Detector> &detector){\n+  void ProductGenerator::checkAnalogTm(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector){\n     if(detector->getAnalogTelemetry() != nullptr)\n       logger.debug() << \"AnalogTm size = \" << detector->getAnalogTelemetry()->getSize();\n     else\n       logger.debug() << \"AnalogTm size = 0\";\n   }\n \n-  void ProductGenerator::setDetectorsInitializer(const std::shared_ptr<DetectorsInitializer> detectorsInitializer) { \n+  void ProductGenerator::setDetectorsInitializer(const std::shared_ptr<DetectorsInitializer> detectorsInitializer) {\n     m_detectorsInitializer = detectorsInitializer;\n   }\n   void ProductGenerator::setDetectorMetadataParser(const std::shared_ptr<DetectorMetadataParser> detectorMetadataParser) { \n@@ -266,7 +268,7 @@ namespace LE1_NISP_ProcessScience {\n     m_productsArchiver = productsArchiver;\n   }\n   \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/ProductsArchiverDataModelBindings.cpp": [
                        [
                            "@@ -21,8 +21,8 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/ProductsArchiverDataModelBindings.h\"\n-#include \"LE1_NISP_ProcessScience/Utils.h\"\n+#include \"LE1_NISP_Interactors/ProductsArchiverDataModelBindings.h\"\n+#include \"LE1_NISP_Entities/Utils.h\"\n \n #include \"ElementsKernel/Project.h\"\n #include \"ElementsKernel/Logging.h\"\n@@ -33,6 +33,7 @@ namespace {\n   Elements::Logging logger = Elements::Logging::getLogger(\"LE1_NISP_Processor\");\n }\n \n+using namespace LE1_NISP_Entities;\n using namespace pro::le1::nisp;\n using ImgType_type                = bas::img::imgBaseFrame::ImgType_type;\n using AxisLengths_type            = bas::img::imgBaseFrame::AxisLengths_type;\n@@ -52,9 +53,9 @@ using GrismWheelOrientation_type  = NispRawFrame::GrismWheelOrientation_type;\n using FilterWheelOrientation_type = NispRawFrame::FilterWheelOrientation_type;\n using NispRawFrameDpd             = dpd::le1::nisprawframe::dpdNispRawFrame;\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n-  ProductsArchiverDataModelBindings::ProductsArchiverDataModelBindings(const std::shared_ptr<DateTimeManager> dateTimeManager, const std::shared_ptr<ExposuresCounter> exposuresCounter)\n+  ProductsArchiverDataModelBindings::ProductsArchiverDataModelBindings(const std::shared_ptr<LE1_NISP_Entities::DateTimeManager> dateTimeManager, const std::shared_ptr<ExposuresCounter> exposuresCounter)\n   : m_dateTimeManager(dateTimeManager),\n     m_exposuresCounter(exposuresCounter)\n   {\n@@ -84,7 +85,7 @@ namespace LE1_NISP_ProcessScience {\n \n   ProductsArchiverDataModelBindings::~ProductsArchiverDataModelBindings(){}\n \n-  void ProductsArchiverDataModelBindings::setDateTimeManager(const std::shared_ptr<DateTimeManager> dateTimeManager){\n+  void ProductsArchiverDataModelBindings::setDateTimeManager(const std::shared_ptr<LE1_NISP_Entities::DateTimeManager> dateTimeManager){\n     m_dateTimeManager = dateTimeManager;\n   }\n \n@@ -102,7 +103,7 @@ namespace LE1_NISP_ProcessScience {\n     throw ParameterNotFoundException(\"ProductsArchiverDataModelBindings::getParam: param \" + paramName + \" not found\");\n   }\n \n-  std::string ProductsArchiverDataModelBindings::archive(const std::shared_ptr<Exposure> exposure,\n+  std::string ProductsArchiverDataModelBindings::archive(const std::shared_ptr<LE1_NISP_Entities::Exposure> exposure,\n                                                          const std::string &scienceProduct, \n                                                          const std::string &hkProduct, \n                                                          const std::vector<std::string> &engProducts, \n@@ -142,7 +143,7 @@ namespace LE1_NISP_ProcessScience {\n                                                          + outputPath + \")\");\n   }\n \n-  void ProductsArchiverDataModelBindings::validateExposure(const std::shared_ptr<Exposure> &exposure) const{\n+  void ProductsArchiverDataModelBindings::validateExposure(const std::shared_ptr<LE1_NISP_Entities::Exposure> &exposure) const{\n     if(exposure == nullptr)\n       throwAndLog<NullExposureException>(\"ProductsArchiverDataModelBindings::validateExposure: \"\n                                          \"nullptr Exposure\");\n@@ -166,7 +167,7 @@ namespace LE1_NISP_ProcessScience {\n       validateCommonMetadata(m_exposure->getCommonDetectorMetadata());\n       m_commonMetadata = m_exposure->getCommonDetectorMetadata();\n \n-      m_creationDateTime = m_dateTimeManager->getDateTime();\n+      m_creationDateTime = m_dateTimeManager->getCurrentDateTime();\n \n       auto header        = generateHeader();\n       auto nispRawFrame  = generateNispRawFrame();\n@@ -190,7 +191,7 @@ namespace LE1_NISP_ProcessScience {\n     return productName;\n   }\n \n-  void ProductsArchiverDataModelBindings::validateCommonMetadata(const std::shared_ptr<CommonDetectorMetadata> &commonMetadata) const{\n+  void ProductsArchiverDataModelBindings::validateCommonMetadata(const std::shared_ptr<LE1_NISP_Entities::CommonDetectorMetadata> &commonMetadata) const{\n     if(commonMetadata == nullptr)\n       throwAndLog<NullCommonDetectorMetadataException>(\"ProductsArchiverDataModelBindings::validateCommonMetadata: \"\n                                                        \"nullptr DetectorCommonMetadata\");\n@@ -202,11 +203,11 @@ namespace LE1_NISP_ProcessScience {\n                                                       \"nullptr common metadata ExposureConfiguration\");     \n   }\n \n-  void ProductsArchiverDataModelBindings::validateDetector(const std::shared_ptr<Detector> &detector) const{\n+  void ProductsArchiverDataModelBindings::validateDetector(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const{\n     validatePointer<NullDetectorException>(detector,\n                                           \"ProductsArchiverDataModelBindings::validateDetector: \"\n                                           \"null Detector\");\n-    validatePointer<NullTelemetryConfigurationException>(detector->getTelemetryConfiguration(),\n+    validatePointer<LE1_NISP_Entities::NullTelemetryConfigurationException>(detector->getTelemetryConfiguration(),\n                                           \"ProductsArchiverDataModelBindings::validateDetector: \"\n                                           \"null TelemetryConfiguration\");\n     validatePointer<NullTelemetryDetectorException>(detector->getTelemetryDetector(),\n@@ -215,7 +216,7 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n   sys::genericHeader ProductsArchiverDataModelBindings::generateHeader(){\n-    double nowmusec = m_creationDateTime->getTotalMicroseconds() - m_creationDateTime->getTotalSeconds()*1E6;\n+    double nowmusec = m_creationDateTime->getTotalMicroSeconds() - m_creationDateTime->getTotalSeconds() * 1E6;\n     auto creationDate = xml_schema::date_time(m_creationDateTime->getYear(),\n                                               m_creationDateTime->getMonth(),\n                                               m_creationDateTime->getDay(),\n@@ -300,7 +301,7 @@ namespace LE1_NISP_ProcessScience {\n             m_commonMetadata->getExposureConfiguration()->getProductTechnique()};\n   }\n \n-  AxisLengths_type ProductsArchiverDataModelBindings::generateAxisLengths(const std::shared_ptr<Detector> &detector) {\n+  AxisLengths_type ProductsArchiverDataModelBindings::generateAxisLengths(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) {\n     validateDetector(detector);\n \n     auto naxis = bas::dtd::listOfInteger4(0, 0);\n@@ -320,12 +321,13 @@ namespace LE1_NISP_ProcessScience {\n     using UTC_type = bas::img::spaceObservationDateTime::UTC_type;\n     using MJD_type = bas::img::spaceObservationDateTime::MJD_type;\n \n-    auto dt = m_commonMetadata->getObt()->toDateTime();\n-    auto obt = OBT_type(xml_schema::date_time(dt.year, dt.month, dt.day,\n-                                              dt.hours, dt.minutes, dt.seconds));\n-    auto utc = UTC_type(xml_schema::date_time(dt.year, dt.month, dt.day,\n-                                              dt.hours, dt.minutes, dt.seconds, 0, 0));\n-    auto mjd = MJD_type((float)m_commonMetadata->getObt()->toModifiedJulianDay());\n+    auto dt = m_commonMetadata->getObt();\n+    auto obt = OBT_type(xml_schema::date_time(dt->getYear(), dt->getMonth(), dt->getDay(),\n+                                              dt->getHours(), dt->getMinutes(), dt->getSeconds() + dt->getFineTimeMicroSeconds() * 1E-6));\n+    auto utc = UTC_type(xml_schema::date_time(dt->getYear(), dt->getMonth(), dt->getDay(),\n+                                              dt->getHours(), dt->getMinutes(), dt->getSeconds() + dt->getFineTimeMicroSeconds() * 1E-6,\n+                                              0, 0));\n+    auto mjd = MJD_type((float)m_commonMetadata->getObt()->getModifiedJulianDay());\n \n     return {obt, utc, mjd};\n   }\n@@ -366,7 +368,7 @@ namespace LE1_NISP_ProcessScience {\n \n     auto maccValues = MACCValues_type(m_commonMetadata->getMaccFramesPerGroup(), \n                                       m_commonMetadata->getMaccGroups(),\n-                                      m_commonMetadata->getMaccDropedFrames());\n+                                      m_commonMetadata->getMaccDroppedFrames());\n \n     return {m_commonMetadata->getReadoutMode(),\n             maccValues,\n@@ -458,13 +460,13 @@ namespace LE1_NISP_ProcessScience {\n     dpd::le1::nisprawframe::DpdNispRawFrame(outputStream, dataProduct);\n   }\n \n-  std::shared_ptr<Detector> ProductsArchiverDataModelBindings::getFirstDetector() {\n+  std::shared_ptr<LE1_NISP_Entities::Detector> ProductsArchiverDataModelBindings::getFirstDetector() {\n     auto detIter = m_exposure->createDetectorIterator();\n     detIter->first();\n     return detIter->getNext();\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/ProductsWriter.cpp": [
                        [
                            "@@ -21,18 +21,21 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/ProductsWriter.h\"\n-#include \"LE1_NISP_ProcessScience/Utils.h\"\n+#include \"LE1_NISP_Interactors/ProductsWriter.h\"\n+#include \"LE1_NISP_Entities/Utils.h\"\n+#include \"LE1_NISP_Interactors/Exception.h\"\n #include \"ElementsKernel/Logging.h\"\n \n+using namespace LE1_NISP_Entities;\n+\n namespace {\n   Elements::Logging logger = Elements::Logging::getLogger(\"LE1_NISP_Processor\");\n }\n \n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n-  void ProductsWriter::writeProducts(const std::shared_ptr<Exposure> exposure, const std::string &outputPath){\n+  void ProductsWriter::writeProducts(const std::shared_ptr<LE1_NISP_Entities::Exposure> exposure, const std::string &outputPath){\n     validateWriters();\n     validateExposure(exposure);\n     m_scienceFiles.clear();\n@@ -73,7 +76,7 @@ namespace LE1_NISP_ProcessScience {\n                                                              \"EngUncompressedImageWriter is null\");\n   }\n \n-  void ProductsWriter::validateExposure(const std::shared_ptr<Exposure> &exposure) const{\n+  void ProductsWriter::validateExposure(const std::shared_ptr<LE1_NISP_Entities::Exposure> &exposure) const{\n     validatePointer<NullExposureException>(exposure,\n                                            \"ProductsWriter::validateExposure: \"\n                                            \"null Exposure\");\n@@ -85,7 +88,7 @@ namespace LE1_NISP_ProcessScience {\n                                                         \"null ExposureConfiguration\");\n   }\n \n-  void ProductsWriter::writeScienceProducts(const std::shared_ptr<Exposure> exposure, const std::string &outputPath){\n+  void ProductsWriter::writeScienceProducts(const std::shared_ptr<LE1_NISP_Entities::Exposure> exposure, const std::string &outputPath){\n     if(!exposure->getCommonDetectorMetadata()->getExposureConfiguration()->isCalibNonLinearity()){     \n       logger.debug() << \"Writing SCI product...\";\n       m_scienceFiles = m_scienceWriter->write(exposure->createDetectorIterator(), outputPath);\n@@ -94,14 +97,14 @@ namespace LE1_NISP_ProcessScience {\n     }\n   }\n \n-  void ProductsWriter::writeHkProducts(const std::shared_ptr<Exposure> exposure, const std::string &outputPath){\n+  void ProductsWriter::writeHkProducts(const std::shared_ptr<LE1_NISP_Entities::Exposure> exposure, const std::string &outputPath){\n     logger.debug() << \"Writing HK product...\";\n     m_hkFiles = m_hkWriter->write(exposure->createDetectorIterator(), outputPath);\n     logger.info() << \"HK files written at path \\\"\" << outputPath << \"\\\": \";\n     logWrittenFiles(m_hkFiles);\n   }\n   \n-  void ProductsWriter::writeEngProducts(const std::shared_ptr<Exposure> exposure, const std::string &outputPath){\n+  void ProductsWriter::writeEngProducts(const std::shared_ptr<LE1_NISP_Entities::Exposure> exposure, const std::string &outputPath){\n     auto exposureConfig = exposure->getCommonDetectorMetadata()->getExposureConfiguration();\n \n     if(exposureConfig->isEngineeringDebug()){\n@@ -118,7 +121,7 @@ namespace LE1_NISP_ProcessScience {\n     }\n   }\n \n-  void ProductsWriter::writeEng(const std::shared_ptr<DetectorWriter> engWriter, const std::shared_ptr<Exposure> exposure, const std::string &outputPath){\n+  void ProductsWriter::writeEng(const std::shared_ptr<DetectorWriter> engWriter, const std::shared_ptr<LE1_NISP_Entities::Exposure> exposure, const std::string &outputPath){\n     try{\n       m_engFiles = engWriter->write(exposure->createDetectorIterator(), outputPath);\n       logger.info() << \"ENG files written at path \\\"\" << outputPath << \"\\\": \";\n@@ -150,7 +153,7 @@ namespace LE1_NISP_ProcessScience {\n     m_engUncompressedImageWriter = engWriter;\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/RawLinesDecoder.cpp": [
                        [
                            "@@ -21,16 +21,19 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/RawLinesDecoder.h\"\n-#include \"LE1_NISP_ProcessScience/Utils.h\"\n+#include \"LE1_NISP_Interactors/RawLinesDecoder.h\"\n+#include \"LE1_NISP_Entities/Utils.h\"\n+#include \"LE1_NISP_Interactors/Exception.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+using namespace LE1_NISP_Entities;\n+\n+namespace LE1_NISP_Interactors {\n \n   RawLinesDecoder::RawLinesDecoder(){}\n   \n   RawLinesDecoder::~RawLinesDecoder(){}\n \n-  std::shared_ptr<ByteArray> RawLinesDecoder::decode(const std::shared_ptr<Detector> detector) {\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> RawLinesDecoder::decode(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) {\n     validateDetector(detector);\n \n     auto data = detector->getTelemetryDetector()->readBytes(detector->getRawlinesSection()->getOffset(), \n@@ -39,7 +42,7 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n \n-  void RawLinesDecoder::validateDetector(const std::shared_ptr<Detector> &detector) const{\n+  void RawLinesDecoder::validateDetector(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const{\n     validatePointer<NullDetectorException>(detector,\n                                            \"RawLinesDecoder::validateDetector: \"\n                                            \"null Detector\");\n@@ -52,7 +55,7 @@ namespace LE1_NISP_ProcessScience {\n                                                     \"RawLinesDecoder::validateDetector: \"\n                                                     \"null TelemetryDetector\");\n \n-    validatePointer<NullTelemetryConfigurationException>(detector->getTelemetryConfiguration(),\n+    validatePointer<LE1_NISP_Entities::NullTelemetryConfigurationException>(detector->getTelemetryConfiguration(),\n                                                          \"RawLinesDecoder::validateDetector: \"\n                                                          \"null TelemetryConfiguration\");\n \n@@ -61,7 +64,7 @@ namespace LE1_NISP_ProcessScience {\n                                                   \"null RawLinesSection\");\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/TelemetryDecoder.cpp": [
                        [
                            "@@ -21,17 +21,19 @@\n  *\n  */\n \n-#include \"LE1_NISP_ProcessScience/TelemetryDecoder.h\"\n+#include \"LE1_NISP_Interactors/TelemetryDecoder.h\"\n #include \"ElementsKernel/Logging.h\"\n \n+using namespace LE1_NISP_Entities;\n+\n namespace {\n   Elements::Logging logger = Elements::Logging::getLogger(\"LE1_NISP_Processor\");\n }\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n \n-  void TelemetryDecoder::decode(const std::shared_ptr<Detector> detector) {\n+  void TelemetryDecoder::decode(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) {\n     validateDetector(detector);\n \n     logger.info() << \"Decoding detector with ID: \" << detector->getId().getScePos();\n@@ -120,7 +122,7 @@ namespace LE1_NISP_ProcessScience {\n     m_engDecoder = decoder;\n   }\n \n-  void TelemetryDecoder::validateDetector(const std::shared_ptr<Detector> &detector) const{\n+  void TelemetryDecoder::validateDetector(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector) const{\n     validatePointer<NullDetectorException>(detector,\n                                           \"TelemetryDecoder::validateDetector: \"\n                                           \"null Detector\");\n@@ -132,7 +134,7 @@ namespace LE1_NISP_ProcessScience {\n                                                        \"null ExposureConfiguration\");\n   }\n \n-  void TelemetryDecoder::decodeRawlines(const std::shared_ptr<Detector> &detector){\n+  void TelemetryDecoder::decodeRawlines(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector){\n     logger.debug() << \"Decoding Rawlines...\";\n     validateRawlinesDecoder();\n     detector->setRawlines(m_rawlinesDecoder->decode(detector));\n@@ -145,7 +147,7 @@ namespace LE1_NISP_ProcessScience {\n                                                   \"RawLines TelemetrySectionDecoder is null\");\n   }\n \n-  void TelemetryDecoder::decodeScience(const std::shared_ptr<Detector> &detector){\n+  void TelemetryDecoder::decodeScience(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector){\n     logger.debug() << \"Decoding Science...\";\n     validateScienceDecoder();\n     detector->setScienceData(m_scienceDecoder->decode(detector));\n@@ -158,7 +160,7 @@ namespace LE1_NISP_ProcessScience {\n                                                 \"Science TelemetrySectionDecoder is null\");\n   }\n \n-  void TelemetryDecoder::decodeQualitySpectro(const std::shared_ptr<Detector> &detector){\n+  void TelemetryDecoder::decodeQualitySpectro(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector){\n     logger.debug() << \"Decoding QualitySpectro...\";\n     validateQualitySpectroDecoder();\n     detector->setQualityData(m_qualitySpectroDecoder->decode(detector));\n@@ -171,7 +173,7 @@ namespace LE1_NISP_ProcessScience {\n                                                             \"QualityData Spectro TelemetrySectionDecoder is null\");\n   }\n \n-  void TelemetryDecoder::decodeQualityPhoto(const std::shared_ptr<Detector> &detector){\n+  void TelemetryDecoder::decodeQualityPhoto(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector){\n     logger.debug() << \"Decoding QualityPhoto...\";\n     validateQualityPhotoDecoder();\n     detector->setQualityData(m_qualityPhotoDecoder->decode(detector));\n@@ -184,7 +186,7 @@ namespace LE1_NISP_ProcessScience {\n                                                           \"QualityData Photo TelemetrySectionDecoder is null\");\n   }\n \n-  void TelemetryDecoder::decodeAnalogTm(const std::shared_ptr<Detector> &detector){\n+  void TelemetryDecoder::decodeAnalogTm(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector){\n     logger.debug() << \"Decoding AnalogTm...\";\n     validateAnalogTelemetryDecoder();\n     detector->setAnalogTelemetry(m_analogTmDecoder->decode(detector));\n@@ -197,7 +199,7 @@ namespace LE1_NISP_ProcessScience {\n                                                         \"AnalogTM TelemetrySectionDecoder is null\");\n   }\n \n-  void TelemetryDecoder::decodeErrors(const std::shared_ptr<Detector> &detector){\n+  void TelemetryDecoder::decodeErrors(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector){\n     logger.debug() << \"Decoding Errors...\";\n     validateErrorsDecoder();\n     detector->setErrorsData(m_errorsDecoder->decode(detector));\n@@ -210,7 +212,7 @@ namespace LE1_NISP_ProcessScience {\n                                                 \"Errors TelemetrySectionDecoder is null\");\n   }\n \n-  void TelemetryDecoder::decodeHistory(const std::shared_ptr<Detector> &detector){\n+  void TelemetryDecoder::decodeHistory(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector){\n     logger.debug() << \"Decoding History...\";\n     validateHistoryDecoder();\n     detector->setHistoryData(m_historyDecoder->decode(detector));\n@@ -223,7 +225,7 @@ namespace LE1_NISP_ProcessScience {\n                                                 \"History TelemetrySectionDecoder is null\");    \n   }\n \n-  void TelemetryDecoder::decodeEng(const std::shared_ptr<Detector> &detector){\n+  void TelemetryDecoder::decodeEng(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector){\n     logger.debug() << \"Decoding Engineering...\";\n     validateEngDecoder();\n     detector->setEngData(m_engDecoder->decode(detector));\n@@ -236,7 +238,7 @@ namespace LE1_NISP_ProcessScience {\n                                              \"Engineering TelemetrySectionDecoder is null\");    \n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/src/lib/TelemetryDetectorInitializer.cpp": [
                        [
                            "@@ -23,17 +23,17 @@\n \n #include <cmath>\n \n-#include \"LE1_NISP_ProcessScience/TelemetryDetectorInitializer.h\"\n-#include \"LE1_NISP_ProcessScience/TelemetryDetector.h\"\n+#include \"LE1_NISP_Interactors/TelemetryDetectorInitializer.h\"\n+#include \"LE1_NISP_Entities/TelemetryDetector.h\"\n #include \"ElementsKernel/Logging.h\"\n \n namespace {\n   Elements::Logging logger = Elements::Logging::getLogger(\"LE1_NISP_Processor\");\n }\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n-TelemetryDetectorInitializer::TelemetryDetectorInitializer(const std::shared_ptr<TelemetryConfiguration> configuration, const std::shared_ptr<DetectorCreator> detectorCreator, const std::shared_ptr<TelemetryFileCreator> tmFileCreator)\n+TelemetryDetectorInitializer::TelemetryDetectorInitializer(const std::shared_ptr<LE1_NISP_Entities::TelemetryConfiguration> configuration, const std::shared_ptr<LE1_NISP_Entities::DetectorCreator> detectorCreator, const std::shared_ptr<LE1_NISP_Entities::TelemetryFileCreator> tmFileCreator)\n : m_telemetryConfig(configuration),\n   m_detCreator(detectorCreator),\n   m_telemetryFileCreator(tmFileCreator),\n@@ -44,19 +44,19 @@ TelemetryDetectorInitializer::TelemetryDetectorInitializer(const std::shared_ptr\n \n TelemetryDetectorInitializer::~TelemetryDetectorInitializer() {}\n \n-void TelemetryDetectorInitializer::setTelemetryConfiguration(const std::shared_ptr<TelemetryConfiguration> tmConfig) {\n+void TelemetryDetectorInitializer::setTelemetryConfiguration(const std::shared_ptr<LE1_NISP_Entities::TelemetryConfiguration> tmConfig) {\n     m_telemetryConfig = tmConfig;\n }\n \n-void TelemetryDetectorInitializer::setDetectorCreator(const std::shared_ptr<DetectorCreator> detectorCreator){\n+void TelemetryDetectorInitializer::setDetectorCreator(const std::shared_ptr<LE1_NISP_Entities::DetectorCreator> detectorCreator){\n   m_detCreator = detectorCreator;\n }\n \n-void TelemetryDetectorInitializer::setTelemetryFileCreator(const std::shared_ptr<TelemetryFileCreator> tmFileCreator){\n+void TelemetryDetectorInitializer::setTelemetryFileCreator(const std::shared_ptr<LE1_NISP_Entities::TelemetryFileCreator> tmFileCreator){\n   m_telemetryFileCreator = tmFileCreator;\n }\n \n-std::vector<std::shared_ptr<Detector>> TelemetryDetectorInitializer::initDetectors(const std::string &dpuFile){\n+std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> TelemetryDetectorInitializer::initDetectors(const std::string &dpuFile){\n     clearContext();\n     validateTelemetryFileCreator();\n     openTelemetryFile(dpuFile);\n@@ -84,7 +84,7 @@ std::vector<std::shared_ptr<Detector>> TelemetryDetectorInitializer::initDetecto\n                            + detector->getTail4Section()->getOffset() \n                            + detector->getTail4Section()->getSize() \n                            + detector->getTail4Section()->getPadding() - 1;\n-      detector->setTelemetryDetector(std::make_shared<TelemetryDetector>(m_telemetryFile,  firstOffset, lastOffset));\n+      detector->setTelemetryDetector(std::make_shared<LE1_NISP_Entities::TelemetryDetector>(m_telemetryFile,  firstOffset, lastOffset));\n       detector->setTelemetryConfiguration(m_telemetryConfig);\n       m_detectorList.push_back(detector);\n     }\n@@ -109,7 +109,7 @@ std::vector<std::shared_ptr<Detector>> TelemetryDetectorInitializer::initDetecto\n \n   void TelemetryDetectorInitializer::validateTelemetryConfig() const{\n     if(m_telemetryConfig == nullptr)\n-      throw NullTelemetryConfigurationException(\"TelemetryDetectorInitializer::validateTelemetryConfig: \"\n+      throw LE1_NISP_Entities::NullTelemetryConfigurationException(\"TelemetryDetectorInitializer::validateTelemetryConfig: \"\n                                                 \"null TelemetryConfiguration\");\n   }\n   \n@@ -135,8 +135,8 @@ std::vector<std::shared_ptr<Detector>> TelemetryDetectorInitializer::initDetecto\n     return bswap_32(valueToBeSwapped);\n   }\n \n-  DetectorHeader TelemetryDetectorInitializer::readHeader(){\n-    DetectorHeader header;\n+  LE1_NISP_Entities::DetectorHeader TelemetryDetectorInitializer::readHeader(){\n+    LE1_NISP_Entities::DetectorHeader header;\n     header.acquisitionCounter = readNextParam<uint8_t>(\"AcquisitionCounter\", 1);\n     header.framePerGroup      = readNextParam<uint8_t>(\"FramePerGroup\", 1);\n     header.groupCounter       = readNextParam<uint8_t>(\"GroupCounter\", 1);\n@@ -164,7 +164,7 @@ std::vector<std::shared_ptr<Detector>> TelemetryDetectorInitializer::initDetecto\n     return  value & mask;\n   }\n \n-  void TelemetryDetectorInitializer::validateHeader(const DetectorHeader &header) const{\n+  void TelemetryDetectorInitializer::validateHeader(const LE1_NISP_Entities::DetectorHeader &header) const{\n     validateRawLinesDataSize(header.rawlinesSize);\n     validateScienceDataSize(header.scienceDataCompressedSize);\n     validateQualityFactorDataSize(header.qualityDataCompressedSize);\n@@ -240,13 +240,13 @@ std::vector<std::shared_ptr<Detector>> TelemetryDetectorInitializer::initDetecto\n                                             \"ChunksRequired = \" + std::to_string(chunksCnt));\n   }\n \n-  void TelemetryDetectorInitializer::initTelemetrySections(const std::shared_ptr<Detector> &detector){\n+  void TelemetryDetectorInitializer::initTelemetrySections(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector){\n       auto detectorHeader = detector->getHeader();\n \n       detector->setSyncSection(createSyncSection());\n       logger.debug() << \"section SYNC: \" << *detector->getSyncSection();\n \n-      std::shared_ptr<TelemetrySection> section;\n+      std::shared_ptr<LE1_NISP_Entities::TelemetrySection> section;\n       size_t offset  = m_telemetryFile->getCurrentPos() - m_absoluteSyncPos;\n       size_t size    = m_telemetryConfig->getDigitalTelemetrySize();\n       detector->setDigitalTmSection(createSection(offset, size, computePadding(size)));\n@@ -302,28 +302,28 @@ std::vector<std::shared_ptr<Detector>> TelemetryDetectorInitializer::initDetecto\n       logger.debug() << \"section TAIL4: \" << *detector->getTail4Section();\n   }\n \n-  std::shared_ptr<TelemetrySection> TelemetryDetectorInitializer::createSyncSection() const{\n+  std::shared_ptr<LE1_NISP_Entities::TelemetrySection> TelemetryDetectorInitializer::createSyncSection() const{\n     auto expectedSyncVal = m_telemetryConfig->getSync();\n     size_t syncSize = sizeof(expectedSyncVal);\n     return createSection(0, syncSize, computePadding(syncSize));\n   }\n \n-  std::shared_ptr<TelemetrySection> TelemetryDetectorInitializer::createSection(const size_t offset, const size_t size, const size_t padding) const {\n-    return std::make_shared<TelemetrySection>(offset, size, padding);\n+  std::shared_ptr<LE1_NISP_Entities::TelemetrySection> TelemetryDetectorInitializer::createSection(const size_t offset, const size_t size, const size_t padding) const {\n+    return std::make_shared<LE1_NISP_Entities::TelemetrySection>(offset, size, padding);\n   }\n \n-  std::shared_ptr<TelemetrySection> TelemetryDetectorInitializer::calculateSection(const std::shared_ptr<TelemetrySection> &prevSection, const size_t sectionSize){\n+  std::shared_ptr<LE1_NISP_Entities::TelemetrySection> TelemetryDetectorInitializer::calculateSection(const std::shared_ptr<LE1_NISP_Entities::TelemetrySection> &prevSection, const size_t sectionSize){\n       size_t offset  = prevSection->getOffset() + prevSection->getSize() + prevSection->getPadding();\n       return createSection(offset, sectionSize, computePadding(sectionSize));\n   }\n \n-  std::vector<std::shared_ptr<TelemetrySection>> TelemetryDetectorInitializer::calculateSections(\n-    const std::shared_ptr<TelemetrySection> &prevSection, const size_t dataSize)\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::TelemetrySection>> TelemetryDetectorInitializer::calculateSections(\n+    const std::shared_ptr<LE1_NISP_Entities::TelemetrySection> &prevSection, const size_t dataSize)\n   {\n     size_t dataOffset     = prevSection->getOffset() + prevSection->getSize() + prevSection->getPadding();\n     size_t memoryBuffSize = m_telemetryConfig->getMemoryBufferMaxSize();\n \n-    std::vector<std::shared_ptr<TelemetrySection>> sections;\n+    std::vector<std::shared_ptr<LE1_NISP_Entities::TelemetrySection>> sections;\n \n     if(hasMultipleChunks(dataSize, memoryBuffSize)){\n \n@@ -381,30 +381,30 @@ std::vector<std::shared_ptr<Detector>> TelemetryDetectorInitializer::initDetecto\n     return ((size % 4) > 0) ? 4 - (size % 4) : 0;\n   }\n \n-  void TelemetryDetectorInitializer::validateDetectorTmStructure(const std::shared_ptr<Detector> &detector){\n+  void TelemetryDetectorInitializer::validateDetectorTmStructure(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector){\n       checkTail1(detector);\n       checkTail2(detector);\n       checkTail3(detector);\n       checkTail4(detector);\n   }\n \n-  void TelemetryDetectorInitializer::checkTail1(const std::shared_ptr<Detector> &detector){\n+  void TelemetryDetectorInitializer::checkTail1(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector){\n     checkTail<Tail1NotFoundException>(detector->getTail1Section(), m_telemetryConfig->getTail1(), \"TAIL1\");\n   }\n \n-  void TelemetryDetectorInitializer::checkTail2(const std::shared_ptr<Detector> &detector){\n+  void TelemetryDetectorInitializer::checkTail2(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector){\n     checkTail<Tail2NotFoundException>(detector->getTail2Section(), m_telemetryConfig->getTail2(), \"TAIL2\");\n   }\n \n-  void TelemetryDetectorInitializer::checkTail3(const std::shared_ptr<Detector> &detector){\n+  void TelemetryDetectorInitializer::checkTail3(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector){\n     checkTail<Tail3NotFoundException>(detector->getTail3Section(), m_telemetryConfig->getTail3(), \"TAIL3\");\n   }\n \n-  void TelemetryDetectorInitializer::checkTail4(const std::shared_ptr<Detector> &detector){\n+  void TelemetryDetectorInitializer::checkTail4(const std::shared_ptr<LE1_NISP_Entities::Detector> &detector){\n     checkTail<Tail4NotFoundException>(detector->getTail4Section(), m_telemetryConfig->getTail4(), \"TAIL4\");\n   }\n \n-}  // namespace LE1_NISP_ProcessScience\n+}  // namespace LE1_NISP_Interactors\n \n \n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/include/DateTimeManagerMock.h": [
                        [
                            "@@ -0,0 +1,149 @@\n+\n+ /**\n+ * @file LE1_NISP_Interactors/tests/include/DateTimeManagerMock.h\n+ * @date 11/24/20\n+ * @author user\n+ *\n+ * @copyright (C) 2012-2020 Euclid Science Ground Segment\n+ *\n+ * This library is free software; you can redistribute it and/or modify it under\n+ * the terms of the GNU Lesser General Public License as published by the Free\n+ * Software Foundation; either version 3.0 of the License, or (at your option)\n+ * any later version.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+ * details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this library; if not, write to the Free Software Foundation, Inc.,\n+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+ *\n+ */\n+\n+#ifndef _LE1_NISP_INTERACTORS_DATETIMEMANAGERMOCK_H\n+#define _LE1_NISP_INTERACTORS_DATETIMEMANAGERMOCK_H\n+\n+#include \"LE1_NISP_Entities/DateTimeManager.h\"\n+\n+namespace LE1_NISP_Interactors {\n+    \n+class DateTimeManagerDummy: public LE1_NISP_Entities::DateTimeManager{\n+public:\n+  DateTimeManagerDummy(){}\n+  virtual ~DateTimeManagerDummy(){}\n+\n+  inline std::shared_ptr<LE1_NISP_Entities::DateTime> getCurrentDateTime() const override { return nullptr; }\n+\n+  inline std::shared_ptr<LE1_NISP_Entities::DateTime> createDateTime(int year, unsigned short month, unsigned short day,\n+                                                                     unsigned short hours, unsigned short minutes,\n+                                                                     double seconds) const override {\n+    (void) year;\n+    (void) month;\n+    (void) day;\n+    (void) hours;\n+    (void) minutes;\n+    (void) seconds;\n+    return nullptr;\n+  }\n+  inline std::shared_ptr<LE1_NISP_Entities::OnBoardTime> createOnBoardTime(uint32_t coarseTime, uint16_t fineTime, int epochYear, unsigned short epochMonth, unsigned short epochDay) const {\n+    (void) coarseTime;\n+    (void) fineTime;\n+    (void) epochYear;\n+    (void) epochMonth;\n+    (void) epochDay;\n+    return nullptr;\n+  }\n+\n+};\n+\n+class DateTimeDummy: public LE1_NISP_Entities::DateTime{\n+public:\n+\n+  inline int getYear() const override { return 0; }\n+  inline unsigned short getMonth() const override { return 0; }\n+  inline unsigned short getDay() const override { return 0; }\n+  inline unsigned short getHours() const override { return 0; }\n+  inline unsigned short getMinutes() const override { return 0; }\n+  inline unsigned short getSeconds() const override { return 0; }\n+  inline double getTotalSeconds() const override { return 0; }\n+  inline double getTotalMicroSeconds() const override { return 0; }\n+\n+  inline std::string getIsoString() const override { return \"\"; }\n+  inline std::string getIsoExtendedString() const override { return \"\"; }\n+\n+  inline double getModifiedJulianDay() const override { return 0; }\n+};\n+\n+class DateTimeFake: public LE1_NISP_Entities::DateTime{\n+public:\n+  int m_year;\n+  unsigned short m_month;\n+  unsigned short m_day;\n+  unsigned short m_hours;\n+  unsigned short m_minutes;\n+  unsigned short m_seconds;\n+  double m_totalSeconds;\n+  double m_totalMicroSeconds;\n+  std::string m_isoString;\n+  std::string m_isoExtendedString;\n+  double m_modifiedJulianDay;\n+\n+\n+  DateTimeFake(int year, unsigned short month, unsigned short day,\n+               unsigned short hours, unsigned short minutes, unsigned short seconds,\n+               double totalSeconds, double totalMicroSeconds,\n+               std::string isoString, std::string isoExtendedString,\n+               double modifiedJulianDay) :\n+      m_year(year), m_month(month), m_day(day),\n+      m_hours(hours), m_minutes(minutes), m_seconds(seconds),\n+      m_totalSeconds(totalSeconds), m_totalMicroSeconds(totalMicroSeconds),\n+      m_isoString(isoString), m_isoExtendedString(isoExtendedString),\n+      m_modifiedJulianDay(modifiedJulianDay) {}\n+  ~DateTimeFake() override = default;\n+\n+  inline int getYear() const override { return m_year; }\n+  inline unsigned short getMonth() const override { return m_month; }\n+  inline unsigned short getDay() const override { return m_day; }\n+  inline unsigned short getHours() const override { return m_hours; }\n+  inline unsigned short getMinutes() const override { return m_minutes; }\n+  inline unsigned short getSeconds() const override { return m_seconds; }\n+  inline double getTotalSeconds() const override { return m_totalSeconds; }\n+  inline double getTotalMicroSeconds() const override { return m_totalMicroSeconds; }\n+\n+  inline std::string getIsoString() const override { return m_isoString; }\n+  inline std::string getIsoExtendedString() const override { return m_isoExtendedString; }\n+\n+  inline double getModifiedJulianDay() const override { return m_modifiedJulianDay; }\n+\n+};\n+\n+class DateTimeManagerStubCustomReturns: public DateTimeManagerDummy{\n+  public:\n+  DateTimeManagerStubCustomReturns() = default;\n+  virtual ~DateTimeManagerStubCustomReturns() = default;\n+\n+  inline void setDateTime(const std::shared_ptr<LE1_NISP_Entities::DateTime> dateTime) { m_dateTime = dateTime; }\n+\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::DateTime> getCurrentDateTime() const override { return m_dateTime; }\n+  inline std::shared_ptr<LE1_NISP_Entities::DateTime> createDateTime(int year, unsigned short month, unsigned short day,\n+                                                                     unsigned short hours, unsigned short minutes,\n+                                                                     double seconds) const override {\n+    (void) year;\n+    (void) month;\n+    (void) day;\n+    (void) hours;\n+    (void) minutes;\n+    (void) seconds;\n+    return m_dateTime;\n+  }\n+\n+private:\n+  std::shared_ptr<LE1_NISP_Entities::DateTime> m_dateTime;\n+\n+};\n+  \n+}// namespace LE1_NISP_Interactors\n+\n+#endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/include/DecompressorMock.h": [
                        [
                            "@@ -1,6 +1,6 @@\n \n  /**\n- * @file LE1_NISP_ProcessScience/tests/include/DecompressorMock.h\n+ * @file LE1_NISP_Interactors/tests/include/DecompressorMock.h\n  * @date 02/05/21\n  * @author user\n  *\n@@ -22,21 +22,21 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DECOMPRESSORMOCK_H\n-#define _LE1_NISP_PROCESSSCIENCE_DECOMPRESSORMOCK_H\n+#ifndef _LE1_NISP_INTERACTORS_DECOMPRESSORMOCK_H\n+#define _LE1_NISP_INTERACTORS_DECOMPRESSORMOCK_H\n \n-#include \"LE1_NISP_ProcessScience//Decompressor.h\"\n-#include \"LE1_NISP_ProcessScience//tests/include/ByteArrayMock.h\"\n+#include \"LE1_NISP_Interactors/Decompressor.h\"\n+#include \"LE1_NISP_Entities/tests/include/ByteArrayMock.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n class DecompressorDummy : public Decompressor{\n public:\n   virtual ~DecompressorDummy() = default;\n \n-  inline std::shared_ptr<ByteArray> decompress(const std::shared_ptr<ByteArray> bytes,\n+  inline std::shared_ptr<LE1_NISP_Entities::ByteArray> decompress(const std::shared_ptr<LE1_NISP_Entities::ByteArray> bytes,\n                                                        const size_t maxOutputSize,\n-                                                       const CompressionParams &compressionParams) override {\n+                                                       const LE1_NISP_Entities::CompressionParams &compressionParams) override {\n     (void) bytes;\n     (void) compressionParams;\n     (void) maxOutputSize;\n@@ -49,11 +49,11 @@ class DecompressorCustomReturn : public Decompressor{\n public:\n   virtual ~DecompressorCustomReturn() = default;\n \n-  inline void setBytesToReturn(const std::shared_ptr<ByteArray> bytes) { m_bytes = bytes; }\n+  inline void setBytesToReturn(const std::shared_ptr<LE1_NISP_Entities::ByteArray> bytes) { m_bytes = bytes; }\n \n-  inline std::shared_ptr<ByteArray> decompress(const std::shared_ptr<ByteArray> bytes,\n+  inline std::shared_ptr<LE1_NISP_Entities::ByteArray> decompress(const std::shared_ptr<LE1_NISP_Entities::ByteArray> bytes,\n                                                        const size_t maxOutputSize,\n-                                                       const CompressionParams &compressionParams) override {\n+                                                       const LE1_NISP_Entities::CompressionParams &compressionParams) override {\n     (void) bytes;\n     (void) compressionParams;\n     (void) maxOutputSize;\n@@ -61,7 +61,7 @@ public:\n   } \n \n private:\n-  std::shared_ptr<ByteArray> m_bytes;\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> m_bytes;\n };\n \n class DecompressorSpyReturnInput : public Decompressor{\n@@ -69,17 +69,17 @@ public:\n   DecompressorSpyReturnInput() = default;\n   virtual ~DecompressorSpyReturnInput() = default;\n \n-  inline std::shared_ptr<ByteArray> decompress(const std::shared_ptr<ByteArray> bytes,\n+  inline std::shared_ptr<LE1_NISP_Entities::ByteArray> decompress(const std::shared_ptr<LE1_NISP_Entities::ByteArray> bytes,\n                                                        const size_t maxOutputSize,\n-                                                       const CompressionParams &compressionParams) override {\n+                                                       const LE1_NISP_Entities::CompressionParams &compressionParams) override {\n     bytesUsed = bytes;\n     comprParamsUsed = compressionParams;\n     maxOutputSizeUsed = maxOutputSize;\n     return bytes->clone();\n   }\n \n-  CompressionParams comprParamsUsed;\n-  std::shared_ptr<ByteArray> bytesUsed;\n+  LE1_NISP_Entities::CompressionParams comprParamsUsed;\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> bytesUsed;\n   size_t maxOutputSizeUsed;\n };\n \n@@ -88,9 +88,9 @@ public:\n   DecompressorStubReturnInput() = default;\n   ~DecompressorStubReturnInput() override = default;\n   \n-  inline std::shared_ptr<ByteArray> decompress(const std::shared_ptr<ByteArray> bytes,\n+  inline std::shared_ptr<LE1_NISP_Entities::ByteArray> decompress(const std::shared_ptr<LE1_NISP_Entities::ByteArray> bytes,\n                                                        const size_t maxOutputSize,\n-                                                       const CompressionParams &compressionParams) override {\n+                                                       const LE1_NISP_Entities::CompressionParams &compressionParams) override {\n     (void) compressionParams;\n     (void) maxOutputSize;\n     return bytes->clone();\n@@ -104,16 +104,16 @@ public:\n   DecompressorFake(): decompressedDataSize(1) {}\n   ~DecompressorFake() override = default;\n \n-  inline std::shared_ptr<ByteArray> decompress(const std::shared_ptr<ByteArray> bytes,\n+  inline std::shared_ptr<LE1_NISP_Entities::ByteArray> decompress(const std::shared_ptr<LE1_NISP_Entities::ByteArray> bytes,\n                                                        const size_t maxOutputSize,\n-                                                       const CompressionParams &compressionParams) override {\n+                                                       const LE1_NISP_Entities::CompressionParams &compressionParams) override {\n     (void) compressionParams;\n     (void) maxOutputSize;\n     (void) bytes;\n-    return std::make_shared<ByteArrayRandom>(decompressedDataSize);\n+    return std::make_shared<LE1_NISP_Entities::ByteArrayRandom>(decompressedDataSize);\n   }\n };\n \n-}// namespace LE1_NISP_ProcessScience\n+}// namespace LE1_NISP_Interactors\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/include/DetectorCollectorMock.h": [
                        [
                            "@@ -1,6 +1,6 @@\n \n  /**\n- * @file LE1_NISP_ProcessScience/tests/include/DetectorCollectorMock.h\n+ * @file LE1_NISP_Interactors/tests/include/DetectorCollectorMock.h\n  * @date 02/11/21\n  * @author user\n  *\n@@ -22,18 +22,18 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORCOLLECTORMOCK_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORCOLLECTORMOCK_H\n+#ifndef _LE1_NISP_INTERACTORS_DETECTORCOLLECTORMOCK_H\n+#define _LE1_NISP_INTERACTORS_DETECTORCOLLECTORMOCK_H\n \n-#include \"LE1_NISP_ProcessScience//DetectorCollector.h\"\n+#include \"LE1_NISP_Interactors/DetectorCollector.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n class DetectorCollectorDummy: public DetectorCollector{\n public:\n   virtual ~DetectorCollectorDummy() = default;\n \n-  inline virtual std::map<ExposureId, std::shared_ptr<Exposure>> collectPerExposure(const std::vector<std::shared_ptr<Detector>> &detectorList) override{\n+  inline virtual std::map<LE1_NISP_Entities::ExposureId, std::shared_ptr<LE1_NISP_Entities::Exposure>> collectPerExposure(const std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> &detectorList) override{\n     (void) detectorList;\n     return {};\n   }\n@@ -41,19 +41,19 @@ public:\n \n class DetectorCollectorStubCustomRet: public DetectorCollector{\n public: \n-  DetectorCollectorStubCustomRet(const std::map<ExposureId, std::shared_ptr<Exposure>> &exposures)\n+  DetectorCollectorStubCustomRet(const std::map<LE1_NISP_Entities::ExposureId, std::shared_ptr<LE1_NISP_Entities::Exposure>> &exposures)\n   : m_exposures(exposures){}\n   virtual ~DetectorCollectorStubCustomRet() = default;\n \n-  inline virtual std::map<ExposureId, std::shared_ptr<Exposure>> collectPerExposure(const std::vector<std::shared_ptr<Detector>> &detectorList) override{\n+  inline virtual std::map<LE1_NISP_Entities::ExposureId, std::shared_ptr<LE1_NISP_Entities::Exposure>> collectPerExposure(const std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> &detectorList) override{\n     (void) detectorList;\n     return m_exposures;\n   }\n \n private:\n-  std::map<ExposureId, std::shared_ptr<Exposure>> m_exposures;\n+  std::map<LE1_NISP_Entities::ExposureId, std::shared_ptr<LE1_NISP_Entities::Exposure>> m_exposures;\n };\n \n-}// namespace LE1_NISP_ProcessScience\n+}// namespace LE1_NISP_Interactors\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/include/DetectorIteratorMock.h": [
                        [
                            "@@ -1,6 +1,6 @@\n \n  /**\n- * @file LE1_NISP_ProcessScience/tests/include/DetectorIteratorMock.h\n+ * @file LE1_NISP_Interactors/tests/include/DetectorIteratorMock.h\n  * @date 01/28/21\n  * @author user\n  *\n@@ -22,14 +22,14 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORITERATORMOCK_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORITERATORMOCK_H\n+#ifndef _LE1_NISP_INTERACTORS_DETECTORITERATORMOCK_H\n+#define _LE1_NISP_INTERACTORS_DETECTORITERATORMOCK_H\n \n-#include \"LE1_NISP_ProcessScience//DetectorIterator.h\"\n+#include \"LE1_NISP_Entities/DetectorIterator.h\"\n \n-namespace LE1_NISP_ProcessScience{\n+namespace LE1_NISP_Interactors{\n   \n-class DetectorIteratorDummy: public DetectorIterator{\n+class DetectorIteratorDummy: public LE1_NISP_Entities::DetectorIterator{\n public:\n   DetectorIteratorDummy(){}\n   virtual ~DetectorIteratorDummy() = default;\n@@ -40,15 +40,15 @@ public:\n   \n   virtual void first() override {}\n \n-  virtual std::shared_ptr<Detector> getNext() override{\n+  virtual std::shared_ptr<LE1_NISP_Entities::Detector> getNext() override{\n     return nullptr;\n   }\n \n };\n \n-class DetIterStubCustomDetector: public DetectorIterator{\n+class DetIterStubCustomDetector: public LE1_NISP_Entities::DetectorIterator{\n public:\n-  DetIterStubCustomDetector(std::shared_ptr<Detector> det, const unsigned int numOfIterations = 1) \n+  DetIterStubCustomDetector(std::shared_ptr<LE1_NISP_Entities::Detector> det, const unsigned int numOfIterations = 1)\n     : m_det(det), m_maxIterations(numOfIterations), m_cntIterations(0){}\n   virtual ~DetIterStubCustomDetector() = default;\n \n@@ -60,7 +60,7 @@ public:\n     m_cntIterations = 0;\n   }\n \n-  virtual std::shared_ptr<Detector> getNext(){\n+  virtual std::shared_ptr<LE1_NISP_Entities::Detector> getNext(){\n     if(!hasNext())\n       return nullptr;\n     m_cntIterations++;\n@@ -72,14 +72,14 @@ public:\n   }\n \n private:\n-  std::shared_ptr<Detector> m_det;\n+  std::shared_ptr<LE1_NISP_Entities::Detector> m_det;\n   unsigned int m_maxIterations;\n   unsigned int m_cntIterations;\n };\n \n-class DetIterStubDetVector: public DetectorIterator{\n+class DetIterStubDetVector: public LE1_NISP_Entities::DetectorIterator{\n public:\n-  DetIterStubDetVector(const std::vector<std::shared_ptr<Detector>> &dets)\n+  DetIterStubDetVector(const std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> &dets)\n     : m_detVec(dets), m_getNextCalls(0), m_itr(0){}\n   virtual ~DetIterStubDetVector() = default;\n \n@@ -90,7 +90,7 @@ public:\n     m_itr = 0;\n   }\n \n-  virtual std::shared_ptr<Detector> getNext(){\n+  virtual std::shared_ptr<LE1_NISP_Entities::Detector> getNext(){\n     if(!hasNext())\n       return nullptr;\n     m_getNextCalls++;\n@@ -98,11 +98,11 @@ public:\n   }\n \n private:\n-  std::vector<std::shared_ptr<Detector>> m_detVec;\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> m_detVec;\n   unsigned int m_getNextCalls;\n   unsigned int m_itr;\n };\n \n-}// namespace LE1_NISP_ProcessScience\n+}// namespace LE1_NISP_Interactors\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/include/DetectorMetadataParserMock.h": [
                        [
                            "@@ -1,6 +1,6 @@\n \n  /**\n- * @file LE1_NISP_ProcessScience/tests/include/DetectorMetadataParserMock.h\n+ * @file LE1_NISP_Interactors/tests/include/DetectorMetadataParserMock.h\n  * @date 02/11/21\n  * @author user\n  *\n@@ -22,18 +22,18 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORMETADATAPARSERMOCK_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORMETADATAPARSERMOCK_H\n+#ifndef _LE1_NISP_INTERACTORS_DETECTORMETADATAPARSERMOCK_H\n+#define _LE1_NISP_INTERACTORS_DETECTORMETADATAPARSERMOCK_H\n \n-#include \"LE1_NISP_ProcessScience//DetectorMetadataParser.h\"\n+#include \"LE1_NISP_Interactors/DetectorMetadataParser.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n class DetectorMetadataParserDummy: public DetectorMetadataParser{\n public:\n   virtual ~DetectorMetadataParserDummy() = default;\n \n-  inline virtual std::shared_ptr<DetectorMetadata> parseMetadata(const std::shared_ptr<TelemetryDetectorInterface> telemetryDetector) override{\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> parseMetadata(const std::shared_ptr<LE1_NISP_Entities::TelemetryDetectorInterface> telemetryDetector) override{\n     (void) telemetryDetector;\n     return nullptr;\n   }\n@@ -41,19 +41,19 @@ public:\n \n class DetMetadataParserStubCustomRet: public DetectorMetadataParser{\n public:\n-  DetMetadataParserStubCustomRet(const std::shared_ptr<DetectorMetadata> metadata) \n+  DetMetadataParserStubCustomRet(const std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> metadata)\n   : m_metadata(metadata){}\n   virtual ~DetMetadataParserStubCustomRet() = default;\n \n-  inline virtual std::shared_ptr<DetectorMetadata> parseMetadata(const std::shared_ptr<TelemetryDetectorInterface> telemetryDetector) override{\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> parseMetadata(const std::shared_ptr<LE1_NISP_Entities::TelemetryDetectorInterface> telemetryDetector) override{\n     (void) telemetryDetector;\n     return m_metadata;\n   }\n \n private:\n-  std::shared_ptr<DetectorMetadata> m_metadata;\n+  std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> m_metadata;\n };\n \n-}// namespace LE1_NISP_ProcessScience\n+}// namespace LE1_NISP_Interactors\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/include/DetectorWriterMock.h": [
                        [
                            "@@ -1,6 +1,6 @@\n \n  /**\n- * @file LE1_NISP_ProcessScience/tests/include/DetectorWriterMock.h\n+ * @file LE1_NISP_Interactors/tests/include/DetectorWriterMock.h\n  * @date 02/12/21\n  * @author user\n  *\n@@ -22,18 +22,18 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORWRITERMOCK_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORWRITERMOCK_H\n+#ifndef _LE1_NISP_INTERACTORS_DETECTORWRITERMOCK_H\n+#define _LE1_NISP_INTERACTORS_DETECTORWRITERMOCK_H\n \n-#include \"LE1_NISP_ProcessScience//DetectorWriter.h\"\n+#include \"LE1_NISP_Interactors/DetectorWriter.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n class DetectorWriterDummy: public DetectorWriter{\n public:\n   virtual ~DetectorWriterDummy() = default;\n   \n-  inline virtual std::vector<std::string> write(std::shared_ptr<DetectorIterator> detectorIterator, const std::string &outputPath) override {\n+  inline virtual std::vector<std::string> write(std::shared_ptr<LE1_NISP_Entities::DetectorIterator> detectorIterator, const std::string &outputPath) override {\n     (void) detectorIterator;\n     (void) outputPath;\n     return {};\n@@ -49,7 +49,7 @@ public:\n \n   virtual ~DetectorWriterSpy() = default;\n   \n-  inline virtual std::vector<std::string> write(std::shared_ptr<DetectorIterator> detectorIterator, const std::string &outputPath) override {\n+  inline virtual std::vector<std::string> write(std::shared_ptr<LE1_NISP_Entities::DetectorIterator> detectorIterator, const std::string &outputPath) override {\n     writeCalls++;\n     (void) detectorIterator;\n     (void) outputPath;\n@@ -63,13 +63,13 @@ public:\n \n   virtual ~DetectorWriterReturnFiles() = default;\n   \n-  inline virtual std::vector<std::string> write(std::shared_ptr<DetectorIterator> detectorIterator, const std::string &outputPath) override {\n+  inline virtual std::vector<std::string> write(std::shared_ptr<LE1_NISP_Entities::DetectorIterator> detectorIterator, const std::string &outputPath) override {\n     (void) detectorIterator;\n     (void) outputPath;\n     return writtenFiles;\n   }\n };\n \n-}// namespace LE1_NISP_ProcessScience\n+}// namespace LE1_NISP_Interactors\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/include/DetectorsInitializerMock.h": [
                        [
                            "@@ -1,6 +1,6 @@\n \n  /**\n- * @file LE1_NISP_ProcessScience/tests/include/DetectorsInitializerMock.h\n+ * @file LE1_NISP_Interactors/tests/include/DetectorsInitializerMock.h\n  * @date 02/11/21\n  * @author user\n  *\n@@ -22,18 +22,18 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORSINITIALIZERMOCK_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORSINITIALIZERMOCK_H\n+#ifndef _LE1_NISP_INTERACTORS_DETECTORSINITIALIZERMOCK_H\n+#define _LE1_NISP_INTERACTORS_DETECTORSINITIALIZERMOCK_H\n \n-#include \"LE1_NISP_ProcessScience//DetectorsInitializer.h\"\n+#include \"LE1_NISP_Interactors/DetectorsInitializer.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n class DetIniterDummy: public DetectorsInitializer{\n public:\n   virtual ~DetIniterDummy() = default;\n \n-  inline virtual std::vector<std::shared_ptr<Detector>> initDetectors(const std::string &dpuFile) override{\n+  inline virtual std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> initDetectors(const std::string &dpuFile) override{\n     (void) dpuFile;\n     return {};\n   }\n@@ -42,20 +42,20 @@ public:\n \n class DetIniterStubCustomRet: public DetectorsInitializer{\n public:\n-  DetIniterStubCustomRet(const std::vector<std::shared_ptr<Detector>> &detectors)\n+  DetIniterStubCustomRet(const std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> &detectors)\n   : m_detectors(detectors){}\n   virtual ~DetIniterStubCustomRet() = default;\n \n-  inline virtual std::vector<std::shared_ptr<Detector>> initDetectors(const std::string &dpuFile) override{\n+  inline virtual std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> initDetectors(const std::string &dpuFile) override{\n     (void) dpuFile;\n     return m_detectors;\n   }\n \n private:\n-  std::vector<std::shared_ptr<Detector>> m_detectors;\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> m_detectors;\n \n };\n \n-}// namespace LE1_NISP_ProcessScience\n+}// namespace LE1_NISP_Interactors\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/include/ExposureMock.h": [
                        [
                            "@@ -1,6 +1,6 @@\n \n  /**\n- * @file LE1_NISP_ProcessScience/tests/include/ExposureMock.h\n+ * @file LE1_NISP_Interactors/tests/include/ExposureMock.h\n  * @date 11/24/20\n  * @author user\n  *\n@@ -22,34 +22,34 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_EXPOSUREMOCK_H\n-#define _LE1_NISP_PROCESSSCIENCE_EXPOSUREMOCK_H\n+#ifndef _LE1_NISP_INTERACTORS_EXPOSUREMOCK_H\n+#define _LE1_NISP_INTERACTORS_EXPOSUREMOCK_H\n \n-#include \"LE1_NISP_ProcessScience//Exposure.h\"\n+#include \"LE1_NISP_Entities/Exposure.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n-class ExposureDummy: public Exposure{\n+class ExposureDummy: public LE1_NISP_Entities::Exposure{\n public:\n   virtual ~ExposureDummy() = default;\n \n-  inline virtual ExposureId getExposureId() const override{\n-    return ExposureId{0};\n+  inline virtual LE1_NISP_Entities::ExposureId getExposureId() const override{\n+    return LE1_NISP_Entities::ExposureId{0};\n   }\n \n-  inline virtual std::shared_ptr<DetectorIterator> createDetectorIterator() override{\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::DetectorIterator> createDetectorIterator() override{\n     return nullptr;\n   }\n   \n-  inline virtual void addDetector(const std::shared_ptr<Detector> detector) override{\n+  inline virtual void addDetector(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) override{\n     (void) detector;\n   }\n-  inline virtual std::shared_ptr<Detector> getDetector(const DetectorId &detId) override{\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::Detector> getDetector(const LE1_NISP_Entities::DetectorId &detId) override{\n     (void) detId;\n     return nullptr;\n   }\n \n-  inline virtual bool hasDetector(const DetectorId &detId) const override{\n+  inline virtual bool hasDetector(const LE1_NISP_Entities::DetectorId &detId) const override{\n     (void) detId;\n     return false;\n   }\n@@ -57,7 +57,7 @@ public:\n     return 0;\n   }\n \n-  inline std::shared_ptr<CommonDetectorMetadata> getCommonDetectorMetadata() const override{\n+  inline std::shared_ptr<LE1_NISP_Entities::CommonDetectorMetadata> getCommonDetectorMetadata() const override{\n     return nullptr;\n   }\n \n@@ -65,25 +65,25 @@ public:\n \n class ExposureStubCustomReturn: public ExposureDummy{\n public:\n-  ExposureStubCustomReturn(const std::shared_ptr<DetectorIterator> detIter){\n+  ExposureStubCustomReturn(const std::shared_ptr<LE1_NISP_Entities::DetectorIterator> detIter){\n     m_detIter = detIter;\n   }\n   virtual ~ExposureStubCustomReturn() = default;\n \n-  inline void setDetectorIterator(const std::shared_ptr<DetectorIterator> detIter){\n+  inline void setDetectorIterator(const std::shared_ptr<LE1_NISP_Entities::DetectorIterator> detIter){\n     m_detIter = detIter;\n   }\n-  inline void setCommonDetectorMetadata(const std::shared_ptr<CommonDetectorMetadata> metadata){\n+  inline void setCommonDetectorMetadata(const std::shared_ptr<LE1_NISP_Entities::CommonDetectorMetadata> metadata){\n     m_commonMetadata = metadata;\n   }\n   inline void setDetectorCount(const size_t &count){\n     m_count = count;\n   }\n \n-  inline virtual std::shared_ptr<DetectorIterator> createDetectorIterator() override{\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::DetectorIterator> createDetectorIterator() override{\n     return m_detIter;\n   }\n-  inline std::shared_ptr<CommonDetectorMetadata> getCommonDetectorMetadata() const override{\n+  inline std::shared_ptr<LE1_NISP_Entities::CommonDetectorMetadata> getCommonDetectorMetadata() const override{\n     return m_commonMetadata;\n   }\n   inline virtual size_t countDetectors() const override{\n@@ -91,12 +91,12 @@ public:\n   }\n   \n public:\n-  std::shared_ptr<DetectorIterator> m_detIter;\n-  std::shared_ptr<CommonDetectorMetadata> m_commonMetadata;\n+  std::shared_ptr<LE1_NISP_Entities::DetectorIterator> m_detIter;\n+  std::shared_ptr<LE1_NISP_Entities::CommonDetectorMetadata> m_commonMetadata;\n   size_t m_count;\n \n };\n \n-}// namespace LE1_NISP_ProcessScience\n+}// namespace LE1_NISP_Interactors\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/include/ExposuresCounterMock.h": [
                        [
                            "@@ -1,6 +1,6 @@\n \n  /**\n- * @file LE1_NISP_ProcessScience/tests/include/ExposuresCounterMock.h\n+ * @file LE1_NISP_Interactors/tests/include/ExposuresCounterMock.h\n  * @date 11/24/20\n  * @author user\n  *\n@@ -22,12 +22,12 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_EXPOSURESCOUNTERMOCK_H\n-#define _LE1_NISP_PROCESSSCIENCE_EXPOSURESCOUNTERMOCK_H\n+#ifndef _LE1_NISP_INTERACTORS_EXPOSURESCOUNTERMOCK_H\n+#define _LE1_NISP_INTERACTORS_EXPOSURESCOUNTERMOCK_H\n \n-#include \"LE1_NISP_ProcessScience//ExposuresCounter.h\"\n+#include \"LE1_NISP_Interactors/ExposuresCounter.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n class ExposuresCounterDummy: public ExposuresCounter{\n public:\n@@ -43,6 +43,6 @@ public:\n \n };\n \n-}// namespace LE1_NISP_ProcessScience\n+}// namespace LE1_NISP_Interactors\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/include/ObtMock.h": [
                        [
                            "@@ -0,0 +1,56 @@\n+\n+ /**\n+ * @file LE1_NISP_Interactors/tests/include/ObtMock.h\n+ * @date 10/21/21\n+ * @author user\n+ *\n+ * @copyright (C) 2012-2020 Euclid Science Ground Segment\n+ *\n+ * This library is free software; you can redistribute it and/or modify it under\n+ * the terms of the GNU Lesser General Public License as published by the Free\n+ * Software Foundation; either version 3.0 of the License, or (at your option)\n+ * any later version.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+ * details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this library; if not, write to the Free Software Foundation, Inc.,\n+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+ *\n+ */\n+\n+#ifndef _LE1_NISP_INTERACTORS_OBTMOCK_H\n+#define _LE1_NISP_INTERACTORS_OBTMOCK_H\n+\n+#include \"LE1_NISP_Entities/OnBoardTime.h\"\n+#include \"LE1_NISP_Entities/tests/include/ObtMock.h\"\n+\n+namespace LE1_NISP_Interactors {\n+\n+  class ObtCustomReturns: public LE1_NISP_Entities::ObtDummy {\n+  public:\n+    double customObtTotSecs;\n+    uint32_t customCoarseTime;\n+    uint32_t customFineTimeMicroSec;\n+    std::string customIsoExtended;\n+\n+    ObtCustomReturns()\n+        : LE1_NISP_Entities::ObtDummy(), customObtTotSecs(0), customCoarseTime(0),\n+          customFineTimeMicroSec(0), customIsoExtended(\"1970-01-01T00:00:00.000000000\") {}\n+    ~ObtCustomReturns() override = default;\n+\n+    [[nodiscard]] double getTotalSeconds() const override { return customObtTotSecs; }\n+    [[nodiscard]] uint32_t getCoarseTime() const override { return customCoarseTime; }\n+\n+    [[nodiscard]] uint32_t getFineTimeMicroSeconds() const override { return customFineTimeMicroSec; }\n+\n+    [[nodiscard]] std::string getIsoExtendedString() const override { return customIsoExtended; }\n+\n+  };\n+\n+} // namespace LE1_NISP_Interactors\n+\n+#endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/include/ProductsArchiverMock.h": [
                        [
                            "@@ -1,6 +1,6 @@\n \n  /**\n- * @file LE1_NISP_ProcessScience/tests/include/ProductsArchiverMock.h\n+ * @file LE1_NISP_Interactors/tests/include/ProductsArchiverMock.h\n  * @date 02/12/21\n  * @author user\n  *\n@@ -22,18 +22,18 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_PRODUCTSARCHIVERMOCK_H\n-#define _LE1_NISP_PROCESSSCIENCE_PRODUCTSARCHIVERMOCK_H\n+#ifndef _LE1_NISP_INTERACTORS_PRODUCTSARCHIVERMOCK_H\n+#define _LE1_NISP_INTERACTORS_PRODUCTSARCHIVERMOCK_H\n \n-#include \"LE1_NISP_ProcessScience//ProductsArchiver.h\"\n+#include \"LE1_NISP_Interactors/ProductsArchiver.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n class ProductsArchiverDummy: public ProductsArchiver{\n public:\n   virtual ~ProductsArchiverDummy() = default;\n   \n-  inline virtual std::string archive(const std::shared_ptr<Exposure> exposure, const std::string &scienceProduct, const std::string &hkProduct, const std::vector<std::string> &engProducts, const std::string &outputPath) override{\n+  inline virtual std::string archive(const std::shared_ptr<LE1_NISP_Entities::Exposure> exposure, const std::string &scienceProduct, const std::string &hkProduct, const std::vector<std::string> &engProducts, const std::string &outputPath) override{\n     (void) exposure;\n     (void) scienceProduct;\n     (void) hkProduct;\n@@ -48,7 +48,7 @@ class ProductsArchiverSpy: public ProductsArchiver{\n public:\n   virtual ~ProductsArchiverSpy() = default;\n   \n-  inline virtual std::string archive(const std::shared_ptr<Exposure> exposure, const std::string &scienceProduct, const std::string &hkProduct, const std::vector<std::string> &engProducts, const std::string &outputPath) override{\n+  inline virtual std::string archive(const std::shared_ptr<LE1_NISP_Entities::Exposure> exposure, const std::string &scienceProduct, const std::string &hkProduct, const std::vector<std::string> &engProducts, const std::string &outputPath) override{\n     m_exposure = exposure;\n     m_scienceProduct = scienceProduct;\n     m_hkProduct = hkProduct;\n@@ -57,7 +57,7 @@ public:\n     return \"\";\n   }\n \n-  inline std::shared_ptr<Exposure> getExposure() const{\n+  inline std::shared_ptr<LE1_NISP_Entities::Exposure> getExposure() const{\n     return m_exposure;\n   }\n   inline std::string getSciProduct() const{\n@@ -74,7 +74,7 @@ public:\n   }\n \n private:\n-  std::shared_ptr<Exposure> m_exposure;\n+  std::shared_ptr<LE1_NISP_Entities::Exposure> m_exposure;\n   std::string m_scienceProduct;\n   std::string m_hkProduct;\n   std::vector<std::string> m_engProducts;\n@@ -83,6 +83,6 @@ private:\n };\n \n \n-}// namespace LE1_NISP_ProcessScience\n+}// namespace LE1_NISP_Interactors\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/include/ProductsWriterMock.h": [
                        [
                            "@@ -1,6 +1,6 @@\n \n  /**\n- * @file LE1_NISP_ProcessScience/tests/include/ProductsWriterMock.h\n+ * @file LE1_NISP_Interactors/tests/include/ProductsWriterMock.h\n  * @date 05/19/21\n  * @author user\n  *\n@@ -22,12 +22,12 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_PRODUCTSWRITERMOCK_H\n-#define _LE1_NISP_PROCESSSCIENCE_PRODUCTSWRITERMOCK_H\n+#ifndef _LE1_NISP_INTERACTORS_PRODUCTSWRITERMOCK_H\n+#define _LE1_NISP_INTERACTORS_PRODUCTSWRITERMOCK_H\n \n-#include \"LE1_NISP_ProcessScience//ProductsWriter.h\"\n+#include \"LE1_NISP_Interactors/ProductsWriter.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n \n class ProductsWriterDummy: public ProductsWriter{\n@@ -35,7 +35,7 @@ public:\n   ProductsWriterDummy() = default;\n   virtual ~ProductsWriterDummy() = default;\n \n-  inline virtual void writeProducts(const std::shared_ptr<Exposure> exposure, const std::string &outputPath) {\n+  inline virtual void writeProducts(const std::shared_ptr<LE1_NISP_Entities::Exposure> exposure, const std::string &outputPath) {\n     (void) outputPath;\n     (void) exposure;\n     return;\n@@ -61,7 +61,7 @@ public:\n     m_engProdsTBW(engProdsToBeWritten) {}\n   virtual ~ProductsWriterFake() = default;\n \n-  inline virtual void writeProducts(const std::shared_ptr<Exposure> exposure, const std::string &outputPath) {\n+  inline virtual void writeProducts(const std::shared_ptr<LE1_NISP_Entities::Exposure> exposure, const std::string &outputPath) {\n     (void) exposure;\n     (void) outputPath;\n     m_sciProds = m_sciProdsTBW;\n@@ -89,6 +89,6 @@ private:\n \n };\n \n-}// namespace LE1_NISP_ProcessScience\n+}// namespace LE1_NISP_Interactors\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/include/TelemetryDecoderMock.h": [
                        [
                            "@@ -1,6 +1,6 @@\n \n  /**\n- * @file LE1_NISP_ProcessScience/tests/include/TelemetryDecoderMock.h\n+ * @file LE1_NISP_Interactors/tests/include/TelemetryDecoderMock.h\n  * @date 05/04/21\n  * @author user\n  *\n@@ -22,23 +22,23 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_TELEMETRYDECODERMOCK_H\n-#define _LE1_NISP_PROCESSSCIENCE_TELEMETRYDECODERMOCK_H\n+#ifndef _LE1_NISP_INTERACTORS_TELEMETRYDECODERMOCK_H\n+#define _LE1_NISP_INTERACTORS_TELEMETRYDECODERMOCK_H\n \n-#include \"LE1_NISP_ProcessScience//TelemetryDecoder.h\"\n+#include \"LE1_NISP_Interactors/TelemetryDecoder.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n class TelemetryDecoderDummy: public TelemetryDecoder {\n public:\n   TelemetryDecoderDummy() = default;\n   virtual ~TelemetryDecoderDummy() = default;\n-  inline virtual void decode(const std::shared_ptr<Detector> detector) override{\n+  inline virtual void decode(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) override{\n     (void) detector;\n   }\n \n };\n \n-}// namespace LE1_NISP_ProcessScience\n+}// namespace LE1_NISP_Interactors\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/include/TelemetryDetectorMock.h": [
                        [
                            "@@ -1,6 +1,6 @@\n \n  /**\n- * @file LE1_NISP_ProcessScience/tests/include/TelemetryDetectorMock.h\n+ * @file LE1_NISP_Interactors/tests/include/TelemetryDetectorMock.h\n  * @date 11/17/20\n  * @author user\n  *\n@@ -22,15 +22,15 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_TELEMETRYDETECTORMOCK_H\n-#define _LE1_NISP_PROCESSSCIENCE_TELEMETRYDETECTORMOCK_H\n+#ifndef _LE1_NISP_INTERACTORS_TELEMETRYDETECTORMOCK_H\n+#define _LE1_NISP_INTERACTORS_TELEMETRYDETECTORMOCK_H\n \n-#include \"LE1_NISP_ProcessScience/TelemetryDetector.h\"\n-#include \"LE1_NISP_ProcessScience//ByteArrayStandard.h\"\n+#include \"LE1_NISP_Entities/TelemetryDetector.h\"\n+#include \"LE1_NISP_Entities/ByteArrayStandard.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n-class TelemetryDetectorDummy: public TelemetryDetectorInterface {\n+class TelemetryDetectorDummy: public LE1_NISP_Entities::TelemetryDetectorInterface {\n     public:\n     virtual ~TelemetryDetectorDummy() = default;\n \n@@ -38,7 +38,7 @@ class TelemetryDetectorDummy: public TelemetryDetectorInterface {\n     inline virtual unsigned long getEndPosition() const override{return 0;}\n     inline virtual std::string getTelemetryFileName() const override{return \"\";}\n \n-    inline virtual std::shared_ptr<ByteArray> readBytes(const long offset, const long numberOfBytes)override{\n+    inline virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> readBytes(const long offset, const long numberOfBytes)override{\n       (void) offset;\n       (void) numberOfBytes;\n       return nullptr;\n@@ -63,17 +63,17 @@ private:\n \n class TmDetSpyReturnDefaultByteArray: public TelemetryDetectorDummy {\n public:\n-    std::shared_ptr<ByteArray> bytesToReturn;\n+    std::shared_ptr<LE1_NISP_Entities::ByteArray> bytesToReturn;\n     long numberOfByteRequested;\n     long offset;\n \n-    TmDetSpyReturnDefaultByteArray(const std::shared_ptr<ByteArray> bytesToBeReturned){\n+    TmDetSpyReturnDefaultByteArray(const std::shared_ptr<LE1_NISP_Entities::ByteArray> bytesToBeReturned){\n       this->bytesToReturn = bytesToBeReturned;\n       numberOfByteRequested = 0;\n     }\n     virtual ~TmDetSpyReturnDefaultByteArray() = default;\n \n-    virtual std::shared_ptr<ByteArray> readBytes(const long offsetPos, const long numberOfBytes)override{\n+    virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> readBytes(const long offsetPos, const long numberOfBytes)override{\n       offset = offsetPos;\n       numberOfByteRequested = numberOfBytes;\n       return bytesToReturn;\n@@ -89,10 +89,10 @@ public:\n     }\n     inline virtual ~TmDetStubReturnBytesFromVec() = default;\n \n-    inline virtual std::shared_ptr<ByteArray> readBytes(const long offset, const long numberOfBytes)override{\n+    inline virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> readBytes(const long offset, const long numberOfBytes)override{\n       (void) offset;\n       (void) numberOfBytes;\n-      return std::make_shared<ByteArrayStandard>(bytes);\n+      return std::make_shared<LE1_NISP_Entities::ByteArrayStandard>(bytes);\n     }\n };\n \n@@ -101,9 +101,9 @@ public:\n   TmDetStubReturnEmptyArrayInputSize(){}\n   inline virtual ~TmDetStubReturnEmptyArrayInputSize() = default;\n \n-  inline virtual std::shared_ptr<ByteArray> readBytes(const long offset, const long numberOfBytes)override{\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> readBytes(const long offset, const long numberOfBytes)override{\n     (void) offset;\n-    auto bytes = std::make_shared<ByteArrayStandard>(numberOfBytes);\n+    auto bytes = std::make_shared<LE1_NISP_Entities::ByteArrayStandard>(numberOfBytes);\n     return bytes;\n   }\n };\n@@ -115,9 +115,9 @@ public:\n   TelemetryDetectorSpy() = default;\n   virtual ~TelemetryDetectorSpy() = default;\n \n-  inline virtual std::shared_ptr<ByteArray> readBytes(const long offset, const long numberOfBytes)override{\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> readBytes(const long offset, const long numberOfBytes)override{\n     readParamInfo += \"r:o\" + std::to_string(offset) + \"s\" + std::to_string(numberOfBytes);\n-    return std::make_shared<ByteArrayStandard>(numberOfBytes);\n+    return std::make_shared<LE1_NISP_Entities::ByteArrayStandard>(numberOfBytes);\n   }\n \n };\n@@ -125,15 +125,15 @@ public:\n class TmDetStubIterateInputBytes: public TelemetryDetectorDummy{\n public:\n   int bytesVecItr;\n-  std::vector<std::shared_ptr<ByteArray>> bytesVec;\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::ByteArray>> bytesVec;\n   \n-  TmDetStubIterateInputBytes(const std::vector<std::shared_ptr<ByteArray>> &bytesToBeReturn){\n+  TmDetStubIterateInputBytes(const std::vector<std::shared_ptr<LE1_NISP_Entities::ByteArray>> &bytesToBeReturn){\n     this->bytesVec = bytesToBeReturn;\n     bytesVecItr = 0;\n   }\n   virtual ~TmDetStubIterateInputBytes() = default;\n \n-  virtual std::shared_ptr<ByteArray> readBytes(const long offset, const long numberOfBytes) override{\n+  virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> readBytes(const long offset, const long numberOfBytes) override{\n     (void)offset;\n     (void)numberOfBytes;\n     if(bytesVecItr >= (int)bytesVec.size())\n@@ -142,6 +142,6 @@ public:\n   }\n };\n \n-}// namespace LE1_NISP_ProcessScience\n+}// namespace LE1_NISP_Interactors\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/include/TelemetrySectionDecoderMock.h": [
                        [
                            "@@ -1,6 +1,6 @@\n \n  /**\n- * @file LE1_NISP_ProcessScience/tests/include/ScienceDecoderMock.h\n+ * @file LE1_NISP_Interactors/tests/include/ScienceDecoderMock.h\n  * @date 02/12/21\n  * @author user\n  *\n@@ -22,25 +22,25 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_SCIENCEDECODERMOCK_H\n-#define _LE1_NISP_PROCESSSCIENCE_SCIENCEDECODERMOCK_H\n+#ifndef _LE1_NISP_INTERACTORS_SCIENCEDECODERMOCK_H\n+#define _LE1_NISP_INTERACTORS_SCIENCEDECODERMOCK_H\n \n-#include \"LE1_NISP_ProcessScience//ScienceDecoder.h\"\n-#include \"LE1_NISP_ProcessScience//QualityDataDecoder.h\"\n-#include \"LE1_NISP_ProcessScience//EngDecoder.h\"\n-#include \"LE1_NISP_ProcessScience//RawLinesDecoder.h\"\n-#include \"LE1_NISP_ProcessScience//AnalogTelemetryDecoder.h\"\n-#include \"LE1_NISP_ProcessScience/ErrorsDecoder.h\"\n-#include \"LE1_NISP_ProcessScience/HistoryDecoder.h\"\n+#include \"LE1_NISP_Interactors/ScienceDecoder.h\"\n+#include \"LE1_NISP_Interactors/QualityDataDecoder.h\"\n+#include \"LE1_NISP_Interactors/EngDecoder.h\"\n+#include \"LE1_NISP_Interactors/RawLinesDecoder.h\"\n+#include \"LE1_NISP_Interactors/AnalogTelemetryDecoder.h\"\n+#include \"LE1_NISP_Interactors/ErrorsDecoder.h\"\n+#include \"LE1_NISP_Interactors/HistoryDecoder.h\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n class TelemetrySectionDecoderDummy: public TelemetrySectionDecoder {\n public:\n   TelemetrySectionDecoderDummy() = default;\n   virtual ~TelemetrySectionDecoderDummy() = default;\n \n-  inline virtual std::shared_ptr<ByteArray> decode(const std::shared_ptr<Detector> detector) override{\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> decode(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) override{\n     (void) detector;\n     return nullptr;\n   }\n@@ -49,20 +49,20 @@ public:\n \n class TmSectionDecoderCustomData: public TelemetrySectionDecoder {\n public:\n-  TmSectionDecoderCustomData(const std::shared_ptr<ByteArray> decodedData)\n+  TmSectionDecoderCustomData(const std::shared_ptr<LE1_NISP_Entities::ByteArray> decodedData)\n   : m_decodedData(decodedData){}\n   virtual ~TmSectionDecoderCustomData() = default;\n \n-  inline virtual std::shared_ptr<ByteArray> decode(const std::shared_ptr<Detector> detector) override{\n+  inline virtual std::shared_ptr<LE1_NISP_Entities::ByteArray> decode(const std::shared_ptr<LE1_NISP_Entities::Detector> detector) override{\n     (void) detector;\n     return m_decodedData;\n   }\n \n protected:\n-  std::shared_ptr<ByteArray> m_decodedData;\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> m_decodedData;\n \n };\n \n-}// namespace LE1_NISP_ProcessScience\n+}// namespace LE1_NISP_Interactors\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/include/TestUtils.h": [
                        [
                            "@@ -1,6 +1,6 @@\n \n  /**\n- * @file LE1_NISP_ProcessScience/tests/include/TestUtils.h\n+ * @file LE1_NISP_Interactors/tests/include/TestUtils.h\n  * @date 03/11/21\n  * @author user\n  *\n@@ -22,14 +22,14 @@\n  *\n  */\n \n-#ifndef _LE1_NISP_PROCESSSCIENCE_TESTUTILS_H\n-#define _LE1_NISP_PROCESSSCIENCE_TESTUTILS_H\n+#ifndef _LE1_NISP_INTERACTORS_TESTUTILS_H\n+#define _LE1_NISP_INTERACTORS_TESTUTILS_H\n \n #include <vector>\n #include <string>\n #include \"boost/filesystem.hpp\"\n \n-namespace LE1_NISP_ProcessScience {\n+namespace LE1_NISP_Interactors {\n \n   std::vector<std::string> getFitsByType(const std::string &directory, const std::string &productType){\n     std::vector<std::string> files;\n@@ -55,6 +55,6 @@ namespace LE1_NISP_ProcessScience {\n   }\n \n \n-}// namespace LE1_NISP_ProcessScience\n+}// namespace LE1_NISP_Interactors\n \n #endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/src/AnalogTelemetryDecoder_test.cpp": [
                        [
                            "@@ -23,20 +23,21 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//AnalogTelemetryDecoder.h\"\n+#include \"LE1_NISP_Interactors/AnalogTelemetryDecoder.h\"\n \n-#include \"LE1_NISP_ProcessScience/tests/include/DecompressorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/TelemetryDetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMetadataMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ByteArrayMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/DecompressorMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/TelemetryDetectorMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMetadataMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/ByteArrayMock.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Interactors;\n+using namespace LE1_NISP_Entities;\n \n struct AnalogTelemetryDecoderFixture{\n   std::shared_ptr<Decompressor> decompressorDummy;\n-  std::shared_ptr<TelemetryDetectorInterface> tmDetReturnInputSizeArray;\n-  std::shared_ptr<DetectorMetadata> metadataDummy;\n+  std::shared_ptr<LE1_NISP_Entities::TelemetryDetectorInterface> tmDetReturnInputSizeArray;\n+  std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> metadataDummy;\n   \n   AnalogTelemetryDecoderFixture(){\n     decompressorDummy = std::make_shared<DecompressorDummy>();\n@@ -82,14 +83,14 @@ BOOST_AUTO_TEST_CASE( GivenNullTelemetryConfigShouldThrowNullTelemetryConfigurat\n \n   AnalogTelemetryDecoder decoder(decompressorDummy);\n \n-  BOOST_REQUIRE_THROW(decoder.decode(detector), NullTelemetryConfigurationException);\n+  BOOST_REQUIRE_THROW(decoder.decode(detector), LE1_NISP_Entities::NullTelemetryConfigurationException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenNullAnalogTmSectionShouldThrowNullAnalogTmSectionException ) {\n   auto detector = std::make_shared<DetectorFake>();\n   detector->setMetadata(metadataDummy);\n   detector->setTelemetryDetector(std::make_shared<TelemetryDetectorDummy>());\n-  detector->setTelemetryConfiguration(std::make_shared<TelemetryConfiguration>());\n+  detector->setTelemetryConfiguration(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   detector->setAnalogTmSection(nullptr);\n \n   AnalogTelemetryDecoder decoder(decompressorDummy);\n@@ -100,12 +101,12 @@ BOOST_AUTO_TEST_CASE( GivenNullAnalogTmSectionShouldThrowNullAnalogTmSectionExce\n BOOST_AUTO_TEST_CASE( GivenNotCompressedDataShouldReturnExpectedByteArray ) {\n   auto expectedData = std::make_shared<ByteArrayRandom>(128);\n   auto tmDetectorFake = std::make_shared<TmDetSpyReturnDefaultByteArray>(expectedData);\n-  auto tmSection = std::make_shared<TelemetrySection>(0, expectedData->getSize());\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, expectedData->getSize());\n \n   auto detector = std::make_shared<DetectorFake>();\n   detector->setMetadata(metadataDummy);\n   detector->setTelemetryDetector(tmDetectorFake);\n-  detector->setTelemetryConfiguration(std::make_shared<TelemetryConfiguration>());\n+  detector->setTelemetryConfiguration(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   detector->setAnalogTmSection(tmSection);\n   detector->setIsAnalogTmCompressed(false);\n \n@@ -118,13 +119,13 @@ BOOST_AUTO_TEST_CASE( GivenNotCompressedDataShouldReturnExpectedByteArray ) {\n BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldReturnExpectedByteArray ) {\n   auto expectedData = std::make_shared<ByteArrayRandom>(128);\n   auto tmDetectorFake = std::make_shared<TmDetSpyReturnDefaultByteArray>(expectedData);\n-  auto tmSection = std::make_shared<TelemetrySection>(0, expectedData->getSize());\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, expectedData->getSize());\n   auto decompressorReturnInput = std::make_shared<DecompressorSpyReturnInput>();\n \n   auto detector = std::make_shared<DetectorFake>();\n   detector->setMetadata(metadataDummy);\n   detector->setTelemetryDetector(tmDetectorFake);\n-  detector->setTelemetryConfiguration(std::make_shared<TelemetryConfiguration>());\n+  detector->setTelemetryConfiguration(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   detector->setAnalogTmSection(tmSection);\n   detector->setIsAnalogTmCompressed(true);\n \n@@ -135,11 +136,11 @@ BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldReturnExpectedByteArray ) {\n }\n \n BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldDecompressThemUsingExpectedDecompressionParams ) {\n-  CompressionParams expectedParams(1, 2, 3, 4);\n+  LE1_NISP_Entities::CompressionParams expectedParams(1, 2, 3, 4);\n \n   auto expectedData = std::make_shared<ByteArrayRandom>(128);\n   auto tmDetectorFake = std::make_shared<TmDetStubReturnEmptyArrayInputSize>();\n-  auto tmSection = std::make_shared<TelemetrySection>(0, expectedData->getSize());\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, expectedData->getSize());\n   auto decompressorSpy = std::make_shared<DecompressorSpyReturnInput>();\n \n   auto metadataFake = std::make_shared<DetectorMetadataStubCustomReturns>();\n@@ -147,7 +148,7 @@ BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldDecompressThemUsingExpectedDecomp\n   metadataFake->setUsedComprFundSeqPar1(2);\n   metadataFake->setUsedComprFundSeqPar2(3);\n \n-  auto tmConfig = std::make_shared<TelemetryConfiguration>();\n+  auto tmConfig = std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>();\n   tmConfig->setAnalogTelemetryNumberOfValues(4);\n \n   auto detector = std::make_shared<DetectorFake>();\n@@ -168,10 +169,10 @@ BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldDecompressThemUsingExpectedMaxSiz\n \n   auto expectedData = std::make_shared<ByteArrayRandom>(128);\n   auto tmDetectorFake = std::make_shared<TmDetStubReturnEmptyArrayInputSize>();\n-  auto tmSection = std::make_shared<TelemetrySection>(0, expectedData->getSize());\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, expectedData->getSize());\n   auto decompressorSpy = std::make_shared<DecompressorSpyReturnInput>();\n \n-  auto tmConfig = std::make_shared<TelemetryConfiguration>();\n+  auto tmConfig = std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>();\n   tmConfig->setAnalogTelemetryMaxSize(expectedComprMaxSize);\n \n   auto detector = std::make_shared<DetectorFake>();\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/src/DetectorCollectorObt_test.cpp": [
                        [
                            "@@ -23,12 +23,13 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//DetectorCollectorObt.h\"\n-#include \"LE1_NISP_ProcessScience//DetectorMap.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ObtMock.h\"\n+#include \"LE1_NISP_Interactors/DetectorCollectorObt.h\"\n+#include \"LE1_NISP_Entities/DetectorMap.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/ObtMock.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Interactors;\n+using namespace LE1_NISP_Entities;\n \n struct DetectorCollectorObtFixture_test\n {\n@@ -89,19 +90,6 @@ BOOST_AUTO_TEST_CASE( GivenListWithAllDetectorsWithTheSameOBTShouldReturnOneExpo\n   BOOST_TEST_REQUIRE(exp->second->hasDetector(det4->getId()));\n }\n \n-BOOST_AUTO_TEST_CASE( GivenDetectorsWithDifferentOBTCoarseTimeShouldReturnTheExpectedNumberOfExposures ) {\n-  auto det1 = std::make_shared<DetectorStubCustomObt>(\"01\", std::make_shared<LE1_NISP::OnBoardTime>(1, 0));\n-  auto det2 = std::make_shared<DetectorStubCustomObt>(\"02\", std::make_shared<LE1_NISP::OnBoardTime>(1, 0));\n-  auto det3 = std::make_shared<DetectorStubCustomObt>(\"03\", std::make_shared<LE1_NISP::OnBoardTime>(2, 0));\n-  auto det4 = std::make_shared<DetectorStubCustomObt>(\"04\", std::make_shared<LE1_NISP::OnBoardTime>(2, 0));\n-  auto exposures = collector.collectPerExposure({det1,\n-                                                det2,\n-                                                det3,\n-                                                det4});\n-\n-  BOOST_REQUIRE_EQUAL(exposures.size(), 2);\n-}\n-\n BOOST_AUTO_TEST_CASE( GivenDetectorsWithOBTWhichDifferByLessThanToleranceShouldReturnOneSingleExposure ) {\n   auto obt1 = std::make_shared<ObtCustomReturns>();\n   auto obt2 = std::make_shared<ObtCustomReturns>();\n@@ -191,11 +179,24 @@ BOOST_AUTO_TEST_CASE( GivenListWithDetectorsWithDifferentOBTsShouldReturnTheExpo\n }\n \n BOOST_AUTO_TEST_CASE( GivenListWithDetectorsWithDifferentOBTsShouldReturnTheExposuresContainingTheExpectedDetectors ) {\n-  auto det1 = std::make_shared<DetectorStubCustomObt>(\"01\", std::make_shared<LE1_NISP::OnBoardTime>(1, 0));\n-  auto det2 = std::make_shared<DetectorStubCustomObt>(\"02\", std::make_shared<LE1_NISP::OnBoardTime>(1, 0));\n-  auto det3 = std::make_shared<DetectorStubCustomObt>(\"03\", std::make_shared<LE1_NISP::OnBoardTime>(2, 0));\n-  auto det4 = std::make_shared<DetectorStubCustomObt>(\"04\", std::make_shared<LE1_NISP::OnBoardTime>(2, 0));\n-  auto det5 = std::make_shared<DetectorStubCustomObt>(\"05\", std::make_shared<LE1_NISP::OnBoardTime>(2, 0));\n+  auto obt1 = std::make_shared<ObtCustomReturns>();\n+  auto obt2 = std::make_shared<ObtCustomReturns>();\n+  auto obt3 = std::make_shared<ObtCustomReturns>();\n+  auto obt4 = std::make_shared<ObtCustomReturns>();\n+  auto obt5 = std::make_shared<ObtCustomReturns>();\n+  obt1->customObtTotSecs = 10.970;\n+  obt2->customObtTotSecs = 10.980;\n+  obt3->customObtTotSecs = 11.001;\n+  obt4->customObtTotSecs = 11.018;\n+  obt5->customObtTotSecs = 11.019;\n+\n+  auto det1 = std::make_shared<DetectorStubCustomObt>(\"01\", obt1);\n+  auto det2 = std::make_shared<DetectorStubCustomObt>(\"02\", obt2);\n+  auto det3 = std::make_shared<DetectorStubCustomObt>(\"03\", obt3);\n+  auto det4 = std::make_shared<DetectorStubCustomObt>(\"04\", obt4);\n+  auto det5 = std::make_shared<DetectorStubCustomObt>(\"05\", obt5);\n+  collector.setTolerance(0.02);\n+\n   auto exposures = collector.collectPerExposure({det1, det2, det3, det4, det5});\n \n   auto exp1 = exposures.begin();\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/src/EngDecoder_test.cpp": [
                        [
                            "@@ -23,17 +23,18 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//EngDecoder.h\"\n+#include \"LE1_NISP_Interactors/EngDecoder.h\"\n \n-#include \"LE1_NISP_ProcessScience/tests/include/TelemetryDetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ByteArrayMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/TelemetryDetectorMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/ByteArrayMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMock.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Interactors;\n+using namespace LE1_NISP_Entities;\n \n struct EngDecoderFixture_test\n {\n-  std::shared_ptr<TelemetrySection> tmZeroSection = std::make_shared<TelemetrySection>(0, 0);\n+  std::shared_ptr<LE1_NISP_Entities::TelemetrySection> tmZeroSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, 0);\n };\n \n // --------------------------------------------------------------------------------------------------------------------\n@@ -42,7 +43,7 @@ BOOST_FIXTURE_TEST_SUITE (EngDecoder_test, EngDecoderFixture_test)\n \n BOOST_AUTO_TEST_CASE( GivenNullDetectorShouldThrowNullDetectorException ) {\n   EngDecoder decoder;\n-  std::shared_ptr<Detector> detector = nullptr;\n+  std::shared_ptr<LE1_NISP_Entities::Detector> detector = nullptr;\n   BOOST_REQUIRE_THROW(decoder.decode(detector), NullDetectorException);\n }\n \n@@ -81,9 +82,9 @@ BOOST_AUTO_TEST_CASE( GivenAllZeroSizeSectionsShouldReturnAnEmptyArray ) {\n }\n \n BOOST_AUTO_TEST_CASE( GivenSeveralEngSectionsShouldReturnByteArrayWithSizeEqualToTheSumOfSectionSizes ) {\n-  auto engSection1 = std::make_shared<TelemetrySection>(0, 128);\n-  auto engSection2 = std::make_shared<TelemetrySection>(0, 33);\n-  auto engSection3 = std::make_shared<TelemetrySection>(0, 123471);\n+  auto engSection1 = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, 128);\n+  auto engSection2 = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, 33);\n+  auto engSection3 = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, 123471);\n   size_t expectedSize = engSection1->getSize() + engSection2->getSize() + engSection3->getSize();\n \n   EngDecoder decoder;\n@@ -97,9 +98,9 @@ BOOST_AUTO_TEST_CASE( GivenSeveralEngSectionsShouldReturnByteArrayWithSizeEqualT\n BOOST_AUTO_TEST_CASE( GivenTelemetryDetectorSpyShouldReadFromGivenOffsetsAndSizes ) {\n   auto tmDetectorSpy = std::make_shared<TelemetryDetectorSpy>();\n \n-  auto engSection1 = std::make_shared<TelemetrySection>(0, 128);\n-  auto engSection2 = std::make_shared<TelemetrySection>(45, 33);\n-  auto engSection3 = std::make_shared<TelemetrySection>(987, 123471);\n+  auto engSection1 = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, 128);\n+  auto engSection2 = std::make_shared<LE1_NISP_Entities::TelemetrySection>(45, 33);\n+  auto engSection3 = std::make_shared<LE1_NISP_Entities::TelemetrySection>(987, 123471);\n \n   auto detector = std::make_shared<DetectorFake>();\n   detector->setTelemetryDetector(tmDetectorSpy);\n@@ -112,9 +113,9 @@ BOOST_AUTO_TEST_CASE( GivenTelemetryDetectorSpyShouldReadFromGivenOffsetsAndSize\n }\n \n BOOST_AUTO_TEST_CASE( GivenFakeDetectorShouldReturnTheExpectedByteArray ) {\n-  auto engSection1 = std::make_shared<TelemetrySection>(0, 128);\n-  auto engSection2 = std::make_shared<TelemetrySection>(45, 33);\n-  auto engSection3 = std::make_shared<TelemetrySection>(987, 123456);\n+  auto engSection1 = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, 128);\n+  auto engSection2 = std::make_shared<LE1_NISP_Entities::TelemetrySection>(45, 33);\n+  auto engSection3 = std::make_shared<LE1_NISP_Entities::TelemetrySection>(987, 123456);\n   std::vector<uint8_t> dataVec1(engSection1->getSize(), 0x01);\n   std::vector<uint8_t> dataVec2(engSection2->getSize(), 0x02);\n   std::vector<uint8_t> dataVec3(engSection3->getSize(), 0x03);\n@@ -128,7 +129,7 @@ BOOST_AUTO_TEST_CASE( GivenFakeDetectorShouldReturnTheExpectedByteArray ) {\n   totalData.insert(totalData.end(), dataVec3.begin(), dataVec3.end());\n   auto expectedBytes = ByteArrayVector(totalData).swap16();\n \n-  std::vector<std::shared_ptr<ByteArray>> bytesVec = {dataBytes1, dataBytes2, dataBytes3};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::ByteArray>> bytesVec = {dataBytes1, dataBytes2, dataBytes3};\n   auto tmDetStubReturnCustomBytes = std::make_shared<TmDetStubIterateInputBytes>(bytesVec);\n \n   auto detector = std::make_shared<DetectorFake>();\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/src/EngPixelsOverThresholdFitsWriter_test.cpp": [
                        [
                            "@@ -23,23 +23,24 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//EngPixelsOverThresholdFitsWriter.h\"\n-#include \"LE1_NISP_ProcessScience//DateTimeManagerBoost.h\"\n+#include \"LE1_NISP_Interactors/EngPixelsOverThresholdFitsWriter.h\"\n+#include \"LE1_NISP_Entities/DateTimeBoost.h\"\n \n #include \"ElementsKernel/Temporary.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DateTimeManagerMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorIteratorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMetadataMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ParameterMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ByteArrayMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ExposuresCounterMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ExposureConfigurationMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/PlanningIdMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/TestUtils.h\"\n+#include \"LE1_NISP_Interactors/tests/include/DateTimeManagerMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/DetectorIteratorMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/ExposuresCounterMock.h\"\n+#include \"tests/include/ExposureConfigurationMock.h\"\n+#include \"tests/include/PlanningIdMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/TestUtils.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMetadataMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/ParameterMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/ByteArrayMock.h\"\n \n using Euclid::Fits::MefFile;\n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Interactors;\n+using namespace LE1_NISP_Entities;\n \n struct EngPixelsOverThresholdFitsWriterFixture{\n   EngPixelsOverThresholdFitsWriter writer;\n@@ -56,16 +57,16 @@ struct EngPixelsOverThresholdFitsWriterFixture{\n \n   ~EngPixelsOverThresholdFitsWriterFixture(){}\n \n-  std::shared_ptr<Detector> createDetectorFake(){\n-    DetectorHeader header;\n+  std::shared_ptr<LE1_NISP_Entities::Detector> createDetectorFake(){\n+    LE1_NISP_Entities::DetectorHeader header;\n     header.groupCounter = 1;\n     auto metadata = std::make_shared<DetectorMetadataStubCustomReturns>();\n     metadata->setExposureConfiguration(std::make_shared<ExposureConfigDummy>());\n     metadata->setPlanningId(std::make_shared<PlanningIdDummy>());\n     auto detFake = std::make_shared<DetectorFake>();\n-    detFake->setTelemetryConfiguration(std::make_shared<TelemetryConfiguration>());\n+    detFake->setTelemetryConfiguration(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n     detFake->setMetadata(metadata);    \n-    detFake->setEngData(std::make_shared<ByteArrayStandard>(128));\n+    detFake->setEngData(std::make_shared<LE1_NISP_Entities::ByteArrayStandard>(128));\n     detFake->setHeader(header);\n     return detFake;\n   }\n@@ -182,7 +183,7 @@ BOOST_AUTO_TEST_CASE( GivenDetWithEngDataSizeNotMultipleOfTwoBytesShouldThrowInc\n   det->setEngData(std::make_shared<ByteArraySizeOnly>(1));\n   auto detItrStub = std::make_shared<DetIterStubCustomDetector>(det);\n \n-  BOOST_REQUIRE_THROW(writer.write(detItrStub, outputDir), IncompatibleArraySizeException);\n+  BOOST_REQUIRE_THROW(writer.write(detItrStub, outputDir), LE1_NISP_Entities::IncompatibleArraySizeException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenAnyDetectorWithNumberOfGroupsEqualToZeroShouldThrowDetectorGroupCounterIsZeroException ) {\n@@ -192,7 +193,7 @@ BOOST_AUTO_TEST_CASE( GivenAnyDetectorWithNumberOfGroupsEqualToZeroShouldThrowDe\n   writer.setDateTimeManager(dateTimeManagerStub);\n   writer.setExposuresCounter(exposuresCounterDummy);\n \n-  DetectorHeader header;\n+  LE1_NISP_Entities::DetectorHeader header;\n   header.groupCounter = 0;\n   auto det = std::make_shared<DetectorFake>();\n   auto metadataStub = std::make_shared<DetectorMetadataStubCustomReturns>();\n@@ -201,7 +202,7 @@ BOOST_AUTO_TEST_CASE( GivenAnyDetectorWithNumberOfGroupsEqualToZeroShouldThrowDe\n   det->setEngData(std::make_shared<ByteArraySizeOnly>(128));\n   det->setHeader(header);\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {det, \n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {det,\n                                                       createDetectorFake(), \n                                                       nullptr};\n \n@@ -217,7 +218,7 @@ BOOST_AUTO_TEST_CASE( GivenAnyDetectorGetFromIteratorWithNullDetectorShouldThrow\n   writer.setDateTimeManager(dateTimeManagerStub);\n   writer.setExposuresCounter(exposuresCounterDummy);\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(), \n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(),\n                                                       createDetectorFake(), \n                                                       nullptr};\n \n@@ -234,7 +235,7 @@ BOOST_AUTO_TEST_CASE( GivenAnyDetectorGetFromIteratorWithNullDetectorMetadataSho\n   writer.setExposuresCounter(exposuresCounterDummy);\n \n   auto detNullMetadata = std::make_shared<DetectorDummy>();\n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(), \n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(),\n                                                       createDetectorFake(), \n                                                       detNullMetadata};\n \n@@ -254,7 +255,7 @@ BOOST_AUTO_TEST_CASE( GivenAnyDetectorGetFromIteratorWithNullEngDataShouldThrowN\n   auto metadataStub = std::make_shared<DetectorMetadataStubCustomReturns>();\n   metadataStub->setExposureConfiguration(std::make_shared<ExposureConfigDummy>());\n   detNullEngData->setMetadata(metadataStub);\n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(), \n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(),\n                                                       createDetectorFake(), \n                                                       detNullEngData};\n \n@@ -276,7 +277,7 @@ BOOST_AUTO_TEST_CASE( GivenAnyDetectorWithZeroEngDataSizeShouldThrowZeroEngDataS\n   det->setMetadata(metadataStub); \n   det->setEngData(std::make_shared<ByteArraySizeOnly>(0));\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(), \n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(),\n                                                       createDetectorFake(), \n                                                       det};\n \n@@ -292,15 +293,15 @@ BOOST_AUTO_TEST_CASE( GivenAnyDetectorWithEngDataNumberOfValuesHigherThanMaxAllo\n   writer.setDateTimeManager(dateTimeManagerStub);\n   writer.setExposuresCounter(exposuresCounterDummy);\n \n-  auto tmConfig = std::make_shared<TelemetryConfiguration>();\n+  auto tmConfig = std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>();\n   tmConfig->setEngDebugMaxNumberOfValues(16);\n   auto det = createDetectorFake();\n-  DetectorHeader header;\n+  LE1_NISP_Entities::DetectorHeader header;\n   header.groupCounter = 1;\n   det->setTelemetryConfiguration(tmConfig);\n-  det->setEngData(std::make_shared<ByteArrayStandard>(128));\n+  det->setEngData(std::make_shared<LE1_NISP_Entities::ByteArrayStandard>(128));\n   det->setHeader(header);\n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(), \n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(),\n                                                       createDetectorFake(), \n                                                       det};\n \n@@ -316,7 +317,7 @@ BOOST_AUTO_TEST_CASE( GivenExistingOutputDirectoryShouldGenerateOneFitsAtTheSpec\n   writer.setDateTimeManager(dateTimeManagerStub);\n   writer.setExposuresCounter(exposuresCounterDummy);\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake()};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake()};\n \n   auto detIterStub = std::make_shared<DetIterStubDetVector>(detectors);\n \n@@ -334,7 +335,7 @@ BOOST_AUTO_TEST_CASE( GivenExistingOutputDirectoryNoSlashEndingShouldGenerateOne\n   writer.setDateTimeManager(dateTimeManagerStub);\n   writer.setExposuresCounter(exposuresCounterDummy);\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake()};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake()};\n   auto detIterStub = std::make_shared<DetIterStubDetVector>(detectors);\n \n   writer.write(detIterStub, outputDir);\n@@ -351,7 +352,7 @@ BOOST_AUTO_TEST_CASE( GivenNotExistingOutputDirectoryShouldThrowOutputDirectoryD\n   writer.setDateTimeManager(dateTimeManagerStub);\n   writer.setExposuresCounter(exposuresCounterDummy);\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake()};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake()};\n   auto detIterStub = std::make_shared<DetIterStubDetVector>(detectors);\n \n   BOOST_REQUIRE_THROW(writer.write(detIterStub, outputDir), OutputDirectoryDoesNotExistsException);\n@@ -373,7 +374,7 @@ BOOST_AUTO_TEST_CASE( GivenValidInputsShouldCreateFitsWithExpectedKeywordsInPrim\n       \"T_RESETS\", \"T_DROPL1\", \"T_DROPL2\", \"S_OFFSET\", \"S_FACTOR\"\n   };\n \n-  std::map<std::string, std::shared_ptr<ParameterInterface>> params;\n+  std::map<std::string, std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> params;\n   for(auto const &keyword: primaryKeywords)\n     params.insert({keyword, std::make_shared<ParameterStubNameOnly>(keyword)});\n \n@@ -407,7 +408,7 @@ BOOST_AUTO_TEST_CASE( GivenValidInputsShouldCreateFitsWithExpectedKeywordsInExte\n       \"DPU_ID\", \"MASTER\"\n   };\n \n-  std::map<std::string, std::shared_ptr<ParameterInterface>> params;\n+  std::map<std::string, std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> params;\n   for(auto const &keyword: expectedKeywords)\n     params.insert({keyword, std::make_shared<ParameterStubNameOnly>(keyword)});\n \n@@ -441,7 +442,7 @@ BOOST_AUTO_TEST_CASE( GivenValidInputsShouldCreateFitsWithoutWcsKeywordsInExtens\n       \"CD1_1\", \"CD1_2\", \"CD2_1\", \"CD2_2\"\n   };\n \n-  std::map<std::string, std::shared_ptr<ParameterInterface>> params;\n+  std::map<std::string, std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> params;\n   for(auto const &keyword: wcsKeywords)\n     params.insert({keyword, std::make_shared<ParameterStubNameOnly>(keyword)});\n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/src/EngUncompressedImageFitsWriter_test.cpp": [
                        [
                            "@@ -23,22 +23,22 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//EngUncompressedImageFitsWriter.h\"\n-#include \"LE1_NISP_ProcessScience//DateTimeManagerBoost.h\"\n+#include \"LE1_NISP_Interactors/EngUncompressedImageFitsWriter.h\"\n+#include \"LE1_NISP_Entities/DateTimeBoost.h\"\n \n #include \"ElementsKernel/Temporary.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DateTimeManagerMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorIteratorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMetadataMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ParameterMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ByteArrayMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ExposuresCounterMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ExposureConfigurationMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/PlanningIdMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/TestUtils.h\"\n-\n-using namespace LE1_NISP_ProcessScience;\n+#include \"LE1_NISP_Entities/tests/include/DetectorMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMetadataMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/ByteArrayMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/DateTimeManagerMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/DetectorIteratorMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/ExposuresCounterMock.h\"\n+#include \"tests/include/ExposureConfigurationMock.h\"\n+#include \"tests/include/PlanningIdMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/TestUtils.h\"\n+\n+using namespace LE1_NISP_Interactors;\n+using namespace LE1_NISP_Entities;\n \n struct EngUncompressedImageFitsWriterFixture{\n   \n@@ -48,7 +48,7 @@ struct EngUncompressedImageFitsWriterFixture{\n     exposuresCounterDummy = std::make_shared<ExposuresCounterDummy>();\n   }\n \n-  std::shared_ptr<Detector> createDetectorFake(const DetectorId &detId = DetectorId(), const std::string &prodId = \"\"){\n+  std::shared_ptr<LE1_NISP_Entities::Detector> createDetectorFake(const LE1_NISP_Entities::DetectorId &detId = LE1_NISP_Entities::DetectorId(), const std::string &prodId = \"\"){\n     auto metadata = std::make_shared<DetectorMetadataStubCustomReturns>();\n     metadata->setExposureConfiguration(std::make_shared<ExposureConfigDummy>());\n     metadata->setPlanningId(std::make_shared<PlanningIdDummy>());\n@@ -56,9 +56,9 @@ struct EngUncompressedImageFitsWriterFixture{\n     metadata->setProductId(prodId);\n     auto detFake = std::make_shared<DetectorFake>();\n     detFake->setMetadata(metadata);\n-    auto tmConfig = std::make_shared<TelemetryConfiguration>();\n+    auto tmConfig = std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>();\n     auto engDataSize = tmConfig->getDetectorPxSize() * sizeof(unsigned short);\n-    detFake->setEngData(std::make_shared<ByteArrayStandard>(engDataSize));\n+    detFake->setEngData(std::make_shared<LE1_NISP_Entities::ByteArrayStandard>(engDataSize));\n     detFake->setTelemetryConfiguration(tmConfig);\n     return detFake;\n   }\n@@ -118,7 +118,7 @@ BOOST_AUTO_TEST_CASE( GivenDetWithEngDataSizeNotMultipleOfTwoBytesShouldThrowInc\n   det->setEngData(std::make_shared<ByteArraySizeOnly>(1));\n   auto detItrStub = std::make_shared<DetIterStubCustomDetector>(det);\n \n-  BOOST_REQUIRE_THROW(writer.write(detItrStub, outputDir), IncompatibleArraySizeException);\n+  BOOST_REQUIRE_THROW(writer.write(detItrStub, outputDir), LE1_NISP_Entities::IncompatibleArraySizeException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenEngDataWithSizeDifferentFromNominalUncompressedDetectorImageSizeShouldThrowIncompatibleEngDataSize ) {\n@@ -128,9 +128,9 @@ BOOST_AUTO_TEST_CASE( GivenEngDataWithSizeDifferentFromNominalUncompressedDetect\n   EngUncompressedImageFitsWriter writer(dateTimeManagerStub, exposuresCounterDummy);\n \n   auto detIncompatibleSize = createDetectorFake();\n-  detIncompatibleSize->setEngData(std::make_shared<ByteArrayStandard>(128));\n+  detIncompatibleSize->setEngData(std::make_shared<LE1_NISP_Entities::ByteArrayStandard>(128));\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(), \n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(),\n                                                       createDetectorFake(), \n                                                       detIncompatibleSize};\n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/src/EngUnprocessedGroupsFitsWriter_test.cpp": [
                        [
                            "@@ -23,23 +23,24 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//EngUnprocessedGroupsFitsWriter.h\"\n-#include \"LE1_NISP_ProcessScience//DateTimeManagerBoost.h\"\n+#include \"LE1_NISP_Interactors/EngUnprocessedGroupsFitsWriter.h\"\n+#include \"LE1_NISP_Entities/DateTimeBoost.h\"\n \n #include \"ElementsKernel/Temporary.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DateTimeManagerMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorIteratorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMetadataMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ParameterMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ByteArrayMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ExposuresCounterMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ExposureConfigurationMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/PlanningIdMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/TestUtils.h\"\n+#include \"LE1_NISP_Interactors/tests/include/DateTimeManagerMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/DetectorIteratorMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/ExposuresCounterMock.h\"\n+#include \"tests/include/ExposureConfigurationMock.h\"\n+#include \"tests/include/PlanningIdMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/TestUtils.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMetadataMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/ParameterMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/ByteArrayMock.h\"\n \n using Euclid::Fits::MefFile;\n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Interactors;\n+using namespace LE1_NISP_Entities;\n \n struct EngUnprocessedGroupsFitsWriterFixture_test{\n   \n@@ -53,8 +54,8 @@ struct EngUnprocessedGroupsFitsWriterFixture_test{\n     expConfigStub->setGwaPos(\"gwa\");\n   }\n \n-  std::shared_ptr<Detector> createDetectorFake(const DetectorId &detId = DetectorId(), const std::string &prodId = \"\"){\n-    DetectorHeader header;\n+  std::shared_ptr<LE1_NISP_Entities::Detector> createDetectorFake(const LE1_NISP_Entities::DetectorId &detId = LE1_NISP_Entities::DetectorId(), const std::string &prodId = \"\"){\n+    LE1_NISP_Entities::DetectorHeader header;\n     auto metadata = std::make_shared<DetectorMetadataStubCustomReturns>();\n     metadata->setExposureConfiguration(std::make_shared<ExposureConfigDummy>());\n     metadata->setPlanningId(std::make_shared<PlanningIdDummy>());\n@@ -62,12 +63,12 @@ struct EngUnprocessedGroupsFitsWriterFixture_test{\n     metadata->setProductId(prodId);\n     auto detFake = std::make_shared<DetectorFake>();\n     detFake->setMetadata(metadata);\n-    auto tmConfig = std::make_shared<TelemetryConfiguration>();\n+    auto tmConfig = std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>();\n     auto engDataSize = tmConfig->getDetectorPxSize() * 2;\n     auto groups = 1;\n     header.groupCounter = groups;\n     detFake->setHeader(header);\n-    detFake->setEngData(std::make_shared<ByteArrayStandard>(engDataSize * groups));\n+    detFake->setEngData(std::make_shared<LE1_NISP_Entities::ByteArrayStandard>(engDataSize * groups));\n     detFake->setTelemetryConfiguration(tmConfig);\n     return detFake;\n   }\n@@ -198,7 +199,7 @@ BOOST_AUTO_TEST_CASE( GivenDetWithEngDataSizeNotMultipleOfTwoBytesShouldThrowInc\n   det->setEngData(std::make_shared<ByteArraySizeOnly>(1));\n   auto detItrStub = std::make_shared<DetIterStubCustomDetector>(det);\n \n-  BOOST_REQUIRE_THROW(writer.write(detItrStub, outputDir), IncompatibleArraySizeException);\n+  BOOST_REQUIRE_THROW(writer.write(detItrStub, outputDir), LE1_NISP_Entities::IncompatibleArraySizeException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenAnyDetWithEngDataSizeDifferentFromGroupsCntMultipliedByDetPxSizeShouldThrowIncompatibleEngDataSize ) {\n@@ -209,9 +210,9 @@ BOOST_AUTO_TEST_CASE( GivenAnyDetWithEngDataSizeDifferentFromGroupsCntMultiplied\n   writer.setExposuresCounter(exposuresCounterDummy);\n \n   auto detIncompatibleSize = createDetectorFake();\n-  detIncompatibleSize->setEngData(std::make_shared<ByteArrayStandard>(128));\n+  detIncompatibleSize->setEngData(std::make_shared<LE1_NISP_Entities::ByteArrayStandard>(128));\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(), \n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(),\n                                                       createDetectorFake(), \n                                                       detIncompatibleSize};\n \n@@ -227,7 +228,7 @@ BOOST_AUTO_TEST_CASE( GivenAnyDetectorGetFromIteratorWithNullDetectorShouldThrow\n   writer.setDateTimeManager(dateTimeManagerStub);\n   writer.setExposuresCounter(exposuresCounterDummy);\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(), \n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(),\n                                                       createDetectorFake(), \n                                                       nullptr};\n \n@@ -244,7 +245,7 @@ BOOST_AUTO_TEST_CASE( GivenAnyDetectorGetFromIteratorWithNullDetectorMetadataSho\n   writer.setExposuresCounter(exposuresCounterDummy);\n \n   auto detNullMetadata = std::make_shared<DetectorDummy>();\n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(), \n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(),\n                                                       createDetectorFake(), \n                                                       detNullMetadata};\n \n@@ -264,7 +265,7 @@ BOOST_AUTO_TEST_CASE( GivenAnyDetectorGetFromIteratorWithNullEngDataShouldThrowN\n   auto metadataStub = std::make_shared<DetectorMetadataStubCustomReturns>();\n   metadataStub->setExposureConfiguration(std::make_shared<ExposureConfigDummy>());\n   detNullEngData->setMetadata(metadataStub);\n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(), \n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(),\n                                                       createDetectorFake(), \n                                                       detNullEngData};\n \n@@ -280,7 +281,7 @@ BOOST_AUTO_TEST_CASE( GivenValidInputsShouldCreateOneFileForEachDetectorsAtTheSp\n   writer.setDateTimeManager(dateTimeManagerStub);\n   writer.setExposuresCounter(exposuresCounterDummy);\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(DetectorId(0, 0, \"01\")),\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(DetectorId(0, 0, \"01\")),\n                                                       createDetectorFake(DetectorId(0, 0, \"02\"))};\n \n   auto detIterStub = std::make_shared<DetIterStubDetVector>(detectors);\n@@ -297,7 +298,7 @@ BOOST_AUTO_TEST_CASE( GivenExistingOutputDirectoryShouldGenerateOneFitsAtTheSpec\n   writer.setDateTimeManager(dateTimeManagerStub);\n   writer.setExposuresCounter(exposuresCounterDummy);\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(DetectorId(0, 0, \"01\"))};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(DetectorId(0, 0, \"01\"))};\n \n   auto detIterStub = std::make_shared<DetIterStubDetVector>(detectors);\n \n@@ -315,7 +316,7 @@ BOOST_AUTO_TEST_CASE( GivenExistingOutputDirectoryNoSlashEndingShouldGenerateOne\n   writer.setDateTimeManager(dateTimeManagerStub);\n   writer.setExposuresCounter(exposuresCounterDummy);\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(DetectorId(0, 0, \"01\"))};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(DetectorId(0, 0, \"01\"))};\n   auto detIterStub = std::make_shared<DetIterStubDetVector>(detectors);\n \n   writer.write(detIterStub, outputDir);\n@@ -332,7 +333,7 @@ BOOST_AUTO_TEST_CASE( GivenNotExistingOutputDirectoryShouldThrowOutputDirectoryD\n   writer.setDateTimeManager(dateTimeManagerStub);\n   writer.setExposuresCounter(exposuresCounterDummy);\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(DetectorId(0, 0, \"01\"))};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(DetectorId(0, 0, \"01\"))};\n   auto detIterStub = std::make_shared<DetIterStubDetVector>(detectors);\n \n   BOOST_REQUIRE_THROW(writer.write(detIterStub, outputDir), OutputDirectoryDoesNotExistsException);\n@@ -342,11 +343,13 @@ BOOST_AUTO_TEST_CASE( GivenValidInputsShouldCreateOneProductWithExpectedFilename\n   Elements::TempDir tmpDir;\n   std::string outputDir = std::string(tmpDir.path().c_str());\n \n-  dateTimeManagerStub->setDateTimeIsoStr(\"20210201T122830\");\n+  std::string expectedIsoString = \"20230701T000000.000000\";\n \n-  auto expectedFilename = \"product-id_ENG_DPU0_DET01_\" + dateTimeManagerStub->getDateTimeIsoStr() + \"Z.fits\";\n+  auto expectedFilename = \"product-id_ENG_DPU0_DET01_\" + expectedIsoString + \"Z.fits\";\n \n-  auto detFake = createDetectorFake(DetectorId(0, 0, \"01\"), \"product-id\");  \n+  dateTimeManagerStub->setDateTime(std::make_shared<DateTimeFake>(2023, 7, 1, 0, 0, 0, 0, 0, expectedIsoString, \"\", 0));\n+\n+  auto detFake = createDetectorFake(DetectorId(0, 0, \"01\"), \"product-id\");\n   auto detIterStub = std::make_shared<DetIterStubCustomDetector>(detFake);\n   \n   writer.setDateTimeManager(dateTimeManagerStub);\n@@ -360,12 +363,14 @@ BOOST_AUTO_TEST_CASE( GivenValidInputsShouldReturnTheExpectedWrittenFilenames )\n   Elements::TempDir tmpDir;\n   std::string outputDir = std::string(tmpDir.path().c_str());\n \n-  dateTimeManagerStub->setDateTimeIsoStr(\"20210201T122830\");\n+  std::string expectedIsoString = \"20230701T000000.000000\";\n+\n+  auto expectedFilename1 = \"product-id_ENG_DPU0_DET01_\" + expectedIsoString + \"Z.fits\";\n+  auto expectedFilename2 = \"product-id_ENG_DPU0_DET02_\" + expectedIsoString + \"Z.fits\";\n \n-  auto expectedFilename1 = \"product-id_ENG_DPU0_DET01_\" + dateTimeManagerStub->getDateTimeIsoStr() + \"Z.fits\";\n-  auto expectedFilename2 = \"product-id_ENG_DPU0_DET02_\" + dateTimeManagerStub->getDateTimeIsoStr() + \"Z.fits\";\n+  dateTimeManagerStub->setDateTime(std::make_shared<DateTimeFake>(2023, 7, 1, 0, 0, 0, 0, 0, expectedIsoString, \"\", 0));\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(DetectorId(0, 0, \"01\"), \"product-id\"),\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(DetectorId(0, 0, \"01\"), \"product-id\"),\n                                                       createDetectorFake(DetectorId(0, 0, \"02\"), \"product-id\")};\n \n   auto detIterStub = std::make_shared<DetIterStubDetVector>(detectors);\n@@ -382,7 +387,7 @@ BOOST_AUTO_TEST_CASE( GivenValidInputsShouldReturnTheExpectedNumberOfFilenamesAf\n   Elements::TempDir tmpDir;\n   std::string outputDir = std::string(tmpDir.path().c_str());\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(DetectorId(0, 0, \"01\")),\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(DetectorId(0, 0, \"01\")),\n                                                       createDetectorFake(DetectorId(0, 0, \"02\"))};\n \n   auto detIterStub = std::make_shared<DetIterStubDetVector>(detectors);\n@@ -410,7 +415,7 @@ BOOST_AUTO_TEST_CASE( GivenValidInputsShouldCreateFitsWithExpectedKeywordsInExte\n       \"DPU_ID\", \"MASTER\", \"FRGROUP\"\n   };\n \n-  std::map<std::string, std::shared_ptr<ParameterInterface>> params;\n+  std::map<std::string, std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> params;\n   for(auto const &keyword: expectedKeywords)\n     params.insert({keyword, std::make_shared<ParameterStubNameOnly>(keyword)});\n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/src/ErrorsDecoder_test.cpp": [
                        [
                            "@@ -23,20 +23,21 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//ErrorsDecoder.h\"\n+#include \"LE1_NISP_Interactors/ErrorsDecoder.h\"\n \n-#include \"LE1_NISP_ProcessScience/tests/include/DecompressorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/TelemetryDetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMetadataMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ByteArrayMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/DecompressorMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/TelemetryDetectorMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMetadataMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/ByteArrayMock.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Interactors;\n+using namespace LE1_NISP_Entities;\n \n struct ErrorsDecoderFixture{\n   std::shared_ptr<Decompressor> decompressorDummy;\n-  std::shared_ptr<TelemetryDetectorInterface> tmDetReturnInputSizeArray;\n-  std::shared_ptr<DetectorMetadata> metadataDummy;\n+  std::shared_ptr<LE1_NISP_Entities::TelemetryDetectorInterface> tmDetReturnInputSizeArray;\n+  std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> metadataDummy;\n   \n   ErrorsDecoderFixture(){\n     decompressorDummy = std::make_shared<DecompressorDummy>();\n@@ -82,14 +83,14 @@ BOOST_AUTO_TEST_CASE( GivenNullTelemetryConfigShouldThrowNullTelemetryConfigurat\n \n   ErrorsDecoder decoder(decompressorDummy);\n \n-  BOOST_REQUIRE_THROW(decoder.decode(detector), NullTelemetryConfigurationException);\n+  BOOST_REQUIRE_THROW(decoder.decode(detector), LE1_NISP_Entities::NullTelemetryConfigurationException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenNullErrorsSectionShouldThrowNullErrorsSectionException ) {\n   auto detector = std::make_shared<DetectorFake>();\n   detector->setMetadata(metadataDummy);\n   detector->setTelemetryDetector(std::make_shared<TelemetryDetectorDummy>());\n-  detector->setTelemetryConfiguration(std::make_shared<TelemetryConfiguration>());\n+  detector->setTelemetryConfiguration(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   detector->setErrorsSection(nullptr);\n \n   ErrorsDecoder decoder(decompressorDummy);\n@@ -100,12 +101,12 @@ BOOST_AUTO_TEST_CASE( GivenNullErrorsSectionShouldThrowNullErrorsSectionExceptio\n BOOST_AUTO_TEST_CASE( GivenNotCompressedDataShouldReturnExpectedByteArray ) {\n   auto expectedData = std::make_shared<ByteArrayRandom>(128);\n   auto tmDetectorFake = std::make_shared<TmDetSpyReturnDefaultByteArray>(expectedData);\n-  auto tmSection = std::make_shared<TelemetrySection>(0, expectedData->getSize());\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, expectedData->getSize());\n \n   auto detector = std::make_shared<DetectorFake>();\n   detector->setMetadata(metadataDummy);\n   detector->setTelemetryDetector(tmDetectorFake);\n-  detector->setTelemetryConfiguration(std::make_shared<TelemetryConfiguration>());\n+  detector->setTelemetryConfiguration(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   detector->setErrorsSection(tmSection);\n   detector->setIsErrorsCompressed(false);\n \n@@ -118,13 +119,13 @@ BOOST_AUTO_TEST_CASE( GivenNotCompressedDataShouldReturnExpectedByteArray ) {\n BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldReturnExpectedByteArray ) {\n   auto expectedData = std::make_shared<ByteArrayRandom>(128);\n   auto tmDetectorFake = std::make_shared<TmDetSpyReturnDefaultByteArray>(expectedData);\n-  auto tmSection = std::make_shared<TelemetrySection>(0, expectedData->getSize());\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, expectedData->getSize());\n   auto decompressorReturnInput = std::make_shared<DecompressorSpyReturnInput>();\n \n   auto detector = std::make_shared<DetectorFake>();\n   detector->setMetadata(metadataDummy);\n   detector->setTelemetryDetector(tmDetectorFake);\n-  detector->setTelemetryConfiguration(std::make_shared<TelemetryConfiguration>());\n+  detector->setTelemetryConfiguration(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   detector->setErrorsSection(tmSection);\n   detector->setIsErrorsCompressed(true);\n \n@@ -135,11 +136,11 @@ BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldReturnExpectedByteArray ) {\n }\n \n BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldDecompressThemUsingExpectedDecompressionParams ) {\n-  CompressionParams expectedParams(1, 3, 6, 5*4);\n+  LE1_NISP_Entities::CompressionParams expectedParams(1, 3, 6, 5*4);\n \n   auto expectedData = std::make_shared<ByteArrayRandom>(128);\n   auto tmDetectorFake = std::make_shared<TmDetStubReturnEmptyArrayInputSize>();\n-  auto tmSection = std::make_shared<TelemetrySection>(0, expectedData->getSize());\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, expectedData->getSize());\n   auto decompressorSpy = std::make_shared<DecompressorSpyReturnInput>();\n \n   auto metadataFake = std::make_shared<DetectorMetadataStubCustomReturns>();\n@@ -147,10 +148,10 @@ BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldDecompressThemUsingExpectedDecomp\n   metadataFake->setUsedComprFundSeqPar1(2);\n   metadataFake->setUsedComprFundSeqPar2(3);\n \n-  auto tmConfig = std::make_shared<TelemetryConfiguration>();\n+  auto tmConfig = std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>();\n   tmConfig->setErrorValuesPerGroup(4);\n \n-  DetectorHeader header;\n+  LE1_NISP_Entities::DetectorHeader header;\n   header.groupCounter = 5;\n \n   auto detector = std::make_shared<DetectorFake>();\n@@ -172,10 +173,10 @@ BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldDecompressThemUsingExpectedMaxSiz\n \n   auto expectedData = std::make_shared<ByteArrayRandom>(128);\n   auto tmDetectorFake = std::make_shared<TmDetStubReturnEmptyArrayInputSize>();\n-  auto tmSection = std::make_shared<TelemetrySection>(0, expectedData->getSize());\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, expectedData->getSize());\n   auto decompressorSpy = std::make_shared<DecompressorSpyReturnInput>();\n \n-  auto tmConfig = std::make_shared<TelemetryConfiguration>();\n+  auto tmConfig = std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>();\n   tmConfig->setErrorDataMaxSize(expectedComprMaxSize);\n \n   auto detector = std::make_shared<DetectorFake>();\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/src/ExposuresCounter_test.cpp": [
                        [
                            "@@ -23,9 +23,9 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//ExposuresCounter.h\"\n+#include \"LE1_NISP_Interactors/ExposuresCounter.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Interactors;\n \n BOOST_AUTO_TEST_SUITE (ExposuresCounter_test)\n \n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/src/HistoryDecoder_test.cpp": [
                        [
                            "@@ -23,20 +23,21 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//HistoryDecoder.h\"\n+#include \"LE1_NISP_Interactors/HistoryDecoder.h\"\n \n-#include \"LE1_NISP_ProcessScience/tests/include/DecompressorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/TelemetryDetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMetadataMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ByteArrayMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/DecompressorMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/TelemetryDetectorMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMetadataMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/ByteArrayMock.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Interactors;\n+using namespace LE1_NISP_Entities;\n \n struct HistoryDecoderFixture{\n   std::shared_ptr<Decompressor> decompressorDummy;\n-  std::shared_ptr<TelemetryDetectorInterface> tmDetReturnInputSizeArray;\n-  std::shared_ptr<DetectorMetadata> metadataDummy;\n+  std::shared_ptr<LE1_NISP_Entities::TelemetryDetectorInterface> tmDetReturnInputSizeArray;\n+  std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> metadataDummy;\n   \n   HistoryDecoderFixture(){\n     decompressorDummy = std::make_shared<DecompressorDummy>();\n@@ -82,14 +83,14 @@ BOOST_AUTO_TEST_CASE( GivenNullTelemetryConfigShouldThrowNullTelemetryConfigurat\n \n   HistoryDecoder decoder(decompressorDummy);\n \n-  BOOST_REQUIRE_THROW(decoder.decode(detector), NullTelemetryConfigurationException);\n+  BOOST_REQUIRE_THROW(decoder.decode(detector), LE1_NISP_Entities::NullTelemetryConfigurationException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenNullHistorySectionShouldThrowNullHistorySectionException ) {\n   auto detector = std::make_shared<DetectorFake>();\n   detector->setMetadata(metadataDummy);\n   detector->setTelemetryDetector(std::make_shared<TelemetryDetectorDummy>());\n-  detector->setTelemetryConfiguration(std::make_shared<TelemetryConfiguration>());\n+  detector->setTelemetryConfiguration(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   detector->setHistorySection(nullptr);\n \n   HistoryDecoder decoder(decompressorDummy);\n@@ -100,12 +101,12 @@ BOOST_AUTO_TEST_CASE( GivenNullHistorySectionShouldThrowNullHistorySectionExcept\n BOOST_AUTO_TEST_CASE( GivenNotCompressedDataShouldReturnExpectedByteArray ) {\n   auto expectedData = std::make_shared<ByteArrayRandom>(128);\n   auto tmDetectorFake = std::make_shared<TmDetSpyReturnDefaultByteArray>(expectedData);\n-  auto tmSection = std::make_shared<TelemetrySection>(0, expectedData->getSize());\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, expectedData->getSize());\n \n   auto detector = std::make_shared<DetectorFake>();\n   detector->setMetadata(metadataDummy);\n   detector->setTelemetryDetector(tmDetectorFake);\n-  detector->setTelemetryConfiguration(std::make_shared<TelemetryConfiguration>());\n+  detector->setTelemetryConfiguration(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   detector->setHistorySection(tmSection);\n   detector->setIsHistoryCompressed(false);\n \n@@ -118,13 +119,13 @@ BOOST_AUTO_TEST_CASE( GivenNotCompressedDataShouldReturnExpectedByteArray ) {\n BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldReturnExpectedByteArray ) {\n   auto expectedData = std::make_shared<ByteArrayRandom>(128);\n   auto tmDetectorFake = std::make_shared<TmDetSpyReturnDefaultByteArray>(expectedData);\n-  auto tmSection = std::make_shared<TelemetrySection>(0, expectedData->getSize());\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, expectedData->getSize());\n   auto decompressorReturnInput = std::make_shared<DecompressorSpyReturnInput>();\n \n   auto detector = std::make_shared<DetectorFake>();\n   detector->setMetadata(metadataDummy);\n   detector->setTelemetryDetector(tmDetectorFake);\n-  detector->setTelemetryConfiguration(std::make_shared<TelemetryConfiguration>());\n+  detector->setTelemetryConfiguration(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   detector->setHistorySection(tmSection);\n   detector->setIsHistoryCompressed(true);\n \n@@ -135,11 +136,11 @@ BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldReturnExpectedByteArray ) {\n }\n \n BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldDecompressThemUsingExpectedDecompressionParams ) {\n-  CompressionParams expectedParams(1, 2, 3, 4*5);\n+  LE1_NISP_Entities::CompressionParams expectedParams(1, 2, 3, 4*5);\n \n   auto expectedData = std::make_shared<ByteArrayRandom>(128);\n   auto tmDetectorFake = std::make_shared<TmDetStubReturnEmptyArrayInputSize>();\n-  auto tmSection = std::make_shared<TelemetrySection>(0, expectedData->getSize());\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, expectedData->getSize());\n   auto decompressorSpy = std::make_shared<DecompressorSpyReturnInput>();\n \n   auto metadataFake = std::make_shared<DetectorMetadataStubCustomReturns>();\n@@ -147,7 +148,7 @@ BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldDecompressThemUsingExpectedDecomp\n   metadataFake->setUsedComprFundSeqPar1(2);\n   metadataFake->setUsedComprFundSeqPar2(3);\n \n-  auto tmConfig = std::make_shared<TelemetryConfiguration>();\n+  auto tmConfig = std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>();\n   tmConfig->setHistoryNumberOfValues(4);\n   tmConfig->setMaxGroups(5);\n \n@@ -169,10 +170,10 @@ BOOST_AUTO_TEST_CASE( GivenCompressedDataShouldDecompressThemUsingExpectedMaxSiz\n \n   auto expectedData = std::make_shared<ByteArrayRandom>(128);\n   auto tmDetectorFake = std::make_shared<TmDetStubReturnEmptyArrayInputSize>();\n-  auto tmSection = std::make_shared<TelemetrySection>(0, expectedData->getSize());\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, expectedData->getSize());\n   auto decompressorSpy = std::make_shared<DecompressorSpyReturnInput>();\n \n-  auto tmConfig = std::make_shared<TelemetryConfiguration>();\n+  auto tmConfig = std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>();\n   tmConfig->setHistoryDataMaxSize(expectedComprMaxSize);\n \n   auto detector = std::make_shared<DetectorFake>();\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/src/HkWriterElFitsIO_test.cpp": [
                        [
                            "@@ -25,22 +25,24 @@\n \n #include \"ElementsKernel/Temporary.h\"\n \n-#include \"LE1_NISP_ProcessScience//HkWriterElFitsIO.h\"\n-#include \"LE1_NISP_ProcessScience//DateTimeManagerBoost.h\"\n-\n-#include \"LE1_NISP_ProcessScience/tests/include/DateTimeManagerMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorIteratorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMetadataMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ParameterMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ByteArrayMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ExposureConfigurationMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/TestUtils.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/PlanningIdMock.h\"\n-\n-using namespace LE1_NISP_ProcessScience;\n+#include \"LE1_NISP_Interactors/HkWriterElFitsIO.h\"\n+#include \"LE1_NISP_Entities/DateTimeBoost.h\"\n+\n+#include \"LE1_NISP_Interactors/tests/include/DateTimeManagerMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/DetectorIteratorMock.h\"\n+#include \"tests/include/ExposureConfigurationMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/TestUtils.h\"\n+#include \"tests/include/PlanningIdMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMetadataMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/ParameterMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/ByteArrayMock.h\"\n+\n+using namespace LE1_NISP_Interactors;\n+using namespace LE1_NISP_Entities;\n using Euclid::Fits::MefFile;\n using Euclid::Fits::PtrRaster;\n+\n struct HkWriterElFitsIOFixture_test{\n   \n   HkWriterElFitsIOFixture_test(){\n@@ -50,16 +52,16 @@ struct HkWriterElFitsIOFixture_test{\n     expConfigDummy = std::make_shared<ExposureConfigDummy>();\n   }\n \n-  std::shared_ptr<Detector> createDetectorFake(const uint8_t groups = 0, const uint8_t framesPerGroup = 0, const DetectorId &id = DetectorId()){\n+  std::shared_ptr<LE1_NISP_Entities::Detector> createDetectorFake(const uint8_t groups = 0, const uint8_t framesPerGroup = 0, const LE1_NISP_Entities::DetectorId &id = LE1_NISP_Entities::DetectorId()){\n     auto detFake = std::make_shared<DetectorFake>();\n     detFake->setId(id);\n     detFake->setMetadata(createMetadataFake(groups, framesPerGroup));\n     detFake->setRawlines(std::make_shared<ByteArrayVector>());\n     detFake->setErrorsData(std::make_shared<ByteArrayVector>());\n     size_t size = groups*framesPerGroup*sizeof(uint16_t);\n-    detFake->setHistoryData(std::make_shared<ByteArrayStandard>(size));\n+    detFake->setHistoryData(std::make_shared<LE1_NISP_Entities::ByteArrayStandard>(size));\n     detFake->setAnalogTelemetry(std::make_shared<ByteArrayVector>());\n-    detFake->setTelemetryConfiguration( std::make_shared<TelemetryConfiguration>());\n+    detFake->setTelemetryConfiguration( std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n     return detFake;\n   }\n \n@@ -122,7 +124,7 @@ BOOST_AUTO_TEST_CASE( GivenAnyDetectorGetFromIteratorWithNullDetectorShouldThrow\n \n   writer.setDateTimeManager(dateTimeManagerStub);\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(), \n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(),\n                                                       createDetectorFake(), \n                                                       nullptr};\n \n@@ -138,7 +140,7 @@ BOOST_AUTO_TEST_CASE( GivenAnyDetectorGetFromIteratorWithNullDetectorMetadataSho\n   writer.setDateTimeManager(dateTimeManagerStub);\n \n   auto detNullMetadata = std::make_shared<DetectorDummy>();\n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(), \n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(),\n                                                       createDetectorFake(), \n                                                       detNullMetadata};\n \n@@ -156,7 +158,7 @@ BOOST_AUTO_TEST_CASE( GivenAnyDetectorWithNullErrorsShouldThrowNullErrorsByteArr\n   auto detNullErrors = createDetectorFake();\n   detNullErrors->setErrorsData(nullptr);\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(), \n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(),\n                                                       createDetectorFake(), \n                                                       detNullErrors};\n \n@@ -174,7 +176,7 @@ BOOST_AUTO_TEST_CASE( GivenAnyDetectorWithNullHistoryDataShouldThrowNullHistoryB\n   auto detNullHistory = createDetectorFake();\n   detNullHistory->setHistoryData(nullptr);\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(), \n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(),\n                                                       createDetectorFake(), \n                                                       detNullHistory};\n \n@@ -189,12 +191,12 @@ BOOST_AUTO_TEST_CASE( GivenAnyDetectorWithAnalogTmSizeHigherThanZeroButDifferent\n \n   writer.setDateTimeManager(dateTimeManagerStub);\n \n-  auto tmConfig = std::make_shared<TelemetryConfiguration>();\n+  auto tmConfig = std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>();\n   tmConfig->setAnalogTelemetryMaxSize(32);\n   auto detWrongAnalogTmSize = createDetectorFake();\n-  detWrongAnalogTmSize->setAnalogTelemetry(std::make_shared<ByteArraySizeOnly>(16)); \n+  detWrongAnalogTmSize->setAnalogTelemetry(std::make_shared<ByteArraySizeOnly>(16));\n   detWrongAnalogTmSize->setTelemetryConfiguration(tmConfig); \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(), \n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(),\n                                                       createDetectorFake(), \n                                                       detWrongAnalogTmSize};\n \n@@ -215,9 +217,9 @@ BOOST_AUTO_TEST_CASE( GivenAnyDetectorWithHistorySizeLowerThanFramePerGroupxNumb\n   auto detWrongHistSize = createDetectorFake();\n   auto metadata = createMetadataFake(groups, framesPerGroup);\n   detWrongHistSize->setMetadata(metadata);\n-  detWrongHistSize->setHistoryData(std::make_shared<ByteArraySizeOnly>(groups*2)); \n+  detWrongHistSize->setHistoryData(std::make_shared<ByteArraySizeOnly>(groups*2));\n   \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(), \n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(),\n                                                       createDetectorFake(), \n                                                       detWrongHistSize};\n \n@@ -235,7 +237,7 @@ BOOST_AUTO_TEST_CASE( GivenDetIteratorWithNullRawLinesShouldGenerateAFitsWithBin\n   auto detFake = createDetectorFake();\n   detFake->setRawlines(nullptr);\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {detFake};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {detFake};\n   auto detItrStub = std::make_shared<DetIterStubDetVector>(detectors);\n \n   writer.write(detItrStub, outputDir);\n@@ -263,7 +265,7 @@ BOOST_AUTO_TEST_CASE( GivenDetIteratorWithNullRawLinesShouldGenerateAFitsWithBin\n   auto detFake = createDetectorFake();\n   detFake->setRawlines(nullptr);\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {detFake};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {detFake};\n   auto detItrStub = std::make_shared<DetIterStubDetVector>(detectors);\n \n   writer.write(detItrStub, outputDir);\n@@ -290,9 +292,9 @@ BOOST_AUTO_TEST_CASE( GivenDetWithHistoryShouldGenerateAFitsWithHistoryBinTableW\n \n   uint8_t groups = 3;\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(groups, 1, DetectorId(0, 0, \"00\")),\n-                                                      createDetectorFake(groups, 2, DetectorId(0, 1, \"01\")),\n-                                                      createDetectorFake(groups, 15, DetectorId(0, 2, \"02\"))};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(groups, 1, LE1_NISP_Entities::DetectorId(0, 0, \"00\")),\n+                                                      createDetectorFake(groups, 2, LE1_NISP_Entities::DetectorId(0, 1, \"01\")),\n+                                                      createDetectorFake(groups, 15, LE1_NISP_Entities::DetectorId(0, 2, \"02\"))};\n   auto detItrStub = std::make_shared<DetIterStubDetVector>(detectors);\n \n   writer.write(detItrStub, outputDir);\n@@ -317,9 +319,9 @@ BOOST_AUTO_TEST_CASE( GivenExistingOutputDirectoryShouldGenerateOneFitsAtTheSpec\n \n   writer.setDateTimeManager(dateTimeManagerStub);\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(3, 1, DetectorId(0, 0, \"00\")),\n-                                                      createDetectorFake(15, 2, DetectorId(0, 1, \"01\")),\n-                                                      createDetectorFake(6, 15, DetectorId(0, 2, \"02\"))};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(3, 1, LE1_NISP_Entities::DetectorId(0, 0, \"00\")),\n+                                                      createDetectorFake(15, 2, LE1_NISP_Entities::DetectorId(0, 1, \"01\")),\n+                                                      createDetectorFake(6, 15, LE1_NISP_Entities::DetectorId(0, 2, \"02\"))};\n   auto detItrStub = std::make_shared<DetIterStubDetVector>(detectors);\n \n   writer.write(detItrStub, outputDir);\n@@ -335,9 +337,9 @@ BOOST_AUTO_TEST_CASE( GivenExistingOutputDirectoryNoSlashEndingShouldGenerateOne\n \n   writer.setDateTimeManager(dateTimeManagerStub);\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(3, 1, DetectorId(0, 0, \"00\")),\n-                                                      createDetectorFake(15, 2, DetectorId(0, 1, \"01\")),\n-                                                      createDetectorFake(6, 15, DetectorId(0, 2, \"02\"))};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(3, 1, LE1_NISP_Entities::DetectorId(0, 0, \"00\")),\n+                                                      createDetectorFake(15, 2, LE1_NISP_Entities::DetectorId(0, 1, \"01\")),\n+                                                      createDetectorFake(6, 15, LE1_NISP_Entities::DetectorId(0, 2, \"02\"))};\n   auto detItrStub = std::make_shared<DetIterStubDetVector>(detectors);\n \n   writer.write(detItrStub, outputDir);\n@@ -353,9 +355,9 @@ BOOST_AUTO_TEST_CASE( GivenNotExistingOutputDirectoryShouldThrowOutputDirectoryD\n \n   writer.setDateTimeManager(dateTimeManagerStub);\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(3, 1, DetectorId(0, 0, \"00\")),\n-                                                      createDetectorFake(15, 2, DetectorId(0, 1, \"01\")),\n-                                                      createDetectorFake(6, 15, DetectorId(0, 2, \"02\"))};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(3, 1, LE1_NISP_Entities::DetectorId(0, 0, \"00\")),\n+                                                      createDetectorFake(15, 2, LE1_NISP_Entities::DetectorId(0, 1, \"01\")),\n+                                                      createDetectorFake(6, 15, LE1_NISP_Entities::DetectorId(0, 2, \"02\"))};\n   auto detItrStub = std::make_shared<DetIterStubDetVector>(detectors);\n \n   BOOST_REQUIRE_THROW(writer.write(detItrStub, outputDir), OutputDirectoryDoesNotExistsException);\n@@ -367,9 +369,9 @@ BOOST_AUTO_TEST_CASE( GivenDetWithHistoryShouldGenerateAFitsWithHistoryBinTableW\n \n   writer.setDateTimeManager(dateTimeManagerStub);\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(3, 1, DetectorId(0, 0, \"00\")),\n-                                                      createDetectorFake(15, 2, DetectorId(0, 1, \"01\")),\n-                                                      createDetectorFake(6, 15, DetectorId(0, 2, \"02\"))};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(3, 1, LE1_NISP_Entities::DetectorId(0, 0, \"00\")),\n+                                                      createDetectorFake(15, 2, LE1_NISP_Entities::DetectorId(0, 1, \"01\")),\n+                                                      createDetectorFake(6, 15, LE1_NISP_Entities::DetectorId(0, 2, \"02\"))};\n   auto detItrStub = std::make_shared<DetIterStubDetVector>(detectors);\n \n   writer.write(detItrStub, outputDir);\n@@ -394,9 +396,9 @@ BOOST_AUTO_TEST_CASE( GivenDetWithHistoryShouldGenerateAFitsWithHistoryBinTableW\n \n   writer.setDateTimeManager(dateTimeManagerStub);\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(3, 1, DetectorId(0, 0, \"00\")),\n-                                                      createDetectorFake(15, 2, DetectorId(0, 1, \"01\")),\n-                                                      createDetectorFake(6, 15, DetectorId(0, 2, \"02\"))};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(3, 1, LE1_NISP_Entities::DetectorId(0, 0, \"00\")),\n+                                                      createDetectorFake(15, 2, LE1_NISP_Entities::DetectorId(0, 1, \"01\")),\n+                                                      createDetectorFake(6, 15, LE1_NISP_Entities::DetectorId(0, 2, \"02\"))};\n   auto detItrStub = std::make_shared<DetIterStubDetVector>(detectors);\n \n   writer.write(detItrStub, outputDir);\n@@ -423,9 +425,9 @@ BOOST_AUTO_TEST_CASE( GivenDetWithHistoryShouldGenerateAFitsWithHistoryBinTableW\n \n   writer.setDateTimeManager(dateTimeManagerStub);\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(3, 1, DetectorId(0, 0, \"00\")),\n-                                                      createDetectorFake(15, 2, DetectorId(0, 1, \"01\")),\n-                                                      createDetectorFake(6, 15, DetectorId(0, 2, \"02\"))};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(3, 1, LE1_NISP_Entities::DetectorId(0, 0, \"00\")),\n+                                                      createDetectorFake(15, 2, LE1_NISP_Entities::DetectorId(0, 1, \"01\")),\n+                                                      createDetectorFake(6, 15, LE1_NISP_Entities::DetectorId(0, 2, \"02\"))};\n   auto detItrStub = std::make_shared<DetIterStubDetVector>(detectors);\n \n   writer.write(detItrStub, outputDir);\n@@ -454,15 +456,15 @@ BOOST_AUTO_TEST_CASE( GivenDetWithHistoryShouldGenerateAFitsWithExpectedHistoryD\n \n   writer.setDateTimeManager(dateTimeManagerStub);\n \n-  auto detFake1 = createDetectorFake(3, 1, DetectorId(0, 0, \"00\"));\n+  auto detFake1 = createDetectorFake(3, 1, LE1_NISP_Entities::DetectorId(0, 0, \"00\"));\n   auto maxValues = detFake1->getTelemetryConfiguration()->getHistoryNumberOfValues();\n   detFake1->setHistoryData(std::make_shared<ByteArrayRandom>(3*maxValues*sizeof(uint16_t)));\n-  auto detFake2 = createDetectorFake(15, 2, DetectorId(0, 1, \"01\"));\n+  auto detFake2 = createDetectorFake(15, 2, LE1_NISP_Entities::DetectorId(0, 1, \"01\"));\n   detFake2->setHistoryData(std::make_shared<ByteArrayRandom>(15*maxValues*sizeof(uint16_t)));\n-  auto detFake3 = createDetectorFake(6, 15, DetectorId(0, 2, \"02\"));\n+  auto detFake3 = createDetectorFake(6, 15, LE1_NISP_Entities::DetectorId(0, 2, \"02\"));\n   detFake3->setHistoryData(std::make_shared<ByteArrayRandom>(6*maxValues*sizeof(uint16_t)));\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {detFake1, detFake2, detFake3};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {detFake1, detFake2, detFake3};\n   auto detItrStub = std::make_shared<DetIterStubDetVector>(detectors);\n \n   writer.write(detItrStub, outputDir);\n@@ -496,7 +498,7 @@ BOOST_AUTO_TEST_CASE( GivenFiveDetectorsShouldCreateFitsWithFiveRAWExtensions )\n   \n   writer.setDateTimeManager(dateTimeManagerStub);\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(), \n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(),\n                                                       createDetectorFake(), \n                                                       createDetectorFake(), \n                                                       createDetectorFake(),\n@@ -542,7 +544,7 @@ BOOST_AUTO_TEST_CASE( GivenAnyDetectorShouldCreateRAWExtensionsWithExpectedKeywo\n       \"TLM118\", \"TLM119\", \"TLM120\", \"TLM121\", \"TLM122\", \"TLM123\", \"TLM124\", \"TLM125\", \"TLM126\", \"TLM127\"\n   };\n   \n-  std::map<std::string, std::shared_ptr<ParameterInterface>> params;\n+  std::map<std::string, std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> params;\n   for(auto const &keyword: expectedKeywords)\n     params.insert({keyword, std::make_shared<ParameterStubNameOnly>(keyword)});\n     \n@@ -581,7 +583,7 @@ BOOST_AUTO_TEST_CASE( GivenAnyDetectorShouldCreateFitsProductWithExpectedKeyword\n       \"MODESTAT\", \"RAMPSTAT\", \"CMP_BLKS\", \"CMPFSBIT\", \"CMPFSMAX\", \"TMTAGDEL\", \"S_OFFSET\", \"S_FACTOR\", \"TLMHISTP\"\n   };\n \n-  std::map<std::string, std::shared_ptr<ParameterInterface>> params;\n+  std::map<std::string, std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> params;\n   for(auto const &keyword: primaryKeywords)\n     params.insert({keyword, std::make_shared<ParameterStubNameOnly>(keyword)});\n \n@@ -618,9 +620,9 @@ BOOST_AUTO_TEST_CASE( GivenDetWithHistoryShouldGenerateAFitsWithExpectedKeywords\n \n   writer.setDateTimeManager(dateTimeManagerStub);\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {createDetectorFake(3, 1, DetectorId(0, 0, \"00\")),\n-                                                      createDetectorFake(15, 2, DetectorId(0, 1, \"01\")),\n-                                                      createDetectorFake(6, 15, DetectorId(0, 2, \"02\"))};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {createDetectorFake(3, 1, LE1_NISP_Entities::DetectorId(0, 0, \"00\")),\n+                                                      createDetectorFake(15, 2, LE1_NISP_Entities::DetectorId(0, 1, \"01\")),\n+                                                      createDetectorFake(6, 15, LE1_NISP_Entities::DetectorId(0, 2, \"02\"))};\n   auto detItrStub = std::make_shared<DetIterStubDetVector>(detectors);\n \n   writer.write(detItrStub, outputDir);\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/src/MetadataParserParamDescriptions_test.cpp": [
                        [
                            "@@ -25,19 +25,20 @@\n #include <boost/test/data/test_case.hpp>\n #include <boost/test/data/monomorphic.hpp>\n \n-#include \"LE1_NISP_ProcessScience/tests/include/TelemetryDetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ParameterMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMetadataMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ByteArrayMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/ParameterMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMetadataMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/ByteArrayMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/TelemetryDetectorMock.h\"\n \n-#include \"LE1_NISP_ProcessScience//MetadataParserParamDescriptions.h\"\n+#include \"LE1_NISP_Interactors/MetadataParserParamDescriptions.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Interactors;\n+using namespace LE1_NISP_Entities;\n namespace bdata = boost::unit_test::data;\n \n namespace {\n \n-  std::shared_ptr<ParameterDescription> descPtr(const std::string &name,\n+  std::shared_ptr<LE1_NISP_Entities::ParameterDescription> descPtr(const std::string &name,\n                                                 const uint64_t offset,\n                                                 const uint64_t offbit,\n                                                 const uint64_t bitSize,\n@@ -45,7 +46,7 @@ namespace {\n                                                 const std::string &unit = \"\",\n                                                 const std::string &comment = \"\",\n                                                 const std::string &type = \"\"){\n-    return std::make_shared<ParameterDescription>(name, offset, offbit, bitSize, endiannessCorrection, unit, comment, type);\n+    return std::make_shared<LE1_NISP_Entities::ParameterDescription>(name, offset, offbit, bitSize, endiannessCorrection, unit, comment, type);\n   }\n \n }\n@@ -58,7 +59,7 @@ struct MetadataParserParamDescriptionsFixture_test{\n   }\n   ~MetadataParserParamDescriptionsFixture_test(){}\n \n-  std::shared_ptr<TelemetryDetectorInterface> telemetryDetDummy;\n+  std::shared_ptr<LE1_NISP_Entities::TelemetryDetectorInterface> telemetryDetDummy;\n   std::shared_ptr<TmDetStubReturnEmptyArrayInputSize> tmDetStubEmptyArrayInputSize;\n   MetadataParserParamDescriptions parser;\n };\n@@ -84,13 +85,13 @@ BOOST_AUTO_TEST_CASE( GivenAnEmptyParamDescriptionVectorShouldReturnDetectorMeta\n }\n \n BOOST_AUTO_TEST_CASE( GivenTelemetryDetectorReturningNullByteArrayShouldThrowNullByteArrayException ) {\n-  parser.setParameterDescriptions({std::make_shared<ParameterDescription>(\"param1\", 1, 0, 8)});\n+  parser.setParameterDescriptions({std::make_shared<LE1_NISP_Entities::ParameterDescription>(\"param1\", 1, 0, 8)});\n \n   BOOST_REQUIRE_THROW(parser.parseMetadata(telemetryDetDummy), NullByteArrayException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenParamDescriptionVectorWithAnyNullDescriptionShouldThrowNullParameterDescriptionException ) {\n-  std::vector<std::shared_ptr<ParameterDescription>> descriptions = {\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::ParameterDescription>> descriptions = {\n       descPtr(\"param1\", 1, 0, 8, false, \"\", \"\", \"uint8\"),\n       descPtr(\"param2\", 1, 0, 8, false, \"\", \"\", \"uint8\"),\n       nullptr,\n@@ -98,7 +99,7 @@ BOOST_AUTO_TEST_CASE( GivenParamDescriptionVectorWithAnyNullDescriptionShouldThr\n   };\n   parser.setParameterDescriptions(descriptions);\n \n-  BOOST_REQUIRE_THROW(parser.parseMetadata(tmDetStubEmptyArrayInputSize), NullParameterDescriptionException);\n+  BOOST_REQUIRE_THROW(parser.parseMetadata(tmDetStubEmptyArrayInputSize), LE1_NISP_Entities::NullParameterDescriptionException);\n }\n \n BOOST_DATA_TEST_CASE( GivenDescriptionsWithInvalidSizeShouldThrowInvalidParamSizeException,\n@@ -134,14 +135,14 @@ BOOST_DATA_TEST_CASE(\n }\n \n BOOST_AUTO_TEST_CASE( GivenParamDescSizeLowerThan8BitsAndSumOfSizeAndOffbitHigherThan8BitsShouldThrowIncompatibleDescriptionSizeAndOffbitException ) {\n-  auto desc = std::make_shared<ParameterDescription>(\"p\", 0, 3, 7);\n+  auto desc = std::make_shared<LE1_NISP_Entities::ParameterDescription>(\"p\", 0, 3, 7);\n   parser.setParameterDescriptions({desc});\n \n   BOOST_REQUIRE_THROW(parser.parseMetadata(tmDetStubEmptyArrayInputSize), IncompatibleDescriptionSizeAndOffbitException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenTelemetryDetectorStubAndParameterDescriptionsShouldReturnDetectorMetadataWithExpectedNumberOfParams ) {\n-  std::vector<std::shared_ptr<ParameterDescription>> descriptions = {\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::ParameterDescription>> descriptions = {\n       descPtr(\"param1\", 0, 0, 8, false, \"\", \"\", \"uint8\"),\n       descPtr(\"param2\", 0, 0, 8, false, \"\", \"\", \"uint8\"),\n       descPtr(\"param3\", 0, 0, 8, false, \"\", \"\", \"uint8\"),\n@@ -155,7 +156,7 @@ BOOST_AUTO_TEST_CASE( GivenTelemetryDetectorStubAndParameterDescriptionsShouldRe\n }\n \n BOOST_AUTO_TEST_CASE( ShouldReadBytesFromTelemetryDetectorUsingParameterDescriptionInfo ) {\n-  std::vector<std::shared_ptr<ParameterDescription>> descriptions = {\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::ParameterDescription>> descriptions = {\n       descPtr(\"param1\", 1, 0, 8, false, \"\", \"\", \"uint8\"),\n       descPtr(\"param2\", 2, 0, 8, false, \"\", \"\", \"uint8\"),\n       descPtr(\"param3\", 3, 0, 8, false, \"\", \"\", \"uint8\"),\n@@ -170,7 +171,7 @@ BOOST_AUTO_TEST_CASE( ShouldReadBytesFromTelemetryDetectorUsingParameterDescript\n }\n \n BOOST_AUTO_TEST_CASE( GivenMetadataCreatorSpyShouldReturnDetectorMetadataWithExpectedParameterName ) {\n-  std::vector<std::shared_ptr<ParameterDescription>> descriptions = {\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::ParameterDescription>> descriptions = {\n       descPtr(\"param1\", 1, 0, 8, false, \"\", \"\", \"uint8\"),\n       descPtr(\"param2\", 2, 0, 16, false, \"\", \"\", \"uint8\"),\n       descPtr(\"param3\", 3, 0, 32, false, \"\", \"\", \"uint8\")\n@@ -193,7 +194,7 @@ BOOST_AUTO_TEST_CASE( GivenParamDescriptionsShouldReturnDetectormMetadataWithExp\n     descPtr(\"p5\", 0, 0, 32, true, \"u5\", \"c5\", \"uint32\")\n   };\n \n-  std::vector<std::shared_ptr<ByteArray>> bytesVec = {\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::ByteArray>> bytesVec = {\n       std::make_shared<ByteArrayVector>(std::vector<uint8_t>{0xF0}),\n       std::make_shared<ByteArrayVector>(std::vector<uint8_t>{0x01, 0x02}),\n       std::make_shared<ByteArrayVector>(std::vector<uint8_t>{0x01, 0x02}),\n@@ -221,7 +222,7 @@ BOOST_AUTO_TEST_CASE( GivenAnEmptyFixedParamVectorShouldReturnDetectorMetadataWi\n }\n \n BOOST_AUTO_TEST_CASE( GivenFixedParamVectorWithAnyParamShouldReturnDetectorMetadataWithTheExpectedNumberOfCommonParams ) {\n-  std::vector<std::shared_ptr<ParameterInterface>> paramVec = {\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::ParameterInterface>> paramVec = {\n       std::make_shared<ParamStubCustomReturns>(\"p1\"),\n       std::make_shared<ParamStubCustomReturns>(\"p2\"),\n       std::make_shared<ParamStubCustomReturns>(\"p3\"),\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/src/ProductGenerator_test.cpp": [
                        [
                            "@@ -24,25 +24,27 @@\n #include <boost/test/unit_test.hpp>\n \n #include \"ElementsKernel/Temporary.h\"\n-#include \"LE1_NISP_ProcessScience//ProductGenerator.h\"\n-\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorsInitializerMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMetadataParserMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/DetectorImpl.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMetadataMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorCollectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ExposuresCounterMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorIteratorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/TelemetryDecoderMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorWriterMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ProductsArchiverMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ExposureConfigurationMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ExposureMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/PlanningIdMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ProductsWriterMock.h\"\n-\n-using namespace LE1_NISP_ProcessScience;\n+#include \"LE1_NISP_Interactors/ProductGenerator.h\"\n+\n+#include \"LE1_NISP_Interactors/tests/include/DetectorsInitializerMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/DetectorMetadataParserMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/DetectorCollectorMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/ExposuresCounterMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/DetectorIteratorMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/TelemetryDecoderMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/DetectorWriterMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/ProductsArchiverMock.h\"\n+#include \"tests/include/ExposureConfigurationMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/ExposureMock.h\"\n+#include \"tests/include/PlanningIdMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/ProductsWriterMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMock.h\"\n+#include \"LE1_NISP_Entities/DetectorImpl.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMetadataMock.h\"\n+\n+using namespace LE1_NISP_Interactors;\n+using namespace LE1_NISP_Entities;\n+\n struct ProductGeneratorFixture{\n \n   std::shared_ptr<DetectorMetadataParserDummy> detMetadataParserDummy;\n@@ -104,13 +106,13 @@ BOOST_AUTO_TEST_CASE( GivenNullDetectorMetadataParserShouldThrowNullDetectorMeta\n   BOOST_REQUIRE_THROW(generator.generateProducts({\"any-file\"}), NullDetectorMetadataParserException);\n }\n \n-BOOST_AUTO_TEST_CASE( GivenNullDetectorCollectorsShouldThrowNullDetectorCollectorEception ) {\n+BOOST_AUTO_TEST_CASE( GivenNullDetectorCollectorsShouldThrowNullDetectorCollectorException ) {\n   std::vector<std::string> inputFiles = {\"file1\", \"file2\", \"file3\"};\n \n   ProductGenerator generator = createProductGeneratorDummy();\n   generator.setDetectorCollector(nullptr);\n \n-  BOOST_REQUIRE_THROW(generator.generateProducts(inputFiles), NullDetectorCollectorEception);\n+  BOOST_REQUIRE_THROW(generator.generateProducts(inputFiles), NullDetectorCollectorException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenNullExposuresCounterShouldThrowNullExposuresCounterException ) {\n@@ -154,7 +156,7 @@ BOOST_AUTO_TEST_CASE( GivenDetIniterReturningEmptyDetectorListShouldNotGenerateA\n   std::string outputDir = std::string(tmpDir.path().c_str()) + \"/\";\n   std::vector<std::string> inputFiles = {\"file1\", \"file2\", \"file3\"};\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {};\n   auto detIniterStub = std::make_shared<DetIniterStubCustomRet>(detectors);\n \n   ProductGenerator generator = createProductGeneratorDummy();\n@@ -175,7 +177,7 @@ BOOST_AUTO_TEST_CASE( GivenDetIniterReturningEmptyDetectorListShouldNotGenerateA\n BOOST_AUTO_TEST_CASE( GivenDetIniterReturningNullDetectorsShouldThrowNullDetectorException ) {\n   std::vector<std::string> inputFiles = {\"file1\", \"file2\", \"file3\"};\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {nullptr, nullptr};\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {nullptr, nullptr};\n   auto detIniterStub = std::make_shared<DetIniterStubCustomRet>(detectors);\n \n   ProductGenerator generator = createProductGeneratorDummy();\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/src/ProductsArchiverDataModelBindings_test.cpp": [
                        [
                            "@@ -23,34 +23,35 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//ProductsArchiverDataModelBindings.h\"\n+#include \"LE1_NISP_Interactors//ProductsArchiverDataModelBindings.h\"\n \n #include \"boost/property_tree/xml_parser.hpp\"\n #include \"boost/property_tree/ptree.hpp\"\n \n #include \"ElementsKernel/Temporary.h\"\n \n-#include \"LE1_NISP_ProcessScience/tests/include/TelemetryDetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DateTimeManagerMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ExposuresCounterMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ExposureMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorIteratorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMetadataMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/PlanningIdMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ExposureConfigurationMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/TestUtils.h\"\n+#include \"LE1_NISP_Interactors/tests/include/TelemetryDetectorMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/DateTimeManagerMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/ExposuresCounterMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/ExposureMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/DetectorIteratorMock.h\"\n+#include \"tests/include/PlanningIdMock.h\"\n+#include \"tests/include/ExposureConfigurationMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/TestUtils.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMetadataMock.h\"\n \n using boost::property_tree::ptree;\n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Interactors;\n+using namespace LE1_NISP_Entities;\n \n struct ProductsArchiverDataModelBindingsFixture{\n-  std::shared_ptr<DateTimeManager> dateTimeManagerDummy;\n+  std::shared_ptr<LE1_NISP_Entities::DateTimeManager> dateTimeManagerDummy;\n   std::shared_ptr<DateTimeManagerStubCustomReturns> dateTimeManagerStub;\n   std::shared_ptr<ExposuresCounter> exposuresCounterDummy;\n-  std::shared_ptr<Exposure> exposureDummy;\n-  std::shared_ptr<ExposureConfiguration> expConfigDummy;\n-  std::shared_ptr<PlanningId> planIdDummy;\n+  std::shared_ptr<LE1_NISP_Entities::Exposure> exposureDummy;\n+  std::shared_ptr<LE1_NISP_Entities::ExposureConfiguration> expConfigDummy;\n+  std::shared_ptr<LE1_NISP_Entities::PlanningId> planIdDummy;\n \n \n   ProductsArchiverDataModelBindingsFixture(){\n@@ -67,7 +68,7 @@ struct ProductsArchiverDataModelBindingsFixture{\n     \n   }\n \n-  std::shared_ptr<DetectorFake> createDetectorFake(const std::shared_ptr<TelemetryConfiguration> tmConfig, const std::string &tmFilename = \"\", const std::string &detId = \"\"){\n+  std::shared_ptr<DetectorFake> createDetectorFake(const std::shared_ptr<LE1_NISP_Entities::TelemetryConfiguration> tmConfig, const std::string &tmFilename = \"\", const std::string &detId = \"\"){\n     srand (time(nullptr));\n     unsigned int dpuId = rand() % 100;\n     unsigned int sceId = rand() % 100;\n@@ -81,8 +82,8 @@ struct ProductsArchiverDataModelBindingsFixture{\n   }\n \n   std::shared_ptr<DetectorMetadataStubCustomReturns> createDetMetadataFake(const std::string &prodId, \n-                                                                           const std::shared_ptr<PlanningId> planId,\n-                                                                           const std::shared_ptr<ExposureConfiguration> expConfig) {\n+                                                                           const std::shared_ptr<LE1_NISP_Entities::PlanningId> planId,\n+                                                                           const std::shared_ptr<LE1_NISP_Entities::ExposureConfiguration> expConfig) {\n     auto commonMetadata = std::make_shared<DetectorMetadataStubCustomReturns>();\n     commonMetadata->setPlanningId(planId);\n     commonMetadata->setProductId(prodId);\n@@ -90,8 +91,8 @@ struct ProductsArchiverDataModelBindingsFixture{\n     return commonMetadata;\n   }\n \n-  std::shared_ptr<ExposureStubCustomReturn> createExposureFake(const std::shared_ptr<CommonDetectorMetadata> commonMetadata,\n-                                                               const std::shared_ptr<DetectorIterator> detIter,\n+  std::shared_ptr<ExposureStubCustomReturn> createExposureFake(const std::shared_ptr<LE1_NISP_Entities::CommonDetectorMetadata> commonMetadata,\n+                                                               const std::shared_ptr<LE1_NISP_Entities::DetectorIterator> detIter,\n                                                                const int detectorCount) {\n     auto exposureFake = std::make_shared<ExposureStubCustomReturn>(detIter);\n     exposureFake->setCommonDetectorMetadata(commonMetadata);\n@@ -214,10 +215,10 @@ BOOST_AUTO_TEST_CASE( GivenExposureWithAtLeastOneDetectorReturningNullTelemetryD\n   Elements::TempDir tmpDir;\n   std::string outputDirPath = std::string(tmpDir.path().c_str());\n \n-  auto detWithNullTmDet = createDetectorFake(std::make_shared<TelemetryConfiguration>(), \"tm-det-1.raw\");\n+  auto detWithNullTmDet = createDetectorFake(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>(), \"tm-det-1.raw\");\n   detWithNullTmDet->setTelemetryDetector(nullptr);\n-  std::vector<std::shared_ptr<Detector>> detectors = {\n-      createDetectorFake(std::make_shared<TelemetryConfiguration>(), \"tm-det-1.raw\"),\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {\n+      createDetectorFake(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>(), \"tm-det-1.raw\"),\n       detWithNullTmDet\n   };\n \n@@ -240,14 +241,14 @@ BOOST_AUTO_TEST_CASE( GivenDetectorWithNullTelemetryConfigurationShouldThrowNull\n \n   ProductsArchiverDataModelBindings archiver(dateTimeManagerStub, exposuresCounterDummy);\n \n-  BOOST_REQUIRE_THROW(archiver.archive(exposureFake, \"\", \"\", {}, outputDirPath), NullTelemetryConfigurationException);\n+  BOOST_REQUIRE_THROW(archiver.archive(exposureFake, \"\", \"\", {}, outputDirPath), LE1_NISP_Entities::NullTelemetryConfigurationException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenFakeExposureShouldCreateFileAtTheGivenOutputPath ) {\n   Elements::TempDir tmpDir;\n   std::string outputDirPath = std::string(tmpDir.path().c_str());\n \n-  auto detFake = createDetectorFake(std::make_shared<TelemetryConfiguration>());\n+  auto detFake = createDetectorFake(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   auto detIter = std::make_shared<DetIterStubCustomDetector>(detFake, 2);\n   auto commonMetadata = createDetMetadataFake(\"prod-id\", planIdDummy, expConfigDummy);\n   auto exposureFake = createExposureFake(commonMetadata, detIter, 2);\n@@ -262,7 +263,7 @@ BOOST_AUTO_TEST_CASE( GivenFakeCommonDetectorMetadataReturnTheExpectedWrittenFil\n   Elements::TempDir tmpDir;\n   std::string outputDirPath = std::string(tmpDir.path().c_str());\n \n-  auto detFake = createDetectorFake(std::make_shared<TelemetryConfiguration>());\n+  auto detFake = createDetectorFake(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   auto detIter = std::make_shared<DetIterStubCustomDetector>(detFake, 2);\n   auto commonMetadata = createDetMetadataFake(\"prod-id\", planIdDummy, expConfigDummy);\n   auto exposureFake = createExposureFake(commonMetadata, detIter, 2);\n@@ -279,7 +280,7 @@ BOOST_AUTO_TEST_CASE( GivenFakeDetectorsShouldCreateFileWithExpectedExposureTime\n   std::string outputDirPath = std::string(tmpDir.path().c_str()) + \"/\";\n   double exposureTimeValue = 1.23456789;\n \n-  auto detFake = createDetectorFake(std::make_shared<TelemetryConfiguration>());\n+  auto detFake = createDetectorFake(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   auto detIter = std::make_shared<DetIterStubCustomDetector>(detFake, 2);\n   auto commonMetadata = createDetMetadataFake(\"prod-id\", planIdDummy, expConfigDummy);\n   commonMetadata->setExposureTime(exposureTimeValue);\n@@ -307,7 +308,7 @@ BOOST_AUTO_TEST_CASE( GivenFakeDetectorsWithUncompressedScienceShouldCreateFileW\n   Elements::TempDir tmpDir;\n   std::string outputDirPath = std::string(tmpDir.path().c_str()) + \"/\";\n \n-  auto detFake = createDetectorFake(std::make_shared<TelemetryConfiguration>());\n+  auto detFake = createDetectorFake(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   detFake->setIsScienceCompressed(false);\n   auto detIter = std::make_shared<DetIterStubCustomDetector>(detFake, 2);\n   auto commonMetadata = createDetMetadataFake(\"prod-id\", planIdDummy, expConfigDummy);\n@@ -334,7 +335,7 @@ BOOST_AUTO_TEST_CASE( GivenFakeDetectorsWithCompressedScienceShouldCreateFileWit\n   Elements::TempDir tmpDir;\n   std::string outputDirPath = std::string(tmpDir.path().c_str()) + \"/\";\n \n-  auto detFake = createDetectorFake(std::make_shared<TelemetryConfiguration>());\n+  auto detFake = createDetectorFake(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   detFake->setIsScienceCompressed(true);\n   auto detIter = std::make_shared<DetIterStubCustomDetector>(detFake, 2);\n   auto commonMetadata = createDetMetadataFake(\"prod-id\", planIdDummy, expConfigDummy);\n@@ -361,7 +362,7 @@ BOOST_AUTO_TEST_CASE( GivenFakeDetectorsShouldCreateFileWithExpectedAxisLength )\n   Elements::TempDir tmpDir;\n   std::string outputDirPath = std::string(tmpDir.path().c_str()) + \"/\";\n \n-  auto tmConfig = std::make_shared<TelemetryConfiguration>();\n+  auto tmConfig = std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>();\n   tmConfig->setDetectorPxSizeX(1024);\n   tmConfig->setDetectorPxSizeY(1000);\n   auto detFake = createDetectorFake(tmConfig);\n@@ -399,9 +400,9 @@ BOOST_AUTO_TEST_CASE( GivenFakeDetectorsShouldCreateFileWithExpectedListOfDetect\n   Elements::TempDir tmpDir;\n   std::string outputDirPath = std::string(tmpDir.path().c_str()) + \"/\";\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {\n-      createDetectorFake(std::make_shared<TelemetryConfiguration>(), \"tm-det-1.raw\", \"1\"),\n-      createDetectorFake(std::make_shared<TelemetryConfiguration>(), \"tm-det-2.raw\", \"2\")\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {\n+      createDetectorFake(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>(), \"tm-det-1.raw\", \"1\"),\n+      createDetectorFake(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>(), \"tm-det-2.raw\", \"2\")\n   };\n   auto detIter = std::make_shared<DetIterStubDetVector>(detectors);\n   auto commonMetadata = createDetMetadataFake(\"prod-id\", planIdDummy, expConfigDummy);\n@@ -436,10 +437,10 @@ BOOST_AUTO_TEST_CASE( GivenFakeDetectorsShouldCreateFileWithExpectedListOfInputR\n   Elements::TempDir tmpDir;\n   std::string outputDirPath = std::string(tmpDir.path().c_str()) + \"/\";\n \n-  std::vector<std::shared_ptr<Detector>> detectors = {\n-      createDetectorFake(std::make_shared<TelemetryConfiguration>(), \"tm-det-1.raw\", \"11\"),\n-      createDetectorFake(std::make_shared<TelemetryConfiguration>(), \"tm-det-1.raw\", \"12\"),\n-      createDetectorFake(std::make_shared<TelemetryConfiguration>(), \"tm-det-2.raw\", \"21\")\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors = {\n+      createDetectorFake(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>(), \"tm-det-1.raw\", \"11\"),\n+      createDetectorFake(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>(), \"tm-det-1.raw\", \"12\"),\n+      createDetectorFake(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>(), \"tm-det-2.raw\", \"21\")\n   };\n   auto detIter = std::make_shared<DetIterStubDetVector>(detectors);\n   auto commonMetadata = createDetMetadataFake(\"prod-id\", planIdDummy, expConfigDummy);\n@@ -475,20 +476,20 @@ BOOST_AUTO_TEST_CASE( GivenFakeDetectorsShouldCreateFileWithExpectedListOfInputR\n   std::string outputDirPath = std::string(tmpDir.path().c_str()) + \"/\";\n   ProductsArchiverDataModelBindings archiver(dateTimeManagerStub, exposuresCounterDummy);\n \n-  std::vector<std::shared_ptr<Detector>> detectors1 = {\n-      createDetectorFake(std::make_shared<TelemetryConfiguration>(), \"tm-det-1.raw\", \"11\"),\n-      createDetectorFake(std::make_shared<TelemetryConfiguration>(), \"tm-det-1.raw\", \"12\"),\n-      createDetectorFake(std::make_shared<TelemetryConfiguration>(), \"tm-det-2.raw\", \"21\")\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors1 = {\n+      createDetectorFake(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>(), \"tm-det-1.raw\", \"11\"),\n+      createDetectorFake(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>(), \"tm-det-1.raw\", \"12\"),\n+      createDetectorFake(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>(), \"tm-det-2.raw\", \"21\")\n   };\n   auto detIter1 = std::make_shared<DetIterStubDetVector>(detectors1);\n   auto commonMetadata1 = createDetMetadataFake(\"prod-id-1\", planIdDummy, expConfigDummy);\n   auto exposureFake1 = createExposureFake(commonMetadata1, detIter1, detectors1.size());\n   auto outputFilename1 = archiver.archive(exposureFake1, \"\", \"\", {}, outputDirPath);\n \n-  std::vector<std::shared_ptr<Detector>> detectors2 = {\n-      createDetectorFake(std::make_shared<TelemetryConfiguration>(), \"tm-det-3.raw\", \"31\"),\n-      createDetectorFake(std::make_shared<TelemetryConfiguration>(), \"tm-det-3.raw\", \"32\"),\n-      createDetectorFake(std::make_shared<TelemetryConfiguration>(), \"tm-det-4.raw\", \"41\")\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors2 = {\n+      createDetectorFake(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>(), \"tm-det-3.raw\", \"31\"),\n+      createDetectorFake(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>(), \"tm-det-3.raw\", \"32\"),\n+      createDetectorFake(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>(), \"tm-det-4.raw\", \"41\")\n   };\n   auto detIter2 = std::make_shared<DetIterStubDetVector>(detectors2);\n   auto commonMetadata2 = createDetMetadataFake(\"prod-id-2\", planIdDummy, expConfigDummy);\n@@ -522,20 +523,20 @@ BOOST_AUTO_TEST_CASE( GivenFakeDetectorsShouldCreateFileWithExpectedListOfDetect\n   std::string outputDirPath = std::string(tmpDir.path().c_str()) + \"/\";\n   ProductsArchiverDataModelBindings archiver(dateTimeManagerStub, exposuresCounterDummy);\n \n-  std::vector<std::shared_ptr<Detector>> detectors1 = {\n-      createDetectorFake(std::make_shared<TelemetryConfiguration>(), \"tm-det-1.raw\", \"11\"),\n-      createDetectorFake(std::make_shared<TelemetryConfiguration>(), \"tm-det-1.raw\", \"12\"),\n-      createDetectorFake(std::make_shared<TelemetryConfiguration>(), \"tm-det-2.raw\", \"21\")\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors1 = {\n+      createDetectorFake(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>(), \"tm-det-1.raw\", \"11\"),\n+      createDetectorFake(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>(), \"tm-det-1.raw\", \"12\"),\n+      createDetectorFake(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>(), \"tm-det-2.raw\", \"21\")\n   };\n   auto detIter1 = std::make_shared<DetIterStubDetVector>(detectors1);\n   auto commonMetadata1 = createDetMetadataFake(\"prod-id-1\", planIdDummy, expConfigDummy);\n   auto exposureFake1 = createExposureFake(commonMetadata1, detIter1, detectors1.size());\n   auto outputFilename1 = archiver.archive(exposureFake1, \"\", \"\", {}, outputDirPath);\n \n-  std::vector<std::shared_ptr<Detector>> detectors2 = {\n-      createDetectorFake(std::make_shared<TelemetryConfiguration>(), \"tm-det-3.raw\", \"31\"),\n-      createDetectorFake(std::make_shared<TelemetryConfiguration>(), \"tm-det-3.raw\", \"32\"),\n-      createDetectorFake(std::make_shared<TelemetryConfiguration>(), \"tm-det-4.raw\", \"41\")\n+  std::vector<std::shared_ptr<LE1_NISP_Entities::Detector>> detectors2 = {\n+      createDetectorFake(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>(), \"tm-det-3.raw\", \"31\"),\n+      createDetectorFake(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>(), \"tm-det-3.raw\", \"32\"),\n+      createDetectorFake(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>(), \"tm-det-4.raw\", \"41\")\n   };\n   auto detIter2 = std::make_shared<DetIterStubDetVector>(detectors2);\n   auto commonMetadata2 = createDetMetadataFake(\"prod-id-2\", planIdDummy, expConfigDummy);\n@@ -606,7 +607,7 @@ BOOST_AUTO_TEST_CASE( GivenNonAvailableParamNameShouldThrowParameterNotFoundExce\n   ProductsArchiverDataModelBindings archiver(dateTimeManagerDummy, exposuresCounterDummy);\n \n   BOOST_REQUIRE_THROW(archiver.getParam(\"not-available-param\"),\n-                      ParameterNotFoundException);\n+                      LE1_NISP_Interactors::ParameterNotFoundException);\n }\n \n BOOST_AUTO_TEST_SUITE_END ()\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/src/ProductsWriter_test.cpp": [
                        [
                            "@@ -25,14 +25,15 @@\n #include <boost/test/data/test_case.hpp>\n #include <boost/test/data/monomorphic.hpp>\n \n-#include \"LE1_NISP_ProcessScience//ProductsWriter.h\"\n+#include \"LE1_NISP_Interactors/ProductsWriter.h\"\n \n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorWriterMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ExposureMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMetadataMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ExposureConfigurationMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/DetectorWriterMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/ExposureMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMetadataMock.h\"\n+#include \"tests/include/ExposureConfigurationMock.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Interactors;\n+using namespace LE1_NISP_Entities;\n namespace bdata = boost::unit_test::data;\n \n struct ProductsWriterFixture{\n@@ -130,7 +131,7 @@ BOOST_AUTO_TEST_CASE( ShouldReturnEmptyWrittenFilesWhenProductWriterHasNotBeenRu\n \n BOOST_DATA_TEST_CASE_F( ProductsWriterFixture,\n   GivenExposureConfigDifferentFromCalibNonLinearityShouldReturnExpectedScienceProduct,\n-  bdata::make(std::vector<std::shared_ptr<ExposureConfiguration>>{\n+  bdata::make(std::vector<std::shared_ptr<LE1_NISP_Entities::ExposureConfiguration>>{\n       std::make_shared<ExposureConfigScience>(),\n       std::make_shared<ExposureConfigEngDebug>(),\n       std::make_shared<ExposureConfigEngRaw>(),\n@@ -188,7 +189,7 @@ BOOST_AUTO_TEST_CASE( GivenCalibrationNonLinearityExpConfigShouldNotWriteScience\n \n BOOST_DATA_TEST_CASE_F( ProductsWriterFixture,\n   GivenExposureConfigShouldReturnExpectedHkProduct,\n-  bdata::make(std::vector<std::shared_ptr<ExposureConfiguration>>{\n+  bdata::make(std::vector<std::shared_ptr<LE1_NISP_Entities::ExposureConfiguration>>{\n       std::make_shared<ExposureConfigScience>(),\n       std::make_shared<ExposureConfigEngDebug>(),\n       std::make_shared<ExposureConfigEngRaw>(),\n@@ -226,7 +227,7 @@ BOOST_DATA_TEST_CASE_F( ProductsWriterFixture,\n \n BOOST_DATA_TEST_CASE_F( ProductsWriterFixture,\n   GivenExposureConfigShouldReturnExpectedEngProduct,\n-  bdata::make(std::vector<std::shared_ptr<ExposureConfiguration>>{\n+  bdata::make(std::vector<std::shared_ptr<LE1_NISP_Entities::ExposureConfiguration>>{\n       std::make_shared<ExposureConfigEngDebug>(),\n       std::make_shared<ExposureConfigEngRaw>(),\n       std::make_shared<ExposureConfigComprVerif>(),\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/src/RawLinesDecoder_test.cpp": [
                        [
                            "@@ -23,19 +23,20 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"LE1_NISP_ProcessScience//RawLinesDecoder.h\"\n+#include \"LE1_NISP_Interactors/RawLinesDecoder.h\"\n \n-#include \"LE1_NISP_ProcessScience/tests/include/DecompressorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/TelemetryDetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMetadataMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ByteArrayMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/DecompressorMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/TelemetryDetectorMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMetadataMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/ByteArrayMock.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Interactors;\n+using namespace LE1_NISP_Entities;\n \n struct RawLinesDecoderFixture{\n-  std::shared_ptr<TelemetryDetectorInterface> tmDetReturnInputSizeArray;\n-  std::shared_ptr<DetectorMetadata> metadataDummy;\n+  std::shared_ptr<LE1_NISP_Entities::TelemetryDetectorInterface> tmDetReturnInputSizeArray;\n+  std::shared_ptr<LE1_NISP_Entities::DetectorMetadata> metadataDummy;\n   \n   RawLinesDecoderFixture(){\n     tmDetReturnInputSizeArray = std::make_shared<TmDetStubReturnEmptyArrayInputSize>();\n@@ -75,14 +76,14 @@ BOOST_AUTO_TEST_CASE( GivenNullTelemetryConfigShouldThrowNullTelemetryConfigurat\n \n   RawLinesDecoder decoder;\n \n-  BOOST_REQUIRE_THROW(decoder.decode(detector), NullTelemetryConfigurationException);\n+  BOOST_REQUIRE_THROW(decoder.decode(detector), LE1_NISP_Entities::NullTelemetryConfigurationException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenNullRawlinesSectionShouldThrowNullRawlinesSectionException ) {\n   auto detector = std::make_shared<DetectorFake>();\n   detector->setMetadata(metadataDummy);\n   detector->setTelemetryDetector(std::make_shared<TelemetryDetectorDummy>());\n-  detector->setTelemetryConfiguration(std::make_shared<TelemetryConfiguration>());\n+  detector->setTelemetryConfiguration(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   detector->setRawlinesSection(nullptr);\n \n   RawLinesDecoder decoder;\n@@ -93,12 +94,12 @@ BOOST_AUTO_TEST_CASE( GivenNullRawlinesSectionShouldThrowNullRawlinesSectionExce\n BOOST_AUTO_TEST_CASE( ShouldReturnExpectedByteArray ) {\n   auto expectedData = std::make_shared<ByteArrayRandom>(128);\n   auto tmDetectorFake = std::make_shared<TmDetSpyReturnDefaultByteArray>(expectedData);\n-  auto tmSection = std::make_shared<TelemetrySection>(0, expectedData->getSize());\n+  auto tmSection = std::make_shared<LE1_NISP_Entities::TelemetrySection>(0, expectedData->getSize());\n \n   auto detector = std::make_shared<DetectorFake>();\n   detector->setMetadata(metadataDummy);\n   detector->setTelemetryDetector(tmDetectorFake);\n-  detector->setTelemetryConfiguration(std::make_shared<TelemetryConfiguration>());\n+  detector->setTelemetryConfiguration(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>());\n   detector->setRawlinesSection(tmSection);\n \n   RawLinesDecoder decoder;\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/src/TelemetryDecoder_test.cpp": [
                        [
                            "@@ -25,15 +25,16 @@\n #include <boost/test/data/test_case.hpp>\n #include <boost/test/data/monomorphic.hpp>\n \n-#include \"LE1_NISP_ProcessScience//TelemetryDecoder.h\"\n+#include \"LE1_NISP_Interactors/TelemetryDecoder.h\"\n \n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/DetectorMetadataMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ExposureConfigurationMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/ByteArrayMock.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/TelemetrySectionDecoderMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/DetectorMetadataMock.h\"\n+#include \"LE1_NISP_Entities/tests/include/ByteArrayMock.h\"\n+#include \"tests/include/ExposureConfigurationMock.h\"\n+#include \"LE1_NISP_Interactors/tests/include/TelemetrySectionDecoderMock.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Interactors;\n+using namespace LE1_NISP_Entities;\n namespace bdata = boost::unit_test::data;\n \n struct TelemetryDecoderFixture{\n@@ -76,13 +77,13 @@ struct TelemetryDecoderFixture{\n namespace{\n \n   struct DetectorData{\n-    std::shared_ptr<ByteArray> rawlinesData;\n-    std::shared_ptr<ByteArray> scienceData;\n-    std::shared_ptr<ByteArray> qualityData;\n-    std::shared_ptr<ByteArray> errorData;\n-    std::shared_ptr<ByteArray> analogTmData;\n-    std::shared_ptr<ByteArray> historyData;\n-    std::shared_ptr<ByteArray> engData;\n+    std::shared_ptr<LE1_NISP_Entities::ByteArray> rawlinesData;\n+    std::shared_ptr<LE1_NISP_Entities::ByteArray> scienceData;\n+    std::shared_ptr<LE1_NISP_Entities::ByteArray> qualityData;\n+    std::shared_ptr<LE1_NISP_Entities::ByteArray> errorData;\n+    std::shared_ptr<LE1_NISP_Entities::ByteArray> analogTmData;\n+    std::shared_ptr<LE1_NISP_Entities::ByteArray> historyData;\n+    std::shared_ptr<LE1_NISP_Entities::ByteArray> engData;\n   };\n \n   struct Decoders{\n@@ -98,7 +99,7 @@ namespace{\n \n   struct DecoderTestConfiguration{\n     std::string testConfigName;\n-    std::shared_ptr<ExposureConfiguration> expConfig;\n+    std::shared_ptr<LE1_NISP_Entities::ExposureConfiguration> expConfig;\n     Decoders decoders;\n     DetectorData expectedData;\n   };\n@@ -108,7 +109,7 @@ namespace{\n     return os; \n   }\n \n-  std::shared_ptr<ByteArray> createRandomByteArray(){\n+  std::shared_ptr<LE1_NISP_Entities::ByteArray> createRandomByteArray(){\n     srand(time(nullptr));\n     return std::make_shared<ByteArrayRandom>(rand()%200);\n   }\n@@ -698,7 +699,7 @@ namespace{\n     return testValues;\n   }\n \n-  void checkByteArrayDataEqual(const std::shared_ptr<ByteArray> arr1, const std::shared_ptr<ByteArray> arr2){\n+  void checkByteArrayDataEqual(const std::shared_ptr<LE1_NISP_Entities::ByteArray> arr1, const std::shared_ptr<LE1_NISP_Entities::ByteArray> arr2){\n     if(arr1 == nullptr || arr2 == nullptr)\n       BOOST_CHECK_EQUAL(arr1, arr2);\n     else\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Interactors/tests/src/TelemetryDetectorInitializer_test.cpp": [
                        [
                            "@@ -28,11 +28,11 @@\n \n #include \"ElementsKernel/Temporary.h\"\n \n-#include \"LE1_NISP_ProcessScience//TelemetryDetectorInitializer.h\"\n-#include \"LE1_NISP_ProcessScience//DetectorImpl.h\"\n-#include \"LE1_NISP_ProcessScience//ByteArrayCreatorStandard.h\"\n+#include \"LE1_NISP_Interactors/TelemetryDetectorInitializer.h\"\n+#include \"LE1_NISP_Entities/DetectorImpl.h\"\n+#include \"LE1_NISP_Entities/ByteArrayCreatorStandard.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Interactors;\n namespace bdata = boost::unit_test::data;\n \n namespace{\n@@ -49,13 +49,13 @@ namespace{\n     return (size % 4) > 0 ? (4-size%4): 0;\n   }\n \n-  DetectorHeader createHeader(uint8_t acquisitionCounter, uint8_t framePerGroup, uint8_t groupCounter,\n+  LE1_NISP_Entities::DetectorHeader createHeader(uint8_t acquisitionCounter, uint8_t framePerGroup, uint8_t groupCounter,\n                               uint8_t sceInfo,\n                               uint32_t scienceSize, uint32_t historySize,\n                               uint32_t analogTmSize, uint32_t errorSize,\n                               uint32_t qfSize, uint32_t rawlinesSize,\n                               uint32_t engSize){\n-    DetectorHeader header;\n+    LE1_NISP_Entities::DetectorHeader header;\n     header.acquisitionCounter = acquisitionCounter;\n     header.framePerGroup = framePerGroup;\n     header.groupCounter = groupCounter;\n@@ -101,7 +101,7 @@ namespace{\n \n \n   std::vector<uint8_t> createStandardTmData(uint32_t sync, uint32_t tail1, uint32_t tail2, uint32_t tail3, \n-                                            const DetectorHeader &header = DetectorHeader(), size_t digitalTmSize = 0){\n+                                            const LE1_NISP_Entities::DetectorHeader &header = LE1_NISP_Entities::DetectorHeader(), size_t digitalTmSize = 0){\n     uint8_t sceInfo = header.sceId | header.sceStatus | header.packetType;\n     \n     auto headerTm     = toBytes(sync) +  \n@@ -129,7 +129,7 @@ namespace{\n \n   std::vector<uint8_t> createTmDataSingleChunk(unsigned int numberOfDetectors, \n                                                uint32_t sync, uint32_t tail1, uint32_t tail2, uint32_t tail3, uint32_t tail4, \n-                                               const DetectorHeader &header = DetectorHeader(), \n+                                               const LE1_NISP_Entities::DetectorHeader &header = LE1_NISP_Entities::DetectorHeader(),\n                                                size_t digitalTmSize = 0){\n     auto eng = createBytes(header.engDataSize + computePadding(header.engDataSize), 0xFF);\n     auto tail4Bytes = toBytes(tail4); \n@@ -147,7 +147,7 @@ namespace{\n   std::vector<uint8_t> createTmDataDoubleChunks(size_t memoryBuffSize, size_t dataBlockSize, size_t firstChunkPaddSize, \n                                                 unsigned int numberOfDetectors, \n                                                 uint32_t sync, uint32_t tail1, uint32_t tail2, uint32_t tail3, uint32_t tail4, \n-                                                const DetectorHeader &header = DetectorHeader(), \n+                                                const LE1_NISP_Entities::DetectorHeader &header = LE1_NISP_Entities::DetectorHeader(),\n                                                 size_t digitalTmSize = 0)\n   {\n     uint32_t blocksPerChunk         = floor(memoryBuffSize/dataBlockSize);\n@@ -197,15 +197,15 @@ struct TelemetryDetectorInitializerFixture_test{\n   size_t digitalTmSize  = 128;\n \n   TelemetryDetectorInitializerFixture_test(){\n-    auto tmFileCreator = std::make_shared<TelemetryFileCreator>();\n-    tmFileCreator->setByteArrayCreator(std::make_shared<ByteArrayCreatorStandard>());\n-    initializer = TelemetryDetectorInitializer(std::make_shared<TelemetryConfiguration>(), std::make_shared<DetectorImplCreator>(), tmFileCreator);\n-    tmConfigStub = std::make_shared<TelemetryConfiguration>();\n+    auto tmFileCreator = std::make_shared<LE1_NISP_Entities::TelemetryFileCreator>();\n+    tmFileCreator->setByteArrayCreator(std::make_shared<LE1_NISP_Entities::ByteArrayCreatorStandard>());\n+    initializer = TelemetryDetectorInitializer(std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>(), std::make_shared<LE1_NISP_Entities::DetectorImplCreator>(), tmFileCreator);\n+    tmConfigStub = std::make_shared<LE1_NISP_Entities::TelemetryConfiguration>();\n   }\n   ~TelemetryDetectorInitializerFixture_test(){}\n \n   TelemetryDetectorInitializer initializer;\n-  std::shared_ptr<TelemetryConfiguration> tmConfigStub;\n+  std::shared_ptr<LE1_NISP_Entities::TelemetryConfiguration> tmConfigStub;\n };\n \n \n@@ -213,7 +213,7 @@ BOOST_FIXTURE_TEST_SUITE (TelemetryDetectorInitializerSingleChunk_test,\n                           TelemetryDetectorInitializerFixture_test)\n \n BOOST_AUTO_TEST_CASE( ShouldThrowFileNotFoundExceptionWhenPassingAFileThatDoesnotExist ) {  \n-  BOOST_REQUIRE_THROW(initializer.initDetectors(\"/not/existing/file\"), FileNotFoundException);\n+  BOOST_REQUIRE_THROW(initializer.initDetectors(\"/not/existing/file\"), LE1_NISP_Entities::FileNotFoundException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenAnEmptyInputFileShouldThrowEmptyTelemetryFileException ) {\n@@ -225,7 +225,7 @@ BOOST_AUTO_TEST_CASE( GivenAnEmptyInputFileShouldThrowEmptyTelemetryFileExceptio\n BOOST_AUTO_TEST_CASE( GivenNullTelemtryConfigurationShouldThrowNullTelemetryConfigurationException ) {\n   auto tmFile = createTmpFile({0x01});\n   initializer.setTelemetryConfiguration(nullptr);\n-  BOOST_REQUIRE_THROW(initializer.initDetectors(tmFile.path().c_str()), NullTelemetryConfigurationException);\n+  BOOST_REQUIRE_THROW(initializer.initDetectors(tmFile.path().c_str()), LE1_NISP_Entities::NullTelemetryConfigurationException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenANullptrTelemetryFileCreatorShouldThrowNullTelemetryFileCreatorException ) {\n@@ -538,7 +538,7 @@ BOOST_AUTO_TEST_CASE( GivenTmFileWithLessBytesThanExpectedBeforeTail1ShouldThrow\n   tmConfigStub->setSync(sync);\n   initializer.setTelemetryConfiguration(tmConfigStub);\n \n-  BOOST_REQUIRE_THROW(initializer.initDetectors(tmFile.path().c_str()), OffsetExceedingEndOfFileException);\n+  BOOST_REQUIRE_THROW(initializer.initDetectors(tmFile.path().c_str()), LE1_NISP_Entities::OffsetExceedingEndOfFileException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenTmFileWithLessBytesThanExpectedTail1SizeShouldThrowErrorReadingParameterException ) {\n@@ -615,7 +615,7 @@ BOOST_AUTO_TEST_CASE( GivenTmFileWithLessBytesThanExpectedBeforeTail2ShouldThrow\n   tmConfigStub->setTail1(tail1);\n   initializer.setTelemetryConfiguration(tmConfigStub);\n \n-  BOOST_REQUIRE_THROW(initializer.initDetectors(tmFile.path().c_str()), OffsetExceedingEndOfFileException);\n+  BOOST_REQUIRE_THROW(initializer.initDetectors(tmFile.path().c_str()), LE1_NISP_Entities::OffsetExceedingEndOfFileException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenTmFileWithLessBytesThanExpectedTail2SizeShouldThrowErrorReadingParameterException ) {\n@@ -697,7 +697,7 @@ BOOST_AUTO_TEST_CASE( GivenTmFileWithLessBytesThanExpectedBeforeTail3ShouldThrow\n   tmConfigStub->setTail2(tail2);\n   initializer.setTelemetryConfiguration(tmConfigStub);\n \n-  BOOST_REQUIRE_THROW(initializer.initDetectors(tmFile.path().c_str()), OffsetExceedingEndOfFileException);\n+  BOOST_REQUIRE_THROW(initializer.initDetectors(tmFile.path().c_str()), LE1_NISP_Entities::OffsetExceedingEndOfFileException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenTmFileWithLessBytesThanExpectedTail3SizeShouldThrowErrorReadingParameterException ) {\n@@ -755,7 +755,7 @@ BOOST_AUTO_TEST_CASE( GivenTmFileWithLessBytesThanExpectedBeforeTail4ShouldThrow\n   tmConfigStub->setTail3(tail3);\n   initializer.setTelemetryConfiguration(tmConfigStub);\n \n-  BOOST_REQUIRE_THROW(initializer.initDetectors(tmFile.path().c_str()), OffsetExceedingEndOfFileException);\n+  BOOST_REQUIRE_THROW(initializer.initDetectors(tmFile.path().c_str()), LE1_NISP_Entities::OffsetExceedingEndOfFileException);\n }\n \n BOOST_AUTO_TEST_CASE( GivenTmFileWithLessBytesThanExpectedTail4SizeShouldThrowErrorReadingParameterException ) {\n@@ -801,7 +801,7 @@ BOOST_AUTO_TEST_CASE( GivenTmFileWithWrongTail4ValueShouldThrowTail4NotFoundExce\n BOOST_AUTO_TEST_CASE( GivenTelemetryFileWithUncompressedHeaderShouldReturnDetectorWithExpectedHeaderValues ) {\n   size_t numberOfDetectors = 1;\n \n-  DetectorHeader expectedHeader = createHeader(acquisitionCounter, framePerGroup, groupCounter, sceInfo, \n+  LE1_NISP_Entities::DetectorHeader expectedHeader = createHeader(acquisitionCounter, framePerGroup, groupCounter, sceInfo,\n                                                scienceSize, historySize, \n                                                analogTmSize, errorSize, \n                                                qfSize, rawlinesSize, engSize);\n@@ -824,7 +824,7 @@ BOOST_AUTO_TEST_CASE( GivenTelemetryFileWithCustomHeaderShouldReturnDetectorWith\n   qfSize       = 23;\n   rawlinesSize = 21;\n   engSize      = 63;\n-  DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groupCounter, sceInfo, \n+  LE1_NISP_Entities::DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groupCounter, sceInfo,\n                                        scienceSize, historySize, \n                                        analogTmSize, errorSize, \n                                        qfSize, rawlinesSize, engSize);\n@@ -865,7 +865,7 @@ BOOST_AUTO_TEST_CASE( GivenTelemetryFileWithCustomHeaderShouldReturnDetectorWith\n \n BOOST_AUTO_TEST_CASE( GivenTelemetryFileWithMultipleDetectorsTelemetryShouldReturnVectorWithExpectedSize ) {\n   unsigned int expectedDetectors = 8;\n-  DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groupCounter, sceInfo, \n+  LE1_NISP_Entities::DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groupCounter, sceInfo,\n                                        scienceSize, historySize, \n                                        analogTmSize, errorSize, \n                                        qfSize, rawlinesSize, engSize);\n@@ -877,7 +877,7 @@ BOOST_AUTO_TEST_CASE( GivenTelemetryFileWithMultipleDetectorsTelemetryShouldRetu\n \n BOOST_AUTO_TEST_CASE( GivenTmFileStartingWithRandomBytesShouldSkipThemAndReturnTheExpectedNumberOfDetectors ) {\n   unsigned int expectedDetectors = 8;\n-  DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groupCounter, sceInfo, \n+  LE1_NISP_Entities::DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groupCounter, sceInfo,\n                                        scienceSize, historySize, \n                                        analogTmSize, errorSize, \n                                        qfSize, rawlinesSize, engSize);\n@@ -890,7 +890,7 @@ BOOST_AUTO_TEST_CASE( GivenTmFileStartingWithRandomBytesShouldSkipThemAndReturnT\n \n BOOST_AUTO_TEST_CASE( GivenRandomBytesBetweenDetectorsShouldSkipThemAndReturnTheExpectedNumberOfDetectors ) {\n   unsigned int expectedDetectors = 5;\n-  DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groupCounter, sceInfo, \n+  LE1_NISP_Entities::DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groupCounter, sceInfo,\n                                        0, 0, 0, 0, 0, 0, 0);\n   std::vector<uint8_t> tmData = {0x12, 0x34};                                       \n   tmData += createTmDataSingleChunk(1, sync, tail1, tail2, tail3, tail4, header, digitalTmSize);\n@@ -910,7 +910,7 @@ BOOST_AUTO_TEST_CASE( GivenRandomBytesBetweenDetectorsShouldSkipThemAndReturnThe\n \n BOOST_AUTO_TEST_CASE( GivenTmFileShouldInitDetectorWithExpectedTelemetryDetectorStartPosAndEndPos ) {\n   unsigned int detectorsNum = 8;\n-  DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groupCounter, sceInfo, \n+  LE1_NISP_Entities::DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groupCounter, sceInfo,\n                                        scienceSize, historySize, \n                                        analogTmSize, errorSize, \n                                        qfSize, rawlinesSize, engSize);\n@@ -934,7 +934,7 @@ BOOST_AUTO_TEST_CASE( GivenTmFileShouldInitDetectorWithExpectedTelemetryDetector\n BOOST_AUTO_TEST_CASE( GivenTmFileWithAllEmptySectionsShouldInitDetectorWithCorrectSectionSizes ) {\n   unsigned int detectorsNum = 8;\n   \n-  DetectorHeader header = createHeader(acquisitionCounter, 0, 0, sceInfo, 0, 0, 0, 0, 0, 0, 0); \n+  LE1_NISP_Entities::DetectorHeader header = createHeader(acquisitionCounter, 0, 0, sceInfo, 0, 0, 0, 0, 0, 0, 0);\n   auto tmData = createTmDataSingleChunk(detectorsNum, sync, tail1, tail2, tail3, tail4, header, 0);\n   auto tmFile = createTmpFile(tmData);\n \n@@ -963,7 +963,7 @@ BOOST_AUTO_TEST_CASE( GivenTmFileWithAllEmptySectionsShouldInitDetectorWithCorre\n BOOST_AUTO_TEST_CASE( GivenTmFileWithAllEmptySectionsShouldInitDetectorWithCorrectTailOffsets ) {\n   unsigned int detectorsNum = 8;\n   \n-  DetectorHeader header = createHeader(acquisitionCounter, 0, 0, sceInfo, 0, 0, 0, 0, 0, 0, 0); \n+  LE1_NISP_Entities::DetectorHeader header = createHeader(acquisitionCounter, 0, 0, sceInfo, 0, 0, 0, 0, 0, 0, 0);\n   auto tmData = createTmDataSingleChunk(detectorsNum, sync, tail1, tail2, tail3, tail4, header, 0);\n   auto tmFile = createTmpFile(tmData);\n \n@@ -1001,7 +1001,7 @@ BOOST_AUTO_TEST_CASE( GivenInputTelemetryWithWrongTail4ShouldThrowTail4NotFoundE\n   size_t dataBlockSize      = scienceDataSize;\n   size_t firstChunkPaddSize = 27;\n \n-  DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo, \n+  LE1_NISP_Entities::DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo,\n                                        scienceDataSize, historySize, \n                                        analogTmSize, errorSize, \n                                        qfSize, rawlinesSize, engDataSize);\n@@ -1036,7 +1036,7 @@ BOOST_AUTO_TEST_CASE( GivenInputTelemetryWithNoTail4ShouldThrowTail4NotFoundExce\n   size_t dataBlockSize      = scienceDataSize;\n   size_t firstChunkPaddSize = 27;\n \n-  DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo, \n+  LE1_NISP_Entities::DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo,\n                                       scienceDataSize, historySize, \n                                       analogTmSize, errorSize, \n                                       qfSize, rawlinesSize, engDataSize);\n@@ -1068,7 +1068,7 @@ BOOST_AUTO_TEST_CASE( GivenInputTelemetryWithLessBytesThanTail4AvailableShouldTh\n   size_t dataBlockSize      = scienceDataSize;\n   size_t firstChunkPaddSize = 27;\n \n-  DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo, \n+  LE1_NISP_Entities::DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo,\n                                        scienceDataSize, historySize, \n                                        analogTmSize, errorSize, \n                                        qfSize, rawlinesSize, engDataSize);     \n@@ -1100,7 +1100,7 @@ BOOST_AUTO_TEST_CASE( GivenTelemetryFileWithUncompressedHeaderShouldReturnDetect\n   size_t dataBlockSize      = scienceDataSize;\n   size_t firstChunkPaddSize = 27;\n   \n-  DetectorHeader expectedHeader = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo, \n+  LE1_NISP_Entities::DetectorHeader expectedHeader = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo,\n                                                scienceDataSize, historySize, \n                                                analogTmSize, errorSize, \n                                                qfSize, rawlinesSize, engDataSize); \n@@ -1140,7 +1140,7 @@ BOOST_AUTO_TEST_CASE( GivenTelemetryFileWithCustomHeaderShouldReturnDetectorWith\n   size_t dataBlockSize      = scienceSize;\n   size_t firstChunkPaddSize = 27;\n   \n-  DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo, \n+  LE1_NISP_Entities::DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo,\n                                        scienceSize, historySize, \n                                        analogTmSize, errorSize, \n                                        qfSize, rawlinesSize, engSize); \n@@ -1181,7 +1181,7 @@ BOOST_AUTO_TEST_CASE( GivenTelemetryFileWithMultipleDetectorsShouldReturnVectorW\n   size_t dataBlockSize      = scienceSize;\n   size_t firstChunkPaddSize = 27;\n \n-  DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo, \n+  LE1_NISP_Entities::DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo,\n                                        scienceSize, historySize, \n                                        analogTmSize, errorSize, \n                                        qfSize, rawlinesSize, engSize);     \n@@ -1212,7 +1212,7 @@ BOOST_AUTO_TEST_CASE( GivenTelemetryFileWithTwoChunksShouldInitDetectorWithTwoEn\n   size_t firstChunkPaddSize = 27;\n   int expectedNumberOfEngSections = 2;\n \n-  DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo, \n+  LE1_NISP_Entities::DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo,\n                                        scienceSize, historySize, \n                                        analogTmSize, errorSize, \n                                        qfSize, rawlinesSize, engSize);     \n@@ -1243,7 +1243,7 @@ BOOST_AUTO_TEST_CASE( GivenTelemetryFileWithThreeChunksShouldThrowTooManyMemBuff\n   size_t dataBlockSize  = scienceSize;\n   size_t chunkPaddSize  = 27;\n   \n-  DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo, \n+  LE1_NISP_Entities::DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo,\n                                        scienceSize, historySize, \n                                        analogTmSize, errorSize, \n                                        qfSize, rawlinesSize, engSize);     \n@@ -1290,7 +1290,7 @@ BOOST_DATA_TEST_CASE_F( TelemetryDetectorInitializerFixture_test,\n   uint32_t blocksPerChunk = floor(memoryBuffSize/dataBlockSize);\n   uint32_t extraBlocks    = groups - blocksPerChunk;\n   \n-  DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo, \n+  LE1_NISP_Entities::DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo,\n                                        scienceSize, historySize, \n                                        analogTmSize, errorSize, \n                                        qfSize, rawlinesSize, engSize); \n@@ -1306,17 +1306,17 @@ BOOST_DATA_TEST_CASE_F( TelemetryDetectorInitializerFixture_test,\n   size_t engSize2    = engSize - engSize1;\n   size_t tail4Offset = engOffset2 + engSize2 + computePadding(engSize2);\n \n-  auto expectedEngSection1 = std::make_shared<TelemetrySection>(\n+  auto expectedEngSection1 = std::make_shared<LE1_NISP_Entities::TelemetrySection>(\n     engOffset1,\n     engSize1,\n     chunkPadding1\n   );\n-  auto expectedEngSection2 = std::make_shared<TelemetrySection>(\n+  auto expectedEngSection2 = std::make_shared<LE1_NISP_Entities::TelemetrySection>(\n     engOffset2,\n     engSize2,\n     computePadding(engSize2)\n   );\n-  auto expectedTail4Sec = std::make_shared<TelemetrySection>(tail4Offset, 4, 0);\n+  auto expectedTail4Sec = std::make_shared<LE1_NISP_Entities::TelemetrySection>(tail4Offset, 4, 0);\n  \n   tmConfigStub->setDigitalTelemetrySize(digitalTmSize);\n   tmConfigStub->setMemoryBufferMaxSize(memoryBuffSize);\n@@ -1345,7 +1345,7 @@ BOOST_AUTO_TEST_CASE( GivenTmFileShouldInitDetectorWithExpectedTelemetryDetector\n   size_t dataBlockSize  = scienceSize;\n   size_t chunkPadding1  = 49;\n \n-  DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo, \n+  LE1_NISP_Entities::DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo,\n                                        scienceSize, historySize, \n                                        analogTmSize, errorSize, \n                                        qfSize, rawlinesSize, engSize); \n@@ -1386,7 +1386,7 @@ BOOST_AUTO_TEST_CASE( GivenTmFileWithAllEmptySectionsExceptForEngDataShouldRetur\n   size_t dataBlockSize  = scienceSize;\n   size_t chunkPadding1  = 49;\n \n-  DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo, \n+  LE1_NISP_Entities::DetectorHeader header = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo,\n                                        0, historySize, \n                                        analogTmSize, errorSize, \n                                        0, 0, engSize); \n@@ -1425,15 +1425,15 @@ BOOST_AUTO_TEST_CASE( GivenRandomBytesBetweenDetectorsWithDifferentDataSizesShou\n   size_t dataBlockSize      = scienceDataSize;\n   size_t firstChunkPaddSize = 27;\n \n-  DetectorHeader header1 = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo,\n+  LE1_NISP_Entities::DetectorHeader header1 = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo,\n                                        scienceDataSize, historySize,\n                                        analogTmSize, errorSize,\n                                        qfSize, rawlinesSize, engDataSize);\n-  DetectorHeader header2 = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo,\n+  LE1_NISP_Entities::DetectorHeader header2 = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo,\n                                         0, historySize,\n                                         analogTmSize, errorSize+1,\n                                         qfSize, rawlinesSize, engDataSize);\n-  DetectorHeader header3 = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo,\n+  LE1_NISP_Entities::DetectorHeader header3 = createHeader(acquisitionCounter, framePerGroup, groups, sceInfo,\n                                         scienceDataSize, historySize,\n                                         analogTmSize, errorSize+123,\n                                         qfSize, rawlinesSize, engDataSize);\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_ProcessScience/CMakeLists.txt": [
                        [
                            "@@ -1,298 +0,0 @@\n-CMAKE_MINIMUM_REQUIRED(VERSION 2.8.5)\n-\n-option(BUILD_INTEGRATION_TESTS \"Build integration tests\" OFF)\n-\n-#===============================================================================\n-# Load elements_subdir macro here\n-# Examples:\n-#   For declaring a project module:\n-#         elements_subdir(ElementsExamples)\n-#===============================================================================\n-elements_subdir(LE1_NISP_ProcessScience)\n-\n-#===============================================================================\n-# Load elements_depends_on_subdirs macro here\n-#   For creating a dependency onto an other accessible module\n-#         elements_depends_on_subdirs(ElementsKernel)\n-#===============================================================================\n-elements_depends_on_subdirs(ElementsKernel)\n-elements_depends_on_subdirs(EleFits)\n-elements_depends_on_subdirs(EL_Image)\n-elements_depends_on_subdirs(ST_DataModelBindings)\n-\n-#===============================================================================\n-# Add the find_package macro (a pure CMake command) here to locate the\n-# libraries.\n-# Examples:\n-#          find_package(CppUnit)\n-#===============================================================================\n-\n-find_package(Eigen3 REQUIRED)\n-\n-#===============================================================================\n-# Declare the library dependencies here\n-# Example:\n-#         elements_add_library(ElementsExamples src/Lib/*.cpp\n-#                     INCLUDE_DIRS Boost ElementsKernel\n-#                     LINK_LIBRARIES Boost ElementsKernel\n-#                     PUBLIC_HEADERS ElementsExamples)\n-#===============================================================================\n-elements_add_library(LE1_NISP_ProcessScience src/lib/*.cpp\n-                     INCLUDE_DIRS ElementsKernel Eigen3 EleFits EL_Image ST_DataModelBindings\n-                     LINK_LIBRARIES ElementsKernel EleFits EL_Image ST_DataModelBindings ST_DM_MDBTools\n-                     PUBLIC_HEADERS LE1_NISP_ProcessScience)\n-\n-#===============================================================================\n-# Declare the executables here\n-# Example:\n-# elements_add_executable(ElementsProgramExample src/Program/ProgramExample.cpp\n-#                        INCLUDE_DIRS Boost ElementsExamples\n-#                        LINK_LIBRARIES Boost ElementsExamples)\n-#===============================================================================\n-elements_add_executable(LE1_NISP_Processor src/program/LE1_NISP_Processor.cpp\n-                     INCLUDE_DIRS ElementsKernel LE1_NISP_ProcessScience\n-                     LINK_LIBRARIES ElementsKernel LE1_NISP_ProcessScience)\n-\n-#===============================================================================\n-# Declare the Boost tests here\n-# Example:\n-# elements_add_unit_test(BoostClassExample tests/src/Boost/ClassExample_test.cpp\n-#                       EXECUTABLE BoostClassExample_test\n-#                       INCLUDE_DIRS ElementsExamples\n-#                       LINK_LIBRARIES ElementsExamples TYPE Boost)\n-#===============================================================================\n-if(BUILD_INTEGRATION_TESTS)\n-elements_add_unit_test(ProductGeneratorIntegration tests/integration-tests/src/ProductGenerator_integration_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_ProductGenerator_integration_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests/integration-tests/resources/\n-                     TYPE Boost)\n-elements_add_unit_test(ConfigurationParserMdbIntegration tests/integration-tests/src/ConfigurationParserMdb_integration_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_ConfigurationParserMdb_integration_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests/integration-tests/resources/\n-                     TYPE Boost)\n-endif()\n-elements_add_unit_test(DetectorMetadata tests/src/DetectorMetadata_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_DetectorMetadata_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(ProductGenerator tests/src/ProductGenerator_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_ProductGenerator_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(Exception tests/src/Exception_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_Exception_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(TelemetryFile tests/src/TelemetryFile_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_TelemetryFile_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(TelemetryDetector tests/src/TelemetryDetector_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_TelemetryDetector_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(ParameterDescription tests/src/ParameterDescription_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_ParameterDescription_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(Parameter tests/src/Parameter_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_Parameter_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(MetadataParserParamDescriptions tests/src/MetadataParserParamDescriptions_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_MetadataParserParamDescriptions_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(TelemetrySection tests/src/TelemetrySection_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_TelemetrySection_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(RawLinesDecoder tests/src/RawLinesDecoder_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_RawLinesDecoder_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(ByteArrayEuclid tests/src/ByteArrayEuclid_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_ByteArrayEuclid_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(ByteArrayStandard tests/src/ByteArrayStandard_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_ByteArrayStandard_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(ByteArrayCreatorEuclid tests/src/ByteArrayCreatorEuclid_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_ByteArrayCreatorEuclid_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(ByteArrayCreatorStandard tests/src/ByteArrayCreatorStandard_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_ByteArrayCreatorStandard_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(DetectorConfigMapper tests/src/DetectorConfigMapper_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_DetectorConfigMapper_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(TelemetryConfiguration tests/src/TelemetryConfiguration_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_TelemetryConfiguration_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(TelemetryDetectorInitializer tests/src/TelemetryDetectorInitializer_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_TelemetryDetectorInitializer_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(HkWriterElFitsIO tests/src/HkWriterElFitsIO_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_HkWriterElFitsIO_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(DetectorMap tests/src/DetectorMap_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_DetectorMap_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(DetectorId tests/src/DetectorId_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_DetectorId_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(DetectorCollectorObt tests/src/DetectorCollectorObt_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_DetectorCollectorObt_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(EngDecoder tests/src/EngDecoder_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_EngDecoder_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(EngUnprocessedGroupsFitsWriter tests/src/EngUnprocessedGroupsFitsWriter_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_EngUnprocessedGroupsFitsWriter_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(ExposuresCounter tests/src/ExposuresCounter_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_ExposuresCounter_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(ScienceDecoder tests/src/ScienceDecoder_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_ScienceDecoder_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(DecompressorShort tests/src/DecompressorShort_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_DecompressorShort_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(ScienceWriterElFitsIO tests/src/ScienceWriterElFitsIO_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_ScienceWriterElFitsIO_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(QualityDataDecoder tests/src/QualityDataDecoder_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_QualityDataDecoder_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(DecompressorByte tests/src/DecompressorByte_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_DecompressorByte_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(EngPixelsOverThresholdFitsWriter tests/src/EngPixelsOverThresholdFitsWriter_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_EngPixelsOverThresholdFitsWriter_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(AnalogTelemetryDecoder tests/src/AnalogTelemetryDecoder_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_AnalogTelemetryDecoder_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(ErrorsDecoder tests/src/ErrorsDecoder_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_ErrorsDecoder_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(ParamDescriptionParserXml tests/src/ParamDescriptionParserXml_test.cpp\n-                     EXECUTABLE LE1_NISP_ProcessScience_ParamDescriptionParserXml_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(TelemetryConfigParserXml tests/src/TelemetryConfigParserXml_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_TelemetryConfigParserXml_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(DetectorConfigParserXml tests/src/DetectorConfigParserXml_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_DetectorConfigParserXml_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(ExposureConfigParserXml tests/src/ExposureConfigParserXml_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_ExposureConfigParserXml_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(ExposureConfigManager tests/src/ExposureConfigManager_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_ExposureConfigManager_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(ExposureConfigurationImpl tests/src/ExposureConfigurationImpl_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_ExposureConfigurationImpl_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(HistoryDecoder tests/src/HistoryDecoder_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_HistoryDecoder_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(PlanningIdGroundTests tests/src/PlanningIdGroundTests_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_PlanningIdGroundTests_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(PlanningIdSoc20210215 tests/src/PlanningIdSoc20210215_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_PlanningIdSoc20210215_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(Utils tests/src/Utils_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_Utils_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(ProductsArchiverDataModelBindings tests/src/ProductsArchiverDataModelBindings_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_ProductsArchiverDataModelBindings_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(TelemetryDecoder tests/src/TelemetryDecoder_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_TelemetryDecoder_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(DetectorImpl tests/src/DetectorImpl_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_DetectorImpl_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(EngUncompressedImageFitsWriter tests/src/EngUncompressedImageFitsWriter_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_EngUncompressedImageFitsWriter_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(ProductsWriter tests/src/ProductsWriter_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_ProductsWriter_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(ConfigurationParserMdb tests/src/ConfigurationParserMdb_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_ConfigurationParserMdb_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(OnBoardTime tests/src/OnBoardTime_test.cpp\n-                     EXECUTABLE LE1_NISP_ProcessScience_OnBoardTime_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(Wcs tests/src/Wcs_test.cpp \n-                     EXECUTABLE LE1_NISP_ProcessScience_Wcs_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-elements_add_unit_test(DataModelParamsParserXml tests/src/DataModelParamsParserXml_test.cpp\n-                     EXECUTABLE LE1_NISP_ProcessScience_DataModelParamsParserXml_test\n-                     LINK_LIBRARIES LE1_NISP_ProcessScience\n-                     TYPE Boost)\n-\n-#===============================================================================\n-# Use the following macro for python modules, scripts and aux files:\n-#  elements_install_python_modules()\n-#  elements_install_scripts()\n-#===============================================================================\n-\n-#===============================================================================\n-# Declare the Python programs here\n-# Examples :\n-# elements_add_python_program(PythonProgramExample\n-#                             ElementsExamples.PythonProgramExample)\n-#===============================================================================\n-\n-#===============================================================================\n-# Add the elements_install_conf_files macro\n-# Examples:\n-#          elements_install_conf_files()\n-#===============================================================================\n-elements_install_conf_files()\n-elements_install_aux_files()\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_ProcessScience/LE1_NISP_ProcessScience/DetectorMetadata.h": [
                        [
                            "@@ -1,332 +0,0 @@\n-/**\n- * @file LE1_NISP_ProcessScience/DetectorMetadata.h\n- * @date 06/16/20\n- * @author user\n- *\n- * @copyright (C) 2012-2020 Euclid Science Ground Segment\n- *\n- * This library is free software; you can redistribute it and/or modify it under\n- * the terms of the GNU Lesser General Public License as published by the Free\n- * Software Foundation; either version 3.0 of the License, or (at your option)\n- * any later version.\n- *\n- * This library is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n- * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n- * details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this library; if not, write to the Free Software Foundation, Inc.,\n- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n- *\n- */\n-\n-#ifndef _LE1_NISP_PROCESSSCIENCE_DETECTORMETADATA_H\n-#define _LE1_NISP_PROCESSSCIENCE_DETECTORMETADATA_H\n-\n-#include <cstdint>\n-#include <map>\n-\n-#include \"LE1_NISP_ProcessScience//OnBoardTime.h\"\n-#include \"LE1_NISP_ProcessScience//Parameter.h\"\n-#include \"LE1_NISP_ProcessScience//DetectorConfigManager.h\"\n-#include \"LE1_NISP_ProcessScience//ExposureConfiguration.h\"\n-#include \"LE1_NISP_ProcessScience//PlanningId.h\"\n-\n-namespace LE1_NISP_ProcessScience{\n-\n-class CommonDetectorMetadata{\n-public:\n-  virtual ~CommonDetectorMetadata() = default;\n-\n-  virtual unsigned int countCommonParameters() const = 0;\n-  virtual bool hasCommonParameter(const std::string &paramName) const = 0;\n-  virtual void addCommonParameter(const std::shared_ptr<ParameterInterface> param) = 0;\n-  virtual std::shared_ptr<const ParameterInterface> getCommonParameter(const std::string &paramName) const = 0;\n-\n-  virtual std::string getProductId() const = 0;\n-\n-  virtual uint8_t getAcquisitionCounter() const = 0;\n-  virtual uint8_t getMaccGroups() const = 0;\n-  virtual uint8_t getMaccFramesPerGroup() const = 0;\n-  virtual uint8_t getMaccDropedFrames() const = 0;\n-\n-  virtual std::string getReadoutMode() const = 0;\n-\n-  virtual double getFrameTime() const = 0;\n-  virtual double getLineTime() const  = 0;\n-\n-  virtual std::shared_ptr<PlanningId> getPlanningId() const = 0;\n-  virtual uint16_t getPid1() const = 0;\n-  virtual uint16_t getPid2() const = 0;\n-\n-  virtual std::shared_ptr<ExposureConfiguration> getExposureConfiguration() const = 0;\n-  virtual uint16_t getExposureConfigValue() const = 0;\n-\n-  virtual uint16_t getObt1() const = 0;\n-  virtual uint16_t getObt2() const = 0;\n-  virtual uint16_t getObt3() const = 0;\n-  virtual std::shared_ptr<LE1_NISP::OnBoardTime> getObt() const = 0;\n-\n-  virtual uint16_t getAcquisitionResets() const = 0;\n-  virtual uint16_t getAcquisitionReads() const = 0;\n-  virtual uint16_t getPostResetDropLines() const = 0;\n-  virtual uint16_t getAcquisitionGroups() const = 0;\n-  virtual uint32_t getPostReadDropLines() const = 0;\n-\n-  virtual uint16_t getCurrentResets() const = 0;\n-  virtual uint16_t getCurrentReads() const = 0;\n-  virtual uint16_t getCurrentPostResetDropLines() const = 0;\n-  virtual uint16_t getCurrentGroups() const = 0;\n-  virtual uint32_t getCurrentPostReadDropLines() const = 0;\n-  \n-  virtual uint16_t getModeStatus() const = 0;\n-  virtual uint16_t getRampStatus() const = 0;\n-\n-  virtual uint16_t getReadoutNoise() const = 0;\n-  virtual uint16_t getGainFactor() const = 0;\n-  virtual uint16_t getChi2PxThresh() const = 0;\n-  virtual uint16_t getUsedRawLines() const = 0;\n-\n-  virtual uint16_t getUsedComprBlockSize() const = 0;\n-  virtual uint16_t getUsedComprFundSeqPar1() const = 0;\n-  virtual uint16_t getUsedComprFundSeqPar2() const = 0;\n-\n-  virtual uint16_t getTimeTagDelay() const = 0;\n-\n-  virtual uint16_t getSignalOffset() const = 0;\n-  virtual uint16_t getSignalScalingFactor() const = 0;\n-\n-  virtual uint16_t getRawLineIndex1() const = 0;\n-  virtual uint16_t getRawLineIndex2() const = 0;\n-  virtual uint16_t getRawLineIndex3() const = 0;\n-  virtual uint16_t getRawLineIndex4() const = 0;\n-  virtual uint16_t getRawLineIndex5() const = 0;\n-  virtual uint16_t getHistoryParamIndex() const = 0;\n-\n-  virtual double getExposureTime() const = 0;\n-\n-};\n-\n-class DetectorMetadata: public CommonDetectorMetadata{\n-public:\n-  virtual ~DetectorMetadata(){}\n-\n-  virtual unsigned int countParameters() const = 0;\n-  virtual bool hasParameter(const std::string &paramName) const = 0;\n-  virtual void addParameter(const std::shared_ptr<ParameterInterface> param) = 0;\n-  virtual std::shared_ptr<const ParameterInterface> getParameter(const std::string &paramName) const = 0;\n-\n-  virtual uint8_t getMasterDpuId() const = 0;\n-  virtual uint8_t getDpuId() const = 0;\n-  virtual uint8_t getSceId() const = 0;\n-  virtual uint8_t getSceStatus() const = 0;\n-  virtual uint8_t getPacketType() const = 0;\n-\n-  virtual DetectorId getDetectorId() const = 0;\n-  virtual std::string getScaId() const = 0;\n-\n-  virtual Wcs getWcs() const = 0;\n-\n-  virtual uint16_t getValidCommandCounter() const = 0;\n-  virtual uint16_t getRejectedCommandCounter() const = 0;\n-\n-  virtual uint16_t getFrameCheckErrCounter() const = 0;\n-  virtual uint16_t getLineCheckErrCounter() const = 0;\n-  virtual uint16_t getImAliveCounter() const = 0;\n-\n-  virtual uint16_t getIpcVerStartPos() const = 0;\n-  virtual uint16_t getIpcVerSpace() const = 0;\n-  virtual uint16_t getIpcHorStartPos() const = 0;\n-  virtual uint16_t getIpcHorSpace() const = 0;\n-  virtual uint16_t getIpcVResetBias() const = 0;\n-  \n-  virtual uint16_t getShortedPreampInputRows() const = 0;\n-  virtual uint16_t getPreampGain() const = 0;\n-  virtual uint16_t getDigitalTestPattern() const = 0;\n-  virtual uint16_t getTestPatternFrameSlope() const = 0;\n-  virtual uint16_t getTestPatternOffset() const = 0;\n-\n-  virtual uint16_t getExpCyclesFrames() const = 0;\n-  virtual uint16_t getComprFactorSignal() const = 0;\n-  virtual uint16_t getComprFactorChi2() const = 0;\n-  virtual uint16_t getProcessingExecTime() const = 0;\n-\n-  virtual uint16_t getCrcGroupMask() const = 0;\n-\n-  virtual double getElapsedTime() const  = 0;\n-\n-  virtual double getScienceCompressionRatio() const = 0;\n-  virtual void setScienceCompressionRatio(double ratio) = 0;\n-\n-  virtual double getQualityDataCompressionRatio() const = 0;\n-  virtual void setQualityDataCompressionRatio(double ratio) = 0;\n-};\n-\n-class DetectorMetadataNISP: public DetectorMetadata{\n-public:\n-  DetectorMetadataNISP(const std::shared_ptr<DetectorConfigManager> configManager, \n-                       const std::shared_ptr<ExposureConfigurationCreator> expConfigCreator,\n-                       const std::shared_ptr<PlanningIdCreator> planningIdCreator);\n-  virtual ~DetectorMetadataNISP();\n-\n-  void setDetectorConfigManager(const std::shared_ptr<DetectorConfigManager> detConfigManager);\n-  void setExposureConfigCreator(const std::shared_ptr<ExposureConfigurationCreator> expConfigCreator);\n-  void setPlanningIdCreator(const std::shared_ptr<PlanningIdCreator> planningIdCreator);\n-\n-  unsigned int countParameters() const override;\n-  bool hasParameter(const std::string &paramName) const override;\n-  void addParameter(const std::shared_ptr<ParameterInterface> param) override;\n-  std::shared_ptr<const ParameterInterface> getParameter(const std::string &paramName) const override;\n-\n-  unsigned int countCommonParameters() const override;\n-  bool hasCommonParameter(const std::string &paramName) const override;\n-  void addCommonParameter(const std::shared_ptr<ParameterInterface> param) override;\n-  std::shared_ptr<const ParameterInterface> getCommonParameter(const std::string &paramName) const override;\n-\n-  virtual std::string getProductId() const override;\n-\n-  virtual std::shared_ptr<PlanningId> getPlanningId() const override;\n-\n-  virtual uint16_t getPid1() const override;\n-  virtual uint16_t getPid2() const override;\n-\n-  virtual uint8_t getDpuId() const override;\n-  virtual uint8_t getMasterDpuId() const override;\n-  virtual uint8_t getSceId() const override;\n-  virtual uint8_t getSceStatus() const override;\n-  virtual uint8_t getPacketType() const override;\n-\n-  virtual DetectorId getDetectorId() const override;\n-  virtual std::string getScaId() const override;\n-\n-  Wcs getWcs() const override;\n-\n-  virtual uint16_t getObt1() const override;\n-  virtual uint16_t getObt2() const override;\n-  virtual uint16_t getObt3() const override;\n-\n-  virtual std::shared_ptr<ExposureConfiguration> getExposureConfiguration() const override;\n-  virtual uint16_t getExposureConfigValue() const override;\n-\n-  virtual uint16_t getValidCommandCounter() const override;\n-  virtual uint16_t getRejectedCommandCounter() const override;\n-\n-  virtual uint16_t getFrameCheckErrCounter() const override;\n-  virtual uint16_t getLineCheckErrCounter() const override;\n-  virtual uint16_t getImAliveCounter() const override;\n-\n-  virtual uint8_t getAcquisitionCounter() const override;\n-\n-  virtual uint8_t getMaccGroups() const override;\n-  virtual uint8_t getMaccFramesPerGroup() const override;\n-  virtual uint8_t getMaccDropedFrames() const override;\n-\n-  virtual std::string getReadoutMode() const override;\n-\n-  virtual uint16_t getAcquisitionResets() const override;\n-  virtual uint16_t getAcquisitionReads() const override;\n-  virtual uint16_t getPostResetDropLines() const override;\n-  virtual uint16_t getAcquisitionGroups() const override;\n-  virtual uint32_t getPostReadDropLines() const override;\n-\n-  virtual uint16_t getCurrentResets() const override;\n-  virtual uint16_t getCurrentReads() const override;\n-  virtual uint16_t getCurrentPostResetDropLines() const override;\n-  virtual uint16_t getCurrentGroups() const override;\n-  virtual uint32_t getCurrentPostReadDropLines() const override;\n-\n-  virtual uint16_t getModeStatus() const override;\n-  virtual uint16_t getRampStatus() const override;\n-\n-  virtual uint16_t getIpcVerStartPos() const override;\n-  virtual uint16_t getIpcVerSpace() const override;\n-  virtual uint16_t getIpcHorStartPos() const override;\n-  virtual uint16_t getIpcHorSpace() const override;\n-  virtual uint16_t getIpcVResetBias() const override;\n-\n-  virtual uint16_t getShortedPreampInputRows() const override;\n-  virtual uint16_t getPreampGain() const override;\n-\n-  virtual uint16_t getDigitalTestPattern() const override;\n-  virtual uint16_t getTestPatternFrameSlope() const override;\n-  virtual uint16_t getTestPatternOffset() const override;\n-\n-  virtual uint16_t getReadoutNoise() const override;\n-  virtual uint16_t getGainFactor() const override;\n-  virtual uint16_t getChi2PxThresh() const override;\n-  virtual uint16_t getUsedRawLines() const override;\n-  virtual uint16_t getUsedComprBlockSize() const override;\n-  virtual uint16_t getUsedComprFundSeqPar1() const override;\n-  virtual uint16_t getUsedComprFundSeqPar2() const override;\n-  virtual uint16_t getTimeTagDelay() const override;\n-  virtual uint16_t getExpCyclesFrames() const override;\n-\n-  virtual uint16_t getComprFactorSignal() const override;\n-  virtual uint16_t getComprFactorChi2() const override;\n-\n-  virtual uint16_t getProcessingExecTime() const override;\n-  virtual uint16_t getSignalOffset() const override;\n-  virtual uint16_t getSignalScalingFactor() const override;\n-  virtual uint16_t getCrcGroupMask() const override;\n-\n-  virtual uint16_t getRawLineIndex1() const override;\n-  virtual uint16_t getRawLineIndex2() const override;\n-  virtual uint16_t getRawLineIndex3() const override;\n-  virtual uint16_t getRawLineIndex4() const override;\n-  virtual uint16_t getRawLineIndex5() const override;\n-  virtual uint16_t getHistoryParamIndex() const override;\n-\n-  virtual std::shared_ptr<LE1_NISP::OnBoardTime> getObt() const override;\n-\n-  virtual double getFrameTime() const override;\n-  virtual double getLineTime() const override;\n-\n-  virtual double getExposureTime() const override;\n-  virtual double getElapsedTime() const override;\n-\n-  double getScienceCompressionRatio() const override;\n-  void setScienceCompressionRatio(double ratio) override;\n-\n-  double getQualityDataCompressionRatio() const override;\n-  void setQualityDataCompressionRatio(double ratio) override;\n-\n-private:\n-  std::map<std::string, std::shared_ptr<ParameterInterface>> params;\n-  std::map<std::string, std::shared_ptr<ParameterInterface>> m_commonParams;\n-  std::shared_ptr<DetectorConfigManager> m_detConfigManager;\n-  std::shared_ptr<ExposureConfigurationCreator> m_expConfigCreator;\n-  std::shared_ptr<PlanningIdCreator> m_planningIdCreator;\n-  double m_scienceComprRatio;\n-  double m_qualityDataComprRatio;\n-\n-};\n-\n-\n-class DetectorMetadataCreator{\n-public:\n-  virtual ~DetectorMetadataCreator() = default;\n-\n-  virtual std::shared_ptr<DetectorMetadata> createDetectorMetadata() = 0;\n-};\n-\n-class DetectorMetadataCreatorNISP: public DetectorMetadataCreator{\n-public:\n-  DetectorMetadataCreatorNISP(const std::shared_ptr<DetectorConfigManager> configManager, \n-                              const std::shared_ptr<ExposureConfigurationCreator> expConfigCreator,\n-                              const std::shared_ptr<PlanningIdCreator> planningIdCreator);\n-  virtual ~DetectorMetadataCreatorNISP();\n-  \n-  virtual std::shared_ptr<DetectorMetadata> createDetectorMetadata() override;\n-\n-private:\n-  std::shared_ptr<DetectorConfigManager> m_detConfigManager; \n-  std::shared_ptr<ExposureConfigurationCreator> m_expConfigCreator;\n-  std::shared_ptr<PlanningIdCreator> m_planningIdCreator;\n-\n-};\n-\n-\n-}\n-\n-#endif\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_ProcessScience/src/lib/DetectorConfigParserXml.cpp": [
                        [
                            "@@ -1,117 +0,0 @@\n-/**\n- * @file src/lib/DetectorConfigParserXml.cpp\n- * @date 02/24/21\n- * @author user\n- *\n- * @copyright (C) 2012-2020 Euclid Science Ground Segment\n- *\n- * This library is free software; you can redistribute it and/or modify it under\n- * the terms of the GNU Lesser General Public License as published by the Free\n- * Software Foundation; either version 3.0 of the License, or (at your option)\n- * any later version.\n- *\n- * This library is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n- * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n- * details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this library; if not, write to the Free Software Foundation, Inc.,\n- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n- *\n- */\n-\n-#include \"LE1_NISP_ProcessScience/DetectorConfigParserXml.h\"\n-\n-#include <iostream>\n-#include \"boost/property_tree/xml_parser.hpp\"\n-#include \"boost/property_tree/ptree.hpp\"\n-namespace LE1_NISP_ProcessScience {\n-\n-  DetectorConfigParserXml::DetectorConfigParserXml(){}\n-\n-  DetectorConfigParserXml::~DetectorConfigParserXml(){}\n-\n-  void DetectorConfigParserXml::parse(const std::shared_ptr<DetectorConfigManager> &detConfigManager, const std::string &filename){\n-    if(detConfigManager == nullptr)\n-      throw NullDetectorConfigManagerException(\"DetectorConfigParserXml::parse: \"\n-                                               \"null DetectorConfigManager\");\n-    \n-    std::ifstream inputFile(filename);\n-    \n-    if(!inputFile.good())\n-      throw FileNotFoundException(\"DetectorConfigParserXml::parse: \"\n-                                  \"cannot find file \\\"\" + filename + \"\\\"\");\n-\n-    using boost::property_tree::ptree;\n-    ptree tree;\n-\n-    read_xml(inputFile, tree);\n-    tree = tree.get_child(\"detectorConfig\");\n-\n-    std::string cType1;\n-    std::string cType2;\n-    std::string cUnit1;\n-    std::string cUnit2;\n-\n-    try{\n-      detConfigManager->setDetectorObtTolerance(tree.get<double>(\"commonConfig.detectorObtTolerance\"));\n-      detConfigManager->setFrameLineSize(tree.get<unsigned short>(\"commonConfig.frameLineSize\"));\n-      detConfigManager->setFrameTime(tree.get<double>(\"commonConfig.frameTime\"));\n-      detConfigManager->setLineTime(detConfigManager->getFrameTime()/detConfigManager->getFrameLineSize());\n-      cType1 = tree.get<std::string>(\"commonConfig.CType1\");\n-      cType2 = tree.get<std::string>(\"commonConfig.CType2\");\n-      cUnit1 = tree.get<std::string>(\"commonConfig.CUnit1\");\n-      cUnit2 = tree.get<std::string>(\"commonConfig.CUnit2\");\n-    }catch(const boost::property_tree::ptree_error& er){\n-      inputFile.close();\n-      throw ErrorReadingDetectorConfigException(\"DetectorConfigParserXml::parse: \" \n-                                                + std::string(er.what()));\n-    }\n-\n-    try{\n-      for( ptree::value_type const& val: tree.get_child(\"detectors\")) {\n-        try{\n-          if(val.first == \"detector\"){\n-\n-            DetectorConfiguration detConfig;\n-\n-            auto scePos = val.second.get<std::string>(\"scePos\");\n-            auto dpuId  = val.second.get<unsigned short>(\"dpuId\");\n-            auto sceId  = val.second.get<unsigned short>(\"sceId\");\n-\n-            detConfig.detectorId = DetectorId(dpuId, sceId, scePos);\n-            detConfig.sceIndex   = val.second.get<unsigned short>(\"sceIndex\");\n-            detConfig.scaId      = val.second.get<std::string>(\"scaId\");\n-            detConfig.wcs.cType1 = cType1;\n-            detConfig.wcs.cType2 = cType2;\n-            detConfig.wcs.cUnit1 = cUnit1;\n-            detConfig.wcs.cUnit2 = cUnit2;\n-\n-            detConfigManager->addConfiguration(detConfig);\n-          }\n-        }catch(const boost::property_tree::ptree_error& er){\n-            inputFile.close();\n-            throw ErrorReadingDetectorConfigException(\"DetectorConfigParserXml::parse: \" \n-                                                      + std::string(er.what()));\n-        }\n-      }\n-    }\n-    catch(const boost::property_tree::ptree_bad_path& er){\n-      inputFile.close();\n-      throw IncompleteDetectorConfigException(\"DetectorConfigParserXml::parse: \" \n-                                              + std::string(er.what()));\n-    }\n-\n-    inputFile.close();\n-\n-    if(detConfigManager->countConfigurations() == 0)\n-      throw ZeroDetectorConfigFoundException(\"DetectorConfigParserXml::parse: \" \n-                                             \"Zero detector configurations have been found \"\n-                                             \"in file \" + filename);\n-  }\n-\n-}  // namespace LE1_NISP_ProcessScience\n-\n-\n-\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_ProcessScience/src/lib/ExposureConfigParserXml.cpp": [
                        [
                            "@@ -1,113 +0,0 @@\n-/**\n- * @file src/lib/ExposureConfigParserXml.cpp\n- * @date 02/25/21\n- * @author user\n- *\n- * @copyright (C) 2012-2020 Euclid Science Ground Segment\n- *\n- * This library is free software; you can redistribute it and/or modify it under\n- * the terms of the GNU Lesser General Public License as published by the Free\n- * Software Foundation; either version 3.0 of the License, or (at your option)\n- * any later version.\n- *\n- * This library is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n- * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n- * details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this library; if not, write to the Free Software Foundation, Inc.,\n- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n- *\n- */\n-\n-#include \"LE1_NISP_ProcessScience/ExposureConfigParserXml.h\"\n-\n-#include <fstream>\n-#include \"boost/property_tree/xml_parser.hpp\"\n-#include \"boost/property_tree/ptree.hpp\"\n-\n-namespace LE1_NISP_ProcessScience {\n-\n-  ExposureConfigParserXml::ExposureConfigParserXml(){}\n-\n-  ExposureConfigParserXml::~ExposureConfigParserXml(){}\n-\n-  std::shared_ptr<ExposureConfigManager> ExposureConfigParserXml::parse(const std::string &filename){\n-    std::ifstream inputFile(filename);\n-        \n-    if(!inputFile.good())\n-      throw FileNotFoundException(\"ExposureConfigParserXml::parse: \"\n-                                  \"cannot find file \\\"\" + filename + \"\\\"\");\n-\n-    using boost::property_tree::ptree;\n-    ptree tree;\n-    read_xml(inputFile, tree);\n-\n-    std::vector<std::string> keysConfigCaptions;\n-    std::vector<std::string> instConfigCaptions;\n-    std::vector<std::string> gwaPositions;\n-    std::vector<std::string> fwaPositions;\n-    std::vector<std::string> productCategories;\n-    std::vector<std::string> productFirstTypes;\n-    std::vector<std::string> productSecondTypes;\n-    std::vector<std::string> observationModes;\n-    std::vector<std::string> productTechniques;\n-    std::vector<int> gwaTilts;\n-    std::string gwaRefPos;\n-    std::string fwaRefPos;\n-\n-    try{\n-\n-      auto const &exposureConfig = tree.get_child(\"exposureConfig\");\n-\n-      for(auto const &keysConfig: exposureConfig.get_child(\"keywordConfigs\")){\n-        if(keysConfig.first == \"config\"){\n-          keysConfigCaptions.push_back(keysConfig.second.get_child(\"mode\").get_value<std::string>());\n-          gwaPositions.push_back(keysConfig.second.get_child(\"gwaPos\").get_value<std::string>());\n-          fwaPositions.push_back(keysConfig.second.get_child(\"fwaPos\").get_value<std::string>());\n-          productTechniques.push_back(keysConfig.second.get_child(\"productTechnique\").get_value<std::string>());\n-          gwaTilts.push_back(keysConfig.second.get_child(\"gwaTilt\").get_value<int>());\n-        }\n-      }\n-      for(auto const &instConfig: exposureConfig.get_child(\"instrumentConfigs\")){\n-        if(instConfig.first == \"config\"){\n-          instConfigCaptions.push_back(instConfig.second.get_child(\"mode\").get_value<std::string>());\n-          productCategories.push_back(instConfig.second.get_child(\"productCategory\").get_value<std::string>());\n-          productFirstTypes.push_back(instConfig.second.get_child(\"productFirstType\").get_value<std::string>());\n-          productSecondTypes.push_back(instConfig.second.get_child(\"productSecondType\").get_value<std::string>());\n-          observationModes.push_back(instConfig.second.get_child(\"observationMode\").get_value<std::string>());\n-        }\n-      }\n-      gwaRefPos = exposureConfig.get_child(\"gwaRefPosition\").get_value<std::string>();\n-      fwaRefPos = exposureConfig.get_child(\"fwaRefPosition\").get_value<std::string>();\n-\n-    }catch(const boost::property_tree::ptree_bad_path& er){\n-      inputFile.close();\n-      throw IncompleteExposureConfigException(\"ExposureConfigParserXml::parse: \" \n-                                                + std::string(er.what()));\n-    }\n-\n-    auto expConfigManager = std::make_shared<ExposureConfigManager>();\n-    expConfigManager->setKeysConfigCaptions(keysConfigCaptions);\n-    expConfigManager->setInstConfigCaptions(instConfigCaptions);\n-    expConfigManager->setGwaPositions(gwaPositions);\n-    expConfigManager->setFwaPositions(fwaPositions);\n-    expConfigManager->setProductCategories(productCategories);\n-    expConfigManager->setProductFirstTypes(productFirstTypes);\n-    expConfigManager->setProductSecondTypes(productSecondTypes);\n-    expConfigManager->setObservationModes(observationModes);\n-    expConfigManager->setProductTechniques(productTechniques);\n-    expConfigManager->setGwaRefPosition(gwaRefPos);\n-    expConfigManager->setFwaRefPosition(fwaRefPos);\n-    expConfigManager->setGwaTilts(gwaTilts);\n-\n-    inputFile.close();\n-\n-    return expConfigManager;\n-  }\n-\n-}  // namespace LE1_NISP_ProcessScience\n-\n-\n-\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_ProcessScience/src/lib/TelemetryConfigParserXml.cpp": [
                        [
                            "@@ -1,127 +0,0 @@\n-/**\n- * @file src/lib/TelemetryConfigParserXml.cpp\n- * @date 02/23/21\n- * @author user\n- *\n- * @copyright (C) 2012-2020 Euclid Science Ground Segment\n- *\n- * This library is free software; you can redistribute it and/or modify it under\n- * the terms of the GNU Lesser General Public License as published by the Free\n- * Software Foundation; either version 3.0 of the License, or (at your option)\n- * any later version.\n- *\n- * This library is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n- * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n- * details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this library; if not, write to the Free Software Foundation, Inc.,\n- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n- *\n- */\n-\n-#include \"LE1_NISP_ProcessScience/TelemetryConfigParserXml.h\"\n-\n-#include <fstream>\n-#include \"boost/property_tree/xml_parser.hpp\"\n-#include \"boost/property_tree/ptree.hpp\"\n-\n-namespace LE1_NISP_ProcessScience {\n-\n-  TelemetryConfigParserXml::TelemetryConfigParserXml(){}\n-  \n-  TelemetryConfigParserXml::~TelemetryConfigParserXml(){}\n-    \n-  std::shared_ptr<TelemetryConfiguration> TelemetryConfigParserXml::parse(const std::string &filename){\n-    std::ifstream inputFile(filename);\n-        \n-    if(!inputFile.good())\n-      throw FileNotFoundException(\"TelemetryConfigParserXml::parse: \"\n-                                  \"cannot find file \\\"\" + filename + \"\\\"\");\n-\n-    auto tmConfig = std::make_shared<TelemetryConfiguration>();\n-    using boost::property_tree::ptree;\n-    ptree tree;\n-\n-    read_xml(inputFile, tree);\n-    try{\n-\n-      auto const &spare = tree.get_child(\"telemetry\");\n-      tmConfig->setMemoryBufferMaxSize(spare.get<uint32_t>(\"memBuffSize\"));\n-      tmConfig->setSync(spare.get<uint32_t>(\"sync\"));\n-      tmConfig->setTail1(spare.get<uint32_t>(\"tail1\"));\n-      tmConfig->setTail2(spare.get<uint32_t>(\"tail2\"));\n-      tmConfig->setTail3(spare.get<uint32_t>(\"tail3\"));\n-      tmConfig->setTail4(spare.get<uint32_t>(\"tail4\"));\n-\n-      auto const &det = spare.get_child(\"detectors\");\n-      tmConfig->setNumberOfDetectors(det.get<uint32_t>(\"number\"));\n-      tmConfig->setMaxGroups(det.get<uint32_t>(\"groups\"));\n-      tmConfig->setMaxFrames(det.get<uint32_t>(\"frames\"));\n-      tmConfig->setDetectorPxSizeX(det.get<uint32_t>(\"width\"));\n-      tmConfig->setDetectorPxSizeY(det.get<uint32_t>(\"height\"));\n-      tmConfig->setDetectorPxSize(tmConfig->getDetectorPxSizeX() * tmConfig->getDetectorPxSizeY());\n-\n-      auto const &rawlines = spare.get_child(\"rawlines\");\n-      tmConfig->setNumberOfRawLines(rawlines.get<unsigned int>(\"number\"));\n-      tmConfig->setRawLineSize(rawlines.get<uint32_t>(\"size\"));\n-      tmConfig->setRawLinesDataMaxSize(tmConfig->getNumberOfRawLines() * \n-                                      tmConfig->getRawLineSize() *\n-                                      tmConfig->getMaxGroups() *\n-                                      tmConfig->getMaxFrames());\n-\n-      auto const &digitalTlm = spare.get_child(\"digitalTlm\");\n-      tmConfig->setDigitalTelemetrySize(digitalTlm.get<uint32_t>(\"size\"));\n-\n-      auto const &analogTlm = spare.get_child(\"analogTlm\");\n-      tmConfig->setAnalogTelemetryMaxSize(analogTlm.get<uint32_t>(\"size\"));\n-      tmConfig->setAnalogTelemetryNumberOfValues(analogTlm.get<unsigned int>(\"values\"));\n-\n-      auto const &history = spare.get_child(\"history\");\n-      tmConfig->setHistoryDataMaxSize(history.get<uint32_t>(\"size\"));\n-      tmConfig->setHistoryCompressedDataMaxSize(history.get<uint32_t>(\"comprSize\"));\n-      tmConfig->setHistoryNumberOfValues(history.get<unsigned int>(\"values\"));\n-\n-      auto const &errors = spare.get_child(\"errors\");\n-      tmConfig->setErrorDataMaxSize(errors.get<uint32_t>(\"size\"));\n-      tmConfig->setErrorCompressedDataMaxSize(errors.get<uint32_t>(\"comprSize\"));\n-      tmConfig->setErrorValuesPerGroup(errors.get<unsigned int>(\"values\"));\n-\n-      auto const &science = spare.get_child(\"science\");\n-      tmConfig->setScienceDataMaxSize(science.get<uint32_t>(\"size\"));\n-      tmConfig->setScienceCompressedDataMaxSize(science.get<uint32_t>(\"comprSize\"));\n-      tmConfig->setScienceDataNumberOfValues(science.get<unsigned int>(\"values\"));\n-\n-      auto const &qualityFactorSpectro = spare.get_child(\"qualityFactorSpectro\");\n-      tmConfig->setQualityDataSpectroMaxSize(qualityFactorSpectro.get<uint32_t>(\"size\"));\n-      tmConfig->setQualityCompressedDataMaxSize(qualityFactorSpectro.get<uint32_t>(\"comprSize\"));\n-      tmConfig->setQualityDataSpectroNumberOfValues(qualityFactorSpectro.get<unsigned int>(\"values\"));\n-\n-      auto const &qualityFactorPhoto = spare.get_child(\"qualityFactorPhoto\");\n-      tmConfig->setQualityDataPhotoMaxSize(qualityFactorPhoto.get<uint32_t>(\"size\"));\n-      tmConfig->setQualityDataPhotoNumberOfValues(qualityFactorPhoto.get<unsigned int>(\"values\"));\n-\n-      tmConfig->setQualityDataMaxSize(tmConfig->getQualityDataSpectroMaxSize());\n-\n-      auto const &engineering = spare.get_child(\"engineering\");\n-      tmConfig->setEngineeringDataMaxSize(engineering.get<uint32_t>(\"size\"));\n-      tmConfig->setEngDebugMaxNumberOfValues(engineering.get<unsigned int>(\"values\"));\n-\n-      tmConfig->setEngRawTableSize(tmConfig->getEngineeringDataMaxSize());\n-\n-    }catch(const boost::property_tree::ptree_bad_path& er){\n-        inputFile.close();\n-        throw IncompleteTelemetryConfigException(\"TelemetryConfigParserXml::parse: \" \n-                                                  + std::string(er.what()));\n-    }\n-\n-    inputFile.close();\n-\n-    return tmConfig;\n-  }\n-\n-}  // namespace LE1_NISP_ProcessScience\n-\n-\n-\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_ProcessScience/src/lib/Utils.cpp": [
                        [
                            "@@ -1,114 +0,0 @@\n-/**\n- * @file src/lib/Utils.cpp\n- * @date 05/26/20\n- * @author Massimo Trifoglio\n- *\n- * @copyright (C) 2012-2020 Euclid Science Ground Segment\n- *\n- * This library is free software; you can redistribute it and/or modify it under\n- * the terms of the GNU Lesser General Public License as published by the Free\n- * Software Foundation; either version 3.0 of the License, or (at your option)\n- * any later version.\n- *\n- * This library is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n- * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n- * details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this library; if not, write to the Free Software Foundation, Inc.,\n- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n- *\n- */\n-\n-\n-#include \"LE1_NISP_ProcessScience/Utils.h\"\n-#include \"EleFits/Hdu.h\"\n-#include \"EL_Image/PropertyList.h\"\n-#include \"boost/any.hpp\"\n-#include <boost/lexical_cast.hpp>\n-\n-\n-#include <cstring>\n-#include <exception>\n-\n-namespace LE1_NISP_ProcessScience{\n-\n-  void createDirectories(const std::string &outputPath){\n-    if(!exists(outputPath))\n-      boost::filesystem::create_directories(outputPath);\n-  }\n-  \n-  bool exists(const std::string &path){\n-    return boost::filesystem::exists(path);\n-  }\n-  \n-  std::vector<std::string> splitLine(const std::string &source, const std::string &delimiters){\n-    std::size_t prev = 0;\n-    std::size_t currentPos = 0;\n-    std::vector<std::string> results;\n-\n-    for (currentPos = source.find_first_of(delimiters, prev);\n-         currentPos != std::string::npos;\n-         prev = currentPos + 1, currentPos = source.find_first_of(delimiters, prev)) {\n-      if (currentPos > prev)\n-        results.emplace_back(boost::lexical_cast<std::string>(source.substr(prev, currentPos - prev)));\n-    }\n-    if (prev < source.length())\n-      results.emplace_back(boost::lexical_cast<std::string>(source.substr(prev)));\n-    return results;\n-  }\n-\n-}\n-\n-\n-namespace LE1_NISP {\n-\n-using namespace std;\n-using boost::any_cast;\n-using Euclid::Fits::Hdu;\n-using Euclid::Image::PropertyList;\n-\n-// All functions below to be removed\n-\n-//  function that take a timestamp and return the formatted date\n-char* getDate(int time_start){\n-\n-\t//time_start (int)\n-\ttime_t timeUTC = (time_t) time_start;\n-\tstruct tm *timeinfo;\n-\ttimeinfo = gmtime (&timeUTC);\n-\tchar* buffer;\n-\tbuffer = (char *) malloc (sizeof(char) * 30);\n-\tstrftime (buffer,30,\"%Y-%m-%dT%H:%M:%S\",timeinfo);\n-\n-\treturn buffer;\n-}\n-\n-void SplitFilename (const string& str, string& folder, string& file)\n-{\n-  size_t found;\n-\n-  found=str.find_last_of(\"/\\\\\");\n-  folder = str.substr(0,found);\n-  file   = str.substr(found+1);\n-}\n-\n-void SplitSuffix (const string& str, string& folder, string& file)\n-{\n-  size_t found;\n-\n-  found=str.find_last_of(\".\");\n-  folder = str.substr(0,found);\n-  file   = str.substr(found+1);\n-}\n-\n-void CopyStringToChar (const string& str, char * buffer)\n-{\n-\tsize_t length = str.copy (buffer, str.length(), 0);\n-\tbuffer[length]='\\0';\n-\n-\treturn;\n-}\n-\n-} // namespace LE1_NISP\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_ProcessScience/tests/include/DateTimeManagerMock.h": [
                        [
                            "@@ -1,90 +0,0 @@\n-\n- /**\n- * @file LE1_NISP_ProcessScience/tests/include/DateTimeManagerMock.h\n- * @date 11/24/20\n- * @author user\n- *\n- * @copyright (C) 2012-2020 Euclid Science Ground Segment\n- *\n- * This library is free software; you can redistribute it and/or modify it under\n- * the terms of the GNU Lesser General Public License as published by the Free\n- * Software Foundation; either version 3.0 of the License, or (at your option)\n- * any later version.\n- *\n- * This library is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n- * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n- * details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this library; if not, write to the Free Software Foundation, Inc.,\n- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n- *\n- */\n-\n-#ifndef _LE1_NISP_PROCESSSCIENCE_DATETIMEMANAGERMOCK_H\n-#define _LE1_NISP_PROCESSSCIENCE_DATETIMEMANAGERMOCK_H\n-\n-#include \"LE1_NISP_ProcessScience//DateTimeManager.h\"\n-\n-namespace LE1_NISP_ProcessScience {\n-    \n-class DateTimeManagerDummy: public DateTimeManager{\n-public:\n-  DateTimeManagerDummy(){}\n-  virtual ~DateTimeManagerDummy(){}\n-\n-  inline virtual std::shared_ptr<DateTime> getDateTime() const override { return nullptr; }\n-\n-  inline virtual std::string getDateTimeIsoStr() const override { return \"\"; }\n-  inline virtual std::string getDateTimeIsoExtendedStr() const override { return \"\"; }\n-};\n-\n-class DateTimeDummy: public DateTime{\n-public:\n-\n-  inline virtual int getYear() const override { return 0; }\n-  inline virtual unsigned short getMonth() const override { return 0; }\n-  inline virtual unsigned short getDay() const override { return 0; }\n-  inline virtual unsigned short getHours() const override { return 0; }\n-  inline virtual unsigned short getMinutes() const override { return 0; }\n-  inline virtual double getSeconds() const override { return 0; }\n-  inline virtual long getTotalSeconds() const override { return 0; }\n-  inline virtual long getTotalMicroseconds() const override { return 0; }\n-\n-  inline virtual std::string getIsoString() const override { return \"\"; }\n-  inline virtual std::string getIsoExtendedString() const override { return \"\"; }\n-};\n-\n-class DateTimeManagerStubCustomReturns: public DateTimeManager{\n-  public:\n-  DateTimeManagerStubCustomReturns(){}\n-  virtual ~DateTimeManagerStubCustomReturns(){}\n-\n-  inline void setDateTime(const std::shared_ptr<DateTime> dateTime) { m_dateTime = dateTime; }\n-\n-  inline void setDateTimeIsoStr(const std::string &iso){\n-    m_dateTimeIsoStr = iso;\n-  }\n-  inline void setDateTimeIsoExtendedStr(const std::string &isoExtended){\n-    m_dateTimeIsoExtStr = isoExtended;\n-  }\n-\n-  inline virtual std::string getDateTimeIsoStr() const override {\n-    return m_dateTimeIsoStr;\n-  }\n-  inline virtual std::string getDateTimeIsoExtendedStr() const override {\n-    return m_dateTimeIsoExtStr;\n-  }\n-  inline virtual std::shared_ptr<DateTime> getDateTime() const override { return m_dateTime; }\n-\n-private:\n-  std::string m_dateTimeIsoStr;\n-  std::string m_dateTimeIsoExtStr;\n-  std::shared_ptr<DateTime> m_dateTime;\n-\n-};\n-  \n-}// namespace LE1_NISP_ProcessScience\n-\n-#endif\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_ProcessScience/tests/integration-tests/resources/product_generator_integration_test_config.ini": [
                        [
                            "@@ -1,6 +0,0 @@\n-paramDescriptionFile = ../../../auxdir/LE1_NISP_ProcessScience/param_descriptions.xml\n-telemetryConfigFile = ../../../auxdir/LE1_NISP_ProcessScience/telemetry_config.xml\n-detectorsConfigFile = ../../../auxdir/LE1_NISP_ProcessScience/detectors_config_FM.xml\n-mdbFile = ./DpdMdbDataBase_20230412_101050.xml\n-exposureConfigFile = ../../../auxdir/LE1_NISP_ProcessScience/exposure_config.xml\n-dataModelConfigFile = ../../../auxdir/LE1_NISP_ProcessScience/datamodel_config.xml\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/CMakeLists.txt": [
                        [
                            "@@ -0,0 +1,56 @@\n+CMAKE_MINIMUM_REQUIRED(VERSION 2.8.5)\n+\n+option(BUILD_INTEGRATION_TESTS \"Build integration tests\" OFF)\n+\n+#===============================================================================\n+# Load elements_subdir macro here\n+# Examples:\n+#   For declaring a project module:\n+#         elements_subdir(ElementsExamples)\n+#===============================================================================\n+elements_subdir(LE1_NISP_Processor)\n+\n+#===============================================================================\n+# Load elements_depends_on_subdirs macro here\n+#   For creating a dependency onto an other accessible module\n+#         elements_depends_on_subdirs(ElementsKernel)\n+#===============================================================================\n+elements_depends_on_subdirs(ElementsKernel)\n+elements_depends_on_subdirs(LE1_NISP_Entities)\n+elements_depends_on_subdirs(LE1_NISP_Adapters)\n+elements_depends_on_subdirs(LE1_NISP_Interactors)\n+\n+#===============================================================================\n+# Declare the executables here\n+# Example:\n+# elements_add_executable(ElementsProgramExample src/Program/ProgramExample.cpp\n+#                        INCLUDE_DIRS Boost ElementsExamples\n+#                        LINK_LIBRARIES Boost ElementsExamples)\n+#===============================================================================\n+elements_add_executable(LE1_NISP_Processor src/program/LE1_NISP_Processor.cpp\n+                     INCLUDE_DIRS LE1_NISP_Entities LE1_NISP_Adapters LE1_NISP_Interactors\n+                     LINK_LIBRARIES ElementsKernel LE1_NISP_Entities LE1_NISP_Adapters LE1_NISP_Interactors)\n+\n+#===============================================================================\n+# Declare the Boost tests here\n+# Example:\n+# elements_add_unit_test(BoostClassExample tests/src/Boost/ClassExample_test.cpp\n+#                       EXECUTABLE BoostClassExample_test\n+#                       INCLUDE_DIRS ElementsExamples\n+#                       LINK_LIBRARIES ElementsExamples TYPE Boost)\n+#===============================================================================\n+if(BUILD_INTEGRATION_TESTS)\n+    elements_add_unit_test(ProductGeneratorIntegration tests/integration-tests/src/ProductGenerator_integration_test.cpp\n+            EXECUTABLE LE1_NISP_Interactors_ProductGenerator_integration_test\n+            LINK_LIBRARIES ElementsKernel LE1_NISP_Entities LE1_NISP_Adapters LE1_NISP_Interactors\n+            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests/integration-tests/resources/\n+            TYPE Boost)\n+endif()\n+\n+#===============================================================================\n+# Add the elements_install_conf_files macro\n+# Examples:\n+#          elements_install_conf_files()\n+#===============================================================================\n+elements_install_conf_files()\n+elements_install_aux_files()\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/auxdir/LE1_NISP_Processor/datamodel_config.xml": [
                        [
                            "",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/auxdir/LE1_NISP_Processor/detectors_config_EM.xml": [
                        [
                            "",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/auxdir/LE1_NISP_Processor/detectors_config_FM.xml": [
                        [
                            "",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/auxdir/LE1_NISP_Processor/telemetry_config.xml": [
                        [
                            "",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/conf/.keep": [
                        [
                            "",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/conf/LE1_NISP_Processor.conf": [
                        [
                            "",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/doc/doc_module.rst": [
                        [
                            "@@ -0,0 +1,25 @@\n+Module Overview <----------------- TO BE WRITTEN ------------------------>\n+==========================================================================\n+\n+.. important:: Please edit ./@_el_pack_short@/doc/module.rst to replace this section.\n+\n+.. The following sections can be replaced or updated. \n+   You may also use a toctree directive for sub documents. \n+\n+Introduction\n+------------\n+\n+Purpose of this Elements Module.\n+\n+What does it do?\n+\n+Architecture overview\n+---------------------\n+\n+Highlevel overview of the Module.\n+\n+How is it done?\n+\n+  1. List of packages\n+  2. Explanation of used design patterns\n+  3. Useful UML diagrams: UML Package, UML Structure and Deployment, UML Use Case\n\\ No newline at end of file\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/tests/integration-tests/resources/analog_tlm_keywords_test_config.ini": [
                        [
                            "",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/tests/integration-tests/resources/calib_non_linearity_data_test_config.ini": [
                        [
                            "",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/tests/integration-tests/resources/compr_verification_data_test_config.ini": [
                        [
                            "",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/tests/integration-tests/resources/data_quality_test_config.ini": [
                        [
                            "",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/tests/integration-tests/resources/eng_debug_data_test_config.ini": [
                        [
                            "",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/tests/integration-tests/resources/eng_hdu_test_config.ini": [
                        [
                            "",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/tests/integration-tests/resources/eng_raw_data_test_config.ini": [
                        [
                            "",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/tests/integration-tests/resources/hk_data_test_config.ini": [
                        [
                            "",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/tests/integration-tests/resources/hk_hdu_test_config.ini": [
                        [
                            "",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/tests/integration-tests/resources/science_hdu_test_config.ini": [
                        [
                            "",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/tests/integration-tests/resources/science_images_test_config.ini": [
                        [
                            "",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/tests/integration-tests/resources/zero_rawlines_data_test_config.ini": [
                        [
                            "",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ],
                    "LE1_NISP_Processor/tests/integration-tests/src/ProductGenerator_integration_test.cpp": [
                        [
                            "@@ -30,55 +30,54 @@\n \n #include \"ElementsKernel/Temporary.h\"\n #include \"ElementsKernel/ProgramHeaders.h\"\n-#include \"LE1_NISP_ProcessScience/tests/include/TestUtils.h\"\n+#include \"LE1_NISP_Interactors/tests/include/TestUtils.h\"\n \n-#include \"LE1_NISP_ProcessScience/ProductGenerator.h\"\n+#include \"LE1_NISP_Interactors/ProductGenerator.h\"\n \n-#include \"LE1_NISP_ProcessScience/TelemetryConfigParserXml.h\"\n-#include \"LE1_NISP_ProcessScience/TelemetryDetectorInitializer.h\"\n-#include \"LE1_NISP_ProcessScience/DetectorImpl.h\"\n+#include \"LE1_NISP_Interactors/TelemetryDetectorInitializer.h\"\n+#include \"LE1_NISP_Entities/DetectorImpl.h\"\n \n-#include \"LE1_NISP_ProcessScience/DetectorConfigParserXml.h\"\n-#include \"LE1_NISP_ProcessScience/DetectorConfigMapper.h\"\n+#include \"LE1_NISP_Entities/DetectorConfigMapper.h\"\n \n-#include \"LE1_NISP_ProcessScience/ExposureConfigParserXml.h\"\n-#include \"LE1_NISP_ProcessScience/ExposureConfigurationImpl.h\"\n+#include \"LE1_NISP_Entities/ExposureConfigurationImpl.h\"\n \n-#include \"LE1_NISP_ProcessScience/ConfigurationParserMdb.h\"\n+#include \"LE1_NISP_Adapters/ConfigurationParserMdb.h\"\n \n-#include \"LE1_NISP_ProcessScience/PlanningIdGroundTests.h\"\n+#include \"LE1_NISP_Entities/PlanningIdGroundTests.h\"\n \n-#include \"LE1_NISP_ProcessScience/MetadataParserParamDescriptions.h\"\n+#include \"LE1_NISP_Interactors/MetadataParserParamDescriptions.h\"\n \n-#include \"LE1_NISP_ProcessScience/DetectorMap.h\"\n-#include \"LE1_NISP_ProcessScience/DetectorCollectorObt.h\"\n+#include \"LE1_NISP_Entities/DetectorMap.h\"\n+#include \"LE1_NISP_Interactors/DetectorCollectorObt.h\"\n \n-#include \"LE1_NISP_ProcessScience/ExposuresCounter.h\"\n+#include \"LE1_NISP_Interactors/ExposuresCounter.h\"\n \n-#include \"LE1_NISP_ProcessScience/ByteArrayCreatorEuclid.h\"\n-#include \"LE1_NISP_ProcessScience/DecompressorShort.h\"\n-#include \"LE1_NISP_ProcessScience/ScienceDecoder.h\"\n-#include \"LE1_NISP_ProcessScience/DecompressorByte.h\"\n-#include \"LE1_NISP_ProcessScience/QualityDataDecoder.h\"\n-#include \"LE1_NISP_ProcessScience/RawLinesDecoder.h\"\n-#include \"LE1_NISP_ProcessScience/EngDecoder.h\"\n-#include \"LE1_NISP_ProcessScience/AnalogTelemetryDecoder.h\"\n-#include \"LE1_NISP_ProcessScience/ErrorsDecoder.h\"\n-#include \"LE1_NISP_ProcessScience/HistoryDecoder.h\"\n-#include \"LE1_NISP_ProcessScience/TelemetryDecoder.h\"\n+#include \"LE1_NISP_Entities/ByteArrayCreatorEuclid.h\"\n+#include \"LE1_NISP_Interactors/DecompressorShort.h\"\n+#include \"LE1_NISP_Interactors/ScienceDecoder.h\"\n+#include \"LE1_NISP_Interactors/DecompressorByte.h\"\n+#include \"LE1_NISP_Interactors/QualityDataDecoder.h\"\n+#include \"LE1_NISP_Interactors/RawLinesDecoder.h\"\n+#include \"LE1_NISP_Interactors/EngDecoder.h\"\n+#include \"LE1_NISP_Interactors/AnalogTelemetryDecoder.h\"\n+#include \"LE1_NISP_Interactors/ErrorsDecoder.h\"\n+#include \"LE1_NISP_Interactors/HistoryDecoder.h\"\n+#include \"LE1_NISP_Interactors/TelemetryDecoder.h\"\n \n-#include \"LE1_NISP_ProcessScience/DateTimeManagerBoost.h\"\n-#include \"LE1_NISP_ProcessScience/ScienceWriterElFitsIO.h\"\n-#include \"LE1_NISP_ProcessScience/HkWriterElFitsIO.h\"\n-#include \"LE1_NISP_ProcessScience/EngUnprocessedGroupsFitsWriter.h\"\n-#include \"LE1_NISP_ProcessScience/EngPixelsOverThresholdFitsWriter.h\"\n-#include \"LE1_NISP_ProcessScience/EngUncompressedImageFitsWriter.h\"\n+#include \"LE1_NISP_Entities/DateTimeManagerBoost.h\"\n+#include \"LE1_NISP_Interactors/ScienceWriterElFitsIO.h\"\n+#include \"LE1_NISP_Interactors/HkWriterElFitsIO.h\"\n+#include \"LE1_NISP_Interactors/EngUnprocessedGroupsFitsWriter.h\"\n+#include \"LE1_NISP_Interactors/EngPixelsOverThresholdFitsWriter.h\"\n+#include \"LE1_NISP_Interactors/EngUncompressedImageFitsWriter.h\"\n \n-#include \"LE1_NISP_ProcessScience/ProductsArchiverDataModelBindings.h\"\n+#include \"LE1_NISP_Interactors/ProductsArchiverDataModelBindings.h\"\n \n-#include \"LE1_NISP_ProcessScience/ParserXml.h\"\n+#include \"LE1_NISP_Adapters/ParserXml.h\"\n \n-using namespace LE1_NISP_ProcessScience;\n+using namespace LE1_NISP_Interactors;\n+using namespace LE1_NISP_Entities;\n+using namespace LE1_NISP_Adapters;\n namespace bdata = boost::unit_test::data;\n using Euclid::Fits::MefFile;\n using Euclid::Fits::PtrRaster;\n@@ -105,9 +104,9 @@ struct ProductGeneratorFixture{\n \n   void initProductGenerator(){\n \n-    auto telemetryConfig = TelemetryConfigParserXml().parse(telemetryConfigFile);\n-    auto tmFileCreator = std::make_shared<TelemetryFileCreator>();\n-    tmFileCreator->setByteArrayCreator(std::make_shared<ByteArrayCreatorEuclid>());\n+    auto telemetryConfig = ParserXml().parseTelemetryConfig(telemetryConfigFile);\n+    auto tmFileCreator = std::make_shared<LE1_NISP_Entities::TelemetryFileCreator>();\n+    tmFileCreator->setByteArrayCreator(std::make_shared<LE1_NISP_Entities::ByteArrayCreatorEuclid>());\n     auto detectorCreator = std::make_shared<DetectorImplCreator>();\n     auto detectorsInitializer = std::make_shared<TelemetryDetectorInitializer>(telemetryConfig, detectorCreator, tmFileCreator);\n     generator.setDetectorsInitializer(detectorsInitializer);\n@@ -117,12 +116,10 @@ struct ProductGeneratorFixture{\n     auto fixedParams  = parserXml.parseFixedParams(paramDescriptionFile);\n     auto dataModelConfigParams  = parserXml.parseDataModelParams(dataModelConfigFile);\n \n-    DetectorConfigParserXml detConfigParser;\n     auto detConfigManager = std::make_shared<DetectorConfigMapper>();\n-    detConfigParser.parse(detConfigManager, detectorsConfigFile.c_str());\n+    ParserXml().parseDetectorConfig(detConfigManager, detectorsConfigFile.c_str());\n \n-    ExposureConfigParserXml expConfigParser;\n-    auto expConfigManager = expConfigParser.parse(exposureConfigFile);\n+    auto expConfigManager = ParserXml().parseExposureConfig(exposureConfigFile);\n \n     if(!mdbFile.empty()){\n       ConfigurationParserMdb mdbParser;\n@@ -134,10 +131,11 @@ struct ProductGeneratorFixture{\n     auto exposureConfigCreator = std::make_shared<ExposureConfigurationImplCreator>();\n     exposureConfigCreator->setExposureConfigManager(expConfigManager);\n \n-    auto planningIdCreator = std::make_shared<PlanningIdGroundTestsCreator>();\n-    \n+    auto planningIdCreator = std::make_shared<LE1_NISP_Entities::PlanningIdGroundTestsCreator>();\n+    auto dateTimeManager = std::make_shared<DateTimeManagerBoost>(true);\n+\n     auto metadataParser = std::make_shared<MetadataParserParamDescriptions>();\n-    metadataParser->setMetadataCreator(std::make_shared<DetectorMetadataCreatorNISP>(detConfigManager, exposureConfigCreator, planningIdCreator));\n+    metadataParser->setMetadataCreator(std::make_shared<DetectorMetadataCreatorNISP>(detConfigManager, exposureConfigCreator, planningIdCreator, dateTimeManager));\n     metadataParser->setParameterDescriptions(descriptions);\n     metadataParser->setFixedParameters(fixedParams);\n     generator.setDetectorMetadataParser(metadataParser);\n@@ -151,7 +149,7 @@ struct ProductGeneratorFixture{\n \n     auto tmDecoder = std::make_shared<TelemetryDecoder>();\n \n-    auto byteArrayCreator = std::make_shared<ByteArrayCreatorEuclid>();\n+    auto byteArrayCreator = std::make_shared<LE1_NISP_Entities::ByteArrayCreatorEuclid>();\n     auto decompressorShort = std::make_shared<DecompressorShort>(byteArrayCreator);\n     auto decompressorByte = std::make_shared<DecompressorByte>(byteArrayCreator);\n \n@@ -176,7 +174,6 @@ struct ProductGeneratorFixture{\n \n     auto productsWriter = std::make_shared<ProductsWriter>();\n \n-    auto dateTimeManager = std::make_shared<DateTimeManagerBoost>(true);\n     auto scienceWriter = std::make_shared<ScienceWriterElFitsIO>(dateTimeManager, exposuresCounter);\n     productsWriter->setScienceWriter(scienceWriter);\n     auto hkWriter = std::make_shared<HkWriterElFitsIO>(dateTimeManager);\n",
                            "Merge branch 'feature-code-refactoring-and-documentation' into 'develop'",
                            "Alberto Alessio",
                            "2023-06-14T08:10:47.000+00:00",
                            "0deaa96cdb55750ae7a506ba5be95d782d17a6a8"
                        ]
                    ]
                },
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": [
                    {
                        "name": "4.0.1",
                        "created_at": "2023-04-13T10:17:05.000+00:00",
                        "author_name": "Alberto Alessio"
                    },
                    {
                        "name": "4.1.0",
                        "created_at": "2023-06-26T12:19:32.000+00:00",
                        "author_name": "Alberto Alessio"
                    }
                ]
            },
            "PF-LE1/le1_vis_docker": {
                "start date": "2023-06-09 09:00",
                "end date": "2023-08-10 09:00",
                "start tag": "> 5.6.3",
                "end tag": "> 5.6.3",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": [
                    {
                        "name": "5.6.3",
                        "created_at": "2022-07-07T13:21:29.000+02:00",
                        "author_name": "Kane  NGUYEN KIM"
                    }
                ]
            },
            "PF-LE1/LE1_VIS_Validation": {
                "start date": "2023-06-09 09:00",
                "end date": "2023-08-10 09:00",
                "start tag": "> 0.4",
                "end tag": "> 0.4",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": [
                    {
                        "name": "0.4",
                        "created_at": "2020-04-21T17:39:54.000+02:00",
                        "author_name": "Catherine"
                    }
                ]
            },
            "PF-LE1/LE1_VIS": {
                "start date": "2023-06-09 09:00",
                "end date": "2023-08-10 09:00",
                "start tag": "> 5.8.0",
                "end tag": "> 5.9.2",
                "count_files_modified": "5",
                "modifications_by_file": {
                    "CMakeLists.txt": [
                        [
                            "@@ -24,6 +24,6 @@ set(OPT_DEBUG ON)\n #                         elements_project(MyProject 1.0 USE Element 3.9)\n #===============================================================================\n \n-elements_project(LE1_VIS 5.9 USE Elements 6.2.1\n-                                 EL_ImageLib 2.3.0\n-                                 ST_DataModelTools 9.2.0)\n+elements_project(LE1_VIS 5.10 USE Elements 6.2.1\n+                              EL_ImageLib 2.3.0\n+                              ST_DataModelTools 9.2.0)\n",
                            "Updated CMakeList to LE1_VIS 5.10 in develop branch",
                            "Kane Nguyen-Kim",
                            "2023-06-16T10:19:04.000+02:00",
                            "cfece04a0991e2e200ec5600ed8e4d81ca40fcbc"
                        ],
                        [
                            "@@ -24,6 +24,6 @@ set(OPT_DEBUG ON)\n #                         elements_project(MyProject 1.0 USE Element 3.9)\n #===============================================================================\n \n-elements_project(LE1_VIS 5.9 USE Elements 6.1.1\n-                                 EL_ImageLib 2.2.0\n-                                 ST_DataModelTools 9.1.2)\n+elements_project(LE1_VIS 5.9 USE Elements 6.2.1\n+                                 EL_ImageLib 2.3.0\n+                                 ST_DataModelTools 9.2.0)\n",
                            "Merge branch 'feature-dm9.2' into 'develop'",
                            "Hoang Nguyen NGUYEN-KIM",
                            "2023-06-12T14:49:30.000+00:00",
                            "5cd60228312e47b0b76397f1da40eccbd300f8fa"
                        ],
                        [
                            "@@ -24,6 +24,6 @@ set(OPT_DEBUG ON)\n #                         elements_project(MyProject 1.0 USE Element 3.9)\n #===============================================================================\n \n-elements_project(LE1_VIS 5.9 USE Elements 6.1.1\n-                                 EL_ImageLib 2.2.0\n-                                 ST_DataModelTools 9.1.2)\n+elements_project(LE1_VIS 5.9 USE Elements 6.2.1\n+                                 EL_ImageLib 2.3.0\n+                                 ST_DataModelTools 9.2.0)\n",
                            "[NEW] migration to EDEN 3.1/DM 9.2.0",
                            "Kane Nguyen-Kim",
                            "2023-06-11T11:39:56.000+02:00",
                            "64ae0d11b472687c0559ee525796f48096026607"
                        ]
                    ],
                    "LE1_VIS_Output/src/lib/LE1_Fits.cpp": [
                        [
                            "@@ -85,19 +85,19 @@ int CLE1Fits::get_CRPIX(int                     quad_number_value,\n         crpix_value(1) = crpix_value(1) + quad_height_value + fits_ccdchargeinjection/2;\n     } else if (quad_id_value == \"G\") {\n         crpix_value(0) = crpix_value(0) + fits_OVRSCANX;\n-        crpix_value(1) = crpix_value(1) + fits_OVRSCANY;\n+        crpix_value(1) = crpix_value(1) + fits_OVRSCANY - fits_ccdchargeinjection/2;\n     } else if (quad_id_value == \"H\") {\n         crpix_value(0) = crpix_value(0) + quad_width_value + fits_PRESCANX;\n-        crpix_value(1) = crpix_value(1) + fits_OVRSCANY;\n+        crpix_value(1) = crpix_value(1) + fits_OVRSCANY - fits_ccdchargeinjection/2;\n     }\n   }\n   if (ccd_column_value >= 4) {        // Right half of the FPA\n     if(quad_id_value == \"E\") {\n         crpix_value(0) = crpix_value(0) + fits_OVRSCANX;\n-        crpix_value(1) = crpix_value(1) + fits_OVRSCANY;\n+        crpix_value(1) = crpix_value(1) + fits_OVRSCANY - fits_ccdchargeinjection/2;\n     } else if (quad_id_value == \"F\") {\n         crpix_value(0) = crpix_value(0) + quad_width_value + fits_PRESCANX;\n-        crpix_value(1) = crpix_value(1) + fits_OVRSCANY;\n+        crpix_value(1) = crpix_value(1) + fits_OVRSCANY - fits_ccdchargeinjection/2;\n     } else if (quad_id_value == \"G\") {\n         crpix_value(0) = crpix_value(0) + quad_width_value + fits_PRESCANX;\n         crpix_value(1) = crpix_value(1) + quad_height_value + fits_ccdchargeinjection/2;\n",
                            "[FIX] LE1_Fits.cpp: corrected astrometric solution for WCS",
                            "Kane Nguyen-Kim",
                            "2023-06-13T16:48:11.000+02:00",
                            "35b466cfedde1d3362e2e6341a50f59911f3e1b1"
                        ]
                    ],
                    ".jenkinsFile": [
                        [
                            "@@ -1,3 +1,3 @@\n #!groovy\n-@Library('integration-library@release-9') _\n-pipelineElements(artifactId:'LE1_VIS', component:'eden.3.0', deployDevelop:false, deployMaster:false)\n+@Library(value='integration-library@release-10') _\n+pipelineElements(name:\"LE1_VIS\", component:'eden.3.1', skipContinuous:true, skipRelease:true)\n",
                            "Merge branch 'feature-dm9.2' into 'develop'",
                            "Hoang Nguyen NGUYEN-KIM",
                            "2023-06-12T14:49:30.000+00:00",
                            "5cd60228312e47b0b76397f1da40eccbd300f8fa"
                        ],
                        [
                            "@@ -1,3 +1,3 @@\n #!groovy\n @Library(value='integration-library@release-10') _\n-pipelineElements(name:\"LE1_VIS\", component:'eden.3.1')\n+pipelineElements(name:\"LE1_VIS\", component:'eden.3.1', skipContinuous:true, skipRelease:true)\n",
                            "[FIX] .jenkinsFiles: added skipContinuous:true, skipRelease:true to pipelineElements",
                            "Kane  NGUYEN KIM",
                            "2023-06-12T12:55:21.000+02:00",
                            "4cbdd89858b3cfef0b55ade2af441013b0f0e56d"
                        ],
                        [
                            "@@ -1,3 +1,3 @@\n #!groovy\n @Library(value='integration-library@release-10') _\n-pipelineElements(name:\"LE1_VIS\", component:'eden.3.1', deployDevelop:false, deployMaster:false)\n+pipelineElements(name:\"LE1_VIS\", component:'eden.3.1')\n",
                            "[FIX] .jenkinsFile: removed deployDevelop and deployMaster",
                            "Kane  NGUYEN KIM",
                            "2023-06-12T10:48:06.000+02:00",
                            "727dafa57259e734ce06137fc1bafdc7ea9b4d1a"
                        ],
                        [
                            "@@ -1,3 +1,3 @@\n #!groovy\n-@Library('integration-library@release-10') _\n+@Library(value='integration-library@release-10') _\n pipelineElements(name:\"LE1_VIS\", component:'eden.3.1', deployDevelop:false, deployMaster:false)\n",
                            "[FIX] .jenkinsFile: inserted value= for @Library",
                            "Kane Nguyen-Kim",
                            "2023-06-11T21:49:06.000+02:00",
                            "6f71874ecdabff02b001ebad85b1c3f5267649b4"
                        ],
                        [
                            "@@ -1,3 +1,3 @@\n #!groovy\n @Library('integration-library@release-10') _\n-pipelineElements(name:'LE1_VIS', component:'eden.3.1', deployDevelop:false, deployMaster:false)\n+pipelineElements(name:\"LE1_VIS\", component:'eden.3.1', deployDevelop:false, deployMaster:false)\n",
                            "[FIX] .jenkinsFile: fixe typo",
                            "Kane Nguyen-Kim",
                            "2023-06-11T21:44:18.000+02:00",
                            "042ed89dd4e5164f369d8e6be160ba89077a558e"
                        ],
                        [
                            "@@ -1,3 +1,3 @@\n #!groovy\n @Library('integration-library@release-10') _\n-pipelineElements(artifactId:'LE1_VIS', component:'eden.3.1', deployDevelop:false, deployMaster:false)\n+pipelineElements(name:'LE1_VIS', component:'eden.3.1', deployDevelop:false, deployMaster:false)\n",
                            "[FIX] .jenkinsFile: replaced artifactId with name",
                            "Kane Nguyen-Kim",
                            "2023-06-11T21:40:45.000+02:00",
                            "c2bb9c4a4e29eed2b5578be84a2435bcc2b76213"
                        ],
                        [
                            "@@ -1,3 +1,3 @@\n #!groovy\n-@Library('integration-library@release-9') _\n+@Library('integration-library@release-10') _\n pipelineElements(artifactId:'LE1_VIS', component:'eden.3.1', deployDevelop:false, deployMaster:false)\n",
                            "[FIX] .jenkinsFile: updated release-9 to release-10",
                            "Kane Nguyen-Kim",
                            "2023-06-11T20:22:09.000+02:00",
                            "9fee4020c66505e70050573dccf52f4cfcc6875a"
                        ],
                        [
                            "@@ -1,3 +1,3 @@\n #!groovy\n @Library('integration-library@release-9') _\n-pipelineElements(artifactId:'LE1_VIS', component:'eden.3.1, deployDevelop:false, deployMaster:false)\n+pipelineElements(artifactId:'LE1_VIS', component:'eden.3.1', deployDevelop:false, deployMaster:false)\n",
                            "[FIX] .jenkinsFile: fixed typo",
                            "Kane Nguyen-Kim",
                            "2023-06-11T11:45:56.000+02:00",
                            "813006d3e63b372468d0b0abb321f4ac4d29cb80"
                        ],
                        [
                            "@@ -1,3 +1,3 @@\n #!groovy\n @Library('integration-library@release-9') _\n-pipelineElements(artifactId:'LE1_VIS', component:'eden.3.0', deployDevelop:false, deployMaster:false)\n+pipelineElements(artifactId:'LE1_VIS', component:'eden.3.1, deployDevelop:false, deployMaster:false)\n",
                            "[NEW] migration to EDEN 3.1/DM 9.2.0",
                            "Kane Nguyen-Kim",
                            "2023-06-11T11:39:56.000+02:00",
                            "64ae0d11b472687c0559ee525796f48096026607"
                        ]
                    ],
                    "LE1_VIS_Output/src/lib/LE1_Datamodel.cpp": [
                        [
                            "@@ -342,8 +342,7 @@ sys::genericHeader CLE1Datamodel::createXmlHeader() {\n   ::serialTrapPumpingParameters::ReadoutCount_type                         serial_trap_pumping_readoutcount = 0;\n   ::serialTrapPumpingParameterList::SerialTrapPumpingParameterSet_sequence serial_trap_pumping_parameterssequence;\n   ::serialTrapPumpingParameters::SerialTrapPumpingParameterList_type       serial_trap_pumping_parameterslist;\n-  ::trapPumping::SerialTrapPumpingParameters_type serial_trap_pumping_parameters(serial_trap_pumping_readoutcount,\n-                                                                                 serial_trap_pumping_parameterslist);\n+  ::trapPumping::SerialTrapPumpingParameters_type                          serial_trap_pumping_parameters(serial_trap_pumping_readoutcount);\n \n   if (trapPumpingStatus_value != \"Off\") {\n     if (trapPumpingStatus_value == \"Parallel\") {\n@@ -393,8 +392,9 @@ sys::genericHeader CLE1Datamodel::createXmlHeader() {\n \n         serial_trap_pumping_parameterslist.SerialTrapPumpingParameterSet(serial_trap_pumping_parameterssequence);\n \n-        serial_trap_pumping_parameters = ::trapPumping::SerialTrapPumpingParameters_type(\n-            serial_trap_pumping_readoutcount, serial_trap_pumping_parameterslist);\n+        serial_trap_pumping_parameters = ::trapPumping::SerialTrapPumpingParameters_type(serial_trap_pumping_readoutcount);\n+        serial_trap_pumping_parameters.SerialTrapPumpingParameterList(serial_trap_pumping_parameterslist);\n+        serial_trap_pumping_parameters.SerialTrapPumpingParameterSet1(serial_trap_pumping_parameterset);\n     }\n \n     if (trapPumpingStatus_value == \"MultipleSerial\") {\n@@ -518,11 +518,18 @@ sys::genericHeader CLE1Datamodel::createXmlHeader() {\n       serial_trap_pumping_parameterssequence.push_back(serial_trap_pumping_parameterset8);\n \n       serial_trap_pumping_parameterslist = ::serialTrapPumpingParameters::SerialTrapPumpingParameterList_type();\n-\n       serial_trap_pumping_parameterslist.SerialTrapPumpingParameterSet(serial_trap_pumping_parameterssequence);\n \n-      serial_trap_pumping_parameters = ::trapPumping::SerialTrapPumpingParameters_type(\n-          serial_trap_pumping_readoutcount, serial_trap_pumping_parameterslist);\n+      serial_trap_pumping_parameters = ::trapPumping::SerialTrapPumpingParameters_type( serial_trap_pumping_readoutcount);\n+      serial_trap_pumping_parameters.SerialTrapPumpingParameterList(serial_trap_pumping_parameterslist);\n+      serial_trap_pumping_parameters.SerialTrapPumpingParameterSet1(serial_trap_pumping_parameterset1);\n+      serial_trap_pumping_parameters.SerialTrapPumpingParameterSet2(serial_trap_pumping_parameterset2);\n+      serial_trap_pumping_parameters.SerialTrapPumpingParameterSet3(serial_trap_pumping_parameterset3);\n+      serial_trap_pumping_parameters.SerialTrapPumpingParameterSet4(serial_trap_pumping_parameterset4);\n+      serial_trap_pumping_parameters.SerialTrapPumpingParameterSet5(serial_trap_pumping_parameterset5);\n+      serial_trap_pumping_parameters.SerialTrapPumpingParameterSet6(serial_trap_pumping_parameterset6);\n+      serial_trap_pumping_parameters.SerialTrapPumpingParameterSet7(serial_trap_pumping_parameterset7);\n+      serial_trap_pumping_parameters.SerialTrapPumpingParameterSet8(serial_trap_pumping_parameterset8);\n     }\n   }\n \n",
                            "Merge branch 'feature-dm9.2' into 'develop'",
                            "Hoang Nguyen NGUYEN-KIM",
                            "2023-06-12T14:49:30.000+00:00",
                            "5cd60228312e47b0b76397f1da40eccbd300f8fa"
                        ]
                    ],
                    "LE1_VIS_Reading/tests/src/CrcCalculator_test.cpp": [
                        [
                            "@@ -19,6 +19,7 @@\n \n #include \"ElementsKernel/Auxiliary.h\"\n #include <boost/test/unit_test.hpp>\n+#include <fstream>\n \n #include \"LE1_VIS_Reading/CrcCalculator.h\"\n using namespace LE1_VIS::Reading;\n",
                            "Merge branch 'feature-dm9.2' into 'develop'",
                            "Hoang Nguyen NGUYEN-KIM",
                            "2023-06-12T14:49:30.000+00:00",
                            "5cd60228312e47b0b76397f1da40eccbd300f8fa"
                        ]
                    ]
                },
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": [
                    {
                        "name": "5.8.0",
                        "created_at": "2023-04-10T19:12:59.000+02:00",
                        "author_name": "Kane Nguyen-Kim"
                    },
                    {
                        "name": "5.9",
                        "created_at": "2023-06-13T16:48:11.000+02:00",
                        "author_name": "Kane Nguyen-Kim"
                    },
                    {
                        "name": "5.9.0",
                        "created_at": "2023-06-16T10:17:54.000+02:00",
                        "author_name": "Kane Nguyen-Kim"
                    },
                    {
                        "name": "5.9.1",
                        "created_at": "2023-06-27T13:18:57.000+02:00",
                        "author_name": "Kane Nguyen-Kim"
                    },
                    {
                        "name": "5.9.2",
                        "created_at": "2023-06-28T13:31:28.000+02:00",
                        "author_name": "Kane Nguyen-Kim"
                    }
                ]
            }
        }
    }
}