{
    "INFRA": {
        "ST-EAS": {
            "ST-EAS/ST_EASDPS_DM_Updates": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EASOmd": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/eas_scripts": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EASAnsibleDevops": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EAS_MAL": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_DataModelInstances": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EAS_Documentation": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EASJupyterNotebooks": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EASDPS_Docker": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EASDPSTest": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EASDPS": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EASLegacyCode": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EASGrid": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EASeuclid": {
                "start date": "2023-06-13T18:04:52",
                "end date": "2023-07-27T10:20:01",
                "start tag": "0.9.9",
                "end tag": "1.0.0",
                "count_files_modified": "26",
                "modifications_by_file": {
                    "config/startup.py": [
                        [
                            "@@ -43,6 +43,33 @@ sys.ps1 = 'ewe> '\n sys.ps2 = '...  '\n \n \n+def check_long_char():\n+    \"\"\" check the long_char dict from aweimports \"\"\"\n+    def get_column_size(tablename, attr_name):\n+        \"\"\" return the column size \"\"\"\n+        from common.database.Database import database\n+        for column in database.columncache[tablename]:\n+            if column.attrname == attr_name:\n+                if column.propname == 'desc_list_property':\n+                    columnname = 'COLUMN_VALUE'\n+                    tablename = column.tablename\n+                else:\n+                    columnname = column.columnname\n+                sql = f\"select char_length from all_tab_columns where table_name='{tablename}' and column_name='{columnname}'\"\n+                #print(sql)\n+                return database.execute_select(sql)[0][0]\n+        raise KeyError(f'table {tablename} with attrname {attr_name} not found')\n+    from euclid.dm_bindings import long_char, dataproduct\n+    for cls_name in long_char:\n+        try:\n+            tablename = dataproduct[cls_name]._dmlname()\n+            for attr_name in long_char[cls_name]:\n+                size = get_column_size(tablename, attr_name)\n+                assert size == 4000, f'size not 4000 but {size} for {cls_name}.{attr_name}'\n+        except Exception as e:\n+            print(f'ERROR checking long_char; {e}')\n+\n+\n ## Print the news file\n if 'AWEPIPE' in os.environ:\n     try:\n@@ -89,6 +116,7 @@ else:\n         profile.sso_ticket = st\n     from common.database.Context import privileges_names\n     from euclid.dm_bindings import *\n+    check_long_char()\n     if is_using_filebased():\n         print('WARNING -- using file-based interface (NOT databased interface)')\n         print('')\n@@ -125,4 +153,4 @@ if userstartup:\n     del userstartup\n \n ## Delete all unwanted modules from the namespace that were imported\n-del euclid, common\n+del euclid, common, check_long_char\n",
                            "Merge branch 'wjv/bugfix/check_long_char_dict_on_startup' into 'develop'",
                            "Andrey Belikov",
                            "2023-07-26T18:12:00.000+00:00",
                            "da879582aef55e49f109243c46fb853631e8c6e9"
                        ],
                        [
                            "@@ -42,6 +42,7 @@ print('\\\n sys.ps1 = 'ewe> '\n sys.ps2 = '...  '\n \n+\n def check_long_char():\n     \"\"\" check the long_char dict from aweimports \"\"\"\n     def get_column_size(tablename, attr_name):\n",
                            "Merge branch 'assist/autoformat/wjv/bugfix/check_long_char_dict_on_startup/47c6a514' into 'wjv/bugfix/check_long_char_dict_on_startup'",
                            "Willem-Jan Vriend",
                            "2023-07-26T17:26:46.000+00:00",
                            "83ee744bb16ec0e523554a2e030c1bf388ce4676"
                        ],
                        [
                            "@@ -42,6 +42,7 @@ print('\\\n sys.ps1 = 'ewe> '\n sys.ps2 = '...  '\n \n+\n def check_long_char():\n     \"\"\" check the long_char dict from aweimports \"\"\"\n     def get_column_size(tablename, attr_name):\n",
                            "Auto-format files with autopep8",
                            "CI Bot",
                            "2023-07-26T16:52:00.000+00:00",
                            "fd7f556006116611d20b4a9801618bfa8a9a4822"
                        ],
                        [
                            "@@ -42,6 +42,32 @@ print('\\\n sys.ps1 = 'ewe> '\n sys.ps2 = '...  '\n \n+def check_long_char():\n+    \"\"\" check the long_char dict from aweimports \"\"\"\n+    def get_column_size(tablename, attr_name):\n+        \"\"\" return the column size \"\"\"\n+        from common.database.Database import database\n+        for column in database.columncache[tablename]:\n+            if column.attrname == attr_name:\n+                if column.propname == 'desc_list_property':\n+                    columnname = 'COLUMN_VALUE'\n+                    tablename = column.tablename\n+                else:\n+                    columnname = column.columnname\n+                sql = f\"select char_length from all_tab_columns where table_name='{tablename}' and column_name='{columnname}'\"\n+                #print(sql)\n+                return database.execute_select(sql)[0][0]\n+        raise KeyError(f'table {tablename} with attrname {attr_name} not found')\n+    from euclid.dm_bindings import long_char, dataproduct\n+    for cls_name in long_char:\n+        try:\n+            tablename = dataproduct[cls_name]._dmlname()\n+            for attr_name in long_char[cls_name]:\n+                size = get_column_size(tablename, attr_name)\n+                assert size == 4000, f'size not 4000 but {size} for {cls_name}.{attr_name}'\n+        except Exception as e:\n+            print(f'ERROR checking long_char; {e}')\n+\n \n ## Print the news file\n if 'AWEPIPE' in os.environ:\n@@ -89,6 +115,7 @@ else:\n         profile.sso_ticket = st\n     from common.database.Context import privileges_names\n     from euclid.dm_bindings import *\n+    check_long_char()\n     if is_using_filebased():\n         print('WARNING -- using file-based interface (NOT databased interface)')\n         print('')\n@@ -125,4 +152,4 @@ if userstartup:\n     del userstartup\n \n ## Delete all unwanted modules from the namespace that were imported\n-del euclid, common\n+del euclid, common, check_long_char\n",
                            "check the long_char dict on startup",
                            "Willem-Jan Vriend",
                            "2023-07-26T16:33:53.000+02:00",
                            "47c6a514ed162d5cc1efa611d778f6a0c240d038"
                        ]
                    ],
                    "pip/aweimports.py": [
                        [
                            "@@ -2888,7 +2888,7 @@ dataproduct_delay = {\n long_char = {\n     'IalInstance': ['IalBootstrapInfo'],\n     'PipelineDefinition': ['OptionalPackageDefRootPaths'],\n-    'FileFiltering': ['FilesToExclude', 'FilesToInclude'],\n+    'Filefiltering': ['FilesToExclude', 'FilesToInclude'],\n     'Plan': ['Message'],\n     'PipelineProcessingOrder': ['SdcConfiguration'],\n     'ThematicParameterValue': ['Text'],\n",
                            "Merge branch 'wjv/bugfix/aweimports_FileFiltering_Filefiltering' into 'develop'",
                            "Andrey Belikov",
                            "2023-07-26T17:18:15.000+00:00",
                            "c85b02cd9492fa4dde379a7693cc91fc8370d365"
                        ]
                    ],
                    "util/IntersectShapely.py": [
                        [
                            "@@ -87,7 +87,7 @@ ORDER BY T4.DPD_OBJECT_ID, T1.POSITION\n     return result\n \n \n-def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_overlap=True):\n+def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_overlap=False):\n     \"\"\"Find the overlap between a search area and a list of data product id and vertices.\n \n     :param area: Search area as shapely.Polygon\n@@ -126,9 +126,9 @@ def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_\n         polygon = shapely.Polygon(coordinates)\n         try:\n             if inverse_overlap:\n-                overlap = 100.0 * (area & polygon).area / polygon.area\n-            else:\n                 overlap = 100.0 * (area & polygon).area / area.area\n+            else:\n+                overlap = 100.0 * (area & polygon).area / polygon.area\n         except shapely.errors.GEOSException:\n             # Some footprints are incorrect, raising the following exception\n             # shapely.errors.GEOSException: TopologyException: Input geom 1 is invalid: Self-intersection at ...\n@@ -141,7 +141,7 @@ def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_\n     return result_true, result_false\n \n \n-def intersect_shapely(input_area, class_name, min_overlap, max_overlap, inverse_overlap=True):\n+def intersect_shapely(input_area, class_name, min_overlap, max_overlap, inverse_overlap=False):\n     \"\"\"Find the Data Products that overlap a search area.\n \n     It is up to the caller of this routine to convert the result to\n",
                            "Merge branch 'drb/feature/inverse-overlap-inverted' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-07-26T13:55:22.000+00:00",
                            "3bbc2caa03d9acf5bdf9e22a1d748507240926d8"
                        ],
                        [
                            "@@ -87,7 +87,7 @@ ORDER BY T4.DPD_OBJECT_ID, T1.POSITION\n     return result\n \n \n-def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_overlap=False):\n+def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_overlap=True):\n     \"\"\"Find the overlap between a search area and a list of data product id and vertices.\n \n     :param area: Search area as shapely.Polygon\n@@ -96,16 +96,16 @@ def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_\n         The tuples have to be sorted by data product id and position.\n     :param min_overlap: Minimum overlap in percent of the input_area\n     :param max_overlap: Maximum overlap in percent of the input_area\n-    :returns:\n-        Both a dictionary with the overlapping data product ids and\n-        vertices and a dictionary with the non-overlapping data product\n-        ids and vertices.  The key in each dictionary is the data product\n-        id as bytes() and the value is a shapely.Polygon.\n     :param inverse_overlap:\n         Determines the denominator for calculating the overlap percentage.\n         If True, the denominator is the area of the spatial footprint of the data product\n         with the given class_name.\n         If False, the denominator is the area of the input_area, which is the default.\n+    :returns:\n+        Both a dictionary with the overlapping data product ids and\n+        vertices and a dictionary with the non-overlapping data product\n+        ids and vertices.  The key in each dictionary is the data product\n+        id as bytes() and the value is a shapely.Polygon.\n \n     \"\"\"\n     result_true = {}\n@@ -141,7 +141,7 @@ def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_\n     return result_true, result_false\n \n \n-def intersect_shapely(input_area, class_name, min_overlap, max_overlap, inverse_overlap=False):\n+def intersect_shapely(input_area, class_name, min_overlap, max_overlap, inverse_overlap=True):\n     \"\"\"Find the Data Products that overlap a search area.\n \n     It is up to the caller of this routine to convert the result to\n@@ -164,6 +164,11 @@ def intersect_shapely(input_area, class_name, min_overlap, max_overlap, inverse_\n         If True, the denominator is the area of the spatial footprint of the data product\n         with the given class_name.\n         If False, the denominator is the area of the input_area, which is the default.\n+    :returns:\n+        Both a dictionary with the overlapping data product ids and\n+        vertices and a dictionary with the non-overlapping data product\n+        ids and vertices.  The key in each dictionary is the data product\n+        id as bytes() and the value is a shapely.Polygon.\n \n     \"\"\"\n     vertices = intersect_shapely_vertices(input_area, class_name)\n",
                            "Merge branch 'drb/feature/inverse-overlap-default' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-07-26T10:45:26.000+00:00",
                            "60a5002a2db17565c42ff515e8ee42d34215d614"
                        ],
                        [
                            "@@ -87,7 +87,7 @@ ORDER BY T4.DPD_OBJECT_ID, T1.POSITION\n     return result\n \n \n-def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_overlap=False):\n+def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_overlap=True):\n     \"\"\"Find the overlap between a search area and a list of data product id and vertices.\n \n     :param area: Search area as shapely.Polygon\n@@ -96,16 +96,16 @@ def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_\n         The tuples have to be sorted by data product id and position.\n     :param min_overlap: Minimum overlap in percent of the input_area\n     :param max_overlap: Maximum overlap in percent of the input_area\n-    :returns:\n-        Both a dictionary with the overlapping data product ids and\n-        vertices and a dictionary with the non-overlapping data product\n-        ids and vertices.  The key in each dictionary is the data product\n-        id as bytes() and the value is a shapely.Polygon.\n     :param inverse_overlap:\n         Determines the denominator for calculating the overlap percentage.\n         If True, the denominator is the area of the spatial footprint of the data product\n         with the given class_name.\n         If False, the denominator is the area of the input_area, which is the default.\n+    :returns:\n+        Both a dictionary with the overlapping data product ids and\n+        vertices and a dictionary with the non-overlapping data product\n+        ids and vertices.  The key in each dictionary is the data product\n+        id as bytes() and the value is a shapely.Polygon.\n \n     \"\"\"\n     result_true = {}\n@@ -141,7 +141,7 @@ def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_\n     return result_true, result_false\n \n \n-def intersect_shapely(input_area, class_name, min_overlap, max_overlap, inverse_overlap=False):\n+def intersect_shapely(input_area, class_name, min_overlap, max_overlap, inverse_overlap=True):\n     \"\"\"Find the Data Products that overlap a search area.\n \n     It is up to the caller of this routine to convert the result to\n@@ -164,6 +164,11 @@ def intersect_shapely(input_area, class_name, min_overlap, max_overlap, inverse_\n         If True, the denominator is the area of the spatial footprint of the data product\n         with the given class_name.\n         If False, the denominator is the area of the input_area, which is the default.\n+    :returns:\n+        Both a dictionary with the overlapping data product ids and\n+        vertices and a dictionary with the non-overlapping data product\n+        ids and vertices.  The key in each dictionary is the data product\n+        id as bytes() and the value is a shapely.Polygon.\n \n     \"\"\"\n     vertices = intersect_shapely_vertices(input_area, class_name)\n",
                            "Calculate overlap percentage with spatial footprint area as denominator by default.",
                            "Danny Boxhoorn",
                            "2023-07-26T12:15:52.000+02:00",
                            "33a3bbc4bc788271b2eb84c10d28cbd8dd87fa6a"
                        ],
                        [
                            "@@ -87,7 +87,7 @@ ORDER BY T4.DPD_OBJECT_ID, T1.POSITION\n     return result\n \n \n-def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap):\n+def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_overlap=False):\n     \"\"\"Find the overlap between a search area and a list of data product id and vertices.\n \n     :param area: Search area as shapely.Polygon\n@@ -101,6 +101,11 @@ def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap):\n         vertices and a dictionary with the non-overlapping data product\n         ids and vertices.  The key in each dictionary is the data product\n         id as bytes() and the value is a shapely.Polygon.\n+    :param inverse_overlap:\n+        Determines the denominator for calculating the overlap percentage.\n+        If True, the denominator is the area of the spatial footprint of the data product\n+        with the given class_name.\n+        If False, the denominator is the area of the input_area, which is the default.\n \n     \"\"\"\n     result_true = {}\n@@ -120,7 +125,10 @@ def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap):\n             dpd_product_id = product_id\n         polygon = shapely.Polygon(coordinates)\n         try:\n-            overlap = 100.0 * (area & polygon).area / area.area\n+            if inverse_overlap:\n+                overlap = 100.0 * (area & polygon).area / polygon.area\n+            else:\n+                overlap = 100.0 * (area & polygon).area / area.area\n         except shapely.errors.GEOSException:\n             # Some footprints are incorrect, raising the following exception\n             # shapely.errors.GEOSException: TopologyException: Input geom 1 is invalid: Self-intersection at ...\n@@ -133,7 +141,7 @@ def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap):\n     return result_true, result_false\n \n \n-def intersect_shapely(input_area, class_name, min_overlap, max_overlap):\n+def intersect_shapely(input_area, class_name, min_overlap, max_overlap, inverse_overlap=False):\n     \"\"\"Find the Data Products that overlap a search area.\n \n     It is up to the caller of this routine to convert the result to\n@@ -151,9 +159,14 @@ def intersect_shapely(input_area, class_name, min_overlap, max_overlap):\n     :param class_name: The name of a data product class, i.e. Dpd*\n     :param min_overlap: Minimum overlap in percent of the input_area\n     :param max_overlap: Maximum overlap in percent of the input_area\n+    :param inverse_overlap:\n+        Determines the denominator for calculating the overlap percentage.\n+        If True, the denominator is the area of the spatial footprint of the data product\n+        with the given class_name.\n+        If False, the denominator is the area of the input_area, which is the default.\n \n     \"\"\"\n     vertices = intersect_shapely_vertices(input_area, class_name)\n     area = shapely.Polygon(input_area)\n-    result_true, result_false = intersect_shapely_overlap(area, vertices, min_overlap, max_overlap)\n+    result_true, result_false = intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_overlap=inverse_overlap)\n     return result_true, result_false\n",
                            "Merge branch 'drb/feature/inverse-overlap' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-07-20T12:42:54.000+00:00",
                            "5332d6e2727af8e1c8432f19dd5ba49dad76632d"
                        ],
                        [
                            "@@ -87,7 +87,7 @@ ORDER BY T4.DPD_OBJECT_ID, T1.POSITION\n     return result\n \n \n-def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap):\n+def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_overlap=False):\n     \"\"\"Find the overlap between a search area and a list of data product id and vertices.\n \n     :param area: Search area as shapely.Polygon\n@@ -101,6 +101,11 @@ def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap):\n         vertices and a dictionary with the non-overlapping data product\n         ids and vertices.  The key in each dictionary is the data product\n         id as bytes() and the value is a shapely.Polygon.\n+    :param inverse_overlap:\n+        Determines the denominator for calculating the overlap percentage.\n+        If True, the denominator is the area of the spatial footprint of the data product\n+        with the given class_name.\n+        If False, the denominator is the area of the input_area, which is the default.\n \n     \"\"\"\n     result_true = {}\n@@ -120,7 +125,10 @@ def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap):\n             dpd_product_id = product_id\n         polygon = shapely.Polygon(coordinates)\n         try:\n-            overlap = 100.0 * (area & polygon).area / area.area\n+            if inverse_overlap:\n+                overlap = 100.0 * (area & polygon).area / polygon.area\n+            else:\n+                overlap = 100.0 * (area & polygon).area / area.area\n         except shapely.errors.GEOSException:\n             # Some footprints are incorrect, raising the following exception\n             # shapely.errors.GEOSException: TopologyException: Input geom 1 is invalid: Self-intersection at ...\n@@ -133,7 +141,7 @@ def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap):\n     return result_true, result_false\n \n \n-def intersect_shapely(input_area, class_name, min_overlap, max_overlap):\n+def intersect_shapely(input_area, class_name, min_overlap, max_overlap, inverse_overlap=False):\n     \"\"\"Find the Data Products that overlap a search area.\n \n     It is up to the caller of this routine to convert the result to\n@@ -151,9 +159,14 @@ def intersect_shapely(input_area, class_name, min_overlap, max_overlap):\n     :param class_name: The name of a data product class, i.e. Dpd*\n     :param min_overlap: Minimum overlap in percent of the input_area\n     :param max_overlap: Maximum overlap in percent of the input_area\n+    :param inverse_overlap:\n+        Determines the denominator for calculating the overlap percentage.\n+        If True, the denominator is the area of the spatial footprint of the data product\n+        with the given class_name.\n+        If False, the denominator is the area of the input_area, which is the default.\n \n     \"\"\"\n     vertices = intersect_shapely_vertices(input_area, class_name)\n     area = shapely.Polygon(input_area)\n-    result_true, result_false = intersect_shapely_overlap(area, vertices, min_overlap, max_overlap)\n+    result_true, result_false = intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_overlap=inverse_overlap)\n     return result_true, result_false\n",
                            "Divide by the area of the spatial footprint if requested.",
                            "Danny Boxhoorn",
                            "2023-07-20T12:34:13.000+02:00",
                            "bc8cf08d5cf65bcc601ca906c136fc16b67e3540"
                        ],
                        [
                            "@@ -87,13 +87,15 @@ ORDER BY T4.DPD_OBJECT_ID, T1.POSITION\n     return result\n \n \n-def intersect_shapely_overlap(area, vertices):\n+def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap):\n     \"\"\"Find the overlap between a search area and a list of data product id and vertices.\n \n     :param area: Search area as shapely.Polygon\n     :param vertices:\n         List of (data product id, position, R.A., Declination) tuples.\n         The tuples have to be sorted by data product id and position.\n+    :param min_overlap: Minimum overlap in percent of the input_area\n+    :param max_overlap: Maximum overlap in percent of the input_area\n     :returns:\n         Both a dictionary with the overlapping data product ids and\n         vertices and a dictionary with the non-overlapping data product\n@@ -103,7 +105,7 @@ def intersect_shapely_overlap(area, vertices):\n     \"\"\"\n     result_true = {}\n     result_false = {}\n-    Result = namedtuple(\"Result\", [\"dpd_product_id\", \"footprint\"])\n+    Result = namedtuple(\"Result\", [\"dpd_product_id\", \"overlap\", \"footprint\"])\n \n     for dpd_object_id, xylist in itertools.groupby(\n         vertices, key=operator.itemgetter(0)\n@@ -117,15 +119,21 @@ def intersect_shapely_overlap(area, vertices):\n             assert dpd_product_id is None or dpd_product_id == product_id, (dpd_product_id, product_id)\n             dpd_product_id = product_id\n         polygon = shapely.Polygon(coordinates)\n-        if polygon.intersects(area):\n-            result_true[dpd_object_id] = Result(dpd_product_id, polygon)\n+        try:\n+            overlap = 100.0 * (area & polygon).area / area.area\n+        except shapely.errors.GEOSException:\n+            # Some footprints are incorrect, raising the following exception\n+            # shapely.errors.GEOSException: TopologyException: Input geom 1 is invalid: Self-intersection at ...\n+            overlap = -1.0\n+        if polygon.intersects(area) and overlap >= min_overlap and overlap <= max_overlap:\n+            result_true[dpd_object_id] = Result(dpd_product_id, overlap, polygon)\n         else:\n-            result_false[dpd_object_id] = Result(dpd_product_id, polygon)\n+            result_false[dpd_object_id] = Result(dpd_product_id, overlap, polygon)\n \n     return result_true, result_false\n \n \n-def intersect_shapely(input_area, class_name):\n+def intersect_shapely(input_area, class_name, min_overlap, max_overlap):\n     \"\"\"Find the Data Products that overlap a search area.\n \n     It is up to the caller of this routine to convert the result to\n@@ -141,9 +149,11 @@ def intersect_shapely(input_area, class_name):\n     :param input_area:\n         The search area given as a list of (R.A., Declination) tuples forming a polygon.\n     :param class_name: The name of a data product class, i.e. Dpd*\n+    :param min_overlap: Minimum overlap in percent of the input_area\n+    :param max_overlap: Maximum overlap in percent of the input_area\n \n     \"\"\"\n     vertices = intersect_shapely_vertices(input_area, class_name)\n     area = shapely.Polygon(input_area)\n-    result_true, result_false = intersect_shapely_overlap(area, vertices)\n+    result_true, result_false = intersect_shapely_overlap(area, vertices, min_overlap, max_overlap)\n     return result_true, result_false\n",
                            "Merge branch 'drb/bugfix/check-min-and-max-overlap-low-level' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-07-11T13:25:07.000+00:00",
                            "479bde684d500f96f26c43f4ead2bba6c337afed"
                        ],
                        [
                            "@@ -87,13 +87,15 @@ ORDER BY T4.DPD_OBJECT_ID, T1.POSITION\n     return result\n \n \n-def intersect_shapely_overlap(area, vertices):\n+def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap):\n     \"\"\"Find the overlap between a search area and a list of data product id and vertices.\n \n     :param area: Search area as shapely.Polygon\n     :param vertices:\n         List of (data product id, position, R.A., Declination) tuples.\n         The tuples have to be sorted by data product id and position.\n+    :param min_overlap: Minimum overlap in percent of the input_area\n+    :param max_overlap: Maximum overlap in percent of the input_area\n     :returns:\n         Both a dictionary with the overlapping data product ids and\n         vertices and a dictionary with the non-overlapping data product\n@@ -103,7 +105,7 @@ def intersect_shapely_overlap(area, vertices):\n     \"\"\"\n     result_true = {}\n     result_false = {}\n-    Result = namedtuple(\"Result\", [\"dpd_product_id\", \"footprint\"])\n+    Result = namedtuple(\"Result\", [\"dpd_product_id\", \"overlap\", \"footprint\"])\n \n     for dpd_object_id, xylist in itertools.groupby(\n         vertices, key=operator.itemgetter(0)\n@@ -117,15 +119,21 @@ def intersect_shapely_overlap(area, vertices):\n             assert dpd_product_id is None or dpd_product_id == product_id, (dpd_product_id, product_id)\n             dpd_product_id = product_id\n         polygon = shapely.Polygon(coordinates)\n-        if polygon.intersects(area):\n-            result_true[dpd_object_id] = Result(dpd_product_id, polygon)\n+        try:\n+            overlap = 100.0 * (area & polygon).area / area.area\n+        except shapely.errors.GEOSException:\n+            # Some footprints are incorrect, raising the following exception\n+            # shapely.errors.GEOSException: TopologyException: Input geom 1 is invalid: Self-intersection at ...\n+            overlap = -1.0\n+        if polygon.intersects(area) and overlap >= min_overlap and overlap <= max_overlap:\n+            result_true[dpd_object_id] = Result(dpd_product_id, overlap, polygon)\n         else:\n-            result_false[dpd_object_id] = Result(dpd_product_id, polygon)\n+            result_false[dpd_object_id] = Result(dpd_product_id, overlap, polygon)\n \n     return result_true, result_false\n \n \n-def intersect_shapely(input_area, class_name):\n+def intersect_shapely(input_area, class_name, min_overlap, max_overlap):\n     \"\"\"Find the Data Products that overlap a search area.\n \n     It is up to the caller of this routine to convert the result to\n@@ -141,9 +149,11 @@ def intersect_shapely(input_area, class_name):\n     :param input_area:\n         The search area given as a list of (R.A., Declination) tuples forming a polygon.\n     :param class_name: The name of a data product class, i.e. Dpd*\n+    :param min_overlap: Minimum overlap in percent of the input_area\n+    :param max_overlap: Maximum overlap in percent of the input_area\n \n     \"\"\"\n     vertices = intersect_shapely_vertices(input_area, class_name)\n     area = shapely.Polygon(input_area)\n-    result_true, result_false = intersect_shapely_overlap(area, vertices)\n+    result_true, result_false = intersect_shapely_overlap(area, vertices, min_overlap, max_overlap)\n     return result_true, result_false\n",
                            "Calculate the overlap and check the minimum and maximum overlap in the low level intersect.",
                            "Danny Boxhoorn",
                            "2023-07-11T14:58:13.000+02:00",
                            "39a015c147427087c451286a6755a6ab7b5cda70"
                        ],
                        [
                            "@@ -1,4 +1,5 @@\n \"\"\"Find SpatialFootprints overlapping a search area using shapely.\"\"\"\n+from collections import namedtuple\n import operator\n import itertools\n import shapely\n@@ -67,6 +68,7 @@ def intersect_shapely_vertices(input_area, class_name):\n     # than one HEALPIX5 pixel.\n     query = f\"\"\"\\\n SELECT DISTINCT T4.DPD_OBJECT_ID\n+, T4.DPD_PRODUCT_ID\n , T1.POSITION N\n , T2.C1 X\n , T2.C2 Y\n@@ -101,20 +103,24 @@ def intersect_shapely_overlap(area, vertices):\n     \"\"\"\n     result_true = {}\n     result_false = {}\n+    Result = namedtuple(\"Result\", [\"dpd_product_id\", \"footprint\"])\n \n     for dpd_object_id, xylist in itertools.groupby(\n         vertices, key=operator.itemgetter(0)\n     ):\n         coordinates = []\n-        for n, (group_oid, position, x, y) in enumerate(xylist):\n+        dpd_product_id = None\n+        for n, (group_oid, product_id, position, x, y) in enumerate(xylist):\n             assert n == position, (n, position)\n             assert dpd_object_id == group_oid, (dpd_object_id, group_oid)\n             coordinates.append((x, y))\n+            assert dpd_product_id is None or dpd_product_id == product_id, (dpd_product_id, product_id)\n+            dpd_product_id = product_id\n         polygon = shapely.Polygon(coordinates)\n         if polygon.intersects(area):\n-            result_true[dpd_object_id] = polygon\n+            result_true[dpd_object_id] = Result(dpd_product_id, polygon)\n         else:\n-            result_false[dpd_object_id] = polygon\n+            result_false[dpd_object_id] = Result(dpd_product_id, polygon)\n \n     return result_true, result_false\n \n",
                            "Merge branch 'drb/feature/productid-in-intersect-shapely-result' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-07-11T10:33:57.000+00:00",
                            "c59d03bb25ea17be0887d423a7c25bf4fd86e5e6"
                        ],
                        [
                            "@@ -1,4 +1,5 @@\n \"\"\"Find SpatialFootprints overlapping a search area using shapely.\"\"\"\n+from collections import namedtuple\n import operator\n import itertools\n import shapely\n@@ -67,6 +68,7 @@ def intersect_shapely_vertices(input_area, class_name):\n     # than one HEALPIX5 pixel.\n     query = f\"\"\"\\\n SELECT DISTINCT T4.DPD_OBJECT_ID\n+, T4.DPD_PRODUCT_ID\n , T1.POSITION N\n , T2.C1 X\n , T2.C2 Y\n@@ -101,20 +103,24 @@ def intersect_shapely_overlap(area, vertices):\n     \"\"\"\n     result_true = {}\n     result_false = {}\n+    Result = namedtuple(\"Result\", [\"dpd_product_id\", \"footprint\"])\n \n     for dpd_object_id, xylist in itertools.groupby(\n         vertices, key=operator.itemgetter(0)\n     ):\n         coordinates = []\n-        for n, (group_oid, position, x, y) in enumerate(xylist):\n+        dpd_product_id = None\n+        for n, (group_oid, product_id, position, x, y) in enumerate(xylist):\n             assert n == position, (n, position)\n             assert dpd_object_id == group_oid, (dpd_object_id, group_oid)\n             coordinates.append((x, y))\n+            assert dpd_product_id is None or dpd_product_id == product_id, (dpd_product_id, product_id)\n+            dpd_product_id = product_id\n         polygon = shapely.Polygon(coordinates)\n         if polygon.intersects(area):\n-            result_true[dpd_object_id] = polygon\n+            result_true[dpd_object_id] = Result(dpd_product_id, polygon)\n         else:\n-            result_false[dpd_object_id] = polygon\n+            result_false[dpd_object_id] = Result(dpd_product_id, polygon)\n \n     return result_true, result_false\n \n",
                            "Include the ProductId in the intersect_shapely result to avoid instantiating data products.",
                            "Danny Boxhoorn",
                            "2023-07-11T12:15:32.000+02:00",
                            "09a4b0186a6272308edf1d7a2a549a2f57975db6"
                        ],
                        [
                            "@@ -5,6 +5,7 @@ import shapely\n \n from common.database.Database import database\n from euclid.dm_bindings import polygon_dictionary\n+from euclid.database.oraclesupport import long_names_translation\n from euclid.util.Healpix import convert_area_healpix\n \n \n@@ -60,6 +61,7 @@ def intersect_shapely_vertices(input_area, class_name):\n     \"\"\"\n     healpix5_clause = intersect_shapely_healpix5_clause(input_area)\n     footprintlink = intersect_shapely_footprintlink(class_name)\n+    view_name = long_names_translation.get(class_name + '+', class_name + '+')\n \n     # NB. DISTINCT is necessary because one data product can appear in more\n     # than one HEALPIX5 pixel.\n@@ -71,7 +73,7 @@ SELECT DISTINCT T4.DPD_OBJECT_ID\n FROM AWOPER.SPATIALFOOTPRINT T0\n   JOIN AWOPER.POLYGONTYPE$VERTEX T1 ON T1.OBJECT_ID=T0.POLYGON\n   JOIN AWOPER.VERTEXTYPE T2 ON T2.OBJECT_ID=T1.COLUMN_VALUE\n-  JOIN AWOPER.\"{class_name}+\" T3 ON T3.{footprintlink}.\"object_id\"=T0.OBJECT_ID\n+  JOIN AWOPER.\"{view_name}\" T3 ON T3.{footprintlink}.\"object_id\"=T0.OBJECT_ID\n   JOIN AWOPER.AWEHEALPIX5 T4 ON T4.DPD_OBJECT_ID=T3.\"object_id\"\n WHERE T4.DPD_TYPE='{class_name}'\n   AND T4.HEALPIX {healpix5_clause}\n",
                            "Merge branch 'drb/bugfix/long-names-translation-missing' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-06-27T10:20:18.000+00:00",
                            "c0871ff9b384c55eebfd6f998d1a1142eeada45a"
                        ],
                        [
                            "@@ -61,7 +61,7 @@ def intersect_shapely_vertices(input_area, class_name):\n     \"\"\"\n     healpix5_clause = intersect_shapely_healpix5_clause(input_area)\n     footprintlink = intersect_shapely_footprintlink(class_name)\n-    view_name = long_names_translation.get(class_name+'+', class_name+'+')\n+    view_name = long_names_translation.get(class_name + '+', class_name + '+')\n \n     # NB. DISTINCT is necessary because one data product can appear in more\n     # than one HEALPIX5 pixel.\n",
                            "Merge branch 'assist/autoformat/drb/bugfix/long-names-translation-missing/dc14df0a' into 'drb/bugfix/long-names-translation-missing'",
                            "Danny Boxhoorn",
                            "2023-06-27T10:05:38.000+00:00",
                            "507e49886979756433cbcc49207f33c50235d6d6"
                        ],
                        [
                            "@@ -61,7 +61,7 @@ def intersect_shapely_vertices(input_area, class_name):\n     \"\"\"\n     healpix5_clause = intersect_shapely_healpix5_clause(input_area)\n     footprintlink = intersect_shapely_footprintlink(class_name)\n-    view_name = long_names_translation.get(class_name+'+', class_name+'+')\n+    view_name = long_names_translation.get(class_name + '+', class_name + '+')\n \n     # NB. DISTINCT is necessary because one data product can appear in more\n     # than one HEALPIX5 pixel.\n",
                            "Auto-format files with autopep8",
                            "CI Bot",
                            "2023-06-27T10:01:58.000+00:00",
                            "7bc59694c3ad5317ec80b44ecf2dfe1d7abaf18e"
                        ],
                        [
                            "@@ -5,6 +5,7 @@ import shapely\n \n from common.database.Database import database\n from euclid.dm_bindings import polygon_dictionary\n+from euclid.database.oraclesupport import long_names_translation\n from euclid.util.Healpix import convert_area_healpix\n \n \n@@ -60,6 +61,7 @@ def intersect_shapely_vertices(input_area, class_name):\n     \"\"\"\n     healpix5_clause = intersect_shapely_healpix5_clause(input_area)\n     footprintlink = intersect_shapely_footprintlink(class_name)\n+    view_name = long_names_translation.get(class_name+'+', class_name+'+')\n \n     # NB. DISTINCT is necessary because one data product can appear in more\n     # than one HEALPIX5 pixel.\n@@ -71,7 +73,7 @@ SELECT DISTINCT T4.DPD_OBJECT_ID\n FROM AWOPER.SPATIALFOOTPRINT T0\n   JOIN AWOPER.POLYGONTYPE$VERTEX T1 ON T1.OBJECT_ID=T0.POLYGON\n   JOIN AWOPER.VERTEXTYPE T2 ON T2.OBJECT_ID=T1.COLUMN_VALUE\n-  JOIN AWOPER.\"{class_name}+\" T3 ON T3.{footprintlink}.\"object_id\"=T0.OBJECT_ID\n+  JOIN AWOPER.\"{view_name}\" T3 ON T3.{footprintlink}.\"object_id\"=T0.OBJECT_ID\n   JOIN AWOPER.AWEHEALPIX5 T4 ON T4.DPD_OBJECT_ID=T3.\"object_id\"\n WHERE T4.DPD_TYPE='{class_name}'\n   AND T4.HEALPIX {healpix5_clause}\n",
                            "Long names of VIEW should be translated to something short.",
                            "Danny Boxhoorn",
                            "2023-06-27T11:57:40.000+02:00",
                            "dc14df0af8827166fc326a1511f46b69294edeaa"
                        ]
                    ],
                    "util/Healpix.py": [
                        [
                            "@@ -116,7 +116,7 @@ def call_healpix(area, area_healpix, **kwargs):\n     if productlist and len(productlist) > 0:\n         data['input_array'] = {producttype : productlist}\n         if len(area_healpix) > 0:\n-            data['input_area_healpix'] = area_healpix\n+            data['input_area_healpix'] = [int(k) for k in area_healpix]\n     else:\n         data['class_name'] = producttype\n         data['input_area'] = area\n",
                            "Merge branch 'belikov/hotfix/convertnumpy' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-26T11:15:25.000+00:00",
                            "07ebf33024c76d5b7a6dc52ce8e48c88235275e3"
                        ],
                        [
                            "@@ -1626,3 +1626,41 @@ def INTERSECT(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n         t2 = time.time()\n         print(t2 - t1)\n     return ret\n+\n+\n+def INTERSECT_SHAPELY(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n+    \"\"\" implementation of INTERSECT_SHAPELY \"\"\"\n+    from euclid.util.IntersectShapely import intersect_shapely\n+    inp_area = kwargs.get('inp_area', None)\n+    inp_data_type = kwargs.get('inp_data_type', None)\n+    inp_data_productid = kwargs.get('inp_data_productid', None)\n+    getids = kwargs.get('getids', False)\n+    ret = []\n+    input_area = []\n+    #shapely works with %\n+    pr_min = pr_min * 100.0\n+    pr_max = pr_max * 100.0\n+    if inp_data_type and inp_data_productid:\n+        inp_obj_sel = getlongattr(dataproduct[inp_data_type], OBJECTID_PATH) == inp_data_productid\n+        if len(inp_obj_sel) > 0:\n+            out_arr = []\n+            out_arr = getpolygons(inp_obj_sel[0], inp_data_type, out_arr)\n+            input_area = []\n+            if len(out_arr) > 0:\n+                for i_arr in out_arr:\n+                    for j_v in i_arr.Vertex:\n+                        input_area = fill_inpbox(input_area, j_v)\n+    elif inp_area:\n+        input_area = inp_area\n+    else:\n+        return ret\n+    if len(input_area) > 0:\n+        result_true, result_false = intersect_shapely(input_area, data_type, pr_min, pr_max)\n+        for dpd_i in result_true:\n+            if getids:\n+                ret.append(result_true[dpd_i].dpd_product_id)\n+            else:\n+                dpd_dp_i = dataproduct[data_type](object_id=dpd_i)\n+                if dpd_dp_i:\n+                    ret.append(dpd_dp_i)\n+    return ret\n",
                            "Merge branch 'belikov/feature/intersectshapely' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-21T08:51:35.000+00:00",
                            "08d188979a7168303288bc0116c6e657c0ab0556"
                        ],
                        [
                            "@@ -1637,6 +1637,9 @@ def INTERSECT_SHAPELY(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n     getids = kwargs.get('getids', False)\n     ret = []\n     input_area = []\n+    #shapely works with %\n+    pr_min = pr_min * 100.0\n+    pr_max = pr_max * 100.0\n     if inp_data_type and inp_data_productid:\n         inp_obj_sel = getlongattr(dataproduct[inp_data_type], OBJECTID_PATH) == inp_data_productid\n         if len(inp_obj_sel) > 0:\n@@ -1653,7 +1656,6 @@ def INTERSECT_SHAPELY(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n         return ret\n     if len(input_area) > 0:\n         result_true, result_false = intersect_shapely(input_area, data_type, pr_min, pr_max)\n-        #print(f'{result_true} {result_false}')\n         for dpd_i in result_true:\n             if getids:\n                 ret.append(result_true[dpd_i].dpd_product_id)\n",
                            "final version",
                            "Andrey Belikov",
                            "2023-07-20T19:12:11.000+02:00",
                            "fcc35a312bde7bf2fb20466695a0d46bb44497e0"
                        ],
                        [
                            "@@ -32,7 +32,6 @@ from euclid.database.helpers import getlongattr\n from euclid.util.MOCHPUtils import MOCHPUtils\n from euclid.dm_bindings import dataproduct, moc_dictionary, polygon_dictionary\n from euclid.util.utils import get_hostport, getauthorization\n-from euclid.util.IntersectShapely import intersect_shapely\n \n try:\n     _create_unverified_https_context = ssl._create_unverified_context\n@@ -1631,6 +1630,7 @@ def INTERSECT(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n \n def INTERSECT_SHAPELY(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n     \"\"\" implementation of INTERSECT_SHAPELY \"\"\"\n+    from euclid.util.IntersectShapely import intersect_shapely\n     inp_area = kwargs.get('inp_area', None)\n     inp_data_type = kwargs.get('inp_data_type', None)\n     inp_data_productid = kwargs.get('inp_data_productid', None)\n@@ -1646,13 +1646,14 @@ def INTERSECT_SHAPELY(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n             if len(out_arr) > 0:\n                 for i_arr in out_arr:\n                     for j_v in i_arr.Vertex:\n-                        input_area = fill_inpbox(inp_box, j_v)\n+                        input_area = fill_inpbox(input_area, j_v)\n     elif inp_area:\n         input_area = inp_area\n     else:\n         return ret\n     if len(input_area) > 0:\n         result_true, result_false = intersect_shapely(input_area, data_type, pr_min, pr_max)\n+        #print(f'{result_true} {result_false}')\n         for dpd_i in result_true:\n             if getids:\n                 ret.append(result_true[dpd_i].dpd_product_id)\n",
                            "avoid circular import",
                            "Andrey Belikov",
                            "2023-07-20T18:53:40.000+02:00",
                            "6ffffe9a1f4fe72f7f680f320c0942b8473114ca"
                        ],
                        [
                            "@@ -1655,7 +1655,7 @@ def INTERSECT_SHAPELY(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n         result_true, result_false = intersect_shapely(input_area, data_type, pr_min, pr_max)\n         for dpd_i in result_true:\n             if getids:\n-                ret.append(result_true[dpd_i][\"dpd_product_id\"])\n+                ret.append(result_true[dpd_i].dpd_product_id)\n             else:\n                 dpd_dp_i = dataproduct[data_type](object_id=dpd_i)\n                 if dpd_dp_i:\n",
                            "proper access to value",
                            "Andrey Belikov",
                            "2023-07-19T23:22:07.000+02:00",
                            "577ddec731f0cf95b7598329fea560d0fc784fca"
                        ],
                        [
                            "@@ -1637,7 +1637,6 @@ def INTERSECT_SHAPELY(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n     getids = kwargs.get('getids', False)\n     ret = []\n     input_area = []\n-    t1 = time.time()\n     if inp_data_type and inp_data_productid:\n         inp_obj_sel = getlongattr(dataproduct[inp_data_type], OBJECTID_PATH) == inp_data_productid\n         if len(inp_obj_sel) > 0:\n",
                            "syntax",
                            "Andrey Belikov",
                            "2023-07-16T21:23:33.000+02:00",
                            "25590865af437bc887e29f57c48f0f938b0a6e02"
                        ],
                        [
                            "@@ -1634,9 +1634,6 @@ def INTERSECT_SHAPELY(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n     inp_area = kwargs.get('inp_area', None)\n     inp_data_type = kwargs.get('inp_data_type', None)\n     inp_data_productid = kwargs.get('inp_data_productid', None)\n-    reverse = kwargs.get('reverse', False)\n-    order = kwargs.get('order', 13)\n-    productid = kwargs.get('productid', False)\n     getids = kwargs.get('getids', False)\n     ret = []\n     input_area = []\n@@ -1661,7 +1658,7 @@ def INTERSECT_SHAPELY(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n             if getids:\n                 ret.append(result_true[dpd_i][\"dpd_product_id\"])\n             else:\n-                dpd_dp_i = dataproduct[data_type](object_id=dpd_i)\\\n+                dpd_dp_i = dataproduct[data_type](object_id=dpd_i)\n                 if dpd_dp_i:\n                     ret.append(dpd_dp_i)\n     return ret\n",
                            "typo",
                            "Andrey Belikov",
                            "2023-07-16T20:20:34.000+02:00",
                            "77c07d0a89d01a0cc46d42b839d827ca33498dfa"
                        ],
                        [
                            "@@ -1628,6 +1628,7 @@ def INTERSECT(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n         print(t2 - t1)\n     return ret\n \n+\n def INTERSECT_SHAPELY(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n     \"\"\" implementation of INTERSECT_SHAPELY \"\"\"\n     inp_area = kwargs.get('inp_area', None)\n",
                            "Merge branch 'assist/autoformat/belikov/feature/intersectshapely/85824f55' into 'belikov/feature/intersectshapely'",
                            "Andrey Belikov",
                            "2023-07-16T17:52:50.000+00:00",
                            "1a6f5977620379223184eeb2108552c404a70d4f"
                        ],
                        [
                            "@@ -1628,6 +1628,7 @@ def INTERSECT(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n         print(t2 - t1)\n     return ret\n \n+\n def INTERSECT_SHAPELY(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n     \"\"\" implementation of INTERSECT_SHAPELY \"\"\"\n     inp_area = kwargs.get('inp_area', None)\n",
                            "Auto-format files with autopep8",
                            "CI Bot",
                            "2023-07-16T17:51:12.000+00:00",
                            "f07d4d040b93b7164ef90f5e2f006612864ea428"
                        ],
                        [
                            "@@ -32,6 +32,7 @@ from euclid.database.helpers import getlongattr\n from euclid.util.MOCHPUtils import MOCHPUtils\n from euclid.dm_bindings import dataproduct, moc_dictionary, polygon_dictionary\n from euclid.util.utils import get_hostport, getauthorization\n+from euclid.util.IntersectShapely import intersect_shapely\n \n try:\n     _create_unverified_https_context = ssl._create_unverified_context\n@@ -1626,3 +1627,40 @@ def INTERSECT(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n         t2 = time.time()\n         print(t2 - t1)\n     return ret\n+\n+def INTERSECT_SHAPELY(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n+    \"\"\" implementation of INTERSECT_SHAPELY \"\"\"\n+    inp_area = kwargs.get('inp_area', None)\n+    inp_data_type = kwargs.get('inp_data_type', None)\n+    inp_data_productid = kwargs.get('inp_data_productid', None)\n+    reverse = kwargs.get('reverse', False)\n+    order = kwargs.get('order', 13)\n+    productid = kwargs.get('productid', False)\n+    getids = kwargs.get('getids', False)\n+    ret = []\n+    input_area = []\n+    t1 = time.time()\n+    if inp_data_type and inp_data_productid:\n+        inp_obj_sel = getlongattr(dataproduct[inp_data_type], OBJECTID_PATH) == inp_data_productid\n+        if len(inp_obj_sel) > 0:\n+            out_arr = []\n+            out_arr = getpolygons(inp_obj_sel[0], inp_data_type, out_arr)\n+            input_area = []\n+            if len(out_arr) > 0:\n+                for i_arr in out_arr:\n+                    for j_v in i_arr.Vertex:\n+                        input_area = fill_inpbox(inp_box, j_v)\n+    elif inp_area:\n+        input_area = inp_area\n+    else:\n+        return ret\n+    if len(input_area) > 0:\n+        result_true, result_false = intersect_shapely(input_area, data_type, pr_min, pr_max)\n+        for dpd_i in result_true:\n+            if getids:\n+                ret.append(result_true[dpd_i][\"dpd_product_id\"])\n+            else:\n+                dpd_dp_i = dataproduct[data_type](object_id=dpd_i)\\\n+                if dpd_dp_i:\n+                    ret.append(dpd_dp_i)\n+    return ret\n",
                            "add INTERSECT_SHAPELY",
                            "Andrey Belikov",
                            "2023-07-16T19:47:59.000+02:00",
                            "4cc6acf309f9303d3131a0a16e7fe91089963127"
                        ],
                        [
                            "@@ -133,7 +133,7 @@ def call_healpix(area, area_healpix, **kwargs):\n     try:\n         connection.request('PUT', request_url, headers=headers, body=data_json)\n     except socket.timeout:\n-        error = 'connection timed out after {}'.format(self.timeout)\n+        error = 'connection timed out after {}'.format(timeout)\n     except socket.gaierror:\n         error = 'connection failed to {}'.format(request_url)\n     except http.client.CannotSendRequest as e:\n@@ -190,7 +190,7 @@ def call_checklog(dss_server, username, password, timeout=30.0):\n     try:\n         connection.request('GET', request_url, headers=headers)\n     except socket.timeout:\n-        error = 'connection timed out after {}'.format(self.timeout)\n+        error = 'connection timed out after {}'.format(timeout)\n     except socket.gaierror:\n         error = 'connection failed to {}'.format(request_url)\n     except http.client.CannotSendRequest as e:\n@@ -1221,7 +1221,8 @@ def INTERSECT_DB(healpix_array, healpix_array_5, productid=False, objtype=None,\n             if objtype in result_hp:\n                 result_intersect[objtype] = {}\n                 for dp_id in result_hp[objtype]:\n-                    result_intersect[objtype][dp_id] = result_hp[objtype][dp_id]\n+                    obj_id = result_hp['convert_ids'][dp_id]\n+                    result_intersect[objtype][obj_id] = result_hp[objtype][dp_id]\n             tf3 = time.time()\n             Message(f'Total time new: {tf2 - tf1}, {tf3 - tf2}, {tf3 - tf1}')\n     return result_intersect\n@@ -1585,11 +1586,11 @@ def intersectcycle(pr_min, pr_max, order, reverse, healpix_area13, result_inters\n         for objid in result_intersect[dtype]:\n             if order == 13:\n                 if result_intersect[dtype][objid] >= pr_min and result_intersect[dtype][objid] <= pr_max:\n-                    out_i = getdataproduct(dtype, objid)\n-                    if out_i:\n-                        if getids:\n-                            ret.append(out_i.object_id.unquote())\n-                        else:\n+                    if getids:\n+                        ret.append(objid)\n+                    else:\n+                        out_i = getdataproduct(dtype, objid)\n+                        if out_i:\n                             ret.append(out_i)\n             else:\n                 ret.append(intersectcycle2(pr_min, pr_max, dtype, objid, reverse, healpix_area13, getids))\n",
                            "Merge branch 'belikov/feature/intersect' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-06-21T07:25:53.000+00:00",
                            "9bb20e9cd17825bfe31766b8f073dbcf168a8ddc"
                        ]
                    ],
                    "services/general/query_helper.py": [
                        [
                            "@@ -14,7 +14,7 @@ from common.database.DBProperties import link_list_property, desc_list_property\n from euclid.config.Environment import Env\n from euclid.database.helpers import getlongattr\n from euclid.exceptions import EasDpsConfigurationError, EasDpsDataModelError\n-from euclid.util.Healpix import CONTAINS, CONTAINS_BB, INTERSECT, decodearea\n+from euclid.util.Healpix import CONTAINS, CONTAINS_BB, INTERSECT, INTERSECT_SHAPELY, decodearea\n \n from euclid.dm_bindings import dataproduct\n \n@@ -222,6 +222,16 @@ def getspatial(class_name, inp_query, limit_id=None, limit_oid=None, getids=Fals\n     elif inp_query.startswith('CONTAINS'):\n         function_type = 'CONTAINS'\n         mod_query = inp_query.replace('CONTAINS', '')\n+    elif inp_query.startswith('INTERSECT_SHAPELY'):\n+        function_type = 'INTERSECT_SHAPELY'\n+        mod_query = inp_query.replace('INTERSECT_SHAPELY', '')\n+        start_pr = mod_query.find(\"(\")\n+        end_pr = mod_query.find(\")\")\n+        if start_pr > -1 and end_pr > -1:\n+            values_pr = mod_query[start_pr + 1:end_pr].split(\",\")\n+            pr_min = 0.01 * float(values_pr[0].strip())\n+            pr_max = 0.01 * float(values_pr[1].strip())\n+        mod_query = mod_query[end_pr + 1:]\n     elif inp_query.startswith('INTERSECT'):\n         function_type = 'INTERSECT'\n         mod_query = inp_query.replace('INTERSECT', '')\n@@ -247,6 +257,13 @@ def getspatial(class_name, inp_query, limit_id=None, limit_oid=None, getids=Fals\n                 limit_id=limit_oid, getids=getids)\n         else:\n             ret = CONTAINS_BB(class_name, inp_area=function_input, limit_id=limit_oid, getids=getids)\n+    elif function_type == 'INTERSECT_SHAPELY':\n+        if function_id:\n+            ret = INTERSECT_SHAPELY(pr_min, pr_max, class_name, inp_data_type=function_input,\n+                            inp_data_productid=function_id, limit_id=limit_id, reverse=reverse, getids=getids)\n+        else:\n+            ret = INTERSECT_SHAPELY(pr_min, pr_max, class_name, inp_area=function_input,\n+                limit_id=limit_id, reverse=reverse, getids=getids)\n     elif function_type == 'INTERSECT':\n         if function_id:\n             ret = INTERSECT(pr_min, pr_max, class_name, inp_data_type=function_input,\n",
                            "Merge branch 'belikov/feature/intersectshapely' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-21T08:51:35.000+00:00",
                            "08d188979a7168303288bc0116c6e657c0ab0556"
                        ],
                        [
                            "@@ -986,6 +986,7 @@ def find_object(class_name, spatial_query, fields, attributes, timedict_inp, all\n         return class_name, error_output, ret_res, ''\n     fields_decompose, error_output = check_fields_array(dataproduct[class_name], fields)\n     if error_output:\n+        class_name = 'ERRORMESSAGE'\n         return class_name, error_output, ret_res, ''\n     if len(fields_decompose) > 0:\n         allow_array = True\n",
                            "Merge branch 'belikov/hotfix/attributeerror' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-17T09:01:36.000+00:00",
                            "0a3136888804ecaad7c1dbefbff9c965947c0ce3"
                        ],
                        [
                            "@@ -14,7 +14,7 @@ from common.database.DBProperties import link_list_property, desc_list_property\n from euclid.config.Environment import Env\n from euclid.database.helpers import getlongattr\n from euclid.exceptions import EasDpsConfigurationError, EasDpsDataModelError\n-from euclid.util.Healpix import CONTAINS, CONTAINS_BB, INTERSECT, decodearea\n+from euclid.util.Healpix import CONTAINS, CONTAINS_BB, INTERSECT, INTERSECT_SHAPELY, decodearea\n \n from euclid.dm_bindings import dataproduct\n \n",
                            "add import",
                            "Andrey Belikov",
                            "2023-07-16T19:50:08.000+02:00",
                            "85824f55ee1139bccd0d626fb95b9ce169fa80a0"
                        ],
                        [
                            "@@ -222,6 +222,16 @@ def getspatial(class_name, inp_query, limit_id=None, limit_oid=None, getids=Fals\n     elif inp_query.startswith('CONTAINS'):\n         function_type = 'CONTAINS'\n         mod_query = inp_query.replace('CONTAINS', '')\n+    elif inp_query.startswith('INTERSECT_SHAPELY'):\n+        function_type = 'INTERSECT_SHAPELY'\n+        mod_query = inp_query.replace('INTERSECT_SHAPELY', '')\n+        start_pr = mod_query.find(\"(\")\n+        end_pr = mod_query.find(\")\")\n+        if start_pr > -1 and end_pr > -1:\n+            values_pr = mod_query[start_pr + 1:end_pr].split(\",\")\n+            pr_min = 0.01 * float(values_pr[0].strip())\n+            pr_max = 0.01 * float(values_pr[1].strip())\n+        mod_query = mod_query[end_pr + 1:]\n     elif inp_query.startswith('INTERSECT'):\n         function_type = 'INTERSECT'\n         mod_query = inp_query.replace('INTERSECT', '')\n@@ -247,6 +257,13 @@ def getspatial(class_name, inp_query, limit_id=None, limit_oid=None, getids=Fals\n                 limit_id=limit_oid, getids=getids)\n         else:\n             ret = CONTAINS_BB(class_name, inp_area=function_input, limit_id=limit_oid, getids=getids)\n+    elif function_type == 'INTERSECT_SHAPELY':\n+        if function_id:\n+            ret = INTERSECT_SHAPELY(pr_min, pr_max, class_name, inp_data_type=function_input,\n+                            inp_data_productid=function_id, limit_id=limit_id, reverse=reverse, getids=getids)\n+        else:\n+            ret = INTERSECT_SHAPELY(pr_min, pr_max, class_name, inp_area=function_input,\n+                limit_id=limit_id, reverse=reverse, getids=getids)\n     elif function_type == 'INTERSECT':\n         if function_id:\n             ret = INTERSECT(pr_min, pr_max, class_name, inp_data_type=function_input,\n",
                            "add INTERSECT_SHAPELY",
                            "Andrey Belikov",
                            "2023-07-16T19:47:59.000+02:00",
                            "4cc6acf309f9303d3131a0a16e7fe91089963127"
                        ],
                        [
                            "@@ -986,6 +986,7 @@ def find_object(class_name, spatial_query, fields, attributes, timedict_inp, all\n         return class_name, error_output, ret_res, ''\n     fields_decompose, error_output = check_fields_array(dataproduct[class_name], fields)\n     if error_output:\n+        class_name = 'ERRORMESSAGE'\n         return class_name, error_output, ret_res, ''\n     if len(fields_decompose) > 0:\n         allow_array = True\n",
                            "trigger error",
                            "Andrey Belikov",
                            "2023-07-15T17:17:58.000+02:00",
                            "b332995e9e50461481c635094c2a9bb2cd00759f"
                        ],
                        [
                            "@@ -516,12 +516,16 @@ def get_fullquery(input_class, attribute_path):\n def check_fields_array(input_class, fields):\n     \"\"\" check if fields contain arrays \"\"\"\n     output_fields = {}\n+    error = ''\n     for field in fields:\n         if not field.startswith('_') and not field.startswith('+'):\n-            cl, atr = get_fullquery(input_class, field)\n+            try:\n+                cl, atr = get_fullquery(input_class, field)\n+            except AttributeError as e:\n+                return output_fields, str(e)\n             if len(cl) > 1:\n                 output_fields[field] = [cl, atr]\n-    return output_fields\n+    return output_fields, error\n \n \n def get_dbselect(class_name, attribute, predicat, condition):\n@@ -980,7 +984,9 @@ def find_object(class_name, spatial_query, fields, attributes, timedict_inp, all\n         error_output = f'Given data product type - {class_name} - not in predefined list of data products types'\n         class_name = 'ERRORMESSAGE'\n         return class_name, error_output, ret_res, ''\n-    fields_decompose = check_fields_array(dataproduct[class_name], fields)\n+    fields_decompose, error_output = check_fields_array(dataproduct[class_name], fields)\n+    if error_output:\n+        return class_name, error_output, ret_res, ''\n     if len(fields_decompose) > 0:\n         allow_array = True\n     if allow_array:\n",
                            "Merge branch 'belikov/hotfix/attributeerror' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-15T14:48:09.000+00:00",
                            "f8d3614a107f56be95ab24fda1fc586c877178b8"
                        ],
                        [
                            "@@ -516,12 +516,16 @@ def get_fullquery(input_class, attribute_path):\n def check_fields_array(input_class, fields):\n     \"\"\" check if fields contain arrays \"\"\"\n     output_fields = {}\n+    error = ''\n     for field in fields:\n         if not field.startswith('_') and not field.startswith('+'):\n-            cl, atr = get_fullquery(input_class, field)\n+            try:\n+                cl, atr = get_fullquery(input_class, field)\n+            except AttributeError as e:\n+                return output_fields, str(e)\n             if len(cl) > 1:\n                 output_fields[field] = [cl, atr]\n-    return output_fields\n+    return output_fields, error\n \n \n def get_dbselect(class_name, attribute, predicat, condition):\n@@ -980,7 +984,9 @@ def find_object(class_name, spatial_query, fields, attributes, timedict_inp, all\n         error_output = f'Given data product type - {class_name} - not in predefined list of data products types'\n         class_name = 'ERRORMESSAGE'\n         return class_name, error_output, ret_res, ''\n-    fields_decompose = check_fields_array(dataproduct[class_name], fields)\n+    fields_decompose, error_output = check_fields_array(dataproduct[class_name], fields)\n+    if error_output:\n+        return class_name, error_output, ret_res, ''\n     if len(fields_decompose) > 0:\n         allow_array = True\n     if allow_array:\n",
                            "catch AttributeError",
                            "Andrey Belikov",
                            "2023-07-15T12:00:53.000+02:00",
                            "b618f26e99ea594f51fa393b54eb9d56f2d0f07b"
                        ],
                        [
                            "@@ -233,6 +233,7 @@ def getspatial(class_name, inp_query, limit_id=None, limit_oid=None, getids=Fals\n             pr_max = 0.01 * float(values_pr[1].strip())\n         mod_query = mod_query[end_pr + 1:]\n     function_input, function_id = getspatialinput(mod_query)\n+    print(f'getspatial {function_type} {function_id} {class_name} {function_input}')\n     if function_type == 'CONTAINS':\n         if function_id:\n             ret = CONTAINS(class_name, inp_data_type=function_input, inp_data_productid=function_id,\n@@ -1000,6 +1001,7 @@ def find_object(class_name, spatial_query, fields, attributes, timedict_inp, all\n             return class_name, error_output, ret_res, ''\n \n     t2 = time.time()\n+    print(f'Input: {class_name} {spatial_query} {other_attributes}')\n     ret_res = find_object_spatial(class_name, spatial_query, other_attributes, ret_res, timedict, fields=fields)\n     if remove_fields:\n         ret_res = modify_result(fields_original, ret_res)\n",
                            "Merge branch 'belikov/feature/intersect' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-06-21T07:25:53.000+00:00",
                            "9bb20e9cd17825bfe31766b8f073dbcf168a8ddc"
                        ]
                    ],
                    "services/general/XmlBaseEuclid.py": [
                        [
                            "@@ -835,25 +835,21 @@ class XmlBaseEuclid(HtmlBase):\n \n     def give_healpix_coors(self, res_arr, filename, jobid):\n         \"\"\" healpixes return \"\"\"\n+        from euclid.util.Healpix import GETHEALPIX_DB\n         res_xml = ''\n         res_healpix = {}\n-        c = database.cursor()\n         for ing_i in res_arr:\n             id_out = ''\n-            if ing_i.__class__.__name__ == 'Tile':\n+            id_type = ing_i.__class__.__name__\n+            if id_type == 'Tile':\n                 id_out = ing_i.TileIdentifier\n-            elif ing_i.__class__.__name__.startswith('Dpd'):\n+            elif id_type.startswith('Dpd'):\n                 id_out = ing_i.Header.ProductId.LimitedString\n             if id_out:\n                 out_hp = []\n-                sql = '''SELECT HEALPIX from AWOPER.AWEHEALPIX where DPD_PRODUCT_ID='%s' ''' % (id_out)\n-                c.execute(sql)\n-                res = c.fetchall()\n+                res = GETHEALPIX_DB(id_type, productid=id_out)\n                 if len(res) > 0:\n-                    for row in res:\n-                        out_hp.append(row[0])\n-                    res_healpix[id_out] = copy(out_hp)\n-        c.close()\n+                    res_healpix[id_out] = res\n         res_xml = 'Header.ProductId.LimitedString,HEALPIX\\n'\n         for dp_id in res_healpix:\n             hp_list_id = ''\n",
                            "Merge branch 'belikov/hotfix/givehealpix' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-21T05:44:33.000+00:00",
                            "682af14640ba52efa6412ae7d178d2d937ca0e57"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/DEST/dest_ec_usersmaster.sh": [
                        [
                            "@@ -1 +1,4 @@\n-sqlplus /nolog @scripts/dest_ec_usersmaster_create_main.sql\n+#!/bin/bash\n+DESTUSER_defpwd=`tr -dc A-Za-z0-9 < /dev/urandom | head -c 20`\n+DESTUSER_defpwd=randpwd${DESTUSER_defpwd}\n+sqlplus /nolog @scripts/dest_ec_usersmaster_create_main.sql ${DESTUSER_defpwd}\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Andrey Belikov",
                            "2023-07-19T13:00:47.000+00:00",
                            "cea8b7e397575ecdb8c5ca0801037ea629305abf"
                        ],
                        [
                            "@@ -0,0 +1 @@\n+sqlplus /nolog @scripts/dest_ec_usersmaster_create_main.sql\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ],
                        [
                            "@@ -0,0 +1 @@\n+sqlplus /nolog @scripts/dest_ec_usersmaster_create_main.sql\n",
                            "toolbox: oracle SQLs and PL/SQLs to manage users synch between different euclid database instances",
                            "Andrey Tsyganov",
                            "2023-07-12T17:49:32.000+02:00",
                            "dede8cb730f5ee51bece0be739d28043c16cdb00"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/DEST/scripts/dest_ec_usersmaster_create_main.sql": [
                        [
                            "@@ -1,10 +1,10 @@\n set verify off\n \n---get user input\n+--Get the table name from the user\n ACCEPT ec_usersmaster_dest_username CHAR DEFAULT 'EC_USERSMASTER_DEST' PROMPT 'Users master username for this instance (default:  EC_USERSMASTER_DEST):>'\n-ACCEPT ec_usersmaster_dest_username_pwd CHAR DEFAULT 'cT9ywyAaoli5UVhK5leU3EXMz54OxC' PROMPT 'password (default: cT9ywyAaoli5UVhK5leU3EXMz54OxC):>'\n+ACCEPT ec_usersmaster_dest_username_pwd CHAR DEFAULT '&1' PROMPT 'password (default: &1):>'\n ACCEPT ec_usersmaster_source_username CHAR DEFAULT 'EC_USERSMASTER_SRC' PROMPT 'Provide source users master username (default: EC_USERSMASTER_SRC):>'\n-ACCEPT ec_usersmaster_source_username_pwd CHAR DEFAULT 'NTGWRVsZSiRYxcYQ8qaSX7368jkqbT' PROMPT 'password (default: NTGWRVsZSiRYxcYQ8qaSX7368jkqbT):>'\n+ACCEPT ec_usersmaster_source_username_pwd CHAR PROMPT '&ec_usersmaster_source_username password:>'\n ACCEPT ec_usersmaster_dest_tns CHAR DEFAULT 'ECUSERS_SOURCE_TNS' PROMPT 'Source connection TNS name or full tns connection string (default:ECUSERS_SOURCE_TNS):>'\n \n connect / as sysdba\n@@ -37,7 +37,7 @@ parameters:\n description : \n     this procedure creates or alters ORACLE user for euclid AWOPER schema\n     The procedure does not insert data to the AWOPER.AWEUSERS table it is \n-    done with the call of &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.synch_users_from_source\n+    done with the call of &ec_usersmaster_dest_username.USERSMASTER_ECPKG_DEST.synch_users_from_source\n     \n */\n \n@@ -63,22 +63,22 @@ BEGIN\n         EXECUTE IMMEDIATE l_sql_create_user2;\n         EXECUTE IMMEDIATE l_sql_alter_user_pwd;\n         \n-        &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: new user is created: ' || p_username, '', l_run_date);\n+        &ec_usersmaster_dest_username.USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: new user is created: ' || p_username, '', l_run_date);\n     END IF;\n     \n     IF p_mode = 2 THEN\n         EXECUTE IMMEDIATE l_sql_alter_user_pwd;\n-        &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: alter password: ' || p_username, '', l_run_date);\n+        &ec_usersmaster_dest_username.USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: alter password: ' || p_username, '', l_run_date);\n     END IF;\n     \n     IF p_mode = 3 THEN\n         EXECUTE IMMEDIATE l_sql_alter_user_lock;\n-        &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: lock account: ' || p_username, '', l_run_date);\n+        &ec_usersmaster_dest_username.USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: lock account: ' || p_username, '', l_run_date);\n     END IF;\n \n     IF p_mode = 4 THEN\n         EXECUTE IMMEDIATE l_sql_alter_user_unlock;\n-        &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: unlock account: ' || p_username, '', l_run_date);\n+        &ec_usersmaster_dest_username.USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: unlock account: ' || p_username, '', l_run_date);\n     END IF;\n \n     COMMIT;\n@@ -89,29 +89,29 @@ GRANT EXECUTE ON sys.ecuser_manager TO &ec_usersmaster_dest_username;\n connect &ec_usersmaster_dest_username/&ec_usersmaster_dest_username_pwd\n @@dest_ec_usersmaster_create_schema_objects.sql &ec_usersmaster_source_username &ec_usersmaster_source_username_pwd &ec_usersmaster_dest_tns\n @@dest_USERSMASTER_ECPKG.sql\n-GRANT EXECUTE ON &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST TO SYS;\n+GRANT EXECUTE ON EC_USERSMASTER_DEST.USERSMASTER_ECPKG_DEST TO SYS;\n \n disconnect\n connect  / as sysdba\n ALTER PROCEDURE sys.ecuser_manager COMPILE;\n-ALTER PACKAGE &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST COMPILE PACKAGE; \n-ALTER PACKAGE &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST COMPILE BODY; \n+ALTER PACKAGE EC_USERSMASTER_DEST.USERSMASTER_ECPKG_DEST COMPILE PACKAGE; \n+ALTER PACKAGE EC_USERSMASTER_DEST.USERSMASTER_ECPKG_DEST COMPILE BODY; \n \n disconnect\n connect &ec_usersmaster_dest_username/&ec_usersmaster_dest_username_pwd\n \n BEGIN\n     dbms_scheduler.create_job (\n-      job_name => '&ec_usersmaster_dest_username..EUCLID_USERS_SYNCH_FROM_SOURCE'\n+      job_name => '&ec_usersmaster_dest_username.EUCLID_USERS_SYNCH_FROM_SOURCE'\n       ,job_type => 'PLSQL_BLOCK'\n-      ,job_action => 'BEGIN &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.synch_users_from_source; END; '\n+      ,job_action => 'BEGIN &ec_usersmaster_dest_username.USERSMASTER_ECPKG_DEST.synch_users_from_source; END; '\n       ,start_date => SYSDATE\n       ,repeat_interval => 'FREQ=MINUTELY;INTERVAL=30;'\n       ,enabled => TRUE\n       ,end_date => NULL\n       ,job_class => 'DEFAULT_JOB_CLASS'\n       ,comments => 'runs synchronisation between soruce EUCLID users tables and current destination');\n-    dbms_scheduler.enable('&ec_usersmaster_dest_username..EUCLID_USERS_SYNCH_FROM_SOURCE');      \n+    dbms_scheduler.enable('&ec_usersmaster_dest_username.EUCLID_USERS_SYNCH_FROM_SOURCE');      \n END;\n /\n \n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Andrey Belikov",
                            "2023-07-19T13:00:47.000+00:00",
                            "cea8b7e397575ecdb8c5ca0801037ea629305abf"
                        ],
                        [
                            "@@ -0,0 +1,120 @@\n+set verify off\n+\n+--get user input\n+ACCEPT ec_usersmaster_dest_username CHAR DEFAULT 'EC_USERSMASTER_DEST' PROMPT 'Users master username for this instance (default:  EC_USERSMASTER_DEST):>'\n+ACCEPT ec_usersmaster_dest_username_pwd CHAR DEFAULT 'cT9ywyAaoli5UVhK5leU3EXMz54OxC' PROMPT 'password (default: cT9ywyAaoli5UVhK5leU3EXMz54OxC):>'\n+ACCEPT ec_usersmaster_source_username CHAR DEFAULT 'EC_USERSMASTER_SRC' PROMPT 'Provide source users master username (default: EC_USERSMASTER_SRC):>'\n+ACCEPT ec_usersmaster_source_username_pwd CHAR DEFAULT 'NTGWRVsZSiRYxcYQ8qaSX7368jkqbT' PROMPT 'password (default: NTGWRVsZSiRYxcYQ8qaSX7368jkqbT):>'\n+ACCEPT ec_usersmaster_dest_tns CHAR DEFAULT 'ECUSERS_SOURCE_TNS' PROMPT 'Source connection TNS name or full tns connection string (default:ECUSERS_SOURCE_TNS):>'\n+\n+connect / as sysdba\n+@@dest_ec_usersmaster_create_user.sql &ec_usersmaster_dest_username &ec_usersmaster_dest_username_pwd\n+\n+--AUDIT INSERT, UPDATE, DELETE ON AWOPER.AWEUSERS BY ACCESS;\n+--AUDIT INSERT, UPDATE, DELETE ON AWOPER.AWEPROJECTS BY ACCESS;\n+--AUDIT INSERT, UPDATE, DELETE ON AWOPER.AWEPROJECTUSERS BY ACCESS;\n+--AUDIT INSERT, UPDATE, DELETE ON AWOPER.AWEEUCLIDUSERS BY ACCESS;\n+\n+CREATE OR REPLACE PROCEDURE SYS.ecuser_manager (\n+      p_uuid       IN VARCHAR2\n+    , p_mode       IN NUMBER\n+    , p_username   IN VARCHAR2\n+    , p_user_pwd   IN VARCHAR2\n+    , p_ec_user_id IN NUMBER\n+    ) \n+AS\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters:\n+    p_uuid  - unique uuid to write message into the log. The caller must have it already. \n+    p_mode  - modes of the procedure:\n+                1: CREATE USER\n+                2: ALTER USER\n+                3: LOCK USER\n+                4: UNLOCK USER\n+                \n+description : \n+    this procedure creates or alters ORACLE user for euclid AWOPER schema\n+    The procedure does not insert data to the AWOPER.AWEUSERS table it is \n+    done with the call of &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.synch_users_from_source\n+    \n+*/\n+\n+    PRAGMA AUTONOMOUS_TRANSACTION;\n+    l_sql_create_user1      VARCHAR2(4000);\n+    l_sql_create_user2      VARCHAR2(4000);\n+    l_sql_create_user3      VARCHAR2(4000);\n+    l_sql_alter_user_pwd    VARCHAR2(4000);\n+    l_sql_alter_user_lock   VARCHAR2(4000);\n+    l_sql_alter_user_unlock VARCHAR2(4000);\n+    l_run_date              DATE := SYSDATE;\n+\n+BEGIN\n+    l_sql_create_user1      := 'CREATE USER '     || p_username || ' PROFILE AWNORMAL IDENTIFIED BY tmppwd DEFAULT TABLESPACE \"USERS\"';\n+    l_sql_create_user2      := 'GRANT AWUSER TO ' || p_username;\n+\n+    l_sql_alter_user_pwd    := 'ALTER USER '  || p_username || ' IDENTIFIED BY VALUES ''' || p_user_pwd || '''';\n+    l_sql_alter_user_lock   := 'ALTER USER '  || p_username || ' ACCOUNT LOCK';\n+    l_sql_alter_user_unlock := 'ALTER USER '  || p_username || ' ACCOUNT UNLOCK';\n+    \n+    IF p_mode = 1 THEN\n+        EXECUTE IMMEDIATE l_sql_create_user1;\n+        EXECUTE IMMEDIATE l_sql_create_user2;\n+        EXECUTE IMMEDIATE l_sql_alter_user_pwd;\n+        \n+        &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: new user is created: ' || p_username, '', l_run_date);\n+    END IF;\n+    \n+    IF p_mode = 2 THEN\n+        EXECUTE IMMEDIATE l_sql_alter_user_pwd;\n+        &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: alter password: ' || p_username, '', l_run_date);\n+    END IF;\n+    \n+    IF p_mode = 3 THEN\n+        EXECUTE IMMEDIATE l_sql_alter_user_lock;\n+        &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: lock account: ' || p_username, '', l_run_date);\n+    END IF;\n+\n+    IF p_mode = 4 THEN\n+        EXECUTE IMMEDIATE l_sql_alter_user_unlock;\n+        &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: unlock account: ' || p_username, '', l_run_date);\n+    END IF;\n+\n+    COMMIT;\n+END;\n+/\n+GRANT EXECUTE ON sys.ecuser_manager TO &ec_usersmaster_dest_username;\n+\n+connect &ec_usersmaster_dest_username/&ec_usersmaster_dest_username_pwd\n+@@dest_ec_usersmaster_create_schema_objects.sql &ec_usersmaster_source_username &ec_usersmaster_source_username_pwd &ec_usersmaster_dest_tns\n+@@dest_USERSMASTER_ECPKG.sql\n+GRANT EXECUTE ON &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST TO SYS;\n+\n+disconnect\n+connect  / as sysdba\n+ALTER PROCEDURE sys.ecuser_manager COMPILE;\n+ALTER PACKAGE &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST COMPILE PACKAGE; \n+ALTER PACKAGE &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST COMPILE BODY; \n+\n+disconnect\n+connect &ec_usersmaster_dest_username/&ec_usersmaster_dest_username_pwd\n+\n+BEGIN\n+    dbms_scheduler.create_job (\n+      job_name => '&ec_usersmaster_dest_username..EUCLID_USERS_SYNCH_FROM_SOURCE'\n+      ,job_type => 'PLSQL_BLOCK'\n+      ,job_action => 'BEGIN &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.synch_users_from_source; END; '\n+      ,start_date => SYSDATE\n+      ,repeat_interval => 'FREQ=MINUTELY;INTERVAL=30;'\n+      ,enabled => TRUE\n+      ,end_date => NULL\n+      ,job_class => 'DEFAULT_JOB_CLASS'\n+      ,comments => 'runs synchronisation between soruce EUCLID users tables and current destination');\n+    dbms_scheduler.enable('&ec_usersmaster_dest_username..EUCLID_USERS_SYNCH_FROM_SOURCE');      \n+END;\n+/\n+\n+disconnect\n+exit\n+\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ],
                        [
                            "@@ -0,0 +1,120 @@\n+set verify off\n+\n+--get user input\n+ACCEPT ec_usersmaster_dest_username CHAR DEFAULT 'EC_USERSMASTER_DEST' PROMPT 'Users master username for this instance (default:  EC_USERSMASTER_DEST):>'\n+ACCEPT ec_usersmaster_dest_username_pwd CHAR DEFAULT 'cT9ywyAaoli5UVhK5leU3EXMz54OxC' PROMPT 'password (default: cT9ywyAaoli5UVhK5leU3EXMz54OxC):>'\n+ACCEPT ec_usersmaster_source_username CHAR DEFAULT 'EC_USERSMASTER_SRC' PROMPT 'Provide source users master username (default: EC_USERSMASTER_SRC):>'\n+ACCEPT ec_usersmaster_source_username_pwd CHAR DEFAULT 'NTGWRVsZSiRYxcYQ8qaSX7368jkqbT' PROMPT 'password (default: NTGWRVsZSiRYxcYQ8qaSX7368jkqbT):>'\n+ACCEPT ec_usersmaster_dest_tns CHAR DEFAULT 'ECUSERS_SOURCE_TNS' PROMPT 'Source connection TNS name or full tns connection string (default:ECUSERS_SOURCE_TNS):>'\n+\n+connect / as sysdba\n+@@dest_ec_usersmaster_create_user.sql &ec_usersmaster_dest_username &ec_usersmaster_dest_username_pwd\n+\n+--AUDIT INSERT, UPDATE, DELETE ON AWOPER.AWEUSERS BY ACCESS;\n+--AUDIT INSERT, UPDATE, DELETE ON AWOPER.AWEPROJECTS BY ACCESS;\n+--AUDIT INSERT, UPDATE, DELETE ON AWOPER.AWEPROJECTUSERS BY ACCESS;\n+--AUDIT INSERT, UPDATE, DELETE ON AWOPER.AWEEUCLIDUSERS BY ACCESS;\n+\n+CREATE OR REPLACE PROCEDURE SYS.ecuser_manager (\n+      p_uuid       IN VARCHAR2\n+    , p_mode       IN NUMBER\n+    , p_username   IN VARCHAR2\n+    , p_user_pwd   IN VARCHAR2\n+    , p_ec_user_id IN NUMBER\n+    ) \n+AS\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters:\n+    p_uuid  - unique uuid to write message into the log. The caller must have it already. \n+    p_mode  - modes of the procedure:\n+                1: CREATE USER\n+                2: ALTER USER\n+                3: LOCK USER\n+                4: UNLOCK USER\n+                \n+description : \n+    this procedure creates or alters ORACLE user for euclid AWOPER schema\n+    The procedure does not insert data to the AWOPER.AWEUSERS table it is \n+    done with the call of &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.synch_users_from_source\n+    \n+*/\n+\n+    PRAGMA AUTONOMOUS_TRANSACTION;\n+    l_sql_create_user1      VARCHAR2(4000);\n+    l_sql_create_user2      VARCHAR2(4000);\n+    l_sql_create_user3      VARCHAR2(4000);\n+    l_sql_alter_user_pwd    VARCHAR2(4000);\n+    l_sql_alter_user_lock   VARCHAR2(4000);\n+    l_sql_alter_user_unlock VARCHAR2(4000);\n+    l_run_date              DATE := SYSDATE;\n+\n+BEGIN\n+    l_sql_create_user1      := 'CREATE USER '     || p_username || ' PROFILE AWNORMAL IDENTIFIED BY tmppwd DEFAULT TABLESPACE \"USERS\"';\n+    l_sql_create_user2      := 'GRANT AWUSER TO ' || p_username;\n+\n+    l_sql_alter_user_pwd    := 'ALTER USER '  || p_username || ' IDENTIFIED BY VALUES ''' || p_user_pwd || '''';\n+    l_sql_alter_user_lock   := 'ALTER USER '  || p_username || ' ACCOUNT LOCK';\n+    l_sql_alter_user_unlock := 'ALTER USER '  || p_username || ' ACCOUNT UNLOCK';\n+    \n+    IF p_mode = 1 THEN\n+        EXECUTE IMMEDIATE l_sql_create_user1;\n+        EXECUTE IMMEDIATE l_sql_create_user2;\n+        EXECUTE IMMEDIATE l_sql_alter_user_pwd;\n+        \n+        &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: new user is created: ' || p_username, '', l_run_date);\n+    END IF;\n+    \n+    IF p_mode = 2 THEN\n+        EXECUTE IMMEDIATE l_sql_alter_user_pwd;\n+        &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: alter password: ' || p_username, '', l_run_date);\n+    END IF;\n+    \n+    IF p_mode = 3 THEN\n+        EXECUTE IMMEDIATE l_sql_alter_user_lock;\n+        &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: lock account: ' || p_username, '', l_run_date);\n+    END IF;\n+\n+    IF p_mode = 4 THEN\n+        EXECUTE IMMEDIATE l_sql_alter_user_unlock;\n+        &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: unlock account: ' || p_username, '', l_run_date);\n+    END IF;\n+\n+    COMMIT;\n+END;\n+/\n+GRANT EXECUTE ON sys.ecuser_manager TO &ec_usersmaster_dest_username;\n+\n+connect &ec_usersmaster_dest_username/&ec_usersmaster_dest_username_pwd\n+@@dest_ec_usersmaster_create_schema_objects.sql &ec_usersmaster_source_username &ec_usersmaster_source_username_pwd &ec_usersmaster_dest_tns\n+@@dest_USERSMASTER_ECPKG.sql\n+GRANT EXECUTE ON &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST TO SYS;\n+\n+disconnect\n+connect  / as sysdba\n+ALTER PROCEDURE sys.ecuser_manager COMPILE;\n+ALTER PACKAGE &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST COMPILE PACKAGE; \n+ALTER PACKAGE &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST COMPILE BODY; \n+\n+disconnect\n+connect &ec_usersmaster_dest_username/&ec_usersmaster_dest_username_pwd\n+\n+BEGIN\n+    dbms_scheduler.create_job (\n+      job_name => '&ec_usersmaster_dest_username..EUCLID_USERS_SYNCH_FROM_SOURCE'\n+      ,job_type => 'PLSQL_BLOCK'\n+      ,job_action => 'BEGIN &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.synch_users_from_source; END; '\n+      ,start_date => SYSDATE\n+      ,repeat_interval => 'FREQ=MINUTELY;INTERVAL=30;'\n+      ,enabled => TRUE\n+      ,end_date => NULL\n+      ,job_class => 'DEFAULT_JOB_CLASS'\n+      ,comments => 'runs synchronisation between soruce EUCLID users tables and current destination');\n+    dbms_scheduler.enable('&ec_usersmaster_dest_username..EUCLID_USERS_SYNCH_FROM_SOURCE');      \n+END;\n+/\n+\n+disconnect\n+exit\n+\n",
                            "toolbox: oracle SQLs and PL/SQLs to manage users synch between different euclid database instances",
                            "Andrey Tsyganov",
                            "2023-07-12T17:49:32.000+02:00",
                            "dede8cb730f5ee51bece0be739d28043c16cdb00"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/SOURCE/scripts/source_ec_usersmaster_create_main.sql": [
                        [
                            "@@ -2,7 +2,7 @@ set verify off\n \n --get user input\n ACCEPT ec_usersmaster_source_username CHAR DEFAULT 'EC_USERSMASTER_SRC' PROMPT 'Provide users master username (default: EC_USERSMASTER_SRC):>'\n-ACCEPT ec_usersmaster_source_username_pwd CHAR DEFAULT 'NTGWRVsZSiRYxcYQ8qaSX7368jkqbT' PROMPT 'password (default: NTGWRVsZSiRYxcYQ8qaSX7368jkqbT):>'\n+ACCEPT ec_usersmaster_source_username_pwd CHAR DEFAULT '&1' PROMPT 'password (default: &1):>'\n \n connect / as sysdba;\n @@source_ec_usersmaster_create_user.sql &ec_usersmaster_source_username &ec_usersmaster_source_username_pwd\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Andrey Belikov",
                            "2023-07-19T13:00:47.000+00:00",
                            "cea8b7e397575ecdb8c5ca0801037ea629305abf"
                        ],
                        [
                            "@@ -0,0 +1,31 @@\n+set verify off\n+\n+--get user input\n+ACCEPT ec_usersmaster_source_username CHAR DEFAULT 'EC_USERSMASTER_SRC' PROMPT 'Provide users master username (default: EC_USERSMASTER_SRC):>'\n+ACCEPT ec_usersmaster_source_username_pwd CHAR DEFAULT 'NTGWRVsZSiRYxcYQ8qaSX7368jkqbT' PROMPT 'password (default: NTGWRVsZSiRYxcYQ8qaSX7368jkqbT):>'\n+\n+connect / as sysdba;\n+@@source_ec_usersmaster_create_user.sql &ec_usersmaster_source_username &ec_usersmaster_source_username_pwd\n+disconnect;\n+\n+connect &ec_usersmaster_source_username/&ec_usersmaster_source_username_pwd;\n+@@source_ec_usersmaster_create_schema_objects.sql &ec_usersmaster_source_username\n+@@source_USERSMASTER_ECPKG.sql\n+\n+BEGIN\n+    dbms_scheduler.create_job (\n+        job_name => '&ec_usersmaster_source_username..EUCLID_USERS_PRE_REPLICATION'\n+        ,job_type => 'PLSQL_BLOCK'\n+        ,job_action => 'BEGIN &ec_usersmaster_source_username..USERSMASTER_ECPKG_SOURCE.create_synch_tables_replica; END; '\n+        ,start_date => SYSDATE\n+        ,repeat_interval => 'FREQ=MINUTELY;INTERVAL=30;'\n+        ,enabled => TRUE\n+        ,end_date => NULL\n+        ,job_class => 'DEFAULT_JOB_CLASS'\n+        ,comments => 'Creates tables EUCLID users information replicas in case of any changes in the tables');\n+    dbms_scheduler.enable('&ec_usersmaster_source_username..EUCLID_USERS_PRE_REPLICATION');      \n+END;\n+/\n+\n+disconnect;\n+exit;\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ],
                        [
                            "@@ -0,0 +1,31 @@\n+set verify off\n+\n+--get user input\n+ACCEPT ec_usersmaster_source_username CHAR DEFAULT 'EC_USERSMASTER_SRC' PROMPT 'Provide users master username (default: EC_USERSMASTER_SRC):>'\n+ACCEPT ec_usersmaster_source_username_pwd CHAR DEFAULT 'NTGWRVsZSiRYxcYQ8qaSX7368jkqbT' PROMPT 'password (default: NTGWRVsZSiRYxcYQ8qaSX7368jkqbT):>'\n+\n+connect / as sysdba;\n+@@source_ec_usersmaster_create_user.sql &ec_usersmaster_source_username &ec_usersmaster_source_username_pwd\n+disconnect;\n+\n+connect &ec_usersmaster_source_username/&ec_usersmaster_source_username_pwd;\n+@@source_ec_usersmaster_create_schema_objects.sql &ec_usersmaster_source_username\n+@@source_USERSMASTER_ECPKG.sql\n+\n+BEGIN\n+    dbms_scheduler.create_job (\n+        job_name => '&ec_usersmaster_source_username..EUCLID_USERS_PRE_REPLICATION'\n+        ,job_type => 'PLSQL_BLOCK'\n+        ,job_action => 'BEGIN &ec_usersmaster_source_username..USERSMASTER_ECPKG_SOURCE.create_synch_tables_replica; END; '\n+        ,start_date => SYSDATE\n+        ,repeat_interval => 'FREQ=MINUTELY;INTERVAL=30;'\n+        ,enabled => TRUE\n+        ,end_date => NULL\n+        ,job_class => 'DEFAULT_JOB_CLASS'\n+        ,comments => 'Creates tables EUCLID users information replicas in case of any changes in the tables');\n+    dbms_scheduler.enable('&ec_usersmaster_source_username..EUCLID_USERS_PRE_REPLICATION');      \n+END;\n+/\n+\n+disconnect;\n+exit;\n",
                            "toolbox: oracle SQLs and PL/SQLs to manage users synch between different euclid database instances",
                            "Andrey Tsyganov",
                            "2023-07-12T17:49:32.000+02:00",
                            "dede8cb730f5ee51bece0be739d28043c16cdb00"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/SOURCE/source_ec_usersmaster.sh": [
                        [
                            "@@ -1 +1,5 @@\n-sqlplus /nolog @scripts/source_ec_usersmaster_create_main.sql\n+#!/bin/bash\n+SRCUSER_defpwd=`tr -dc A-Za-z0-9 < /dev/urandom | head -c 20`\n+SRCUSER_defpwd=randpwd${SRCUSER_defpwd}\n+sqlplus /nolog @scripts/source_ec_usersmaster_create_main.sql $SRCUSER_defpwd\n+\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Andrey Belikov",
                            "2023-07-19T13:00:47.000+00:00",
                            "cea8b7e397575ecdb8c5ca0801037ea629305abf"
                        ],
                        [
                            "@@ -0,0 +1 @@\n+sqlplus /nolog @scripts/source_ec_usersmaster_create_main.sql\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ],
                        [
                            "@@ -0,0 +1 @@\n+sqlplus /nolog @scripts/source_ec_usersmaster_create_main.sql\n",
                            "toolbox: oracle SQLs and PL/SQLs to manage users synch between different euclid database instances",
                            "Andrey Tsyganov",
                            "2023-07-12T17:49:32.000+02:00",
                            "dede8cb730f5ee51bece0be739d28043c16cdb00"
                        ]
                    ],
                    "services/intersect/IntersectShapely.py": [
                        [
                            "@@ -117,7 +117,7 @@ class IntersectShapely(RestGeneric):\n                 self.errors.append(str(e))\n             for object_id, footprint in overlap.items():\n                 Message(f'found {footprint.dpd_product_id} with overlap {footprint.overlap}')\n-                result[self.class_name][productid] = footprint.overlap\n+                result[self.class_name][footprint.dpd_product_id] = footprint.overlap\n             result['total'] = {self.class_name: sum(result[self.class_name].values())}\n             Message(f'intersect shapely result {result}')\n \n",
                            "Merge branch 'drb/bugfix/incorrect-pruductid-used' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-07-14T13:27:03.000+00:00",
                            "0022d5df5af2abd3191026dd88e483d4fefa131d"
                        ],
                        [
                            "@@ -112,14 +112,12 @@ class IntersectShapely(RestGeneric):\n             cls = dataproduct[self.class_name]\n             result[self.class_name] = {}\n             try:\n-                overlap, _ = intersect_shapely(self.input_area, self.class_name)\n+                overlap, _ = intersect_shapely(self.input_area, self.class_name, self.p1, self.p2)\n             except Exception as e:\n                 self.errors.append(str(e))\n             for object_id, footprint in overlap.items():\n-                overlap = self.calculateOverlap(input_area_polygon, footprint.footprint)\n-                Message(f'found {footprint.dpd_product_id} with overlap {overlap}')\n-                if overlap >= self.p1 and overlap <= self.p2:\n-                    result[self.class_name][productid] = overlap\n+                Message(f'found {footprint.dpd_product_id} with overlap {footprint.overlap}')\n+                result[self.class_name][productid] = footprint.overlap\n             result['total'] = {self.class_name: sum(result[self.class_name].values())}\n             Message(f'intersect shapely result {result}')\n \n",
                            "Merge branch 'drb/bugfix/check-min-and-max-overlap-low-level' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-07-11T13:25:07.000+00:00",
                            "479bde684d500f96f26c43f4ead2bba6c337afed"
                        ],
                        [
                            "@@ -112,14 +112,12 @@ class IntersectShapely(RestGeneric):\n             cls = dataproduct[self.class_name]\n             result[self.class_name] = {}\n             try:\n-                overlap, _ = intersect_shapely(self.input_area, self.class_name)\n+                overlap, _ = intersect_shapely(self.input_area, self.class_name, self.p1, self.p2)\n             except Exception as e:\n                 self.errors.append(str(e))\n             for object_id, footprint in overlap.items():\n-                overlap = self.calculateOverlap(input_area_polygon, footprint.footprint)\n-                Message(f'found {footprint.dpd_product_id} with overlap {overlap}')\n-                if overlap >= self.p1 and overlap <= self.p2:\n-                    result[self.class_name][productid] = overlap\n+                Message(f'found {footprint.dpd_product_id} with overlap {footprint.overlap}')\n+                result[self.class_name][productid] = footprint.overlap\n             result['total'] = {self.class_name: sum(result[self.class_name].values())}\n             Message(f'intersect shapely result {result}')\n \n",
                            "Calculate the overlap and check the minimum and maximum overlap in the low level intersect.",
                            "Danny Boxhoorn",
                            "2023-07-11T14:58:13.000+02:00",
                            "39a015c147427087c451286a6755a6ab7b5cda70"
                        ],
                        [
                            "@@ -116,10 +116,8 @@ class IntersectShapely(RestGeneric):\n             except Exception as e:\n                 self.errors.append(str(e))\n             for object_id, footprint in overlap.items():\n-                obj = cls(object_id=object_id)\n-                productid = obj.Header.ProductId.LimitedString\n-                overlap = self.calculateOverlap(input_area_polygon, footprint)\n-                Message(f'found {productid} with overlap {overlap}')\n+                overlap = self.calculateOverlap(input_area_polygon, footprint.footprint)\n+                Message(f'found {footprint.dpd_product_id} with overlap {overlap}')\n                 if overlap >= self.p1 and overlap <= self.p2:\n                     result[self.class_name][productid] = overlap\n             result['total'] = {self.class_name: sum(result[self.class_name].values())}\n",
                            "Merge branch 'drb/feature/productid-in-intersect-shapely-result' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-07-11T10:33:57.000+00:00",
                            "c59d03bb25ea17be0887d423a7c25bf4fd86e5e6"
                        ],
                        [
                            "@@ -116,10 +116,8 @@ class IntersectShapely(RestGeneric):\n             except Exception as e:\n                 self.errors.append(str(e))\n             for object_id, footprint in overlap.items():\n-                obj = cls(object_id=object_id)\n-                productid = obj.Header.ProductId.LimitedString\n-                overlap = self.calculateOverlap(input_area_polygon, footprint)\n-                Message(f'found {productid} with overlap {overlap}')\n+                overlap = self.calculateOverlap(input_area_polygon, footprint.footprint)\n+                Message(f'found {footprint.dpd_product_id} with overlap {overlap}')\n                 if overlap >= self.p1 and overlap <= self.p2:\n                     result[self.class_name][productid] = overlap\n             result['total'] = {self.class_name: sum(result[self.class_name].values())}\n",
                            "Include the ProductId in the intersect_shapely result to avoid instantiating data products.",
                            "Danny Boxhoorn",
                            "2023-07-11T12:15:32.000+02:00",
                            "09a4b0186a6272308edf1d7a2a549a2f57975db6"
                        ],
                        [
                            "@@ -12,6 +12,8 @@\n  \"p2\":1.0\n }\n \n+p1 minimal overlap, p2 maximal overlap\n+\n (2) Call\n \n curl -k  -u <username>:<password> -X GET --data-binary @area=intersect.json \"https://eas-dps-rest-hotfix.dev.euclid.astro.rug.nl/IntersectShapely?PROJECT=TEST\"\n@@ -47,6 +49,10 @@ class IntersectShapely(RestGeneric):\n \n     \"\"\" service layer implementation for intersect shapely \"\"\"\n \n+    # default values for p1 and p2\n+    default_p1 = 0.01\n+    default_p2 = 1.0\n+\n     def __init__(self, args):\n         ''' initialize '''\n         # base class initialization\n@@ -56,8 +62,9 @@ class IntersectShapely(RestGeneric):\n         else:\n             self.input_area = self.getArg('input_area')\n             self.class_name = self.getArg('class_name')\n-            self.p1 = self.getArg('p1', 0)\n-            self.p2 = self.getArg('p2', 0)\n+            # minimal (p1) and maximum (p2) overlap\n+            self.p1 = self.getArg('p1', self.default_p1)\n+            self.p2 = self.getArg('p2', self.default_p2)\n \n     def handleInputJson(self, area):\n         \"\"\" handle the input json area \"\"\"\n@@ -112,7 +119,9 @@ class IntersectShapely(RestGeneric):\n                 obj = cls(object_id=object_id)\n                 productid = obj.Header.ProductId.LimitedString\n                 overlap = self.calculateOverlap(input_area_polygon, footprint)\n-                result[self.class_name][productid] = overlap\n+                Message(f'found {productid} with overlap {overlap}')\n+                if overlap >= self.p1 and overlap <= self.p2:\n+                    result[self.class_name][productid] = overlap\n             result['total'] = {self.class_name: sum(result[self.class_name].values())}\n             Message(f'intersect shapely result {result}')\n \n",
                            "Merge branch 'wjv/bugfix/intersect_shapely_use_p1_and_p2' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-10T13:37:54.000+00:00",
                            "ab1db199df7634ca4d12eef9bd0f2a31dd6b8f7a"
                        ],
                        [
                            "@@ -12,6 +12,8 @@\n  \"p2\":1.0\n }\n \n+p1 minimal overlap, p2 maximal overlap\n+\n (2) Call\n \n curl -k  -u <username>:<password> -X GET --data-binary @area=intersect.json \"https://eas-dps-rest-hotfix.dev.euclid.astro.rug.nl/IntersectShapely?PROJECT=TEST\"\n@@ -47,6 +49,10 @@ class IntersectShapely(RestGeneric):\n \n     \"\"\" service layer implementation for intersect shapely \"\"\"\n \n+    # default values for p1 and p2\n+    default_p1 = 0.01\n+    default_p2 = 1.0\n+\n     def __init__(self, args):\n         ''' initialize '''\n         # base class initialization\n@@ -56,8 +62,9 @@ class IntersectShapely(RestGeneric):\n         else:\n             self.input_area = self.getArg('input_area')\n             self.class_name = self.getArg('class_name')\n-            self.p1 = self.getArg('p1', 0)\n-            self.p2 = self.getArg('p2', 0)\n+            # minimal (p1) and maximum (p2) overlap\n+            self.p1 = self.getArg('p1', self.default_p1)\n+            self.p2 = self.getArg('p2', self.default_p2)\n \n     def handleInputJson(self, area):\n         \"\"\" handle the input json area \"\"\"\n@@ -112,7 +119,9 @@ class IntersectShapely(RestGeneric):\n                 obj = cls(object_id=object_id)\n                 productid = obj.Header.ProductId.LimitedString\n                 overlap = self.calculateOverlap(input_area_polygon, footprint)\n-                result[self.class_name][productid] = overlap\n+                Message(f'found {productid} with overlap {overlap}')\n+                if overlap >= self.p1 and overlap <= self.p2:\n+                    result[self.class_name][productid] = overlap\n             result['total'] = {self.class_name: sum(result[self.class_name].values())}\n             Message(f'intersect shapely result {result}')\n \n",
                            "use p1 and p2 to limit the intersected results",
                            "Willem-Jan Vriend",
                            "2023-07-10T15:18:24.000+02:00",
                            "efb9c5744489e954fdc45baddc777fce843993f4"
                        ]
                    ],
                    "services/dbview/HtmlQueryResult.py": [
                        [
                            "@@ -208,7 +208,11 @@ function sendSAMP(conn, tableURL) {\n \n     def get_date_sorter_javascript(self):\n         \"\"\" table query result has one exta column Lineage view, so all data columns start one index higher \"\"\"\n-        return super().get_date_sorter_javascript(col_start=1)\n+        if self.renderer.dataobject:\n+            col_start = 1\n+        else:\n+            col_start = 0\n+        return super().get_date_sorter_javascript(col_start=col_start)\n \n     def get_header(self):\n         \"\"\" return html which is meant for euclid specific header \"\"\"\n",
                            "Merge branch 'wjv/bugfix/dbview_only_for_dataobjects_the_lineage_link_is_inserted' into 'develop'",
                            "Andrey Belikov",
                            "2023-07-13T13:55:42.000+00:00",
                            "7b5d2ac57e91d0aef7a12e8b2ab0c3537ba14fdd"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/DEST/dest_ec_usersmaster_changepwd.sql": [
                        [
                            "@@ -0,0 +1,7 @@\n+set verify off\n+--get user input\n+ACCEPT ec_usersmaster_dest_username CHAR DEFAULT 'EC_USERSMASTER_SRC' PROMPT 'Provide users master username (default: EC_USERSMASTER_SRC):>'\n+ACCEPT ec_usersmaster_dest_username_pwd CHAR DEFAULT 'cT9ywyAaoli5UVhK5leU3EXMz54OxC' PROMPT 'password (default: cT9ywyAaoli5UVhK5leU3EXMz54OxC):>'\n+\n+ALTER USER &ec_usersmaster_dest_username IDENTIFIED BY &ec_usersmaster_dest_username_pwd;\n+\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/DEST/dest_ec_usersmaster_updatedblink.sql": [
                        [
                            "@@ -0,0 +1,28 @@\n+set verify off\n+\n+--get user input\n+ACCEPT ec_usersmaster_dest_username CHAR DEFAULT 'EC_USERSMASTER_DEST' PROMPT 'Users master username for this instance (default:  EC_USERSMASTER_DEST):>'\n+ACCEPT ec_usersmaster_dest_username_pwd CHAR DEFAULT 'cT9ywyAaoli5UVhK5leU3EXMz54OxC' PROMPT 'password (default: cT9ywyAaoli5UVhK5leU3EXMz54OxC):>'\n+ACCEPT ec_usersmaster_source_username CHAR DEFAULT 'EC_USERSMASTER_SRC' PROMPT 'Provide source users master username (default: EC_USERSMASTER_SRC):>'\n+ACCEPT ec_usersmaster_source_username_pwd CHAR DEFAULT 'NTGWRVsZSiRYxcYQ8qaSX7368jkqbT' PROMPT 'password (default: NTGWRVsZSiRYxcYQ8qaSX7368jkqbT):>'\n+ACCEPT ec_usersmaster_dest_tns CHAR DEFAULT 'ECUSERS_SOURCE_TNS' PROMPT 'Source connection TNS name or full tns connection string (default:ECUSERS_SOURCE_TNS):>'\n+\n+connect &ec_usersmaster_dest_username/&ec_usersmaster_dest_username_pwd\n+\n+DROP DATABASE LINK users_source_dblink;\n+CREATE DATABASE LINK users_source_dblink \n+    CONNECT TO &ec_usersmaster_source_username IDENTIFIED BY &ec_usersmaster_source_username_pwd USING '&ec_usersmaster_dest_tns';\n+    \n+CREATE OR REPLACE synonym SOURCE_REPL_LOG FOR REPL_LOG@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_AWEUSERS FOR REPL_AWEUSERS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_AWEPROJECTS FOR REPL_AWEPROJECTS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_AWEPROJECTUSERS FOR REPL_AWEPROJECTUSERS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_AWEEUCLIDUSERS FOR REPL_AWEEUCLIDUSERS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_ORACLEUSERS FOR REPL_ORACLEUSERS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_USERSSTOPLIST FOR REPL_USERSSTOPLIST@users_source_dblink;\n+\n+ALTER PACKAGE &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST COMPILE PACKAGE; \n+ALTER PACKAGE &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST COMPILE BODY; \n+\n+disconnect;\n+exit;\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ],
                        [
                            "@@ -1,10 +1,28 @@\n set verify off\n \n --get user input\n+ACCEPT ec_usersmaster_dest_username CHAR DEFAULT 'EC_USERSMASTER_DEST' PROMPT 'Users master username for this instance (default:  EC_USERSMASTER_DEST):>'\n+ACCEPT ec_usersmaster_dest_username_pwd CHAR DEFAULT 'cT9ywyAaoli5UVhK5leU3EXMz54OxC' PROMPT 'password (default: cT9ywyAaoli5UVhK5leU3EXMz54OxC):>'\n ACCEPT ec_usersmaster_source_username CHAR DEFAULT 'EC_USERSMASTER_SRC' PROMPT 'Provide source users master username (default: EC_USERSMASTER_SRC):>'\n ACCEPT ec_usersmaster_source_username_pwd CHAR DEFAULT 'NTGWRVsZSiRYxcYQ8qaSX7368jkqbT' PROMPT 'password (default: NTGWRVsZSiRYxcYQ8qaSX7368jkqbT):>'\n ACCEPT ec_usersmaster_dest_tns CHAR DEFAULT 'ECUSERS_SOURCE_TNS' PROMPT 'Source connection TNS name or full tns connection string (default:ECUSERS_SOURCE_TNS):>'\n \n+connect &ec_usersmaster_dest_username/&ec_usersmaster_dest_username_pwd\n+\n DROP DATABASE LINK users_source_dblink;\n CREATE DATABASE LINK users_source_dblink \n-    CONNECT TO &ec_usersmaster_source_username IDENTIFIED BY &ec_usersmaster_source_username_pwd USING '&ec_usersmaster_dest_tns';\n\\ No newline at end of file\n+    CONNECT TO &ec_usersmaster_source_username IDENTIFIED BY &ec_usersmaster_source_username_pwd USING '&ec_usersmaster_dest_tns';\n+    \n+CREATE OR REPLACE synonym SOURCE_REPL_LOG FOR REPL_LOG@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_AWEUSERS FOR REPL_AWEUSERS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_AWEPROJECTS FOR REPL_AWEPROJECTS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_AWEPROJECTUSERS FOR REPL_AWEPROJECTUSERS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_AWEEUCLIDUSERS FOR REPL_AWEEUCLIDUSERS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_ORACLEUSERS FOR REPL_ORACLEUSERS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_USERSSTOPLIST FOR REPL_USERSSTOPLIST@users_source_dblink;\n+\n+ALTER PACKAGE &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST COMPILE PACKAGE; \n+ALTER PACKAGE &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST COMPILE BODY; \n+\n+disconnect;\n+exit;\n",
                            "fix in the dblink recreattion script",
                            "Andrey Tsyganov",
                            "2023-07-12T18:15:06.000+02:00",
                            "5308ad2cc53a3cff7be6b5951496a535942d732d"
                        ],
                        [
                            "@@ -0,0 +1,10 @@\n+set verify off\n+\n+--get user input\n+ACCEPT ec_usersmaster_source_username CHAR DEFAULT 'EC_USERSMASTER_SRC' PROMPT 'Provide source users master username (default: EC_USERSMASTER_SRC):>'\n+ACCEPT ec_usersmaster_source_username_pwd CHAR DEFAULT 'NTGWRVsZSiRYxcYQ8qaSX7368jkqbT' PROMPT 'password (default: NTGWRVsZSiRYxcYQ8qaSX7368jkqbT):>'\n+ACCEPT ec_usersmaster_dest_tns CHAR DEFAULT 'ECUSERS_SOURCE_TNS' PROMPT 'Source connection TNS name or full tns connection string (default:ECUSERS_SOURCE_TNS):>'\n+\n+DROP DATABASE LINK users_source_dblink;\n+CREATE DATABASE LINK users_source_dblink \n+    CONNECT TO &ec_usersmaster_source_username IDENTIFIED BY &ec_usersmaster_source_username_pwd USING '&ec_usersmaster_dest_tns';\n\\ No newline at end of file\n",
                            "toolbox: oracle SQLs and PL/SQLs to manage users synch between different euclid database instances",
                            "Andrey Tsyganov",
                            "2023-07-12T17:49:32.000+02:00",
                            "dede8cb730f5ee51bece0be739d28043c16cdb00"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/DEST/scripts/dest_USERSMASTER_ECPKG.sql": [
                        [
                            "@@ -0,0 +1,711 @@\n+CREATE OR REPLACE PACKAGE USERSMASTER_ECPKG_DEST AS\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+description : \n+    The package is used to sychnronise user with the soruce euclid database instance. \n+    The access to the source data is done via database link: users_source_dblink\n+    and synonyms:\n+    SOURCE_REPL_LOG             : REPL_LOG@users_source_dblink;\n+    SOURCE_REPL_AWEUSERS        : REPL_AWEUSERS@users_source_dblink;\n+    SOURCE_REPL_AWEPROJECTS     : REPL_AWEPROJECTS@users_source_dblink;\n+    SOURCE_REPL_AWEPROJECTUSERS : REPL_AWEPROJECTUSERS@users_source_dblink;\n+    SOURCE_REPL_AWEEUCLIDUSERS  : REPL_AWEEUCLIDUSERS@users_source_dblink;\n+    SOURCE_REPL_ORACLEUSERS     : REPL_ORACLEUSERS@users_source_dblink;\n+    SOURCE_REPL_USERSSTOPLIST   : REPL_USERSSTOPLIST@users_source_dblink;\n+\n+*/\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters  :\n+    p_uuid          - unique id. This is generated by the caller.\n+    p_function_name - name of the caller (procedure/function or any custom string)\n+    p_info          - short information about the action/process that is logged\n+    p_clob          - long text data for errors details etc...\n+                      mainly ussed in the package to store json of the data differences between \n+                      SOURCE and DESTINATION        \n+    p_date          - date of the run, generated by the caller. Assumes sysdate fixed by the caller\n+description : \n+    procedure to add synchronisation processing log\n+*/\n+PROCEDURE add_log_record (\n+      p_uuid VARCHAR2\n+    , p_function_name IN VARCHAR2\n+    , p_info IN VARCHAR2\n+    , p_clob IN CLOB\n+    , p_date IN DATE\n+    );\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters  :\n+    p_run_date - run date of the report\n+                 it assumes that default is sysdate, \n+                 but if it is called from another function \n+                 then it is good to have this option to set.\n+description : \n+    synch_health_check - generates synchronisation report, \n+    it creates the log record in the table DEST_REPL_LOG.\n+    Each run has unique uuid.    \n+    There is a views that can be used to easy query results.\n+    last_synch_health_check\n+    \n+*/\n+PROCEDURE synch_health_check(\n+        p_run_date IN DATE DEFAULT SYSDATE\n+    );\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters  :\n+    p_run_date - run date of the report\n+                 it assumes that default is sysdate, \n+                 but if it is called from another function \n+                 then it is good to have this option to set.\n+description : \n+    synch_users_from_source - calls synch_health_check and applyes actions.\n+    it thus generates two reports in one uuid\n+    synch_health_check and action done by synch_users_from_source\n+    Each run has unique uuid.\n+    There are three views that can be used to easy query results.\n+    last_synch_run\n+    last_uuid\n+    \n+*/    \n+PROCEDURE synch_users_from_source;\n+\n+END USERSMASTER_ECPKG_DEST;\n+/\n+\n+\n+CREATE OR REPLACE PACKAGE BODY USERSMASTER_ECPKG_DEST AS\n+\n+-- cursor to get new oracle EC_ accounts from the source  \n+CURSOR g_c_new_oracle_users_cursor IS\n+      SELECT USERNAME\n+        FROM SOURCE_REPL_AWEUSERS\n+       WHERE USERNAME IN (\n+        SELECT USERNAME\n+          FROM SOURCE_REPL_ORACLEUSERS\n+        MINUS\n+        SELECT USERNAME\n+          FROM sys.user$, sys.dba_users\n+         WHERE 1 = 1\n+           AND name LIKE 'EC\\_%' ESCAPE '\\'\n+           AND USERNAME LIKE 'EC\\_%' ESCAPE '\\'\n+           AND sys.user$.USER# = sys.dba_users.USER_ID\n+        );\n+\n+-- cursor to get new passwords (spare4) from the oracle accounts of the source\n+CURSOR g_c_oracle_users_pwd_update_cursor IS\n+        SELECT USERNAME, spare4\n+          FROM SOURCE_REPL_ORACLEUSERS\n+         WHERE 1=1\n+           AND USERNAME IN (SELECT USERNAME FROM sys.dba_users)\n+           AND USERNAME NOT IN (\n+                                SELECT USERNAME\n+                                  FROM SOURCE_REPL_USERSSTOPLIST\n+                               )\n+        MINUS\n+        SELECT USERNAME, spare4\n+          FROM sys.user$, sys.dba_users\n+         WHERE 1 = 1\n+           AND name LIKE 'EC\\_%' ESCAPE '\\'\n+           AND USERNAME LIKE 'EC\\_%' ESCAPE '\\'\n+           AND sys.user$.USER# = sys.dba_users.USER_ID;\n+\n+-- cursor to get oracle accounts of the source that must be locked in the current destination\n+CURSOR g_c_oracle_users_lock_cursor IS\n+        SELECT USERNAME, spare4\n+          FROM SOURCE_REPL_ORACLEUSERS\n+         WHERE ACCOUNT_STATUS != 'OPEN'\n+           AND USERNAME IN (SELECT USERNAME FROM sys.dba_users)\n+           AND USERNAME NOT IN (\n+                                SELECT USERNAME\n+                                  FROM SOURCE_REPL_USERSSTOPLIST\n+                               );\n+\n+-- cursor to get oracle accounts of the source that must be unlocked in the current destination\n+CURSOR g_c_oracle_users_unlock_cursor IS\n+        SELECT USERNAME, spare4\n+          FROM SOURCE_REPL_ORACLEUSERS\n+         WHERE ACCOUNT_STATUS = 'OPEN'\n+           AND USERNAME IN (SELECT USERNAME FROM sys.dba_users)\n+           AND USERNAME NOT IN (\n+                                SELECT USERNAME\n+                                  FROM SOURCE_REPL_USERSSTOPLIST\n+                               )\n+           AND USERNAME IN (\n+                            SELECT USERNAME\n+                              FROM sys.dba_users\n+                             WHERE ACCOUNT_STATUS != 'OPEN'\n+                           );\n+-- cursor to get users from that must be inserted or updated in the current instance table AWOPER.AWEUSERS \n+CURSOR g_c_aweusers_synch_cursor IS\n+    SELECT USERNAME\n+          ,USER_ID\n+          ,CREATED\n+          ,FULLNAME\n+          ,EMAIL\n+          ,PASSWORD\n+          ,user_id_exists_in_dest\n+          ,username_exists_in_source\n+          ,CASE WHEN user_id_exists_in_dest = 0 AND username_exists_in_source = 0 THEN\n+                    'AWEUSERS:INSERT'\n+                WHEN user_id_exists_in_dest = 1 AND username_exists_in_source = 1 THEN\n+                    'AWEUSERS:UPDATE'\n+                WHEN user_id_exists_in_dest = 0 AND username_exists_in_source = 1 THEN\n+                    'AWEUSERS:WRONG_USER_ID:UPDATE'\n+                ELSE\n+                    'AWEUSERS:UNKNOWN'\n+           END action\n+      FROM (\n+        SELECT trepview.USERNAME\n+              ,trepview.USER_ID\n+              ,CREATED\n+              ,FULLNAME\n+              ,EMAIL\n+              ,PASSWORD\n+             ,(SELECT COUNT(*) FROM AWOPER.AWEUSERS WHERE user_id = trepview.user_id) user_id_exists_in_dest\n+             ,(SELECT COUNT(*) FROM AWOPER.AWEUSERS WHERE username = trepview.username) username_exists_in_source\n+        FROM\n+        ( SELECT * FROM source_repl_aweusers t1\n+          MINUS\n+          SELECT * FROM AWOPER.AWEUSERS t2\n+        ) trepview\n+    );\n+\n+-- cursor to get all records from current instance table AWOPER.AWEPROJECTUSERS\n+-- but does not exist in source replica SOURCE_REPL_AWEPROJECTUSERS\n+CURSOR g_c_AWEPROJECTUSERS_to_delete IS\n+    SELECT PROJECTID\n+          ,USERID\n+          ,USERTYPE\n+      FROM (\n+        SELECT * FROM AWOPER.AWEPROJECTUSERS t2\n+        MINUS\n+        SELECT * FROM SOURCE_REPL_AWEPROJECTUSERS t1\n+    );\n+\n+-- cursor to get all records from source SOURCE_REPL_AWEPROJECTUSERS\n+-- that does not exist in currecnt instance table AWOPER.AWEPROJECTUSERS\n+CURSOR g_c_AWEPROJECTUSERS_to_insert IS\n+    SELECT PROJECTID\n+          ,USERID\n+          ,USERTYPE\n+      FROM (\n+        SELECT * FROM SOURCE_REPL_AWEPROJECTUSERS t1\n+        MINUS\n+        SELECT * FROM AWOPER.AWEPROJECTUSERS t2\n+    );\n+\n+-- cursor to get all records from current instance table AWOPER.AWEEUCLIDUSERS\n+-- but does not exist in source replica SOURCE_REPL_AWEEUCLIDUSERS\n+CURSOR g_c_AWEEUCLIDUSERS_to_delete IS\n+    SELECT trepview.USERNAME\n+          ,trepview.PRIVLEVEL\n+          ,trepview.ID\n+          ,'AWEEUCLIDUSERS:DELETE' action\n+      FROM (\n+            SELECT * FROM AWOPER.AWEEUCLIDUSERS t2\n+            MINUS\n+            SELECT * FROM SOURCE_REPL_AWEEUCLIDUSERS t1\n+        ) trepview;\n+\n+-- cursor to get all records from source SOURCE_REPL_AWEEUCLIDUSERS\n+-- that does not exist in currecnt instance table AWOPER.AWEEUCLIDUSERS\n+CURSOR g_c_AWEEUCLIDUSERS_to_insert IS\n+    SELECT trepview.USERNAME\n+          ,trepview.PRIVLEVEL\n+          ,trepview.ID\n+          ,'AWEEUCLIDUSERS:INSERT' action\n+      FROM (\n+            SELECT * FROM SOURCE_REPL_AWEEUCLIDUSERS t1\n+            MINUS\n+            SELECT * FROM AWOPER.AWEEUCLIDUSERS t2\n+        ) trepview;\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters  :\n+    check package specification     \n+description : \n+    check package specification     \n+*/\n+PROCEDURE add_log_record (\n+      p_uuid VARCHAR2\n+    , p_function_name IN VARCHAR2\n+    , p_info IN VARCHAR2\n+    , p_clob IN CLOB\n+    , p_date IN DATE\n+    ) AS\n+\n+    PRAGMA AUTONOMOUS_TRANSACTION;\n+\n+BEGIN\n+    INSERT INTO DEST_REPL_LOG(uuid, msg_date, function_name, info, json_clob) VALUES (p_uuid, p_date,  p_function_name, p_info, p_clob);\n+    COMMIT;\n+END add_log_record;\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters  :\n+    check package specification     \n+description : \n+    check package specification     \n+*/\n+PROCEDURE synch_health_check(\n+        p_run_date IN DATE DEFAULT SYSDATE\n+    ) AS\n+    PRAGMA AUTONOMOUS_TRANSACTION;\n+\n+    l_uuid VARCHAR2(40) := SYS_GUID();\n+    l_json CLOB;\n+\n+BEGIN\n+    add_log_record(l_uuid, 'synch_health_check', '==synch_health_check==start' , '', p_run_date);\n+\n+    FOR c_new_oracle_users_row IN g_c_new_oracle_users_cursor LOOP\n+        add_log_record(l_uuid, 'synch_health_check', 'ORACLE USER: new user will be created: ' || c_new_oracle_users_row.USERNAME, '', p_run_date);\n+    END LOOP;\n+\n+    -- 2. we update user password\n+    FOR c_oracle_users_pwd_update_row IN g_c_oracle_users_pwd_update_cursor LOOP\n+         add_log_record(l_uuid, 'synch_health_check', 'ORACLE USER: password will be updated for: ' || c_oracle_users_pwd_update_row.USERNAME, '', p_run_date);\n+    END LOOP;\n+\n+    -- 3. we lock users that were locked in source - optional\n+    FOR c_oracle_users_lock_row IN g_c_oracle_users_lock_cursor LOOP\n+         add_log_record(l_uuid, 'synch_health_check', 'ORACLE USER: user will be locked: ' || c_oracle_users_lock_row.USERNAME, '', p_run_date);\n+    END LOOP;\n+\n+    -- 4. we unlock users that were unlocked in source - optional\n+    FOR c_oracle_users_unlock_row IN g_c_oracle_users_unlock_cursor LOOP\n+         add_log_record(l_uuid, 'synch_health_check', 'ORACLE USER: user will be unlocked: ' || c_oracle_users_unlock_row.USERNAME, '', p_run_date);\n+    END LOOP;\n+\n+\n+    FOR c_iAWEUSRRECORD IN g_c_aweusers_synch_cursor LOOP\n+        SELECT json_serialize(JSON_OBJECTAGG( KEY akey VALUE JSON_OBJECT(USERNAME\n+                  ,USER_ID\n+                  ,CREATED\n+                  ,FULLNAME\n+                  ,EMAIL\n+                  ,PASSWORD)\n+                  )) all_data\n+          INTO  l_json\n+          FROM\n+          (\n+            SELECT 'DEST:' || username akey, t1.* FROM awoper.aweusers t1 WHERE username = c_iAWEUSRRECORD.USERNAME\n+            UNION ALL\n+            SELECT 'SOURCE: ' || username akey, t2.* FROM source_repl_aweusers t2 WHERE username = c_iAWEUSRRECORD.USERNAME\n+          );\n+\n+        IF c_iAWEUSRRECORD.action = 'AWEUSERS:WRONG_USER_ID:UPDATE' THEN\n+            add_log_record(l_uuid, 'synch_health_check', 'AWEUSERS:WRONG_USER_ID:UPDATE: ' || c_iAWEUSRRECORD.USERNAME, l_json, p_run_date);\n+        END IF;\n+\n+        IF c_iAWEUSRRECORD.action = 'AWEUSERS:UPDATE' THEN\n+            add_log_record(l_uuid, 'synch_health_check', 'AWEUSERS:UPDATE: ' || c_iAWEUSRRECORD.USERNAME, l_json, p_run_date);\n+        END IF;\n+\n+        IF c_iAWEUSRRECORD.action = 'AWEUSERS:INSERT' THEN\n+            add_log_record(l_uuid, 'synch_health_check', 'AWEUSERS:INSERT: ' || c_iAWEUSRRECORD.USERNAME, l_json, p_run_date);\n+        END IF;\n+\n+    END LOOP;\n+\n+    FOR iROW_AWEPROJECTS IN (\n+            SELECT * FROM SOURCE_REPL_AWEPROJECTS t1\n+            MINUS\n+            SELECT * FROM AWOPER.AWEPROJECTS t2\n+    ) LOOP\n+        SELECT json_serialize(JSON_OBJECTAGG( KEY akey VALUE JSON_OBJECT(\n+                    ID\n+                   ,NAME\n+                   ,DESCRIPTION\n+                   ,INSTRUMENT\n+                   ,DEFAULT_PRIVILEGES\n+                  ))\n+                ) all_data\n+          INTO  l_json\n+          FROM\n+          (\n+            SELECT 'DEST:' || NAME akey, t1.* FROM awoper.AWEPROJECTS t1 WHERE ID = iROW_AWEPROJECTS.ID\n+            UNION ALL\n+            SELECT 'SOURCE: ' || NAME akey, t2.* FROM SOURCE_REPL_AWEPROJECTS t2 WHERE ID = iROW_AWEPROJECTS.ID\n+          );\n+\n+        add_log_record(l_uuid, 'synch_health_check', 'AWEPROJECTS:CHANGE: ' || iROW_AWEPROJECTS.NAME, l_json, p_run_date);\n+    END LOOP;\n+\n+    FOR c_AWEEUCLIDUSERS_to_delete_row IN g_c_AWEEUCLIDUSERS_to_delete LOOP\n+        SELECT JSON_ARRAY(c_AWEEUCLIDUSERS_to_delete_row.USERNAME, c_AWEEUCLIDUSERS_to_delete_row.PRIVLEVEL, c_AWEEUCLIDUSERS_to_delete_row.id)\n+          INTO l_json\n+          FROM dual;\n+\n+        add_log_record(l_uuid, 'synch_health_check', 'AWEEUCLIDUSERS:DELETE: ' || c_AWEEUCLIDUSERS_to_delete_row.USERNAME, l_json, p_run_date);\n+\n+    END LOOP;\n+\n+\n+    FOR c_AWEEUCLIDUSERS_to_insert_row IN g_c_AWEEUCLIDUSERS_to_insert LOOP\n+        SELECT JSON_ARRAY(c_AWEEUCLIDUSERS_to_insert_row.USERNAME, c_AWEEUCLIDUSERS_to_insert_row.PRIVLEVEL, c_AWEEUCLIDUSERS_to_insert_row.id)\n+          INTO l_json\n+          FROM dual;\n+\n+        add_log_record(l_uuid, 'synch_health_check', 'AWEEUCLIDUSERS:INSERT: ' || c_AWEEUCLIDUSERS_to_insert_row.USERNAME, l_json, p_run_date);\n+    END LOOP;\n+\n+    FOR c_AWEPROJECTUSERS_to_delete_row IN g_c_AWEPROJECTUSERS_to_delete LOOP\n+        SELECT JSON_ARRAY(c_AWEPROJECTUSERS_to_delete_row.PROJECTID, c_AWEPROJECTUSERS_to_delete_row.USERID, c_AWEPROJECTUSERS_to_delete_row.USERTYPE)\n+          INTO l_json\n+          FROM dual;\n+\n+        add_log_record(l_uuid, 'synch_health_check', 'AWEPROJECTUSERS:DELETE: ' || c_AWEPROJECTUSERS_to_delete_row.PROJECTID, l_json, p_run_date);\n+\n+    END LOOP;\n+\n+    FOR c_AWEPROJECTUSERS_to_insert_row IN g_c_AWEPROJECTUSERS_to_insert LOOP\n+        SELECT JSON_ARRAY(c_AWEPROJECTUSERS_to_insert_row.PROJECTID, c_AWEPROJECTUSERS_to_insert_row.USERID, c_AWEPROJECTUSERS_to_insert_row.USERTYPE)\n+          INTO l_json\n+          FROM dual;\n+\n+        add_log_record(l_uuid, 'synch_health_check', 'AWEPROJECTUSERS:INSERT: ' || c_AWEPROJECTUSERS_to_insert_row.PROJECTID, l_json, p_run_date);\n+    END LOOP;\n+\n+    add_log_record(l_uuid, 'synch_health_check', '==synch_health_check==end' , '', p_run_date);\n+\n+    COMMIT;\n+\n+END synch_health_check;\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters  :\n+    p_uuid     - unique id of the operation fro the log\n+    p_run_date - date of the operation for the log\n+description : \n+    Procedure gets data from the SOURCE_REPL_ORACLEUSERS source \n+    and compares it with the current users in the current instance.\n+    then, depending from the result function sys.ecuser_manager is called\n+    There are 4 modes:\n+    1 - create user, grant awuser role, alter password\n+    2 - alter password\n+    3 - lock user\n+    4 - unlock user\n+    \n+*/\n+PROCEDURE synch_ora_users_from_source(p_uuid VARCHAR2, p_run_date DATE) AS\n+\n+    l_username_pwd VARCHAR2(4000);\n+    l_username_ecid NUMBER;\n+BEGIN\n+    -- 1. we create all new users\n+    FOR c_new_oracle_users_row IN g_c_new_oracle_users_cursor LOOP\n+        SELECT user_id\n+          INTO l_username_ecid\n+          FROM SOURCE_REPL_AWEUSERS\n+         WHERE username = c_new_oracle_users_row.USERNAME;\n+\n+        SELECT spare4\n+          INTO l_username_pwd\n+          FROM SOURCE_REPL_ORACLEUSERS\n+         WHERE username = c_new_oracle_users_row.USERNAME;\n+\n+        sys.ecuser_manager(p_uuid, 1, c_new_oracle_users_row.USERNAME, l_username_pwd, l_username_ecid);\n+\n+    END LOOP;\n+\n+    -- 2. we update user password\n+    FOR c_oracle_users_pwd_update_row IN g_c_oracle_users_pwd_update_cursor LOOP\n+        sys.ecuser_manager(p_uuid, 2, c_oracle_users_pwd_update_row.USERNAME, c_oracle_users_pwd_update_row.spare4, -1);\n+    END LOOP;\n+\n+    -- 3. we lock users that were locked in source - optional\n+    FOR c_oracle_users_lock_row IN g_c_oracle_users_lock_cursor LOOP\n+        sys.ecuser_manager(p_uuid, 3, c_oracle_users_lock_row.USERNAME, '', -1);\n+    END LOOP;\n+\n+    -- 4. we unlock users that were unlocked in source - optional\n+    FOR c_oracle_users_unlock_row IN g_c_oracle_users_unlock_cursor LOOP\n+        sys.ecuser_manager(p_uuid, 4, c_oracle_users_unlock_row.USERNAME, '', -1);\n+    END LOOP;\n+\n+END synch_ora_users_from_source;\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters  :\n+    p_uuid     - unique id of the operation fro the log\n+    p_run_date - date of the operation for the log\n+description : \n+    Procedure gets data from the SOURCE_REPL_AWEUSERS source \n+    and compares it with the current AWEUSERS in the current instance.\n+    If particular user does not exist - it runs INSERT statment\n+    If user exists with combination (user_id, username) - then updates other columns in the table\n+    If user exists but user_id is different - generates error record in the report run with the lable:\n+        AWEUSERS:WRONG_USER_ID:UPDATE\n+    There are 4 modes:\n+*/\n+PROCEDURE synch_aweusers_from_source(p_uuid VARCHAR2, p_run_date DATE) AS\n+   PRAGMA AUTONOMOUS_TRANSACTION;\n+\n+    l_json CLOB;\n+BEGIN\n+\n+    FOR c_iAWEUSRRECORD_row IN g_c_aweusers_synch_cursor LOOP\n+        SELECT json_serialize(JSON_OBJECTAGG( KEY akey VALUE JSON_OBJECT(USERNAME\n+                  ,USER_ID\n+                  ,CREATED\n+                  ,FULLNAME\n+                  ,EMAIL\n+                  ,PASSWORD)\n+                  )) all_data\n+          INTO  l_json\n+          FROM\n+          (\n+            SELECT 'DEST:' || username akey, t1.* FROM awoper.aweusers t1 WHERE username = c_iAWEUSRRECORD_row.USERNAME\n+            UNION ALL\n+            SELECT 'SOURCE: ' || username akey, t2.* FROM source_repl_aweusers t2 WHERE username = c_iAWEUSRRECORD_row.USERNAME\n+          );\n+\n+        IF c_iAWEUSRRECORD_row.action = 'AWEUSERS:WRONG_USER_ID:UPDATE' THEN\n+            add_log_record(p_uuid, 'synch_health_check', 'WRONG_USER_ID:UPDATE: ' || c_iAWEUSRRECORD_row.USERNAME, l_json, p_run_date);\n+\n+        END IF;\n+\n+        IF c_iAWEUSRRECORD_row.action = 'AWEUSERS:UPDATE' THEN\n+            add_log_record(p_uuid, 'add_aweusers_from_source', 'UPDATE: ' || c_iAWEUSRRECORD_row.USERNAME, '', p_run_date);\n+            UPDATE AWOPER.AWEUSERS SET\n+                       CREATED  = c_iAWEUSRRECORD_row.CREATED\n+                      ,FULLNAME = c_iAWEUSRRECORD_row.FULLNAME\n+                      ,EMAIL    = c_iAWEUSRRECORD_row.EMAIL\n+                      ,PASSWORD = c_iAWEUSRRECORD_row.PASSWORD\n+              WHERE user_id =  c_iAWEUSRRECORD_row.user_id and username = c_iAWEUSRRECORD_row.username;\n+\n+\n+        END IF;\n+\n+        IF c_iAWEUSRRECORD_row.action = 'AWEUSERS:INSERT' THEN\n+            add_log_record(p_uuid, 'add_aweusers_from_source', 'INSERT: ' || c_iAWEUSRRECORD_row.USERNAME, '', p_run_date);\n+\n+            INSERT INTO AWOPER.AWEUSERS(\n+                USER_ID\n+               ,USERNAME\n+               ,CREATED\n+               ,FULLNAME\n+               ,EMAIL\n+               ,PASSWORD\n+            )\n+            VALUES (\n+                c_iAWEUSRRECORD_row.USER_ID\n+               ,c_iAWEUSRRECORD_row.USERNAME\n+               ,c_iAWEUSRRECORD_row.CREATED\n+               ,c_iAWEUSRRECORD_row.FULLNAME\n+               ,c_iAWEUSRRECORD_row.EMAIL\n+               ,c_iAWEUSRRECORD_row.PASSWORD\n+            );\n+\n+        END IF;\n+\n+    END LOOP;\n+\n+    COMMIT;\n+END synch_aweusers_from_source;\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters  :\n+    p_uuid     - unique id of the operation fro the log\n+    p_run_date - date of the operation for the log\n+description : \n+    Procedure gets data from the SOURCE_REPL_AWEPROJECTS source \n+    and merges content into the AWOPER.AWEPROJECTS\n+    new projects are added, existing will be updated if changed. \n+    \n+*/\n+PROCEDURE synch_aweprojects_from_source(p_uuid VARCHAR2, p_run_date DATE) AS\n+   PRAGMA AUTONOMOUS_TRANSACTION;\n+BEGIN\n+    -- insert or update the AWEPROJECTUSERS table that are in source but not in destination or privilage had changed\n+    -- that synch does not take into account delete operations\n+    MERGE INTO AWOPER.AWEPROJECTS tdest\n+    USING (\n+        SELECT * FROM SOURCE_REPL_AWEPROJECTS t1\n+        MINUS\n+        SELECT * FROM AWOPER.AWEPROJECTS t2\n+    ) data_to_merge_view\n+    ON ( tdest.ID = data_to_merge_view.ID)\n+        WHEN MATCHED THEN\n+            UPDATE SET tdest.NAME = data_to_merge_view.NAME\n+                      ,tdest.DESCRIPTION = data_to_merge_view.DESCRIPTION\n+                      ,tdest.INSTRUMENT = data_to_merge_view.INSTRUMENT\n+                      ,tdest.DEFAULT_PRIVILEGES = data_to_merge_view.DEFAULT_PRIVILEGES\n+        WHEN NOT MATCHED THEN\n+            INSERT (\n+                ID\n+               ,NAME\n+               ,DESCRIPTION\n+               ,INSTRUMENT\n+               ,DEFAULT_PRIVILEGES\n+            )\n+            VALUES (\n+                data_to_merge_view.ID\n+               ,data_to_merge_view.NAME\n+               ,data_to_merge_view.DESCRIPTION\n+               ,data_to_merge_view.INSTRUMENT\n+               ,data_to_merge_view.DEFAULT_PRIVILEGES\n+            );\n+\n+    COMMIT;\n+\n+END synch_aweprojects_from_source;\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters  :\n+    p_uuid     - unique id of the operation fro the log\n+    p_run_date - date of the operation for the log\n+description : \n+    Procedure gets data from the SOURCE_REPL_AWEPROJECTUSERS source \n+    It first deletes all records from the AWEPROJECTUSERS that \n+    exists in current instance of AWEPROJECTUSERS but not in the source\n+    second it inserts all records that are in the source \n+    but not in the current instance of AWEPROJECTUSERS\n+    \n+*/\n+PROCEDURE synch_aweprojectusers_from_source(p_uuid VARCHAR2, p_run_date DATE) AS\n+   PRAGMA AUTONOMOUS_TRANSACTION;\n+\n+    l_json CLOB;\n+BEGIN\n+    FOR c_AWEPROJECTUSERS_to_delete_row IN g_c_AWEPROJECTUSERS_to_delete LOOP\n+        SELECT JSON_ARRAY(c_AWEPROJECTUSERS_to_delete_row.PROJECTID, c_AWEPROJECTUSERS_to_delete_row.USERID, c_AWEPROJECTUSERS_to_delete_row.USERTYPE)\n+          INTO l_json\n+          FROM dual;\n+\n+        add_log_record(p_uuid, 'add_aweprojectusers_from_source', 'AWEPROJECTUSERS:DELETE: ' || c_AWEPROJECTUSERS_to_delete_row.PROJECTID, l_json, p_run_date);\n+\n+        DELETE FROM AWOPER.AWEPROJECTUSERS\n+         WHERE PROJECTID = c_AWEPROJECTUSERS_to_delete_row.PROJECTID\n+           AND NVL(USERID, -1) = NVL(c_AWEPROJECTUSERS_to_delete_row.USERID, -1)\n+           AND USERTYPE  = c_AWEPROJECTUSERS_to_delete_row.USERTYPE;\n+\n+    END LOOP;\n+\n+    FOR c_AWEPROJECTUSERS_to_insert_row IN g_c_AWEPROJECTUSERS_to_insert LOOP\n+        SELECT JSON_ARRAY(c_AWEPROJECTUSERS_to_insert_row.PROJECTID, c_AWEPROJECTUSERS_to_insert_row.USERID, c_AWEPROJECTUSERS_to_insert_row.USERTYPE)\n+          INTO l_json\n+          FROM dual;\n+\n+        add_log_record(p_uuid, 'add_aweprojectusers_from_source', 'AWEPROJECTUSERS:INSERT: ' || c_AWEPROJECTUSERS_to_insert_row.PROJECTID, l_json, p_run_date);\n+\n+        INSERT INTO AWOPER.AWEPROJECTUSERS(\n+                     PROJECTID\n+                    ,USERID\n+                    ,USERTYPE)\n+             VALUES (\n+                     c_AWEPROJECTUSERS_to_insert_row.PROJECTID\n+                    ,c_AWEPROJECTUSERS_to_insert_row.USERID\n+                    ,c_AWEPROJECTUSERS_to_insert_row.USERTYPE\n+                    );\n+    END LOOP;\n+\n+    COMMIT;\n+\n+END synch_aweprojectusers_from_source;\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters  :\n+    p_uuid     - unique id of the operation fro the log\n+    p_run_date - date of the operation for the log\n+description : \n+    Procedure gets data from the SOURCE_REPL_AWEEUCLIDUSERS source \n+    It first deletes all records from the AWEEUCLIDUSERS that \n+    exists in current instance of AWEEUCLIDUSERS but not in the source\n+    second it inserts all records that are in the source \n+    but not in the current instance of AWEEUCLIDUSERS\n+    \n+*/\n+PROCEDURE synch_aweeuclidusers_from_source(p_uuid VARCHAR2, p_run_date DATE) AS\n+    PRAGMA AUTONOMOUS_TRANSACTION;\n+\n+    l_json CLOB;\n+\n+BEGIN\n+    FOR c_AWEEUCLIDUSERS_to_delete_row IN g_c_AWEEUCLIDUSERS_to_delete LOOP\n+        SELECT JSON_ARRAY(c_AWEEUCLIDUSERS_to_delete_row.USERNAME, c_AWEEUCLIDUSERS_to_delete_row.PRIVLEVEL, c_AWEEUCLIDUSERS_to_delete_row.id)\n+          INTO l_json\n+          FROM dual;\n+\n+        add_log_record(p_uuid, 'synch_aweeuclidusers_from_source', 'AWEEUCLIDUSERS:DELETE: ' || c_AWEEUCLIDUSERS_to_delete_row.USERNAME, l_json, p_run_date);\n+\n+        DELETE FROM AWOPER.AWEEUCLIDUSERS\n+         WHERE USERNAME  = c_AWEEUCLIDUSERS_to_delete_row.USERNAME\n+           AND ID        = c_AWEEUCLIDUSERS_to_delete_row.ID\n+           AND PRIVLEVEL = c_AWEEUCLIDUSERS_to_delete_row.PRIVLEVEL;\n+\n+    END LOOP;\n+\n+\n+    FOR c_AWEEUCLIDUSERS_to_insert_row IN g_c_AWEEUCLIDUSERS_to_insert LOOP\n+        SELECT JSON_ARRAY (c_AWEEUCLIDUSERS_to_insert_row.USERNAME, c_AWEEUCLIDUSERS_to_insert_row.PRIVLEVEL, c_AWEEUCLIDUSERS_to_insert_row.id)\n+          INTO l_json\n+          FROM dual;\n+\n+        add_log_record(p_uuid, 'synch_aweeuclidusers_from_source', 'AWEEUCLIDUSERS:INSERT: ' || c_AWEEUCLIDUSERS_to_insert_row.USERNAME, l_json, p_run_date);\n+\n+        INSERT INTO AWOPER.AWEEUCLIDUSERS(\n+                     USERNAME\n+                    ,PRIVLEVEL\n+                    ,ID)\n+             VALUES (\n+                     c_AWEEUCLIDUSERS_to_insert_row.USERNAME\n+                    ,c_AWEEUCLIDUSERS_to_insert_row.PRIVLEVEL\n+                    ,c_AWEEUCLIDUSERS_to_insert_row.id\n+                    );\n+    END LOOP;\n+\n+    COMMIT;\n+\n+END synch_aweeuclidusers_from_source;\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters  :\n+description : \n+    check package specification     \n+*/ \n+PROCEDURE synch_users_from_source AS\n+    PRAGMA AUTONOMOUS_TRANSACTION;\n+\n+    l_uuid VARCHAR2(40) := SYS_GUID();\n+    l_run_date DATE := SYSDATE;\n+BEGIN\n+    synch_health_check(l_run_date);\n+    synch_ora_users_from_source(l_uuid, l_run_date);\n+    synch_aweusers_from_source(l_uuid, l_run_date);\n+    synch_aweprojects_from_source(l_uuid, l_run_date);\n+    synch_aweprojectusers_from_source(l_uuid, l_run_date);\n+    synch_aweeuclidusers_from_source(l_uuid, l_run_date);\n+\n+    COMMIT;\n+END synch_users_from_source;\n+\n+END USERSMASTER_ECPKG_DEST;\n+/\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/DEST/scripts/dest_ec_usersmaster_create_schema_objects.sql": [
                        [
                            "@@ -0,0 +1,72 @@\n+DROP DATABASE LINK users_source_dblink;\n+CREATE DATABASE LINK users_source_dblink \n+    CONNECT TO &1 \n+    IDENTIFIED BY &2 \n+            USING '&3';\n+\n+CREATE OR REPLACE synonym SOURCE_REPL_LOG FOR REPL_LOG@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_AWEUSERS FOR REPL_AWEUSERS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_AWEPROJECTS FOR REPL_AWEPROJECTS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_AWEPROJECTUSERS FOR REPL_AWEPROJECTUSERS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_AWEEUCLIDUSERS FOR REPL_AWEEUCLIDUSERS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_ORACLEUSERS FOR REPL_ORACLEUSERS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_USERSSTOPLIST FOR REPL_USERSSTOPLIST@users_source_dblink;\n+\n+CREATE TABLE DEST_REPL_LOG (uuid VARCHAR2(40), msg_date date, function_name varchar2(255), info VARCHAR2(255), json_clob CLOB);\n+CREATE INDEX INDX1_DEST_LOG_FNAME ON DEST_REPL_LOG(function_name);\n+CREATE INDEX INDX2_DEST_UUID ON DEST_REPL_LOG(uuid);\n+CREATE INDEX INDX2_DEST_MSG_DATE ON DEST_REPL_LOG(msg_date);\n+\n+GRANT INSERT ON DEST_REPL_LOG TO SYS;\n+\n+\n+CREATE OR REPLACE VIEW last_synch_health_check AS \n+SELECT DEST_REPL_LOG.* \n+  FROM DEST_REPL_LOG \n+     ,(SELECT ROWNUM rn, v1.*\n+        FROM\n+        (\n+        SELECT uuid subuuid, MAX(msg_date) md\n+                FROM DEST_REPL_LOG\n+               WHERE function_name = 'synch_health_check' \n+            GROUP BY uuid\n+            ORDER BY md desc\n+        ) v1   \n+        WHERE ROWNUM = 1\n+    ) v2 \n+WHERE uuid = v2.subuuid\n+;\n+\n+CREATE OR REPLACE VIEW last_synch_run AS \n+SELECT DEST_REPL_LOG.* \n+  FROM DEST_REPL_LOG \n+     ,(SELECT ROWNUM rn, v1.*\n+        FROM\n+        (\n+        SELECT uuid subuuid, MAX(msg_date) md\n+                FROM DEST_REPL_LOG\n+               WHERE function_name != 'synch_health_check' \n+            GROUP BY uuid\n+            ORDER BY md desc\n+        ) v1   \n+        WHERE ROWNUM = 1\n+    ) v2 \n+WHERE uuid = v2.subuuid\n+;\n+\n+\n+CREATE OR REPLACE VIEW last_uuid AS \n+SELECT DEST_REPL_LOG.* \n+  FROM DEST_REPL_LOG \n+     ,(SELECT ROWNUM rn, v1.*\n+        FROM\n+        (\n+        SELECT uuid subuuid, MAX(msg_date) md\n+                FROM DEST_REPL_LOG\n+            GROUP BY uuid\n+            ORDER BY md desc\n+        ) v1   \n+        WHERE ROWNUM = 1\n+    ) v2 \n+WHERE uuid = v2.subuuid\n+;\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/DEST/scripts/dest_ec_usersmaster_create_user.sql": [
                        [
                            "@@ -0,0 +1,27 @@\n+create user &1 identified by &2;\n+grant create session to &1;\n+grant create table to &1;\n+grant create procedure to &1;\n+grant create view to &1;\n+grant unlimited tablespace to &1;\n+grant select on AWOPER.AWEUSERS to &1;\n+grant select on AWOPER.AWEPROJECTS to &1;\n+grant select on AWOPER.AWEPROJECTUSERS to &1;\n+grant select on AWOPER.AWEEUCLIDUSERS to &1;\n+grant select on SYS.DBA_USERS to &1;\n+grant select on sys.user$ to &1;\n+grant create job to &1;\n+--second set of grants\n+GRANT CREATE DATABASE LINK TO &1;\n+GRANT CREATE SYNONYM TO &1;\n+GRANT INSERT ON AWOPER.AWEUSERS TO &1;\n+GRANT INSERT ON AWOPER.AWEPROJECTS TO &1;\n+GRANT INSERT ON AWOPER.AWEPROJECTUSERS TO &1;\n+GRANT INSERT ON AWOPER.AWEEUCLIDUSERS TO &1;\n+GRANT UPDATE(CREATED, FULLNAME, EMAIL, PASSWORD) ON AWOPER.AWEUSERS TO &1;\n+GRANT UPDATE(NAME, DESCRIPTION, INSTRUMENT, DEFAULT_PRIVILEGES) ON AWOPER.AWEPROJECTS TO &1;\n+GRANT UPDATE(USERTYPE) ON AWOPER.AWEPROJECTUSERS TO &1;\n+GRANT UPDATE(PRIVLEVEL) ON AWOPER.AWEEUCLIDUSERS TO &1;\n+GRANT DELETE ON AWOPER.AWEEUCLIDUSERS TO &1;\n+GRANT DELETE ON AWOPER.AWEPROJECTUSERS TO &1;\n+\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/SOURCE/scripts/source_USERSMASTER_ECPKG.sql": [
                        [
                            "@@ -0,0 +1,386 @@\n+CREATE OR REPLACE PACKAGE USERSMASTER_ECPKG_SOURCE AS\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+description : \n+    The package is used to prepare data for the users synchronisation if needed.\n+    The idea is taht destination instance will connect to this instance\n+    or to its data guard instance and query data from the tables replica:\n+    REPL_LOG - replication sources generation log \n+    REPL_AWEUSERS - replica of the AWOPER.AWEUSERS table\n+    REPL_AWEPROJECTS - replica of the AWOPER.AWEPROJECTS table \n+    REPL_AWEPROJECTUSERS - replica of the AWOPER.AWEPROJECTUSERS table\n+    REPL_AWEEUCLIDUSERS replica of the AWOPER.AWEEUCLIDUSERS table\n+    REPL_ORACLEUSERS - generated data over the ORACLE users in the instance \n+                       Only EC_ oracle accounts are taken into the synchronisation process\n+\n+    REPL_USERSSTOPLIST\n+    \n+    Table REPL_USERSSTOPLIST is used to guarantie that users in this table \n+    are excluded from the password synchronisation process \n+*/\n+\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+description : \n+    main function to get actual data into the replica tables\n+    it is implemnted as an AUTONOMOUS TRANSACTION and contains commit.\n+    This is the function that is called in the scheduler job \n+*/\n+PROCEDURE create_synch_tables_replica;\n+\n+END USERSMASTER_ECPKG_SOURCE;\n+/\n+\n+\n+CREATE OR REPLACE PACKAGE BODY USERSMASTER_ECPKG_SOURCE AS\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters  :\n+    p_info - string with custom text that will be added as log message\n+description : \n+    adds record to the source replica generation log \n+*/\n+PROCEDURE ADD_REPL_LOG_RECORD(p_info VARCHAR2) IS\n+      PRAGMA AUTONOMOUS_TRANSACTION;\n+BEGIN\n+    INSERT INTO REPL_LOG (msg_date, info)\n+         VALUES (sysdate, p_info);\n+    COMMIT;\n+END;\n+\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+description : \n+    If there are any diferences between current replica and current AWOPER.AWEUSERS table\n+    procedure recreates REPL_AWEUSERS table \n+    if synchronisation procedure queries replication table while delete all records REPL_AWEUSERS\n+    and then insert all from AWOPER.AWEUSERS\n+    because it is transactional synchronisation at destination will not be touched\n+    and no data loss.\n+    commit must be done on the level of the caller of this procedure\n+*/\n+PROCEDURE create_AWEUSERS_repl IS\n+   /* function to detect difference in the tables\n+      returns FALSE if no changes and no replication needed\n+      returns TRUE if we force replication\n+    */\n+    FUNCTION detect_AWEUSERS_changes RETURN BOOLEAN AS\n+\n+        l_temp_count_src   NUMBER := 0;\n+        l_temp_count_dst   NUMBER := 0;\n+\n+    BEGIN\n+        SELECT COUNT(*)\n+          INTO l_temp_count_src\n+         FROM ( SELECT * FROM AWOPER.AWEUSERS\n+                MINUS\n+                SELECT * FROM REPL_AWEUSERS\n+              );\n+\n+        SELECT COUNT(*)\n+          INTO l_temp_count_dst\n+          FROM (\n+                SELECT * FROM REPL_AWEUSERS\n+                MINUS\n+                SELECT * FROM AWOPER.AWEUSERS\n+               );\n+\n+        IF l_temp_count_src > 0 THEN\n+            RETURN TRUE;\n+        END IF;\n+\n+        IF l_temp_count_dst > 0 THEN\n+            RETURN TRUE;\n+        END IF;\n+\n+        RETURN FALSE;\n+    END;\n+\n+BEGIN\n+    IF detect_AWEUSERS_changes() THEN\n+        ADD_REPL_LOG_RECORD('AWOPER.AWEUSERS replica creation to REPL_AWEUSERS');\n+        EXECUTE IMMEDIATE 'DELETE FROM REPL_AWEUSERS';\n+        EXECUTE IMMEDIATE 'INSERT INTO REPL_AWEUSERS SELECT * FROM AWOPER.AWEUSERS';\n+    END IF;\n+\n+END;\n+\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+description : \n+    If there are any diferences between current replica and current AWOPER.AWEPROJECTS table\n+    procedure recreates REPL_AWEPROJECTS table \n+    if synchronisation procedure queries replication table while delete all records REPL_AWEPROJECTS\n+    and then insert all from AWOPER.AWEPROJECTS\n+    because it is transactional synchronisation at destination will not be touched\n+    and no data loss.\n+    commit must be done on the level of the caller of this procedure\n+*/\n+PROCEDURE create_AWEPROJECTS_repl IS\n+    /* function to detect difference in the tables\n+      returns FALSE if no changes and no replication needed\n+      returns TRUE if we force replication\n+    */\n+    FUNCTION detect_AWEPROJECTS_changes RETURN BOOLEAN AS\n+        l_temp_count_src   NUMBER := 0;\n+        l_temp_count_dst   NUMBER := 0;\n+\n+    BEGIN\n+        SELECT COUNT(*)\n+          INTO l_temp_count_src\n+          FROM ( SELECT * FROM AWOPER.AWEPROJECTS\n+                 MINUS\n+                 SELECT * FROM REPL_AWEPROJECTS\n+               );\n+\n+        SELECT COUNT(*)\n+          INTO l_temp_count_dst\n+          FROM ( SELECT * FROM REPL_AWEPROJECTS\n+                 MINUS\n+                 SELECT * FROM AWOPER.AWEPROJECTS\n+               );\n+\n+        IF l_temp_count_src > 0 THEN\n+            RETURN TRUE;\n+        END IF;\n+\n+        IF l_temp_count_dst > 0 THEN\n+            RETURN TRUE;\n+        END IF;\n+\n+        RETURN FALSE;\n+\n+      END;\n+\n+BEGIN\n+    IF detect_AWEPROJECTS_changes() THEN\n+        ADD_REPL_LOG_RECORD('AWOPER.AWEPROJECTS replica creation to REPL_AWEPROJECTS');\n+        EXECUTE IMMEDIATE 'DELETE FROM REPL_AWEPROJECTS';\n+        EXECUTE IMMEDIATE 'INSERT INTO REPL_AWEPROJECTS SELECT * FROM AWOPER.AWEPROJECTS';\n+    END IF;\n+END;\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+description : \n+    If there are any diferences between current replica and current AWOPER.AWEPROJECTUSERS table\n+    procedure recreates REPL_AWEPROJECTUSERS table \n+    if synchronisation procedure queries replication table while delete all records REPL_AWEPROJECTUSERS\n+    and then insert all from AWOPER.AWEPROJECTUSERS\n+    because it is transactional synchronisation at destination will not be touched\n+    and no data loss.\n+    commit must be done on the level of the caller of this procedure\n+*/\n+PROCEDURE create_AWEPROJECTUSERS_repl IS\n+    /* function to detect difference in the tables\n+      returns FALSE if no changes and no replication needed\n+      returns TRUE if we force replication\n+    */\n+    FUNCTION detect_AWEPROJECTUSERS_changes RETURN BOOLEAN AS\n+\n+        l_temp_count_src   NUMBER := 0;\n+        l_temp_count_dst   NUMBER := 0;\n+\n+    BEGIN\n+        SELECT COUNT(*)\n+          INTO l_temp_count_src\n+          FROM ( SELECT * FROM AWOPER.AWEPROJECTUSERS\n+                 MINUS\n+                 SELECT * FROM REPL_AWEPROJECTUSERS\n+               );\n+\n+        SELECT COUNT(*)\n+          INTO l_temp_count_dst\n+          FROM ( SELECT * FROM REPL_AWEPROJECTUSERS\n+                 MINUS\n+                 SELECT * FROM AWOPER.AWEPROJECTUSERS\n+               );\n+\n+        IF l_temp_count_src > 0 THEN\n+            RETURN TRUE;\n+        END IF;\n+\n+        IF l_temp_count_dst > 0 THEN\n+            RETURN TRUE;\n+        END IF;\n+\n+        RETURN FALSE;\n+    END;\n+\n+BEGIN\n+    IF detect_AWEPROJECTUSERS_changes THEN\n+        ADD_REPL_LOG_RECORD('AWOPER.AWEPROJECTUSERS replica creation to REPL_AWEPROJECTUSERS');\n+        EXECUTE IMMEDIATE 'DELETE FROM REPL_AWEPROJECTUSERS';\n+        EXECUTE IMMEDIATE 'INSERT INTO REPL_AWEPROJECTUSERS SELECT * FROM AWOPER.AWEPROJECTUSERS';\n+    END IF;\n+END;\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+description : \n+    If there are any diferences between current replica and current AWOPER.AWEEUCLIDUSER table\n+    procedure recreates REPL_AWEEUCLIDUSER table \n+    if synchronisation procedure queries replication table while delete all records REPL_AWEEUCLIDUSER\n+    and then insert all from AWOPER.AWEEUCLIDUSER\n+    because it is transactional synchronisation at destination will not be touched\n+    and no data loss.\n+    commit must be done on the level of the caller of this procedure\n+*/\n+PROCEDURE create_AWEEUCLIDUSERS_repl IS\n+    /* function to detect difference in the tables\n+      returns FALSE if no changes and no replication needed\n+      returns TRUE if we force replication\n+    */\n+    FUNCTION detect_AWEEUCLIDUSERS_changes RETURN BOOLEAN AS\n+\n+        l_temp_count_src   NUMBER := 0;\n+        l_temp_count_dst   NUMBER := 0;\n+\n+    BEGIN\n+        SELECT COUNT(*)\n+          INTO l_temp_count_src\n+          FROM ( SELECT * FROM AWOPER.AWEEUCLIDUSERS\n+                 MINUS\n+                 SELECT * FROM REPL_AWEEUCLIDUSERS\n+               );\n+\n+        SELECT COUNT(*)\n+          INTO l_temp_count_dst\n+          FROM ( SELECT * FROM REPL_AWEEUCLIDUSERS\n+                 MINUS\n+                 SELECT * FROM AWOPER.AWEEUCLIDUSERS\n+               );\n+\n+        IF l_temp_count_src > 0 THEN\n+            RETURN TRUE;\n+        END IF;\n+\n+        IF l_temp_count_dst > 0 THEN\n+            RETURN TRUE;\n+        END IF;\n+\n+        RETURN FALSE;\n+    END;\n+\n+BEGIN\n+    IF detect_AWEEUCLIDUSERS_changes THEN\n+        ADD_REPL_LOG_RECORD('AWOPER.AWEEUCLIDUSERS replica creation to REPL_AWEEUCLIDUSERS');\n+        EXECUTE IMMEDIATE 'DELETE FROM REPL_AWEEUCLIDUSERS';\n+        EXECUTE IMMEDIATE 'INSERT INTO REPL_AWEEUCLIDUSERS SELECT * FROM AWOPER.AWEEUCLIDUSERS';\n+    END IF;\n+\n+END;\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+description : \n+    If there are any diferences between current replica and current ORACLE accounts like 'EC_%' \n+    procedure recreates REPL_ORACLEUSERS table \n+    if synchronisation procedure queries replication table while delete all records REPL_ORACLEUSERS\n+    and then insert all from ORACLE account by the standard query\n+    because it is transactional synchronisation at destination will not be touched\n+    and no data loss.\n+    commit must be done on the level of the caller of this procedure\n+*/\n+PROCEDURE create_ORACLEUSERS_repl IS\n+    ddl_sql     VARCHAR2(4000);\n+\n+    /* function to detect difference in the tables\n+      returns FALSE if no changes and no replication needed\n+      returns TRUE if we force replication\n+    */\n+    FUNCTION detect_ORACLEUSERS_changes RETURN BOOLEAN AS\n+\n+        l_temp_count_src   NUMBER := 0;\n+        l_temp_count_dst   NUMBER := 0;\n+\n+    BEGIN\n+        SELECT COUNT(*)\n+          INTO l_temp_count_src\n+          FROM ( SELECT * FROM (\n+                        SELECT USER_ID, USER#, USERNAME, ACCOUNT_STATUS, PROFILE, name, spare4\n+                          FROM sys.user$, sys.dba_users\n+                         WHERE 1 = 1\n+                           AND name LIKE 'EC\\_%' ESCAPE '\\'\n+                           AND USERNAME LIKE 'EC\\_%' ESCAPE '\\'\n+                           AND sys.user$.USER# = sys.dba_users.USER_ID\n+                        )\n+                 MINUS\n+                 SELECT * FROM REPL_ORACLEUSERS\n+               );\n+\n+        SELECT COUNT(*)\n+          INTO l_temp_count_dst\n+          FROM ( SELECT * FROM REPL_ORACLEUSERS\n+                 MINUS\n+                 SELECT * FROM (\n+                        SELECT USER_ID, USER#, USERNAME, ACCOUNT_STATUS, PROFILE, name, spare4\n+                          FROM sys.user$, sys.dba_users\n+                         WHERE 1 = 1\n+                           AND name LIKE 'EC\\_%' ESCAPE '\\'\n+                           AND USERNAME LIKE 'EC\\_%' ESCAPE '\\'\n+                           AND sys.user$.USER# = sys.dba_users.USER_ID\n+                        )\n+               );\n+\n+        IF l_temp_count_src > 0 THEN\n+            RETURN TRUE;\n+        END IF;\n+\n+        IF l_temp_count_dst > 0 THEN\n+            RETURN TRUE;\n+        END IF;\n+\n+        RETURN FALSE;\n+    END;\n+\n+\n+BEGIN\n+    IF detect_ORACLEUSERS_changes THEN\n+        ADD_REPL_LOG_RECORD('sys.user$, sys.dba_users replica creation to REPL_ORACLEUSERS');\n+        ddl_sql := 'INSERT INTO REPL_ORACLEUSERS '                                             ||\n+                   '  SELECT USER_ID, USER#, USERNAME, ACCOUNT_STATUS, PROFILE, name, spare4 ' ||\n+                   '    FROM sys.user$, sys.dba_users'                                         ||\n+                   '   WHERE 1 = 1 '                                                           ||\n+                   '     AND name LIKE ''EC\\_%'' ESCAPE ''\\'''                                 ||\n+                   '     AND USERNAME LIKE ''EC\\_%'' ESCAPE ''\\'''                             ||\n+                   '     AND sys.user$.USER# = sys.dba_users.USER_ID';\n+        EXECUTE IMMEDIATE 'DELETE FROM REPL_ORACLEUSERS';\n+        EXECUTE IMMEDIATE ddl_sql;\n+    END IF;\n+END;\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+description : \n+    check package specification \n+*/\n+PROCEDURE create_synch_tables_replica IS\n+    PRAGMA AUTONOMOUS_TRANSACTION;\n+BEGIN\n+    create_AWEUSERS_repl;\n+    create_AWEPROJECTUSERS_repl;\n+    create_AWEPROJECTUSERS_repl;\n+    create_AWEEUCLIDUSERS_repl;\n+    create_ORACLEUSERS_repl;\n+    \n+    --commits any changes that we made by the create_*_repl procedures calls\n+    COMMIT;\n+END create_synch_tables_replica;\n+\n+END USERSMASTER_ECPKG_SOURCE;\n+/\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/SOURCE/scripts/source_ec_usersmaster_create_schema_objects.sql": [
                        [
                            "@@ -0,0 +1,18 @@\n+CREATE TABLE REPL_LOG (msg_date date, info VARCHAR2(255));\n+CREATE TABLE REPL_AWEUSERS AS SELECT * FROM AWOPER.AWEUSERS;\n+CREATE TABLE REPL_AWEPROJECTS AS SELECT * FROM AWOPER.AWEPROJECTS;\n+CREATE TABLE REPL_AWEPROJECTUSERS AS SELECT * FROM AWOPER.AWEPROJECTUSERS;\n+CREATE TABLE REPL_AWEEUCLIDUSERS AS SELECT * FROM AWOPER.AWEEUCLIDUSERS;\n+CREATE TABLE REPL_USERSSTOPLIST (add_date date, username VARCHAR2(255));\n+\n+CREATE TABLE REPL_ORACLEUSERS AS \n+    SELECT USER_ID, USER#, USERNAME, ACCOUNT_STATUS, PROFILE, name, spare4 \n+      FROM sys.user$, sys.dba_users\n+     WHERE 1 = 1 \n+       AND name LIKE 'EC\\_%' ESCAPE '\\'                  \n+       AND USERNAME LIKE 'EC\\_%' ESCAPE '\\' \n+       AND sys.user$.USER# = sys.dba_users.USER_ID;\n+\n+INSERT INTO REPL_USERSSTOPLIST (add_date, username) \n+VALUES (SYSDATE, '&1');\n+COMMIT;\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/SOURCE/scripts/source_ec_usersmaster_create_user.sql": [
                        [
                            "@@ -0,0 +1,13 @@\n+create user &1 identified by &2;\n+grant create session to &1;\n+grant create table to &1;\n+grant create procedure to &1;\n+grant create view to &1;\n+grant unlimited tablespace to &1;\n+grant select on AWOPER.AWEUSERS to &1;\n+grant select on AWOPER.AWEPROJECTS to &1;\n+grant select on AWOPER.AWEPROJECTUSERS to &1;\n+grant select on AWOPER.AWEEUCLIDUSERS to &1;\n+grant select on SYS.DBA_USERS to &1;\n+grant select on sys.user$ to &1;\n+grant create job to &1;\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/SOURCE/source_ec_usersmaster_changepwd.sql": [
                        [
                            "@@ -0,0 +1,8 @@\n+set verify off\n+\n+--get user input\n+ACCEPT ec_usersmaster_source_username CHAR DEFAULT 'EC_USERSMASTER_SRC' PROMPT 'Provide users master username (default: EC_USERSMASTER_SRC):>'\n+ACCEPT ec_usersmaster_source_username_pwd CHAR DEFAULT 'NTGWRVsZSiRYxcYQ8qaSX7368jkqbT' PROMPT ' new password (default: NTGWRVsZSiRYxcYQ8qaSX7368jkqbT):>'\n+\n+ALTER USER &ec_usersmaster_source_username IDENTIFIED BY &ec_usersmaster_source_username_pwd;\n+\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ]
                    ],
                    "services/intersect/IntersectionMapUpdate.py": [
                        [
                            "@@ -20,6 +20,8 @@\n \n import json\n \n+from pprint import pformat\n+\n from common.log.Message import Message\n from common.services.general.HtmlBase import HtmlBase\n \n@@ -28,7 +30,7 @@ from euclid.dm_bindings import (\n     DpdIntersectionMaps,\n )\n from euclid.services.rest.RESTGeneric import RestGeneric\n-from euclid.util.IntersectionMapUpdate import update_intersection_obj, handle_dpd_params\n+from euclid.util.IntersectionMapUpdate import update_intersection_obj, handle_dpd_params, get_config\n \n \n class IntersectionMapUpdate(RestGeneric):\n@@ -116,8 +118,10 @@ class IntersectionMapUpdate(RestGeneric):\n                 ret[product_id] = f'SKIP {reason}'\n                 Message(f'NOT using {cls.__name__} with ProductId {product_id}; {reason}')\n         Message(f'commit flag {self.commit}')\n+        config = get_config(dpdIM, commit=self.commit)\n+        Message(f'config: {pformat(config)}')\n         for obj in objects:\n-            intersections = update_intersection_obj(dpdIM, obj, commit=self.commit)\n+            intersections = update_intersection_obj(dpdIM, obj, config)\n             ret[obj.Header.ProductId.LimitedString] = len(intersections)\n             Message(f'added {len(intersections)} Intersections ProductId {obj.Header.ProductId.LimitedString}')\n         return ret\n",
                            "Merge branch 'wjv/bugfix/intersectionmap_added_method_get_config' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-10T13:25:42.000+00:00",
                            "93710c8381fdd9b9cf62acc57611c8c25a8aed6e"
                        ],
                        [
                            "@@ -125,4 +125,3 @@ class IntersectionMapUpdate(RestGeneric):\n             ret[obj.Header.ProductId.LimitedString] = len(intersections)\n             Message(f'added {len(intersections)} Intersections ProductId {obj.Header.ProductId.LimitedString}')\n         return ret\n-\n",
                            "Merge branch 'assist/autoformat/wjv/bugfix/intersectionmap_added_method_get_config/e7cf1976' into 'wjv/bugfix/intersectionmap_added_method_get_config'",
                            "Willem-Jan Vriend",
                            "2023-07-10T13:07:42.000+00:00",
                            "be40299d3229deb20edd1b449ade592f33b848d8"
                        ],
                        [
                            "@@ -125,4 +125,3 @@ class IntersectionMapUpdate(RestGeneric):\n             ret[obj.Header.ProductId.LimitedString] = len(intersections)\n             Message(f'added {len(intersections)} Intersections ProductId {obj.Header.ProductId.LimitedString}')\n         return ret\n-\n",
                            "Auto-format files with autopep8",
                            "CI Bot",
                            "2023-07-10T13:06:16.000+00:00",
                            "8e0e9fe7a55152a692d04bf2229d092c3783e1b1"
                        ],
                        [
                            "@@ -20,6 +20,8 @@\n \n import json\n \n+from pprint import pformat\n+\n from common.log.Message import Message\n from common.services.general.HtmlBase import HtmlBase\n \n@@ -28,7 +30,7 @@ from euclid.dm_bindings import (\n     DpdIntersectionMaps,\n )\n from euclid.services.rest.RESTGeneric import RestGeneric\n-from euclid.util.IntersectionMapUpdate import update_intersection_obj, handle_dpd_params\n+from euclid.util.IntersectionMapUpdate import update_intersection_obj, handle_dpd_params, get_config\n \n \n class IntersectionMapUpdate(RestGeneric):\n@@ -116,8 +118,11 @@ class IntersectionMapUpdate(RestGeneric):\n                 ret[product_id] = f'SKIP {reason}'\n                 Message(f'NOT using {cls.__name__} with ProductId {product_id}; {reason}')\n         Message(f'commit flag {self.commit}')\n+        config = get_config(dpdIM, commit=self.commit)\n+        Message(f'config: {pformat(config)}')\n         for obj in objects:\n-            intersections = update_intersection_obj(dpdIM, obj, commit=self.commit)\n+            intersections = update_intersection_obj(dpdIM, obj, config)\n             ret[obj.Header.ProductId.LimitedString] = len(intersections)\n             Message(f'added {len(intersections)} Intersections ProductId {obj.Header.ProductId.LimitedString}')\n         return ret\n+\n",
                            "use get_config() to get the IntersectionMapUpdate config dictionary",
                            "Willem-Jan Vriend",
                            "2023-07-10T15:04:04.000+02:00",
                            "e7cf1976ea097a8af3e3e8f3026a6269f78777b0"
                        ]
                    ],
                    "util/IntersectionMapUpdate.py": [
                        [
                            "@@ -76,6 +76,7 @@ from common.config.Profile import profiles\n from common.database.Context import context\n from common.database.Database import database\n from common.database.support import viewname\n+from common.exceptions import ConfigurationError\n from common.log.Log import Log, log\n from common.log.Message import Message\n \n@@ -94,19 +95,23 @@ from euclid.dm_bindings import (\n from euclid.toolbox.XSDDic import XMLFactory\n from euclid.util.Healpix import convert_area_healpix, getids, getintersection # CONTAINS\n \n-# TODO; this only finds data products that do not have any reference in the DpdIntersectionMaps object\n-#       but it does not find data products that are partial intersected\n \n+class ConfigException(ConfigurationError):\n+    \"\"\" Exception raised in case of error in config \"\"\"\n+    pass\n \n+\n+# TODO; this only finds data products that do not have any reference in the DpdIntersectionMaps object\n+#       but it does not find data products that are partial intersected\n def get_missing_intersections(dpd, products=None):\n     \"\"\" return ProductId's that are not in the DpdIntersectionMaps \"\"\"\n     result = {}\n     if products is None:\n         #products = all_dataproducts\n-        products = get_default_config().keys()\n+        products = get_default_dpd_config().keys()\n     for product_class in products:\n-        Message(f'Query for missing {product} Intersections')\n-        result[product] = {}\n+        Message(f'Query for missing {product_class} Intersections')\n+        result[product_class] = {}\n         #product_class = dataproduct[product]\n         where = f'''WHERE t.\"Header\".\"ManualValidationStatus\" != 'INVALID'\n   AND t.\"Header\".\"Purpose\" = '{dpd.Header.Purpose}'\n@@ -123,17 +128,18 @@ MINUS\n SELECT DataProductId\n FROM AWOPER.Intersection\n WHERE MapKind = '{mapkind}'\n-  AND DataProductType = '{product.__class__.__name__}'\n+  AND DataProductType = '{product_class}'\n   AND MapOrigin = '{dpd.Header.ProductId.LimitedString}'\n '''\n-            result[product][mapkind] = database.execute_select(sql)\n-            if len(result[product][mapkind]) > 0:\n-                Message(f'Found {len(result[product][mapkind])} {mapkind} Intersections')\n+            result[product_class][mapkind] = database.execute_select(sql)\n+            if len(result[product_class][mapkind]) > 0:\n+                Message(f'Found {len(result[product_class][mapkind])} {mapkind} Intersections')\n     return result\n \n \n # TODO remove the xxx_dataproducts lists, these are now provided in the condig of the DpdIntersectionMaps\n #   class name                            footprint                  ObsId/TileIndex\n+'''\n observation_dataproducts = [\n     'DpdNispRawFrame',                  # Data.ImgSpatialFootprint   Data.ObservationSequence.ObservationId\n     'DpdNirCalibratedFrame',            # Data.ImgSpatialFootprint   Data.ObservationSequence.ObservationId\n@@ -161,6 +167,7 @@ tile_dataproducts = [\n # DpdExtValidatedSingleEpochFrame; add to TileToObservationsMap with Intersection.ObsId empty, for each tile with overlap (by sky query)\n ext_dataproducts = ['DpdExtValidatedSingleEpochFrame']\n all_dataproducts = observation_dataproducts + tile_dataproducts + ext_dataproducts\n+'''\n \n \n # The default ObservationMode or TileUseCase to use\n@@ -221,8 +228,27 @@ def parse_param(key, value):\n     return parsed_key, parsed_value\n \n \n-def get_default_config():\n-    \"\"\" return default config for the IntersectionMaps \"\"\"\n+def get_config(dpdIM, commit=True, use_planned=True):\n+    \"\"\" return the config dictionary \"\"\"\n+    config = {}\n+    if not dpdIM.Parameters or not dpdIM.Parameters.Parameter:\n+        config_dpds = get_default_dpd_config()\n+    else:\n+        try:\n+            config_dpds = handle_dpd_params(dpdIM)\n+        except Exception as e:\n+            Message(f'ERROR; could not determine config from {dpdIM.__class__.__name__} with ProductId {dpdIM.Header.ProductId.LimitedString}: {e}')\n+            raise ConfigException(str(e))\n+    config = {'dataproducts': config_dpds}\n+    config['commit'] = commit\n+    config['use_planned'] = use_planned\n+    config['healpix_order_ratio'] = healpix_order_ratio_default\n+    config['healpix_order_query'] = healpix_order_query_default\n+    return config\n+\n+\n+def get_default_dpd_config():\n+    \"\"\" return default dataproduct config for the IntersectionMaps \"\"\"\n     config = {}\n     for key, value in [\n         ('DpdNispRawFrame'                , 'Data.ImgSpatialFootprint,obs,calculate'),\n@@ -795,7 +821,7 @@ def update_intersection(objects, commit=True, use_planned=True, Purpose=None, Da\n             if separate_proces:\n                 # create log file per dataproduct intersect\n                 # Depending on Log or ThreadedLog is used, init is different\n-                # TODO this needs to be (also) defined in the web service, and cleaned\n+                # TODO this needs to be (also) defined in the web service, and log-watched\n                 log_dir = 'intersect_logs'\n                 os.makedirs(log_dir, exist_ok=True)\n                 log_filename = os.path.join(log_dir, f'Intersect_{obj.__class__.__name__}_{obj.Header.ProductId.LimitedString}.log')\n@@ -815,21 +841,11 @@ def update_intersection(objects, commit=True, use_planned=True, Purpose=None, Da\n                 DataSetRelease = getattr(obj.Header, 'DataSetRelease')\n             for dpdIM in get_DpdIntersectionMaps(Purpose=Purpose, DataSetRelease=DataSetRelease):\n                 Message(f'found {dpdIM.__class__.__name__} with object_id {dpdIM.object_id.binary()}, ProductId {dpdIM.Header.ProductId.LimitedString}')\n-                if not dpdIM.Parameters or not dpdIM.Parameters.Parameter:\n-                    config_dpds = get_default_config()\n-                else:\n-                    try:\n-                        config_dpds = handle_dpd_params(dpdIM)\n-                    except Exception as e:\n-                        Message(f'ERROR; could not determine config from {dpdIM.__class__.__name__} with ProductId {dpdIM.Header.ProductId.LimitedString}: {e}')\n-                        continue\n-                if not config_dpds:\n-                    Message(f'No config found for {dpdIM.__class__.__name__} with ProductId {dpdIM.Header.ProductId.LimitedString}')\n-                config = {'dataproducts': config_dpds}\n-                config['commit'] = commit\n-                config['use_planned'] = use_planned\n-                config['healpix_order_ratio'] = healpix_order_ratio_default\n-                config['healpix_order_query'] = healpix_order_query_default\n+                try:\n+                    config = get_config(dpdIM, commit=commit, use_planned=use_planned)\n+                except ConfigException as e:\n+                    Message(f'Could not determine config for {dpdIM.__class__.__name__} with ProductId {dpdIM.Header.ProductId.LimitedString}; {e}')\n+                    continue\n                 #if obj.__class__.__name__ in all_dataproducts:\n                 if obj.__class__ in config['dataproducts']:\n                     update_intersection_obj(dpdIM, obj, config)\n",
                            "Merge branch 'wjv/bugfix/intersectionmap_added_method_get_config' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-10T13:25:42.000+00:00",
                            "93710c8381fdd9b9cf62acc57611c8c25a8aed6e"
                        ],
                        [
                            "@@ -246,6 +246,7 @@ def get_config(dpdIM, commit=True, use_planned=True):\n     config['healpix_order_query'] = healpix_order_query_default\n     return config\n \n+\n def get_default_dpd_config():\n     \"\"\" return default dataproduct config for the IntersectionMaps \"\"\"\n     config = {}\n",
                            "Merge branch 'assist/autoformat/wjv/bugfix/intersectionmap_added_method_get_config/e7cf1976' into 'wjv/bugfix/intersectionmap_added_method_get_config'",
                            "Willem-Jan Vriend",
                            "2023-07-10T13:07:42.000+00:00",
                            "be40299d3229deb20edd1b449ade592f33b848d8"
                        ],
                        [
                            "@@ -246,6 +246,7 @@ def get_config(dpdIM, commit=True, use_planned=True):\n     config['healpix_order_query'] = healpix_order_query_default\n     return config\n \n+\n def get_default_dpd_config():\n     \"\"\" return default dataproduct config for the IntersectionMaps \"\"\"\n     config = {}\n",
                            "Auto-format files with autopep8",
                            "CI Bot",
                            "2023-07-10T13:06:16.000+00:00",
                            "8e0e9fe7a55152a692d04bf2229d092c3783e1b1"
                        ],
                        [
                            "@@ -76,6 +76,7 @@ from common.config.Profile import profiles\n from common.database.Context import context\n from common.database.Database import database\n from common.database.support import viewname\n+from common.exceptions import ConfigurationError\n from common.log.Log import Log, log\n from common.log.Message import Message\n \n@@ -94,19 +95,23 @@ from euclid.dm_bindings import (\n from euclid.toolbox.XSDDic import XMLFactory\n from euclid.util.Healpix import convert_area_healpix, getids, getintersection # CONTAINS\n \n-# TODO; this only finds data products that do not have any reference in the DpdIntersectionMaps object\n-#       but it does not find data products that are partial intersected\n \n+class ConfigException(ConfigurationError):\n+    \"\"\" Exception raised in case of error in config \"\"\"\n+    pass\n \n+\n+# TODO; this only finds data products that do not have any reference in the DpdIntersectionMaps object\n+#       but it does not find data products that are partial intersected\n def get_missing_intersections(dpd, products=None):\n     \"\"\" return ProductId's that are not in the DpdIntersectionMaps \"\"\"\n     result = {}\n     if products is None:\n         #products = all_dataproducts\n-        products = get_default_config().keys()\n+        products = get_default_dpd_config().keys()\n     for product_class in products:\n-        Message(f'Query for missing {product} Intersections')\n-        result[product] = {}\n+        Message(f'Query for missing {product_class} Intersections')\n+        result[product_class] = {}\n         #product_class = dataproduct[product]\n         where = f'''WHERE t.\"Header\".\"ManualValidationStatus\" != 'INVALID'\n   AND t.\"Header\".\"Purpose\" = '{dpd.Header.Purpose}'\n@@ -123,17 +128,18 @@ MINUS\n SELECT DataProductId\n FROM AWOPER.Intersection\n WHERE MapKind = '{mapkind}'\n-  AND DataProductType = '{product.__class__.__name__}'\n+  AND DataProductType = '{product_class}'\n   AND MapOrigin = '{dpd.Header.ProductId.LimitedString}'\n '''\n-            result[product][mapkind] = database.execute_select(sql)\n-            if len(result[product][mapkind]) > 0:\n-                Message(f'Found {len(result[product][mapkind])} {mapkind} Intersections')\n+            result[product_class][mapkind] = database.execute_select(sql)\n+            if len(result[product_class][mapkind]) > 0:\n+                Message(f'Found {len(result[product_class][mapkind])} {mapkind} Intersections')\n     return result\n \n \n # TODO remove the xxx_dataproducts lists, these are now provided in the condig of the DpdIntersectionMaps\n #   class name                            footprint                  ObsId/TileIndex\n+'''\n observation_dataproducts = [\n     'DpdNispRawFrame',                  # Data.ImgSpatialFootprint   Data.ObservationSequence.ObservationId\n     'DpdNirCalibratedFrame',            # Data.ImgSpatialFootprint   Data.ObservationSequence.ObservationId\n@@ -161,6 +167,7 @@ tile_dataproducts = [\n # DpdExtValidatedSingleEpochFrame; add to TileToObservationsMap with Intersection.ObsId empty, for each tile with overlap (by sky query)\n ext_dataproducts = ['DpdExtValidatedSingleEpochFrame']\n all_dataproducts = observation_dataproducts + tile_dataproducts + ext_dataproducts\n+'''\n \n \n # The default ObservationMode or TileUseCase to use\n@@ -221,8 +228,26 @@ def parse_param(key, value):\n     return parsed_key, parsed_value\n \n \n-def get_default_config():\n-    \"\"\" return default config for the IntersectionMaps \"\"\"\n+def get_config(dpdIM, commit=True, use_planned=True):\n+    \"\"\" return the config dictionary \"\"\"\n+    config = {}\n+    if not dpdIM.Parameters or not dpdIM.Parameters.Parameter:\n+        config_dpds = get_default_dpd_config()\n+    else:\n+        try:\n+            config_dpds = handle_dpd_params(dpdIM)\n+        except Exception as e:\n+            Message(f'ERROR; could not determine config from {dpdIM.__class__.__name__} with ProductId {dpdIM.Header.ProductId.LimitedString}: {e}')\n+            raise ConfigException(str(e))\n+    config = {'dataproducts': config_dpds}\n+    config['commit'] = commit\n+    config['use_planned'] = use_planned\n+    config['healpix_order_ratio'] = healpix_order_ratio_default\n+    config['healpix_order_query'] = healpix_order_query_default\n+    return config\n+\n+def get_default_dpd_config():\n+    \"\"\" return default dataproduct config for the IntersectionMaps \"\"\"\n     config = {}\n     for key, value in [\n         ('DpdNispRawFrame'                , 'Data.ImgSpatialFootprint,obs,calculate'),\n@@ -795,7 +820,7 @@ def update_intersection(objects, commit=True, use_planned=True, Purpose=None, Da\n             if separate_proces:\n                 # create log file per dataproduct intersect\n                 # Depending on Log or ThreadedLog is used, init is different\n-                # TODO this needs to be (also) defined in the web service, and cleaned\n+                # TODO this needs to be (also) defined in the web service, and log-watched\n                 log_dir = 'intersect_logs'\n                 os.makedirs(log_dir, exist_ok=True)\n                 log_filename = os.path.join(log_dir, f'Intersect_{obj.__class__.__name__}_{obj.Header.ProductId.LimitedString}.log')\n@@ -815,21 +840,11 @@ def update_intersection(objects, commit=True, use_planned=True, Purpose=None, Da\n                 DataSetRelease = getattr(obj.Header, 'DataSetRelease')\n             for dpdIM in get_DpdIntersectionMaps(Purpose=Purpose, DataSetRelease=DataSetRelease):\n                 Message(f'found {dpdIM.__class__.__name__} with object_id {dpdIM.object_id.binary()}, ProductId {dpdIM.Header.ProductId.LimitedString}')\n-                if not dpdIM.Parameters or not dpdIM.Parameters.Parameter:\n-                    config_dpds = get_default_config()\n-                else:\n-                    try:\n-                        config_dpds = handle_dpd_params(dpdIM)\n-                    except Exception as e:\n-                        Message(f'ERROR; could not determine config from {dpdIM.__class__.__name__} with ProductId {dpdIM.Header.ProductId.LimitedString}: {e}')\n-                        continue\n-                if not config_dpds:\n-                    Message(f'No config found for {dpdIM.__class__.__name__} with ProductId {dpdIM.Header.ProductId.LimitedString}')\n-                config = {'dataproducts': config_dpds}\n-                config['commit'] = commit\n-                config['use_planned'] = use_planned\n-                config['healpix_order_ratio'] = healpix_order_ratio_default\n-                config['healpix_order_query'] = healpix_order_query_default\n+                try:\n+                    config = get_config(dpdIM, commit=commit, use_planned=use_planned)\n+                except ConfigException as e:\n+                    Message(f'Could not determine config for {dpdIM.__class__.__name__} with ProductId {dpdIM.Header.ProductId.LimitedString}; {e}')\n+                    continue\n                 #if obj.__class__.__name__ in all_dataproducts:\n                 if obj.__class__ in config['dataproducts']:\n                     update_intersection_obj(dpdIM, obj, config)\n",
                            "added method get_config() for generating the config dictionary",
                            "Willem-Jan Vriend",
                            "2023-07-10T15:03:07.000+02:00",
                            "ed028a09c0f160b903c8b3f601804249ad14bcd4"
                        ]
                    ],
                    "toolbox/XSDDic.py": [
                        [
                            "@@ -1794,7 +1794,7 @@ class XMLFactory:\n                 obj.__setattr__(i, tmp_obj)\n         return obj\n \n-    def xml2obj(self, inp_file, commit=False, true_name=False, validate_full=True):\n+    def xml2obj(self, inp_file, commit=False, true_name=False, validate_full=False):\n         if not os.path.exists(inp_file):\n             raise XSDError(\"No file %s\" % inp_file)\n         if validate_full:\n",
                            "Merge branch 'belikov/hotfix/donotfullyvalidate' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-06-27T13:47:03.000+00:00",
                            "3d957348cc0644fbffcc485c56bd8db4a61d8a6e"
                        ],
                        [
                            "@@ -1,4 +1,5 @@\n import os, fnmatch, datetime, copy, math\n+from lxml import etree\n from functools import lru_cache\n \n from common.log.Message import Message, DEBUG\n@@ -723,16 +724,23 @@ class XMLFactoryLoad:\n         self.namespaces_dict = {}\n         self.types = {}\n         self.parser = Xml2Object()\n+        self.xsds = {}\n         if not os.path.exists(schema_root_path):\n             raise XSDError(\"There is no such directory: %s\" % schema_root_path)\n \n         xsd_package_count = 0\n         for root, directories, files in os.walk(schema_root_path):\n             for filename in fnmatch.filter(files, 'euc-*.xsd'):\n-                tmp_r = self.parser.Parse(root + \"/\" + filename)\n+                xsd_path = os.path.join(root, filename)\n+                tmp_r = self.parser.Parse(xsd_path)\n                 tmp_p = XSDPackage(tmp_r)\n                 self.packages_array.append(tmp_p)\n                 xsd_package_count = xsd_package_count + 1\n+                xmlschema_doc = etree.parse(open(xsd_path))\n+                namespace = tmp_p.target\n+                if namespace in self.xsds:\n+                    raise XSDError(f'Duplicated namespace {namespace}')\n+                self.xsds[namespace] = etree.XMLSchema(xmlschema_doc)\n         if (xsd_package_count == 0):\n             raise XSDError(\"There are no XSD packages in directory: %s\" % schema_root_path)\n \n@@ -932,6 +940,7 @@ class XMLFactory:\n         self.obj_commit = []\n         self.tmp_namespaces = []\n         self.tmp_names = []\n+        self.xsds = {}\n \n         if InputSchema and isinstance(InputSchema, XMLFactoryLoad):\n             self.packages_array = copy.deepcopy(InputSchema.packages_array)\n@@ -946,10 +955,16 @@ class XMLFactory:\n         xsd_package_count = 0\n         for root, directories, files in os.walk(schema_root_path):\n             for filename in fnmatch.filter(files, 'euc-*.xsd'):\n-                tmp_r = self.parser.Parse(root + \"/\" + filename)\n+                xsd_path = os.path.join(root, filename)\n+                tmp_r = self.parser.Parse(xsd_path)\n                 tmp_p = XSDPackage(tmp_r)\n                 self.packages_array.append(tmp_p)\n                 xsd_package_count = xsd_package_count + 1\n+                xmlschema_doc = etree.parse(open(xsd_path))\n+                namespace = tmp_p.target\n+                if namespace in self.xsds:\n+                    raise XSDError(f'Duplicated namespace {namespace}')\n+                self.xsds[namespace] = etree.XMLSchema(xmlschema_doc)\n         if (xsd_package_count == 0):\n             raise XSDError(\"There are no XSD packages in directory: %s\" % schema_root_path)\n \n@@ -1271,6 +1286,19 @@ class XMLFactory:\n         else:\n             return \"Not an element\"\n \n+    def validate_full(self, inp_file):\n+        xml_doc = etree.parse(open(inp_file))\n+        xml_doc_root = xml_doc.getroot()\n+        prefix = xml_doc_root.prefix\n+        namespace = xml_doc_root.nsmap[prefix]\n+        if namespace in self.xsds:\n+            valid = self.xsds[namespace].validate(xml_doc)\n+            if not valid:\n+                return False, f'{self.xsds[namespace].error_log.last_error}'\n+        else:\n+            return False, f'no such namespace {namespace}'\n+        return True, ''\n+\n     def pre_check(self, inp_name, inp_obj):\n         obj_val = inp_obj.cdata\n         q = (precheckmap[inp_name] == obj_val)\n@@ -1766,9 +1794,13 @@ class XMLFactory:\n                 obj.__setattr__(i, tmp_obj)\n         return obj\n \n-    def xml2obj(self, inp_file, commit=False, true_name=False):\n+    def xml2obj(self, inp_file, commit=False, true_name=False, validate_full=True):\n         if not os.path.exists(inp_file):\n             raise XSDError(\"No file %s\" % inp_file)\n+        if validate_full:\n+            valid, error = self.validate_full(inp_file)\n+            if not valid:\n+                raise XSDError(error)\n         obj = None\n         tmp_el = self.parser.Parse(inp_file)\n #          print('XSD commit:',commit)\n",
                            "Merge branch 'belikov/feature/validatexml' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-06-21T07:26:36.000+00:00",
                            "b3a2d85746a60b02675f5c48bab912f7845c0e47"
                        ]
                    ],
                    "conda-recipe/meta.yaml": [
                        [
                            "@@ -37,7 +37,7 @@ requirements:\n     - lxml\n     - networkx 2.*\n     - healpy\n-    - shapely\n+    - shapely 2.*\n     - click\n     - attrs\n     - gitpython 3.*\n",
                            "Merge branch 'drb/bugfix/existing-shapely-not-updated' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-06-27T13:00:05.000+00:00",
                            "f2791b06fdaeccd9bcc151bc959c4531710c93ac"
                        ]
                    ],
                    "services/intersect/Intersect.py": [
                        [
                            "@@ -84,6 +84,8 @@ class Intersect(RestGeneric):\n         return p_i\n \n     def getHealpixFromFile(self, class_name, dpd_id):\n+        out_oid = ''\n+        out_ret = []\n         ret = []\n         file_path = None\n         if len(dpd_id) < 6:\n@@ -98,28 +100,56 @@ class Intersect(RestGeneric):\n         if os.path.isfile(file_path):\n             with open(file_path, 'rb') as f:\n                 ret = pickle.load(f)\n+            if len(ret) > 0:\n+                out_oid = ret[0]\n+                out_ret = ret[1]\n         else:\n             input_obj = dataproduct[class_name].Header.ProductId.LimitedString == dpd_id\n             Message(class_name)\n             Message(dpd_id)\n             Message(len(input_obj))\n             if len(input_obj) > 0:\n-                ret = get_obj_healpix(input_obj[0], order=13)\n-                if len(ret) > 0:\n+                out_oid = input_obj[0].object_id.unquote()\n+                out_ret = get_obj_healpix(input_obj[0], order=13)\n+                if len(out_ret) > 0:\n+                    out_ret = [int(k) for k in out_ret]\n+                    dump_out = [out_oid, out_ret]\n                     with open(file_path, 'wb') as f:\n-                        pickle.dump(ret, f, pickle.HIGHEST_PROTOCOL)\n-        if len(ret) > 0:\n-            ret = [int(k) for k in ret]\n+                        pickle.dump(dump_out, f, pickle.HIGHEST_PROTOCOL)\n+        return out_oid, out_ret\n+\n+    def prepareResult(self, class_name, p1, p2, reverse, data_product_ids, healpix_array_13, ret):\n+        \"\"\" prepare result \"\"\"\n+        total_healpixes = []\n+        num_inp = float(len(healpix_array_13))\n+        for dpd_id in data_product_ids:\n+            obj_id, hpx = self.getHealpixFromFile(class_name, dpd_id)\n+            num_hpx = len(hpx)\n+            total_healpixes.extend(hpx)\n+            inter_area = getintersection(hpx, healpix_array_13)\n+            num_int = float(len(inter_area))\n+            p_i = self.get_p_i(num_int, num_inp, num_hpx, reverse)\n+            if p1 and p2:\n+                if p1 <= p_i and p2 >= p_i:\n+                    ret[class_name][dpd_id] = p_i\n+                    ret['convert_ids'][dpd_id] = obj_id\n+            else:\n+                ret[class_name][dpd_id] = p_i\n+                ret['convert_ids'][dpd_id] = obj_id\n+        inter_area_all = getintersection(total_healpixes, healpix_array_13)\n+        ret['total'][class_name] = float(len(inter_area_all)) / num_inp\n         return ret\n \n     def getHealpixNew(self, input_area, class_name, p1, p2, reverse):\n         \"\"\" get healpix from scratch \"\"\"\n         ret = {}\n         ret[class_name] = {}\n+        ret['convert_ids'] = {}\n         data_product_ids = []\n         healpix_array_5 = convert_area_healpix(input_area, order=5)\n         healpix_array_13 = convert_area_healpix(input_area, order=13)\n-        num_inp = float(len(healpix_array_13))\n+        healpix_array_5 = [int(k) for k in healpix_array_5]\n+        healpix_array_13 = [int(k) for k in healpix_array_13]\n         num_hpx = 0\n         cursor = database.cursor()\n         if 'database_arraysize' in Env:\n@@ -128,67 +158,42 @@ class Intersect(RestGeneric):\n             cursor.arraysize = 100000\n         data_product_ids = getids(cursor, class_name, healpix_array_5, data_product_ids)\n         cursor.close()\n-        total_healpixes = []\n-        for dpd_id in data_product_ids:\n-            hpx = self.getHealpixFromFile(class_name, dpd_id)\n-            num_hpx = len(hpx)\n-            total_healpixes.extend(hpx)\n-            inter_area = getintersection(hpx, healpix_array_13)\n-            num_int = float(len(inter_area))\n-            p_i = self.get_p_i(num_int, num_inp, num_hpx, reverse)\n-            if p1 and p2:\n-                if p1 <= p_i and p2 >= p_i:\n-                    ret[class_name][dpd_id] = p_i\n-            else:\n-                ret[class_name][dpd_id] = p_i\n-        inter_area_all = getintersection(total_healpixes, healpix_array_13)\n         ret['total'] = {}\n-        ret['total'][class_name] = float(len(inter_area_all)) / num_inp\n+        ret = self.prepareResult(class_name, p1, p2, reverse, data_product_ids, healpix_array_13, ret)\n         return ret\n \n     def getHealpixWith5(self, input_area, p1, p2, input_array, reverse, area_healpix):\n         \"\"\" get healpix from scratch \"\"\"\n         ret = {}\n+        ret['convert_ids'] = {}\n         healpix_array_13 = []\n         if area_healpix:\n             healpix_array_13 = input_area\n         else:\n             healpix_array_13 = convert_area_healpix(input_area, order=13)\n+        healpix_array_13 = [int(k) for k in healpix_array_13]\n         num_inp = float(len(healpix_array_13))\n         num_hpx = 0\n-        total_healpixes = []\n         for class_name in input_array:\n             ret[class_name] = {}\n             ret['total'] = {}\n-            total_healpixes = []\n-            for dpd_id in input_array[class_name]:\n-                hpx = self.getHealpixFromFile(class_name, dpd_id)\n-                num_hpx = len(hpx)\n-                total_healpixes.extend(hpx)\n-                inter_area = getintersection(hpx, healpix_array_13)\n-                num_int = float(len(inter_area))\n-                p_i = self.get_p_i(num_int, num_inp, num_hpx, reverse)\n-                if p1 and p2:\n-                    if p1 <= p_i and p2 >= p_i:\n-                        ret[class_name][dpd_id] = p_i\n-                else:\n-                    ret[class_name][dpd_id] = p_i\n-            inter_area_all = getintersection(total_healpixes, healpix_array_13)\n-            ret['total'][class_name] = float(len(inter_area_all)) / num_inp\n+            ret = self.prepareResult(class_name, p1, p2, reverse, input_array[class_name], healpix_array_13, ret)\n         return ret\n \n     def getHealpixWithDataProduct(self, input_array):\n         \"\"\" get healpix from scratch \"\"\"\n         ret = {}\n+        ret['convert_ids'] = {}\n         total_healpixes = []\n         for class_name in input_array:\n             ret[class_name] = {}\n             ret['total'] = {}\n             total_healpixes = []\n             for dpd_id in input_array[class_name]:\n-                hpx = self.getHealpixFromFile(class_name, dpd_id)\n+                obj_id, hpx = self.getHealpixFromFile(class_name, dpd_id)\n                 total_healpixes.extend(hpx)\n                 ret[class_name][dpd_id] = hpx\n+                ret['convert_ids'][dpd_id] = obj_id\n             ret['total'][class_name] = total_healpixes\n         return ret\n \n",
                            "Merge branch 'belikov/feature/intersect' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-06-21T07:25:53.000+00:00",
                            "9bb20e9cd17825bfe31766b8f073dbcf168a8ddc"
                        ]
                    ]
                },
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": [
                    {
                        "name": "0.9.9",
                        "created_at": "2023-06-13T18:04:52.000+00:00",
                        "author_name": "Danny Boxhoorn"
                    },
                    {
                        "name": "1.0.0",
                        "created_at": "2023-07-27T10:20:01.000+00:00",
                        "author_name": "Danny Boxhoorn"
                    }
                ]
            },
            "ST-EAS/ST_EASDSS": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EASCommon": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EASTestCatalog": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            }
        }
    },
    "LE2": {
        "PF-VIS": {
            "PF-VIS/VIS_DiffractionSpikesFocus": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/vis_instrument_tools": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_DQReport": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "OU-VIS/VIS_PTC": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_ImageLib": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/vis_autoarray": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_Common": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_CTI_Pipeline": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_AutoFit": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_LargeFlatCalibration": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/vis_illumcalibration": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/vis_darkcorrection": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/vis_darkcalibration": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_IAL_Pipelines": {
                "start date": "2023-07-25T14:44:46",
                "end date": "2023-08-02T20:20:55",
                "start tag": "13.0.5",
                "end tag": "13.0.6",
                "count_files_modified": "43",
                "modifications_by_file": {
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_CTIMasterCI_Pipeline/PkgDef_VIS_CTIMasterCI.py": [
                        [
                            "@@ -69,7 +69,7 @@ master_ci_estimate = Executable(\n #        Input(\"MDB\"),\n         Input(\"quad_list_of_lists\")],\n     outputs=[Output(\"cti_master_ci\", mime_type=\"json\")],\n-    resources=ComputingResources(cores=1, ram=16.0, walltime=4.0),\n+    resources=ComputingResources(cores=1, ram=256.0, walltime=4.0),\n )\n \n quad2FPA = Executable(command = f\"E-Run VIS_Tasks {TASKS_VER} VIS_quad_to_fpa\",\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ],
                        [
                            "@@ -37,6 +37,8 @@ from euclidwf.framework.taskdefs import (\n from VIS_ProcessField_Pipeline.PkgDef_VIS_ProcessField import TASKS_VER\n import os\n \n+TASKS_VER = \"13.0.3\"\n+\n PIPE_NAME = \"VIS_\" + os.path.splitext( os.path.basename( __file__))[0].split( \"VIS_\")[1]\n \n VIS_cti_xml_in = Executable(\n",
                            "manual version hacks -- REMOVE BEFORE MERGE",
                            "James Nightingale",
                            "2023-07-27T16:25:24.000+02:00",
                            "cdcaae9dc0b27d7c23122a3d3c389b9480d936fc"
                        ],
                        [
                            "@@ -0,0 +1,92 @@\n+#\n+# File PkgDef_VIS_ProcessField.py\n+#\n+# Created on: Jan 09, 2016\n+# Author: Catherine Grenet\n+#\n+# VIS package definition for IAL workflow manager\n+#\n+# History\n+# Nov 07, 2017 (LP & OH): processExp task is now splitted in 3 differents tasks to be able to run the astrometry over 4 dithers at the same time:\n+#     processExtractExp, processAstroField and processPhotoExp are now declared in package definition\n+# Oct 19, 2017 (OH): migration from pickle list to json file. Adjust tasks parameters name accordingly\n+# Sep 06, 2017 (CG): \"ram\" now specifies maxrss instead of maxvmem\n+# Aug 24, 2017 (CG):\n+#     VIS_science_xml_out: specify mime_type=\"json\" for outfile (bug #5563)\n+# Nov 26, 2016 (CG):\n+#     processExp: cores = 1 not to use the multicore queues at CC\n+#                 walltime = 24 h to cope the 2nd SExtractor run\n+#     stacking  : walltime = 8 h\n+# Apr 07, 2016 (CG):\n+#     ComputingResources: ram = 4.0 for all jobs\n+# Apr 03, 2016 (CG):\n+#     Non linearity model is not a processQuad input any more\n+# Mar 18, 2016 (CG):\n+#    added processFlatQuad executable\n+# Mar 16, 2016 (CG):\n+#    added explist2quadlist, processQuad and ghosts2stack executables\n+\n+from euclidwf.framework.taskdefs import (\n+    Executable,\n+    Input,\n+    Output,\n+    ComputingResources,\n+    TYPE_LISTFILE,\n+)\n+\n+from VIS_ProcessField_Pipeline.PkgDef_VIS_ProcessField import TASKS_VER\n+import os\n+\n+PIPE_NAME = \"VIS_\" + os.path.splitext( os.path.basename( __file__))[0].split( \"VIS_\")[1]\n+\n+VIS_cti_xml_in = Executable(\n+    command=f\"E-Run VIS_Tasks {TASKS_VER} VIS_xml_in --pipeline_name={PIPE_NAME} \",\n+    inputs=[\n+        Input(\"vis_config_in\"),\n+        Input(\"MDB\"),\n+        Input(\"raw_frames_in\", content_type=\"listfile\"),\n+        Input(\"flagmaps\", content_type=\"listfile\"),\n+        Input(\"gains_model\"),\n+        Input(\"xtalk_model\", content_type=\"listfile\"),\n+        Input(\"master_bias\", content_type=\"listfile\"),\n+        Input(\"master_dark\", content_type=\"listfile\"),\n+        Input(\"nlcorr_model\", content_type=\"listfile\"),\n+        Input(\"ron_model\", content_type=\"listfile\"),\n+        Input(\"saturation_model\", content_type=\"listfile\"),\n+     ],\n+    outputs=[\n+        Output(\"rawexp_list\", mime_type=\"json\", content_type=\"listfile\"),\n+        Output(\"quadlists\", mime_type=\"json\"),\n+        Output(\"piperun_config\", mime_type=\"cfg\")\n+        ],\n+    resources=ComputingResources(cores=1, ram=4.0, walltime=1.0),\n+    )\n+\n+master_ci_estimate = Executable(\n+    command=f\"E-Run VIS_Tasks {TASKS_VER} VIS_CTI_Master_CI\",\n+    inputs=[\n+         Input('config'),\n+#        Input(\"MDB\"),\n+        Input(\"quad_list_of_lists\")],\n+    outputs=[Output(\"cti_master_ci\", mime_type=\"json\")],\n+    resources=ComputingResources(cores=1, ram=16.0, walltime=4.0),\n+)\n+\n+quad2FPA = Executable(command = f\"E-Run VIS_Tasks {TASKS_VER} VIS_quad_to_fpa\",\n+                      inputs = [Input(\"infilelist_data\"), \"config\"],\n+                      outputs = [Output(\"master_data\", mime_type=\"json\")],\n+                      resources = ComputingResources(cores = 1,\n+                                                     ram = 3.0,\n+                                                     walltime = 1.0))\n+\n+\n+\n+VIS_cti_master_ci_xml_out = Executable(\n+    command=f\"E-Run VIS_Tasks {TASKS_VER} VIS_cti_master_ci_xml_out\",\n+    inputs=[\"config\", \"cti_master_ci_list\"],\n+    outputs=[\n+        Output(\"dpdmasterci\", mime_type=\"json\", content_type=\"listfile\"),\n+        Output(\"dpdanalysis_out\", mime_type=\"json\", content_type=\"listfile\"),\n+    ],\n+    resources=ComputingResources(cores=1, ram=7.0, walltime=3.0),\n+)\n",
                            "Merge branch 'release-13.0' into develop",
                            "Olivier Herent",
                            "2023-07-25T13:29:57.000+00:00",
                            "a57ebae9b69330474a65e4e7d79cacba43e6750e"
                        ]
                    ],
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_CTITimeEvolution_Pipeline/PkgDef_VIS_CTITimeEvolution.py": [
                        [
                            "@@ -17,7 +17,6 @@ from VIS_ProcessField_Pipeline.PkgDef_VIS_ProcessField import TASKS_VER\n VIS_xml_in = Executable(\n     command=f\"E-Run VIS_Tasks {TASKS_VER} VIS_cti_time_evolution_xml_in\",\n     inputs=[\n-        Input(\"auxdatafiles\"),\n         Input(\"MDB\"),\n         Input(\"cti_results_in\", content_type=\"listfile\"),\n      ],\n@@ -34,7 +33,7 @@ fit_cti_time_evolution = Executable(command   = f\"E-Run VIS_Tasks {TASKS_VER} VI\n                                       Input(\"cti_results_x1_ccd\")],\n                          outputs   = [Output(\"time_evolution_json\", mime_type=\"json\")],\n                          resources = ComputingResources(cores = 1,\n-                                                        ram = 4.0,\n+                                                        ram = 32.0,\n                                                         walltime = 6.0))\n \n VIS_cti_xml_out = Executable(\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/release_note/VIS_Software_Release_Note.md": [
                        [
                            "@@ -0,0 +1,145 @@\n+|         |**Document Identification**                                                                          |\n+|---------|-----------------------------------------------------------------------------------------------------|\n+|Title|Euclid SGS VIS PF Software Release Note |\n+|PF Release| 13.0.6 |\n+|Date:|02/08/2023|\n+|Doc. Issue| 13.0.6 |\n+|Reference:|EUCL-IAP-TN-8-019|\n+|Custodian:|C. Grenet|\n+\n+# Table of Contents\n+\n+1. [Purpose and Scope](#purpose_and_scope)\n+    * [1.1 Scope of this PF Software](#scope)\n+    * [1.2 Purpose of the PF](#purpose)\n+2. [PF Documents](#documentation)\n+3. [PF Software products](#software)\n+    * [3.1 PF Environment configuration](#envt)\n+    * [3.2 PF software products configuration](#products)\n+ 4. [Changes Major Release](#changes_and_fixed_issues)\n+    * [4.1 Functional changes in this release](#changes)\n+    * [4.2 Issues fixed](#fixed_issues)\n+5. [Patch releases](#patches)\n+6. [Known issues](#known_issues)\n+\n+# 1. Purpose and Scope <a name=\"purpose_and_scope\"></a>\n+\n+## 1.1 Scope of this PF Software Release Note <a name=\"scope\"></a>\n+\n+The objective of the **S**oftware **R**elease **N**ote (SRN) is to provide the configuration status of the software configuration item.\n+It controls its evolution during the programme or project life cycle.\n+\n+## 1.2 Purpose of this PF Release <a name=\"purpose\"></a>\n+\n+**Release 13.0** of the VIS PF has been developed for Performance Verification phase which will start beginning of August 2023.\n+\n+# 2. PF Documents <a name=\"documentation\"></a>\n+\n+\n+| RD | Title / Author | Document reference | Doc. Release |\n+| -----------   | ----------- | ----------- |----------- |\n+| [RSD](https://euclid.roe.ac.uk/projects/vis_pf/dmsf?folder_id=489) | Euclid SGS PF Processing Function Requirements Specifications | EUCL-IAP-RS-8-001 | [2.4](https://euclid.roe.ac.uk/dmsf/files/5032/view) |\n+| [SDD](https://euclid.roe.ac.uk/projects/vis_pf/dmsf?folder_id=442) | Euclid SGS PF Software Design Document | EUCL-IAP-DDD-8-001 |[1.0](https://euclid.roe.ac.uk/dmsf/files/3053/view) |\n+| [VP-STS](https://euclid.roe.ac.uk/projects/vis_pf/dmsf?folder_id=372) | Euclid SGS PF Euclid SGS PF Validation Plan and Software Tests Specifications  | EUCL-IAP-PL-8-001 |[2.6](https://euclid.roe.ac.uk/dmsf/files/4082/view) |\n+| [STP-STR](https://euclid.roe.ac.uk/projects/vis_pf/dmsf?folder_id=372) | Euclid SGS PF Software Test Plan and Test Report | EUCL-IAP-TP-8-001| [7.0.3](https://euclid.roe.ac.uk/dmsf/files/4807/view) |\n+| [SUM]()https://gitlab.euclid-sgs.uk/PF-VIS/VIS_IAL_Pipelines/-/tree/release-13.0/doc/user_manual | Euclid SGS VIS PF Software User Manual | EUCL-IAP-MA-8-002 | 4.0 |\n+| [CCB]|Euclid SGS PF Configuration Control Board report   | -  | - |\n+\n+\n+# 3. PF Software products <a name=\"software\"></a>\n+\n+## 3.1 PF Environment configuration <a name=\"envt\"></a>\n+\n+The PF User Manual [RD5] describes the principal software parts of the system, including other software, such as operating systems, utilities, other supporting systems, and other facilities, equipment or resources.\n+\n+| Envt  | Version  |\n+|------|------|\n+| EDEN | `3.1` |\n+| Data Model | `9.0.2` |\n+| PF IAL Pipelines conf. | [13.0.6](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_IAL_Pipelines/-/tree/13.0.6) |\n+\n+\n+## 3.2 PF software products configuration <a name=\"products\"></a>\n+\n+\n+| Gitlab project    | Gitlab tag | SonarQube analysis\n+| ----------- | ----------- | ----------- |\n+| [VIS_Tasks](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_Tasks) | [13.0.6](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_Tasks/-/tags/13.0.6)|[release-13.0](https://codeen-app.euclid-ec.org/sonar/dashboard?branch=release-13.0&id=VIS_Tasks)|\n+| [VIS_PyLibrary](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_PyLibrary) | [3.20.2](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_PyLibrary/-/tags/3.20.2) |[release-3.20](https://codeen-app.euclid-ec.org/sonar/dashboard?branch=release-3.20&id=VIS_PyLibrary)|\n+| [VIS_ImageTools](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_ImageTools) | [3.16.0](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_ImageTools/-/tags/3.16.0) | [release-3.16](https://codeen-app.euclid-ec.org/sonar/dashboard?branch=release-3.16&id=VIS_ImageTools)|\n+ | [VIS_CTI](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_CTI) | [5.8.1](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_CTI/-/tags/5.8.1) |[release-5.8](https://codeen-app.euclid-ec.org/sonar/dashboard?branch=release-5.8&id=VIS_CTI)|\n+ | [VIS_Instrument_Tools](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_Instrument_Tools) | [0.7.0](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_Instrument_Tools/-/tags/0.7.0) | [release-0.7](https://codeen-app.euclid-ec.org/sonar/dashboard?branch=release-0.7&id=VIS_Instrument_Tools) |\n+ | [VIS_DiffractionSpikesFocus](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_DiffractionSpikesFocus) | [1.1.0](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_DiffractionSpikesFocus/-/tags/1.1.0) | [release-1.1](https://codeen-app.euclid-ec.org/sonar/dashboard?branch=release-1.1&id=VIS_DiffractionSpikesFocus) |\n+\n+\n+# 4. Main Changes in this Release <a name=\"changes_and_fixed_issues\"></a>\n+\n+This release of the VIS PF is issued for the purpose of usual progress development in the context of the Euclid SGS. It has a particular emphasis with the preparation of the forthcoming Performance and Verification Phase processing.\n+This release is deployed as part of the cvmfs and does fully comply with the CODEEN standards.\n+\n+## 4.1 Functional changes <a name=\"changes\"></a>\n+\n+This release includes the following new calibration pipelines:\n+- VIS_BloomingCalibration \n+- VIS_BrighterFatterCalibration\n+- VIS_CTICalibration\n+- VIS_CTITimeEvolution\n+- VIS_DiffractionSpikesFocus\n+- VIS_FlagObjects\n+- VIS_GainCalibration\n+- VIS_NonLinCalibration\n+- VIS_PersistenceCalibration\n+- VIS_PhotometryCalibration\n+- VIS_PTCNLCalibration\n+- VIS_SmallScaleFlat\n+- VIS_TrapPumpingCalibration\n+\n+Refer to the SUM for the function of each of these pipelines.\n+\n+Processing of science exposures has been splitted in two pipelines: VIS_ProcessField for the processing of individual exposures, with the possibility to not produce the stack; and VIS_Stacking pipeline to produce a stack from a set of calibrated exposures. \n+\n+\n+\n+## 4.2 Bugs fixed  <a name=\"fixed_issues\"></a>\n+\n+| Issue | Title |\n+| -----------   | ----------- |\n+| [#17058](https://euclid.roe.ac.uk/issues/17058)| VIS PF crashes if a task is retried|\n+| [#17592](https://euclid.roe.ac.uk/issues/17592)| Some per-exposure statistics possibly lost in master dark pipeline|\n+| [#18113](https://euclid.roe.ac.uk/issues/18113)| Short exposure catalog metadata|\n+| [#20024](https://euclid.roe.ac.uk/issues/20024)| Master dark has incorrect unit|\n+| [#20034](https://euclid.roe.ac.uk/issues/20034)| wcsfit: Floating point nan values are not allowed in FITS headers|\n+| [#20089](https://euclid.roe.ac.uk/issues/20089)| VIS_LargeFlatCalibration_Pipeline: psf_model and starmask_model inputs are mandatory|\n+\n+\n+# 6. Known issues <a name=\"known_issues\"></a>\n+\n+Bug reports and software change/addition requests should be submitted through the Euclid Redmine tool at https://euclid.roe.ac.uk/projects/vis_pf/issues.\n+\n+\n+| Issue | Title |\n+| -----------   | ----------- |\n+| [#8670](https://euclid.roe.ac.uk/issues/8670)   | Missing columns in catalogs wrt R-VIS-PRD-F-070|\n+| [#19375](https://euclid.roe.ac.uk/issues/19375) | Master bias is out of requirement| \n+| [#19677](https://euclid.roe.ac.uk/issues/19677) | Master flat is out of requirement |\n+| [#19685](https://euclid.roe.ac.uk/issues/19685) | Dark calibration is out of requirement|\n+| [#20077](https://euclid.roe.ac.uk/issues/20077) | VIS PSFs seem to be broader than the TU stars|\n+| [#22778](https://euclid.roe.ac.uk/issues/22778) | VIS_NonLinCalibration_Pipeline (pixel MODE) produces incorrect results\n+| [#22866](https://euclid.roe.ac.uk/issues/22866) | Crosstalk calibration crashes when RemoveTempFiles = True\n+| [#22976](https://euclid.roe.ac.uk/issues/22976) | VIS_MasterDark_Pipeline (95 s exposures): Exception: model_dark(): All pixels are masked (perhaps the hot pixel threshold is too low?)\n+| [#23033](https://euclid.roe.ac.uk/issues/23033) | Astrometric calibration (use-fpa-model) fails on SIM-PV2-006_R2\n+| [#23072](https://euclid.roe.ac.uk/issues/23072) | Insufficient CR rejection in the newest VIS PVPR#2 data\n+| [#23096](https://euclid.roe.ac.uk/issues/23096) | FITS files are trucated when ZipOutputs = True\n+| [#23101](https://euclid.roe.ac.uk/issues/23101) | Large-scale Flat model CCDs may be showing an indexing error\n+| [#23168](https://euclid.roe.ac.uk/issues/23168) | VIS_BrighterFatterCalibrationCalibration_Pipeline: output product is DpdVisFileContainer instead of DpdVisBFEModel\n+| [#23190](https://euclid.roe.ac.uk/issues/23190) | wcsfit crashes on SIM-PV2-008_R2 EXTRA-FOCAL and INTRA-FOCAL exposures\n+| [#23233](https://euclid.roe.ac.uk/issues/23233) | Scattered light in VIS calblock-001 data\n+| [#23243](https://euclid.roe.ac.uk/issues/23243) | VIS_NonLinCalibration_Pipeline (APERTURE mode) produces incorrect results\n+| [#23265](https://euclid.roe.ac.uk/issues/23265) | VIS_ProcessField_Pipeline: VIS_Calibrate_Photometry crashes on out-of-focus exposures\n+| [#23266](https://euclid.roe.ac.uk/issues/23266) | stacking output product XML is empty\n+\n+\n+\n+\n+\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap01.md": [
                        [
                            "",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap02.md": [
                        [
                            "",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap03.md": [
                        [
                            "",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap04.md": [
                        [
                            "@@ -45,9 +45,9 @@ The SGS document [RD7] describes through the principal software parts of the sys\n \n |   |   |\n |---|---|\n-| **PF Release:**  | `X.Y` |\n-| **EDEN:** | `i.j` |\n-| **Data Models:** | `m.n` |\n+| **PF Release:**  | `13.0` |\n+| **EDEN:** | `3.1` |\n+| **Data Models:** | `9.2` |\n \n These elements (related to the PF software) are identified **with their versions** in the **PF Release Note** [RD10].\n \n@@ -79,3 +79,64 @@ These elements (related to the PF software) are identified **with their versions\n * `VIS_TrapPumpingCalibration_Pipeline`\n * `VIS_XTalkCalibration_Pipeline`\n \n+Processing of science exposures uses two pipelines:\n+\n+* `VIS_ProcessField_Pipeline`: processing of N raw science exposures to produce calibrated exposures and associated catalogs. Optionally, production of the stack image and the associated catalog.\n+* `VIS_Stacking_Pipeline`: production of the stack image and associated catalog from calibrated exposures and associated catalogs produced by `VIS_ProcessField_Pipeline`.\n+\n+All other pipelines are intended to produce calibration models from calibration data.\n+\n+The current version of this document describes VIS pipelines operation during PV phase. We describe below the processing of some complex calblocks which require to run several pipelines.\n+\n+### PV-001 Self Calibration\n+\n+1. Execution of VIS_PSFCalibration pipeline to produce a PSF model\n+\n+   This PSF model will be used in all subsequent steps where a PSF model is needed.\n+\n+2. Execution of 2 instances of VIS_ProcessField pipeline without stacking, using the PSF model above, possibly in parallel:  \n+   * one on the raw short exposures: it will produce short calibrated exposures and catalogs\n+   * one on the raw nominal exposures: it will produce nominal calibrated exposures and catalogs\n+\n+3. Possibly in parallel\n+   * Execution of the VIS_LargeFlatCalibration pipeline on the short calibrated catalogs produced in the previous step: it will produce the short large flat\n+   * Execution of the VIS_LargeFlatCalibration pipeline on the nominal calibrated catalogs produced in the previous step: it will produce the nominal large flat\n+   * Execution of the VIS_Stacking pipeline on the nominal calibrated exposures produced in the previous step: it will produce the astrometric catalog for NIR\n+\n+   These large flats will be used in all subsequent steps where a large flat is needed.\n+\n+4. Possibly in parallel\n+   * Execution of 2 instances of VIS_ProcessField pipeline without stacking\n+     * one on the raw short exposures, using the short large flat produced in step 3\n+     * one on the raw nominal exposures, using the nominal large flat produced in step 3\n+\n+5. Possibly in parallel\n+   * Execution of VIS_PhotometryCalibration pipeline on the short calibrated catalogs produced in step 4: it will produce a first estimation of the zero point\n+   * Execution of VIS_GhostsCalibration pipeline on the ghosts catalogs produced in step 4, both nominal and short\n+   * Execution of VIS_XTalkCalibration pipeline on the raw nominal exposures\n+\n+6. Execution of 2 instances of VIS_ProcessField pipeline with stacking, possibly in parallel:\n+   * one on the raw short exposures\n+   * one on the raw nominal exposures\n+\n+   using PSF model, large flats, zero point and crosstalk model produced in the previous steps.\n+\n+   This final step wil produce the standard VIS products calibrated in photometry.\n+\n+### PV-002 NISP-P and VIS Absolute Photometric Standards\n+\n+TBW\n+   \n+\n+## PF configuration file\n+\n+Each pipeline has in input a configuration file, named hereafter VIS PF configuration file, which controls its behavior. The configuration file is of type `DpdVisConfigurationFile`.\n+\n+Three configuration files are provided, listed below with their ProductId:\n+\n+* `DpdVisConfigurationFile_EUC_VIS_ConfigFile_PF12_01JUL2023_ini`: generic configuration file, to be used when no specific instructions are provided.\n+* `DpdVisConfigurationFile_EUC_VIS_ConfigFile_PF12_01JUL2023_nostack_ini`: to be used to execute a `ProcessField` pipeline without stacking\n+* `DpdVisConfigurationFile_EUC_VIS_ConfigFile_PF12_01JUL2023_normtmp_ini`: to be used to execute a pipeline without removing temporary files from the workdir\n+\n+\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap05_AstrometryCalibration.md": [
                        [
                            "@@ -0,0 +1,97 @@\n+\\newpage\n+\n+# Pipeline `VIS_AstrometryCalibration_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_AstrometryCalibration**: production of a distortion model from a suitable set of science exposures.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_AstrometryCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_AstrometryCalibration)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    DpdVisZeroPoint -->|zero_point<br>1..1| pipeline\n+    DpdVisMasterDarkFrame -.->|masterdark<br>0..1| pipeline\n+    DpdVisMasterFlatFrame -.->|masterflat<br>0..1| pipeline\n+    DpdVisDistortionModel -.->|dist_model<br>0..1| pipeline\n+    DpdVisLargeFlatFrame -.->|lsf_model<br>0..1| pipeline\n+    DpdVisGhostModel -.->|ghost_model<br>1..1| pipeline\n+    DpdVisStarMask -.->|starmask_model<br>1..1| pipeline\n+    DpdVisBFEModel -.->|bfe_model<br>0..1| pipeline\n+    DpdTrueUniverseOutput -->|ref_catalogues<br>1..*| pipeline\n+    pipeline -->|dist_model_xml_out<br>>1..1| DpdVisDistortionModel\n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: raw science frames to be processed\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `gains_model`: gain model\n+* `ron_model`: readout noise model\n+* `saturation_model`: saturation model\n+* `masterbias`: master bias frame from `VIS_MasterBias` pipeline\n+* `flagmaps`: map of defects in darkness from `VIS_MasterDark` pipeline, map of defects in photoresponse from `VIS_MasterFlat` pipeline\n+* `xtalk_model`: crosstalk model\n+* `nlcorr_model`: non-linearity correction model\n+* `cti_model`: CTI model\n+* `zero_point`: zero point\n+* `masterdark`: master dark, not to be used as long as dark is not measurable\n+* `masterflat`: master flat frame\n+* `dist_model`: distortion model, not to be used\n+* `lsf_model`: large scale flat model from `VIS_LargeFlatCalibration` pipeline\n+* `ghost_model`: ghost model\n+* `starmask_model`: star mask model\n+* `bfe_model`: brighter-fatter model\n+* `ref_catalogues`: list of reference catalogues covering raw science frames sky area\n+\n+## Processing triggering assumptions\n+\n+The pipeline will be executed on calblock PV-023. Only nominal exposures shall be used. \n+\n+xtalk_model, nlcorr_model, cti_model, lsf_model, bfe_model should not used because the corresponding models will not be available at the time PV-023 is received.\n+\n+gains_model, ron_model, saturation_model, zero_point, ghost_model, starmask_model: on-ground models should be used.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A run on a simulated realisation of PV-023 (20 nominal exposures) requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 20    | TBW      | 5            | TBW             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap06_BloomingCalibration.md": [
                        [
                            "@@ -0,0 +1,85 @@\n+\\newpage\n+\n+# Pipeline `VIS_BloomingCalibration_Pipeline`\n+\n+\n+## Pipeline Description\n+\n+**VIS_BloomingCalibration**: Production of a blooming model containing a json file, with the threshold in ADU of the blooming effect for all quadrants. Contains also png images of the graph of the PTC (Photon Transfer Curve) for all quadrants, used to compute the blooming threshold. The PTC images are located into the Data of the calibration product.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_BloomingCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_BloomingCalibration)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    DpdVisBFEModel -.->|bfe_model<br>0..1| pipeline\n+    pipeline -->|dpdcalib_blooming<br>1..*| DpdVisBloomingModel&nbsp\n+```\n+\n+**Ports description:**\n+\n+* `DpdVisRawFrame`: raw flat field frames\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `DpdVisGainModel`: gain model from `VIS_GainCalibration` pipeline\n+* `ron_model`: readout noise model\n+* `saturation_model`: saturation model, not used\n+* `masterbias`: master bias frame from `VIS_MasterBias` pipeline\n+* `flagmaps`: map of defects in darkness from `VIS_MasterDark` pipeline, map of defects in photoresponse from `VIS_MasterFlat` pipeline\n+* `xtalk_model`: crosstalk model from VIS_XTalkCalibration_Pipeline\n+* `nlcorr_model`: non-linearity correction model\n+* `cti_model`: CTI model\n+* `bfe_model`: bfe model\n+\n+\n+\n+## Processing triggering assumptions\n+\n+During PV phase the pipeline will be triggered on all the flatfields of calblock PV-029 and calblock PV-031.\n+\n+Input ports nlcorr_model, cti_model, bfe_model shall be left empty.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+Hardware requirement for the pipeline depend on the number of input raw flat frames.\n+\n+A typical run on 10 raw flat frames requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| TBW   | TBW      | TBW          | TBW             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ],
                        [
                            "@@ -47,7 +47,7 @@ graph LR\n * `saturation_model`: saturation model, not used\n * `masterbias`: master bias frame from `VIS_MasterBias` pipeline\n * `flagmaps`: map of defects in darkness from `VIS_MasterDark` pipeline, map of defects in photoresponse from `VIS_MasterFlat` pipeline\n-* `xtalk_model`: crosstalk model\n+* `xtalk_model`: crosstalk model from VIS_XTalkCalibration_Pipeline\n * `nlcorr_model`: non-linearity correction model\n * `cti_model`: CTI model\n * `bfe_model`: bfe model\n@@ -58,7 +58,7 @@ graph LR\n \n During PV phase the pipeline will be triggered on all the flatfields of calblock PV-029 and calblock PV-031.\n \n-Input ports xtalk_model, nlcorr_model, cti_model shall be left empty.\n+Input ports nlcorr_model, cti_model, bfe_model shall be left empty.\n \n ## Operational constraints\n \n",
                            "[UPD]SUM: chap06_BloomingCalibration.md usage of xtalk_model and bfe_model ports updated.",
                            "Catherine Grenet",
                            "2023-07-28T18:14:08.000+02:00",
                            "c9380553108178e15655262b41875bb4db2eed7b"
                        ],
                        [
                            "@@ -34,7 +34,7 @@ graph LR\n     DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n     DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n     DpdVisBFEModel -.->|bfe_model<br>0..1| pipeline\n-    pipeline -->|dpdcalib_blooming<br>1..*| DpdVisBloomingModel\n+    pipeline -->|dpdcalib_blooming<br>1..*| DpdVisBloomingModel&nbsp\n ```\n \n **Ports description:**\n",
                            "Fix chap06_BloomingCalibration.md mermaid graph",
                            "Thomas Flanet",
                            "2023-07-27T11:46:36.000+02:00",
                            "35ab889709becea89aa281bc6d5055b25905a77c"
                        ],
                        [
                            "@@ -2,4 +2,84 @@\n \n # Pipeline `VIS_BloomingCalibration_Pipeline`\n \n-TBW\n+\n+## Pipeline Description\n+\n+**VIS_BloomingCalibration**: Production of a blooming model containing a json file, with the threshold in ADU of the blooming effect for all quadrants. Contains also png images of the graph of the PTC (Photon Transfer Curve) for all quadrants, used to compute the blooming threshold. The PTC images are located into the Data of the calibration product.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_BloomingCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_BloomingCalibration)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    DpdVisBFEModel -.->|bfe_model<br>0..1| pipeline\n+    pipeline -->|dpdcalib_blooming<br>1..*| DpdVisBloomingModel\n+```\n+\n+**Ports description:**\n+\n+* `DpdVisRawFrame`: raw flat field frames\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `DpdVisGainModel`: gain model from `VIS_GainCalibration` pipeline\n+* `ron_model`: readout noise model\n+* `saturation_model`: saturation model, not used\n+* `masterbias`: master bias frame from `VIS_MasterBias` pipeline\n+* `flagmaps`: map of defects in darkness from `VIS_MasterDark` pipeline, map of defects in photoresponse from `VIS_MasterFlat` pipeline\n+* `xtalk_model`: crosstalk model\n+* `nlcorr_model`: non-linearity correction model\n+* `cti_model`: CTI model\n+* `bfe_model`: bfe model\n+\n+\n+\n+## Processing triggering assumptions\n+\n+During PV phase the pipeline will be triggered on all the flatfields of calblock PV-029 and calblock PV-031.\n+\n+Input ports xtalk_model, nlcorr_model, cti_model shall be left empty.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+Hardware requirement for the pipeline depend on the number of input raw flat frames.\n+\n+A typical run on 10 raw flat frames requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| TBW   | TBW      | TBW          | TBW             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n+\n",
                            "[NEW]SUM: chap06_BloomingCalibration.md completed",
                            "Thomas Flanet",
                            "2023-07-27T10:53:07.000+02:00",
                            "a271e433169e96f016a949ed1283289238d6efe7"
                        ]
                    ],
                    "doc/user_manual/chap07_BrighterFatterCalibration.md": [
                        [
                            "@@ -0,0 +1,83 @@\n+\\newpage\n+\n+# Pipeline `VIS_BrighterFatterCalibration_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_BrighterFatterCalibration**: Production of brighter-fatter model from a list of raw flat fields and associated oject masks.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_BrighterFatterCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_BrighterFatterCalibration)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    DpdVisFlagMap -.->|object_masks<br>0..1| pipeline\n+    pipeline -->|bfecalib_xml_out<br>1..*| DpdVisBFEModel\n+```\n+\n+**Ports description:**\n+\n+* `DpdVisRawFrame`: raw flat field frames\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `DpdVisGainModel`: gain model from `VIS_GainCalibration` pipeline\n+* `ron_model`: readout noise model\n+* `saturation_model`: saturation model\n+* `masterbias`: master bias frame from `VIS_MasterBias` pipeline\n+* `flagmaps`: map of defects in darkness from `VIS_MasterDark` pipeline, map of defects in photoresponse from `VIS_MasterFlat` pipeline\n+* `xtalk_model`: crosstalk model\n+* `nlcorr_model`: non-linearity correction model\n+* `cti_model`: CTI model\n+* `object_masks`: object masks from `VIS_FlagObjects` pipeline\n+\n+\n+\n+## Processing triggering assumptions\n+\n+During PV phase the pipeline will be triggered on variant BF-40000ADU of calblock PV-022, selecting LED3 flats only (CalibUnit.LedMask=4).\n+\n+Input ports xtalk_model, nlcorr_model, cti_model shall be left empty.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+Hardware requirement for the pipeline depend on the number of input raw flat frames.\n+\n+A typical run on 10 raw flat frames requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 10    | 5        | 7            | 160             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ],
                        [
                            "@@ -71,7 +71,7 @@ A typical run on 10 raw flat frames requires:\n \n | Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n | ----- | -------- | ------------ | --------------- |\n-| TBW   | TBW      | TBW          | TBW             |\n+| 10    | 5        | 7            | 160             |\n \n ## Normal termination\n \n",
                            "[UPD]SUM: chap07_BrighterFatterCalibration.md Hardware configuration and performances added.",
                            "Catherine Grenet",
                            "2023-07-30T18:04:05.000+02:00",
                            "5c19cba4a4350da84792e5ccb11745ae09cf3cd5"
                        ]
                    ],
                    "doc/user_manual/chap08_CTICalibration.md": [
                        [
                            "@@ -0,0 +1,82 @@\n+\\newpage\n+\n+# Pipeline `VIS_CTICalibration_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_CTICalibration**: Production of a cti model at a given data and time from a list of raw charge injection images.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_CTI`\n+* `SHE_ArCTIC`\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_CTICalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_CTICalibration)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|master_bias<br>0..1| pipeline\n+    DpdVisMasterDarkFrame -.->|master_dark<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    pipeline -->|dpdcticalibration<br>1..1| DpdVisCTICalibrationResults\n+    pipeline -->|dpdanalysis_out<br>1..1| DpdVisAnalysisResults\n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: list of raw charge injection frames, ImgType.FirstType=CHARGE_INJECTION\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `flagmaps`: list of flag maps.\n+* `gains_model`: gain model\n+* `xtalk_model`: crosstalk model\n+* `masterbias`: master bias frame\n+* `masterdark`: master dark frame\n+* `nlcorr_model`: non-linearity correction model\n+* `ron_model`: readout noise model\n+* `saturation_model`: saturation model\n+* `dpdcticalibration`: CTI calibration results, including best-fit model with errors.\n+* `dpdanalysis`: quality assessment parameters\n+\n+Input ports not described above are currently unused.\n+\n+## Processing triggering assumptions\n+\n+The pipeline needs a day's ROS sequence of raw charge injection\n+frames (see CALPRODUCT-VS-005: VIS CTI Charge Injection Lines), which consists of 8 frames taken at 8 different charge\n+injection levels.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 8 raw charge injection frames requires:\n+\n+| Cores | RSS (GB)        | Walltime (h) | Disk space (GB) |\n+|-------|-----------------|-------------|-----------------|\n+| 36    | 9216 (36 * 256) | 12          | TBW             | # Estimate from workdir\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing\n+order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ],
                        [
                            "@@ -57,7 +57,7 @@ Input ports not described above are currently unused.\n ## Processing triggering assumptions\n \n The pipeline needs a day's ROS sequence of raw charge injection\n-frames (CALPRODUCT-VS-005: VIS CTI Charge Injection Lines) , which consists of 8 frames taken at 8 different charge\n+frames (see CALPRODUCT-VS-005: VIS CTI Charge Injection Lines), which consists of 8 frames taken at 8 different charge\n injection levels.\n \n ## Operational constraints\n",
                            "[UPD]SUM: chap08_CTICalibration.md triggering assumptions.",
                            "Catherine Grenet",
                            "2023-07-28T18:00:41.000+02:00",
                            "7261345adabfea5cb8f1510d144e2e7a3583ee9c"
                        ],
                        [
                            "@@ -33,7 +33,7 @@ graph LR\n     DpdVisRONModel -->|ron_model<br>1..1| pipeline\n     DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n     pipeline -->|dpdcticalibration<br>1..1| DpdVisCTICalibrationResults\n-    pipeline -->|dpdanalysis<br>1..1| DpdVisAnalysisResults\n+    pipeline -->|dpdanalysis_out<br>1..1| DpdVisAnalysisResults\n ```\n \n **Ports description:**\n",
                            "dpdanalysis -> dpd_analysis_out",
                            "James Nightingale",
                            "2023-07-26T13:40:13.000+01:00",
                            "50ef6bbca83a23651f5ee04c9a6113b63473f399"
                        ],
                        [
                            "@@ -32,8 +32,8 @@ graph LR\n     DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n     DpdVisRONModel -->|ron_model<br>1..1| pipeline\n     DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n-    pipeline -->|dpdcticalibration<br>1..1| DpdVisCTICalibrationResults # dpdcalib or something else?\n-    pipeline -->|dpdanalysis<br>1..1| DpdVisAnalysisResults # Is this an ouptut?\n+    pipeline -->|dpdcticalibration<br>1..1| DpdVisCTICalibrationResults\n+    pipeline -->|dpdanalysis<br>1..1| DpdVisAnalysisResults\n ```\n \n **Ports description:**\n@@ -56,8 +56,9 @@ Input ports not described above are currently unused.\n \n ## Processing triggering assumptions\n \n-The pipeline needs a day's ROS sequence of raw charge injection frames, which consists of 8 frames taken at\n-8 different charge injection levels.\n+The pipeline needs a day's ROS sequence of raw charge injection\n+frames (CALPRODUCT-VS-005: VIS CTI Charge Injection Lines) , which consists of 8 frames taken at 8 different charge\n+injection levels.\n \n ## Operational constraints\n \n",
                            "wirrten chap09_CTIMasterCI.md",
                            "James Nightingale",
                            "2023-07-26T13:30:42.000+01:00",
                            "d26de7b023427adca788b167872dfa5e950a2a6f"
                        ],
                        [
                            "@@ -2,4 +2,80 @@\n \n # Pipeline `VIS_CTICalibration_Pipeline`\n \n-TBW\n+## Pipeline Description\n+\n+**VIS_CTICalibration**: Production of a cti model at a given data and time from a list of raw charge injection images.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_CTI`\n+* `SHE_ArCTIC`\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_CTICalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_CTICalibration)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|master_bias<br>0..1| pipeline\n+    DpdVisMasterDarkFrame -.->|master_dark<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    pipeline -->|dpdcticalibration<br>1..1| DpdVisCTICalibrationResults # dpdcalib or something else?\n+    pipeline -->|dpdanalysis<br>1..1| DpdVisAnalysisResults # Is this an ouptut?\n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: list of raw charge injection frames, ImgType.FirstType=CHARGE_INJECTION\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `flagmaps`: list of flag maps.\n+* `gains_model`: gain model\n+* `xtalk_model`: crosstalk model\n+* `masterbias`: master bias frame\n+* `masterdark`: master dark frame\n+* `nlcorr_model`: non-linearity correction model\n+* `ron_model`: readout noise model\n+* `saturation_model`: saturation model\n+* `dpdcticalibration`: CTI calibration results, including best-fit model with errors.\n+* `dpdanalysis`: quality assessment parameters\n+\n+Input ports not described above are currently unused.\n+\n+## Processing triggering assumptions\n+\n+The pipeline needs a day's ROS sequence of raw charge injection frames, which consists of 8 frames taken at\n+8 different charge injection levels.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 8 raw charge injection frames requires:\n+\n+| Cores | RSS (GB)        | Walltime (h) | Disk space (GB) |\n+|-------|-----------------|-------------|-----------------|\n+| 36    | 9216 (36 * 256) | 12          | TBW             | # Estimate from workdir\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing\n+order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "wirrten chap08_CTICalibration.md",
                            "James Nightingale",
                            "2023-07-26T13:21:55.000+01:00",
                            "ac72a8f1e49236e08cfb7bd9c6a2fbedddae800b"
                        ]
                    ],
                    "doc/user_manual/chap09_CTIMasterCI.md": [
                        [
                            "@@ -0,0 +1,86 @@\n+\\newpage\n+\n+# Pipeline `VIS_CTIMasterCI_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_CTIMasterCI**: Production of a master charge injection image from a list of raw charge injection frames.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_CTI`\n+* `SHE_ArCTIC`\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_CTIMasterCI`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_CTIMasterCI)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|master_bias<br>0..1| pipeline\n+    DpdVisMasterDarkFrame -.->|master_dark<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    pipeline -->|dpdmasterci<br>1..1| DpdVisMasterCIFrame\n+    pipeline -->|dpdanalysis_out<br>1..1| DpdVisAnalysisResults\n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: list of raw charge injection frames, ImgType.FirstType=CHARGE_INJECTION\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `flagmaps`: list of flag maps.\n+* `gains_model`: gain model\n+* `xtalk_model`: crosstalk model\n+* `masterbias`: master bias frame\n+* `masterdark`: master dark frame\n+* `nlcorr_model`: non-linearity correction model\n+* `ron_model`: readout noise model\n+* `saturation_model`: saturation model\n+* `dpdcticalibration`: CTI calibration results, including best-fit model with errors.\n+* `dpdanalysis`: quality assessment parameters\n+\n+Input ports not described above are currently unused.\n+\n+## Processing triggering assumptions\n+\n+The pipeline only runs during PV, on reception of calblock PV-028.\n+\n+The process should be triggered independently according to the two variants in the calblock:\n+\n+- ROS variant: 32 times for each set of ROS sequence charge injection settings.\n+\n+- IG1-SCAN variant: 42 times, for each column in Table 45.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 6 raw charge injection frames requires:\n+\n+| Cores | RSS (GB)        | Walltime (h) | Disk space (GB) |\n+|-------|-----------------|--------------|-----------------|\n+| 36    | 9216 (36 * 256) | 4            | TBW             | # Estimate from workdir\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing\n+order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ],
                        [
                            "@@ -33,7 +33,7 @@ graph LR\n     DpdVisRONModel -->|ron_model<br>1..1| pipeline\n     DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n     pipeline -->|dpdmasterci<br>1..1| DpdVisMasterCIFrame\n-    pipeline -->|dpdanalysis<br>1..1| DpdVisAnalysisResults\n+    pipeline -->|dpdanalysis_out<br>1..1| DpdVisAnalysisResults\n ```\n \n **Ports description:**\n",
                            "dpdanalysis -> dpd_analysis_out",
                            "James Nightingale",
                            "2023-07-26T13:40:13.000+01:00",
                            "50ef6bbca83a23651f5ee04c9a6113b63473f399"
                        ],
                        [
                            "@@ -2,4 +2,85 @@\n \n # Pipeline `VIS_CTIMasterCI_Pipeline`\n \n-TBW\n+## Pipeline Description\n+\n+**VIS_CTIMasterCI**: Production of a master charge injection image from a list of raw charge injection frames.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_CTI`\n+* `SHE_ArCTIC`\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_CTIMasterCI`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_CTIMasterCI)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|master_bias<br>0..1| pipeline\n+    DpdVisMasterDarkFrame -.->|master_dark<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    pipeline -->|dpdmasterci<br>1..1| DpdVisMasterCIFrame\n+    pipeline -->|dpdanalysis<br>1..1| DpdVisAnalysisResults\n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: list of raw charge injection frames, ImgType.FirstType=CHARGE_INJECTION\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `flagmaps`: list of flag maps.\n+* `gains_model`: gain model\n+* `xtalk_model`: crosstalk model\n+* `masterbias`: master bias frame\n+* `masterdark`: master dark frame\n+* `nlcorr_model`: non-linearity correction model\n+* `ron_model`: readout noise model\n+* `saturation_model`: saturation model\n+* `dpdcticalibration`: CTI calibration results, including best-fit model with errors.\n+* `dpdanalysis`: quality assessment parameters\n+\n+Input ports not described above are currently unused.\n+\n+## Processing triggering assumptions\n+\n+The pipeline only runs during PV, on reception of calblock PV-028.\n+\n+The process should be triggered independently according to the two variants in the calblock:\n+\n+- ROS variant: 32 times for each set of ROS sequence charge injection settings.\n+\n+- IG1-SCAN variant: 42 times, for each column in Table 45.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 6 raw charge injection frames requires:\n+\n+| Cores | RSS (GB)        | Walltime (h) | Disk space (GB) |\n+|-------|-----------------|--------------|-----------------|\n+| 36    | 9216 (36 * 256) | 4            | TBW             | # Estimate from workdir\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing\n+order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "wirrten chap09_CTIMasterCI.md",
                            "James Nightingale",
                            "2023-07-26T13:30:42.000+01:00",
                            "d26de7b023427adca788b167872dfa5e950a2a6f"
                        ]
                    ],
                    "doc/user_manual/chap10_CTITimeEvolution.md": [
                        [
                            "@@ -0,0 +1,62 @@\n+\\newpage\n+\n+# Pipeline `VIS_CTITimeEvolution_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_CTITimeEvolution**: Production of a cti model as a function of time since launch, from a list of cti calibration results from the CTI calibration pipeline.\n+\n+The VIS science pipeline will input the time-stamp of science imaging into this interpolation model, in order to deterine the CTI model used for correction.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_CTI`\n+* `SHE_ArCTIC`\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_CTITimeEvolution`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisCTICalibrationResults -->|cti_results_in<br>1..1| pipeline\n+    pipeline -->|dpdcticalibration<br>1..1| DpdVisCTITimeEvolutionModel\n+    pipeline -->|dpdanalysis_out<br>1..1| DpdVisAnalysisResults\n+```\n+\n+**Ports description:**\n+\n+* `MDB`: Mission DataBase\n+* `cti_results_in`: list of previous CTI calibration pipeline results.\n+* `dpdctitimeevolution`: CTI time evolution model.\n+* `dpdanalysis`: quality assessment parameters\n+\n+## Processing triggering assumptions\n+\n+The pipeline will not be triggered from mission start, and will be switched on when CTI calibration results\n+indicate a need for CTI correction in science data.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run requires:\n+\n+| Cores | RSS (GB)       | Walltime (h) | Disk space (GB)                            |\n+|-------|----------------|--------------|--------------------------------------------|\n+| 36    | 1152 (36 * 32) | 6            | 1+ (Increases as more CTI results created) | # Estimate from workdir\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing\n+order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ],
                        [
                            "@@ -25,7 +25,7 @@ graph LR\n     DpdMdbDataBase -->|MDB<br>1..1| pipeline\n     DpdVisCTICalibrationResults -->|cti_results_in<br>1..1| pipeline\n     pipeline -->|dpdcticalibration<br>1..1| DpdVisCTITimeEvolutionModel\n-    pipeline -->|dpdanalysis<br>1..1| DpdVisAnalysisResults\n+    pipeline -->|dpdanalysis_out<br>1..1| DpdVisAnalysisResults\n ```\n \n **Ports description:**\n",
                            "dpdanalysis -> dpd_analysis_out",
                            "James Nightingale",
                            "2023-07-26T13:40:13.000+01:00",
                            "50ef6bbca83a23651f5ee04c9a6113b63473f399"
                        ],
                        [
                            "@@ -2,7 +2,61 @@\n \n # Pipeline `VIS_CTITimeEvolution_Pipeline`\n \n-TBW\n+## Pipeline Description\n \n+**VIS_CTITimeEvolution**: Production of a cti model as a function of time since launch, from a list of cti calibration results from the CTI calibration pipeline.\n \n-CTITimeEvolutionModel\n\\ No newline at end of file\n+The VIS science pipeline will input the time-stamp of science imaging into this interpolation model, in order to deterine the CTI model used for correction.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_CTI`\n+* `SHE_ArCTIC`\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_CTITimeEvolution`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisCTICalibrationResults -->|cti_results_in<br>1..1| pipeline\n+    pipeline -->|dpdcticalibration<br>1..1| DpdVisCTITimeEvolutionModel\n+    pipeline -->|dpdanalysis<br>1..1| DpdVisAnalysisResults\n+```\n+\n+**Ports description:**\n+\n+* `MDB`: Mission DataBase\n+* `cti_results_in`: list of previous CTI calibration pipeline results.\n+* `dpdctitimeevolution`: CTI time evolution model.\n+* `dpdanalysis`: quality assessment parameters\n+\n+## Processing triggering assumptions\n+\n+The pipeline will not be triggered from mission start, and will be switched on when CTI calibration results\n+indicate a need for CTI correction in science data.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run requires:\n+\n+| Cores | RSS (GB)       | Walltime (h) | Disk space (GB)                            |\n+|-------|----------------|--------------|--------------------------------------------|\n+| 36    | 1152 (36 * 32) | 6            | 1+ (Increases as more CTI results created) | # Estimate from workdir\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing\n+order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "written chap10_CTITimeEvolution.md",
                            "James Nightingale",
                            "2023-07-26T13:39:28.000+01:00",
                            "2254336d7dd370a28e9b34a6d165aedc592041e5"
                        ],
                        [
                            "@@ -3,3 +3,6 @@\n # Pipeline `VIS_CTITimeEvolution_Pipeline`\n \n TBW\n+\n+\n+CTITimeEvolutionModel\n\\ No newline at end of file\n",
                            "wirrten chap09_CTIMasterCI.md",
                            "James Nightingale",
                            "2023-07-26T13:30:42.000+01:00",
                            "d26de7b023427adca788b167872dfa5e950a2a6f"
                        ]
                    ],
                    "doc/user_manual/chap11_DiffractionSpikesFocus.md": [
                        [
                            "@@ -0,0 +1,63 @@\n+\\newpage\n+\n+# Pipeline `VIS_DiffractionSpikesFocus_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_DiffractionSpikesFocus**: The aim of the algorithm is to measure (primarily) focus variations by detecting diffraction spikes around bright stars (including saturated stars) and measuring the lateral shifts of the spikes, following [EUCL-OXF-TN-8-\n+012](https://euclid.roe.ac.uk/dmsf/files/17822/view) although with a different measurement method from what was proposed in that Tech Note.\n+\n+Diffraction spike detection is carried out on each individual science exposure, by first generating an expected spike pattern using the PSF toolkit, for various values of telescope focus, then using a Fourier filtering method to cross-correlate the predicted spike patterns with the data. The best-fitting spike pattern is used to output an estimated focus value for each star.\n+\n+A focus estimate for the entire exposure is obtained from a weighted average over all detected star patterns with outlier rejection.\n+\n+The core algorithm was written by OU-SHE Lance Miller.\n+\n+The related GitLab projects are [RD6]:\n+\n+* `VIS_DiffractionSpikesFocus`\n+* `SHE_PSFToolkit`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of Pipeline `VIS_DiffractionSpikesFocus`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_DiffractionSpikesFocus)\n+    DpdVisCalibratedFrame ==>|cal_frames_in<br>1..*| pipeline\n+    DpdVisFileContainer -->|nominal_focus<br>1..1| pipeline\n+    pipeline -->|focus_list_out<br>1..*| DpdVisFileContainer&nbsp;\n+```\n+\n+**Ports description:**\n+\n+* `cal_frames_in`: input list of VIS processed science exposures\n+* `nominal_focus`: initial central focus value. It's a floating point number in micrometre stored in a genereic 'nominal_focus' key parameter\n+* `focus_list_out`: list of focus analysis results per exposure\n+\n+## Processing triggering assumptions\n+\n+The pipeline may be triggered anytime a telescope focus value measurement is needed, from any VIS processed science exposure.\n+\n+It is not currently planned to be triggered automatically. It will first be run manually until a focus monitoring automatisation scheme is devised.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+Hardware requirement for the pipeline depend on the number of input science exposures ([#21328#note-52](https://euclid.roe.ac.uk/issues/21328#note-52)).\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space |\n+| ----- | -------- | ------------ | ---------- |\n+|     8 |       24 | 0.25/exp     | 100KB/exp  |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ],
                        [
                            "@@ -40,6 +40,8 @@ graph LR\n \n The pipeline may be triggered anytime a telescope focus value measurement is needed, from any VIS processed science exposure.\n \n+It is not currently planned to be triggered automatically. It will first be run manually until a focus monitoring automatisation scheme is devised.\n+\n ## Operational constraints\n \n None.\n",
                            "[UPD]SUM: chap11_DiffractionSpikesFocus.md triggering assumptions.",
                            "Catherine Grenet",
                            "2023-07-28T17:53:34.000+02:00",
                            "6845bd9cd4008a181b69ce13bd4dc558f0ad21cf"
                        ],
                        [
                            "@@ -27,7 +27,7 @@ graph LR\n     pipeline(VIS_DiffractionSpikesFocus)\n     DpdVisCalibratedFrame ==>|cal_frames_in<br>1..*| pipeline\n     DpdVisFileContainer -->|nominal_focus<br>1..1| pipeline\n-    pipeline -->|focus_list_out<br>1..1| DpdVisFileContainer&nbsp;\n+    pipeline -->|focus_list_out<br>1..*| DpdVisFileContainer&nbsp;\n ```\n \n **Ports description:**\n",
                            "chap11_DiffractionSpikesFocus.md: fix 'focus_list_out' cardinality in mermaid :-(",
                            "Sylvain Mottet",
                            "2023-07-27T22:15:59.000+02:00",
                            "f53a7d4fca8c7de7aff3cbbe9e62e6ecc5cf77bb"
                        ],
                        [
                            "@@ -26,7 +26,7 @@ The following diagram represents the ports of Pipeline `VIS_DiffractionSpikesFoc\n graph LR\n     pipeline(VIS_DiffractionSpikesFocus)\n     DpdVisCalibratedFrame ==>|cal_frames_in<br>1..*| pipeline\n-    DpdVisFileContainer -->|nominal_focus<br>1..*| pipeline\n+    DpdVisFileContainer -->|nominal_focus<br>1..1| pipeline\n     pipeline -->|focus_list_out<br>1..1| DpdVisFileContainer&nbsp;\n ```\n \n",
                            "chap11_DiffractionSpikesFocus.md: fix 'nominal_focus' cardinality in mermaid",
                            "Sylvain Mottet",
                            "2023-07-27T22:13:16.000+02:00",
                            "8a810d316bae985447d560cc09c046757e617136"
                        ],
                        [
                            "@@ -2,4 +2,60 @@\n \n # Pipeline `VIS_DiffractionSpikesFocus_Pipeline`\n \n-TBW\n+## Pipeline Description\n+\n+**VIS_DiffractionSpikesFocus**: The aim of the algorithm is to measure (primarily) focus variations by detecting diffraction spikes around bright stars (including saturated stars) and measuring the lateral shifts of the spikes, following [EUCL-OXF-TN-8-\n+012](https://euclid.roe.ac.uk/dmsf/files/17822/view) although with a different measurement method from what was proposed in that Tech Note.\n+\n+Diffraction spike detection is carried out on each individual science exposure, by first generating an expected spike pattern using the PSF toolkit, for various values of telescope focus, then using a Fourier filtering method to cross-correlate the predicted spike patterns with the data. The best-fitting spike pattern is used to output an estimated focus value for each star.\n+\n+A focus estimate for the entire exposure is obtained from a weighted average over all detected star patterns with outlier rejection.\n+\n+The core algorithm was written by OU-SHE Lance Miller.\n+\n+The related GitLab projects are [RD6]:\n+\n+* `VIS_DiffractionSpikesFocus`\n+* `SHE_PSFToolkit`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of Pipeline `VIS_DiffractionSpikesFocus`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_DiffractionSpikesFocus)\n+    DpdVisCalibratedFrame ==>|cal_frames_in<br>1..*| pipeline\n+    DpdVisFileContainer -->|nominal_focus<br>1..*| pipeline\n+    pipeline -->|focus_list_out<br>1..1| DpdVisFileContainer&nbsp;\n+```\n+\n+**Ports description:**\n+\n+* `cal_frames_in`: input list of VIS processed science exposures\n+* `nominal_focus`: initial central focus value. It's a floating point number in micrometre stored in a genereic 'nominal_focus' key parameter\n+* `focus_list_out`: list of focus analysis results per exposure\n+\n+## Processing triggering assumptions\n+\n+The pipeline may be triggered anytime a telescope focus value measurement is needed, from any VIS processed science exposure.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+Hardware requirement for the pipeline depend on the number of input science exposures ([#21328#note-52](https://euclid.roe.ac.uk/issues/21328#note-52)).\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space |\n+| ----- | -------- | ------------ | ---------- |\n+|     8 |       24 | 0.25/exp     | 100KB/exp  |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "chap11_DiffractionSpikesFocus.md: first version",
                            "Sylvain Mottet",
                            "2023-07-27T21:52:53.000+02:00",
                            "fa11858143c07f666b338c02ffedf7536139ec11"
                        ]
                    ],
                    "doc/user_manual/chap12_FlagObjects.md": [
                        [
                            "@@ -0,0 +1,100 @@\n+\\newpage\n+\n+# Pipeline `VIS_FlagObjects_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_FlagObjects**: Production of masks of celestial objects in science exposures.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_FlagObjects`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_FlagObjects)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    DpdVisZeroPoint -->|zero_point<br>1..1| pipeline\n+    DpdVisMasterDarkFrame -.->|masterdark<br>0..1| pipeline\n+    DpdVisMasterFlatFrame -.->|masterflat<br>0..1| pipeline\n+    DpdVisPSFModel -->|psf_model<br>1..1| pipeline\n+    DpdVisDistortionModel -.->|dist_model<br>0..1| pipeline\n+    DpdVisLargeFlatFrame -.->|lsf_model<br>0..1| pipeline\n+    DpdVisGhostModel -.->|ghost_model<br>0..1| pipeline\n+    DpdVisStarMask -.->|starmask_model<br>0..1| pipeline\n+    DpdVisBFEModel -.->|bfe_model<br>0..1| pipeline\n+    DpdTrueUniverseOutput -.->|ref_catalogues<br>0..*| pipeline\n+    pipeline -->|objects_flagmap_xml_out<br>1..*| DpdVisFlagMap\n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: raw science exposures\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `gains_model`: gain model\n+* `ron_model`: readout noise model\n+* `saturation_model`: saturation model\n+* `masterbias`: master bias frame from `VIS_MasterBias` pipeline\n+* `flagmaps`: map of defects in darkness from `VIS_MasterDark` pipeline, map of defects in photoresponse from `VIS_MasterFlat` pipeline\n+* `xtalk_model`: empty\n+* `nlcorr_model`: empty\n+* `cti_model`: empty\n+* `zero_point`: on-ground zero point (not used by the pipeline)\n+* `masterdark`: master dark, not to be used as long as dark is not measurable\n+* `masterflat`: master flat frame, not to be used\n+* `psf_model`: PSF model from `VIS_PSFCalibration` pipeline, otherwise any DpdVisPSFModel (not used by the pipeline)\n+* `dist_model`: empty\n+* `lsf_model`: empty\n+* `ghost_model`: empty\n+* `starmask_model`: empty\n+* `bfe_model`: empty\n+* `ref_catalogues`: empty\n+* `objects_flagmap_xml_out`: list of object masks, one for each input exposure\n+\n+## Processing triggering assumptions\n+\n+The pipeline will be triggered on science exposures taken at the same pointing than flat field exposures. It will produce a mask of celestial objects for each pointing. These masks will be used by the `VIS_MasterFlat` pipeline to exclude pixels affected by sky objects from its processing.\n+\n+The way exposures are grouped in different instances of the pipeline does not matter, provided that the masks corresponding to a given input set of flat fields are available when `VIS_MasterFlat` pipeline is triggered.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+Hardware requirement for the pipeline depends on the number of input raw science exposure.\n+\n+A typical run requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| TBW   | TBW      | TBW          | TBW             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap13_GainCalibration.md": [
                        [
                            "@@ -0,0 +1,85 @@\n+\\newpage\n+\n+# Pipeline `VIS_GainCalibration_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_GainCalibration**: Production of gain model for each quadrant from a list of raw flat fields\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_GainCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_GainCalibration)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    DpdVisMasterDarkFrame -.->|masterdark<br>0..1| pipeline\n+    DpdVisBFEModel -.->|bfe_model<br>0..1| pipeline\n+    DpdVisFlagMap -.-> |object_masks<br>0..*| pipeline\n+    pipeline -->|gain_model_xml_out<br>1..*| DpdVisGainModel\n+```\n+\n+**Ports description:**\n+\n+* `DpdVisRawFrame`: raw flat field frames\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `gains_model`: reference gain model (most recent valid gain model or on-ground model)\n+* `ron_model`: readout noise model\n+* `saturation_model`: saturation model\n+* `masterbias`: master bias frame from `VIS_MasterBias` pipeline\n+* `flagmaps`: map of defect in darkness from `VIS_MasterDark` pipeline, map of defects in photoresponse from `VIS_MasterFlat` pipeline\n+* `xtalk_model`: crosstalk model\n+* `nlcorr_model`: non-linearity correction model\n+* `cti_model`: CTI model\n+* `masterdark`: master dark, not to be used as long as dark is not measurable\n+* `bfe_model`: brighter-fatter model\n+* `object_masks`: objects masks from VIS_FlagObjects_Pipeline\n+\n+## Processing triggering assumptions\n+\n+During PV phase the pipeline will be triggered on variant LOW1-1000ADU of calblock PV-022, selecting LED3 flats only (CalibUnit.LedMask=4).\n+\n+Input ports xtalk_model, nlcorr_model, cti_model and bfe_model shall be left empty.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+Hardware requirement for the pipeline depend on the number of input raw flat frames.\n+\n+A typical run on 10 raw flat frames requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| TBW   | TBW      | TBW          | TBW             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ],
                        [
                            "@@ -34,6 +34,7 @@ graph LR\n     DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n     DpdVisMasterDarkFrame -.->|masterdark<br>0..1| pipeline\n     DpdVisBFEModel -.->|bfe_model<br>0..1| pipeline\n+    DpdVisFlagMap -.-> |object_masks<br>0..*| pipeline\n     pipeline -->|gain_model_xml_out<br>1..*| DpdVisGainModel\n ```\n \n@@ -52,6 +53,7 @@ graph LR\n * `cti_model`: CTI model\n * `masterdark`: master dark, not to be used as long as dark is not measurable\n * `bfe_model`: brighter-fatter model\n+* `object_masks`: objects masks from VIS_FlagObjects_Pipeline\n \n ## Processing triggering assumptions\n \n",
                            "[UPD]SUM: chap13_GainCalibration.md port object_masks added.",
                            "Catherine Grenet",
                            "2023-07-28T18:28:36.000+02:00",
                            "242f044e2aa45fcb64bacaf8e40c30b2c46dd632"
                        ]
                    ],
                    "doc/user_manual/chap14_GhostsCalibration.md": [
                        [
                            "@@ -0,0 +1,62 @@\n+\\newpage\n+\n+# Pipeline `VIS_GhostsCalibration_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_GhostsCalibration**: Production of a ghost model from a list of ghosts catalogs\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_GhostsCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_GhostsCalibration)\n+    DpdVisFileContainer ==>|ghost_cat_list<br>1..*| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGhostModel -->|ref_ghost_model_in<br>1..1| pipeline\n+    pipeline -->|ghost_model_xml_out<br>1..*| DpdVisGhostModel \n+```\n+\n+**Ports description:**\n+\n+* `ghost_cat_list`: list of ghosts catalogs, DpdVisFileContainer with VisProduct=ghost_catalogue\n+* `MDB`: Mission DataBase\n+* `ref_ghost_model_in`: reference ghost model (most recent valid model or on-ground model)\n+* `ghost_model_xml_out`: output ghost model\n+\n+## Processing triggering assumptions\n+\n+During PV phase the pipeline will be trigerred on the ghosts catalogs produced by the second run of `VIS_ProcessField` pipeline on calblock PV-001, after large flat correction. The two set of catalogs produced by `VIS_ProcessField`, from nominal and short exposures, will be used.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 120 ghosts catalogs requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 1     | TBW      | 0.2          | 0.003           |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n+\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap15_LargeFlatCalibration.md": [
                        [
                            "@@ -0,0 +1,60 @@\n+\\newpage\n+\n+# Pipeline `VIS_LargeFlatCalibration_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_LargeFlatCalibration**: Production of a large flat from a list of raw science exposures.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_LargeFlatCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_LargeFlatCalibration)\n+    DpdVisCalibratedFrameCatalog ==>|catalogues_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    pipeline -->|largeflatcal_output<br>1..1| DpdVisLargeFlatFrame\n+```\n+\n+**Ports description:**\n+\n+* `catalogues_in`: VIS single exposure catalogs\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `largeflatcal_output`: large flat\n+\n+## Processing triggering assumptions\n+\n+This pipeline will be executed during the processing of calblock PV-001. It will be triggered on the DpdVisCalibratedFrameCatalogs produced by a first ProcessField pipeline executed on PV-001 raw exposures (see description of PV-001 processing in chapter 4). Two instances of the pipeline will be run, one for the short exposures and one for the nominal exposures.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 60 raw bias frames requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| TBW   | TBW      | 0.5          | 10              |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ],
                        [
                            "@@ -2,4 +2,59 @@\n \n # Pipeline `VIS_LargeFlatCalibration_Pipeline`\n \n-TBW\n+## Pipeline Description\n+\n+**VIS_LargeFlatCalibration**: Production of a large flat from a list of raw science exposures.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_LargeFlatCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_LargeFlatCalibration)\n+    DpdVisCalibratedFrameCatalog ==>|catalogues_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    pipeline -->|largeflatcal_output<br>1..1| DpdVisLargeFlatFrame\n+```\n+\n+**Ports description:**\n+\n+* `catalogues_in`: VIS single exposure catalogs\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `largeflatcal_output`: large flat\n+\n+## Processing triggering assumptions\n+\n+This pipeline will be executed during the processing of calblock PV-001. It will be triggered on the DpdVisCalibratedFrameCatalogs produced by a first ProcessField pipeline executed on PV-001 raw exposures (see description of PV-001 processing in chapter 4). Two instances of the pipeline will be run, one for the short exposures and one for the nominal exposures.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 60 raw bias frames requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| TBW   | TBW      | 0.5          | 10              |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n",
                            "[NEW]SUM: chap15_LargeFlatCalibration.md completed",
                            "Catherine Grenet",
                            "2023-07-30T17:53:51.000+02:00",
                            "c9f74d82ff159a13e50a3f0f8a85086c500defec"
                        ]
                    ],
                    "doc/user_manual/chap16_MasterBias.md": [
                        [
                            "@@ -0,0 +1,74 @@\n+\\newpage\n+\n+# Pipeline `VIS_MasterBias`\n+\n+## Pipeline Description\n+\n+**VIS_MasterBias**: Production of a master bias from a list of raw bias frames.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_MasterBias`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_MasterBias)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    pipeline -->|dpdcalib_data<br>1..1| DpdVisMasterBiasFrame\n+    pipeline -->|dpdanalysis<br>1..1| DpdVisAnalysisResults\n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: list of raw bias frames, ImgType.FirstType=BIAS\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `gains_model`: gain model\n+* `ron_model`: readout noise model\n+* `dpdcalib_data`: master bias\n+* `dpdanalysis`: quality assessment parameters\n+\n+Input ports not described above are currently unused.\n+\n+## Processing triggering assumptions\n+\n+The pipeline needs 60 or more raw bias frames.\n+\n+During PV it will be triggered on reception of calblock PV-021.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 60 raw bias frames requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 60    | TBW      | 2            | 300             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap17_MasterDark.md": [
                        [
                            "@@ -0,0 +1,78 @@\n+\\newpage\n+\n+# Pipeline `VIS_MasterDark_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_MasterDark**: Production of a master dark from a list of raw dark frames.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_MasterDark`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_MasterDark)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    pipeline -->|dpdcalib_data<br>1..1| DpdVisMasterDarkFrame\n+    pipeline -->|dpdcalib_flag<br>1..1| DpdVisFlagMap\n+    pipeline -->|dpdanalysis<br>1..1| DpdVisAnalysisResults\n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: list of raw bias frames, ImgType.FirstType=DARK\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `gains_model`: gain model\n+* `ron_model`: readout noise model\n+* `masterbias`: master bias frame from `VIS_MasterBias` pipeline\n+* `dpdcalib_data`: master dark\n+* `dpdcalib_flag`: map of defects in darkness\n+* `dpdanalysis`: quality assessment parameters\n+\n+Input ports not described above are currently unused.\n+\n+## Processing triggering assumptions\n+\n+The pipeline needs 30 or more raw dark frames. Although it can support dark frames of different durations, it will be triggered with dark frames of same duration (ExposureTime) only.\n+\n+During PV it will be triggered on reception of calblock PV-021.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 30 raw dark frames requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 30    | TBW      | 1.5          | 520             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap18_MasterFlat.md": [
                        [
                            "@@ -0,0 +1,93 @@\n+\\newpage\n+\n+# Pipeline `VIS_MasterFlat_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_MasterFlat**: Production of a master flat from a list of raw flat frames.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_MasterFlat`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_MasterFlat)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    DpdVisMasterDarkFrame -.->|masterdark<br>0..1| pipeline\n+    DpdVisBFEModel -.->|bfe_model<br>0..1| pipeline\n+    DpdVisFlagMap -.->|object_masks<br>0..1| pipeline\n+    pipeline -->|dpdcalib_data<br>1..1| DpdVisMasterFlatFrame\n+    pipeline -->|dpdcalib_flag<br>1..1| DpdVisFlagMap\n+    pipeline -->|dpdanalysis<br>1..1| DpdVisAnalysisResults\n+    pipeline -->|dpd_ledprofile<br>1..1| DpdVisFileContainer\n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: list of raw flat frames, ImgType.FirstType=FLAT\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `gains_model`: gain model\n+* `ron_model`: readout noise model\n+* `masterbias`: master bias frame from `VIS_MasterBias` pipeline\n+* `flagmaps`:  map of defects in darkness from `VIS_MasterDark` pipeline\n+* `object_masks`: masks of celestial objects from `VIS_FlagObjects` pipeline\n+* `dpdcalib_data`: master flat\n+* `dpdcalib_flag`: map of defects in photoresponse\n+* `dpdanalysis`: quality assessment parameters\n+* `dpd_ledprofile`: calibration unit profile\n+\n+Input ports not described above are currently unused.\n+\n+## Processing triggering assumptions\n+\n+During PV phase the pipeline will be triggered on the different variants of calblock PV-022.\n+\n+One pipeline will be triggered for each pair (LED, fluence).\n+\n+LED can be selected from CalibUnit.LedMask, a 8-bit field indicating which LED is active: Bit0 (LSB) = LED1, ..., Bit5 = LED6 (see LE1 data model).\n+Fluence can be selected from ObservationSequence.CalBlockVariant: each variant except LED56-PRNU1-PRNU2-BF contains flat fields of one fluence only.\n+\n+The way to select fluence in calblock LED56-PRNU1-PRNU2-BF is TBD (but see https://euclid.roe.ac.uk/issues/21059).\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+Hardware requirement for the pipeline depend on the number of input raw flat frames.\n+\n+A typical run on 32 raw flat frames requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 50    | TBW      | 2            | 164             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap19_NonLinCalibration.md": [
                        [
                            "@@ -0,0 +1,5 @@\n+\\newpage\n+\n+# Pipeline `VIS_NonLinCalibration_Pipeline`\n+\n+TBW\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap20_PSFCalibration.md": [
                        [
                            "@@ -0,0 +1,98 @@\n+\\newpage\n+\n+# Pipeline `VIS_PSFCalibration_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_PSFCalibration**: Production of a PSF model from raw science exposures.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_PSFCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_PSFCalibration)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    DpdVisZeroPoint -.->|zero_point<br>0..1| pipeline\n+    DpdVisMasterDarkFrame -.->|masterdark<br>0..1| pipeline\n+    DpdVisMasterFlatFrame -.->|masterflat<br>0..1| pipeline\n+    DpdVisPSFModel -.->|psf_model<br>0..1| pipeline\n+    DpdVisDistortionModel -.->|dist_model<br>0..1| pipeline\n+    DpdVisLargeFlatFrame -.->|lsf_model<br>0..1| pipeline\n+    DpdVisGhostModel -.->|ghost_model<br>0..1| pipeline\n+    DpdVisStarMask -.->|starmask_model<br>0..1| pipeline\n+    DpdVisBFEModel -.->|bfe_model<br>0..1| pipeline\n+    DpdTrueUniverseOutput -.->|ref_catalogues<br>0..*| pipeline\n+    pipeline -->|psf_model_xml_out<br>1..1| DpdVisPSFModel\n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: raw science frames to be processed\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `gains_model`: gain model\n+* `ron_model`: readout noise model\n+* `saturation_model`: saturation model\n+* `masterbias`: master bias frame from `VIS_MasterBias` pipeline\n+* `flagmaps`: map of defect in darkness from `VIS_MasterDark` pipeline, map of defects in photoresponse from `VIS_MasterFlat` pipeline\n+* `xtalk_model`: crosstalk model\n+* `nlcorr_model`: non-linearity correction model\n+* `cti_model`: CTI model\n+* `zero_point`: zero point, not used\n+* `masterdark`: master dark, not to be used as long as dark is not measurable\n+* `masterflat`: master flat frame\n+* `psf_model`: PSF model, not used\n+* `dist_model`: distortion model, not used\n+* `lsf_model`: large scale flat model from `VIS_LargeFlatCalibration` pipeline, none if not available\n+* `ghost_model`: ghost model, not used\n+* `starmask_model`: star mask model, not used\n+* `bfe_model`: brighter-fatter model\n+* `ref_catalogues`: list of reference catalogues covering raw science frames sky area, not used\n+\n+## Processing triggering assumptions\n+\n+The `VIS_PSFCalibration` pipeline will be the first one to be trigerred on calblock PV-001.\n+\n+It will be executed on short science exposures only.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 58 short science exposures requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 58    | TBW      | 10           | 940             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap21_PTCNLCalibration.md": [
                        [
                            "@@ -0,0 +1,83 @@\n+\\newpage\n+\n+# Pipeline `VIS_PTCNLCalibration_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_PTCNLCalibration**: Production of Non linearity polynomial coefficients from a list of raw flats frames.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_PTCNLCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_PTCNLCalibration)\n+    DpdVisConfigurationFile ==>|vis_config_in<br>1..1   | pipeline\n+    DpdMdbDataBase          ==>|MDB<br>1..1             | pipeline\n+    DpdVisRawFrame          ==>|raw_frames_in<br>1..*   | pipeline\n+    DpdVisFlagmap           ==>|flagmaps<br>1..*        | pipeline\n+    DpdVisGainModel         -->|gains_model<br>1..1     | pipeline\n+    DpdVisBloomingModel     -->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame   ==>|masterbias<br>0..1      | pipeline\n+    DpdVisMasterDarkFrame   -->|masterdark<br>0..1      | pipeline\n+    DpdVisXTalkModel        -->|xtalk_model<br>0..1     | pipeline\n+    DpdVisNonLinearityModel -->|nlcorr_model<br>0..1    | pipeline\n+    DpdVisRONModel          -->|ron_model<br>1..1       | pipeline\n+    DpdVisCTIModel          -->|cti_model<br>0..1       | pipeline\n+    DpdVisBFEModel          -->|bfe_model<br>0..1       | pipeline\n+    DpdVisFlagmap           ==>|object_masks<br>1..*    | pipeline\n+    pipeline                ==>|dpdcalib_ptc<br>1..1    | DpdVisFileContainer\n+    pipeline                ==>|dpdcalib_nl<br>1..1     | DpdVisFileContainer\n+```\n+\n+**Ports description:**\n+\n+* `vis_config_in`   : VIS PF configuration file\n+* `MDB`             : Mission DataBase\n+* `raw_frames_in`   : list of raw flat frames, ImgType.FirstType=FLAT\n+* `flagmaps`        : map of defect in darkness from `VIS_MasterDark` pipeline, map of defects in\n+* `gains_model`     : gain model\n+* `saturation_model`: saturation model\n+* `masterbias`      : master bias frame from `VIS_MasterBias` pipeline\n+* `masterdark`      : master dark frame from `VIS_MasterDark` pipeline (to be left empty)\n+* `xtalk_model`     : crosstalk model\n+* `nlcorr_model`    : non-linearity correction model (to be left empty)\n+* `ron_model`       : readout noise model\n+* `cti_model`       : CTI model\n+* `bfe_model`       : brighter-fatter model (to be left empty)\n+* `object_masks`    : list of object masks, one for each input nominal/short exposure corresponding to the flat pair\n+* `dpdcalib_ptc`    : ptc mean, variance and variance error values for each quadrant json file\n+* `dpdcalib_nl`     : non linearity polynomial coefficients for each quadrant json file\n+\n+## Processing triggering assumptions\n+\n+The pipeline needs at least one pair of flats of same OBS_ID, PTG_ID, nominal fluence value or more as input\n+\n+During PV it will be triggered on reception of calblock PV-029 all variants.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 42 flat frames paires requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| TBW   | TBW      | 33           | TBW             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ],
                        [
                            "@@ -32,7 +32,6 @@ graph LR\n     DpdVisRONModel          -->|ron_model<br>1..1       | pipeline\n     DpdVisCTIModel          -->|cti_model<br>0..1       | pipeline\n     DpdVisBFEModel          -->|bfe_model<br>0..1       | pipeline\n-    DpdTrueUniverseOutput   -->|ref_catalogues<br>1..*  | pipeline\n     DpdVisFlagmap           ==>|object_masks<br>1..*    | pipeline\n     pipeline                ==>|dpdcalib_ptc<br>1..1    | DpdVisFileContainer\n     pipeline                ==>|dpdcalib_nl<br>1..1     | DpdVisFileContainer\n@@ -47,13 +46,12 @@ graph LR\n * `gains_model`     : gain model\n * `saturation_model`: saturation model\n * `masterbias`      : master bias frame from `VIS_MasterBias` pipeline\n-* `masterdark`      : master dark frame from `VIS_MasterDark` pipeline\n+* `masterdark`      : master dark frame from `VIS_MasterDark` pipeline (to be left empty)\n * `xtalk_model`     : crosstalk model\n-* `nlcorr_model`         : non-linearity correction model\n+* `nlcorr_model`    : non-linearity correction model (to be left empty)\n * `ron_model`       : readout noise model\n * `cti_model`       : CTI model\n-* `bfe_model`            : brighter-fatter model\n-* `ref_catalogues`  : list of reference catalogues covering raw science frames sky area\n+* `bfe_model`       : brighter-fatter model (to be left empty)\n * `object_masks`    : list of object masks, one for each input nominal/short exposure corresponding to the flat pair\n * `dpdcalib_ptc`    : ptc mean, variance and variance error values for each quadrant json file\n * `dpdcalib_nl`     : non linearity polynomial coefficients for each quadrant json file\n",
                            "[UPD] chap21_PTCNLCalibration.md: removed ref_catalogues and added \"to be left empty\" information for some entries",
                            "Kane Nguyen-Kim",
                            "2023-08-01T18:11:00.000+02:00",
                            "709f3424772d4f02bafcdc706908161e96800e23"
                        ],
                        [
                            "@@ -19,41 +19,42 @@ The following diagram represents the ports of `Pipeline VIS_PTCNLCalibration`. F\n ```mermaid\n graph LR\n     pipeline(VIS_PTCNLCalibration)\n-    DpdVisRawFrame          ==>|raw_frames_in<br>1..*   | pipeline\n-    DpdTrueUniverseOutput   -->|ref_catalogues<br>1..*  | pipeline\n     DpdVisConfigurationFile ==>|vis_config_in<br>1..1   | pipeline\n-    DpdVisFlagmap           ==>|flagmaps<br>1..*        | pipeline\n-    DpdVisFlagmap           ==>|object_masks<br>1..*    | pipeline\n     DpdMdbDataBase          ==>|MDB<br>1..1             | pipeline\n+    DpdVisRawFrame          ==>|raw_frames_in<br>1..*   | pipeline\n+    DpdVisFlagmap           ==>|flagmaps<br>1..*        | pipeline\n     DpdVisGainModel         -->|gains_model<br>1..1     | pipeline\n-    DpdVisRONModel          -->|ron_model<br>1..1       | pipeline\n     DpdVisBloomingModel     -->|saturation_model<br>0..1| pipeline\n     DpdVisMasterBiasFrame   ==>|masterbias<br>0..1      | pipeline\n+    DpdVisMasterDarkFrame   -->|masterdark<br>0..1      | pipeline\n     DpdVisXTalkModel        -->|xtalk_model<br>0..1     | pipeline\n-    DpdVisStarMask          -->|starmask_model<br>0..1  | pipeline\n+    DpdVisNonLinearityModel -->|nlcorr_model<br>0..1    | pipeline\n+    DpdVisRONModel          -->|ron_model<br>1..1       | pipeline\n     DpdVisCTIModel          -->|cti_model<br>0..1       | pipeline\n-    pipeline                -->|dpdcalib_ptc<br>1..1    | DpdVisFileContainer\n-    pipeline                -->|dpdcalib_nl<br>1..1     | DpdVisFileContainer\n+    DpdVisBFEModel          -->|bfe_model<br>0..1       | pipeline\n+    DpdTrueUniverseOutput   -->|ref_catalogues<br>1..*  | pipeline\n+    DpdVisFlagmap           ==>|object_masks<br>1..*    | pipeline\n+    pipeline                ==>|dpdcalib_ptc<br>1..1    | DpdVisFileContainer\n+    pipeline                ==>|dpdcalib_nl<br>1..1     | DpdVisFileContainer\n ```\n \n **Ports description:**\n \n-* `raw_frames_in`   : list of raw flat frames, ImgType.FirstType=FLAT\n-* `ref_catalogues`  : list of reference catalogues covering raw science frames sky area\n * `vis_config_in`   : VIS PF configuration file\n-* `flagmaps`        : map of defect in darkness from `VIS_MasterDark` pipeline, map of defects in\n-* `MDB`             : Mission DataBase\n-* `gains_model`     : gain model\n-* `ron_model`       : readout noise model\n-* `object_masks`    : list of object masks, one for each input nominal/short exposure corresponding to the flat pair\n * `MDB`             : Mission DataBase\n+* `raw_frames_in`   : list of raw flat frames, ImgType.FirstType=FLAT\n+* `flagmaps`        : map of defect in darkness from `VIS_MasterDark` pipeline, map of defects in\n * `gains_model`     : gain model\n-* `ron_model`       : readout noise model\n * `saturation_model`: saturation model\n * `masterbias`      : master bias frame from `VIS_MasterBias` pipeline\n+* `masterdark`      : master dark frame from `VIS_MasterDark` pipeline\n * `xtalk_model`     : crosstalk model\n+* `nlcorr_model`         : non-linearity correction model\n+* `ron_model`       : readout noise model\n * `cti_model`       : CTI model\n-* `starmask_model`  : star mask model\n+* `bfe_model`            : brighter-fatter model\n+* `ref_catalogues`  : list of reference catalogues covering raw science frames sky area\n+* `object_masks`    : list of object masks, one for each input nominal/short exposure corresponding to the flat pair\n * `dpdcalib_ptc`    : ptc mean, variance and variance error values for each quadrant json file\n * `dpdcalib_nl`     : non linearity polynomial coefficients for each quadrant json file\n \n",
                            "[UPD] chap21_PTCNLCalibration.md: corrected errors in inputs for PTCNLCalibration",
                            "Kane Nguyen-Kim",
                            "2023-08-01T18:03:30.000+02:00",
                            "a299494ad1a62ed67a946c860a5205e4ee420126"
                        ]
                    ],
                    "doc/user_manual/chap22_PersistenceCalibration.md": [
                        [
                            "@@ -0,0 +1,78 @@\n+\\newpage\n+\n+# Pipeline `VIS_PersistenceCalibration_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_PersistenceCalibration**: Production of Non linearity polynomial coefficients from a list of raw flats frames.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_PersistenceCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_PersistenceCalibration)\n+    DpdMdbDataBase          ==>|MDB<br>1..1                 | pipeline\n+    DpdVisRawFrame          ==>|raw_frames_in<br>1..*       | pipeline\n+    DpdVisFlagmap           ==>|flagmaps<br>1..*            | pipeline\n+    DpdVisGainModel         -->|gains_model<br>1..1         | pipeline\n+    DpdVisBloomingModel     -->|saturation_model<br>0..1    | pipeline\n+    DpdVisMasterBiasFrame   ==>|masterbias<br>0..1          | pipeline\n+    DpdVisMasterDarkFrame   -->|masterdark<br>0..1          | pipeline\n+    DpdVisXTalkModel        -->|xtalk_model<br>0..1         | pipeline\n+    DpdVisNonLinearityModel -->|nlcorr_model<br>0..1        | pipeline\n+    DpdVisRONModel          -->|ron_model<br>1..1           | pipeline\n+    DpdVisCTIModel          -->|cti_model<br>0..1           | pipeline\n+    DpdVisConfigurationFile ==>|vis_config_in<br>1..1       | pipeline\n+    DpdVisBFEModel          -->|bfe_model<br>0..1           | pipeline\n+    pipeline                -->|dpdcalib_persistence<br>1..1| DpdVisFileContainer\n+```\n+\n+**Ports description:**\n+\n+* `MDB`                  : Mission DataBase\n+* `raw_frames_in`        : list of raw flat frames, ImgType.FirstType=FLAT\n+* `flagmaps`             : map of defect in darkness from `VIS_MasterDark` pipeline, map of defects in\n+* `gains_model`          : gain model\n+* `saturation_model`     : saturation model\n+* `masterbias`           : master bias frame from `VIS_MasterBias` pipeline\n+* `masterdark`           : master dark frame from `VIS_MasterDark` pipeline\n+* `xtalk_model`          : crosstalk model\n+* `nlcorr_model`         : non-linearity correction model\n+* `ron_model`            : readout noise model\n+* `cti_model`            : CTI model\n+* `vis_config_in`        : VIS PF configuration file\n+* `bfe_model`            : brighter-fatter model\n+* `dpdcalib_persistence` : json file containing difference between dark exposures, mean, variance and mean err of persistence\n+\n+## Processing triggering assumptions\n+\n+The pipeline needs 14 dark frames as input.\n+\n+During PV it will be triggered on reception of calblock PV-031 all variants.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 14 dark frames paires requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| TBW   | TBW      | TBW          | TBW             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ],
                        [
                            "@@ -18,39 +18,38 @@ The following diagram represents the ports of `Pipeline VIS_PersistenceCalibrati\n ```mermaid\n graph LR\n     pipeline(VIS_PersistenceCalibration)\n+    DpdMdbDataBase          ==>|MDB<br>1..1                 | pipeline\n     DpdVisRawFrame          ==>|raw_frames_in<br>1..*       | pipeline\n-    DpdTrueUniverseOutput   -->|ref_catalogues<br>1..*      | pipeline\n-    DpdVisConfigurationFile ==>|vis_config_in<br>1..1       | pipeline\n     DpdVisFlagmap           ==>|flagmaps<br>1..*            | pipeline\n-    DpdMdbDataBase          ==>|MDB<br>1..1                 | pipeline\n     DpdVisGainModel         -->|gains_model<br>1..1         | pipeline\n-    DpdVisRONModel          -->|ron_model<br>1..1           | pipeline\n     DpdVisBloomingModel     -->|saturation_model<br>0..1    | pipeline\n     DpdVisMasterBiasFrame   ==>|masterbias<br>0..1          | pipeline\n-    DpdVisMasterFlatFrame   ==>|masterflat<br>0..1          | pipeline\n-    DpdVisLargeFlatFrame    -->|lsf_model<br>0..1           | pipeline\n+    DpdVisMasterDarkFrame   -->|masterdark<br>0..1          | pipeline\n+    DpdVisXTalkModel        -->|xtalk_model<br>0..1         | pipeline\n+    DpdVisNonLinearityModel -->|nlcorr_model<br>0..1        | pipeline\n+    DpdVisRONModel          -->|ron_model<br>1..1           | pipeline\n     DpdVisCTIModel          -->|cti_model<br>0..1           | pipeline\n+    DpdVisConfigurationFile ==>|vis_config_in<br>1..1       | pipeline\n+    DpdVisBFEModel          -->|bfe_model<br>0..1           | pipeline\n     pipeline                -->|dpdcalib_persistence<br>1..1| DpdVisFileContainer\n ```\n \n **Ports description:**\n \n-* `raw_frames_in`   : list of raw flat frames, ImgType.FirstType=FLAT\n-* `ref_catalogues`  : list of reference catalogues covering raw science frames sky area\n-* `vis_config_in`   : VIS PF configuration file\n-* `flagmaps`        : map of defect in darkness from `VIS_MasterDark` pipeline, map of defects in\n-* `MDB`             : Mission DataBase\n-* `gains_model`     : gain model\n-* `ron_model`       : readout noise model\n-* `gains_model`     : gain model\n-* `ron_model`       : readout noise model\n-* `saturation_model`: saturation model\n-* `masterbias`      : master bias frame from `VIS_MasterBias` pipeline\n-* `masterflat`      : master flat frame\n-* `lsf_model`       : large scale flat model from `VIS_LargeFlatCalibration` pipeline\n-* `cti_model`       : CTI model\n-* `dpdcalib_ptc`    : ptc mean, variance and variance error values for each quadrant json file\n-* `dpdcalib_nl`     : non linearity polynomial coefficients for each quadrant json file\n+* `MDB`                  : Mission DataBase\n+* `raw_frames_in`        : list of raw flat frames, ImgType.FirstType=FLAT\n+* `flagmaps`             : map of defect in darkness from `VIS_MasterDark` pipeline, map of defects in\n+* `gains_model`          : gain model\n+* `saturation_model`     : saturation model\n+* `masterbias`           : master bias frame from `VIS_MasterBias` pipeline\n+* `masterdark`           : master dark frame from `VIS_MasterDark` pipeline\n+* `xtalk_model`          : crosstalk model\n+* `nlcorr_model`         : non-linearity correction model\n+* `ron_model`            : readout noise model\n+* `cti_model`            : CTI model\n+* `vis_config_in`        : VIS PF configuration file\n+* `bfe_model`            : brighter-fatter model\n+* `dpdcalib_persistence` : json file containing difference between dark exposures, mean, variance and mean err of persistence\n \n ## Processing triggering assumptions\n \n",
                            "[UPD] doc/user_manual/chap22_PersistenceCalibration.md: fixed wrong inputs in mermaid graph and description",
                            "Kane Nguyen-Kim",
                            "2023-08-01T17:33:41.000+02:00",
                            "28df502e2c559f943044087fdfa84da06f11071c"
                        ],
                        [
                            "@@ -2,4 +2,78 @@\n \n # Pipeline `VIS_PersistenceCalibration_Pipeline`\n \n-TBW\n+## Pipeline Description\n+\n+**VIS_PersistenceCalibration**: Production of Non linearity polynomial coefficients from a list of raw flats frames.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_PersistenceCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_PersistenceCalibration)\n+    DpdVisRawFrame          ==>|raw_frames_in<br>1..*       | pipeline\n+    DpdTrueUniverseOutput   -->|ref_catalogues<br>1..*      | pipeline\n+    DpdVisConfigurationFile ==>|vis_config_in<br>1..1       | pipeline\n+    DpdVisFlagmap           ==>|flagmaps<br>1..*            | pipeline\n+    DpdMdbDataBase          ==>|MDB<br>1..1                 | pipeline\n+    DpdVisGainModel         -->|gains_model<br>1..1         | pipeline\n+    DpdVisRONModel          -->|ron_model<br>1..1           | pipeline\n+    DpdVisBloomingModel     -->|saturation_model<br>0..1    | pipeline\n+    DpdVisMasterBiasFrame   ==>|masterbias<br>0..1          | pipeline\n+    DpdVisMasterFlatFrame   ==>|masterflat<br>0..1          | pipeline\n+    DpdVisLargeFlatFrame    -->|lsf_model<br>0..1           | pipeline\n+    DpdVisCTIModel          -->|cti_model<br>0..1           | pipeline\n+    pipeline                -->|dpdcalib_persistence<br>1..1| DpdVisFileContainer\n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`   : list of raw flat frames, ImgType.FirstType=FLAT\n+* `ref_catalogues`  : list of reference catalogues covering raw science frames sky area\n+* `vis_config_in`   : VIS PF configuration file\n+* `flagmaps`        : map of defect in darkness from `VIS_MasterDark` pipeline, map of defects in\n+* `MDB`             : Mission DataBase\n+* `gains_model`     : gain model\n+* `ron_model`       : readout noise model\n+* `gains_model`     : gain model\n+* `ron_model`       : readout noise model\n+* `saturation_model`: saturation model\n+* `masterbias`      : master bias frame from `VIS_MasterBias` pipeline\n+* `masterflat`      : master flat frame\n+* `lsf_model`       : large scale flat model from `VIS_LargeFlatCalibration` pipeline\n+* `cti_model`       : CTI model\n+* `dpdcalib_ptc`    : ptc mean, variance and variance error values for each quadrant json file\n+* `dpdcalib_nl`     : non linearity polynomial coefficients for each quadrant json file\n+\n+## Processing triggering assumptions\n+\n+The pipeline needs 14 dark frames as input.\n+\n+During PV it will be triggered on reception of calblock PV-031 all variants.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 14 dark frames paires requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| TBW   | TBW      | TBW          | TBW             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "[UPD] chap22_PersistenceCalibration.md: updated Chapter 22, PersistenceCalibration pipeline",
                            "Kane Nguyen-Kim",
                            "2023-07-25T15:12:10.000+02:00",
                            "4cf9ed8f8e2cf06f97f73097c08f0345b237d89c"
                        ]
                    ],
                    "doc/user_manual/chap23_PhotometryCalibration.md": [
                        [
                            "@@ -0,0 +1,60 @@\n+\\newpage\n+\n+# Pipeline `VIS_PhotometryCalibration_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_PhotometryCalibration**: production of the VIS zeropoint.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of pipeline `VIS_PhotometryCalibration`.  For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_PhotometryCalibration)\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisCalibratedFrameCatalog ==>|catalogues_in<br>1..*| pipeline\n+    pipeline -->|zero_point_xml_out<br>1..1| DpdVisZeroPoint\n+```\n+\n+**Ports description:**\n+\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `catalogues_in`: calibrated input catalogues\n+* `zero_point_xml_out`: VIS zero point\n+\n+## Processing triggering assumptions\n+\n+The pipeline will be triggered during the processing of calblocks PV-001 and PV-002 on the DpdVisCalibratedFrameCatalog produced by ProcessField pipelines. See chapter 4 for more details on PV-001 and PV-002 processing.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 60 raw bias frames requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 1     | TBW      | 0.25         | 0.002           |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+ \n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ],
                        [
                            "@@ -23,7 +23,7 @@ graph LR\n     pipeline(VIS_PhotometryCalibration)\n     DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n     DpdMdbDataBase -->|MDB<br>1..1| pipeline\n-    DpdVisCalibratedFrameCatalog -->|catalogues_in<br>1..*| pipeline\n+    DpdVisCalibratedFrameCatalog ==>|catalogues_in<br>1..*| pipeline\n     pipeline -->|zero_point_xml_out<br>1..1| DpdVisZeroPoint\n ```\n \n",
                            "[NEW]SUM: chap26_Stacking.md completed.",
                            "Catherine Grenet",
                            "2023-07-31T12:00:34.000+02:00",
                            "4fe156cfb5f3aa00536a684f6f47c2ea109f14c3"
                        ],
                        [
                            "@@ -2,4 +2,59 @@\n \n # Pipeline `VIS_PhotometryCalibration_Pipeline`\n \n-TBW\n+## Pipeline Description\n+\n+**VIS_PhotometryCalibration**: production of the VIS zeropoint.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of pipeline `VIS_PhotometryCalibration`.  For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_PhotometryCalibration)\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisCalibratedFrameCatalog -->|catalogues_in<br>1..*| pipeline\n+    pipeline -->|zero_point_xml_out<br>1..1| DpdVisZeroPoint\n+```\n+\n+**Ports description:**\n+\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `catalogues_in`: calibrated input catalogues\n+* `zero_point_xml_out`: VIS zero point\n+\n+## Processing triggering assumptions\n+\n+The pipeline will be triggered during the processing of calblocks PV-001 and PV-002 on the DpdVisCalibratedFrameCatalog produced by ProcessField pipelines. See chapter 4 for more details on PV-001 and PV-002 processing.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 60 raw bias frames requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 1     | TBW      | 0.25         | 0.002           |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+ \n",
                            "[NEW]SUM: chap23_PhotometryCalibration.md completed.",
                            "Catherine Grenet",
                            "2023-07-30T18:48:49.000+02:00",
                            "cfca1422c263923df4b60b8a3b658cefec0b293f"
                        ]
                    ],
                    "doc/user_manual/chap24_ProcessField.md": [
                        [
                            "@@ -0,0 +1,117 @@\n+\\newpage\n+\n+# Pipeline `VIS_ProcessField_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_ProcessField**: Production of calibrated frames and associated catalogs from a list of raw science exposures. Optionally, production of the stacked image and its associated catalog.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_ProcessField`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_ProcessField)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    DpdVisZeroPoint -->|zero_point<br>1..1| pipeline\n+    DpdVisMasterDarkFrame -.->|masterdark<br>0..1| pipeline\n+    DpdVisMasterFlatFrame -.->|masterflat<br>0..1| pipeline\n+    DpdVisPSFModel -->|psf_model<br>1..1| pipeline\n+    DpdVisDistortionModel -->|dist_model<br>1..1| pipeline\n+    DpdVisLargeFlatFrame -.->|lsf_model<br>0..1| pipeline\n+    DpdVisGhostModel -->|ghost_model<br>1..1| pipeline\n+    DpdVisStarMask -->|starmask_model<br>1..1| pipeline\n+    DpdVisBFEModel -.->|bfe_model<br>0..1| pipeline\n+    DpdTrueUniverseOutput -->|ref_catalogues<br>1..*| pipeline\n+\n+    pipeline -->|dpdcalibrated_frames<br>1..*| DpdVisCalibratedFrame\n+    pipeline -->|dpdcalibrated_catalogues<br>1..*| DpdVisCalibratedFrameCatalog\n+    pipeline -->|dpdghost_catalogues<br>1..*| DpdVisFileContainer\n+    pipeline -.->|dpdstacked_frame<br>0..1|DpdVisStackedFrame\n+    pipeline -.->|dpdstacked_catalogue<br>0..1|DpdVisStackedFrameCatalog\n+    pipeline -->|dpdanalysis_out<br>1..*| DpdVisAnalysisResults\n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: raw science frames to be processed\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `gains_model`: gain model\n+* `ron_model`: readout noise model\n+* `saturation_model`: saturation model\n+* `masterbias`: master bias frame from `VIS_MasterBias` pipeline\n+* `flagmaps`: map of defect in darkness from `VIS_MasterDark` pipeline, map of defects in photoresponse from `VIS_MasterFlat` pipeline\n+* `xtalk_model`: crosstalk model\n+* `nlcorr_model`: non-linearity correction model\n+* `cti_model`: CTI model\n+* `zero_point`: zero point\n+* `masterdark`: master dark, not to be used as long as dark is not measurable\n+* `masterflat`: master flat frame\n+* `psf_model`: PSF model from `VIS_PSFCalibration` pipeline\n+* `dist_model`: distortion model\n+* `lsf_model`: large scale flat model from `VIS_LargeFlatCalibration` pipeline\n+* `ghost_model`: ghost model\n+* `starmask_model`: star mask model\n+* `bfe_model`: brighter-fatter model\n+* `ref_catalogues`: list of reference catalogues covering raw science frames sky area\n+* `dpdcalibrated_frames`: calibrated images\n+* `dpdcalibrated_catalogues`: calibrated images catalogues\n+* `dpdghost_catalogues`: ghosts catalogues, to be used by `VIS_GhostsCalibration` pipeline\n+* `dpdstacked_frame`: stacked image\n+* `dpdstacked_catalogue`: stacked image catalogue\n+* `dpdanalysis_out`: quality assessment parameters\n+\n+\n+## Processing triggering assumptions\n+\n+During nominal operations the pipeline will be triggered on each observation (ROS). It will also be executed at different stages during PV phase, for the processing of several calblocks.\n+\n+Either during PV or nominal operations, short and nominal science exposures should always be processed in different instances of the pipeline, because the large flat model is different depending on exposure duration.\n+\n+Below we describe the operation of the pipeline during PV, in chronological order of calblocks.\n+\n+TBW\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+Hardware configuration requirements for the pipeline depends on the number of input exposures.\n+\n+N being the cumber of input exposuers:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| N     | TBW      | TBW          | 352 * N + 140   |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ],
                        [
                            "@@ -84,6 +84,34 @@ graph LR\n \n ## Processing triggering assumptions\n \n-Short and nominal science exposures should always be processed in different instances of the pipeline, because the large flat model is different depending on exposure duration.\n+During nominal operations the pipeline will be triggered on each observation (ROS). It will also be executed at different stages during PV phase, for the processing of several calblocks.\n+\n+Either during PV or nominal operations, short and nominal science exposures should always be processed in different instances of the pipeline, because the large flat model is different depending on exposure duration.\n+\n+Below we describe the operation of the pipeline during PV, in chronological order of calblocks.\n \n TBW\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+Hardware configuration requirements for the pipeline depends on the number of input exposures.\n+\n+N being the cumber of input exposuers:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| N     | TBW      | TBW          | 352 * N + 140   |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n+\n",
                            "[DOC] SRN + SUM updates",
                            "Catherine Grenet",
                            "2023-08-02T16:57:54.000+02:00",
                            "88ccdcd06a7f9a2c6f49cb873c1f90080fd61d0b"
                        ]
                    ],
                    "doc/user_manual/chap25_SmallScaleFlat.md": [
                        [
                            "@@ -0,0 +1,64 @@\n+\\newpage\n+\n+# Pipeline `VIS_SmallScaleFlat_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_SmallScaleFlat**: Produce a 'small-scale' master flat from a list of single-LED / single-fluence master flats.\n+\n+The VIS_SmallScaleFlat pipelines first produces an 'extrapolated to 0 ADU' master flat per LED using all the different fluences available for each LED and extrapolating linearly each pixel to a 0 ADU signal.\n+\n+It then combines all the extrapolated master flat models per LED using an equal weight average. LED weights could be calculated to better fit a given signal SED, but this has not been decided and done yet ([#19832#note-23](https://euclid.roe.ac.uk/issues/19832#note-23)).\n+\n+The related GitLab projects are [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_SmallScaleFlat`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_SmallScaleFlat)\n+    DpdVisRawFrame ==>|prnulist_in<br>1..*| pipeline\n+    DpdVisFlagMap -->|flagmaps_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    pipeline -->|smallscaleflat_out<br>1..1| DpdVisMasterFlatFrame\n+    pipeline -->|prnuflagmap_out<br>1..1| DpdVisFlagMap&nbsp;\n+```\n+\n+**Ports description:**\n+\n+* `prnulist_in`: input list of master flats per LED and per fluence\n+* `flagmaps_in`: input list of master flat associated flagmaps\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `smallscaleflat_out`: output small-scale master flat\n+* `prnuflagmap_out`: output small-scale master flat flagmap\n+\n+## Processing triggering assumptions\n+\n+During PV phase, the pipeline will be triggered when a small-scale flat model is needed to process science data, using available PV-022 master flat models.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+Hardware requirement for the pipeline depend on the number of input master flats and LEDs.\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 1/LED | TBD      | TBD          | TBD             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ],
                        [
                            "@@ -8,7 +8,7 @@\n \n The VIS_SmallScaleFlat pipelines first produces an 'extrapolated to 0 ADU' master flat per LED using all the different fluences available for each LED and extrapolating linearly each pixel to a 0 ADU signal.\n \n-It then combines all the extrapolated master flat models per LED using an equal weight average. LED weights could be calculated to better fit a given signal SED, but this has not been decided and done yet (#19832#note-23).\n+It then combines all the extrapolated master flat models per LED using an equal weight average. LED weights could be calculated to better fit a given signal SED, but this has not been decided and done yet ([#19832#note-23](https://euclid.roe.ac.uk/issues/19832#note-23)).\n \n The related GitLab projects are [RD6]:\n \n",
                            "chap11_DiffractionSpikesFocus.md: first version",
                            "Sylvain Mottet",
                            "2023-07-27T21:52:53.000+02:00",
                            "fa11858143c07f666b338c02ffedf7536139ec11"
                        ],
                        [
                            "@@ -2,4 +2,63 @@\n \n # Pipeline `VIS_SmallScaleFlat_Pipeline`\n \n-TBW\n+## Pipeline Description\n+\n+**VIS_SmallScaleFlat**: Produce a 'small-scale' master flat from a list of single-LED / single-fluence master flats.\n+\n+The VIS_SmallScaleFlat pipelines first produces an 'extrapolated to 0 ADU' master flat per LED using all the different fluences available for each LED and extrapolating linearly each pixel to a 0 ADU signal.\n+\n+It then combines all the extrapolated master flat models per LED using an equal weight average. LED weights could be calculated to better fit a given signal SED, but this has not been decided and done yet (#19832#note-23).\n+\n+The related GitLab projects are [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_SmallScaleFlat`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_SmallScaleFlat)\n+    DpdVisRawFrame ==>|prnulist_in<br>1..*| pipeline\n+    DpdVisFlagMap -->|flagmaps_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    pipeline -->|smallscaleflat_out<br>1..1| DpdVisMasterFlatFrame\n+    pipeline -->|prnuflagmap_out<br>1..1| DpdVisFlagMap&nbsp;\n+```\n+\n+**Ports description:**\n+\n+* `prnulist_in`: input list of master flats per LED and per fluence\n+* `flagmaps_in`: input list of master flat associated flagmaps\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `smallscaleflat_out`: output small-scale master flat\n+* `prnuflagmap_out`: output small-scale master flat flagmap\n+\n+## Processing triggering assumptions\n+\n+During PV phase, the pipeline will be triggered when a small-scale flat model is needed to process science data, using available PV-022 master flat models.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+Hardware requirement for the pipeline depend on the number of input master flats and LEDs.\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 1/LED | TBD      | TBD          | TBD             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "chap25_SmallScaleFlat.md: first incomplete version, hardware requirements are missing",
                            "Sylvain Mottet",
                            "2023-07-27T16:34:36.000+02:00",
                            "36d463bb11de5f8de4aa377f64172da4b101e8f6"
                        ]
                    ],
                    "doc/user_manual/chap26_Stacking.md": [
                        [
                            "@@ -0,0 +1,61 @@\n+\\newpage\n+\n+# Pipeline `VIS_Stacking`\n+\n+## Pipeline Description\n+\n+**VIS_Stacking**: Production of a stack image and associated catalog from a list of calibrated exposures.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of pipeline `VIS_Stacking`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_Stacking)\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdTrueUniverseOutput   -->|ref_catalogues<br>1..*| pipeline\n+    DpdVisCalibratedFrame   ==>|exposure_list<br>1..*| pipeline\n+    pipeline -->|dpdstacked_frame<br>1..1| DpdVisStackedFrame\n+    pipeline -->|dpdstacked_catalogue<br>1..1| DpdVisStackedFrameCatalog\n+```\n+\n+**Ports description:**\n+\n+* `vis_config_in`: VIS PF configuration file\n+* `ref_catalogues`: list of reference catalogues covering input exposures sky area\n+* `exposure_list`: list of input calibrated exposures\n+* `dpdstacked_frame`: stack image\n+* `dpdstacked_catalogue`: catalogue of the stack image\n+\n+## Processing triggering assumptions\n+\n+The pipeline will be triggered on DpdVisCalibratedFrames produced by the VIS_ProcessField pipeline to produce a single astrometric catalog for NIR during processing of calblocks PV-001 and PV-002.\n+\n+## Hardware configuration and related performances\n+\n+Hardware configuration for the pipeline depends on the number of input exposures.\n+\n+Processing of the 60 exposures of PV-001 requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| TBW   | TBW      | 15           | 220             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ],
                        [
                            "@@ -1,5 +1,61 @@\n \\newpage\n \n-# Pipeline `VIS_Stacking_Pipeline`\n+# Pipeline `VIS_Stacking`\n+\n+## Pipeline Description\n+\n+**VIS_Stacking**: Production of a stack image and associated catalog from a list of calibrated exposures.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of pipeline `VIS_Stacking`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_Stacking)\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdTrueUniverseOutput   -->|ref_catalogues<br>1..*| pipeline\n+    DpdVisCalibratedFrame   ==>|exposure_list<br>1..*| pipeline\n+    pipeline -->|dpdstacked_frame<br>1..1| DpdVisStackedFrame\n+    pipeline -->|dpdstacked_catalogue<br>1..1| DpdVisStackedFrameCatalog\n+```\n+\n+**Ports description:**\n+\n+* `vis_config_in`: VIS PF configuration file\n+* `ref_catalogues`: list of reference catalogues covering input exposures sky area\n+* `exposure_list`: list of input calibrated exposures\n+* `dpdstacked_frame`: stack image\n+* `dpdstacked_catalogue`: catalogue of the stack image\n+\n+## Processing triggering assumptions\n+\n+The pipeline will be triggered on DpdVisCalibratedFrames produced by the VIS_ProcessField pipeline to produce a single astrometric catalog for NIR during processing of calblocks PV-001 and PV-002.\n+\n+## Hardware configuration and related performances\n+\n+Hardware configuration for the pipeline depends on the number of input exposures.\n+\n+Processing of the 60 exposures of PV-001 requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| TBW   | TBW      | 15           | 220             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n \n-TBW\n",
                            "[NEW]SUM: chap26_Stacking.md completed.",
                            "Catherine Grenet",
                            "2023-07-31T12:00:34.000+02:00",
                            "4fe156cfb5f3aa00536a684f6f47c2ea109f14c3"
                        ]
                    ],
                    "doc/user_manual/chap27_TrapPumpingCalibration.md": [
                        [
                            "@@ -0,0 +1,97 @@\n+\\newpage\n+\n+# Pipeline `VIS_TrapPumpingCalibration_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_TrapPumpingCalibration**: Production of CCD trap analysis from trap pumping (TP) data.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_TrapPumpingCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_TrapPumpingCalibration)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisMasterDarkFrame -.->|masterdark<br>0..1| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    DpdVisBFEModel -.->|bfe_model<br>0..1| pipeline\n+    pipeline -->|tp_params_xml<br>1..1| DpdVisTrapPumpingResults\n+    pipeline -->|analysis_xml<br>1..1| DpdVisAnalysisResults\n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: list of raw TP frames, ImgType.FirstType=TRAP_PUMPING\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase (not used by the pipeline)\n+* `gains_model`: gain model (not used by the pipeline)\n+* `ron_model`: readout noise model (not used by the pipeline)\n+* `tp_params_xml`: trap parameters from analysis of TP data\n+* `analysis_xml`: quality assessment parameters and plots\n+\n+Input ports not described above are currently unused.\n+\n+## Processing triggering assumptions\n+\n+The pipeline can accept vertical (parallel) trap pumping (VTP) or multiple-readout serial trap pumping (MSTP) data. Separate instances of each of these are run for different TP parameter configurations. A configuration is defined by a combination of a charge injection (CI) injection gate 1 (IG1) voltage and a TP \"shuffling mode\". The configurations are described in general terms below, and specific details of PV configurations are given in the following [subsection](#pv-configurations).\n+\n+For VTP (`TrapPumping.Status=Parallel`), each pipeline instance requires 1 reference CI frame and 11 TP frames. The reference frame is specifically CI for TP: it has `TrapPumping.Status=Parallel` but `ParallelTrapPumpingParameters.ShufflingCyclesCount=1`, being effectively a VTP frame without pumping. The TP frames each have a different value of `ParallelTrapPumpingParameters.PhaseTime`. All frames for each pipeline instance must share the same `ChargeInjection.Parameters.InjectionGate1Voltage`, and the TP frames must share the same `ParallelTrapPumpingParameters.ShufflingMode`.\n+\n+For MSTP (`TrapPumping.Status=MultipleSerial`), each pipeline instance requires 2 frames with the same `ChargeInjection.Parameters.InjectionGate1Voltage` and `SerialTrapPumpingParameters.SerialTrapPumpingParameterList.SerialTrapPumpingParameterSet1.ShufflingMode`. Each frame has a different set of `SerialTrapPumpingParameterSet?.DwellingTime` values.\n+\n+### PV configurations\n+\n+During PV the pipeline will be triggered on reception of calblock PV-027, with an instance to be run for each TP parameter configuration. For VTP, there are 2 IG1 voltages and 4 shuffling modes, giving a total of 8 pipeline instances. For MSTP, there are 2 IG1 voltages and 2 shuffling modes, so 4 instances. The frame selection queries are given below.\n+\n+**VTP:**\n+\n+The queries follow the pattern\n+```\n+ObservationSequence.CalblockId=PV-027&ObservationSequence.CalblockVariant=PARALLEL-CI-<variant>&(TrapPumping.ParallelTrapPumpingParameters.ShufflingCyclesCount=1|TrapPumping.ParallelTrapPumpingParameters.ShufflingMode=<mode>)\n+```\n+with `<variant>` taking the values `HIGH` and `LOW` and, for each of these, `<mode>` taking the values `234`, `123`, `341` and `412`.\n+\n+**STP:**\n+\n+The queries follow the pattern\n+```\n+ObservationSequence.CalBlockId=PV-027&ObservationSequence.CalBlockVariant=SERIAL&ChargeInjection.Parameters.InjectionGate1Voltage.Value=<ig1>&TrapPumping.SerialTrapPumpingParameters.SerialTrapPumpingParameterList.SerialTrapPumpingParameterSet1.ShufflingMode=<mode>\n+```\n+with `<ig1>` taking the values `4.0` and `4.75` and, for each of these, `<mode>` taking the values `23` and `31`.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run of VTP is estimated to use:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 144   | TBD      | <1           | 150             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ],
                        [
                            "@@ -50,13 +50,31 @@ Input ports not described above are currently unused.\n \n ## Processing triggering assumptions\n \n-The pipeline can accept vertical (parallel) trap pumping (VTP) or multiple-readout serial trap pumping (MSTP) data. Separate instances of each of these are run for different TP parameter configurations.\n+The pipeline can accept vertical (parallel) trap pumping (VTP) or multiple-readout serial trap pumping (MSTP) data. Separate instances of each of these are run for different TP parameter configurations. A configuration is defined by a combination of a charge injection (CI) injection gate 1 (IG1) voltage and a TP \"shuffling mode\". The configurations are described in general terms below, and specific details of PV configurations are given in the following [subsection](#pv-configurations).\n \n-For VTP (`TrapPumping.Status=Parallel`), each pipeline instance requires 1 reference charge injection (CI) frame and 11 TP frames. The reference frame is specifically CI for TP: it has `TrapPumping.Status=Parallel` but `ParallelTrapPumpingParameters.ShufflingCyclesCount=1`, being effectively a VTP frame without pumping. The TP frames each have a different value of `ParallelTrapPumpingParameters.PhaseTime`. All frames for each pipeline instance must share the same `ChargeInjection.Parameters.InjectionGate1Voltage`, and the TP frames must share the same `ParallelTrapPumpingParameters.ShufflingMode`.\n+For VTP (`TrapPumping.Status=Parallel`), each pipeline instance requires 1 reference CI frame and 11 TP frames. The reference frame is specifically CI for TP: it has `TrapPumping.Status=Parallel` but `ParallelTrapPumpingParameters.ShufflingCyclesCount=1`, being effectively a VTP frame without pumping. The TP frames each have a different value of `ParallelTrapPumpingParameters.PhaseTime`. All frames for each pipeline instance must share the same `ChargeInjection.Parameters.InjectionGate1Voltage`, and the TP frames must share the same `ParallelTrapPumpingParameters.ShufflingMode`.\n \n For MSTP (`TrapPumping.Status=MultipleSerial`), each pipeline instance requires 2 frames with the same `ChargeInjection.Parameters.InjectionGate1Voltage` and `SerialTrapPumpingParameters.SerialTrapPumpingParameterList.SerialTrapPumpingParameterSet1.ShufflingMode`. Each frame has a different set of `SerialTrapPumpingParameterSet?.DwellingTime` values.\n \n-During PV the pipeline will be triggered on reception of calblock PV-027, with an instance to be run for each TP parameter configuration, which is a combination of a CI injection gate 1 (IG1) voltage and TP shuffling mode. For both VTP and MSTP, there are 2 IG1 voltages. For VTP, there are 4 shuffling modes and for MSTP, there are 2.\n+### PV configurations\n+\n+During PV the pipeline will be triggered on reception of calblock PV-027, with an instance to be run for each TP parameter configuration. For VTP, there are 2 IG1 voltages and 4 shuffling modes, giving a total of 8 pipeline instances. For MSTP, there are 2 IG1 voltages and 2 shuffling modes, so 4 instances. The frame selection queries are given below.\n+\n+**VTP:**\n+\n+The queries follow the pattern\n+```\n+ObservationSequence.CalblockId=PV-027&ObservationSequence.CalblockVariant=PARALLEL-CI-<variant>&(TrapPumping.ParallelTrapPumpingParameters.ShufflingCyclesCount=1|TrapPumping.ParallelTrapPumpingParameters.ShufflingMode=<mode>)\n+```\n+with `<variant>` taking the values `HIGH` and `LOW` and, for each of these, `<mode>` taking the values `234`, `123`, `341` and `412`.\n+\n+**STP:**\n+\n+The queries follow the pattern\n+```\n+ObservationSequence.CalBlockId=PV-027&ObservationSequence.CalBlockVariant=SERIAL&ChargeInjection.Parameters.InjectionGate1Voltage.Value=<ig1>&TrapPumping.SerialTrapPumpingParameters.SerialTrapPumpingParameterList.SerialTrapPumpingParameterSet1.ShufflingMode=<mode>\n+```\n+with `<ig1>` taking the values `4.0` and `4.75` and, for each of these, `<mode>` taking the values `23` and `31`.\n \n ## Operational constraints\n \n",
                            "Update SUM chap27_TrapPumpingCalibration.md to describe frame selection for PV",
                            "Matt Wander",
                            "2023-08-01T21:07:03.000+02:00",
                            "f37bf58e7a3234f647b094030f8761b3cadb0956"
                        ],
                        [
                            "@@ -40,6 +40,9 @@ graph LR\n \n * `raw_frames_in`: list of raw TP frames, ImgType.FirstType=TRAP_PUMPING\n * `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase (not used by the pipeline)\n+* `gains_model`: gain model (not used by the pipeline)\n+* `ron_model`: readout noise model (not used by the pipeline)\n * `tp_params_xml`: trap parameters from analysis of TP data\n * `analysis_xml`: quality assessment parameters and plots\n \n",
                            "Update ports description in chap27_TrapPumpingCalibration.md",
                            "Matt Wander",
                            "2023-07-28T15:01:45.000+02:00",
                            "07d9b3ad893d859d1b9026e99c8c2340f2a0972b"
                        ],
                        [
                            "@@ -2,4 +2,75 @@\n \n # Pipeline `VIS_TrapPumpingCalibration_Pipeline`\n \n-TBW\n+## Pipeline Description\n+\n+**VIS_TrapPumpingCalibration**: Production of CCD trap analysis from trap pumping (TP) data.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_TrapPumpingCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_TrapPumpingCalibration)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisMasterDarkFrame -.->|masterdark<br>0..1| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    DpdVisBFEModel -.->|bfe_model<br>0..1| pipeline\n+    pipeline -->|tp_params_xml<br>1..1| DpdVisTrapPumpingResults\n+    pipeline -->|analysis_xml<br>1..1| DpdVisAnalysisResults\n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: list of raw TP frames, ImgType.FirstType=TRAP_PUMPING\n+* `vis_config_in`: VIS PF configuration file\n+* `tp_params_xml`: trap parameters from analysis of TP data\n+* `analysis_xml`: quality assessment parameters and plots\n+\n+Input ports not described above are currently unused.\n+\n+## Processing triggering assumptions\n+\n+The pipeline can accept vertical (parallel) trap pumping (VTP) or multiple-readout serial trap pumping (MSTP) data. Separate instances of each of these are run for different TP parameter configurations.\n+\n+For VTP (`TrapPumping.Status=Parallel`), each pipeline instance requires 1 reference charge injection (CI) frame and 11 TP frames. The reference frame is specifically CI for TP: it has `TrapPumping.Status=Parallel` but `ParallelTrapPumpingParameters.ShufflingCyclesCount=1`, being effectively a VTP frame without pumping. The TP frames each have a different value of `ParallelTrapPumpingParameters.PhaseTime`. All frames for each pipeline instance must share the same `ChargeInjection.Parameters.InjectionGate1Voltage`, and the TP frames must share the same `ParallelTrapPumpingParameters.ShufflingMode`.\n+\n+For MSTP (`TrapPumping.Status=MultipleSerial`), each pipeline instance requires 2 frames with the same `ChargeInjection.Parameters.InjectionGate1Voltage` and `SerialTrapPumpingParameters.SerialTrapPumpingParameterList.SerialTrapPumpingParameterSet1.ShufflingMode`. Each frame has a different set of `SerialTrapPumpingParameterSet?.DwellingTime` values.\n+\n+During PV the pipeline will be triggered on reception of calblock PV-027, with an instance to be run for each TP parameter configuration, which is a combination of a CI injection gate 1 (IG1) voltage and TP shuffling mode. For both VTP and MSTP, there are 2 IG1 voltages. For VTP, there are 4 shuffling modes and for MSTP, there are 2.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run of VTP is estimated to use:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 144   | TBD      | <1           | 150             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "Write chap27_TrapPumpingCalibration.md",
                            "Matt Wander",
                            "2023-07-27T14:33:01.000+02:00",
                            "eb66f4fcef8edce22f0fcab2dce59442e0317781"
                        ]
                    ],
                    "doc/user_manual/chap28_XTalkCalibration.md": [
                        [
                            "@@ -0,0 +1,98 @@\n+\\newpage\n+\n+# Pipeline `VIS_XTalkCalibration_Pipeline`\n+\n+**VIS_XTalkCalibration**: Production of a crosstalk model from a list of raw science exposures.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of pipeline `VIS_XTalkCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_XTalkCalibration)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    DpdVisZeroPoint -->|zero_point<br>1..1| pipeline\n+    DpdVisMasterDarkFrame -.->|masterdark<br>0..1| pipeline\n+    DpdVisMasterFlatFrame -.->|masterflat<br>0..1| pipeline\n+    DpdVisPSFModel -->|psf_model<br>1..1| pipeline\n+    DpdVisDistortionModel -->|dist_model<br>1..1| pipeline\n+    DpdVisLargeFlatFrame -.->|lsf_model<br>0..1| pipeline\n+    DpdVisGhostModel -->|ghost_model<br>1..1| pipeline\n+    DpdVisStarMask -->|starmask_model<br>1..1| pipeline\n+    DpdVisBFEModel -.->|bfe_model<br>0..1| pipeline\n+    DpdTrueUniverseOutput -->|ref_catalogues<br>1..*| pipeline\n+\n+    pipeline -->|xtalk_model_xml_out<br>1..1| DpdVisXTalkModel \n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: raw science frames to be processed\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `gains_model`: gain model\n+* `ron_model`: readout noise model\n+* `saturation_model`: saturation model\n+* `masterbias`: master bias frame from `VIS_MasterBias` pipeline\n+* `flagmaps`: map of defect in darkness from `VIS_MasterDark` pipeline, map of defects in photoresponse from `VIS_MasterFlat` pipeline\n+* `xtalk_model`: crosstalk model, to be left empty.\n+* `nlcorr_model`: non-linearity correction model\n+* `cti_model`: CTI model\n+* `zero_point`: zero point\n+* `masterdark`: master dark, not to be used as long as dark is not measurable\n+* `masterflat`: master flat frame\n+* `psf_model`: PSF model from `VIS_PSFCalibration` pipeline\n+* `dist_model`: distortion model\n+* `lsf_model`: large scale flat model from `VIS_LargeFlatCalibration` pipeline\n+* `ghost_model`: ghost model\n+* `starmask_model`: star mask model\n+* `bfe_model`: brighter-fatter model\n+* `ref_catalogues`: list of reference catalogues covering raw science frames sky area\n+* `xtalk_model_xml_out`: crosstalk model\n+\n+## Processing triggering assumptions\n+\n+During PV phase the pipeline will be executed during processing of calblock PV-001. See description of PV-001 processing in chapter 4 for more details.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+Hardware configuration for the pipeline depends on the number of input exposures.\n+\n+A typical run on 60 exposures requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 60    | TBW      | 15           | 2100 (*)        |\n+\n+The required disk space is 2100 GB when temporary files are not removed from the workdir.\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ],
                        [
                            "@@ -2,4 +2,97 @@\n \n # Pipeline `VIS_XTalkCalibration_Pipeline`\n \n-TBW\n+**VIS_XTalkCalibration**: Production of a crosstalk model from a list of raw science exposures.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of pipeline `VIS_XTalkCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_XTalkCalibration)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    DpdVisZeroPoint -->|zero_point<br>1..1| pipeline\n+    DpdVisMasterDarkFrame -.->|masterdark<br>0..1| pipeline\n+    DpdVisMasterFlatFrame -.->|masterflat<br>0..1| pipeline\n+    DpdVisPSFModel -->|psf_model<br>1..1| pipeline\n+    DpdVisDistortionModel -->|dist_model<br>1..1| pipeline\n+    DpdVisLargeFlatFrame -.->|lsf_model<br>0..1| pipeline\n+    DpdVisGhostModel -->|ghost_model<br>1..1| pipeline\n+    DpdVisStarMask -->|starmask_model<br>1..1| pipeline\n+    DpdVisBFEModel -.->|bfe_model<br>0..1| pipeline\n+    DpdTrueUniverseOutput -->|ref_catalogues<br>1..*| pipeline\n+\n+    pipeline -->|xtalk_model_xml_out<br>1..1| DpdVisXTalkModel \n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: raw science frames to be processed\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `gains_model`: gain model\n+* `ron_model`: readout noise model\n+* `saturation_model`: saturation model\n+* `masterbias`: master bias frame from `VIS_MasterBias` pipeline\n+* `flagmaps`: map of defect in darkness from `VIS_MasterDark` pipeline, map of defects in photoresponse from `VIS_MasterFlat` pipeline\n+* `xtalk_model`: crosstalk model, to be left empty.\n+* `nlcorr_model`: non-linearity correction model\n+* `cti_model`: CTI model\n+* `zero_point`: zero point\n+* `masterdark`: master dark, not to be used as long as dark is not measurable\n+* `masterflat`: master flat frame\n+* `psf_model`: PSF model from `VIS_PSFCalibration` pipeline\n+* `dist_model`: distortion model\n+* `lsf_model`: large scale flat model from `VIS_LargeFlatCalibration` pipeline\n+* `ghost_model`: ghost model\n+* `starmask_model`: star mask model\n+* `bfe_model`: brighter-fatter model\n+* `ref_catalogues`: list of reference catalogues covering raw science frames sky area\n+* `xtalk_model_xml_out`: crosstalk model\n+\n+## Processing triggering assumptions\n+\n+During PV phase the pipeline will be executed during processing of calblock PV-001. See description of PV-001 processing in chapter 4 for more details.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+Hardware configuration for the pipeline depends on the number of input exposures.\n+\n+A typical run on 60 exposures requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 60    | TBW      | 15           | 2100 (*)        |\n+\n+The required disk space is 2100 GB when temporary files are not removed from the workdir.\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "[NEW]SUM: chap28_XTalkCalibration.md completed.",
                            "Catherine Grenet",
                            "2023-07-31T16:56:49.000+02:00",
                            "3da03b2089a505a0d5d51f31c32e7741193c98d3"
                        ]
                    ],
                    "doc/user_manual/chap5.md": [
                        [
                            "@@ -1,106 +0,0 @@\n-\\newpage\n-\n-# Pipeline `VIS_MasterBias`\n-\n-## Pipeline Description\n-\n-**VIS_MasterBias**: Production of a master bias from a list of raw bias frames.\n-\n-The related GitLab projects are following [RD6]:\n-\n-* `GitLab project 1`\n-* `GitLab project 2`\n-* ...\n-\n-## Pipeline ports with inputs/outputs\n-\n-The following diagram represents the ports of `Pipeline VIS_MasterBias`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n-\n-```mermaid\n-graph LR\n-    pipeline(VIS_MasterBias)\n-    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n-    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n-    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n-    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n-    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n-    DpdVisBloomingModel -.->|saturation_model<br>1..1| pipeline\n-    DpdVisFlagMap -.->|flagmaps<br>1..*| pipeline\n-    DpdVisXTalkModel -.->|xtalk_model<br>1..1| pipeline\n-    DpdVisNonLinearityModel -.->|nlcorr_model<br>1..1| pipeline\n-    DpdVisCTIModel -.->|cti_model<br>1..1| pipeline\n-    pipeline -->|dpdcalib_data<br>1..1| DpdVisMasterBiasFrame\n-    pipeline -->|dpdanalysis<br>1..1| DpdVisAnalysisResults\n-```\n-\n-**Ports description:**\n-\n-* `dpdcalib_flag`: Map of darkness defects\n-\n-## Processing triggering assumptions\n-\n-> Add any information on the operational running context: scales and input data. Modify the bullets below.\n-\n-* PF pipeline triggered at different scales: Obs, Tile, SkyPatch, Full-sky to be completed\n-* Complementary description of the inputs: selection of L2 catalogs with aggregated columns from a selection of (input) PF tiles,\n-* possibly usage of the CATRED OR CONCAT outputs or mock catalogs\n-* any other useful information for creating the pipeline definitions (input/output data product and their optionality and cardinality ) and plan/PPOs\n-\n-| Scale(s) | Periodicity | Input DataProduct | Information for creating the pipeline definition |\n-| -----------   | ----------- | ----------- |  ----------- |\n-| Obs, Tile, SkyPatch, Island, Full sky | Week, Month, Data Release || Quality criteria, Metrics on catalogs, ...|\n-\n-## Operational constraints\n-\n-> Explain what the user must do with the software in addition to the standard rules described in [DR4 SGS Pipeline Operational Procedures]\n- in various states and modes of operation, including contingency and degraded modes\n-> Section by default should be empty (no specific tasks for running this pipeline.)\n-> **Example**\n-> Because GPUs can perform parallel operations on multiple sets of data, they must be used for scientific computation for this pipeline....\n-\n-## Hardware configuration and related performances\n-\n-The hardware requirements for the `PF_name` depend on the dimensions of the input catalogs and the maximum separation scale used in the computations.\n-\n-> Provide below any information on the HW resources and duration for a typical run (possibly add related assumptions vs the pipeline)\n-> Ensure these data are in line with the PackageDef.py in the PF-IAL-Pipelines Gitlab project\n-> Mention here that the PF dynamically (at run time) assigns some infra resources against the input data or configuration\n-\n-| Processing Element | Version | Executable name | Cores | RAM (GB) | Walltime (hours) | Disk space (GB) |\n-| ----------- | ----------- | ----------- | ----------- | ----------- | ----------- | ----------- |\n-| PE name | x.y | Executable1 | n cores or formula against input data | x GB | xx hours | xxx GB |\n-\n-> **Example with typical run** ...\n->\n-> Assuming a typical run (i.e. 2PCF multipole moments) over a data catalog of 3*10^6 objects, and a random catalog of 1.5*10^7 objects,\n-> corresponding to a redshift z-bin of width delta_z=0.1 in the range 0.9 < z < 1.8, with a maximum separation scale of\n-> 200 Mpc/h in bins of 1Mpc/h, > the hardware requirements for each LE_GC_TwoPointCorrelation project PE are listed\n-> below:\n->\n-> | Processing Element | Version | Executable name | Cores | RAM (GB) | Walltime (hours) | Disk space (GB) |\n-> | ----------- | ----------- | ----------- | ----------- | ----------- | ----------- | ----------- |\n-> | LE_GC_TPC | 1.0 | Correlate | 24 | < 1 | < 3 | 15 |\n->\n-> In the worst case, in which the analysis is performed using a single z-bin for the whole redshift range delta_z=0.9, with a data catalog of 1.\n-> 7*10^7 objects, and a random catalog of 8.5*10^8 objects, the hardware requirements increase to 3 GB of RAM and 36 hours.\n-\n-## Normal termination\n-\n-> Describe how the user can interrupt the pipeline and how to determine whether normal termination has occurred. This section is optional.\n-\n-The `Pipeline_Name` pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n-\n-If the code run is locally, code termination can be invoked at any time with Ctrl-C. This will not cause any problems but, depending on the code operation during termination, it may require the user to clean the `workdir` and `workdir/data` folder from incomplete output objects.\n-\n-## Error condition\n-\n-> Describe the common error conditions that can occur as a result of executing the function and how to detect that the error has occurred.\n-\n-The runtime errors related to `Pipeline_Name` are listed below:\n-\n-| Software Executable | Exception | Message | Operator Instruction |\n-| -----------   | ----------- | ----------- |  ----------- |\n-| `Executable X` | Exception name / ID | Configuration file not found | Contact PF support |\n-| `Executable Y` | Exception name / ID | Input product not found | Re-run |\n-| `Executable Z` | Exception name / ID | Message text | Contact infra support |\n-\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/manifest": [
                        [
                            "@@ -1,8 +1,31 @@\n # Manifest for template user manual document\n header.md\n version.md\n-chap1.md # Purpose\n-chap2.md # Applicable & Reference Documents\n-chap3.md # Acronyms, abbreviations and definitions\n-chap4.md # PF Operations Environment\n-chap5.md # Pipeline VIS_Masterbias\n+chap01.md # Purpose\n+chap02.md # Applicable & Reference Documents\n+chap03.md # Acronyms, abbreviations and definitions\n+chap04.md # PF Operations Environment\n+chap05_AstrometryCalibration.md\n+chap06_BloomingCalibration.md\n+chap07_BrighterFatterCalibration.md\n+chap08_CTICalibration.md\n+chap09_CTIMasterCI.md\n+chap10_CTITimeEvolution.md\n+chap11_DiffractionSpikesFocus.md\n+chap12_FlagObjects.md\n+chap13_GainCalibration.md\n+chap14_GhostsCalibration.md\n+chap15_LargeFlatCalibration.md\n+chap16_MasterBias.md\n+chap17_MasterDark.md\n+chap18_MasterFlat.md\n+chap19_NonLinCalibration.md\n+chap20_PSFCalibration.md\n+chap21_PTCNLCalibration.md\n+chap22_PersistenceCalibration.md\n+chap23_PhotometryCalibration.md\n+chap24_ProcessField.md\n+chap25_SmallScaleFlat.md\n+chap26_Stacking.md\n+chap27_TrapPumpingCalibration.md\n+chap28_XTalkCalibration.md\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/title.md": [
                        [
                            "@@ -7,19 +7,22 @@ body-includes: no\n |         |**Document Identification**                                                                          |\n |---------|-----------------------------------------------------------------------------------------------------|\n |Title|Euclid SGS `VIS` PF User Manual \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\. |\n-|Date:|24-Jun-2023|\n+|Date:|24-Jul-2023|\n |Issue|4.0|\n |Reference:|EUCL-IAP-MA-8-002|\n-|Custodian:|Euclid SGS|\n+|Custodian:|Catherine Grenet|\n \n **Prepared by** | **Role**\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\. | **Date**  | **Signature** |\n --------------|--------------------------------|-----------|-----------\n-`User Manual Custodian Name`         | `SDC-xx` `Custodian Role`                                                     |`dd-month-yyyy`|\n+`Catherine Grenet`         | `OU-VIS` `Co-lead`                                                     |`dd-month-yyyy`|\n \n **Contributors** | **Role**\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\. | **Date** | **Signature**\n --------------|--------------------------------|-----------|-----------\n-`Contributor Name 1`|`SDC-xx` `Contributor Role`| |\n-`Contributor Name 2`|`SDC-xx` `Contributor Role`| |\n+`Thomas Flanet`|`SDC-FR` `Developer`| |\n+`Sylvain Mottet`|`SDC-FR` `Developer`| |\n+`Kane Nguyen-Kim`|`SDC-FR` `Developer`| |\n+`James Nightingale`|`SDC-FR` `Developer`| |\n+`Matt Wander`|`SDC-FR` `Developer`| |\n `...`\n \n **Authorised** | **Role**\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\. | **Date** | **Signature**\n@@ -36,8 +39,6 @@ Yannick Mellier|Euclid Consortium Lead||\n \n **Issue**|**Date**|**Page**|**Description of Change** \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\. |**Comment**\n -------|--------|------------------|----------------------------------|----------\n- 0.1 | 07/02/17 | all | First draft | JG|\n- 1.0 | 23/03/17 | none | Previous version elevated to version 1.0 | CV|\n- 2.0 | 06/06/22 | all | New version specific to the SGS environment | DB|\n+ 4.0 | 2023-07-24 | all | First issue in Mardown/Mermaid format | |\n \n ![](images/dot.png) \\\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_ProcessField_Pipeline/PkgDef_VIS_ProcessField.py": [
                        [
                            "@@ -41,7 +41,7 @@ from euclidwf.framework.taskdefs import Executable, Input, Output, ComputingReso\n #mod = importlib.machinery.SourceFileLoader( \"VIS_IAL_PIPELINES_VERSION\", ialversion_path).load_module()\n #TASKS_VER = VIS_IAL_PIPELINES_VERSION.VIS_IAL_PIPELINES_ORIGINAL_VERSION\n \n-TASKS_VER = \"13.0.4\"\n+TASKS_VER = \"13.0.6\"\n \n import os\n PIPE_NAME = \"VIS_\" + os.path.splitext( os.path.basename( __file__))[0].split( \"VIS_\")[1]\n",
                            "[UPD]Set TASKS_VER to 13.0.6",
                            "Catherine Grenet",
                            "2023-08-02T20:19:31.000+02:00",
                            "8aa425c00051ed551b049f8944b24af3bcb9abc8"
                        ]
                    ],
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_CTICalibration_Pipeline/PkgDef_VIS_CTICalibration.py": [
                        [
                            "@@ -79,7 +79,7 @@ calibrate_cti = Executable(\n         Input(\"input_ccd\")],\n     outputs=[Output(\"cti_parallel_output\", mime_type=\"json\"),\n              Output(\"cti_serial_output\", mime_type=\"json\")],\n-    resources=ComputingResources(cores=1, ram=256.0, walltime=4.0),\n+    resources=ComputingResources(cores=1, ram=256.0, walltime=16.0),\n )\n \n VIS_cti_xml_out = Executable(\n",
                            "16 hours wall time for CTI calibration pipeline",
                            "James Nightingale",
                            "2023-08-01T17:37:27.000+01:00",
                            "c8267423e3d78da7f3cf95de23ca3e4e6642fe4d"
                        ],
                        [
                            "@@ -73,11 +73,11 @@ gather_cti_quads = Executable(\n \n calibrate_cti = Executable(\n     command=f\"E-Run VIS_Tasks {TASKS_VER} VIS_CTI_Calibration\",\n-    inputs=[ \n+    inputs=[\n          Input('config'),\n #        Input(\"MDB\"),\n         Input(\"input_ccd\")],\n-    outputs=[Output(\"cti_parallel_output\", mime_type=\"json\"), \n+    outputs=[Output(\"cti_parallel_output\", mime_type=\"json\"),\n              Output(\"cti_serial_output\", mime_type=\"json\")],\n     resources=ComputingResources(cores=1, ram=256.0, walltime=4.0),\n )\n@@ -86,8 +86,8 @@ VIS_cti_xml_out = Executable(\n     command=f\"E-Run VIS_Tasks {TASKS_VER} VIS_cti_xml_out\",\n     inputs=[\"config\", \"calibrate_cti_results_list\"],\n     outputs=[\n-        Output(\"dpdcticalibration\", mime_type=\"json\", content_type=\"listfile\"),\n-        Output(\"dpdanalysis_out\", mime_type=\"json\", content_type=\"listfile\"),\n+        Output(\"dpdparallelcticalibration\"),\n+        Output(\"dpdserialcticalibration\"),\n     ],\n     resources=ComputingResources(cores=1, ram=7.0, walltime=3.0),\n-)\n+)\n\\ No newline at end of file\n",
                            "update output ports in PipScript / PkgDef",
                            "James Nightingale",
                            "2023-07-27T15:26:54.000+01:00",
                            "dcf4f1725624b91e5f255dba4b6a11fd1df57f98"
                        ],
                        [
                            "@@ -37,6 +37,8 @@ from euclidwf.framework.taskdefs import (\n from VIS_ProcessField_Pipeline.PkgDef_VIS_ProcessField import TASKS_VER\n import os\n \n+TASKS_VER = \"13.0.3\"\n+\n PIPE_NAME = \"VIS_\" + os.path.splitext( os.path.basename( __file__))[0].split( \"VIS_\")[1]\n \n VIS_cti_xml_in = Executable(\n",
                            "manual version hacks -- REMOVE BEFORE MERGE",
                            "James Nightingale",
                            "2023-07-27T16:25:24.000+02:00",
                            "cdcaae9dc0b27d7c23122a3d3c389b9480d936fc"
                        ],
                        [
                            "@@ -77,7 +77,7 @@ calibrate_cti = Executable(\n         Input(\"input_ccd\")],\n     outputs=[Output(\"cti_parallel_output\", mime_type=\"json\"), \n              Output(\"cti_serial_output\", mime_type=\"json\")],\n-    resources=ComputingResources(cores=1, ram=64.0, walltime=4.0),\n+    resources=ComputingResources(cores=1, ram=256.0, walltime=4.0),\n )\n \n VIS_cti_xml_out = Executable(\n",
                            "Merge branch 'release-13.0' into develop",
                            "Olivier Herent",
                            "2023-07-25T13:29:57.000+00:00",
                            "a57ebae9b69330474a65e4e7d79cacba43e6750e"
                        ]
                    ],
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_CTICalibration_Pipeline/PipScript_VIS_CTICalibration.py": [
                        [
                            "@@ -92,12 +92,11 @@ def processCTI(   vis_config_in, MDB, raw_frames_in, flagmaps, gains_model, xtal\n  #   calibrate_cti_results_list = process_calibrate_cti(config=config, MDB=MDB, ccd_in=ccd_list)\n     calibrate_cti_results_list = process_calibrate_cti_to_ccd(config=config, MDB=MDB, ccd_list=ccd_list)\n \n-    dpdcticalibration, dpdanalysis_out = PkgDef.VIS_cti_xml_out(\n+    dpdparallelcticalibration, dpdserialcticalibration = PkgDef.VIS_cti_xml_out(\n         config=config, calibrate_cti_results_list=calibrate_cti_results_list\n     )\n \n-    return dpdcticalibration, dpdanalysis_out\n-\n+    return dpdparallelcticalibration, dpdserialcticalibration\n \n if __name__ == \"__main__\":\n     from euclidwf.utilities import visualizer\n",
                            "update output ports in PipScript / PkgDef",
                            "James Nightingale",
                            "2023-07-27T15:26:54.000+01:00",
                            "dcf4f1725624b91e5f255dba4b6a11fd1df57f98"
                        ]
                    ],
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_CTIMasterCI_Pipeline/PipDef_VIS_CTIMasterCI.xml": [
                        [
                            "@@ -0,0 +1,166 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<tsk1:PipelineDef xmlns:sys=\"http://euclid.esa.org/schema/sys\"\n+ xmlns:tsk=\"http://euclid.esa.org/schema/sys/tsk\"\n+ xmlns:tsk1=\"http://euclid.esa.org/schema/interfaces/sys/tsk\"\n+ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+ xsi:schemaLocation=\"http://euclid.esa.org/schema/interfaces/sys/tsk/euc-test-tsk-interface.xsd\">\n+    <EdenVersion>Eden-2.1-dev</EdenVersion>\n+    <CommonDataModelVersion>8.0.3</CommonDataModelVersion>\n+    <TargetSDC>ALLSDC</TargetSDC>\n+    <Id>PipDef_VIS_ProcessField_WIDE_DEV_4.3.2_2020-11-27</Id>\n+    <PipelineVersion>4.3.2</PipelineVersion>\n+    <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n+    <PipelineContext>PRODUCTION</PipelineContext>\n+    <PipelineScriptPath>/cvmfs/euclid-dev.in2p3.fr/CentOS7/EDEN-2.1/opt/euclid/VIS_IAL_Pipelines/4.3.2/InstallArea/x86_64-conda_cos6-gcc73-o2g/auxdir/VIS_ProcessField_Pipeline/PipScript_VIS_ProcessField.py</PipelineScriptPath>\n+    <InputDataSet>\n+        <KeyProductInputDataPlan>\n+            <InputPortName>input</InputPortName>\n+            <DataProductType>DpdVisRawFrame</DataProductType>\n+            <InputQuerySpecPlan>(input.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (input.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (input.Data.ImgType.ThirdType.ProductTypeThirdGroup == \"WIDE\") AND (input.Header.CreationDate.UtcMicrosecDateTime BETWEEN \"UNKNOWN\" AND \"UNKNOWN\") AND (input.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>(input.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (input.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (input.Data.ImgType.ThirdType.ProductTypeThirdGroup == \"WIDE\") AND (input.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <FileFiltering>\n+                <FilesToExclude></FilesToExclude>\n+            </FileFiltering>\n+            <Cardinality>\n+                <Optionality>MANDATORY</Optionality>\n+                <Min>1</Min>\n+                <Max>4</Max>\n+            </Cardinality>\n+        </KeyProductInputDataPlan>\n+        <InputDataPlan>\n+            <InputPortName>masterbias</InputPortName>\n+            <DataProductType>DpdVisMasterBiasFrame</DataProductType>\n+            <InputQuerySpecPlan>(masterbias.Header.ManualValidationStatus.ManualValidationStatus != 'INVALID') AND (masterbias.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <FileFiltering>\n+                <FilesToInclude></FilesToInclude>\n+            </FileFiltering>\n+            <Cardinality>\n+                <Optionality>MANDATORY</Optionality>\n+                <Min>1</Min>\n+                <Max>1</Max>\n+            </Cardinality>\n+        </InputDataPlan>\n+        <InputDataPlan>\n+            <InputPortName>masterflat</InputPortName>\n+            <DataProductType>dpdVisMasterFlatFrame</DataProductType>\n+            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != 'INVALID') AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <FileFiltering>\n+                <FilesToExclude></FilesToExclude>\n+            </FileFiltering>\n+            <Cardinality>\n+                <Optionality>MANDATORY</Optionality>\n+                <Min>1</Min>\n+                <Max>1</Max>\n+            </Cardinality>\n+        </InputDataPlan>\n+        <InputDataPlan>\n+            <InputPortName>nlcorr_model</InputPortName>\n+            <DataProductType>dpdVisNonLinearityModel</DataProductType>\n+            <InputQuerySpecPlan>(nlcorr_model.Header.ManualValidationStatus.ManualValidationStatus != 'INVALID') AND (nlcorr_model.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <FileFiltering>\n+                <FilesToExclude></FilesToExclude>\n+            </FileFiltering>\n+            <Cardinality>\n+                <Optionality>MANDATORY</Optionality>\n+                <Min>1</Min>\n+                <Max>1</Max>\n+            </Cardinality>\n+        </InputDataPlan>\n+        <InputDataPlan>\n+            <InputPortName>psf_model</InputPortName>\n+            <DataProductType>dpdVisPSFModel</DataProductType>\n+            <InputQuerySpecPlan>(psf_model.Header.ManualValidationStatus.ManualValidationStatus != 'INVALID') AND (psf_model.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <FileFiltering>\n+                <FilesToExclude></FilesToExclude>\n+            </FileFiltering>\n+            <Cardinality>\n+                <Optionality>MANDATORY</Optionality>\n+                <Min>1</Min>\n+                <Max>1</Max>\n+            </Cardinality>\n+        </InputDataPlan>\n+        <InputDataPlan>\n+            <InputPortName>catalogue</InputPortName>\n+            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n+            <InputQuerySpecPlan>(catalogue.Header.ManualValidationStatus.ManualValidationStatus != 'INVALID') AND (catalogue.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <FileFiltering>\n+                <FilesToExclude></FilesToExclude>\n+            </FileFiltering>\n+            <Cardinality>\n+                <Optionality>MANDATORY</Optionality>\n+                <Min>1</Min>\n+                <Max>1</Max>\n+            </Cardinality>\n+        </InputDataPlan>\n+        <InputDataPlan>\n+            <InputPortName>MDB</InputPortName>\n+            <DataProductType>MissionDataBaseSetOfParameters</DataProductType>\n+            <InputQuerySpecPlan>MDB.Header.ProductId.ObjectId==\"EUC_MDB_MISSIONCONFIGURATION-DevSC8_2020-07-28T18:24:00.00Z_04\"</InputQuerySpecPlan>\n+            <FileFiltering>\n+                <FilesToExclude></FilesToExclude>\n+            </FileFiltering>\n+            <Cardinality>\n+                <Optionality>MANDATORY</Optionality>\n+                <Min>1</Min>\n+                <Max>1</Max>\n+            </Cardinality>\n+        </InputDataPlan>\n+        <InputDataPlan>\n+            <DataProductType>DpdVisAuxData</DataProductType>\n+            <InputPortName>auxdatafiles</InputPortName>\n+            <InputQuerySpecPlan>(auxdatafiles.Header.ManualValidationStatus.ManualValidationStatus != 'INVALID') AND (auxdatafiles.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <FileFiltering>\n+                <FilesToExclude></FilesToExclude>\n+            </FileFiltering>\n+            <Cardinality>\n+                <Optionality>MANDATORY</Optionality>\n+                <Min>1</Min>\n+                <Max>1</Max>\n+            </Cardinality>\n+        </InputDataPlan>\n+        <Dependencies>\n+            <GroupedBy>input.Data.ObservationSequence.ObservationId</GroupedBy>\n+            <LinkedBy refPort=\"input\">\n+                <Query>input.Data.ObservationSequence.ObservationId == catalogue.Data.EuclidPointingId</Query>\n+            </LinkedBy>\n+        </Dependencies>\n+    </InputDataSet>\n+    <OutputDataSet>\n+        <OutputDataProduct>\n+            <OutputPortName>dpdcalibrated_frames</OutputPortName>\n+            <DataProductType>dpdVisCalibratedFrame</DataProductType>\n+            <Cardinality>\n+                <Optionality>MANDATORY</Optionality>\n+                <Min>1</Min>\n+                <Max>4</Max>\n+            </Cardinality>\n+        </OutputDataProduct>\n+        <OutputDataProduct>\n+            <OutputPortName>dpdcalibrated_catalogues</OutputPortName>\n+            <DataProductType>dpdVisCalibratedFrameCatalog</DataProductType>\n+            <Cardinality>\n+                <Optionality>MANDATORY</Optionality>\n+                <Min>1</Min>\n+                <Max>4</Max>\n+            </Cardinality>\n+        </OutputDataProduct>\n+        <OutputDataProduct>\n+            <OutputPortName>dpdstacked_frame</OutputPortName>\n+            <DataProductType>dpdVisStackedFrame</DataProductType>\n+            <Cardinality>\n+                <Optionality>MANDATORY</Optionality>\n+                <Min>1</Min>\n+                <Max>1</Max>\n+            </Cardinality>\n+        </OutputDataProduct>\n+        <OutputDataProduct>\n+            <OutputPortName>dpdstacked_catalogues</OutputPortName>\n+            <DataProductType>dpdVisStackedFrameCatalog</DataProductType>\n+            <Cardinality>\n+                <Optionality>MANDATORY</Optionality>\n+                <Min>1</Min>\n+                <Max>1</Max>\n+            </Cardinality>\n+        </OutputDataProduct>\n+    </OutputDataSet>\n+</tsk1:PipelineDef>\n",
                            "Merge branch 'release-13.0' into develop",
                            "Olivier Herent",
                            "2023-07-25T13:29:57.000+00:00",
                            "a57ebae9b69330474a65e4e7d79cacba43e6750e"
                        ]
                    ],
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_CTIMasterCI_Pipeline/PipScript_VIS_CTIMasterCI.py": [
                        [
                            "@@ -0,0 +1,86 @@\n+#\n+# File PipScript_VIS_ProcessField.py\n+#\n+# Created on: Feb 18, 2016\n+\n+from VIS_ProcessField_Pipeline import PkgDef_VIS_ProcessField as PF_Pkg\n+from VIS_CTIMasterCI_Pipeline import PkgDef_VIS_CTIMasterCI as PkgDef\n+\n+\n+from euclidwf.framework.taskdefs import (\n+    Executable,\n+    Input,\n+    Output,\n+    TYPE_LISTFILE,\n+    MIME_PICKLE,\n+)\n+from euclidwf.framework.workflow_dsl import pipeline, parallel\n+\n+\n+@parallel(iterable=\"exposure_in\",\n+           outputs=('processed_quad_list', 'processed_quad_flg_list'),\n+          one_list_per_output=True)\n+def process_quad(config, MDB, exposure_in):\n+\n+    processed_quad_list, processed_quad_flg_list = PF_Pkg.processQuad(\n+        config=config,\n+        MDB=MDB,\n+        raw_exp_in=exposure_in\n+    )\n+\n+    return processed_quad_list, processed_quad_flg_list\n+\n+\n+def process_cti_to_quad(config, MDB, rawexp_list):\n+\n+    cti_quads, cti_quads_flg_list = process_quad(config=config, MDB=MDB, exposure_in=rawexp_list)\n+\n+    return cti_quads\n+\n+\n+@pipeline(outputs=(\"dpdmasterci\", \"dpdanalysis_out\"))\n+def processCTI(   vis_config_in, MDB, raw_frames_in, flagmaps, gains_model, xtalk_model,\n+                  masterbias, masterdark, nlcorr_model, ron_model,\n+                  saturation_model):\n+\n+    rawexp_list, quad_list, config = \\\n+    PkgDef.VIS_cti_xml_in(vis_config_in=  vis_config_in,\n+                          MDB=           MDB,\n+                          raw_frames_in= raw_frames_in,\n+                          flagmaps=      flagmaps,\n+                          gains_model=   gains_model,\n+                          xtalk_model=   xtalk_model,\n+                          master_bias=   masterbias,\n+                          master_dark=   masterdark,\n+                          nlcorr_model=  nlcorr_model,\n+                          ron_model=     ron_model,\n+                          saturation_model = saturation_model)\n+\n+    quad_list = process_cti_to_quad(config=config, MDB=MDB, rawexp_list=rawexp_list)\n+\n+    # Using each ccd_list, perform CTI calibration. This occurs in total 36 times, with a unique calibration for each\n+    # CCD.\n+    cti_master_ci_list = PkgDef.master_ci_estimate(config=config,\n+                                      # MDB,\n+                                      quad_list_of_lists=quad_list)\n+\n+    master_ci_data = PkgDef.quad2FPA(\n+        infilelist_data=cti_master_ci_list,\n+        config=config\n+    )\n+\n+\n+    dpdmasterci, dpdanalysis_out = PkgDef.VIS_cti_master_ci_xml_out(\n+        config=config, cti_master_ci_list=master_ci_data\n+    )\n+\n+    return dpdmasterci, dpdanalysis_out\n+\n+\n+if __name__ == \"__main__\":\n+    from euclidwf.utilities import visualizer\n+    from euclidwf.framework.graph_builder import build_graph\n+\n+    pydron_graph = build_graph(processCTI)\n+    print(str(pydron_graph))\n+    # ## visualizer.visualize_graph(pydron_graph)\n",
                            "Merge branch 'release-13.0' into develop",
                            "Olivier Herent",
                            "2023-07-25T13:29:57.000+00:00",
                            "a57ebae9b69330474a65e4e7d79cacba43e6750e"
                        ]
                    ],
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_CTIMasterCI_Pipeline/__init__.py": [
                        [
                            "",
                            "Merge branch 'release-13.0' into develop",
                            "Olivier Herent",
                            "2023-07-25T13:29:57.000+00:00",
                            "a57ebae9b69330474a65e4e7d79cacba43e6750e"
                        ]
                    ],
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_GainCalibration_Pipeline/PipScript_VIS_GainCalibration.py": [
                        [
                            "@@ -25,14 +25,15 @@ def process_quad(config, MDB, exposure_in):\n   return processed_quad_list, processed_quad_flg_list\n \n @pipeline(outputs=('gain_model_xml_out',))\n-def Gain_Calibration(vis_config_in, MDB, raw_frames_in, flagmaps, gains_model, masterbias, masterdark,\n-                     xtalk_model, nlcorr_model, saturation_model, ron_model, cti_model, bfe_model):\n+def Gain_Calibration(vis_config_in, MDB, raw_frames_in, flagmaps, object_masks, gains_model, masterbias,\n+                     masterdark, xtalk_model, nlcorr_model, saturation_model, ron_model, cti_model, bfe_model):\n \n    rawexp_list, quad_list, config = \\\n         PkgDef.VIS_gain_xml_in( vis_config_in=   vis_config_in,\n                                 MDB=             MDB,\n                                 raw_frames_in=   raw_frames_in,\n                                 flagmaps=        flagmaps,\n+                                object_masks=    object_masks,\n                                 gains_model=     gains_model,\n                                 master_bias=     masterbias,\n                                 master_dark=     masterdark,\n",
                            "Merge branch 'release-13.0' into develop",
                            "Olivier Herent",
                            "2023-07-25T13:29:57.000+00:00",
                            "a57ebae9b69330474a65e4e7d79cacba43e6750e"
                        ]
                    ],
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_GainCalibration_Pipeline/PkgDef_VIS_GainCalibration.py": [
                        [
                            "@@ -21,6 +21,7 @@ VIS_gain_xml_in = Executable(command   = f\"E-Run VIS_Tasks {TASKS_VER} VIS_xml_i\n                                           Input(\"MDB\"),\n                                           Input(\"raw_frames_in\",    content_type=\"listfile\"),\n                                           Input(\"flagmaps\",         content_type=\"listfile\"),\n+                                          Input(\"object_masks\",     content_type=\"listfile\"),\n                                           Input(\"gains_model\"),\n                                           Input(\"saturation_model\", content_type=\"listfile\"),\n                                           Input(\"master_bias\",      content_type=\"listfile\"),\n",
                            "Merge branch 'release-13.0' into develop",
                            "Olivier Herent",
                            "2023-07-25T13:29:57.000+00:00",
                            "a57ebae9b69330474a65e4e7d79cacba43e6750e"
                        ]
                    ],
                    "CMakeLists.txt": [
                        [
                            "@@ -12,6 +12,6 @@ find_package(ElementsProject)\n #                         elements_project(MyProject 1.0 USE Element 3.9)\n #===============================================================================\n \n-elements_project( VIS_IAL_Pipelines 13.0.5\n+elements_project( VIS_IAL_Pipelines 13.0.6\n                   USE ST_PipelineChecker 1.5.0\n                   DESCRIPTION \"VIS Processing Function pipelines interface description\")\n",
                            "Bump version to 13.0.6",
                            "Catherine Grenet",
                            "2023-07-25T15:07:36.000+02:00",
                            "0d80b0c431b39ac09acf8244cb3345001d93bdf5"
                        ],
                        [
                            "@@ -12,6 +12,6 @@ find_package(ElementsProject)\n #                         elements_project(MyProject 1.0 USE Element 3.9)\n #===============================================================================\n \n-elements_project( VIS_IAL_Pipelines 13.0.4\n+elements_project( VIS_IAL_Pipelines 13.0.5\n                   USE ST_PipelineChecker 1.5.0\n                   DESCRIPTION \"VIS Processing Function pipelines interface description\")\n",
                            "Set version to 13.0.5",
                            "Catherine Grenet",
                            "2023-07-25T14:44:46.000+02:00",
                            "d09bc943e1cbea0e0c7978476420cce8e342710b"
                        ]
                    ]
                },
                "selected_modifications": {
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_CTIMasterCI_Pipeline/PkgDef_VIS_CTIMasterCI.py": [
                        [
                            "@@ -69,7 +69,7 @@ master_ci_estimate = Executable(\n #        Input(\"MDB\"),\n         Input(\"quad_list_of_lists\")],\n     outputs=[Output(\"cti_master_ci\", mime_type=\"json\")],\n-    resources=ComputingResources(cores=1, ram=16.0, walltime=4.0),\n+    resources=ComputingResources(cores=1, ram=256.0, walltime=4.0),\n )\n \n quad2FPA = Executable(command = f\"E-Run VIS_Tasks {TASKS_VER} VIS_quad_to_fpa\",\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ],
                        [
                            "@@ -37,6 +37,8 @@ from euclidwf.framework.taskdefs import (\n from VIS_ProcessField_Pipeline.PkgDef_VIS_ProcessField import TASKS_VER\n import os\n \n+TASKS_VER = \"13.0.3\"\n+\n PIPE_NAME = \"VIS_\" + os.path.splitext( os.path.basename( __file__))[0].split( \"VIS_\")[1]\n \n VIS_cti_xml_in = Executable(\n",
                            "manual version hacks -- REMOVE BEFORE MERGE",
                            "James Nightingale",
                            "2023-07-27T16:25:24.000+02:00",
                            "cdcaae9dc0b27d7c23122a3d3c389b9480d936fc"
                        ],
                        [
                            "@@ -0,0 +1,92 @@\n+#\n+# File PkgDef_VIS_ProcessField.py\n+#\n+# Created on: Jan 09, 2016\n+# Author: Catherine Grenet\n+#\n+# VIS package definition for IAL workflow manager\n+#\n+# History\n+# Nov 07, 2017 (LP & OH): processExp task is now splitted in 3 differents tasks to be able to run the astrometry over 4 dithers at the same time:\n+#     processExtractExp, processAstroField and processPhotoExp are now declared in package definition\n+# Oct 19, 2017 (OH): migration from pickle list to json file. Adjust tasks parameters name accordingly\n+# Sep 06, 2017 (CG): \"ram\" now specifies maxrss instead of maxvmem\n+# Aug 24, 2017 (CG):\n+#     VIS_science_xml_out: specify mime_type=\"json\" for outfile (bug #5563)\n+# Nov 26, 2016 (CG):\n+#     processExp: cores = 1 not to use the multicore queues at CC\n+#                 walltime = 24 h to cope the 2nd SExtractor run\n+#     stacking  : walltime = 8 h\n+# Apr 07, 2016 (CG):\n+#     ComputingResources: ram = 4.0 for all jobs\n+# Apr 03, 2016 (CG):\n+#     Non linearity model is not a processQuad input any more\n+# Mar 18, 2016 (CG):\n+#    added processFlatQuad executable\n+# Mar 16, 2016 (CG):\n+#    added explist2quadlist, processQuad and ghosts2stack executables\n+\n+from euclidwf.framework.taskdefs import (\n+    Executable,\n+    Input,\n+    Output,\n+    ComputingResources,\n+    TYPE_LISTFILE,\n+)\n+\n+from VIS_ProcessField_Pipeline.PkgDef_VIS_ProcessField import TASKS_VER\n+import os\n+\n+PIPE_NAME = \"VIS_\" + os.path.splitext( os.path.basename( __file__))[0].split( \"VIS_\")[1]\n+\n+VIS_cti_xml_in = Executable(\n+    command=f\"E-Run VIS_Tasks {TASKS_VER} VIS_xml_in --pipeline_name={PIPE_NAME} \",\n+    inputs=[\n+        Input(\"vis_config_in\"),\n+        Input(\"MDB\"),\n+        Input(\"raw_frames_in\", content_type=\"listfile\"),\n+        Input(\"flagmaps\", content_type=\"listfile\"),\n+        Input(\"gains_model\"),\n+        Input(\"xtalk_model\", content_type=\"listfile\"),\n+        Input(\"master_bias\", content_type=\"listfile\"),\n+        Input(\"master_dark\", content_type=\"listfile\"),\n+        Input(\"nlcorr_model\", content_type=\"listfile\"),\n+        Input(\"ron_model\", content_type=\"listfile\"),\n+        Input(\"saturation_model\", content_type=\"listfile\"),\n+     ],\n+    outputs=[\n+        Output(\"rawexp_list\", mime_type=\"json\", content_type=\"listfile\"),\n+        Output(\"quadlists\", mime_type=\"json\"),\n+        Output(\"piperun_config\", mime_type=\"cfg\")\n+        ],\n+    resources=ComputingResources(cores=1, ram=4.0, walltime=1.0),\n+    )\n+\n+master_ci_estimate = Executable(\n+    command=f\"E-Run VIS_Tasks {TASKS_VER} VIS_CTI_Master_CI\",\n+    inputs=[\n+         Input('config'),\n+#        Input(\"MDB\"),\n+        Input(\"quad_list_of_lists\")],\n+    outputs=[Output(\"cti_master_ci\", mime_type=\"json\")],\n+    resources=ComputingResources(cores=1, ram=16.0, walltime=4.0),\n+)\n+\n+quad2FPA = Executable(command = f\"E-Run VIS_Tasks {TASKS_VER} VIS_quad_to_fpa\",\n+                      inputs = [Input(\"infilelist_data\"), \"config\"],\n+                      outputs = [Output(\"master_data\", mime_type=\"json\")],\n+                      resources = ComputingResources(cores = 1,\n+                                                     ram = 3.0,\n+                                                     walltime = 1.0))\n+\n+\n+\n+VIS_cti_master_ci_xml_out = Executable(\n+    command=f\"E-Run VIS_Tasks {TASKS_VER} VIS_cti_master_ci_xml_out\",\n+    inputs=[\"config\", \"cti_master_ci_list\"],\n+    outputs=[\n+        Output(\"dpdmasterci\", mime_type=\"json\", content_type=\"listfile\"),\n+        Output(\"dpdanalysis_out\", mime_type=\"json\", content_type=\"listfile\"),\n+    ],\n+    resources=ComputingResources(cores=1, ram=7.0, walltime=3.0),\n+)\n",
                            "Merge branch 'release-13.0' into develop",
                            "Olivier Herent",
                            "2023-07-25T13:29:57.000+00:00",
                            "a57ebae9b69330474a65e4e7d79cacba43e6750e"
                        ]
                    ],
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_CTITimeEvolution_Pipeline/PkgDef_VIS_CTITimeEvolution.py": [
                        [
                            "@@ -17,7 +17,6 @@ from VIS_ProcessField_Pipeline.PkgDef_VIS_ProcessField import TASKS_VER\n VIS_xml_in = Executable(\n     command=f\"E-Run VIS_Tasks {TASKS_VER} VIS_cti_time_evolution_xml_in\",\n     inputs=[\n-        Input(\"auxdatafiles\"),\n         Input(\"MDB\"),\n         Input(\"cti_results_in\", content_type=\"listfile\"),\n      ],\n@@ -34,7 +33,7 @@ fit_cti_time_evolution = Executable(command   = f\"E-Run VIS_Tasks {TASKS_VER} VI\n                                       Input(\"cti_results_x1_ccd\")],\n                          outputs   = [Output(\"time_evolution_json\", mime_type=\"json\")],\n                          resources = ComputingResources(cores = 1,\n-                                                        ram = 4.0,\n+                                                        ram = 32.0,\n                                                         walltime = 6.0))\n \n VIS_cti_xml_out = Executable(\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_ProcessField_Pipeline/PkgDef_VIS_ProcessField.py": [
                        [
                            "@@ -41,7 +41,7 @@ from euclidwf.framework.taskdefs import Executable, Input, Output, ComputingReso\n #mod = importlib.machinery.SourceFileLoader( \"VIS_IAL_PIPELINES_VERSION\", ialversion_path).load_module()\n #TASKS_VER = VIS_IAL_PIPELINES_VERSION.VIS_IAL_PIPELINES_ORIGINAL_VERSION\n \n-TASKS_VER = \"13.0.4\"\n+TASKS_VER = \"13.0.6\"\n \n import os\n PIPE_NAME = \"VIS_\" + os.path.splitext( os.path.basename( __file__))[0].split( \"VIS_\")[1]\n",
                            "[UPD]Set TASKS_VER to 13.0.6",
                            "Catherine Grenet",
                            "2023-08-02T20:19:31.000+02:00",
                            "8aa425c00051ed551b049f8944b24af3bcb9abc8"
                        ]
                    ],
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_CTICalibration_Pipeline/PkgDef_VIS_CTICalibration.py": [
                        [
                            "@@ -79,7 +79,7 @@ calibrate_cti = Executable(\n         Input(\"input_ccd\")],\n     outputs=[Output(\"cti_parallel_output\", mime_type=\"json\"),\n              Output(\"cti_serial_output\", mime_type=\"json\")],\n-    resources=ComputingResources(cores=1, ram=256.0, walltime=4.0),\n+    resources=ComputingResources(cores=1, ram=256.0, walltime=16.0),\n )\n \n VIS_cti_xml_out = Executable(\n",
                            "16 hours wall time for CTI calibration pipeline",
                            "James Nightingale",
                            "2023-08-01T17:37:27.000+01:00",
                            "c8267423e3d78da7f3cf95de23ca3e4e6642fe4d"
                        ],
                        [
                            "@@ -73,11 +73,11 @@ gather_cti_quads = Executable(\n \n calibrate_cti = Executable(\n     command=f\"E-Run VIS_Tasks {TASKS_VER} VIS_CTI_Calibration\",\n-    inputs=[ \n+    inputs=[\n          Input('config'),\n #        Input(\"MDB\"),\n         Input(\"input_ccd\")],\n-    outputs=[Output(\"cti_parallel_output\", mime_type=\"json\"), \n+    outputs=[Output(\"cti_parallel_output\", mime_type=\"json\"),\n              Output(\"cti_serial_output\", mime_type=\"json\")],\n     resources=ComputingResources(cores=1, ram=256.0, walltime=4.0),\n )\n@@ -86,8 +86,8 @@ VIS_cti_xml_out = Executable(\n     command=f\"E-Run VIS_Tasks {TASKS_VER} VIS_cti_xml_out\",\n     inputs=[\"config\", \"calibrate_cti_results_list\"],\n     outputs=[\n-        Output(\"dpdcticalibration\", mime_type=\"json\", content_type=\"listfile\"),\n-        Output(\"dpdanalysis_out\", mime_type=\"json\", content_type=\"listfile\"),\n+        Output(\"dpdparallelcticalibration\"),\n+        Output(\"dpdserialcticalibration\"),\n     ],\n     resources=ComputingResources(cores=1, ram=7.0, walltime=3.0),\n-)\n+)\n\\ No newline at end of file\n",
                            "update output ports in PipScript / PkgDef",
                            "James Nightingale",
                            "2023-07-27T15:26:54.000+01:00",
                            "dcf4f1725624b91e5f255dba4b6a11fd1df57f98"
                        ],
                        [
                            "@@ -37,6 +37,8 @@ from euclidwf.framework.taskdefs import (\n from VIS_ProcessField_Pipeline.PkgDef_VIS_ProcessField import TASKS_VER\n import os\n \n+TASKS_VER = \"13.0.3\"\n+\n PIPE_NAME = \"VIS_\" + os.path.splitext( os.path.basename( __file__))[0].split( \"VIS_\")[1]\n \n VIS_cti_xml_in = Executable(\n",
                            "manual version hacks -- REMOVE BEFORE MERGE",
                            "James Nightingale",
                            "2023-07-27T16:25:24.000+02:00",
                            "cdcaae9dc0b27d7c23122a3d3c389b9480d936fc"
                        ],
                        [
                            "@@ -77,7 +77,7 @@ calibrate_cti = Executable(\n         Input(\"input_ccd\")],\n     outputs=[Output(\"cti_parallel_output\", mime_type=\"json\"), \n              Output(\"cti_serial_output\", mime_type=\"json\")],\n-    resources=ComputingResources(cores=1, ram=64.0, walltime=4.0),\n+    resources=ComputingResources(cores=1, ram=256.0, walltime=4.0),\n )\n \n VIS_cti_xml_out = Executable(\n",
                            "Merge branch 'release-13.0' into develop",
                            "Olivier Herent",
                            "2023-07-25T13:29:57.000+00:00",
                            "a57ebae9b69330474a65e4e7d79cacba43e6750e"
                        ]
                    ],
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_GainCalibration_Pipeline/PkgDef_VIS_GainCalibration.py": [
                        [
                            "@@ -21,6 +21,7 @@ VIS_gain_xml_in = Executable(command   = f\"E-Run VIS_Tasks {TASKS_VER} VIS_xml_i\n                                           Input(\"MDB\"),\n                                           Input(\"raw_frames_in\",    content_type=\"listfile\"),\n                                           Input(\"flagmaps\",         content_type=\"listfile\"),\n+                                          Input(\"object_masks\",     content_type=\"listfile\"),\n                                           Input(\"gains_model\"),\n                                           Input(\"saturation_model\", content_type=\"listfile\"),\n                                           Input(\"master_bias\",      content_type=\"listfile\"),\n",
                            "Merge branch 'release-13.0' into develop",
                            "Olivier Herent",
                            "2023-07-25T13:29:57.000+00:00",
                            "a57ebae9b69330474a65e4e7d79cacba43e6750e"
                        ]
                    ]
                },
                "count_selected_modifications": "5",
                "tags_in_period": [
                    {
                        "name": "13.0.5",
                        "created_at": "2023-07-25T14:44:46.000+02:00",
                        "author_name": "Catherine Grenet"
                    },
                    {
                        "name": "13.0.6",
                        "created_at": "2023-08-02T20:20:55.000+02:00",
                        "author_name": "Catherine Grenet"
                    }
                ]
            },
            "PF-VIS/VIS_Transients": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_XTalk": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_BiasCorrection": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_BiasCalibration": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_PRNUCalibration": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_PRNUCorrection": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_Helper_scripts": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_PSF": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_Validation": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_Cosmics": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_CTI": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_NonLinCorrection": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_Pipelines": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_Tasks": {
                "start date": "2023-07-25T09:50:39",
                "end date": "2023-08-02T19:25:05",
                "start tag": "13.0.4",
                "end tag": "13.0.6",
                "count_files_modified": "210",
                "modifications_by_file": {
                    "CMakeLists.txt": [
                        [
                            "@@ -8,7 +8,7 @@ find_package(ElementsProject)\n #                         elements_project(MyProject 1.0 USE Element 3.8)\n #===============================================================================\n \n-elements_project( VIS_Tasks 13.0.5\n+elements_project( VIS_Tasks 13.0.6\n                   USE Elements 6.2.1\n                       VIS_PyLibrary 3.20.2\n                       VIS_ImageTools 3.16.0\n",
                            "[UPD]Bump version to 13.0.6 (resync with VIS_IAL_Pipelines)",
                            "Catherine Grenet",
                            "2023-08-02T19:25:05.000+02:00",
                            "a0314b1868553ed83f46025b57024661e397fea0"
                        ],
                        [
                            "@@ -10,7 +10,7 @@ find_package(ElementsProject)\n \n elements_project( VIS_Tasks 13.0.5\n                   USE Elements 6.2.1\n-                      VIS_PyLibrary 3.20.1\n+                      VIS_PyLibrary 3.20.2\n                       VIS_ImageTools 3.16.0\n                       VIS_CTI 5.8.1\n                       VIS_Instrument_Tools 0.7.0\n",
                            "[UPD]VIS_PyLibrary dependency",
                            "Catherine Grenet",
                            "2023-08-02T19:23:17.000+02:00",
                            "647e694928f02a96f3e3a5733d16359ee33d9797"
                        ],
                        [
                            "@@ -2,12 +2,19 @@ CMAKE_MINIMUM_REQUIRED(VERSION 2.8.5)\n \n find_package(ElementsProject)\n \n-elements_project( VIS_Tasks 11.0\n-                  USE Elements 6.1.1\n-                      VIS_PyLibrary 3.18\n-                      VIS_ImageTools 3.15\n-                      VIS_CTI 5.6.4\n-                      EL_Utils 1.3.1\n-                      ST_DataModelTools 9.1.2\n-                      VIS_Instrument_Tools 0.4.0\n+#===============================================================================\n+# Declare project name and version\n+# Example with dependency:\n+#                         elements_project(MyProject 1.0 USE Element 3.8)\n+#===============================================================================\n+\n+elements_project( VIS_Tasks 13.1\n+                  USE Elements 6.2.1\n+                      VIS_PyLibrary 3.20.1\n+                      VIS_ImageTools 3.17\n+                      VIS_CTI 5.8.1\n+                      VIS_Instrument_Tools 0.7.0\n+                      EL_Utils 1.4.0\n+                      ST_DataModelTools 9.2.0\n+                      EL_CosmicRayDetection 1.1.0\n                   DESCRIPTION \"VIS Processing Function Tasks and Processing Elements\")\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ],
                        [
                            "@@ -11,7 +11,7 @@ find_package(ElementsProject)\n elements_project( VIS_Tasks 13.1\n                   USE Elements 6.2.1\n                       VIS_PyLibrary 3.20.1\n-                      VIS_ImageTools 3.16.0\n+                      VIS_ImageTools 3.17\n                       VIS_CTI 5.8.1\n                       VIS_Instrument_Tools 0.7.0\n                       EL_Utils 1.4.0\n",
                            "update VIS_ImageTools dependecy from 3.16.0 to 3.17",
                            "Sylvain Mottet",
                            "2023-07-26T17:44:09.000+02:00",
                            "d106f41510918711bbe3323d6259064f7d73e730"
                        ],
                        [
                            "@@ -8,7 +8,7 @@ find_package(ElementsProject)\n #                         elements_project(MyProject 1.0 USE Element 3.8)\n #===============================================================================\n \n-elements_project( VIS_Tasks 13.0.4\n+elements_project( VIS_Tasks 13.0.5\n                   USE Elements 6.2.1\n                       VIS_PyLibrary 3.20.1\n                       VIS_ImageTools 3.16.0\n",
                            "Bump version to 13.0.5",
                            "Catherine Grenet",
                            "2023-07-25T14:48:28.000+02:00",
                            "f70a01cf5f1e0acda49126e1a08a5a119754ba54"
                        ]
                    ],
                    "HISTORY.txt": [
                        [
                            "@@ -1,8 +1,14 @@\n VIS_Tasks changelog\n -------------------\n \n+* 31 Jul 2023 - mottet@iap.fr\n+** VIS_process_quad.py: fix #23240, add config_filename to NL correction PE call\n+\n+* 28 Jul 2023 - mottet@iap.fr\n+** VIS_xml_in.py, VIS_ghosts_calibration: fix #23163, now use DpdVisGhostModel to store the ghost model.\n+\n * 25 Jul 2023 - herent@iap.fr\n-** VIS_xml_in.py: add Gain calibration section to setup the activation of specific PE correction \n+** VIS_xml_in.py: add Gain calibration section to setup the activation of specific PE correction\n                   for the Gain calibration pipeline\n \n * 25 Jul 2023 - mottet@iap.fr\n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ],
                        [
                            "@@ -1,6 +1,9 @@\n VIS_Tasks changelog\n -------------------\n \n+* 31 Jul 2023 - mottet@iap.fr\n+** VIS_process_quad.py: fix #23240, add config_filename to NL correction PE call\n+\n * 28 Jul 2023 - mottet@iap.fr\n ** VIS_xml_in.py, VIS_ghosts_calibration: fix #23163, now use DpdVisGhostModel to store the ghost model.\n \n",
                            "Merge branch 'release-13.0' into develop: fix Bug #23240 [CorrectNonLinearity] section missing",
                            "Catherine Grenet",
                            "2023-08-01T10:48:03.000+02:00",
                            "d6ed2ca06b809fbe575e804aaf491cc82d40a7ad"
                        ],
                        [
                            "@@ -1,6 +1,9 @@\n VIS_Tasks changelog\n -------------------\n \n+* 31 Jul 2023 - mottet@iap.fr\n+** VIS_process_quad.py: fix #23240, add config_filename to NL correction PE call\n+\n * 28 Jul 2023 - mottet@iap.fr\n ** VIS_xml_in.py, VIS_ghosts_calibration: fix #23163, now use DpdVisGhostModel to store the ghost model.\n \n",
                            "Merge branch 'hotfix_23240_NLconfig' into 'release-13.0'",
                            "Catherine Grenet",
                            "2023-08-01T08:38:54.000+00:00",
                            "a0342857e6bea87c6e75d8c0756e71923b4d8a50"
                        ],
                        [
                            "@@ -1,6 +1,9 @@\n VIS_Tasks changelog\n -------------------\n \n+* 31 Jul 2023 - mottet@iap.fr\n+** VIS_process_quad.py: fix #23240, add config_filename to NL correction PE call\n+\n * 28 Jul 2023 - mottet@iap.fr\n ** VIS_xml_in.py, VIS_ghosts_calibration: fix #23163, now use DpdVisGhostModel to store the ghost model.\n \n",
                            "VIS_process_quad.py: fix #23240, add config_filename to NL correction PE call",
                            "Sylvain Mottet",
                            "2023-07-31T22:56:54.000+02:00",
                            "3c15e82dbcf77e140c653f2ca955a63c2092a040"
                        ],
                        [
                            "@@ -1,6 +1,131 @@\n VIS_Tasks changelog\n -------------------\n \n+* 28 Jul 2023 - mottet@iap.fr\n+** VIS_xml_in.py, VIS_ghosts_calibration: fix #23163, now use DpdVisGhostModel to store the ghost model.\n+\n+* 25 Jul 2023 - herent@iap.fr\n+** VIS_xml_in.py: add Gain calibration section to setup the activation of specific PE correction\n+                  for the Gain calibration pipeline\n+\n+* 25 Jul 2023 - mottet@iap.fr\n+** VIS_extract_sources.py: fix bug 22894, 'tmpdir' is now automatically and systematically used\n+\n+* 07 July 2023 - v13.0.2 - matt.wander@open.ac.uk\n+** VIS_TrapPumping_IO.plotting: fix bins and stacking on histograms (#22966)\n+\n+* 06 July 2023 - v13.1 - matt.wander@open.ac.uk\n+** VIS_TrapPumping_IO: remove underscores from filename instance IDs to conform to naming rules\n+\n+* 05 July 2023 - v13.0.0 - matt.wander@open.ac.uk\n+** VIS_tp_xml_out: use DM 9.2 DpdVisTrapPumpingResults\n+** VIS_gather_tp_quads: make TP type DM 9.2-compliant in metadata\n+\n+* 04 July 2023 - v13.0 - matt.wander@open.ac.uk\n+** VIS_TrapPumping_IO, VIS_tp_xml_out: add plots to output product and QC analysis\n+\n+* 03 July 2023 - v13.0 - matt.wander@open.ac.uk\n+** VIS_TrapPumping, VIS_tp_calib, VIS_tp_xml_out: add QC stats\n+\n+* 03 July 2023 - v13.0 - matt.wander@open.ac.uk\n+** VIS_TrapPumping_Analysis: make CR flags int type\n+\n+* 03 July 2023 - v13.0 - matt.wander@open.ac.uk\n+** VIS_Tasks_M/VIS_tp_calib: select CI reference frames by number of shuffles, due to change in CalF v1.5.1\n+\n+* 03 July 2023 - v12.0.1 - matt.wander@open.ac.uk\n+** VIS_Tasks_M/VIS_tp_calib: fix TP charge injection file selection (#22888)\n+\n+* 28 June 2023 - v12.0 - matt.wander@open.ac.uk\n+** VIS_Tasks_M:\n+*** add program VIS_tp_xml_out to reduce output from quadrants to whole FPA\n+*** remove DM writing in VIS_tp_calib, now handled by VIS_tp_xml_out\n+*** write new metadata file from VIS_gather_tp_quads, passed through pipeline to other tasks\n+** VIS_TrapPumping_IO: updates to support above pipeline changes\n+\n+* 28 June 2023 - v12.0 - matt.wander@open.ac.uk\n+** VIS_TrapPumping_Analysis: remove \"row\" from serial TP results\n+\n+* 27 Jun 2023 - mottet@iap.fr\n+** VIS_Stacking.py: add '-1' gzip compression level (#22774)\n+\n+* 26 Jun 2023 - mottet@iap.fr\n+** VIS_Stacking.py: fix bugs when inputs are compressed #22777\n+\n+* 24 Jun 2023 - v12.0 - mottet@iap.fr\n+** VIS_PRNU/VIS_SmallScaleFlat/*: VIS_SmallScaleFlat pipeline first version\n+\n+* 23 Jun 2023 - mottet@iap.fr\n+** FromToXML.py: fix bug #22757 by reading DpdVisMasterFlatFrame Data.CalibUnit.LEDID and FLUENCE from the FITS primary header\n+\n+* 15 June 2023 - v12.0 - matt.wander@open.ac.uk\n+** VIS_TrapPumping_Analysis, VIS_tp_calib: add cosmics masking algorithm\n+** VIS_gather_tp_quads, VIS_TrapPumping_IO: add support for change to TP_TOI settings in CalF v1.5.1\n+** VIS_TrapPumping: refactor integration tests (#21130)\n+\n+* 13 June 2023 - v12.0 - matt.wander@open.ac.uk\n+** VIS_tp_calib.py: fix bug where first TP frame is dropped\n+\n+* 08 Jun 2023 - v12.0 - mottet@iap.fr\n+** VIS_xml_in.py: add catalogue sources to plot_footprint\n+** VIS_diagnostics.py: make 'dataproduct' optional for diags directory initilaisation in VIS_xml_in\n+\n+* 03 Jun 2023 - v12.0 - mottet@iap.fr\n+** VIS_calib_xml_out.py: add metadata in MasterDark and MasterFlat FITS filenames\n+\n+* 01 Jun 2023 - v12.0 - mottet@iap.fr\n+** VIS_xml_in.py: fix broken 'cti_model' input since DM 9.1 migration\n+\n+* 25 May 2023 - v12.0 - matt.wander@open.ac.uk\n+** VIS_TrapPumping: new version of TP analysis code\n+** VIS_xml_in.py: allow CHARGE_INJECTION calibration_type for trap pumping pipeline\n+\n+* 15 May 2023 - v12.0 - herent@iap.fr\n+** VIS_xml_in.py: some cleanup on custome initialization of calibration pipelines (resolving issue #22098)\n+\n+* 10 May 2023 - v12.0 - mottet@iap.fr\n+** VIS_diagnostics.py: cleanup and gather code\n+\n+* 05 May 2023 - v12.0 - mottet@iap.fr\n+** VIS_calib_xml_out.py: add 'config_ini' input port for diagnostics HTML page generation in VIS_MasterBias/Dark/Flat pipelines\n+\n+* 04 May 2023 - v12.0 - mottet@iap.fr\n+** VIS_LargeFlat_calib.py: rename input 'config' to 'vis_config_in'\n+** VIS_Stacking.py: rename input 'config' to 'vis_config_in'\n+** VIS_Calibrate_Photometry: fix when input 'config' is an XML file instead of .ini, in VIS_Stacking pipeline\n+\n+* 28 Apr 2023 - v12.0 - matt.wander@open.ac.uk\n+** VIS_Tasks_M/python/VIS_Tasks_M/VIS_tp_calib.py: add support for selecting from multiple CI reference frames\n+\n+* 27 Apr 2023 - v12.0 - mottet@iap.fr\n+** VIS_Cosmics/VIS_expandimage.py: inpaint COLD pixels to fix bug #22032\n+\n+* 27 Apr 2023 - v12.0 - herent@iap.fr\n+** VIS_gain_calib.py: now the common pairing procedure based on PTDID is applied\n+\n+* 26 Apr 2023 - v12.0 - mottet@iap.fr\n+** VIS_flag_ghosts_lib.py: fix #22022 - save HTML ghost flagging report in DpdVisGhostCatalogue.Data.QualityParameterStorage\n+\n+* 21 Apr 2023 - v11.0 - mottet@iap.fr\n+** VIS_stacking: fix #21980: stack filename prefix now have EXPNUM=0\n+\n+* 21 Apr 2023 - v11.0 - herent@iap.fr\n+** VIS_gain_calib.py: now compute the gain statistics on independant pairs\n+** VIS_Calibrate_Photometry.py: now producing photometry qc tables and zero point histogram.\n+   Reshaping the whole crossmatching algorithm. Still some cleaning remaining\n+\n+* 20 Apr 2023 - v11.0 - herent@iap.fr\n+** VIS_gain_calib.py: bug fix when trying to write gain calibration data product. Added some logging information.\n+** VIS_process_flat_quad.py: remove intermediate file mask production\n+** Modules.py: now propagate input distortion model in wcsfit fit-fpa mode\n+\n+* 19 Apr 2023 - v11.0 - mottet@iap.fr\n+** VIS_process_quad.py: restore gain equalisation mistakenly commented out\n+** VIS_diagnostics.py: fix 'Exposure Quality Controls table' broken by PERI format change (#21944)\n+\n+* 18 Apr 2023 - v11.0 - mottet@iap.fr\n+** VIS_xml_in.py: force '[General].Photometry=False' in VIS_AstrometryCalibration config (#21938) and in XTalkCalibration\n+\n * 17 Apr 2023 - v11.0 - mottet@iap.fr\n ** VIS_stacking: implemented fix for #21945 Standalone VIS_Stacking pipeline can't find weight files. To be tested with an actual PPO\n \n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ],
                        [
                            "@@ -1,8 +1,11 @@\n VIS_Tasks changelog\n -------------------\n \n+* 28 Jul 2023 - mottet@iap.fr\n+** VIS_xml_in.py, VIS_ghosts_calibration: fix #23163, now use DpdVisGhostModel to store the ghost model.\n+\n * 25 Jul 2023 - herent@iap.fr\n-** VIS_xml_in.py: add Gain calibration section to setup the activation of specific PE correction \n+** VIS_xml_in.py: add Gain calibration section to setup the activation of specific PE correction\n                   for the Gain calibration pipeline\n \n * 25 Jul 2023 - mottet@iap.fr\n",
                            "Merge branch 'release-13.0' into develop: fix Bug #23163 VIS_GhostsCalibration_Pipeline output product type",
                            "Catherine Grenet",
                            "2023-07-31T10:46:25.000+02:00",
                            "7709c586dea1eda3e1cd60cefb91036b9ef1b536"
                        ],
                        [
                            "@@ -1,8 +1,11 @@\n VIS_Tasks changelog\n -------------------\n \n+* 28 Jul 2023 - mottet@iap.fr\n+** VIS_xml_in.py, VIS_ghosts_calibration: fix #23163, now use DpdVisGhostModel to store the ghost model.\n+\n * 25 Jul 2023 - herent@iap.fr\n-** VIS_xml_in.py: add Gain calibration section to setup the activation of specific PE correction \n+** VIS_xml_in.py: add Gain calibration section to setup the activation of specific PE correction\n                   for the Gain calibration pipeline\n \n * 25 Jul 2023 - mottet@iap.fr\n",
                            "Merge branch 'hotfix_#23163_DpdVisGhostModel' into 'release-13.0'",
                            "Catherine Grenet",
                            "2023-07-31T08:40:01.000+00:00",
                            "d853052ed0fcfc592791f0f58d058916f80660ff"
                        ],
                        [
                            "@@ -1,8 +1,11 @@\n VIS_Tasks changelog\n -------------------\n \n+* 28 Jul 2023 - mottet@iap.fr\n+** VIS_xml_in.py, VIS_ghosts_calibration: fix #23163, now use DpdVisGhostModel to store the ghost model.\n+\n * 25 Jul 2023 - herent@iap.fr\n-** VIS_xml_in.py: add Gain calibration section to setup the activation of specific PE correction \n+** VIS_xml_in.py: add Gain calibration section to setup the activation of specific PE correction\n                   for the Gain calibration pipeline\n \n * 25 Jul 2023 - mottet@iap.fr\n",
                            "VIS_xml_in.py, VIS_ghosts_calibration: fix #23163, use DpdVisGhostModel to store the ghost model",
                            "Sylvain Mottet",
                            "2023-07-29T19:26:49.000+02:00",
                            "d02fe58185a1e9c2db0f7fd2e76162a53d0df9f1"
                        ],
                        [
                            "@@ -1,6 +1,11 @@\n VIS_Tasks changelog\n -------------------\n \n+* 29 Jul 2023 - catherine.grenet@iap.fr\n+Feature ##23191 Astrometric calibration (use-fpa-model): adapt magnitude range selection to exposure duration\n+*** Modules.py: Wcsfit() new argument exptime\n+*** VIS_process_astro_field.py: pass EXPTIME to Modules.Wcsfit()\n+\n * 25 Jul 2023 - mottet@iap.fr\n ** VIS_extract_sources.py: fix bug 22894, 'tmpdir' is now automatically and systematically used\n \n",
                            "[ENH]Feature #23191 Astrometric calibration (use-fpa-model): adapt magnitude range selection to exposure duration",
                            "Catherine Grenet",
                            "2023-07-29T12:41:51.000+02:00",
                            "f72b6bb6fa2a29935463bd8c402c3f1ae1927344"
                        ],
                        [
                            "@@ -1,6 +1,13 @@\n VIS_Tasks changelog\n -------------------\n \n+* 25 Jul 2023 - herent@iap.fr\n+** VIS_xml_in.py: add Gain calibration section to setup the activation of specific PE correction \n+                  for the Gain calibration pipeline\n+\n+* 25 Jul 2023 - mottet@iap.fr\n+** VIS_extract_sources.py: fix bug 22894, 'tmpdir' is now automatically and systematically used\n+\n * 07 July 2023 - v13.0.2 - matt.wander@open.ac.uk\n ** VIS_TrapPumping_IO.plotting: fix bins and stacking on histograms (#22966)\n \n",
                            "Merge branch 'release-13.0' into develop",
                            "Olivier Herent",
                            "2023-07-25T13:26:50.000+00:00",
                            "f89261c60895e301a2a54a1af1a99bbfd3032f2f"
                        ],
                        [
                            "@@ -1,6 +1,10 @@\n VIS_Tasks changelog\n -------------------\n \n+* 25 Jul 2023 - herent@iap.fr\n+** VIS_xml_in.py: add Gain calibration section to setup the activation of specific PE correction \n+                  for the Gain calibration pipeline\n+\n * 25 Jul 2023 - mottet@iap.fr\n ** VIS_extract_sources.py: fix bug 22894, 'tmpdir' is now automatically and systematically used\n \n",
                            "Merge branch 'feature-gain_update' into 'release-13.0'",
                            "Olivier Herent",
                            "2023-07-25T13:21:22.000+00:00",
                            "6410b14e9f212e66175eecf051557b34e220dbfc"
                        ],
                        [
                            "@@ -1,6 +1,10 @@\n VIS_Tasks changelog\n -------------------\n \n+* 25 Jul 2023 - herent@iap.fr\n+** VIS_xml_in.py: add Gain calibration section to setup the activation of specific PE correction \n+                  for the Gain calibration pipeline\n+\n * 25 Jul 2023 - mottet@iap.fr\n ** VIS_extract_sources.py: fix bug 22894, 'tmpdir' is now automatically and systematically used\n \n",
                            "add Gain calibration section to setup the activation of specific PE correction for the gain calibration pipeline",
                            "Olivier Herent",
                            "2023-07-25T12:32:22.000+00:00",
                            "66f7a8dfe2ff9b974ad8d54baac165b75b2e603c"
                        ],
                        [
                            "@@ -1,6 +1,9 @@\n VIS_Tasks changelog\n -------------------\n \n+* 25 Jul 2023 - mottet@iap.fr\n+** VIS_extract_sources.py: fix bug 22894, 'tmpdir' is now automatically and systematically used\n+\n * 07 July 2023 - v13.0.2 - matt.wander@open.ac.uk\n ** VIS_TrapPumping_IO.plotting: fix bins and stacking on histograms (#22966)\n \n",
                            "Merge branch 'hotfix_22894_nl-sextractor' into 'release-13.0'",
                            "Catherine Grenet",
                            "2023-07-25T09:50:39.000+00:00",
                            "d4fe51539cd5b6809fa36057f36fa6e1d419d3ce"
                        ]
                    ],
                    "VIS_Blooming/python/VIS_Blooming/VIS_blooming_calib.py": [
                        [
                            "@@ -325,10 +325,11 @@ def mainMethod(args):\n     data_product = FromToXML.create_DpdVisBloomingModel( os.path.basename( blooming_model_file))\n \n     # tar of the 144 png images into one single file, that will be added to the calibration product into Data.\n-    output_PTC_graphs_filename = \"PTC_graphs.tar\"\n+    output_PTC_graphs_filename = workdir+\"/data/PTC_graphs.tar\"\n \n     with tarfile.open(output_PTC_graphs_filename, \"w:gz\") as tar:\n       for filename in os.listdir(subdir):\n+        #logger.info(f\"filename is : {filename}\")\n         tar.add(os.path.join(subdir, filename), arcname=filename)\n \n     # adding to the data_product, inside Data.QualityParameterStorage, the file output_PTC_graphs_filename\n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ],
                        [
                            "@@ -105,9 +105,9 @@ def mainMethod(args):\n \n \n     # Read the list of quadrants to process\n-    heap_list = load_list_from_file(exposure_list)\n+    heap_list = FromToXML.load_list_from_file(exposure_list)\n     # Read the heap of exposures/flags to process\n-    heap_flg_list = load_list_from_file(flag_list)\n+    heap_flg_list = FromToXML.load_list_from_file(flag_list)\n \n     nquad = 0\n     list_data_filename = [heap_list[0][:-4]]\n@@ -129,6 +129,15 @@ def mainMethod(args):\n     blooming_threshold_per_quadrant = np.empty(144)\n     blooming_threshold_per_quadrant[:] = 65535\n \n+    blooming_json_dict = dict()\n+    blooming_json_dict['model_name'] = \"VIS_blooming_calib\"\n+    blooming_json_dict['date'] = time.ctime()\n+    blooming_json_dict['source'] = \"\"\n+    blooming_json_dict['author'] = __file__\n+    blooming_json_dict['units'] = \"e-/ADU\"   \n+\n+\n+\n     blooming_model_file = \"\"\n     for ext in range(0, nquad):\n        logger.info (\"==>Processing quadrant %s\", ext)\n@@ -295,36 +304,21 @@ def mainMethod(args):\n \n        # log of results\n        logger.info(f\"blooming threshold for quadrant {quadname} is : {blooming_threshold_per_quadrant[ext]}\")\n-\n-\n-       ### blooming_model_file initialization ###\n-       if blooming_model_file == \"\":\n-         blooming_model_file = FileNameProvider().get_allowed_filename( processing_function = 'VIS',\n-                                                                        type_name           = \"MDL-BLOOMING\",\n-                                                                        instance_id         = '',\n-                                                                        extension           = '.json')\n-         blooming_model_file = os.path.join( args.workdir, DATADIR, blooming_model_file)\n-         blooming_json_dict = dict( model_name = \"VIS_blooming_calib\",\n-                                    date = time.ctime(),\n-                                    source = \"\",\n-                                    author = __file__,\n-                                    units = \"e-/ADU\")\n-         with open(blooming_model_file, 'w') as fp:\n-           json.dump(blooming_json_dict, fp, indent=2, default=np.ndarray.tolist)\n-\n+       \n        #### update json file with blooming threshold estimation ####\n-       blooming_json_dict = {}\n        blooming_json_dict[quadname] = blooming_threshold_per_quadrant[ext]\n \n-       with open(blooming_model_file, 'r') as fp:\n-         blooming_json = json.load(fp)\n-         blooming_json.update(blooming_json_dict)\n-\n-       with open(blooming_model_file, 'w') as fp:\n-         fp.write(json.dumps(blooming_json, indent=2, default=np.ndarray.tolist))\n-\n     # Write end data product\n \n+    blooming_model_file = FileNameProvider().get_allowed_filename( processing_function = 'VIS',\n+                                                                    type_name           = \"MDL-BLOOMING\",\n+                                                                    instance_id         = '',\n+                                                                    extension           = '.json')\n+    logger.info (\"==> Creating blooming calibration data product %s\", blooming_model_file)\n+    blooming_model_file = os.path.join( args.workdir, \"data\", blooming_model_file)\n+    with open(blooming_model_file, 'w') as fp:\n+      fp.write(json.dumps(blooming_json_dict, indent=2, default=np.ndarray.tolist))\n+\n     dpdcalib_blooming = os.path.abspath( os.path.join( args.workdir, dpdcalib_blooming))\n     logger.info( \"** Writing Blooming model data product XML to \" + dpdcalib_blooming)\n \n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Blooming/python/VIS_Blooming/file_entry_point.py": [
                        [
                            "@@ -17,6 +17,7 @@\n \n import astropy.io.fits as pf\n import numpy as np\n+import numpy.ma as ma\n \n import ElementsKernel.Logging as elog\n \n@@ -93,7 +94,7 @@ def file_layer_entry_point(input_files, interm_dir, quadrant_id=None, in_flagmap\n           flag_quad_id = handle[quadrant_id].header[\"QUADID\"]\n           handle.close()\n         \n-        image_stack = algo.flagging_stack(image_stack32, \n+        '''image_stack = algo.flagging_stack(image_stack32, \n                                           flagmap, \n                                           input_files, \n                                           quad_name, \n@@ -103,5 +104,7 @@ def file_layer_entry_point(input_files, interm_dir, quadrant_id=None, in_flagmap\n                                           flag_prescan_size,\n                                           flag_serial_overscan_size, \n                                           flag_parallel_overscan_size)\n+        '''\n+    image_stack = ma.array(image_stack32, mask=flagmap, copy=False)    \n     log.info(\"file_layer_entry_point(): end\")\n     return image_stack\n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ]
                    ],
                    "VIS_Ghosts/python/VIS_Ghosts/VIS_ghosts_calibration.py": [
                        [
                            "@@ -184,7 +184,7 @@ def mainMethod( args):\n \n   # create and write the XML data product encapsulating the model file\n   logger.info( \"** Writing ghost model data product XML to \" + args.ghost_model_xml_out)\n-  data_product = FromToXML.create_DpdVisXTalkModel( model_json)\n+  data_product = FromToXML.create_DpdVisGhostModel( model_json)\n   DmUtils.save_product_metadata( data_product, args.ghost_model_xml_out)\n \n \n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ]
                    ],
                    "VIS_NonLinearity/auxdir/VIS_NonLinearity/Patty_FlatfieldNL.json": [
                        [
                            "",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ],
                        [
                            "@@ -0,0 +1,8934 @@\n+{\n+  \"date\": \"2023-06-20 21:15:52.647976\",\n+  \"reference\": \"https://euclid.roe.ac.uk/dmsf/files/19066\",\n+  \"author\": \"Patricia Liebing <liebing@strw.leidenuniv.nl>\",\n+  \"description\": \"Non-linearity correction model. Contains a dictionary in which each key is a quadrant id and its associated value is a list of pair of values. The first value in the pair is the linear signal in ADU and the second one is the correcponding non-linear signal in ADU.\",\n+  \"1-1.E\": [\n+    [\n+      5.7205759826688904,\n+      5.807249847988931\n+    ],\n+    [\n+      12.088025578334763,\n+      12.13829002398899\n+    ],\n+    [\n+      31.357132187303225,\n+      31.468369922215974\n+    ],\n+    [\n+      63.12610021814389,\n+      62.992331362068676\n+    ],\n+    [\n+      127.18233644061723,\n+      127.07687630976658\n+    ],\n+    [\n+      319.2614419237922,\n+      319.15183262424875\n+    ],\n+    [\n+      639.6414209206326,\n+      639.7731134066603\n+    ],\n+    [\n+      1281.0531955783497,\n+      1282.3205548366452\n+    ],\n+    [\n+      3209.5279760698586,\n+      3218.461708954091\n+    ],\n+    [\n+      6438.379363052668,\n+      6474.959727033666\n+    ],\n+    [\n+      12949.723502523604,\n+      13089.290747508476\n+    ],\n+    [\n+      32698.444425748825,\n+      33398.46232320779\n+    ],\n+    [\n+      39328.831991792795,\n+      40263.488795679245\n+    ],\n+    [\n+      52608.14872305627,\n+      54032.42242146698\n+    ],\n+    [\n+      59221.55010694724,\n+      60863.18786984436\n+    ]\n+  ],\n+  \"1-1.F\": [\n+    [\n+      5.613295160128764,\n+      5.543665164636964\n+    ],\n+    [\n+      12.118198732294374,\n+      12.094645651132844\n+    ],\n+    [\n+      31.353153313243382,\n+      31.19135661959049\n+    ],\n+    [\n+      63.936735082900825,\n+      64.06796216005118\n+    ],\n+    [\n+      128.32357083119004,\n+      128.26141997101877\n+    ],\n+    [\n+      322.01553827528215,\n+      321.90542533186215\n+    ],\n+    [\n+      645.0070887501087,\n+      644.9886020361411\n+    ],\n+    [\n+      1290.927192851657,\n+      1291.0290435258132\n+    ],\n+    [\n+      3234.163591010039,\n+      3240.113483186127\n+    ],\n+    [\n+      6486.505565576988,\n+      6515.920471522566\n+    ],\n+    [\n+      13041.794902208221,\n+      13162.866015848904\n+    ],\n+    [\n+      32921.16652986023,\n+      33565.4873676327\n+    ],\n+    [\n+      39593.83975429667,\n+      40458.966687376786\n+    ],\n+    [\n+      52957.395470631855,\n+      54284.0040242403\n+    ],\n+    [\n+      59628.55302751577,\n+      61174.99387159953\n+    ]\n+  ],\n+  \"1-1.G\": [\n+    [\n+      5.599769799418902,\n+      5.496858766520009\n+    ],\n+    [\n+      12.081437495484893,\n+      11.97752892457931\n+    ],\n+    [\n+      31.42573532358569,\n+      31.221639602058612\n+    ],\n+    [\n+      63.905099284189184,\n+      63.771117145253996\n+    ],\n+    [\n+      128.75358973407248,\n+      128.65150215997795\n+    ],\n+    [\n+      323.20963820592107,\n+      323.1143479268144\n+    ],\n+    [\n+      647.2334975362834,\n+      647.0800857877216\n+    ],\n+    [\n+      1296.4457524404575,\n+      1297.3411991392816\n+    ],\n+    [\n+      3248.409188124175,\n+      3256.7971698388997\n+    ],\n+    [\n+      6517.470855608609,\n+      6554.285846275476\n+    ],\n+    [\n+      13113.449663144489,\n+      13258.782935451602\n+    ],\n+    [\n+      33140.84774768238,\n+      33890.87259264311\n+    ],\n+    [\n+      39872.29845950147,\n+      40880.395166266906\n+    ],\n+    [\n+      53363.97748018454,\n+      54919.68285362805\n+    ],\n+    [\n+      60110.893273293885,\n+      61941.93302119293\n+    ]\n+  ],\n+  \"1-1.H\": [\n+    [\n+      5.80178605396546,\n+      5.872122455661349\n+    ],\n+    [\n+      12.316158867184534,\n+      12.387339020001251\n+    ],\n+    [\n+      31.659931899091898,\n+      31.535681131316952\n+    ],\n+    [\n+      64.24763833252675,\n+      64.14529208745206\n+    ],\n+    [\n+      129.42323938813095,\n+      129.3654054379309\n+    ],\n+    [\n+      324.7689587077651,\n+      324.66398607513395\n+    ],\n+    [\n+      650.5744034563088,\n+      650.6200761133314\n+    ],\n+    [\n+      1302.9134207379386,\n+      1303.989457954935\n+    ],\n+    [\n+      3264.6248774426763,\n+      3273.507019895484\n+    ],\n+    [\n+      6549.021546340749,\n+      6585.935520421089\n+    ],\n+    [\n+      13173.218013224034,\n+      13314.848906257115\n+    ],\n+    [\n+      33274.21353406791,\n+      33999.190425819965\n+    ],\n+    [\n+      40024.65127889565,\n+      40994.454258884136\n+    ],\n+    [\n+      53548.919731754104,\n+      55033.928818992834\n+    ],\n+    [\n+      60297.4386044385,\n+      62025.971053909285\n+    ]\n+  ],\n+  \"1-2.E\": [\n+    [\n+      5.704003225805044,\n+      5.693403359563271\n+    ],\n+    [\n+      12.205038296993122,\n+      12.20243481447973\n+    ],\n+    [\n+      31.95070125067607,\n+      32.216903488318806\n+    ],\n+    [\n+      64.31118069147715,\n+      64.47096351758879\n+    ],\n+    [\n+      129.13835724108927,\n+      129.19475468745958\n+    ],\n+    [\n+      323.878342072837,\n+      323.8841160971512\n+    ],\n+    [\n+      648.644986965484,\n+      648.7664636920285\n+    ],\n+    [\n+      1299.1429195834846,\n+      1300.461713901567\n+    ],\n+    [\n+      3255.0759001982465,\n+      3264.447501188085\n+    ],\n+    [\n+      6530.464316185204,\n+      6568.912872697433\n+    ],\n+    [\n+      13139.485274080751,\n+      13289.050392397534\n+    ],\n+    [\n+      33208.27593806766,\n+      33969.28296073798\n+    ],\n+    [\n+      39951.35486373432,\n+      40970.7358469784\n+    ],\n+    [\n+      53457.01517926583,\n+      55014.762916946136\n+    ],\n+    [\n+      60201.35832541849,\n+      62019.62974072058\n+    ]\n+  ],\n+  \"1-2.F\": [\n+    [\n+      5.710810136029215,\n+      5.747673681612526\n+    ],\n+    [\n+      12.156132505333645,\n+      12.191111010310296\n+    ],\n+    [\n+      31.439173052460696,\n+      31.41589722191518\n+    ],\n+    [\n+      63.886738140026004,\n+      64.07621600390165\n+    ],\n+    [\n+      128.29012289128153,\n+      128.4118316675704\n+    ],\n+    [\n+      321.57976002667033,\n+      321.5788518912974\n+    ],\n+    [\n+      644.0026881247459,\n+      644.0711588797042\n+    ],\n+    [\n+      1289.4547797658527,\n+      1290.2687353916658\n+    ],\n+    [\n+      3229.9151009407606,\n+      3237.083447308682\n+    ],\n+    [\n+      6477.39786705945,\n+      6508.647627289575\n+    ],\n+    [\n+      13019.581517714241,\n+      13140.761958312372\n+    ],\n+    [\n+      32848.83370758021,\n+      33474.790105337386\n+    ],\n+    [\n+      39504.13825234455,\n+      40344.11162360062\n+    ],\n+    [\n+      52824.79909737566,\n+      54104.04975988274\n+    ],\n+    [\n+      59476.947116115756,\n+      60967.46777380574\n+    ]\n+  ],\n+  \"1-2.G\": [\n+    [\n+      5.817950254915522,\n+      5.838836172212225\n+    ],\n+    [\n+      12.439541056645531,\n+      12.49541755325667\n+    ],\n+    [\n+      32.19442234864351,\n+      32.244684784749325\n+    ],\n+    [\n+      65.16780047141113,\n+      65.25761169436339\n+    ],\n+    [\n+      130.88087226871684,\n+      130.81591475869988\n+    ],\n+    [\n+      328.4241482029299,\n+      328.2992220945545\n+    ],\n+    [\n+      658.030470797949,\n+      658.1730924730828\n+    ],\n+    [\n+      1317.9659941526077,\n+      1319.3680819126291\n+    ],\n+    [\n+      3302.1259644316087,\n+      3311.6816046509844\n+    ],\n+    [\n+      6622.436202610635,\n+      6659.088716451719\n+    ],\n+    [\n+      13314.384993131389,\n+      13450.023873687907\n+    ],\n+    [\n+      33580.03323601273,\n+      34239.68961540917\n+    ],\n+    [\n+      40374.626986789524,\n+      41247.88076496593\n+    ],\n+    [\n+      53971.6690162953,\n+      55280.9356495109\n+    ],\n+    [\n+      60758.350180587884,\n+      62273.372752595824\n+    ]\n+  ],\n+  \"1-2.H\": [\n+    [\n+      6.110027143971594,\n+      6.339510570247705\n+    ],\n+    [\n+      12.746781178245568,\n+      12.915947970848139\n+    ],\n+    [\n+      32.80434217530778,\n+      32.956622426787455\n+    ],\n+    [\n+      66.2220520486799,\n+      66.33664242270629\n+    ],\n+    [\n+      133.384131170467,\n+      133.75182541269643\n+    ],\n+    [\n+      333.74984357267977,\n+      333.75286257230346\n+    ],\n+    [\n+      668.5461020407669,\n+      668.7965201342898\n+    ],\n+    [\n+      1338.6241605609678,\n+      1339.8557692950885\n+    ],\n+    [\n+      3351.927623577267,\n+      3359.1835674762433\n+    ],\n+    [\n+      6721.955790080625,\n+      6753.885699120209\n+    ],\n+    [\n+      13516.508110106693,\n+      13645.030433330623\n+    ],\n+    [\n+      34142.56548068248,\n+      34845.206791608754\n+    ],\n+    [\n+      41067.867987461184,\n+      42011.87622436477\n+    ],\n+    [\n+      54919.33664953573,\n+      56347.85943030654\n+    ],\n+    [\n+      61826.70513097341,\n+      63478.37732268197\n+    ]\n+  ],\n+  \"1-3.E\": [\n+    [\n+      5.727795066003439,\n+      5.805719990006721\n+    ],\n+    [\n+      12.129965984161958,\n+      12.18866343008562\n+    ],\n+    [\n+      31.362254677280053,\n+      31.391081402206748\n+    ],\n+    [\n+      63.33562443085981,\n+      63.23478173614205\n+    ],\n+    [\n+      127.58635727431188,\n+      127.52976468181913\n+    ],\n+    [\n+      320.1853899676095,\n+      320.1087702226322\n+    ],\n+    [\n+      641.3916240413969,\n+      641.4894878142408\n+    ],\n+    [\n+      1284.5108799670525,\n+      1285.6655274238917\n+    ],\n+    [\n+      3219.1090962448734,\n+      3228.6989717874594\n+    ],\n+    [\n+      6461.69408073116,\n+      6503.795571937185\n+    ],\n+    [\n+      13010.686145804,\n+      13176.889936427353\n+    ],\n+    [\n+      32955.0182552914,\n+      33830.27672041135\n+    ],\n+    [\n+      39661.117105457764,\n+      40832.81682870894\n+    ],\n+    [\n+      53097.498385291554,\n+      54889.17083535798\n+    ],\n+    [\n+      59776.206264031636,\n+      61836.08728808219\n+    ]\n+  ],\n+  \"1-3.F\": [\n+    [\n+      5.6732546149737795,\n+      5.586809689433802\n+    ],\n+    [\n+      12.32092616069726,\n+      12.335075504498212\n+    ],\n+    [\n+      32.256109057911914,\n+      32.57120784447557\n+    ],\n+    [\n+      64.93893170298516,\n+      65.20612224977884\n+    ],\n+    [\n+      130.1038885451256,\n+      130.07739164456697\n+    ],\n+    [\n+      326.638527772388,\n+      326.7740441922094\n+    ],\n+    [\n+      653.8520785742296,\n+      653.9133089418734\n+    ],\n+    [\n+      1309.2557868744077,\n+      1310.1457515751954\n+    ],\n+    [\n+      3279.997383726206,\n+      3287.920765309277\n+    ],\n+    [\n+      6577.778939544158,\n+      6610.751424779628\n+    ],\n+    [\n+      13224.422038711029,\n+      13353.01437530105\n+    ],\n+    [\n+      33376.66622778412,\n+      34038.19579676565\n+    ],\n+    [\n+      40140.03286270874,\n+      41025.42478586539\n+    ],\n+    [\n+      53680.60489187508,\n+      55028.98913882992\n+    ],\n+    [\n+      60440.48665797711,\n+      62009.66607611136\n+    ]\n+  ],\n+  \"1-3.G\": [\n+    [\n+      5.957401358518357,\n+      6.078955922588866\n+    ],\n+    [\n+      12.54328753420721,\n+      12.615190261048713\n+    ],\n+    [\n+      32.284799046971,\n+      32.19749082029188\n+    ],\n+    [\n+      65.66405033490639,\n+      65.78840785155153\n+    ],\n+    [\n+      131.90814152226082,\n+      131.9411957100729\n+    ],\n+    [\n+      331.06233985918004,\n+      331.24416837256365\n+    ],\n+    [\n+      662.5493965552258,\n+      662.5423310319959\n+    ],\n+    [\n+      1326.791404066331,\n+      1327.6752323446876\n+    ],\n+    [\n+      3323.9361648950085,\n+      3331.928279327289\n+    ],\n+    [\n+      6668.101302387866,\n+      6703.66964205771\n+    ],\n+    [\n+      13412.477828146652,\n+      13553.026587664039\n+    ],\n+    [\n+      33880.190051541234,\n+      34608.93562149102\n+    ],\n+    [\n+      40753.609640155555,\n+      41729.74666914575\n+    ],\n+    [\n+      54526.707884867894,\n+      56026.20869133941\n+    ],\n+    [\n+      61389.595938605955,\n+      63126.10363938782\n+    ]\n+  ],\n+  \"1-3.H\": [\n+    [\n+      6.07421885266647,\n+      6.339026742786293\n+    ],\n+    [\n+      12.693307582671999,\n+      12.958272128429048\n+    ],\n+    [\n+      32.553223599503816,\n+      32.835247524604895\n+    ],\n+    [\n+      65.32052715407761,\n+      65.30100146212969\n+    ],\n+    [\n+      131.60840450520084,\n+      131.7440165406522\n+    ],\n+    [\n+      330.0613397792238,\n+      330.25122421779963\n+    ],\n+    [\n+      660.763519173578,\n+      660.9911730226419\n+    ],\n+    [\n+      1323.4336607070145,\n+      1325.0044814978578\n+    ],\n+    [\n+      3314.0162758701535,\n+      3322.2017917296125\n+    ],\n+    [\n+      6648.563238157313,\n+      6684.828545194445\n+    ],\n+    [\n+      13376.83709123608,\n+      13522.146450235112\n+    ],\n+    [\n+      33793.23188083309,\n+      34536.829216163045\n+    ],\n+    [\n+      40649.809919106796,\n+      41644.44351254646\n+    ],\n+    [\n+      54385.82527799057,\n+      55907.5634072974\n+    ],\n+    [\n+      61226.10265121599,\n+      62982.3852074855\n+    ]\n+  ],\n+  \"1-4.E\": [\n+    [\n+      5.644369568481149,\n+      5.563014876425497\n+    ],\n+    [\n+      12.078471454119875,\n+      11.925018662377381\n+    ],\n+    [\n+      31.546426419309633,\n+      31.339369555430107\n+    ],\n+    [\n+      63.95199289456012,\n+      63.6159870340307\n+    ],\n+    [\n+      129.32276200448143,\n+      129.28591669851522\n+    ],\n+    [\n+      324.0494603623695,\n+      323.530589907936\n+    ],\n+    [\n+      649.8984915985808,\n+      649.8785869891551\n+    ],\n+    [\n+      1301.0344775775225,\n+      1301.4522247299492\n+    ],\n+    [\n+      3259.237203248968,\n+      3265.7752765735995\n+    ],\n+    [\n+      6536.25809173451,\n+      6566.450498404998\n+    ],\n+    [\n+      13149.713075864758,\n+      13272.651868681622\n+    ],\n+    [\n+      33164.23332093163,\n+      33806.52680904054\n+    ],\n+    [\n+      39884.621379031254,\n+      40746.33926099582\n+    ],\n+    [\n+      53347.10998582783,\n+      54671.19132230105\n+    ],\n+    [\n+      60075.71806087801,\n+      61628.47750114802\n+    ]\n+  ],\n+  \"1-4.F\": [\n+    [\n+      5.554400332993697,\n+      5.49037505048099\n+    ],\n+    [\n+      11.897708359430325,\n+      11.792613613465578\n+    ],\n+    [\n+      30.92655485574346,\n+      30.697380772321555\n+    ],\n+    [\n+      62.848750432864456,\n+      62.61807569065622\n+    ],\n+    [\n+      126.98120066729489,\n+      127.0364802783576\n+    ],\n+    [\n+      318.01751675835806,\n+      317.57268908484076\n+    ],\n+    [\n+      637.7170989590797,\n+      637.7428687204742\n+    ],\n+    [\n+      1276.6041567118914,\n+      1277.0604207334698\n+    ],\n+    [\n+      3198.794483693146,\n+      3206.087371996695\n+    ],\n+    [\n+      6414.709592444012,\n+      6445.7670640181595\n+    ],\n+    [\n+      12902.593501827667,\n+      13023.448785116183\n+    ],\n+    [\n+      32535.204042257832,\n+      33160.114263632175\n+    ],\n+    [\n+      39128.573771200834,\n+      39968.14606604363\n+    ],\n+    [\n+      52344.10891553086,\n+      53643.941878277255\n+    ],\n+    [\n+      58939.8337679149,\n+      60457.42267816878\n+    ]\n+  ],\n+  \"1-4.G\": [\n+    [\n+      5.882019529624445,\n+      5.878176114920667\n+    ],\n+    [\n+      12.680680512891895,\n+      12.788822683073287\n+    ],\n+    [\n+      32.76214450174328,\n+      32.888562472246505\n+    ],\n+    [\n+      66.03860376609822,\n+      66.00307985415178\n+    ],\n+    [\n+      132.82614550297004,\n+      132.70239094355324\n+    ],\n+    [\n+      333.4614368840268,\n+      333.3452802900193\n+    ],\n+    [\n+      668.1203026234044,\n+      668.2836553915739\n+    ],\n+    [\n+      1337.8126883219534,\n+      1338.910575448885\n+    ],\n+    [\n+      3351.1652138657205,\n+      3359.35862469666\n+    ],\n+    [\n+      6718.325988051148,\n+      6750.01545434336\n+    ],\n+    [\n+      13512.168474213622,\n+      13632.729797638447\n+    ],\n+    [\n+      34044.24063328262,\n+      34662.370954952494\n+    ],\n+    [\n+      40938.30904075562,\n+      41768.39442737214\n+    ],\n+    [\n+      54748.33332102256,\n+      56025.90499045691\n+    ],\n+    [\n+      61613.08964536806,\n+      63072.46499443297\n+    ]\n+  ],\n+  \"1-4.H\": [\n+    [\n+      5.674262914494702,\n+      5.582592459716469\n+    ],\n+    [\n+      12.228926448770473,\n+      12.138064919232345\n+    ],\n+    [\n+      32.06577839111303,\n+      32.152235005894795\n+    ],\n+    [\n+      64.81070155112472,\n+      64.87677107358839\n+    ],\n+    [\n+      129.81867842851378,\n+      129.36396574006267\n+    ],\n+    [\n+      326.90556480597286,\n+      326.94526245960816\n+    ],\n+    [\n+      654.4635300253802,\n+      654.40972972841\n+    ],\n+    [\n+      1311.536928419943,\n+      1313.255846437038\n+    ],\n+    [\n+      3284.5234947573845,\n+      3293.3416124432324\n+    ],\n+    [\n+      6584.925150011596,\n+      6617.769743721053\n+    ],\n+    [\n+      13238.959117684846,\n+      13357.439563876505\n+    ],\n+    [\n+      33325.96786721327,\n+      33897.20194645024\n+    ],\n+    [\n+      40060.2703026942,\n+      40817.18758565684\n+    ],\n+    [\n+      53541.54595658852,\n+      54683.49127616696\n+    ],\n+    [\n+      60274.014879098286,\n+      61600.09998814385\n+    ]\n+  ],\n+  \"1-5.E\": [\n+    [\n+      5.89294016146893,\n+      5.9478166954725635\n+    ],\n+    [\n+      12.452175660992845,\n+      12.431964617534497\n+    ],\n+    [\n+      32.39270691690984,\n+      32.41145856048488\n+    ],\n+    [\n+      65.71826895715026,\n+      65.89379353469192\n+    ],\n+    [\n+      131.95491614242488,\n+      132.02816937266562\n+    ],\n+    [\n+      330.9303715073364,\n+      330.96355556366433\n+    ],\n+    [\n+      662.6349442197552,\n+      662.6802302888707\n+    ],\n+    [\n+      1326.9670375332157,\n+      1327.9602156821566\n+    ],\n+    [\n+      3325.3090392261456,\n+      3334.514113914046\n+    ],\n+    [\n+      6671.8401234149915,\n+      6710.853013664394\n+    ],\n+    [\n+      13435.529080350698,\n+      13590.117340938117\n+    ],\n+    [\n+      33937.165479377676,\n+      34723.69545696076\n+    ],\n+    [\n+      40826.39086106543,\n+      41876.83039209784\n+    ],\n+    [\n+      54630.34338625707,\n+      56236.56422180105\n+    ],\n+    [\n+      61479.59097001604,\n+      63308.14846730759\n+    ]\n+  ],\n+  \"1-5.F\": [\n+    [\n+      6.054200989598048,\n+      6.2318934886681\n+    ],\n+    [\n+      12.42330315046008,\n+      12.283900595986932\n+    ],\n+    [\n+      32.41688249587125,\n+      32.222514291868244\n+    ],\n+    [\n+      65.8969947688006,\n+      65.76825776692961\n+    ],\n+    [\n+      132.93963656978045,\n+      133.0262244878084\n+    ],\n+    [\n+      333.12392800521604,\n+      332.9135078045358\n+    ],\n+    [\n+      667.4927877404155,\n+      667.5154763622875\n+    ],\n+    [\n+      1335.95461668175,\n+      1336.1679301556867\n+    ],\n+    [\n+      3347.071698520443,\n+      3353.601110118055\n+    ],\n+    [\n+      6712.901046194605,\n+      6744.034683242057\n+    ],\n+    [\n+      13505.291103070653,\n+      13631.780192765133\n+    ],\n+    [\n+      34060.54117165222,\n+      34720.88078947021\n+    ],\n+    [\n+      40960.56467271593,\n+      41844.32189939277\n+    ],\n+    [\n+      54778.96542777946,\n+      56129.53052793031\n+    ],\n+    [\n+      61672.56870512013,\n+      63240.39699428091\n+    ]\n+  ],\n+  \"1-5.G\": [\n+    [\n+      5.6429803705655885,\n+      5.801713482801365\n+    ],\n+    [\n+      11.712552369883912,\n+      11.700328756548334\n+    ],\n+    [\n+      30.262926835669248,\n+      30.09342599028585\n+    ],\n+    [\n+      61.376303362882005,\n+      61.13915335401607\n+    ],\n+    [\n+      124.11699869764651,\n+      124.25780200422302\n+    ],\n+    [\n+      310.7627339118107,\n+      310.46344468090774\n+    ],\n+    [\n+      622.9760355962464,\n+      623.0798567141932\n+    ],\n+    [\n+      1247.5236315319792,\n+      1248.5560447388596\n+    ],\n+    [\n+      3129.5935694263876,\n+      3141.8836677434765\n+    ],\n+    [\n+      6286.031973327612,\n+      6337.023555259321\n+    ],\n+    [\n+      12680.991486888592,\n+      12879.141730299207\n+    ],\n+    [\n+      32166.128871102366,\n+      33183.186398006976\n+    ],\n+    [\n+      38738.29900916857,\n+      40106.85463286967\n+    ],\n+    [\n+      51931.86676673585,\n+      54058.559933019926\n+    ],\n+    [\n+      58534.86482665865,\n+      61048.16268553196\n+    ]\n+  ],\n+  \"1-5.H\": [\n+    [\n+      5.466295588223951,\n+      5.2626492252029395\n+    ],\n+    [\n+      12.125301841835926,\n+      12.121576063952547\n+    ],\n+    [\n+      31.605041182154903,\n+      31.727912484149908\n+    ],\n+    [\n+      63.88397112646666,\n+      64.02959798547445\n+    ],\n+    [\n+      127.77692212497544,\n+      127.30485972405614\n+    ],\n+    [\n+      321.9161291591869,\n+      322.04538463914844\n+    ],\n+    [\n+      644.2551779882774,\n+      644.1631339752479\n+    ],\n+    [\n+      1290.4067731255045,\n+      1291.3463755730984\n+    ],\n+    [\n+      3233.593972496941,\n+      3242.3821004093516\n+    ],\n+    [\n+      6487.067799428508,\n+      6523.910955254987\n+    ],\n+    [\n+      13056.324213107848,\n+      13196.098487181\n+    ],\n+    [\n+      32943.60848507963,\n+      33646.64981039496\n+    ],\n+    [\n+      39623.609480022584,\n+      40562.487471094406\n+    ],\n+    [\n+      53004.58785336645,\n+      54438.04602775697\n+    ],\n+    [\n+      59684.778443081734,\n+      61354.939350891436\n+    ]\n+  ],\n+  \"1-6.E\": [\n+    [\n+      5.544189166902309,\n+      5.616515802108241\n+    ],\n+    [\n+      11.66380817546489,\n+      11.63663513747275\n+    ],\n+    [\n+      30.30731575480514,\n+      30.268885561359294\n+    ],\n+    [\n+      61.42790660984813,\n+      61.41876826752437\n+    ],\n+    [\n+      123.5809214297299,\n+      123.54230547474829\n+    ],\n+    [\n+      310.2102078720746,\n+      310.25335127672247\n+    ],\n+    [\n+      621.063322416929,\n+      621.0470474952535\n+    ],\n+    [\n+      1243.9755155695493,\n+      1245.047301413124\n+    ],\n+    [\n+      3116.7820719126867,\n+      3125.2070863770687\n+    ],\n+    [\n+      6251.253058831765,\n+      6285.184302661082\n+    ],\n+    [\n+      12570.699552799817,\n+      12700.443609348296\n+    ],\n+    [\n+      31742.335683592166,\n+      32407.8304936377\n+    ],\n+    [\n+      38179.77293804096,\n+      39071.123471754916\n+    ],\n+    [\n+      51079.29770174812,\n+      52449.1127336794\n+    ],\n+    [\n+      57523.93956420565,\n+      59127.88001343294\n+    ]\n+  ],\n+  \"1-6.F\": [\n+    [\n+      5.657307836902729,\n+      5.732689231757147\n+    ],\n+    [\n+      11.973972887159583,\n+      12.021844136215803\n+    ],\n+    [\n+      30.885642541345906,\n+      30.815033028049736\n+    ],\n+    [\n+      62.934870058514136,\n+      63.197547283635636\n+    ],\n+    [\n+      126.29548357421373,\n+      126.48422257025084\n+    ],\n+    [\n+      316.47159876851333,\n+      316.5349474578582\n+    ],\n+    [\n+      633.637309061151,\n+      633.6976414129389\n+    ],\n+    [\n+      1267.714363678978,\n+      1267.5143370784356\n+    ],\n+    [\n+      3175.403209529995,\n+      3179.886045966589\n+    ],\n+    [\n+      6364.7414814091135,\n+      6386.946317616799\n+    ],\n+    [\n+      12785.844637066844,\n+      12879.816741295956\n+    ],\n+    [\n+      32201.889941387846,\n+      32695.10926126829\n+    ],\n+    [\n+      38705.63457580183,\n+      39362.75371444117\n+    ],\n+    [\n+      51721.62244248143,\n+      52715.75879576334\n+    ],\n+    [\n+      58221.962208373225,\n+      59376.77605496755\n+    ]\n+  ],\n+  \"1-6.G\": [\n+    [\n+      5.901174091853887,\n+      6.100644842200541\n+    ],\n+    [\n+      12.458613293996104,\n+      12.728993809095057\n+    ],\n+    [\n+      31.80635414273457,\n+      31.9622429120198\n+    ],\n+    [\n+      64.1534938090024,\n+      64.22709531407513\n+    ],\n+    [\n+      128.82926610283704,\n+      128.72114445295725\n+    ],\n+    [\n+      323.65478051923725,\n+      323.79962941321736\n+    ],\n+    [\n+      648.004688737918,\n+      648.2119256111039\n+    ],\n+    [\n+      1297.8755602376507,\n+      1299.3803015197004\n+    ],\n+    [\n+      3250.8448481570617,\n+      3259.615652965229\n+    ],\n+    [\n+      6518.021344405962,\n+      6551.238297767658\n+    ],\n+    [\n+      13100.852465423513,\n+      13224.48201810136\n+    ],\n+    [\n+      33053.43750287104,\n+      33690.96463824871\n+    ],\n+    [\n+      39750.47735113277,\n+      40605.22270753952\n+    ],\n+    [\n+      53162.927585525984,\n+      54472.09412761617\n+    ],\n+    [\n+      59855.42355446081,\n+      61377.622997630984\n+    ]\n+  ],\n+  \"1-6.H\": [\n+    [\n+      5.693335025518265,\n+      5.737910738594165\n+    ],\n+    [\n+      12.295184376047137,\n+      12.526973908464164\n+    ],\n+    [\n+      31.389908272006384,\n+      31.456541949888244\n+    ],\n+    [\n+      63.32550083436108,\n+      63.23482771027103\n+    ],\n+    [\n+      127.64850784323828,\n+      127.69495213736029\n+    ],\n+    [\n+      320.09466720868977,\n+      320.02992571988784\n+    ],\n+    [\n+      641.2488988928767,\n+      641.4095219299356\n+    ],\n+    [\n+      1283.7125352794055,\n+      1284.479423774745\n+    ],\n+    [\n+      3214.802276173368,\n+      3221.097432760007\n+    ],\n+    [\n+      6444.549607631346,\n+      6471.402321502308\n+    ],\n+    [\n+      12946.260204605309,\n+      13049.262342589025\n+    ],\n+    [\n+      32611.78554276909,\n+      33139.866534037916\n+    ],\n+    [\n+      39202.42123150557,\n+      39906.56984797582\n+    ],\n+    [\n+      52391.743861222465,\n+      53456.8569585505\n+    ],\n+    [\n+      58971.065998096805,\n+      60200.82228632644\n+    ]\n+  ],\n+  \"2-1.E\": [\n+    [\n+      6.051535816168524,\n+      6.066725119236875\n+    ],\n+    [\n+      12.932859314750743,\n+      12.970836446737046\n+    ],\n+    [\n+      33.37308769550512,\n+      33.275643268779945\n+    ],\n+    [\n+      67.70437525082365,\n+      67.64494347015223\n+    ],\n+    [\n+      136.28096221825916,\n+      136.2120165495698\n+    ],\n+    [\n+      342.08260546979636,\n+      342.05700668300017\n+    ],\n+    [\n+      685.0296984091865,\n+      685.020760300151\n+    ],\n+    [\n+      1371.6494346355232,\n+      1372.3997819569013\n+    ],\n+    [\n+      3434.890981474871,\n+      3441.3119141396614\n+    ],\n+    [\n+      6885.959022382593,\n+      6914.247499538414\n+    ],\n+    [\n+      13837.47395940118,\n+      13951.386262725291\n+    ],\n+    [\n+      34873.83684033229,\n+      35465.31793328213\n+    ],\n+    [\n+      41924.1439337554,\n+      42711.991351419216\n+    ],\n+    [\n+      56033.67971906724,\n+      57224.07669606013\n+    ],\n+    [\n+      62889.33165159709,\n+      64073.90904185438\n+    ]\n+  ],\n+  \"2-1.F\": [\n+    [\n+      5.950793804488347,\n+      5.893197288761936\n+    ],\n+    [\n+      12.749336607719624,\n+      12.662869348879983\n+    ],\n+    [\n+      33.37291978414609,\n+      33.42721263439968\n+    ],\n+    [\n+      67.69313458217256,\n+      67.93118529612329\n+    ],\n+    [\n+      135.6890995278814,\n+      135.64788760811297\n+    ],\n+    [\n+      340.6119824240101,\n+      340.67042048377914\n+    ],\n+    [\n+      681.9117336005366,\n+      681.8978708721081\n+    ],\n+    [\n+      1365.3649771516525,\n+      1366.0606274999407\n+    ],\n+    [\n+      3418.6592906036285,\n+      3424.426410165998\n+    ],\n+    [\n+      6852.208866300289,\n+      6877.891377963252\n+    ],\n+    [\n+      13765.025412059973,\n+      13869.210025747749\n+    ],\n+    [\n+      34673.09558177167,\n+      35218.2443827579\n+    ],\n+    [\n+      41674.4045722686,\n+      42397.30922088637\n+    ],\n+    [\n+      55677.58235766004,\n+      56756.98532073525\n+    ],\n+    [\n+      62625.97865497117,\n+      63828.463095015824\n+    ]\n+  ],\n+  \"2-1.G\": [\n+    [\n+      5.963477437084493,\n+      6.014824407732636\n+    ],\n+    [\n+      12.658742113365992,\n+      12.68705061042687\n+    ],\n+    [\n+      32.69408845116289,\n+      32.60414664483951\n+    ],\n+    [\n+      66.20029246755662,\n+      66.0271231872848\n+    ],\n+    [\n+      133.43368418738035,\n+      133.31428429822623\n+    ],\n+    [\n+      334.888124419174,\n+      334.68534288695275\n+    ],\n+    [\n+      671.0325028874828,\n+      671.0775919994369\n+    ],\n+    [\n+      1344.3620667945263,\n+      1345.9458043427705\n+    ],\n+    [\n+      3370.37429262468,\n+      3382.6345515152143\n+    ],\n+    [\n+      6764.189479077322,\n+      6811.586459458276\n+    ],\n+    [\n+      13618.810505040547,\n+      13796.83209240521\n+    ],\n+    [\n+      34450.97288475824,\n+      35335.24177062085\n+    ],\n+    [\n+      41453.10815353899,\n+      42632.05849460436\n+    ],\n+    [\n+      55487.950794355806,\n+      57289.96683049888\n+    ],\n+    [\n+      62494.520556802694,\n+      64596.92335664038\n+    ]\n+  ],\n+  \"2-1.H\": [\n+    [\n+      5.98148683082943,\n+      6.052739823387687\n+    ],\n+    [\n+      12.688742672073431,\n+      12.750483667871535\n+    ],\n+    [\n+      32.78914477718706,\n+      32.802312510497885\n+    ],\n+    [\n+      66.28643068488864,\n+      66.21581663351807\n+    ],\n+    [\n+      133.51559105002013,\n+      133.51178674589596\n+    ],\n+    [\n+      334.9550495570464,\n+      334.90387269639564\n+    ],\n+    [\n+      670.8919499380563,\n+      670.9662842540896\n+    ],\n+    [\n+      1343.7387402040156,\n+      1345.0383329950123\n+    ],\n+    [\n+      3366.5659716476393,\n+      3375.8487781032195\n+    ],\n+    [\n+      6752.151934764039,\n+      6789.082220732715\n+    ],\n+    [\n+      13577.213905759803,\n+      13715.606664820549\n+    ],\n+    [\n+      34257.78332654247,\n+      34948.900231243424\n+    ],\n+    [\n+      41198.56841157761,\n+      42120.766564391495\n+    ],\n+    [\n+      55095.69421311097,\n+      56497.13553627852\n+    ],\n+    [\n+      61999.89680794569,\n+      63594.53523594269\n+    ]\n+  ],\n+  \"2-2.E\": [\n+    [\n+      5.8821842813759355,\n+      5.8941743069649695\n+    ],\n+    [\n+      12.53840951895106,\n+      12.53679135110103\n+    ],\n+    [\n+      32.43305547081551,\n+      32.31707386892156\n+    ],\n+    [\n+      65.71701699514604,\n+      65.5360365418138\n+    ],\n+    [\n+      132.29122726100996,\n+      131.98657266280242\n+    ],\n+    [\n+      332.6387501896577,\n+      332.58664753713623\n+    ],\n+    [\n+      666.1486238581161,\n+      666.1159367077088\n+    ],\n+    [\n+      1334.5415936511092,\n+      1335.9223986692402\n+    ],\n+    [\n+      3345.293190047582,\n+      3356.5190491351836\n+    ],\n+    [\n+      6714.3181281403,\n+      6759.934738854872\n+    ],\n+    [\n+      13530.289765005273,\n+      13706.510289145634\n+    ],\n+    [\n+      34221.96883592846,\n+      35118.5841544157\n+    ],\n+    [\n+      41188.65957804617,\n+      42393.507629845626\n+    ],\n+    [\n+      55149.02943459164,\n+      57000.52758856936\n+    ],\n+    [\n+      62100.99637634058,\n+      64246.136923591825\n+    ]\n+  ],\n+  \"2-2.F\": [\n+    [\n+      5.893215799177373,\n+      5.847617839945878\n+    ],\n+    [\n+      12.539797846496862,\n+      12.393989931433973\n+    ],\n+    [\n+      33.00404454693888,\n+      33.07647358475644\n+    ],\n+    [\n+      66.67185776780167,\n+      66.67118485209522\n+    ],\n+    [\n+      134.09418118974332,\n+      134.0343452411695\n+    ],\n+    [\n+      336.29129963049905,\n+      335.98428390559513\n+    ],\n+    [\n+      674.1026093096665,\n+      674.1990581466994\n+    ],\n+    [\n+      1349.6417877040337,\n+      1350.4627434623767\n+    ],\n+    [\n+      3381.686772510401,\n+      3390.1278113094077\n+    ],\n+    [\n+      6782.100793845597,\n+      6817.038157524792\n+    ],\n+    [\n+      13646.726440325257,\n+      13781.720412371986\n+    ],\n+    [\n+      34410.31454412426,\n+      35093.999987222334\n+    ],\n+    [\n+      41379.44950874661,\n+      42290.4223541759\n+    ],\n+    [\n+      55337.7597207988,\n+      56725.04454606489\n+    ],\n+    [\n+      62277.627656804674,\n+      63862.008710593065\n+    ]\n+  ],\n+  \"2-2.G\": [\n+    [\n+      5.823384703109111,\n+      5.729347652686551\n+    ],\n+    [\n+      12.689333273714754,\n+      12.734667081545942\n+    ],\n+    [\n+      33.42356664027331,\n+      34.038497016114306\n+    ],\n+    [\n+      66.8399027060052,\n+      67.23642254303874\n+    ],\n+    [\n+      133.86073939770003,\n+      134.02400463478895\n+    ],\n+    [\n+      335.32215925738956,\n+      335.19082916745117\n+    ],\n+    [\n+      672.0639063695675,\n+      672.4146836821119\n+    ],\n+    [\n+      1345.4047719651514,\n+      1346.577711088827\n+    ],\n+    [\n+      3371.46559180944,\n+      3381.1675908715233\n+    ],\n+    [\n+      6763.499272675812,\n+      6802.836922523398\n+    ],\n+    [\n+      13617.303276168046,\n+      13767.578218242366\n+    ],\n+    [\n+      34362.33973200721,\n+      35115.67013831134\n+    ],\n+    [\n+      41330.486289880704,\n+      42334.41423852208\n+    ],\n+    [\n+      55286.24590714539,\n+      56812.751212457595\n+    ],\n+    [\n+      62192.333836900754,\n+      63904.59431026613\n+    ]\n+  ],\n+  \"2-2.H\": [\n+    [\n+      6.2982684665609066,\n+      6.670148948096735\n+    ],\n+    [\n+      13.078519410108907,\n+      13.463752891713007\n+    ],\n+    [\n+      32.61311965888856,\n+      32.25436240437934\n+    ],\n+    [\n+      66.47330553036171,\n+      66.18605752047202\n+    ],\n+    [\n+      134.42838210860725,\n+      134.52316496537657\n+    ],\n+    [\n+      337.14510622533766,\n+      337.24096357028225\n+    ],\n+    [\n+      674.9772226960267,\n+      675.0458344754437\n+    ],\n+    [\n+      1352.3325734339371,\n+      1354.039998489212\n+    ],\n+    [\n+      3388.5518104637654,\n+      3399.3546497131347\n+    ],\n+    [\n+      6797.268039013059,\n+      6838.406894419133\n+    ],\n+    [\n+      13687.099406459925,\n+      13842.679063610305\n+    ],\n+    [\n+      34556.025052782315,\n+      35344.516756244004\n+    ],\n+    [\n+      41565.990651155786,\n+      42615.51855936164\n+    ],\n+    [\n+      55601.62384421025,\n+      57190.718263857256\n+    ],\n+    [\n+      62581.76837083092,\n+      64401.0601082412\n+    ]\n+  ],\n+  \"2-3.E\": [\n+    [\n+      6.065616921169328,\n+      6.1504365954696425\n+    ],\n+    [\n+      12.809920354419988,\n+      12.841170799018668\n+    ],\n+    [\n+      33.072813807858154,\n+      32.976826483119254\n+    ],\n+    [\n+      67.10007243712865,\n+      67.04721349301681\n+    ],\n+    [\n+      135.15235004510205,\n+      135.1839493689823\n+    ],\n+    [\n+      338.9787311171726,\n+      338.933342385472\n+    ],\n+    [\n+      678.8866178713379,\n+      678.9101727067566\n+    ],\n+    [\n+      1359.5934608568407,\n+      1360.6467974427733\n+    ],\n+    [\n+      3406.968532957657,\n+      3416.388522982937\n+    ],\n+    [\n+      6832.748286738263,\n+      6869.731830992229\n+    ],\n+    [\n+      13746.520105983662,\n+      13885.280883993039\n+    ],\n+    [\n+      34650.75211651519,\n+      35331.543702013936\n+    ],\n+    [\n+      41661.30525309757,\n+      42561.805692389724\n+    ],\n+    [\n+      55692.745638805,\n+      57044.08943958408\n+    ],\n+    [\n+      62628.123756505986,\n+      64120.80273550121\n+    ]\n+  ],\n+  \"2-3.F\": [\n+    [\n+      6.1451298590004715,\n+      6.323312806894363\n+    ],\n+    [\n+      12.78564029538659,\n+      12.813957398284169\n+    ],\n+    [\n+      33.28113864696189,\n+      33.44948751659414\n+    ],\n+    [\n+      67.17006591953013,\n+      67.29965724063204\n+    ],\n+    [\n+      134.9194931730008,\n+      134.94409254727404\n+    ],\n+    [\n+      338.4768013088135,\n+      338.49617036825975\n+    ],\n+    [\n+      677.9086195544581,\n+      678.0889703537814\n+    ],\n+    [\n+      1357.2801082801245,\n+      1358.2908852802257\n+    ],\n+    [\n+      3399.9426140757814,\n+      3408.0089872584695\n+    ],\n+    [\n+      6816.484309287156,\n+      6848.514304306536\n+    ],\n+    [\n+      13707.37277119591,\n+      13829.259963648792\n+    ],\n+    [\n+      34549.93710022152,\n+      35185.06453803699\n+    ],\n+    [\n+      41543.606678006625,\n+      42392.521000040055\n+    ],\n+    [\n+      55544.70299925062,\n+      56836.22700089273\n+    ],\n+    [\n+      62447.65392471744,\n+      63858.535002677265\n+    ]\n+  ],\n+  \"2-3.G\": [\n+    [\n+      5.970742910908296,\n+      5.9870542660435815\n+    ],\n+    [\n+      12.77061949454395,\n+      12.8214208720344\n+    ],\n+    [\n+      33.09432545329419,\n+      33.172186393298986\n+    ],\n+    [\n+      66.88498727860929,\n+      66.92563730097423\n+    ],\n+    [\n+      134.401005371727,\n+      134.30229199171958\n+    ],\n+    [\n+      337.3992790220211,\n+      337.3324792824542\n+    ],\n+    [\n+      675.8538126752738,\n+      675.9643920474012\n+    ],\n+    [\n+      1353.2442664450662,\n+      1354.191625440407\n+    ],\n+    [\n+      3388.828029278635,\n+      3395.7095278934294\n+    ],\n+    [\n+      6794.162511450613,\n+      6823.721042705818\n+    ],\n+    [\n+      13662.32565258008,\n+      13777.176271257164\n+    ],\n+    [\n+      34408.65089313019,\n+      35000.4021466603\n+    ],\n+    [\n+      41367.87513084821,\n+      42158.115612358946\n+    ],\n+    [\n+      55298.34680609415,\n+      56498.66064473822\n+    ],\n+    [\n+      62207.281423079534,\n+      63554.0243118608\n+    ]\n+  ],\n+  \"2-3.H\": [\n+    [\n+      6.065388568902858,\n+      6.219963712678541\n+    ],\n+    [\n+      12.806623117726035,\n+      12.980625700082598\n+    ],\n+    [\n+      32.35444382556914,\n+      31.918983357718126\n+    ],\n+    [\n+      65.8739969599558,\n+      65.35478520154038\n+    ],\n+    [\n+      133.22116884278714,\n+      132.84310312203772\n+    ],\n+    [\n+      334.9972222990592,\n+      334.78532491350074\n+    ],\n+    [\n+      671.1908572361175,\n+      671.1575652005902\n+    ],\n+    [\n+      1344.4169715776081,\n+      1345.5810049702911\n+    ],\n+    [\n+      3368.0330110608315,\n+      3376.7452223428727\n+    ],\n+    [\n+      6753.973349124207,\n+      6788.631439696683\n+    ],\n+    [\n+      13591.468561446933,\n+      13727.20086355682\n+    ],\n+    [\n+      34294.97143334254,\n+      35003.605305535944\n+    ],\n+    [\n+      41251.50979859803,\n+      42203.512938945525\n+    ],\n+    [\n+      55175.389647639946,\n+      56626.382395602806\n+    ],\n+    [\n+      62114.272495946105,\n+      63790.72824222294\n+    ]\n+  ],\n+  \"2-4.E\": [\n+    [\n+      6.052624466125057,\n+      6.115316919424936\n+    ],\n+    [\n+      12.85709818303311,\n+      12.917343438372907\n+    ],\n+    [\n+      33.17635339867449,\n+      33.135946976378776\n+    ],\n+    [\n+      67.1457116978678,\n+      67.04198123559686\n+    ],\n+    [\n+      135.2258888943598,\n+      135.13664693865405\n+    ],\n+    [\n+      339.43746654495413,\n+      339.3629855926359\n+    ],\n+    [\n+      679.9010374589117,\n+      679.9621682555419\n+    ],\n+    [\n+      1361.7482341683904,\n+      1363.0018124894868\n+    ],\n+    [\n+      3411.983983368343,\n+      3421.531158473553\n+    ],\n+    [\n+      6843.062966530888,\n+      6880.587701723636\n+    ],\n+    [\n+      13775.6666028444,\n+      13921.601713593282\n+    ],\n+    [\n+      34762.13902031095,\n+      35507.96539656417\n+    ],\n+    [\n+      41812.90039335824,\n+      42810.51083053823\n+    ],\n+    [\n+      55935.88070976594,\n+      57460.56303606704\n+    ],\n+    [\n+      62653.224208723856,\n+      64080.00266888265\n+    ]\n+  ],\n+  \"2-4.F\": [\n+    [\n+      5.762425829433539,\n+      5.688950432977634\n+    ],\n+    [\n+      12.456752636508572,\n+      12.444770979837953\n+    ],\n+    [\n+      32.175650937926406,\n+      31.987972596514286\n+    ],\n+    [\n+      65.31912842738289,\n+      65.11499056002593\n+    ],\n+    [\n+      131.6541435816358,\n+      131.46569929199583\n+    ],\n+    [\n+      330.5248501344549,\n+      330.2502031876015\n+    ],\n+    [\n+      662.3598678889399,\n+      662.3252411741872\n+    ],\n+    [\n+      1325.911466487402,\n+      1326.2389755833124\n+    ],\n+    [\n+      3322.779368629642,\n+      3330.423668751964\n+    ],\n+    [\n+      6664.569541746268,\n+      6698.207739225536\n+    ],\n+    [\n+      13410.047147074898,\n+      13542.048717086327\n+    ],\n+    [\n+      33830.08189850396,\n+      34515.07682609032\n+    ],\n+    [\n+      40684.963542610334,\n+      41599.45365334137\n+    ],\n+    [\n+      54413.307667070156,\n+      55807.05585799116\n+    ],\n+    [\n+      61221.158244615515,\n+      62795.525117033576\n+    ]\n+  ],\n+  \"2-4.G\": [\n+    [\n+      6.070341051267456,\n+      6.170847331687273\n+    ],\n+    [\n+      12.857875395749131,\n+      12.960233281619693\n+    ],\n+    [\n+      33.13234060438814,\n+      33.153809047028126\n+    ],\n+    [\n+      67.09800895099406,\n+      67.16092228143188\n+    ],\n+    [\n+      134.95959907587152,\n+      135.03554933176787\n+    ],\n+    [\n+      338.29315397566046,\n+      338.1570476087306\n+    ],\n+    [\n+      677.8721772441622,\n+      678.0724009337299\n+    ],\n+    [\n+      1357.6856676563941,\n+      1359.2156497328988\n+    ],\n+    [\n+      3401.4482509589343,\n+      3411.3114772090444\n+    ],\n+    [\n+      6821.304926416684,\n+      6858.774077469289\n+    ],\n+    [\n+      13724.998948638151,\n+      13863.817545855754\n+    ],\n+    [\n+      34614.354246940034,\n+      35319.32373335975\n+    ],\n+    [\n+      41633.00762390816,\n+      42578.710239999054\n+    ],\n+    [\n+      55697.09547180788,\n+      57153.27478069034\n+    ],\n+    [\n+      62491.47971436501,\n+      63953.5114522588\n+    ]\n+  ],\n+  \"2-4.H\": [\n+    [\n+      5.845344418287414,\n+      5.821799769935096\n+    ],\n+    [\n+      12.202817809459749,\n+      11.877173008838636\n+    ],\n+    [\n+      32.37126406322409,\n+      32.20082131828209\n+    ],\n+    [\n+      65.91095319657803,\n+      65.9372764687776\n+    ],\n+    [\n+      132.4657541931543,\n+      132.36288499794608\n+    ],\n+    [\n+      332.63494816170845,\n+      332.64899245156784\n+    ],\n+    [\n+      665.8292225383996,\n+      665.6172811625219\n+    ],\n+    [\n+      1333.860445592804,\n+      1334.8397243460022\n+    ],\n+    [\n+      3341.4347372452544,\n+      3349.485025689769\n+    ],\n+    [\n+      6701.266042910816,\n+      6735.094984507908\n+    ],\n+    [\n+      13485.64300214163,\n+      13619.393186420923\n+    ],\n+    [\n+      34002.62130961265,\n+      34677.12977972808\n+    ],\n+    [\n+      40888.55644281394,\n+      41786.78140678472\n+    ],\n+    [\n+      54676.60173991174,\n+      56039.91756871576\n+    ],\n+    [\n+      61551.47580254186,\n+      63127.43654118778\n+    ]\n+  ],\n+  \"2-5.E\": [\n+    [\n+      5.696042151034911,\n+      5.70939493955685\n+    ],\n+    [\n+      12.030248115065678,\n+      11.921986912250322\n+    ],\n+    [\n+      31.453645965508752,\n+      31.39758638685498\n+    ],\n+    [\n+      63.73165887629873,\n+      63.66971550823379\n+    ],\n+    [\n+      128.1679683352037,\n+      127.97485183650035\n+    ],\n+    [\n+      322.1574885572915,\n+      322.2504744421248\n+    ],\n+    [\n+      644.778606322712,\n+      644.6541264405663\n+    ],\n+    [\n+      1292.0666440372745,\n+      1293.55472822548\n+    ],\n+    [\n+      3237.980973283173,\n+      3248.383551602284\n+    ],\n+    [\n+      6499.485325620529,\n+      6543.266119895344\n+    ],\n+    [\n+      13089.122649965324,\n+      13259.909282504013\n+    ],\n+    [\n+      33141.6041766934,\n+      34022.95589247983\n+    ],\n+    [\n+      39889.494226474715,\n+      41073.24994322254\n+    ],\n+    [\n+      53420.739584125935,\n+      55248.55136056926\n+    ],\n+    [\n+      60142.922862366875,\n+      62246.78389952029\n+    ]\n+  ],\n+  \"2-5.F\": [\n+    [\n+      5.773045460034582,\n+      5.810802634227362\n+    ],\n+    [\n+      12.374393002066348,\n+      12.497690189059188\n+    ],\n+    [\n+      31.829549320994822,\n+      31.856475683148666\n+    ],\n+    [\n+      64.35485889276606,\n+      64.32319696429028\n+    ],\n+    [\n+      129.36907001794253,\n+      129.18408713626118\n+    ],\n+    [\n+      324.954196727375,\n+      324.8507523451113\n+    ],\n+    [\n+      651.0226971236018,\n+      651.148825608133\n+    ],\n+    [\n+      1303.7547114348943,\n+      1304.936061226977\n+    ],\n+    [\n+      3267.3313699883274,\n+      3277.0838664147195\n+    ],\n+    [\n+      6556.986079650796,\n+      6598.23296355802\n+    ],\n+    [\n+      13197.826748281885,\n+      13357.275814968103\n+    ],\n+    [\n+      33384.97570412209,\n+      34206.57502914552\n+    ],\n+    [\n+      40173.028698623566,\n+      41275.62247870922\n+    ],\n+    [\n+      53773.59043658015,\n+      55465.33568333768\n+    ],\n+    [\n+      60544.030550980926,\n+      62498.98855993343\n+    ]\n+  ],\n+  \"2-5.G\": [\n+    [\n+      5.745002916187254,\n+      5.823629405709374\n+    ],\n+    [\n+      12.47544567348861,\n+      12.855268057889994\n+    ],\n+    [\n+      31.65864140297344,\n+      31.89395296496214\n+    ],\n+    [\n+      63.56174051926736,\n+      63.50143682685012\n+    ],\n+    [\n+      127.82361044322467,\n+      127.63133801211292\n+    ],\n+    [\n+      321.0786966879253,\n+      320.95904032062623\n+    ],\n+    [\n+      643.43206342643,\n+      643.6954697437482\n+    ],\n+    [\n+      1289.0915398650718,\n+      1291.076632541901\n+    ],\n+    [\n+      3232.9698719571716,\n+      3247.069311782438\n+    ],\n+    [\n+      6492.967916144307,\n+      6547.75904090262\n+    ],\n+    [\n+      13088.444609229433,\n+      13293.611581720794\n+    ],\n+    [\n+      33191.345534708555,\n+      34217.18150370796\n+    ],\n+    [\n+      39962.578122133,\n+      41335.056108168574\n+    ],\n+    [\n+      53548.51252312325,\n+      55662.851655337625\n+    ],\n+    [\n+      60331.67935044003,\n+      62807.02344464752\n+    ]\n+  ],\n+  \"2-5.H\": [\n+    [\n+      5.876303526653597,\n+      5.921637475933955\n+    ],\n+    [\n+      12.182244770600427,\n+      11.913621367461461\n+    ],\n+    [\n+      32.165399469613384,\n+      31.99792775340271\n+    ],\n+    [\n+      65.82087786394463,\n+      66.18193840503727\n+    ],\n+    [\n+      131.85889158192,\n+      132.00006821629933\n+    ],\n+    [\n+      330.4118907514908,\n+      330.33768342440135\n+    ],\n+    [\n+      661.7286474956638,\n+      661.6907759546093\n+    ],\n+    [\n+      1325.6432037663412,\n+      1326.960380882982\n+    ],\n+    [\n+      3321.401142389283,\n+      3330.81919127219\n+    ],\n+    [\n+      6662.540789225758,\n+      6700.482688130227\n+    ],\n+    [\n+      13405.499436440674,\n+      13553.03895212415\n+    ],\n+    [\n+      33856.37203436314,\n+      34601.54617639873\n+    ],\n+    [\n+      40724.85833479373,\n+      41720.629440924844\n+    ],\n+    [\n+      54480.668457092186,\n+      55998.40235390854\n+    ],\n+    [\n+      61292.5042940376,\n+      63001.69998878779\n+    ]\n+  ],\n+  \"2-6.E\": [\n+    [\n+      5.991504188537272,\n+      6.027575513444424\n+    ],\n+    [\n+      12.659035401554508,\n+      12.595863023542542\n+    ],\n+    [\n+      33.17856457975541,\n+      33.33471068671438\n+    ],\n+    [\n+      66.94107648858846,\n+      67.02473045146326\n+    ],\n+    [\n+      134.4242241204919,\n+      134.322244642735\n+    ],\n+    [\n+      337.4426687975004,\n+      337.3528056419475\n+    ],\n+    [\n+      675.9896374892475,\n+      676.1029550366679\n+    ],\n+    [\n+      1353.2185379057805,\n+      1353.8734876282151\n+    ],\n+    [\n+      3390.9559390816376,\n+      3399.3058355930984\n+    ],\n+    [\n+      6802.46936530173,\n+      6839.070276194474\n+    ],\n+    [\n+      13687.262320115524,\n+      13832.133290678757\n+    ],\n+    [\n+      34562.22417142481,\n+      35306.57452552986\n+    ],\n+    [\n+      41574.8491734476,\n+      42572.64189707494\n+    ],\n+    [\n+      55620.711999975516,\n+      57148.05038131916\n+    ],\n+    [\n+      62478.598870763555,\n+      64096.99193993519\n+    ]\n+  ],\n+  \"2-6.F\": [\n+    [\n+      5.8035823458873885,\n+      5.901130749805753\n+    ],\n+    [\n+      12.346879997477686,\n+      12.50296929640466\n+    ],\n+    [\n+      31.705534222535512,\n+      31.763157251570966\n+    ],\n+    [\n+      64.0220685911309,\n+      63.97070054884283\n+    ],\n+    [\n+      128.85580479530648,\n+      128.7872439049653\n+    ],\n+    [\n+      323.4376697424319,\n+      323.398157139617\n+    ],\n+    [\n+      647.8864747532044,\n+      648.0411656648655\n+    ],\n+    [\n+      1297.0690742303677,\n+      1297.897589389273\n+    ],\n+    [\n+      3250.167867276896,\n+      3258.5886541986206\n+    ],\n+    [\n+      6519.665234326425,\n+      6555.208055622283\n+    ],\n+    [\n+      13115.243239481164,\n+      13253.439122728827\n+    ],\n+    [\n+      33106.92500277185,\n+      33803.51940534205\n+    ],\n+    [\n+      39817.60322669727,\n+      40746.609412985934\n+    ],\n+    [\n+      53255.94125049834,\n+      54668.41350622625\n+    ],\n+    [\n+      59960.01469706806,\n+      61598.55957396365\n+    ]\n+  ],\n+  \"2-6.G\": [\n+    [\n+      5.890048257791807,\n+      6.142255700812149\n+    ],\n+    [\n+      12.245709200200986,\n+      12.428360585315595\n+    ],\n+    [\n+      31.43569828506577,\n+      31.55345997597878\n+    ],\n+    [\n+      63.61591714203449,\n+      63.82642770220231\n+    ],\n+    [\n+      127.63031309702336,\n+      127.67909437831835\n+    ],\n+    [\n+      320.2271188759124,\n+      320.3463710242269\n+    ],\n+    [\n+      641.2053061577791,\n+      641.4255169871436\n+    ],\n+    [\n+      1284.5835848576485,\n+      1286.4301297008233\n+    ],\n+    [\n+      3219.4983231895694,\n+      3231.0346348390667\n+    ],\n+    [\n+      6462.972298503154,\n+      6509.501429751068\n+    ],\n+    [\n+      13018.203119382359,\n+      13194.516857407769\n+    ],\n+    [\n+      32962.09092604797,\n+      33861.093990905865\n+    ],\n+    [\n+      39677.39903454693,\n+      40886.02482429969\n+    ],\n+    [\n+      53148.58379915067,\n+      55021.317461907434\n+    ],\n+    [\n+      59884.20206139703,\n+      62089.60260745165\n+    ]\n+  ],\n+  \"2-6.H\": [\n+    [\n+      5.854897031343982,\n+      5.909532829829914\n+    ],\n+    [\n+      12.450403601143579,\n+      12.509422517668586\n+    ],\n+    [\n+      32.182214470133644,\n+      32.200087712243935\n+    ],\n+    [\n+      65.1450686550309,\n+      65.17131517095389\n+    ],\n+    [\n+      131.14616199761906,\n+      131.26463509290124\n+    ],\n+    [\n+      328.6141913192491,\n+      328.47374521933887\n+    ],\n+    [\n+      658.4308986360137,\n+      658.5622981379762\n+    ],\n+    [\n+      1318.7327470446617,\n+      1320.0776832375052\n+    ],\n+    [\n+      3304.2351028595517,\n+      3313.8399451207333\n+    ],\n+    [\n+      6626.243827204666,\n+      6662.579488938191\n+    ],\n+    [\n+      13329.870269489662,\n+      13468.984780776042\n+    ],\n+    [\n+      33656.98557877869,\n+      34375.28858739975\n+    ],\n+    [\n+      40488.67082332526,\n+      41455.29191211384\n+    ],\n+    [\n+      54171.0808118227,\n+      55655.36474031973\n+    ],\n+    [\n+      60972.82446051684,\n+      62674.57725251054\n+    ]\n+  ],\n+  \"3-1.E\": [\n+    [\n+      5.875767299641436,\n+      5.948876891592257\n+    ],\n+    [\n+      12.422841921190994,\n+      12.448112326099604\n+    ],\n+    [\n+      32.19104469132736,\n+      32.20227292996578\n+    ],\n+    [\n+      65.11364747253776,\n+      65.07716424336105\n+    ],\n+    [\n+      131.22145800104158,\n+      131.3522334745256\n+    ],\n+    [\n+      328.99879222783954,\n+      329.0847971993794\n+    ],\n+    [\n+      658.6159345516869,\n+      658.6157392174449\n+    ],\n+    [\n+      1318.8789677718446,\n+      1319.735721544863\n+    ],\n+    [\n+      3303.985948197625,\n+      3311.747444459513\n+    ],\n+    [\n+      6625.667244581537,\n+      6658.217827529421\n+    ],\n+    [\n+      13322.670136322758,\n+      13452.18889077766\n+    ],\n+    [\n+      33623.05959379889,\n+      34289.532146765\n+    ],\n+    [\n+      40433.96649059294,\n+      41323.472680521845\n+    ],\n+    [\n+      54067.80248348747,\n+      55416.69847074918\n+    ],\n+    [\n+      60856.261958071555,\n+      62405.16145296517\n+    ]\n+  ],\n+  \"3-1.F\": [\n+    [\n+      6.010462863349459,\n+      6.09054349437436\n+    ],\n+    [\n+      12.720338429507946,\n+      12.770071230953617\n+    ],\n+    [\n+      32.76661404633487,\n+      32.64479328232782\n+    ],\n+    [\n+      66.48598352179651,\n+      66.38640859012523\n+    ],\n+    [\n+      133.8886726789493,\n+      133.7980621137307\n+    ],\n+    [\n+      336.0396028165138,\n+      335.9189813897377\n+    ],\n+    [\n+      673.1728032084718,\n+      673.2171452361054\n+    ],\n+    [\n+      1348.1986833098583,\n+      1349.3334637699406\n+    ],\n+    [\n+      3377.11860018481,\n+      3385.383391082721\n+    ],\n+    [\n+      6772.567671052296,\n+      6806.751109505735\n+    ],\n+    [\n+      13615.971450464604,\n+      13747.87938054281\n+    ],\n+    [\n+      34350.511437719404,\n+      35017.72444840318\n+    ],\n+    [\n+      41303.92508624008,\n+      42191.13153406622\n+    ],\n+    [\n+      55222.56533224779,\n+      56562.78354478259\n+    ],\n+    [\n+      62154.38170485206,\n+      63692.43812670288\n+    ]\n+  ],\n+  \"3-1.G\": [\n+    [\n+      5.881563663779411,\n+      5.888670026682248\n+    ],\n+    [\n+      12.477891122635997,\n+      12.407085446254959\n+    ],\n+    [\n+      32.192698151575726,\n+      31.816832999490668\n+    ],\n+    [\n+      65.55632680621052,\n+      65.16878203118921\n+    ],\n+    [\n+      132.37372050724636,\n+      132.0556853730922\n+    ],\n+    [\n+      332.491219974968,\n+      332.05145231088875\n+    ],\n+    [\n+      666.6603320896476,\n+      666.6573549366559\n+    ],\n+    [\n+      1334.8691090784432,\n+      1335.611843555426\n+    ],\n+    [\n+      3344.5627491002742,\n+      3352.627726009655\n+    ],\n+    [\n+      6707.531411498724,\n+      6741.398446969162\n+    ],\n+    [\n+      13485.848470697083,\n+      13616.501957782595\n+    ],\n+    [\n+      34018.73605004567,\n+      34677.61773137724\n+    ],\n+    [\n+      40907.039556565,\n+      41785.54083033894\n+    ],\n+    [\n+      54702.135526916005,\n+      56039.929789054026\n+    ],\n+    [\n+      61585.20366530897,\n+      63137.66821335536\n+    ]\n+  ],\n+  \"3-1.H\": [\n+    [\n+      5.950022779780963,\n+      6.021377474770303\n+    ],\n+    [\n+      12.721495818915063,\n+      12.88518714818824\n+    ],\n+    [\n+      32.34316211601187,\n+      32.08737063428206\n+    ],\n+    [\n+      65.8693745164178,\n+      65.73617684392276\n+    ],\n+    [\n+      132.69127092106817,\n+      132.57610104135023\n+    ],\n+    [\n+      333.093438036338,\n+      332.96927277267076\n+    ],\n+    [\n+      667.2740420520065,\n+      667.3119303626003\n+    ],\n+    [\n+      1336.0288888992343,\n+      1336.785037036595\n+    ],\n+    [\n+      3346.8051587980995,\n+      3354.2426525949036\n+    ],\n+    [\n+      6711.17322948036,\n+      6742.926822462917\n+    ],\n+    [\n+      13488.177120675406,\n+      13609.149942623671\n+    ],\n+    [\n+      34000.50461834885,\n+      34610.71850753338\n+    ],\n+    [\n+      40875.40417606428,\n+      41685.11733606746\n+    ],\n+    [\n+      54629.63972968628,\n+      55843.50582195104\n+    ],\n+    [\n+      61455.27935568248,\n+      62817.57270769288\n+    ]\n+  ],\n+  \"3-2.E\": [\n+    [\n+      6.00893388605824,\n+      6.147160293996579\n+    ],\n+    [\n+      12.613930168677756,\n+      12.68049789802732\n+    ],\n+    [\n+      32.61227232845152,\n+      32.65520285300064\n+    ],\n+    [\n+      65.96372189018072,\n+      65.98857609679183\n+    ],\n+    [\n+      132.77630646053376,\n+      132.87485135730904\n+    ],\n+    [\n+      332.9230003450891,\n+      332.9512832026978\n+    ],\n+    [\n+      666.6878457761859,\n+      666.7861857171249\n+    ],\n+    [\n+      1335.0112432989674,\n+      1336.0441639318192\n+    ],\n+    [\n+      3344.564262963388,\n+      3353.001884474053\n+    ],\n+    [\n+      6706.892511470226,\n+      6740.860361265535\n+    ],\n+    [\n+      13487.007772175672,\n+      13620.32760716288\n+    ],\n+    [\n+      34034.937364728474,\n+      34714.49814380569\n+    ],\n+    [\n+      40928.35238966514,\n+      41833.72356992527\n+    ],\n+    [\n+      54725.65317302172,\n+      56094.33447495861\n+    ],\n+    [\n+      61589.24556070696,\n+      63152.94607201975\n+    ]\n+  ],\n+  \"3-2.F\": [\n+    [\n+      6.159781962760703,\n+      6.387529983460927\n+    ],\n+    [\n+      12.796182973782768,\n+      12.90383883366059\n+    ],\n+    [\n+      32.976541798117445,\n+      33.01589470317617\n+    ],\n+    [\n+      66.6495986186588,\n+      66.61562632530384\n+    ],\n+    [\n+      134.053223386543,\n+      133.93026654309196\n+    ],\n+    [\n+      336.61277210550816,\n+      336.5711290529532\n+    ],\n+    [\n+      674.2968384677074,\n+      674.4757671432602\n+    ],\n+    [\n+      1350.5842852473559,\n+      1352.1252956193055\n+    ],\n+    [\n+      3382.9528812964713,\n+      3392.1042489897222\n+    ],\n+    [\n+      6782.256587296354,\n+      6816.220892354833\n+    ],\n+    [\n+      13628.159495035325,\n+      13751.918341056957\n+    ],\n+    [\n+      34326.401753854945,\n+      34917.257660288014\n+    ],\n+    [\n+      41258.86273299557,\n+      42037.326656544836\n+    ],\n+    [\n+      55123.27715960142,\n+      56276.844235107215\n+    ],\n+    [\n+      62031.06724052516,\n+      63346.83757584659\n+    ]\n+  ],\n+  \"3-2.G\": [\n+    [\n+      5.706042007289974,\n+      5.653588430415627\n+    ],\n+    [\n+      12.28096910920733,\n+      12.259572134653615\n+    ],\n+    [\n+      31.909499078084263,\n+      31.88635026673295\n+    ],\n+    [\n+      64.5100894428699,\n+      64.37071233930108\n+    ],\n+    [\n+      129.81179344061968,\n+      129.54018078566048\n+    ],\n+    [\n+      325.94766849672624,\n+      325.5093177116412\n+    ],\n+    [\n+      653.6671279982723,\n+      653.7766162095911\n+    ],\n+    [\n+      1309.072116101648,\n+      1310.2455278860875\n+    ],\n+    [\n+      3282.385553200612,\n+      3293.885256866002\n+    ],\n+    [\n+      6588.922865843417,\n+      6635.536754760914\n+    ],\n+    [\n+      13268.45834499501,\n+      13445.152982850866\n+    ],\n+    [\n+      33574.368342069574,\n+      34454.92072751799\n+    ],\n+    [\n+      40402.00117568242,\n+      41577.49556536349\n+    ],\n+    [\n+      54081.855862602904,\n+      55874.65296273367\n+    ],\n+    [\n+      60912.5970077598,\n+      63004.65713718416\n+    ]\n+  ],\n+  \"3-2.H\": [\n+    [\n+      6.077721135699653,\n+      6.261338308577567\n+    ],\n+    [\n+      12.736682010028472,\n+      12.872236734106528\n+    ],\n+    [\n+      32.712016420766446,\n+      32.71228196243721\n+    ],\n+    [\n+      66.29194279435,\n+      66.35686984481313\n+    ],\n+    [\n+      133.30408157098208,\n+      133.35044320712734\n+    ],\n+    [\n+      334.52461948008073,\n+      334.6996115690805\n+    ],\n+    [\n+      669.5745214830009,\n+      669.6460353282607\n+    ],\n+    [\n+      1340.9854324200062,\n+      1342.1622886906734\n+    ],\n+    [\n+      3359.6038658439784,\n+      3368.501899733304\n+    ],\n+    [\n+      6739.832835350599,\n+      6777.614028071497\n+    ],\n+    [\n+      13562.0792291804,\n+      13711.554211619896\n+    ],\n+    [\n+      34267.5672209918,\n+      35037.52905774022\n+    ],\n+    [\n+      41223.333769040124,\n+      42254.22727442485\n+    ],\n+    [\n+      55157.66293002278,\n+      56735.4821164198\n+    ],\n+    [\n+      62088.88422516337,\n+      63902.448916499015\n+    ]\n+  ],\n+  \"3-3.E\": [\n+    [\n+      5.733198682824208,\n+      5.7118888502500065\n+    ],\n+    [\n+      12.225106680708022,\n+      12.157572080906787\n+    ],\n+    [\n+      31.88377871861457,\n+      31.859276892667513\n+    ],\n+    [\n+      64.54562492488458,\n+      64.49085718862126\n+    ],\n+    [\n+      129.78458378745813,\n+      129.58475697981413\n+    ],\n+    [\n+      325.9578397226096,\n+      325.7782088721554\n+    ],\n+    [\n+      653.0970938390733,\n+      653.1352102675279\n+    ],\n+    [\n+      1308.213023118257,\n+      1309.5255621301658\n+    ],\n+    [\n+      3280.148063756251,\n+      3291.907926873368\n+    ],\n+    [\n+      6588.83791012061,\n+      6640.432434506216\n+    ],\n+    [\n+      13291.031253077039,\n+      13494.868986224415\n+    ],\n+    [\n+      33711.64609097063,\n+      34763.77849644713\n+    ],\n+    [\n+      40596.46465236536,\n+      42010.756664734436\n+    ],\n+    [\n+      54403.28931989061,\n+      56583.97926579318\n+    ],\n+    [\n+      61275.42805022303,\n+      63806.16321960635\n+    ]\n+  ],\n+  \"3-3.F\": [\n+    [\n+      5.7001096359688725,\n+      5.68812612217175\n+    ],\n+    [\n+      12.179785485646505,\n+      12.157320142697758\n+    ],\n+    [\n+      31.71012453281466,\n+      31.747481109456444\n+    ],\n+    [\n+      64.02857572379398,\n+      63.93361312311932\n+    ],\n+    [\n+      128.94710531751363,\n+      128.8688438623581\n+    ],\n+    [\n+      323.53595975051786,\n+      323.3414053996259\n+    ],\n+    [\n+      648.3384816547477,\n+      648.4376605999645\n+    ],\n+    [\n+      1299.0647361433148,\n+      1300.8753009320915\n+    ],\n+    [\n+      3257.066517561419,\n+      3269.874439827021\n+    ],\n+    [\n+      6539.020117895371,\n+      6589.024133567973\n+    ],\n+    [\n+      13178.460356645664,\n+      13365.888309707661\n+    ],\n+    [\n+      33356.84505978911,\n+      34288.937497717874\n+    ],\n+    [\n+      40144.6694938805,\n+      41386.32697240174\n+    ],\n+    [\n+      53738.54922410375,\n+      55620.140337048295\n+    ],\n+    [\n+      60399.71881996477,\n+      62456.377762297576\n+    ]\n+  ],\n+  \"3-3.G\": [\n+    [\n+      5.656784458403973,\n+      5.638741205508585\n+    ],\n+    [\n+      12.08071063716275,\n+      12.0388121995709\n+    ],\n+    [\n+      31.375000736980247,\n+      31.283905753549046\n+    ],\n+    [\n+      63.61082909953065,\n+      63.516093544681866\n+    ],\n+    [\n+      127.84108327632765,\n+      127.49869013009895\n+    ],\n+    [\n+      321.4387276103958,\n+      321.25708015415455\n+    ],\n+    [\n+      644.0392867029718,\n+      644.0646348552657\n+    ],\n+    [\n+      1290.5948580388037,\n+      1292.3913502016756\n+    ],\n+    [\n+      3237.2061775818916,\n+      3251.3119673203855\n+    ],\n+    [\n+      6505.518930418752,\n+      6564.471125295459\n+    ],\n+    [\n+      13133.295769865552,\n+      13360.075657801648\n+    ],\n+    [\n+      33394.5652192239,\n+      34592.00865098833\n+    ],\n+    [\n+      40239.916137248816,\n+      41855.770993738304\n+    ],\n+    [\n+      53977.12251020205,\n+      56483.26121690951\n+    ],\n+    [\n+      60765.64807377203,\n+      63630.20594064851\n+    ]\n+  ],\n+  \"3-3.H\": [\n+    [\n+      5.814360112503609,\n+      5.925756816303308\n+    ],\n+    [\n+      12.332816052194493,\n+      12.480162923920798\n+    ],\n+    [\n+      31.771394693722907,\n+      31.909728610308523\n+    ],\n+    [\n+      64.14222337781496,\n+      64.24018139551657\n+    ],\n+    [\n+      128.78887651914252,\n+      128.71187585750297\n+    ],\n+    [\n+      323.4525825868258,\n+      323.57475044270535\n+    ],\n+    [\n+      647.5663194835516,\n+      647.6946489021288\n+    ],\n+    [\n+      1297.2565283779163,\n+      1298.8619162473565\n+    ],\n+    [\n+      3252.9322924651856,\n+      3265.615440047727\n+    ],\n+    [\n+      6533.674586679652,\n+      6586.397305251021\n+    ],\n+    [\n+      13179.69291915942,\n+      13383.856385032665\n+    ],\n+    [\n+      33410.15549764052,\n+      34441.19876528948\n+    ],\n+    [\n+      40223.51894197849,\n+      41600.48633358407\n+    ],\n+    [\n+      53875.75795553595,\n+      55973.71909909499\n+    ],\n+    [\n+      60685.40607026818,\n+      63126.63749771441\n+    ]\n+  ],\n+  \"3-4.E\": [\n+    [\n+      5.850407432934452,\n+      5.989697972166232\n+    ],\n+    [\n+      12.223806946610244,\n+      12.240564288262778\n+    ],\n+    [\n+      31.565220546082138,\n+      31.44567593366538\n+    ],\n+    [\n+      63.96243640735597,\n+      63.776614637219645\n+    ],\n+    [\n+      128.81620383502698,\n+      128.55697087024885\n+    ],\n+    [\n+      323.64325906706256,\n+      323.42920833079916\n+    ],\n+    [\n+      648.5788655580694,\n+      648.6644791344544\n+    ],\n+    [\n+      1299.3405217328743,\n+      1300.918069553596\n+    ],\n+    [\n+      3259.035749864791,\n+      3272.54757848889\n+    ],\n+    [\n+      6548.28064476144,\n+      6605.112504288106\n+    ],\n+    [\n+      13213.891763157235,\n+      13432.820879923107\n+    ],\n+    [\n+      33549.98283773581,\n+      34673.573054808425\n+    ],\n+    [\n+      40402.22191597311,\n+      41902.652039131346\n+    ],\n+    [\n+      54142.5760611875,\n+      56437.52183710134\n+    ],\n+    [\n+      60992.42507909283,\n+      63663.229002317894\n+    ]\n+  ],\n+  \"3-4.F\": [\n+    [\n+      5.690634980847967,\n+      5.732580988905519\n+    ],\n+    [\n+      12.041491583520463,\n+      12.01558966298259\n+    ],\n+    [\n+      31.271989203347694,\n+      31.221253424247315\n+    ],\n+    [\n+      63.2652317471192,\n+      63.11574513912051\n+    ],\n+    [\n+      127.33748863474761,\n+      127.07591334001107\n+    ],\n+    [\n+      319.84131702968847,\n+      319.5297337167922\n+    ],\n+    [\n+      641.2288990850984,\n+      641.3819688002761\n+    ],\n+    [\n+      1284.4542899900978,\n+      1285.9892226985687\n+    ],\n+    [\n+      3221.8009796822544,\n+      3235.200344202242\n+    ],\n+    [\n+      6471.7239454824075,\n+      6526.219257058557\n+    ],\n+    [\n+      13050.669388257234,\n+      13254.478547873487\n+    ],\n+    [\n+      33081.99491464224,\n+      34103.06516912632\n+    ],\n+    [\n+      39832.73768241704,\n+      41200.962790341015\n+    ],\n+    [\n+      53366.19967673887,\n+      55464.95947437851\n+    ],\n+    [\n+      59931.572014825186,\n+      62179.07251398405\n+    ]\n+  ],\n+  \"3-4.G\": [\n+    [\n+      5.639216358243525,\n+      5.506884234781158\n+    ],\n+    [\n+      12.247797668899867,\n+      12.160185883437336\n+    ],\n+    [\n+      32.135238304686006,\n+      32.25091648636056\n+    ],\n+    [\n+      64.8606235819058,\n+      64.89473125741642\n+    ],\n+    [\n+      130.25491257917443,\n+      130.07043538064062\n+    ],\n+    [\n+      327.0771767658334,\n+      326.8754616102512\n+    ],\n+    [\n+      655.4060793755158,\n+      655.4675479618151\n+    ],\n+    [\n+      1312.674732458013,\n+      1313.8747440712866\n+    ],\n+    [\n+      3290.992369089375,\n+      3302.153090641894\n+    ],\n+    [\n+      6606.065672513775,\n+      6651.9221450504465\n+    ],\n+    [\n+      13314.400240260837,\n+      13492.7163623375\n+    ],\n+    [\n+      33690.10143838216,\n+      34598.268326407\n+    ],\n+    [\n+      40547.17160911063,\n+      41762.633221241085\n+    ],\n+    [\n+      54284.64051881768,\n+      56140.95165627172\n+    ],\n+    [\n+      61018.123600092025,\n+      63050.75462063732\n+    ]\n+  ],\n+  \"3-4.H\": [\n+    [\n+      5.893579608898566,\n+      6.114683091177086\n+    ],\n+    [\n+      12.350129412988544,\n+      12.569396810621406\n+    ],\n+    [\n+      31.377608541713464,\n+      31.258339588599096\n+    ],\n+    [\n+      63.98051415009293,\n+      64.19332381311052\n+    ],\n+    [\n+      128.03866029166747,\n+      127.76733199079753\n+    ],\n+    [\n+      322.0253557633404,\n+      322.11369451739256\n+    ],\n+    [\n+      644.8173301759939,\n+      644.9868776208061\n+    ],\n+    [\n+      1292.1032931598438,\n+      1294.140393481467\n+    ],\n+    [\n+      3239.936891626172,\n+      3253.5970675600834\n+    ],\n+    [\n+      6507.863107778478,\n+      6562.743264026186\n+    ],\n+    [\n+      13130.76869677533,\n+      13342.067614187015\n+    ],\n+    [\n+      33346.61290428811,\n+      34458.81944805141\n+    ],\n+    [\n+      40170.111642996315,\n+      41669.66741404503\n+    ],\n+    [\n+      53849.314003260886,\n+      56160.814907578504\n+    ],\n+    [\n+      60669.410978334556,\n+      63366.44780748459\n+    ]\n+  ],\n+  \"3-5.E\": [\n+    [\n+      6.024922721296829,\n+      6.146779778253719\n+    ],\n+    [\n+      12.660720563793234,\n+      12.706247609860885\n+    ],\n+    [\n+      32.62664731279842,\n+      32.50874229458734\n+    ],\n+    [\n+      66.08513271422518,\n+      65.8765720074719\n+    ],\n+    [\n+      133.37718581727302,\n+      133.36127231847527\n+    ],\n+    [\n+      334.50834541108884,\n+      334.3274324902811\n+    ],\n+    [\n+      670.2773626425302,\n+      670.37163228951\n+    ],\n+    [\n+      1342.2503960681865,\n+      1343.3310551865413\n+    ],\n+    [\n+      3362.8604978859125,\n+      3371.610648092576\n+    ],\n+    [\n+      6747.125805950754,\n+      6785.396963098746\n+    ],\n+    [\n+      13577.944008273675,\n+      13730.555075365863\n+    ],\n+    [\n+      34332.166324785234,\n+      35134.06505063054\n+    ],\n+    [\n+      41306.80362173145,\n+      42382.46224009114\n+    ],\n+    [\n+      55281.365310202156,\n+      56932.41662412665\n+    ],\n+    [\n+      62246.825697532695,\n+      64162.79453852545\n+    ]\n+  ],\n+  \"3-5.F\": [\n+    [\n+      5.850644167982907,\n+      5.774266678073709\n+    ],\n+    [\n+      12.642620089137122,\n+      12.6217454333091\n+    ],\n+    [\n+      32.88789085471955,\n+      32.90577246275172\n+    ],\n+    [\n+      66.33802098670436,\n+      66.12919803781391\n+    ],\n+    [\n+      133.7383865760084,\n+      133.57450208036062\n+    ],\n+    [\n+      335.70382667770656,\n+      335.44046907021897\n+    ],\n+    [\n+      672.8057074678912,\n+      672.8691733928356\n+    ],\n+    [\n+      1347.156068927457,\n+      1348.020731989367\n+    ],\n+    [\n+      3375.778862161453,\n+      3384.639873332771\n+    ],\n+    [\n+      6771.339656077919,\n+      6808.189197687645\n+    ],\n+    [\n+      13620.115729564763,\n+      13763.299676715069\n+    ],\n+    [\n+      34381.56627930375,\n+      35101.208944277\n+    ],\n+    [\n+      41347.76811530963,\n+      42305.02170176909\n+    ],\n+    [\n+      55291.91595007334,\n+      56737.494087896994\n+    ],\n+    [\n+      62223.10562080348,\n+      63870.01135967822\n+    ]\n+  ],\n+  \"3-5.G\": [\n+    [\n+      5.944925955545215,\n+      5.9727729549291695\n+    ],\n+    [\n+      12.836103875403365,\n+      13.034828673588759\n+    ],\n+    [\n+      32.953684984646266,\n+      33.09799277949767\n+    ],\n+    [\n+      66.18061552673724,\n+      65.9361336140036\n+    ],\n+    [\n+      133.8372402714274,\n+      134.01672182931847\n+    ],\n+    [\n+      335.14382481391584,\n+      334.93378432053544\n+    ],\n+    [\n+      671.7236778901556,\n+      671.9334360132167\n+    ],\n+    [\n+      1345.260334343148,\n+      1346.6882209764976\n+    ],\n+    [\n+      3371.282335152499,\n+      3381.803562271204\n+    ],\n+    [\n+      6764.6197808711595,\n+      6807.111128166439\n+    ],\n+    [\n+      13615.588244001172,\n+      13778.255887237392\n+    ],\n+    [\n+      34416.94532540615,\n+      35237.82086093293\n+    ],\n+    [\n+      41408.99355333635,\n+      42508.00942543139\n+    ],\n+    [\n+      55418.82669355118,\n+      57102.50568153383\n+    ],\n+    [\n+      62329.71910052943,\n+      64206.29440470043\n+    ]\n+  ],\n+  \"3-5.H\": [\n+    [\n+      6.16080565179032,\n+      6.505590415580628\n+    ],\n+    [\n+      12.652333274145882,\n+      12.8442491325706\n+    ],\n+    [\n+      32.40056494371644,\n+      32.450952132345364\n+    ],\n+    [\n+      66.06900875919713,\n+      66.64783531678007\n+    ],\n+    [\n+      131.77575286423883,\n+      131.76639070500428\n+    ],\n+    [\n+      331.09480830726085,\n+      331.53535458615096\n+    ],\n+    [\n+      662.2760625028263,\n+      662.4477774182811\n+    ],\n+    [\n+      1326.9917454799142,\n+      1328.9829930584688\n+    ],\n+    [\n+      3325.472538294072,\n+      3337.286195686491\n+    ],\n+    [\n+      6673.932933650874,\n+      6719.9853698665165\n+    ],\n+    [\n+      13438.816997915179,\n+      13613.759321932164\n+    ],\n+    [\n+      34027.6439400402,\n+      34934.67861038394\n+    ],\n+    [\n+      40954.26138978766,\n+      42170.44722421509\n+    ],\n+    [\n+      54839.158676338426,\n+      56708.82800756187\n+    ],\n+    [\n+      61764.47099122606,\n+      63943.04469885754\n+    ]\n+  ],\n+  \"3-6.E\": [\n+    [\n+      6.092581371335289,\n+      6.40718145819617\n+    ],\n+    [\n+      12.577729468545254,\n+      12.782759589159298\n+    ],\n+    [\n+      32.123292666974955,\n+      32.12292140336504\n+    ],\n+    [\n+      65.02083724759478,\n+      65.0052194640777\n+    ],\n+    [\n+      131.01780735677022,\n+      131.17375162562493\n+    ],\n+    [\n+      328.1686579569146,\n+      327.9985742786005\n+    ],\n+    [\n+      657.7659707087814,\n+      658.0652869815628\n+    ],\n+    [\n+      1316.792646745941,\n+      1317.8634514844723\n+    ],\n+    [\n+      3299.7613468418804,\n+      3309.0583868937233\n+    ],\n+    [\n+      6619.724224095067,\n+      6657.897328053008\n+    ],\n+    [\n+      13319.864953558961,\n+      13468.230011998838\n+    ],\n+    [\n+      33658.51843940589,\n+      34421.962852555655\n+    ],\n+    [\n+      40492.953911049284,\n+      41516.58064282892\n+    ],\n+    [\n+      54190.858126416795,\n+      55766.55407625231\n+    ],\n+    [\n+      61027.51417396746,\n+      62866.5847653667\n+    ]\n+  ],\n+  \"3-6.F\": [\n+    [\n+      5.762984987720595,\n+      5.677760592873547\n+    ],\n+    [\n+      12.454094173919533,\n+      12.412582997381556\n+    ],\n+    [\n+      32.59490043128487,\n+      32.75608549234144\n+    ],\n+    [\n+      65.69737838608528,\n+      65.72898798701205\n+    ],\n+    [\n+      132.12027245245756,\n+      132.11221048615428\n+    ],\n+    [\n+      331.46453912392644,\n+      331.41308617296164\n+    ],\n+    [\n+      663.8612364305137,\n+      663.8937073851321\n+    ],\n+    [\n+      1329.3743337131323,\n+      1330.2950035370416\n+    ],\n+    [\n+      3329.9235873484186,\n+      3337.5336733008844\n+    ],\n+    [\n+      6678.261014699166,\n+      6711.22547144786\n+    ],\n+    [\n+      13431.914560259655,\n+      13565.01188654615\n+    ],\n+    [\n+      33903.48320795926,\n+      34590.11705738468\n+    ],\n+    [\n+      40774.91657115692,\n+      41693.32907446954\n+    ],\n+    [\n+      54538.49257128282,\n+      55943.00169103168\n+    ],\n+    [\n+      61405.88760889055,\n+      63038.56036814553\n+    ]\n+  ],\n+  \"3-6.G\": [\n+    [\n+      5.978692200237094,\n+      6.078620382237521\n+    ],\n+    [\n+      12.719526908667794,\n+      12.879242579731038\n+    ],\n+    [\n+      32.567738769203956,\n+      32.52957744300358\n+    ],\n+    [\n+      66.00605996263982,\n+      65.99925255902504\n+    ],\n+    [\n+      132.53478885547233,\n+      132.24350482482282\n+    ],\n+    [\n+      333.0835797614572,\n+      332.89899571737504\n+    ],\n+    [\n+      667.4879287174348,\n+      667.638380692312\n+    ],\n+    [\n+      1336.6601224213844,\n+      1337.8452951305323\n+    ],\n+    [\n+      3349.114706439466,\n+      3358.3634666691783\n+    ],\n+    [\n+      6718.714664112099,\n+      6757.063156187087\n+    ],\n+    [\n+      13517.770950473501,\n+      13665.488144140705\n+    ],\n+    [\n+      34155.09629106938,\n+      34920.86177092974\n+    ],\n+    [\n+      41090.611805706365,\n+      42118.81637852119\n+    ],\n+    [\n+      54988.5614570361,\n+      56571.11695867222\n+    ],\n+    [\n+      61928.68887749895,\n+      63779.419526172875\n+    ]\n+  ],\n+  \"3-6.H\": [\n+    [\n+      5.635966776394523,\n+      5.4282264920642955\n+    ],\n+    [\n+      12.303008865134531,\n+      12.10875690752958\n+    ],\n+    [\n+      32.52030100959645,\n+      32.59423587007157\n+    ],\n+    [\n+      66.08638242973868,\n+      66.48502504876731\n+    ],\n+    [\n+      132.11569211550335,\n+      132.05409049774735\n+    ],\n+    [\n+      331.7659057178902,\n+      331.89294798922424\n+    ],\n+    [\n+      663.9450309787702,\n+      663.8152008530926\n+    ],\n+    [\n+      1329.5805616143678,\n+      1330.2145900909516\n+    ],\n+    [\n+      3330.0289896118584,\n+      3336.5079279067036\n+    ],\n+    [\n+      6676.934954193352,\n+      6706.074197266708\n+    ],\n+    [\n+      13419.284021606894,\n+      13532.915607431603\n+    ],\n+    [\n+      33819.3562011709,\n+      34405.9121927051\n+    ],\n+    [\n+      40660.75284207991,\n+      41444.81964550363\n+    ],\n+    [\n+      54356.1029454322,\n+      55548.858928628535\n+    ],\n+    [\n+      61173.79537159323,\n+      62539.74753294483\n+    ]\n+  ],\n+  \"4-1.E\": [\n+    [\n+      6.147124045581604,\n+      6.189667358948234\n+    ],\n+    [\n+      12.861798263202228,\n+      12.684767686545296\n+    ],\n+    [\n+      33.60186308021694,\n+      33.35497738201745\n+    ],\n+    [\n+      68.29335318799596,\n+      68.05483676681955\n+    ],\n+    [\n+      137.66400050405147,\n+      137.4314302531795\n+    ],\n+    [\n+      345.75958193672176,\n+      345.52956343738566\n+    ],\n+    [\n+      692.7387750816806,\n+      692.6664973699562\n+    ],\n+    [\n+      1387.3672988868734,\n+      1388.2815259329327\n+    ],\n+    [\n+      3474.843337403278,\n+      3482.321270044616\n+    ],\n+    [\n+      6967.972419798925,\n+      7000.50151294841\n+    ],\n+    [\n+      14008.91138255391,\n+      14138.863695183374\n+    ],\n+    [\n+      35356.621979303614,\n+      36045.09542537523\n+    ],\n+    [\n+      42524.30536207184,\n+      43450.634607694534\n+    ],\n+    [\n+      56868.33698641796,\n+      58280.30530021701\n+    ],\n+    [\n+      62983.78972513063,\n+      63545.54270205432\n+    ]\n+  ],\n+  \"4-1.F\": [\n+    [\n+      6.215456084815327,\n+      6.282159601991496\n+    ],\n+    [\n+      13.268862450785898,\n+      13.402509392156118\n+    ],\n+    [\n+      34.076459177839446,\n+      34.05512379283034\n+    ],\n+    [\n+      69.08628406493973,\n+      69.13936645920246\n+    ],\n+    [\n+      138.9879520404912,\n+      139.07184326924104\n+    ],\n+    [\n+      348.5637175850412,\n+      348.61071009853896\n+    ],\n+    [\n+      697.9415412111014,\n+      698.0120001558454\n+    ],\n+    [\n+      1397.7518935836836,\n+      1398.9249655259791\n+    ],\n+    [\n+      3501.0141906180343,\n+      3509.3422435151692\n+    ],\n+    [\n+      7021.351451762201,\n+      7056.629842924499\n+    ],\n+    [\n+      14116.760235206342,\n+      14252.944787226581\n+    ],\n+    [\n+      35608.14267867905,\n+      36294.67377080859\n+    ],\n+    [\n+      42816.8216015605,\n+      43731.07199629741\n+    ],\n+    [\n+      57245.51148499612,\n+      58627.752656232115\n+    ],\n+    [\n+      62792.01302797781,\n+      62701.21167933214\n+    ]\n+  ],\n+  \"4-1.G\": [\n+    [\n+      6.044500377597188,\n+      6.002578033372702\n+    ],\n+    [\n+      13.103122811049893,\n+      13.204513183870754\n+    ],\n+    [\n+      33.78895362019288,\n+      33.82805754582004\n+    ],\n+    [\n+      68.32383375099677,\n+      68.31879813795265\n+    ],\n+    [\n+      137.3783021580907,\n+      137.26987055675647\n+    ],\n+    [\n+      344.8939650847487,\n+      344.8272617515999\n+    ],\n+    [\n+      690.8093968100336,\n+      690.8683560689152\n+    ],\n+    [\n+      1383.4516380923296,\n+      1384.5742212446714\n+    ],\n+    [\n+      3466.5546852855523,\n+      3476.066919587302\n+    ],\n+    [\n+      6956.036481189972,\n+      6997.350852059828\n+    ],\n+    [\n+      14000.417040324071,\n+      14162.536558473837\n+    ],\n+    [\n+      35400.962716857815,\n+      36243.358508467434\n+    ],\n+    [\n+      42595.73088271285,\n+      43726.77593753089\n+    ],\n+    [\n+      57015.02456161472,\n+      58756.10977916714\n+    ],\n+    [\n+      62904.48928730596,\n+      63574.71734566591\n+    ]\n+  ],\n+  \"4-1.H\": [\n+    [\n+      6.07019039591168,\n+      6.179835400301214\n+    ],\n+    [\n+      12.884855992545681,\n+      13.03428444665887\n+    ],\n+    [\n+      33.068427601685244,\n+      33.07576896265962\n+    ],\n+    [\n+      66.67738552721178,\n+      66.42142258297568\n+    ],\n+    [\n+      134.64796215142553,\n+      134.6151034974101\n+    ],\n+    [\n+      337.6724982410732,\n+      337.424854876451\n+    ],\n+    [\n+      676.8179281308927,\n+      676.9830907281704\n+    ],\n+    [\n+      1355.1584337536058,\n+      1356.1998965034438\n+    ],\n+    [\n+      3396.15152048335,\n+      3405.817860699939\n+    ],\n+    [\n+      6814.326076305549,\n+      6855.056772857952\n+    ],\n+    [\n+      13712.503897863447,\n+      13869.601849219454\n+    ],\n+    [\n+      34641.5361664854,\n+      35428.09978995869\n+    ],\n+    [\n+      41668.24809120285,\n+      42715.06538196222\n+    ],\n+    [\n+      55741.235186135425,\n+      57330.121636202275\n+    ],\n+    [\n+      62711.741566220066,\n+      64502.14612791354\n+    ]\n+  ],\n+  \"4-2.E\": [\n+    [\n+      5.9769396977964355,\n+      5.948645768898522\n+    ],\n+    [\n+      12.733254184722725,\n+      12.638483103532101\n+    ],\n+    [\n+      33.25230101811568,\n+      33.20583039249348\n+    ],\n+    [\n+      67.39905873007291,\n+      67.38244868684372\n+    ],\n+    [\n+      135.53239279946695,\n+      135.41554118443528\n+    ],\n+    [\n+      340.1483801946396,\n+      339.94650517680407\n+    ],\n+    [\n+      681.5457392001198,\n+      681.5727297681967\n+    ],\n+    [\n+      1365.1305054398422,\n+      1366.4067039119807\n+    ],\n+    [\n+      3420.94612261246,\n+      3431.0563410711184\n+    ],\n+    [\n+      6863.30638211843,\n+      6904.3068500757845\n+    ],\n+    [\n+      13811.107526540733,\n+      13970.179497181593\n+    ],\n+    [\n+      34901.840964808136,\n+      35705.76345442\n+    ],\n+    [\n+      41985.23746932051,\n+      43057.806254803734\n+    ],\n+    [\n+      56179.01626833152,\n+      57818.394197738555\n+    ],\n+    [\n+      62915.608435328,\n+      64458.66722780355\n+    ]\n+  ],\n+  \"4-2.F\": [\n+    [\n+      6.200625010135603,\n+      6.318499832022014\n+    ],\n+    [\n+      13.188320774613667,\n+      13.380668809991503\n+    ],\n+    [\n+      33.77413263602937,\n+      33.8081985990836\n+    ],\n+    [\n+      68.36072957412351,\n+      68.41245691275765\n+    ],\n+    [\n+      137.53841050323348,\n+      137.62995985991014\n+    ],\n+    [\n+      344.88099287992384,\n+      344.90140995648534\n+    ],\n+    [\n+      690.7015796804179,\n+      690.8531992626671\n+    ],\n+    [\n+      1383.029987410995,\n+      1384.1320261624562\n+    ],\n+    [\n+      3466.0968981025935,\n+      3476.1576413913535\n+    ],\n+    [\n+      6953.692087881546,\n+      6994.66479709982\n+    ],\n+    [\n+      13989.158997720819,\n+      14144.730462025345\n+    ],\n+    [\n+      35337.93291117617,\n+      36124.89719595644\n+    ],\n+    [\n+      42508.77278566678,\n+      43561.06498750852\n+    ],\n+    [\n+      56871.464638259684,\n+      58477.56421148682\n+    ],\n+    [\n+      62762.79902662954,\n+      63307.01113729676\n+    ]\n+  ],\n+  \"4-2.G\": [\n+    [\n+      6.218422165069559,\n+      6.353341209752499\n+    ],\n+    [\n+      13.12717447882606,\n+      13.253789382775365\n+    ],\n+    [\n+      33.74016572339709,\n+      33.732363853882596\n+    ],\n+    [\n+      68.2186161741166,\n+      68.1124264668774\n+    ],\n+    [\n+      137.6735433189436,\n+      137.86838649101063\n+    ],\n+    [\n+      344.69890543858384,\n+      344.45698017450405\n+    ],\n+    [\n+      690.9305409074778,\n+      691.1501177018696\n+    ],\n+    [\n+      1383.1299879391795,\n+      1384.0094343239382\n+    ],\n+    [\n+      3467.1194865955517,\n+      3477.398106713817\n+    ],\n+    [\n+      6955.961398599813,\n+      6997.599022996085\n+    ],\n+    [\n+      13994.995695918053,\n+      14152.098537371883\n+    ],\n+    [\n+      35344.14230549866,\n+      36129.168118530884\n+    ],\n+    [\n+      42512.38944368302,\n+      43558.31960989956\n+    ],\n+    [\n+      56866.860398571356,\n+      58454.46411998819\n+    ],\n+    [\n+      62709.610832815044,\n+      63185.02269679501\n+    ]\n+  ],\n+  \"4-2.H\": [\n+    [\n+      5.970530397337869,\n+      5.954103478194059\n+    ],\n+    [\n+      12.630564307915554,\n+      12.473600608863352\n+    ],\n+    [\n+      33.25377004510312,\n+      33.31063470434332\n+    ],\n+    [\n+      67.08497156262654,\n+      66.96067103521355\n+    ],\n+    [\n+      134.72389429175342,\n+      134.2152129314683\n+    ],\n+    [\n+      338.9231814365258,\n+      338.5372842761537\n+    ],\n+    [\n+      679.598489501624,\n+      679.7624836959934\n+    ],\n+    [\n+      1361.8063279875523,\n+      1363.9313992843927\n+    ],\n+    [\n+      3412.7738730514066,\n+      3425.1579066091485\n+    ],\n+    [\n+      6847.045951015674,\n+      6892.709692713295\n+    ],\n+    [\n+      13778.052533775433,\n+      13945.108225477856\n+    ],\n+    [\n+      34803.87787059493,\n+      35614.52166324006\n+    ],\n+    [\n+      41862.42605404749,\n+      42937.588442960834\n+    ],\n+    [\n+      55993.97895559686,\n+      57614.343242784365\n+    ],\n+    [\n+      62977.33845068407,\n+      64783.337122199664\n+    ]\n+  ],\n+  \"4-3.E\": [\n+    [\n+      6.198059569985509,\n+      6.312408902519351\n+    ],\n+    [\n+      13.14194376558541,\n+      13.284909974074191\n+    ],\n+    [\n+      33.775921400974745,\n+      33.80715472185553\n+    ],\n+    [\n+      68.37274439224599,\n+      68.42714542131203\n+    ],\n+    [\n+      137.508177844509,\n+      137.55064283053662\n+    ],\n+    [\n+      344.9505754792527,\n+      344.9933993604464\n+    ],\n+    [\n+      690.7687230339303,\n+      690.8930018536936\n+    ],\n+    [\n+      1383.402297192892,\n+      1384.68790211641\n+    ],\n+    [\n+      3466.930749436418,\n+      3477.3546538288174\n+    ],\n+    [\n+      6955.281655265671,\n+      6996.9057924774315\n+    ],\n+    [\n+      14003.589052238656,\n+      14163.506304666442\n+    ],\n+    [\n+      35357.26102498384,\n+      36159.47816362252\n+    ],\n+    [\n+      42529.08268737593,\n+      43596.735856611354\n+    ],\n+    [\n+      56895.14106968163,\n+      58518.25869295274\n+    ],\n+    [\n+      62832.66786869598,\n+      63439.35987989889\n+    ]\n+  ],\n+  \"4-3.F\": [\n+    [\n+      6.345103208621868,\n+      6.6297527922008905\n+    ],\n+    [\n+      13.228562592434054,\n+      13.489661181918743\n+    ],\n+    [\n+      33.738899579461396,\n+      33.80588888191734\n+    ],\n+    [\n+      68.16333265666907,\n+      68.15541271168452\n+    ],\n+    [\n+      137.20070029416598,\n+      137.2317330841972\n+    ],\n+    [\n+      344.26682333107294,\n+      344.36872644373517\n+    ],\n+    [\n+      689.3862503610445,\n+      689.6155087141589\n+    ],\n+    [\n+      1380.3952300309904,\n+      1381.6502962168393\n+    ],\n+    [\n+      3458.880183321669,\n+      3468.6941737859797\n+    ],\n+    [\n+      6938.484191115935,\n+      6978.179097339208\n+    ],\n+    [\n+      13963.20173858723,\n+      14111.94782712466\n+    ],\n+    [\n+      35227.8499267875,\n+      35972.740251861884\n+    ],\n+    [\n+      42368.748765948745,\n+      43362.02368868517\n+    ],\n+    [\n+      56666.48057417683,\n+      58174.12235860891\n+    ],\n+    [\n+      63027.46980920939,\n+      63971.10605364272\n+    ]\n+  ],\n+  \"4-3.G\": [\n+    [\n+      6.111238671250507,\n+      6.126644595491863\n+    ],\n+    [\n+      13.07249030614372,\n+      13.123105772919873\n+    ],\n+    [\n+      33.774323705776915,\n+      33.74800456782311\n+    ],\n+    [\n+      68.2631310547612,\n+      68.09502329338869\n+    ],\n+    [\n+      137.76268753173662,\n+      137.8317749487861\n+    ],\n+    [\n+      345.23934275175804,\n+      344.9992621769477\n+    ],\n+    [\n+      691.8991983680017,\n+      692.0089062483837\n+    ],\n+    [\n+      1385.2594447599772,\n+      1386.1100686788666\n+    ],\n+    [\n+      3469.9818599598857,\n+      3477.712106532385\n+    ],\n+    [\n+      6957.305106351443,\n+      6989.3895755782105\n+    ],\n+    [\n+      13994.275768830863,\n+      14118.925480066971\n+    ],\n+    [\n+      35254.399072744665,\n+      35889.889665196\n+    ],\n+    [\n+      42389.520118607565,\n+      43239.385079944324\n+    ],\n+    [\n+      56676.09355776329,\n+      57972.418683448814\n+    ],\n+    [\n+      62970.72879080524,\n+      63612.98816971763\n+    ]\n+  ],\n+  \"4-3.H\": [\n+    [\n+      6.045344582014462,\n+      6.112163150271487\n+    ],\n+    [\n+      12.658234101395447,\n+      12.544542832488851\n+    ],\n+    [\n+      33.225374772301805,\n+      33.29685177033182\n+    ],\n+    [\n+      67.1658114147288,\n+      67.209105498609\n+    ],\n+    [\n+      134.86064743857415,\n+      134.66205451543783\n+    ],\n+    [\n+      338.59071734160165,\n+      338.3111557550978\n+    ],\n+    [\n+      678.7061947647368,\n+      678.8569603304747\n+    ],\n+    [\n+      1359.5258251616056,\n+      1361.128168467315\n+    ],\n+    [\n+      3406.135532707633,\n+      3416.266072368535\n+    ],\n+    [\n+      6832.453826937564,\n+      6872.25363882666\n+    ],\n+    [\n+      13752.458344735576,\n+      13902.501439784655\n+    ],\n+    [\n+      34715.04662858173,\n+      35478.856692404275\n+    ],\n+    [\n+      41758.98000518286,\n+      42780.996176685876\n+    ],\n+    [\n+      55861.76810185714,\n+      57416.87848473968\n+    ],\n+    [\n+      62811.378529118236,\n+      64525.83411476494\n+    ]\n+  ],\n+  \"4-4.E\": [\n+    [\n+      6.099461887573657,\n+      6.1051199754718235\n+    ],\n+    [\n+      12.909609693089827,\n+      12.80245205712305\n+    ],\n+    [\n+      33.5758560234271,\n+      33.363831997079906\n+    ],\n+    [\n+      68.23187654061385,\n+      68.05570806353488\n+    ],\n+    [\n+      137.44954334195347,\n+      137.25232182382257\n+    ],\n+    [\n+      345.2353293856602,\n+      345.1080029776523\n+    ],\n+    [\n+      691.4698187102215,\n+      691.3841963226231\n+    ],\n+    [\n+      1383.918835804422,\n+      1383.8967223984132\n+    ],\n+    [\n+      3465.914246599339,\n+      3470.7378053155703\n+    ],\n+    [\n+      6947.443435091617,\n+      6971.948169187164\n+    ],\n+    [\n+      13957.66413988553,\n+      14059.030151750914\n+    ],\n+    [\n+      35215.59042727886,\n+      35823.036912961514\n+    ],\n+    [\n+      42350.20016480559,\n+      43173.81291493031\n+    ],\n+    [\n+      56615.912409042256,\n+      57868.94781640926\n+    ],\n+    [\n+      62789.385225069826,\n+      63268.535353789826\n+    ]\n+  ],\n+  \"4-4.F\": [\n+    [\n+      5.862936846496147,\n+      5.663166454365042\n+    ],\n+    [\n+      12.708094649931677,\n+      12.455052172449996\n+    ],\n+    [\n+      33.37604768544052,\n+      33.098574343776136\n+    ],\n+    [\n+      67.94344851325374,\n+      67.74899124369321\n+    ],\n+    [\n+      136.7584248137225,\n+      136.41402166732962\n+    ],\n+    [\n+      343.644072895717,\n+      343.2891018882556\n+    ],\n+    [\n+      688.6549046732458,\n+      688.4842601148225\n+    ],\n+    [\n+      1378.8203377162781,\n+      1379.1628078005199\n+    ],\n+    [\n+      3452.1174013471236,\n+      3456.806177772894\n+    ],\n+    [\n+      6918.72096829282,\n+      6941.8220737314105\n+    ],\n+    [\n+      13893.269422561838,\n+      13985.017708135256\n+    ],\n+    [\n+      34955.48774843561,\n+      35435.692181534985\n+    ],\n+    [\n+      42010.10410891291,\n+      42651.540495091846\n+    ],\n+    [\n+      56122.361224074615,\n+      57089.753726402465\n+    ],\n+    [\n+      62868.64630176435,\n+      63679.73872479233\n+    ]\n+  ],\n+  \"4-4.G\": [\n+    [\n+      5.978303815619427,\n+      5.960335611719047\n+    ],\n+    [\n+      12.70694690317341,\n+      12.605293317064339\n+    ],\n+    [\n+      33.019248695918215,\n+      32.79138075069077\n+    ],\n+    [\n+      67.46561457055816,\n+      67.61740178632806\n+    ],\n+    [\n+      135.3910986006651,\n+      135.33711467661024\n+    ],\n+    [\n+      339.9052387077687,\n+      339.9725660841452\n+    ],\n+    [\n+      680.3537789203467,\n+      680.2149689517389\n+    ],\n+    [\n+      1362.543803457158,\n+      1363.2860086711278\n+    ],\n+    [\n+      3411.2773972837713,\n+      3416.8337231939254\n+    ],\n+    [\n+      6836.537911793607,\n+      6860.8852437411915\n+    ],\n+    [\n+      13734.476629683295,\n+      13833.206689262115\n+    ],\n+    [\n+      34632.18383777244,\n+      35209.17102256333\n+    ],\n+    [\n+      41645.01863854289,\n+      42426.693215886175\n+    ],\n+    [\n+      55669.98848171354,\n+      56860.99028094126\n+    ],\n+    [\n+      62541.12114640081,\n+      63789.652353501086\n+    ]\n+  ],\n+  \"4-4.H\": [\n+    [\n+      6.298144554892471,\n+      6.419498672644536\n+    ],\n+    [\n+      13.333161255172985,\n+      13.467838595095824\n+    ],\n+    [\n+      34.58336799323907,\n+      34.90768235169189\n+    ],\n+    [\n+      69.44983742854109,\n+      69.53398159166804\n+    ],\n+    [\n+      139.64529821664982,\n+      139.71738179314144\n+    ],\n+    [\n+      349.8960130768139,\n+      349.5966473780195\n+    ],\n+    [\n+      701.6535951795422,\n+      702.0745108051798\n+    ],\n+    [\n+      1403.4845489495015,\n+      1403.661594767426\n+    ],\n+    [\n+      3515.2931036790983,\n+      3521.0644131776085\n+    ],\n+    [\n+      7043.378404476961,\n+      7066.931136413314\n+    ],\n+    [\n+      14141.466210376306,\n+      14230.842983018088\n+    ],\n+    [\n+      35529.08053389992,\n+      35960.44809227362\n+    ],\n+    [\n+      42679.80345598855,\n+      43243.316857999744\n+    ],\n+    [\n+      56976.646588213196,\n+      57799.89374635452\n+    ],\n+    [\n+      62762.95556833808,\n+      62342.87097330261\n+    ]\n+  ],\n+  \"4-5.E\": [\n+    [\n+      5.911836036480531,\n+      5.993305676350496\n+    ],\n+    [\n+      12.478617913867708,\n+      12.500011623359653\n+    ],\n+    [\n+      32.27368712567962,\n+      32.212869657298306\n+    ],\n+    [\n+      65.45927738810562,\n+      65.45500310097044\n+    ],\n+    [\n+      131.5717518005076,\n+      131.42225662465168\n+    ],\n+    [\n+      330.5142138985442,\n+      330.53340431360635\n+    ],\n+    [\n+      661.8003353379977,\n+      661.8163087451151\n+    ],\n+    [\n+      1325.9595742336667,\n+      1327.5580353584419\n+    ],\n+    [\n+      3322.688075692575,\n+      3333.310990809263\n+    ],\n+    [\n+      6665.796913815999,\n+      6706.852808123229\n+    ],\n+    [\n+      13410.453375245657,\n+      13563.827799039169\n+    ],\n+    [\n+      33879.75195762543,\n+      34648.41758601773\n+    ],\n+    [\n+      40758.04523677584,\n+      41787.52728400954\n+    ],\n+    [\n+      54543.43602414197,\n+      56125.99585440909\n+    ],\n+    [\n+      61373.623568033465,\n+      63166.87008756519\n+    ]\n+  ],\n+  \"4-5.F\": [\n+    [\n+      5.981930512700408,\n+      5.992914004135687\n+    ],\n+    [\n+      12.714326680006057,\n+      12.673536644381933\n+    ],\n+    [\n+      32.89923071470429,\n+      32.6916908019622\n+    ],\n+    [\n+      66.93165142023308,\n+      66.83395560500544\n+    ],\n+    [\n+      134.79255759980265,\n+      134.7128685543193\n+    ],\n+    [\n+      338.34496597883975,\n+      338.28922349812467\n+    ],\n+    [\n+      677.5303615167313,\n+      677.4459845566618\n+    ],\n+    [\n+      1357.0848847826028,\n+      1358.127758694289\n+    ],\n+    [\n+      3399.593095055278,\n+      3407.879389150031\n+    ],\n+    [\n+      6818.207381433972,\n+      6853.125465653196\n+    ],\n+    [\n+      13710.342132204227,\n+      13845.692404031568\n+    ],\n+    [\n+      34593.8721438582,\n+      35280.51882569216\n+    ],\n+    [\n+      41599.71951939689,\n+      42514.24143756077\n+    ],\n+    [\n+      55629.11348031345,\n+      57018.65932804761\n+    ],\n+    [\n+      62572.18311238456,\n+      64124.21966901576\n+    ]\n+  ],\n+  \"4-5.G\": [\n+    [\n+      5.834753049289876,\n+      5.968068519848959\n+    ],\n+    [\n+      12.517299789662816,\n+      12.85777802209292\n+    ],\n+    [\n+      32.17250147991723,\n+      32.72420308693848\n+    ],\n+    [\n+      64.02943806041466,\n+      64.021668558545\n+    ],\n+    [\n+      128.93961423439762,\n+      129.0278654789842\n+    ],\n+    [\n+      323.04952996355655,\n+      322.8051649512773\n+    ],\n+    [\n+      647.9345839892003,\n+      648.5045025708346\n+    ],\n+    [\n+      1296.9010655808356,\n+      1298.2962916870144\n+    ],\n+    [\n+      3252.70621753347,\n+      3265.528977841037\n+    ],\n+    [\n+      6533.982946506087,\n+      6587.7602658434425\n+    ],\n+    [\n+      13172.373169670876,\n+      13377.670916400299\n+    ],\n+    [\n+      33485.202596304225,\n+      34599.99183611609\n+    ],\n+    [\n+      40332.84748760874,\n+      41831.64288413963\n+    ],\n+    [\n+      54065.01332159866,\n+      56374.003180426276\n+    ],\n+    [\n+      60903.24654195793,\n+      63587.813146583365\n+    ]\n+  ],\n+  \"4-5.H\": [\n+    [\n+      6.079131699624906,\n+      6.286412660248979\n+    ],\n+    [\n+      12.709665516336809,\n+      12.86304530647185\n+    ],\n+    [\n+      32.95389697173806,\n+      33.31531468221153\n+    ],\n+    [\n+      65.85073900344504,\n+      65.7082430294128\n+    ],\n+    [\n+      132.892463971012,\n+      132.99717852573508\n+    ],\n+    [\n+      332.9211415668301,\n+      332.67176217254286\n+    ],\n+    [\n+      667.4763581234936,\n+      667.8107239861935\n+    ],\n+    [\n+      1336.3271511503985,\n+      1337.5703946513368\n+    ],\n+    [\n+      3349.783784525495,\n+      3360.689233187261\n+    ],\n+    [\n+      6723.057321677115,\n+      6767.78201314545\n+    ],\n+    [\n+      13533.077277252538,\n+      13701.05006862665\n+    ],\n+    [\n+      34227.05149540294,\n+      35078.42224663117\n+    ],\n+    [\n+      41186.14469495561,\n+      42327.281379447144\n+    ],\n+    [\n+      55129.1725166104,\n+      56877.45232042102\n+    ],\n+    [\n+      62053.19029585953,\n+      64054.872461401996\n+    ]\n+  ],\n+  \"4-6.E\": [\n+    [\n+      6.049357741723875,\n+      6.093806686135572\n+    ],\n+    [\n+      12.787490278069736,\n+      12.74666419382334\n+    ],\n+    [\n+      33.24522422454736,\n+      33.19244530061151\n+    ],\n+    [\n+      67.2714515621088,\n+      67.1290499618211\n+    ],\n+    [\n+      135.4906125042144,\n+      135.33511210060234\n+    ],\n+    [\n+      340.0959951396842,\n+      339.84945582750987\n+    ],\n+    [\n+      681.6183166900146,\n+      681.7332450566274\n+    ],\n+    [\n+      1364.187797251602,\n+      1364.5508946269922\n+    ],\n+    [\n+      3418.0390926059954,\n+      3425.3046845936133\n+    ],\n+    [\n+      6854.110481439201,\n+      6885.972586943037\n+    ],\n+    [\n+      13774.408117752688,\n+      13895.370398486759\n+    ],\n+    [\n+      34716.03232035227,\n+      35327.39365813657\n+    ],\n+    [\n+      41738.79550364813,\n+      42554.772420133806\n+    ],\n+    [\n+      55797.60404612278,\n+      57037.258581633156\n+    ],\n+    [\n+      62591.72761166252,\n+      63798.16305234769\n+    ]\n+  ],\n+  \"4-6.F\": [\n+    [\n+      6.047961591460838,\n+      6.111755536287617\n+    ],\n+    [\n+      12.767213122811533,\n+      12.749581131447602\n+    ],\n+    [\n+      33.08021378502459,\n+      32.9757832374291\n+    ],\n+    [\n+      67.11990711615704,\n+      67.05472503522266\n+    ],\n+    [\n+      135.13922163094782,\n+      135.0929515377115\n+    ],\n+    [\n+      339.16122121050125,\n+      339.13585904032664\n+    ],\n+    [\n+      679.1674672662871,\n+      679.1465621670083\n+    ],\n+    [\n+      1360.0387974607045,\n+      1360.8861740810319\n+    ],\n+    [\n+      3405.859831727515,\n+      3412.530077141534\n+    ],\n+    [\n+      6826.599691847084,\n+      6854.089184135097\n+    ],\n+    [\n+      13715.708061947798,\n+      13824.603758742402\n+    ],\n+    [\n+      34535.67384892309,\n+      35080.44447631393\n+    ],\n+    [\n+      41507.38311539468,\n+      42227.65303534703\n+    ],\n+    [\n+      55452.433656281726,\n+      56525.77859763094\n+    ],\n+    [\n+      62360.78608232053,\n+      63544.102158457805\n+    ]\n+  ],\n+  \"4-6.G\": [\n+    [\n+      5.910798116666799,\n+      6.059531531430117\n+    ],\n+    [\n+      12.501433532799075,\n+      12.688848278153953\n+    ],\n+    [\n+      31.941030164381292,\n+      31.9120874800776\n+    ],\n+    [\n+      64.84057640858839,\n+      64.95600366146088\n+    ],\n+    [\n+      130.14357194295363,\n+      130.0511449578938\n+    ],\n+    [\n+      326.75996245925,\n+      326.75171727393143\n+    ],\n+    [\n+      654.4914998753661,\n+      654.6612719979969\n+    ],\n+    [\n+      1310.8251767995437,\n+      1312.2229428517119\n+    ],\n+    [\n+      3284.3855753271464,\n+      3294.0492664608287\n+    ],\n+    [\n+      6590.889342827469,\n+      6631.744551457847\n+    ],\n+    [\n+      13268.694005525618,\n+      13429.606856958824\n+    ],\n+    [\n+      33616.01656311303,\n+      34500.11862917764\n+    ],\n+    [\n+      40469.90915844967,\n+      41668.66320533341\n+    ],\n+    [\n+      54207.618183898645,\n+      56069.26375772921\n+    ],\n+    [\n+      61060.065134622346,\n+      63236.159132202556\n+    ]\n+  ],\n+  \"4-6.H\": [\n+    [\n+      6.012508269434097,\n+      6.079892704010277\n+    ],\n+    [\n+      12.747946114586933,\n+      12.79442446637603\n+    ],\n+    [\n+      33.66793119622407,\n+      34.38175034147509\n+    ],\n+    [\n+      67.08490918958164,\n+      67.42376197211219\n+    ],\n+    [\n+      134.5173683079584,\n+      134.72965707100812\n+    ],\n+    [\n+      337.25972675862613,\n+      337.5412978083021\n+    ],\n+    [\n+      675.0137249844483,\n+      675.2608639682189\n+    ],\n+    [\n+      1351.409207773605,\n+      1352.476008842332\n+    ],\n+    [\n+      3384.252411430325,\n+      3391.447173135795\n+    ],\n+    [\n+      6785.360017891651,\n+      6815.901165334042\n+    ],\n+    [\n+      13638.338133638337,\n+      13757.369851777907\n+    ],\n+    [\n+      34372.03631418384,\n+      34976.50080675114\n+    ],\n+    [\n+      41322.71538322749,\n+      42127.00237660268\n+    ],\n+    [\n+      55236.92951058514,\n+      56454.81721522914\n+    ],\n+    [\n+      62126.94084016793,\n+      63481.71342787284\n+    ]\n+  ],\n+  \"5-1.E\": [\n+    [\n+      5.9890221746015015,\n+      6.176429211408633\n+    ],\n+    [\n+      12.521611737262258,\n+      12.638684356334226\n+    ],\n+    [\n+      32.227630752939106,\n+      32.254696748990014\n+    ],\n+    [\n+      65.27879013682266,\n+      65.36549978772167\n+    ],\n+    [\n+      131.14658328143372,\n+      131.1177613081427\n+    ],\n+    [\n+      329.2210596271462,\n+      329.31707512503436\n+    ],\n+    [\n+      659.1518851706584,\n+      659.2626241240105\n+    ],\n+    [\n+      1320.2496742445712,\n+      1321.6274345577033\n+    ],\n+    [\n+      3307.726611674396,\n+      3317.1099091984324\n+    ],\n+    [\n+      6636.4141627032695,\n+      6675.52675506844\n+    ],\n+    [\n+      13352.294199717655,\n+      13503.20417190326\n+    ],\n+    [\n+      33751.82250613009,\n+      34530.38147962919\n+    ],\n+    [\n+      40602.70497035943,\n+      41642.21984094285\n+    ],\n+    [\n+      54325.554345695535,\n+      55910.241089383395\n+    ],\n+    [\n+      61154.963069999234,\n+      62978.62907879056\n+    ]\n+  ],\n+  \"5-1.F\": [\n+    [\n+      5.931684704343836,\n+      5.960543926863978\n+    ],\n+    [\n+      12.613326076204666,\n+      12.616671561689802\n+    ],\n+    [\n+      32.65648589781076,\n+      32.58211361907965\n+    ],\n+    [\n+      65.9386055260013,\n+      65.61272269748572\n+    ],\n+    [\n+      133.28278888935853,\n+      133.22933429323706\n+    ],\n+    [\n+      334.2400704408109,\n+      333.933670606081\n+    ],\n+    [\n+      669.9522889855326,\n+      670.0070285614876\n+    ],\n+    [\n+      1341.2342407466515,\n+      1341.8696235287796\n+    ],\n+    [\n+      3360.402835482117,\n+      3368.1194265292374\n+    ],\n+    [\n+      6739.539766578327,\n+      6773.033264297739\n+    ],\n+    [\n+      13548.029225863509,\n+      13676.88208528268\n+    ],\n+    [\n+      34171.46607746431,\n+      34820.76381970327\n+    ],\n+    [\n+      41085.30184973424,\n+      41947.01410049268\n+    ],\n+    [\n+      54918.78026503255,\n+      56211.98842071224\n+    ],\n+    [\n+      61807.78952453595,\n+      63287.85262348972\n+    ]\n+  ],\n+  \"5-1.G\": [\n+    [\n+      5.932940360787982,\n+      6.062381338606027\n+    ],\n+    [\n+      12.451789457331222,\n+      12.500362232609316\n+    ],\n+    [\n+      32.175574510930645,\n+      32.156330584179116\n+    ],\n+    [\n+      64.90306288325453,\n+      64.62676794933067\n+    ],\n+    [\n+      131.26237065249225,\n+      131.37287703469488\n+    ],\n+    [\n+      328.93006384690784,\n+      328.79395998063427\n+    ],\n+    [\n+      658.9964645469894,\n+      659.0696099695322\n+    ],\n+    [\n+      1318.911856849396,\n+      1319.1862371471486\n+    ],\n+    [\n+      3305.0028245262133,\n+      3312.241364484264\n+    ],\n+    [\n+      6630.926359072113,\n+      6665.682860707814\n+    ],\n+    [\n+      13340.386587405554,\n+      13481.131979670414\n+    ],\n+    [\n+      33724.05465746217,\n+      34479.753135783016\n+    ],\n+    [\n+      40580.13332316909,\n+      41603.3723993145\n+    ],\n+    [\n+      54320.12374375083,\n+      55909.060246973306\n+    ],\n+    [\n+      61184.00486634302,\n+      63049.732340195\n+    ]\n+  ],\n+  \"5-1.H\": [\n+    [\n+      5.860429794090266,\n+      5.847649277108062\n+    ],\n+    [\n+      12.613940674079968,\n+      12.681765697148228\n+    ],\n+    [\n+      32.538803098588225,\n+      32.51143272204062\n+    ],\n+    [\n+      65.66488921406416,\n+      65.3984688299943\n+    ],\n+    [\n+      132.54776345295707,\n+      132.43083834988198\n+    ],\n+    [\n+      332.7599396256996,\n+      332.6579157736604\n+    ],\n+    [\n+      666.5183413095475,\n+      666.5126912244338\n+    ],\n+    [\n+      1335.243823478094,\n+      1336.6411228744043\n+    ],\n+    [\n+      3345.4829875843106,\n+      3355.174051656827\n+    ],\n+    [\n+      6711.854482081893,\n+      6751.501957586823\n+    ],\n+    [\n+      13502.058428380673,\n+      13651.819063655948\n+    ],\n+    [\n+      34107.30973546487,\n+      34865.71737146797\n+    ],\n+    [\n+      41027.41012258836,\n+      42040.59936364504\n+    ],\n+    [\n+      54891.3541233418,\n+      56440.08728515161\n+    ],\n+    [\n+      61758.43791747515,\n+      63506.64168941497\n+    ]\n+  ],\n+  \"5-2.E\": [\n+    [\n+      5.910788396379201,\n+      5.967205311931021\n+    ],\n+    [\n+      12.464261126167912,\n+      12.421356010621935\n+    ],\n+    [\n+      32.49366889417769,\n+      32.522823100945686\n+    ],\n+    [\n+      65.69222021901152,\n+      65.65787206959874\n+    ],\n+    [\n+      132.16489151199423,\n+      132.07916130197643\n+    ],\n+    [\n+      331.6711802077233,\n+      331.5194669928401\n+    ],\n+    [\n+      664.5346908741337,\n+      664.625963887131\n+    ],\n+    [\n+      1330.3135944099415,\n+      1330.9431210968205\n+    ],\n+    [\n+      3333.9134493737142,\n+      3342.4415365855093\n+    ],\n+    [\n+      6688.322531127686,\n+      6725.235924977629\n+    ],\n+    [\n+      13453.778097827162,\n+      13598.420935093536\n+    ],\n+    [\n+      33992.88715061047,\n+      34740.61919250963\n+    ],\n+    [\n+      40887.33542454868,\n+      41884.76530698523\n+    ],\n+    [\n+      54692.839458831986,\n+      56208.04811165474\n+    ],\n+    [\n+      61551.40063005539,\n+      63279.08584206924\n+    ]\n+  ],\n+  \"5-2.F\": [\n+    [\n+      6.203760480019327,\n+      6.438461786339764\n+    ],\n+    [\n+      12.905381937834147,\n+      13.042762252510727\n+    ],\n+    [\n+      33.22980598047411,\n+      33.314881176628404\n+    ],\n+    [\n+      67.08446042697517,\n+      67.06481135998318\n+    ],\n+    [\n+      135.07091699260866,\n+      135.11940170681007\n+    ],\n+    [\n+      338.6007179661507,\n+      338.4240625428159\n+    ],\n+    [\n+      678.6360904974455,\n+      678.9031356569823\n+    ],\n+    [\n+      1358.8215247334729,\n+      1360.0917157661218\n+    ],\n+    [\n+      3403.925643031686,\n+      3412.7716371211113\n+    ],\n+    [\n+      6826.022852146832,\n+      6861.206750266549\n+    ],\n+    [\n+      13717.15546217339,\n+      13845.445221020982\n+    ],\n+    [\n+      34563.84786006928,\n+      35180.13822464402\n+    ],\n+    [\n+      41544.076406374385,\n+      42353.43189393091\n+    ],\n+    [\n+      55500.44143849444,\n+      56692.07580065344\n+    ],\n+    [\n+      62443.10320946183,\n+      63788.91195705049\n+    ]\n+  ],\n+  \"5-2.G\": [\n+    [\n+      5.961715800958227,\n+      6.134092736861522\n+    ],\n+    [\n+      12.409389400210232,\n+      12.441260961625781\n+    ],\n+    [\n+      32.2134226519999,\n+      32.29922632171816\n+    ],\n+    [\n+      65.0444729292051,\n+      65.04401834762865\n+    ],\n+    [\n+      131.014438087522,\n+      131.1499274491236\n+    ],\n+    [\n+      327.9850038835249,\n+      327.58890219657826\n+    ],\n+    [\n+      657.8463379081974,\n+      658.1404045114382\n+    ],\n+    [\n+      1316.3254253618977,\n+      1316.7569530774265\n+    ],\n+    [\n+      3299.062314112414,\n+      3307.2258800727554\n+    ],\n+    [\n+      6619.406507028822,\n+      6656.391482133373\n+    ],\n+    [\n+      13320.788311126178,\n+      13469.746894231619\n+    ],\n+    [\n+      33718.038575630235,\n+      34539.31330212549\n+    ],\n+    [\n+      40580.76157982035,\n+      41691.401754060425\n+    ],\n+    [\n+      54328.17474309902,\n+      56042.23328478875\n+    ],\n+    [\n+      61183.824950729104,\n+      63180.81253135498\n+    ]\n+  ],\n+  \"5-2.H\": [\n+    [\n+      5.526865212869443,\n+      5.273212738874953\n+    ],\n+    [\n+      12.227917503870735,\n+      12.083098646961606\n+    ],\n+    [\n+      32.02095105679648,\n+      31.92247667815898\n+    ],\n+    [\n+      65.21823054328641,\n+      65.40852202374914\n+    ],\n+    [\n+      130.71781419546468,\n+      130.58973440682382\n+    ],\n+    [\n+      328.6250136969033,\n+      328.9517392601367\n+    ],\n+    [\n+      657.0963203833314,\n+      656.8065090921764\n+    ],\n+    [\n+      1316.3310515691578,\n+      1317.1009998743305\n+    ],\n+    [\n+      3297.3585057491996,\n+      3304.6456949906133\n+    ],\n+    [\n+      6613.802468387306,\n+      6646.804994230705\n+    ],\n+    [\n+      13304.75425853117,\n+      13440.576392117466\n+    ],\n+    [\n+      33599.764342431976,\n+      34306.096263341824\n+    ],\n+    [\n+      40413.88754604765,\n+      41359.67475764965\n+    ],\n+    [\n+      54065.85759185456,\n+      55516.380524526125\n+    ],\n+    [\n+      60850.572851047276,\n+      62510.22298610153\n+    ]\n+  ],\n+  \"5-3.E\": [\n+    [\n+      5.685400430174756,\n+      5.766339080664648\n+    ],\n+    [\n+      12.124088361075701,\n+      12.275297362684292\n+    ],\n+    [\n+      31.164816276641492,\n+      31.247680220235658\n+    ],\n+    [\n+      63.02307077764311,\n+      63.11839512707726\n+    ],\n+    [\n+      126.53622695832371,\n+      126.45318143104443\n+    ],\n+    [\n+      317.60918484118514,\n+      317.52474335331055\n+    ],\n+    [\n+      636.3580208456003,\n+      636.5652653517693\n+    ],\n+    [\n+      1274.8817953903258,\n+      1276.7009490038297\n+    ],\n+    [\n+      3198.800825329855,\n+      3213.863893228653\n+    ],\n+    [\n+      6430.096125074416,\n+      6492.4100781871175\n+    ],\n+    [\n+      12978.071353973686,\n+      13217.009600712878\n+    ],\n+    [\n+      33021.576016626765,\n+      34241.67081168129\n+    ],\n+    [\n+      39790.12951618164,\n+      41431.1585628329\n+    ],\n+    [\n+      53387.69495384901,\n+      55939.4004083146\n+    ],\n+    [\n+      60181.121788149205,\n+      63183.368887388926\n+    ]\n+  ],\n+  \"5-3.F\": [\n+    [\n+      5.853610322543006,\n+      6.10885761759841\n+    ],\n+    [\n+      12.117511805907412,\n+      12.254485017252474\n+    ],\n+    [\n+      31.10607026156521,\n+      31.11094930954157\n+    ],\n+    [\n+      62.89651492743931,\n+      62.8267099828771\n+    ],\n+    [\n+      126.59446154939327,\n+      126.49219744213943\n+    ],\n+    [\n+      317.74579144345626,\n+      317.60359363885\n+    ],\n+    [\n+      636.8078198773496,\n+      637.0756330389407\n+    ],\n+    [\n+      1275.722028074919,\n+      1277.6025721124035\n+    ],\n+    [\n+      3199.238365964505,\n+      3212.7771823295966\n+    ],\n+    [\n+      6425.707276424613,\n+      6479.5853321308\n+    ],\n+    [\n+      12950.099339156925,\n+      13152.115189033004\n+    ],\n+    [\n+      32857.553970365334,\n+      33881.617880643775\n+    ],\n+    [\n+      39565.06983881137,\n+      40938.74943780981\n+    ],\n+    [\n+      53019.04299746303,\n+      55135.78490603558\n+    ],\n+    [\n+      59703.602866387155,\n+      62146.63622233621\n+    ]\n+  ],\n+  \"5-3.G\": [\n+    [\n+      5.700338585848197,\n+      5.633050950573837\n+    ],\n+    [\n+      12.182221344354295,\n+      12.043455763247133\n+    ],\n+    [\n+      31.770067633945526,\n+      31.556529314073554\n+    ],\n+    [\n+      64.35399047230462,\n+      63.95464681395257\n+    ],\n+    [\n+      129.87265814107593,\n+      129.4493194992046\n+    ],\n+    [\n+      326.6031412334503,\n+      326.28453954289256\n+    ],\n+    [\n+      654.488628558591,\n+      654.3474536993101\n+    ],\n+    [\n+      1311.0823066648768,\n+      1312.1200404749338\n+    ],\n+    [\n+      3286.9796920796575,\n+      3297.7022247860727\n+    ],\n+    [\n+      6597.808094111372,\n+      6642.547750376725\n+    ],\n+    [\n+      13285.778406673453,\n+      13459.003372000334\n+    ],\n+    [\n+      33651.432214457134,\n+      34556.581460086265\n+    ],\n+    [\n+      40507.80356159129,\n+      41727.08789075914\n+    ],\n+    [\n+      54254.72705081886,\n+      56140.32804342512\n+    ],\n+    [\n+      61080.40199886308,\n+      63248.5113143851\n+    ]\n+  ],\n+  \"5-3.H\": [\n+    [\n+      5.620172435402193,\n+      5.326229321620088\n+    ],\n+    [\n+      12.366682436311681,\n+      12.072098555325855\n+    ],\n+    [\n+      32.655723649348666,\n+      32.43021165212521\n+    ],\n+    [\n+      66.5216553005789,\n+      66.46996369884047\n+    ],\n+    [\n+      133.49995997625433,\n+      133.0469089838178\n+    ],\n+    [\n+      336.07193480690046,\n+      336.0458056114443\n+    ],\n+    [\n+      672.6434843554667,\n+      672.2832501753837\n+    ],\n+    [\n+      1348.3551885261818,\n+      1349.8965343809705\n+    ],\n+    [\n+      3378.5466852282275,\n+      3388.8742178386883\n+    ],\n+    [\n+      6780.572374016925,\n+      6824.113531087059\n+    ],\n+    [\n+      13650.731100247072,\n+      13820.552653572277\n+    ],\n+    [\n+      34513.66739143753,\n+      35357.7069557844\n+    ],\n+    [\n+      41518.37250918586,\n+      42638.26592046105\n+    ],\n+    [\n+      55535.74749389164,\n+      57216.75571831663\n+    ],\n+    [\n+      62487.13757405453,\n+      64388.15809031896\n+    ]\n+  ],\n+  \"5-4.E\": [\n+    [\n+      5.720495121869298,\n+      5.7083104938586775\n+    ],\n+    [\n+      12.226912061501144,\n+      12.207583426851981\n+    ],\n+    [\n+      31.94116806881255,\n+      32.09611854347413\n+    ],\n+    [\n+      64.45707571680153,\n+      64.55952292309043\n+    ],\n+    [\n+      129.46391293793462,\n+      129.43738936745916\n+    ],\n+    [\n+      324.7451081818708,\n+      324.5928810896447\n+    ],\n+    [\n+      650.7139362916329,\n+      650.8522288540879\n+    ],\n+    [\n+      1303.732620140123,\n+      1305.535524024596\n+    ],\n+    [\n+      3270.1146359757595,\n+      3284.288686934218\n+    ],\n+    [\n+      6569.257835637694,\n+      6626.220990184272\n+    ],\n+    [\n+      13258.558184107504,\n+      13479.625120347946\n+    ],\n+    [\n+      33665.700997502296,\n+      34801.420061971025\n+    ],\n+    [\n+      40545.003438740685,\n+      42064.26873799147\n+    ],\n+    [\n+      54341.75075279493,\n+      56671.53897800371\n+    ],\n+    [\n+      61202.15088635427,\n+      63896.61906525119\n+    ]\n+  ],\n+  \"5-4.F\": [\n+    [\n+      5.817964694789643,\n+      5.773508521995369\n+    ],\n+    [\n+      12.526824805942805,\n+      12.52954875712179\n+    ],\n+    [\n+      32.38162555913495,\n+      32.25562936429026\n+    ],\n+    [\n+      65.66052755118346,\n+      65.5066138175289\n+    ],\n+    [\n+      132.1930451819691,\n+      131.9583269417709\n+    ],\n+    [\n+      332.09673587053356,\n+      331.92523301453804\n+    ],\n+    [\n+      665.3309096215121,\n+      665.3265895056679\n+    ],\n+    [\n+      1332.7075470609716,\n+      1333.947211552447\n+    ],\n+    [\n+      3340.736894430952,\n+      3351.638850381663\n+    ],\n+    [\n+      6705.279573931899,\n+      6750.320302748485\n+    ],\n+    [\n+      13505.84696255593,\n+      13677.167908495432\n+    ],\n+    [\n+      34141.827811893476,\n+      34998.74542761637\n+    ],\n+    [\n+      41076.6784647737,\n+      42216.92498668099\n+    ],\n+    [\n+      54961.77960156747,\n+      56686.10623167006\n+    ],\n+    [\n+      61853.90635002106,\n+      63816.954267271554\n+    ]\n+  ],\n+  \"5-4.G\": [\n+    [\n+      5.639383523957998,\n+      5.63464802255318\n+    ],\n+    [\n+      12.041997481909675,\n+      12.02697391677754\n+    ],\n+    [\n+      31.336347083634028,\n+      31.376958731521622\n+    ],\n+    [\n+      63.30690290296258,\n+      63.25348112079269\n+    ],\n+    [\n+      127.42917872632295,\n+      127.36885261489428\n+    ],\n+    [\n+      319.7537308527897,\n+      319.63047306136514\n+    ],\n+    [\n+      640.5807876247025,\n+      640.6387143325084\n+    ],\n+    [\n+      1283.354587632653,\n+      1284.8964994900994\n+    ],\n+    [\n+      3217.498211857914,\n+      3229.350465250394\n+    ],\n+    [\n+      6459.895323276283,\n+      6507.998485623248\n+    ],\n+    [\n+      13019.769365632314,\n+      13202.486834463873\n+    ],\n+    [\n+      32953.76392275646,\n+      33868.41521556179\n+    ],\n+    [\n+      39661.08870243775,\n+      40881.90310472531\n+    ],\n+    [\n+      53105.52827512948,\n+      54971.85628478939\n+    ],\n+    [\n+      59818.03248117468,\n+      61997.180407931985\n+    ]\n+  ],\n+  \"5-4.H\": [\n+    [\n+      5.883633923483181,\n+      5.9954128282164065\n+    ],\n+    [\n+      12.43337658938094,\n+      12.533193857296544\n+    ],\n+    [\n+      31.93474741129548,\n+      31.854101229020976\n+    ],\n+    [\n+      64.93815339600141,\n+      65.05885897957964\n+    ],\n+    [\n+      130.65047832005672,\n+      130.87953778356265\n+    ],\n+    [\n+      327.3171663026959,\n+      327.40007768088\n+    ],\n+    [\n+      655.307894787285,\n+      655.3607657735222\n+    ],\n+    [\n+      1312.363602210688,\n+      1313.43154039443\n+    ],\n+    [\n+      3287.8735587248825,\n+      3296.347907205369\n+    ],\n+    [\n+      6597.2942392023515,\n+      6635.176288537115\n+    ],\n+    [\n+      13286.553626224362,\n+      13438.466467427546\n+    ],\n+    [\n+      33558.55709115871,\n+      34333.30866379277\n+    ],\n+    [\n+      40368.893568959786,\n+      41401.85601021161\n+    ],\n+    [\n+      54008.16080861544,\n+      55578.13738158627\n+    ],\n+    [\n+      60782.07993703067,\n+      62572.43861854628\n+    ]\n+  ],\n+  \"5-5.E\": [\n+    [\n+      5.952929090788472,\n+      6.307567270248719\n+    ],\n+    [\n+      12.269655212469067,\n+      12.54356442771533\n+    ],\n+    [\n+      31.151152956993414,\n+      31.150089691472008\n+    ],\n+    [\n+      63.04460672175763,\n+      63.019524004189385\n+    ],\n+    [\n+      127.14844369689327,\n+      127.39268992959985\n+    ],\n+    [\n+      318.533438615753,\n+      318.6573487907353\n+    ],\n+    [\n+      637.7740714768818,\n+      637.9637792143982\n+    ],\n+    [\n+      1276.5227676657344,\n+      1277.111699705373\n+    ],\n+    [\n+      3198.7982969625614,\n+      3206.6326135966165\n+    ],\n+    [\n+      6418.7231350012735,\n+      6454.917714879907\n+    ],\n+    [\n+      12918.920283584686,\n+      13065.879196788195\n+    ],\n+    [\n+      32668.04407274774,\n+      33437.055875594444\n+    ],\n+    [\n+      39304.60057390407,\n+      40335.324768125916\n+    ],\n+    [\n+      52604.544479602366,\n+      54188.1602211464\n+    ],\n+    [\n+      59214.69875909029,\n+      61032.85426467795\n+    ]\n+  ],\n+  \"5-5.F\": [\n+    [\n+      5.743001745948683,\n+      5.79995396257083\n+    ],\n+    [\n+      12.294724224904032,\n+      12.443427113719512\n+    ],\n+    [\n+      31.885076133390026,\n+      32.24275514048116\n+    ],\n+    [\n+      64.02850555473539,\n+      64.2202729522878\n+    ],\n+    [\n+      128.54688603030885,\n+      128.64464391651057\n+    ],\n+    [\n+      322.3881229518029,\n+      322.49138958707283\n+    ],\n+    [\n+      645.5518571799871,\n+      645.7594214606437\n+    ],\n+    [\n+      1292.6969631753743,\n+      1293.9318047206152\n+    ],\n+    [\n+      3239.1875802637173,\n+      3248.5822559491944\n+    ],\n+    [\n+      6497.189643364284,\n+      6534.173894761488\n+    ],\n+    [\n+      13062.644657248271,\n+      13198.577032993324\n+    ],\n+    [\n+      32962.10288769881,\n+      33632.392611702395\n+    ],\n+    [\n+      39636.06775991092,\n+      40525.28573817864\n+    ],\n+    [\n+      52992.538973649935,\n+      54329.22514779325\n+    ],\n+    [\n+      59643.42677733675,\n+      61175.28270501811\n+    ]\n+  ],\n+  \"5-5.G\": [\n+    [\n+      5.927365321401817,\n+      6.098158571052978\n+    ],\n+    [\n+      12.430360278148532,\n+      12.554474267353875\n+    ],\n+    [\n+      31.99117392174985,\n+      32.036587983056656\n+    ],\n+    [\n+      64.45122375486515,\n+      64.22682086890245\n+    ],\n+    [\n+      130.1218889062282,\n+      130.10619612666218\n+    ],\n+    [\n+      326.40811813065886,\n+      326.2951609121153\n+    ],\n+    [\n+      653.9720193289924,\n+      654.1170797127384\n+    ],\n+    [\n+      1309.462151794635,\n+      1310.4863596186676\n+    ],\n+    [\n+      3280.494393794143,\n+      3288.7354829137466\n+    ],\n+    [\n+      6578.579224742487,\n+      6611.994649493848\n+    ],\n+    [\n+      13223.956633314534,\n+      13350.310877454844\n+    ],\n+    [\n+      33349.52969958934,\n+      33980.99130081909\n+    ],\n+    [\n+      40101.68152195013,\n+      40944.80452528178\n+    ],\n+    [\n+      53622.91592319455,\n+      54907.74168573288\n+    ],\n+    [\n+      60366.2835447857,\n+      61854.081455418505\n+    ]\n+  ],\n+  \"5-5.H\": [\n+    [\n+      5.8624852143163695,\n+      6.006863111131283\n+    ],\n+    [\n+      12.336121035528462,\n+      12.45079930622533\n+    ],\n+    [\n+      31.707599085195017,\n+      31.689946763666693\n+    ],\n+    [\n+      64.49615579846154,\n+      64.76354913249862\n+    ],\n+    [\n+      129.5838280817255,\n+      129.92949887797687\n+    ],\n+    [\n+      324.405860624415,\n+      324.5450605482088\n+    ],\n+    [\n+      649.4056043049437,\n+      649.4984370805378\n+    ],\n+    [\n+      1299.56169804436,\n+      1299.7185014214456\n+    ],\n+    [\n+      3254.179770964936,\n+      3258.6845177012847\n+    ],\n+    [\n+      6524.68945017408,\n+      6549.329756674886\n+    ],\n+    [\n+      13114.690890551168,\n+      13221.734840956547\n+    ],\n+    [\n+      33063.00154730521,\n+      33631.79616972929\n+    ],\n+    [\n+      39752.00485628164,\n+      40513.57793969097\n+    ],\n+    [\n+      53137.78757403275,\n+      54293.589683039514\n+    ],\n+    [\n+      59792.781808752894,\n+      61106.28656747502\n+    ]\n+  ],\n+  \"5-6.E\": [\n+    [\n+      5.803731113497014,\n+      5.90742883792178\n+    ],\n+    [\n+      12.267599240633121,\n+      12.355458514895467\n+    ],\n+    [\n+      31.91809731850127,\n+      32.223187611145896\n+    ],\n+    [\n+      64.25588846486943,\n+      64.5042848256651\n+    ],\n+    [\n+      128.92215081911024,\n+      129.05087537659065\n+    ],\n+    [\n+      323.4465258940094,\n+      323.7444411488735\n+    ],\n+    [\n+      647.1807623801795,\n+      647.2871152848479\n+    ],\n+    [\n+      1295.9226953042999,\n+      1296.9206472328697\n+    ],\n+    [\n+      3247.385404131129,\n+      3256.316588059094\n+    ],\n+    [\n+      6515.957956870714,\n+      6554.407376094833\n+    ],\n+    [\n+      13120.479477119772,\n+      13271.609232065644\n+    ],\n+    [\n+      33152.674509828816,\n+      33931.4457667647\n+    ],\n+    [\n+      39889.200844399966,\n+      40934.82279440194\n+    ],\n+    [\n+      53389.93167986372,\n+      54999.667981411665\n+    ],\n+    [\n+      60133.268579011485,\n+      62017.99384812554\n+    ]\n+  ],\n+  \"5-6.F\": [\n+    [\n+      5.6618806012065255,\n+      5.682588469459333\n+    ],\n+    [\n+      12.079033576274567,\n+      12.107234228570709\n+    ],\n+    [\n+      31.344255384244388,\n+      31.408795770563586\n+    ],\n+    [\n+      63.39730596339476,\n+      63.46659010271509\n+    ],\n+    [\n+      127.29040256873164,\n+      127.15634932220507\n+    ],\n+    [\n+      319.86092915567974,\n+      320.00781761560427\n+    ],\n+    [\n+      640.1850810993362,\n+      640.1735439455549\n+    ],\n+    [\n+      1282.5221238485512,\n+      1283.884053272629\n+    ],\n+    [\n+      3214.593397606816,\n+      3225.1647925318857\n+    ],\n+    [\n+      6451.355725102653,\n+      6494.111232037398\n+    ],\n+    [\n+      12994.258605889308,\n+      13157.071788421035\n+    ],\n+    [\n+      32851.656423684726,\n+      33676.01000858785\n+    ],\n+    [\n+      39530.749300039686,\n+      40634.3387600419\n+    ],\n+    [\n+      52913.30307815875,\n+      54602.42662709803\n+    ],\n+    [\n+      59530.32002351877,\n+      61433.51814510349\n+    ]\n+  ],\n+  \"5-6.G\": [\n+    [\n+      5.686477340921611,\n+      5.7518462848062715\n+    ],\n+    [\n+      12.02745072200096,\n+      12.045465629959018\n+    ],\n+    [\n+      31.079982830373844,\n+      30.987944151320406\n+    ],\n+    [\n+      63.22024425748455,\n+      63.33032997482286\n+    ],\n+    [\n+      126.88781922162902,\n+      126.78925512161791\n+    ],\n+    [\n+      318.64042086840794,\n+      318.66604182239354\n+    ],\n+    [\n+      638.0116970060056,\n+      638.0280303369393\n+    ],\n+    [\n+      1277.6541040165407,\n+      1278.552350765316\n+    ],\n+    [\n+      3201.4100811864214,\n+      3209.80229082714\n+    ],\n+    [\n+      6423.65115033886,\n+      6460.669015867995\n+    ],\n+    [\n+      12938.19008868991,\n+      13087.080696636893\n+    ],\n+    [\n+      32695.2833692107,\n+      33471.26682953219\n+    ],\n+    [\n+      39341.21542077144,\n+      40384.480727438415\n+    ],\n+    [\n+      52663.251576790644,\n+      54274.195073579795\n+    ],\n+    [\n+      59252.22686681782,\n+      61070.87738396827\n+    ]\n+  ],\n+  \"5-6.H\": [\n+    [\n+      5.678293036427221,\n+      5.731520176392591\n+    ],\n+    [\n+      12.050625427722359,\n+      12.08395705063758\n+    ],\n+    [\n+      31.25269568502624,\n+      31.3126460122998\n+    ],\n+    [\n+      63.20744227608665,\n+      63.262947638771415\n+    ],\n+    [\n+      126.80266610003932,\n+      126.53565905703391\n+    ],\n+    [\n+      318.9695734271518,\n+      319.1142110891393\n+    ],\n+    [\n+      638.4137626357203,\n+      638.4112572992155\n+    ],\n+    [\n+      1279.3386022720647,\n+      1281.0807724574688\n+    ],\n+    [\n+      3206.856842802615,\n+      3218.610251924753\n+    ],\n+    [\n+      6436.571846351156,\n+      6482.408832514532\n+    ],\n+    [\n+      12966.222849619724,\n+      13135.716820637772\n+    ],\n+    [\n+      32778.72334983194,\n+      33620.145307346924\n+    ],\n+    [\n+      39441.45959189654,\n+      40563.78680183367\n+    ],\n+    [\n+      52788.308311331275,\n+      54496.31265844021\n+    ],\n+    [\n+      59455.46611497782,\n+      61450.01025804439\n+    ]\n+  ],\n+  \"6-1.E\": [\n+    [\n+      5.792784606263703,\n+      5.768625832587099\n+    ],\n+    [\n+      12.41185109026993,\n+      12.397282501806576\n+    ],\n+    [\n+      32.180964316676224,\n+      32.10748557158744\n+    ],\n+    [\n+      65.06515348181766,\n+      64.82959275592401\n+    ],\n+    [\n+      131.361872485915,\n+      131.32826563206135\n+    ],\n+    [\n+      329.4162426713833,\n+      329.15543829861844\n+    ],\n+    [\n+      660.1399780098359,\n+      660.1331010223129\n+    ],\n+    [\n+      1321.956320450803,\n+      1322.8271563601688\n+    ],\n+    [\n+      3312.4057441237624,\n+      3320.9297504164324\n+    ],\n+    [\n+      6646.097562506747,\n+      6683.808311638276\n+    ],\n+    [\n+      13385.01615968172,\n+      13537.104032721694\n+    ],\n+    [\n+      33822.10851938449,\n+      34616.26924515868\n+    ],\n+    [\n+      40690.03834596278,\n+      41751.50351880464\n+    ],\n+    [\n+      54447.1898267948,\n+      56066.823852071524\n+    ],\n+    [\n+      61307.50581624527,\n+      63187.1934155796\n+    ]\n+  ],\n+  \"6-1.F\": [\n+    [\n+      5.880538038420829,\n+      5.812191353800385\n+    ],\n+    [\n+      12.474238554353752,\n+      12.24305053721556\n+    ],\n+    [\n+      32.77335727042202,\n+      32.558037606298114\n+    ],\n+    [\n+      66.51249621602781,\n+      66.23553339197152\n+    ],\n+    [\n+      134.29655338205572,\n+      134.20152445126845\n+    ],\n+    [\n+      336.8388495779449,\n+      336.48331528156643\n+    ],\n+    [\n+      675.103433465467,\n+      675.0069463545711\n+    ],\n+    [\n+      1352.3599728281104,\n+      1353.510639849815\n+    ],\n+    [\n+      3388.614243550271,\n+      3398.013202125849\n+    ],\n+    [\n+      6797.417883587241,\n+      6835.757825096048\n+    ],\n+    [\n+      13681.262571234412,\n+      13828.396947824085\n+    ],\n+    [\n+      34532.98869442543,\n+      35282.17932629032\n+    ],\n+    [\n+      41540.051689550746,\n+      42543.98371380538\n+    ],\n+    [\n+      55577.5385070765,\n+      57116.52791619577\n+    ],\n+    [\n+      62509.589338569596,\n+      64224.86921130757\n+    ]\n+  ],\n+  \"6-1.G\": [\n+    [\n+      5.6840744808921295,\n+      5.628672846019914\n+    ],\n+    [\n+      12.178691641509184,\n+      12.096048816753376\n+    ],\n+    [\n+      31.768285693887464,\n+      31.709151804668508\n+    ],\n+    [\n+      64.43617905712334,\n+      64.4354421415488\n+    ],\n+    [\n+      129.71791648457747,\n+      129.78017461413862\n+    ],\n+    [\n+      324.89185432123696,\n+      324.4722342210103\n+    ],\n+    [\n+      651.561980977446,\n+      651.7181089172748\n+    ],\n+    [\n+      1305.13424415995,\n+      1306.6766718933775\n+    ],\n+    [\n+      3271.600257437328,\n+      3283.083853640566\n+    ],\n+    [\n+      6566.266772845656,\n+      6611.750930894736\n+    ],\n+    [\n+      13226.977702925797,\n+      13396.33601579929\n+    ],\n+    [\n+      33438.82522736828,\n+      34290.18300027188\n+    ],\n+    [\n+      40240.54809459364,\n+      41382.10451759747\n+    ],\n+    [\n+      53878.41142155643,\n+      55638.24942227408\n+    ],\n+    [\n+      60687.05652392722,\n+      62745.530307511755\n+    ]\n+  ],\n+  \"6-1.H\": [\n+    [\n+      5.61954644012802,\n+      5.5955622164711825\n+    ],\n+    [\n+      11.963894274640078,\n+      11.872498073210881\n+    ],\n+    [\n+      31.198651109504333,\n+      31.104513537974114\n+    ],\n+    [\n+      63.49395438114552,\n+      63.63333978037342\n+    ],\n+    [\n+      127.44424637986758,\n+      127.41002623167098\n+    ],\n+    [\n+      319.57377507956886,\n+      319.29849556256534\n+    ],\n+    [\n+      640.5570392805985,\n+      640.6467801579274\n+    ],\n+    [\n+      1282.9053769691222,\n+      1284.108532172757\n+    ],\n+    [\n+      3216.265810704566,\n+      3227.15696175856\n+    ],\n+    [\n+      6456.679573982388,\n+      6502.084660579263\n+    ],\n+    [\n+      13013.038137689942,\n+      13187.24868838573\n+    ],\n+    [\n+      32920.41111240087,\n+      33802.82469225769\n+    ],\n+    [\n+      39618.11959360921,\n+      40796.906078185435\n+    ],\n+    [\n+      53041.53706266305,\n+      54844.21275817656\n+    ],\n+    [\n+      59743.34255282893,\n+      61847.81967272945\n+    ]\n+  ],\n+  \"6-2.E\": [\n+    [\n+      5.680988563151796,\n+      5.671707525509424\n+    ],\n+    [\n+      12.186049981389793,\n+      12.21652484435231\n+    ],\n+    [\n+      31.61451716884052,\n+      31.677411274010208\n+    ],\n+    [\n+      64.16582454721888,\n+      64.45436333987266\n+    ],\n+    [\n+      128.85832698823415,\n+      129.18524483923676\n+    ],\n+    [\n+      322.6414371566138,\n+      322.78971694074727\n+    ],\n+    [\n+      645.8024629191517,\n+      645.843395893459\n+    ],\n+    [\n+      1293.1470888410072,\n+      1293.9965887308613\n+    ],\n+    [\n+      3241.399268220038,\n+      3250.9184693800635\n+    ],\n+    [\n+      6506.160878023245,\n+      6547.998104162743\n+    ],\n+    [\n+      13099.239565786685,\n+      13264.173614297948\n+    ],\n+    [\n+      33158.58105395684,\n+      34012.547856098914\n+    ],\n+    [\n+      39907.53150919645,\n+      41055.75466024211\n+    ],\n+    [\n+      53435.7934947786,\n+      55206.20943956747\n+    ],\n+    [\n+      60168.681550443725,\n+      62217.298173007206\n+    ]\n+  ],\n+  \"6-2.F\": [\n+    [\n+      5.598664461370182,\n+      5.497045414551138\n+    ],\n+    [\n+      11.991219214930108,\n+      11.80437247068219\n+    ],\n+    [\n+      31.38726457168833,\n+      31.15860170951853\n+    ],\n+    [\n+      63.94300358103677,\n+      63.87417092336909\n+    ],\n+    [\n+      128.73313166496126,\n+      128.66577837609103\n+    ],\n+    [\n+      323.12254951810087,\n+      323.0787433060595\n+    ],\n+    [\n+      646.8982175191214,\n+      646.6870812502483\n+    ],\n+    [\n+      1295.5663584752567,\n+      1296.1374237307868\n+    ],\n+    [\n+      3245.970249167525,\n+      3253.3031637901204\n+    ],\n+    [\n+      6510.136219126665,\n+      6542.346596671329\n+    ],\n+    [\n+      13093.574717614298,\n+      13225.20166566445\n+    ],\n+    [\n+      33060.86076099853,\n+      33741.9401527135\n+    ],\n+    [\n+      39761.78032902288,\n+      40671.519631236704\n+    ],\n+    [\n+      53175.837407910614,\n+      54556.503135714935\n+    ],\n+    [\n+      59871.612474459405,\n+      61476.12914407048\n+    ]\n+  ],\n+  \"6-2.G\": [\n+    [\n+      5.642807748578484,\n+      5.5557751875757075\n+    ],\n+    [\n+      11.990474149069602,\n+      11.74309691106047\n+    ],\n+    [\n+      31.54566027167101,\n+      31.31439160701391\n+    ],\n+    [\n+      64.23020245637804,\n+      64.12265621773845\n+    ],\n+    [\n+      129.34116486614394,\n+      129.22591918323113\n+    ],\n+    [\n+      324.795395487845,\n+      324.77851362942613\n+    ],\n+    [\n+      650.164458473546,\n+      649.92379443167\n+    ],\n+    [\n+      1302.4807061952145,\n+      1303.3709419949703\n+    ],\n+    [\n+      3262.338195623749,\n+      3269.5436402767655\n+    ],\n+    [\n+      6544.136172143638,\n+      6577.362272787408\n+    ],\n+    [\n+      13164.73228500853,\n+      13300.723795835696\n+    ],\n+    [\n+      33266.99506338404,\n+      33990.89472308069\n+    ],\n+    [\n+      40022.71448493681,\n+      40998.27165975539\n+    ],\n+    [\n+      53564.51467786368,\n+      55076.4462450491\n+    ],\n+    [\n+      60327.02889042911,\n+      62098.65436906748\n+    ]\n+  ],\n+  \"6-2.H\": [\n+    [\n+      5.866901970721279,\n+      6.036270916083334\n+    ],\n+    [\n+      12.846292032720445,\n+      13.547601575781764\n+    ],\n+    [\n+      32.22948118677029,\n+      32.85248817976673\n+    ],\n+    [\n+      64.47195599831049,\n+      64.93390468799845\n+    ],\n+    [\n+      129.21911975269356,\n+      129.63627837088896\n+    ],\n+    [\n+      323.35548153682663,\n+      323.53772061685174\n+    ],\n+    [\n+      647.6978128827651,\n+      648.2727292470288\n+    ],\n+    [\n+      1295.8269172572868,\n+      1296.630803984656\n+    ],\n+    [\n+      3246.4006067535497,\n+      3254.0955614663258\n+    ],\n+    [\n+      6510.842257592107,\n+      6543.624333214674\n+    ],\n+    [\n+      13092.500741569092,\n+      13221.61901150222\n+    ],\n+    [\n+      33042.842644813274,\n+      33704.443234747625\n+    ],\n+    [\n+      39740.20550782422,\n+      40626.51679515193\n+    ],\n+    [\n+      53159.115738122455,\n+      54521.018695434446\n+    ],\n+    [\n+      59829.06999904069,\n+      61387.4684687576\n+    ]\n+  ],\n+  \"6-3.E\": [\n+    [\n+      5.867046844628958,\n+      6.0607167518255345\n+    ],\n+    [\n+      12.246661599135466,\n+      12.361639840590666\n+    ],\n+    [\n+      31.3524056440584,\n+      31.213120853933596\n+    ],\n+    [\n+      63.59629841595614,\n+      63.43476273350347\n+    ],\n+    [\n+      128.18595629312176,\n+      128.0818847600893\n+    ],\n+    [\n+      321.775130532146,\n+      321.6645738293655\n+    ],\n+    [\n+      644.632188740786,\n+      644.7193172942675\n+    ],\n+    [\n+      1290.276480208452,\n+      1290.6893270532041\n+    ],\n+    [\n+      3235.076557352644,\n+      3244.3598800406753\n+    ],\n+    [\n+      6492.924499670951,\n+      6533.690131299059\n+    ],\n+    [\n+      13069.430345376859,\n+      13228.54213253857\n+    ],\n+    [\n+      33057.399895676666,\n+      33869.0918792386\n+    ],\n+    [\n+      39774.57860719323,\n+      40859.62364739877\n+    ],\n+    [\n+      53235.179895196525,\n+      54895.877766859994\n+    ],\n+    [\n+      59957.40525223926,\n+      61897.72622789448\n+    ]\n+  ],\n+  \"6-3.F\": [\n+    [\n+      5.735846046869243,\n+      5.713623420640419\n+    ],\n+    [\n+      12.116226454209954,\n+      11.934581081297747\n+    ],\n+    [\n+      31.71944167151208,\n+      31.51216835690763\n+    ],\n+    [\n+      64.50704906262476,\n+      64.37389061269552\n+    ],\n+    [\n+      129.91434204731596,\n+      129.763567103496\n+    ],\n+    [\n+      326.16102002668737,\n+      325.9824058748164\n+    ],\n+    [\n+      653.3569488422477,\n+      653.2501247877765\n+    ],\n+    [\n+      1308.6904029212938,\n+      1309.6696309982\n+    ],\n+    [\n+      3278.964596919214,\n+      3287.4951210082295\n+    ],\n+    [\n+      6575.717946925761,\n+      6609.916084273674\n+    ],\n+    [\n+      13217.653597380355,\n+      13345.578590860845\n+    ],\n+    [\n+      33345.07299342768,\n+      33990.79160025802\n+    ],\n+    [\n+      40096.28869969242,\n+      40956.544208319385\n+    ],\n+    [\n+      53611.82266207358,\n+      54915.53148138103\n+    ],\n+    [\n+      60331.71807057046,\n+      61817.606640307895\n+    ]\n+  ],\n+  \"6-3.G\": [\n+    [\n+      5.800579140727081,\n+      5.806514706623483\n+    ],\n+    [\n+      12.429673356882978,\n+      12.480960938500349\n+    ],\n+    [\n+      32.013043622398285,\n+      31.896081251910392\n+    ],\n+    [\n+      64.89131087285162,\n+      64.73284265272846\n+    ],\n+    [\n+      130.96420572193594,\n+      131.03882263052535\n+    ],\n+    [\n+      328.0822056744439,\n+      327.75669823618404\n+    ],\n+    [\n+      657.7368864451091,\n+      657.868429175018\n+    ],\n+    [\n+      1316.6256883027293,\n+      1317.251636771618\n+    ],\n+    [\n+      3297.3803245426316,\n+      3303.5883249532712\n+    ],\n+    [\n+      6608.901426593542,\n+      6634.746251199042\n+    ],\n+    [\n+      13279.681632416137,\n+      13385.040250087795\n+    ],\n+    [\n+      33455.899245393164,\n+      34001.61344048994\n+    ],\n+    [\n+      40217.93503388009,\n+      40945.92300091279\n+    ],\n+    [\n+      53754.02416103754,\n+      54859.543233079996\n+    ],\n+    [\n+      60487.17276895151,\n+      61745.24932267538\n+    ]\n+  ],\n+  \"6-3.H\": [\n+    [\n+      5.991015378410717,\n+      6.161331980163222\n+    ],\n+    [\n+      12.830417273750978,\n+      13.228514497150638\n+    ],\n+    [\n+      32.6257357708342,\n+      32.95375806837274\n+    ],\n+    [\n+      65.84221877998968,\n+      66.29204593164367\n+    ],\n+    [\n+      131.9869817812105,\n+      132.39082079928676\n+    ],\n+    [\n+      330.0966100800775,\n+      330.0420502304721\n+    ],\n+    [\n+      661.5930372618564,\n+      662.090603829936\n+    ],\n+    [\n+      1322.946214012484,\n+      1322.9072532130278\n+    ],\n+    [\n+      3314.9561603950906,\n+      3321.271207521288\n+    ],\n+    [\n+      6647.244042112303,\n+      6676.516699817827\n+    ],\n+    [\n+      13357.957857485744,\n+      13471.788378032623\n+    ],\n+    [\n+      33654.50940827709,\n+      34224.850703086966\n+    ],\n+    [\n+      40456.421455446914,\n+      41214.21026142277\n+    ],\n+    [\n+      54067.6623322584,\n+      55208.54889305485\n+    ],\n+    [\n+      60853.824492946456,\n+      62166.104802531685\n+    ]\n+  ],\n+  \"6-4.E\": [\n+    [\n+      5.897291147124707,\n+      5.929661384818709\n+    ],\n+    [\n+      12.598359838481503,\n+      12.668014368518445\n+    ],\n+    [\n+      32.475699206958055,\n+      32.430403661311175\n+    ],\n+    [\n+      65.70393996520036,\n+      65.56715618847481\n+    ],\n+    [\n+      132.34793734602255,\n+      132.21509690902042\n+    ],\n+    [\n+      332.31702494320024,\n+      332.2334407805856\n+    ],\n+    [\n+      665.657096628858,\n+      665.7140447996484\n+    ],\n+    [\n+      1333.4435139640193,\n+      1334.8893943070696\n+    ],\n+    [\n+      3341.0641868607995,\n+      3350.9613158399015\n+    ],\n+    [\n+      6699.415896342788,\n+      6735.837255137897\n+    ],\n+    [\n+      13466.285710056623,\n+      13599.290839104155\n+    ],\n+    [\n+      33962.34636031946,\n+      34617.956006326225\n+    ],\n+    [\n+      40836.26508935071,\n+      41707.5899751269\n+    ],\n+    [\n+      54592.96244903124,\n+      55905.622016710644\n+    ],\n+    [\n+      61457.647587540545,\n+      62976.827731126\n+    ]\n+  ],\n+  \"6-4.F\": [\n+    [\n+      6.3821022628130155,\n+      6.760127443331578\n+    ],\n+    [\n+      13.213146158372206,\n+      13.56424479290873\n+    ],\n+    [\n+      33.622820991917656,\n+      33.838121192066964\n+    ],\n+    [\n+      67.83782882190069,\n+      68.03776077559823\n+    ],\n+    [\n+      136.3045357458741,\n+      136.51171413115492\n+    ],\n+    [\n+      341.66028892859924,\n+      341.84543136152024\n+    ],\n+    [\n+      684.0918276680908,\n+      684.4126091157859\n+    ],\n+    [\n+      1369.3469751672792,\n+      1370.331561590575\n+    ],\n+    [\n+      3430.4315630313745,\n+      3438.7444779582884\n+    ],\n+    [\n+      6878.520848297852,\n+      6912.106698897729\n+    ],\n+    [\n+      13825.790985712234,\n+      13952.771409774952\n+    ],\n+    [\n+      34843.451761761076,\n+      35469.16810218839\n+    ],\n+    [\n+      41887.373781636794,\n+      42716.13416080971\n+    ],\n+    [\n+      55980.395420814835,\n+      57221.16493003338\n+    ],\n+    [\n+      62793.167941822045,\n+      63996.51340291959\n+    ]\n+  ],\n+  \"6-4.G\": [\n+    [\n+      6.024988920561752,\n+      6.139891143995883\n+    ],\n+    [\n+      12.718679296138657,\n+      12.8081962848389\n+    ],\n+    [\n+      32.83067958977502,\n+      32.87899168306227\n+    ],\n+    [\n+      66.19848102065266,\n+      66.02721533044418\n+    ],\n+    [\n+      133.2956466787658,\n+      133.04606566516878\n+    ],\n+    [\n+      334.9876009992156,\n+      334.90300018536584\n+    ],\n+    [\n+      671.058407698387,\n+      671.1670726421934\n+    ],\n+    [\n+      1344.0831723282565,\n+      1345.4629248974943\n+    ],\n+    [\n+      3366.8900221532285,\n+      3375.8337315684203\n+    ],\n+    [\n+      6753.036829290873,\n+      6789.524417361738\n+    ],\n+    [\n+      13580.772926240457,\n+      13719.923193897497\n+    ],\n+    [\n+      34271.226883172865,\n+      34969.446926495686\n+    ],\n+    [\n+      41215.16604805919,\n+      42146.409797658474\n+    ],\n+    [\n+      55121.95919395623,\n+      56539.87738860509\n+    ],\n+    [\n+      62016.87220619833,\n+      63616.83288161934\n+    ]\n+  ],\n+  \"6-4.H\": [\n+    [\n+      5.622117560859253,\n+      5.409390057717058\n+    ],\n+    [\n+      12.24825088500627,\n+      12.018558322504603\n+    ],\n+    [\n+      32.37251613975156,\n+      32.34535664570571\n+    ],\n+    [\n+      65.56832830679093,\n+      65.54135901947028\n+    ],\n+    [\n+      131.7095433684957,\n+      131.43313882016568\n+    ],\n+    [\n+      330.9384095987,\n+      330.716764663356\n+    ],\n+    [\n+      663.008292718461,\n+      662.90028506196\n+    ],\n+    [\n+      1328.6868421363213,\n+      1330.3472087670987\n+    ],\n+    [\n+      3329.7441337854093,\n+      3340.7593998280513\n+    ],\n+    [\n+      6680.659806292384,\n+      6723.263292132732\n+    ],\n+    [\n+      13444.14148187978,\n+      13604.599975126534\n+    ],\n+    [\n+      33972.101798090895,\n+      34767.58938703929\n+    ],\n+    [\n+      40869.280745619915,\n+      41931.53433083485\n+    ],\n+    [\n+      54692.14338080142,\n+      56319.1052031424\n+    ],\n+    [\n+      61585.647941592615,\n+      63476.305723653626\n+    ]\n+  ],\n+  \"6-5.E\": [\n+    [\n+      5.551065870542002,\n+      5.446594179394074\n+    ],\n+    [\n+      11.970007440073799,\n+      11.85541801698511\n+    ],\n+    [\n+      31.247506207690456,\n+      31.125301055498184\n+    ],\n+    [\n+      63.40652065314496,\n+      63.30220931487535\n+    ],\n+    [\n+      127.85925643211746,\n+      127.92591829628515\n+    ],\n+    [\n+      320.2856757486276,\n+      319.93422002225145\n+    ],\n+    [\n+      642.0395881347806,\n+      642.0335196635903\n+    ],\n+    [\n+      1285.6615197010524,\n+      1286.461602119023\n+    ],\n+    [\n+      3221.819039725369,\n+      3230.3498864639523\n+    ],\n+    [\n+      6463.259634267826,\n+      6499.327359987938\n+    ],\n+    [\n+      13004.292772437442,\n+      13147.548131736863\n+    ],\n+    [\n+      32861.45846125517,\n+      33599.06701377399\n+    ],\n+    [\n+      39534.46002652617,\n+      40524.92226364003\n+    ],\n+    [\n+      52909.987343205576,\n+      54438.35292903673\n+    ],\n+    [\n+      59555.98843074359,\n+      61309.431592317094\n+    ]\n+  ],\n+  \"6-5.F\": [\n+    [\n+      5.974880395880237,\n+      6.182099128604023\n+    ],\n+    [\n+      12.546822656245709,\n+      12.761473600071557\n+    ],\n+    [\n+      32.01971234771029,\n+      32.020120607210956\n+    ],\n+    [\n+      64.7854634440142,\n+      64.74577575733969\n+    ],\n+    [\n+      130.66641658761623,\n+      130.89631878005724\n+    ],\n+    [\n+      327.00668201508955,\n+      326.7414207805824\n+    ],\n+    [\n+      655.6473366731923,\n+      655.9639416885184\n+    ],\n+    [\n+      1312.135622391513,\n+      1312.8232687567709\n+    ],\n+    [\n+      3287.912050041053,\n+      3296.0435181841767\n+    ],\n+    [\n+      6593.8396326616485,\n+      6627.461985433507\n+    ],\n+    [\n+      13255.755267315373,\n+      13384.18570997929\n+    ],\n+    [\n+      33432.390767026875,\n+      34071.69145606152\n+    ],\n+    [\n+      40197.838190666385,\n+      41046.982802848775\n+    ],\n+    [\n+      53738.77510034491,\n+      55018.717696415675\n+    ],\n+    [\n+      60493.775399861945,\n+      61973.07870119257\n+    ]\n+  ],\n+  \"6-5.G\": [\n+    [\n+      6.257169684183113,\n+      6.708260692322852\n+    ],\n+    [\n+      12.860191546576626,\n+      13.2649224716497\n+    ],\n+    [\n+      32.490310995610095,\n+      32.6191306462836\n+    ],\n+    [\n+      65.4697681918507,\n+      65.42058745723246\n+    ],\n+    [\n+      132.21216137560629,\n+      132.592455956102\n+    ],\n+    [\n+      330.69794088733,\n+      330.6210148746433\n+    ],\n+    [\n+      662.7857909830268,\n+      663.2271203033068\n+    ],\n+    [\n+      1326.0511484754509,\n+      1326.6180427890715\n+    ],\n+    [\n+      3323.281348734389,\n+      3331.680199958163\n+    ],\n+    [\n+      6665.52031269277,\n+      6700.622183823049\n+    ],\n+    [\n+      13402.148230992643,\n+      13535.792824442928\n+    ],\n+    [\n+      33814.82044453947,\n+      34486.53260279497\n+    ],\n+    [\n+      40664.66528426033,\n+      41561.07592817547\n+    ],\n+    [\n+      54378.09161743807,\n+      55739.02868050562\n+    ],\n+    [\n+      61209.928571592216,\n+      62777.2044360189\n+    ]\n+  ],\n+  \"6-5.H\": [\n+    [\n+      5.441364543029212,\n+      5.105079098198803\n+    ],\n+    [\n+      11.962604988631314,\n+      11.550323030704018\n+    ],\n+    [\n+      32.001932535117014,\n+      31.845628187031465\n+    ],\n+    [\n+      64.99906649721221,\n+      64.8903081103284\n+    ],\n+    [\n+      130.4676938694763,\n+      129.9315863670092\n+    ],\n+    [\n+      328.5299226375376,\n+      328.3598889819665\n+    ],\n+    [\n+      657.8311772874572,\n+      657.4724625481045\n+    ],\n+    [\n+      1318.5631811869146,\n+      1319.9576610444974\n+    ],\n+    [\n+      3303.027106146092,\n+      3311.967962836354\n+    ],\n+    [\n+      6625.682991390836,\n+      6662.559317313087\n+    ],\n+    [\n+      13327.311383925611,\n+      13469.350944222811\n+    ],\n+    [\n+      33662.530690631014,\n+      34392.33391104337\n+    ],\n+    [\n+      40487.6846426443,\n+      41460.164944817254\n+    ],\n+    [\n+      54153.43600591282,\n+      55628.361919623225\n+    ],\n+    [\n+      60955.32906600982,\n+      62649.02998542767\n+    ]\n+  ],\n+  \"6-6.E\": [\n+    [\n+      5.325821972147624,\n+      5.313536522630862\n+    ],\n+    [\n+      11.36321398077039,\n+      11.32318296346978\n+    ],\n+    [\n+      29.548070699500915,\n+      29.497093017705748\n+    ],\n+    [\n+      59.90067628259596,\n+      59.875974924387464\n+    ],\n+    [\n+      120.65138404350871,\n+      120.72492235327616\n+    ],\n+    [\n+      302.40901389960453,\n+      302.28267068684994\n+    ],\n+    [\n+      605.8106813608495,\n+      605.823428284889\n+    ],\n+    [\n+      1213.891724418333,\n+      1215.46249450236\n+    ],\n+    [\n+      3046.243171633022,\n+      3060.6561276106954\n+    ],\n+    [\n+      6125.952442464274,\n+      6188.00382650169\n+    ],\n+    [\n+      12373.194235638335,\n+      12613.936689572996\n+    ],\n+    [\n+      31513.108159297,\n+      32747.198564490027\n+    ],\n+    [\n+      37985.683583055616,\n+      39650.492321113765\n+    ],\n+    [\n+      50993.96443227153,\n+      53592.66317871493\n+    ],\n+    [\n+      57471.72548166009,\n+      60509.42310522245\n+    ]\n+  ],\n+  \"6-6.F\": [\n+    [\n+      5.635806654920515,\n+      5.729768455109077\n+    ],\n+    [\n+      11.981680825306627,\n+      12.123169264307307\n+    ],\n+    [\n+      30.744218034423856,\n+      30.751222292132308\n+    ],\n+    [\n+      62.20205906178548,\n+      62.174627243607105\n+    ],\n+    [\n+      125.04970326659675,\n+      124.88554411163487\n+    ],\n+    [\n+      314.1551364866943,\n+      314.1424578825758\n+    ],\n+    [\n+      629.1938254316659,\n+      629.2969643234243\n+    ],\n+    [\n+      1260.435966902349,\n+      1261.937240680439\n+    ],\n+    [\n+      3160.575342585872,\n+      3172.7234399908907\n+    ],\n+    [\n+      6347.405551474998,\n+      6397.500779756026\n+    ],\n+    [\n+      12792.936864289253,\n+      12984.92033342643\n+    ],\n+    [\n+      32435.78286942631,\n+      33408.34510173788\n+    ],\n+    [\n+      39052.07894821274,\n+      40356.31747006813\n+    ],\n+    [\n+      52319.27111884197,\n+      54325.74323630549\n+    ],\n+    [\n+      58848.722024234834,\n+      61094.64323682961\n+    ]\n+  ],\n+  \"6-6.G\": [\n+    [\n+      5.683461150857522,\n+      5.740976645353619\n+    ],\n+    [\n+      12.179897604975302,\n+      12.342497221905449\n+    ],\n+    [\n+      31.289195414625603,\n+      31.38046384465567\n+    ],\n+    [\n+      63.26899145706084,\n+      63.37538031354067\n+    ],\n+    [\n+      127.14808933179314,\n+      127.20424473221085\n+    ],\n+    [\n+      318.7938608871233,\n+      318.7082415707806\n+    ],\n+    [\n+      638.7156549193479,\n+      638.90596378757\n+    ],\n+    [\n+      1279.4399427203612,\n+      1281.064744407141\n+    ],\n+    [\n+      3207.0458288654877,\n+      3218.43944093658\n+    ],\n+    [\n+      6436.512298379841,\n+      6481.180956553299\n+    ],\n+    [\n+      12960.270214117834,\n+      13128.436330280421\n+    ],\n+    [\n+      32796.2721623204,\n+      33650.40111222381\n+    ],\n+    [\n+      39470.814321035126,\n+      40617.24597867153\n+    ],\n+    [\n+      52853.94933907506,\n+      54622.58918769335\n+    ],\n+    [\n+      59447.48108889104,\n+      61423.005547402914\n+    ]\n+  ],\n+  \"6-6.H\": [\n+    [\n+      5.543240468043179,\n+      5.63923563489194\n+    ],\n+    [\n+      11.779172773018319,\n+      11.920052357016111\n+    ],\n+    [\n+      30.20657471819067,\n+      30.199958437012903\n+    ],\n+    [\n+      60.9515046656793,\n+      60.7351954200743\n+    ],\n+    [\n+      122.59170281061752,\n+      122.10596984744463\n+    ],\n+    [\n+      308.8740365814826,\n+      308.93635509596874\n+    ],\n+    [\n+      618.3859524728339,\n+      618.4062449339037\n+    ],\n+    [\n+      1239.2478316745767,\n+      1241.024686629599\n+    ],\n+    [\n+      3106.220360971844,\n+      3117.6858320117503\n+    ],\n+    [\n+      6236.206203348094,\n+      6282.415989783846\n+    ],\n+    [\n+      12561.601134220216,\n+      12735.620064353776\n+    ],\n+    [\n+      31808.24173133547,\n+      32685.371368050382\n+    ],\n+    [\n+      38284.755739661254,\n+      39458.70944924723\n+    ],\n+    [\n+      51268.86322399042,\n+      53071.03846984919\n+    ],\n+    [\n+      57730.66344299372,\n+      59814.99367055382\n+    ]\n+  ]\n+}\n\\ No newline at end of file\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ],
                        [
                            "@@ -0,0 +1,8934 @@\n+{\n+  \"date\": \"2023-06-20 21:15:52.647976\",\n+  \"reference\": \"https://euclid.roe.ac.uk/dmsf/files/19066\",\n+  \"author\": \"Patricia Liebing <liebing@strw.leidenuniv.nl>\",\n+  \"description\": \"Non-linearity correction model. Contains a dictionary in which each key is a quadrant id and its associated value is a list of pair of values. The first value in the pair is the linear signal in ADU and the second one is the correcponding non-linear signal in ADU.\",\n+  \"1-1.E\": [\n+    [\n+      5.7205759826688904,\n+      5.807249847988931\n+    ],\n+    [\n+      12.088025578334763,\n+      12.13829002398899\n+    ],\n+    [\n+      31.357132187303225,\n+      31.468369922215974\n+    ],\n+    [\n+      63.12610021814389,\n+      62.992331362068676\n+    ],\n+    [\n+      127.18233644061723,\n+      127.07687630976658\n+    ],\n+    [\n+      319.2614419237922,\n+      319.15183262424875\n+    ],\n+    [\n+      639.6414209206326,\n+      639.7731134066603\n+    ],\n+    [\n+      1281.0531955783497,\n+      1282.3205548366452\n+    ],\n+    [\n+      3209.5279760698586,\n+      3218.461708954091\n+    ],\n+    [\n+      6438.379363052668,\n+      6474.959727033666\n+    ],\n+    [\n+      12949.723502523604,\n+      13089.290747508476\n+    ],\n+    [\n+      32698.444425748825,\n+      33398.46232320779\n+    ],\n+    [\n+      39328.831991792795,\n+      40263.488795679245\n+    ],\n+    [\n+      52608.14872305627,\n+      54032.42242146698\n+    ],\n+    [\n+      59221.55010694724,\n+      60863.18786984436\n+    ]\n+  ],\n+  \"1-1.F\": [\n+    [\n+      5.613295160128764,\n+      5.543665164636964\n+    ],\n+    [\n+      12.118198732294374,\n+      12.094645651132844\n+    ],\n+    [\n+      31.353153313243382,\n+      31.19135661959049\n+    ],\n+    [\n+      63.936735082900825,\n+      64.06796216005118\n+    ],\n+    [\n+      128.32357083119004,\n+      128.26141997101877\n+    ],\n+    [\n+      322.01553827528215,\n+      321.90542533186215\n+    ],\n+    [\n+      645.0070887501087,\n+      644.9886020361411\n+    ],\n+    [\n+      1290.927192851657,\n+      1291.0290435258132\n+    ],\n+    [\n+      3234.163591010039,\n+      3240.113483186127\n+    ],\n+    [\n+      6486.505565576988,\n+      6515.920471522566\n+    ],\n+    [\n+      13041.794902208221,\n+      13162.866015848904\n+    ],\n+    [\n+      32921.16652986023,\n+      33565.4873676327\n+    ],\n+    [\n+      39593.83975429667,\n+      40458.966687376786\n+    ],\n+    [\n+      52957.395470631855,\n+      54284.0040242403\n+    ],\n+    [\n+      59628.55302751577,\n+      61174.99387159953\n+    ]\n+  ],\n+  \"1-1.G\": [\n+    [\n+      5.599769799418902,\n+      5.496858766520009\n+    ],\n+    [\n+      12.081437495484893,\n+      11.97752892457931\n+    ],\n+    [\n+      31.42573532358569,\n+      31.221639602058612\n+    ],\n+    [\n+      63.905099284189184,\n+      63.771117145253996\n+    ],\n+    [\n+      128.75358973407248,\n+      128.65150215997795\n+    ],\n+    [\n+      323.20963820592107,\n+      323.1143479268144\n+    ],\n+    [\n+      647.2334975362834,\n+      647.0800857877216\n+    ],\n+    [\n+      1296.4457524404575,\n+      1297.3411991392816\n+    ],\n+    [\n+      3248.409188124175,\n+      3256.7971698388997\n+    ],\n+    [\n+      6517.470855608609,\n+      6554.285846275476\n+    ],\n+    [\n+      13113.449663144489,\n+      13258.782935451602\n+    ],\n+    [\n+      33140.84774768238,\n+      33890.87259264311\n+    ],\n+    [\n+      39872.29845950147,\n+      40880.395166266906\n+    ],\n+    [\n+      53363.97748018454,\n+      54919.68285362805\n+    ],\n+    [\n+      60110.893273293885,\n+      61941.93302119293\n+    ]\n+  ],\n+  \"1-1.H\": [\n+    [\n+      5.80178605396546,\n+      5.872122455661349\n+    ],\n+    [\n+      12.316158867184534,\n+      12.387339020001251\n+    ],\n+    [\n+      31.659931899091898,\n+      31.535681131316952\n+    ],\n+    [\n+      64.24763833252675,\n+      64.14529208745206\n+    ],\n+    [\n+      129.42323938813095,\n+      129.3654054379309\n+    ],\n+    [\n+      324.7689587077651,\n+      324.66398607513395\n+    ],\n+    [\n+      650.5744034563088,\n+      650.6200761133314\n+    ],\n+    [\n+      1302.9134207379386,\n+      1303.989457954935\n+    ],\n+    [\n+      3264.6248774426763,\n+      3273.507019895484\n+    ],\n+    [\n+      6549.021546340749,\n+      6585.935520421089\n+    ],\n+    [\n+      13173.218013224034,\n+      13314.848906257115\n+    ],\n+    [\n+      33274.21353406791,\n+      33999.190425819965\n+    ],\n+    [\n+      40024.65127889565,\n+      40994.454258884136\n+    ],\n+    [\n+      53548.919731754104,\n+      55033.928818992834\n+    ],\n+    [\n+      60297.4386044385,\n+      62025.971053909285\n+    ]\n+  ],\n+  \"1-2.E\": [\n+    [\n+      5.704003225805044,\n+      5.693403359563271\n+    ],\n+    [\n+      12.205038296993122,\n+      12.20243481447973\n+    ],\n+    [\n+      31.95070125067607,\n+      32.216903488318806\n+    ],\n+    [\n+      64.31118069147715,\n+      64.47096351758879\n+    ],\n+    [\n+      129.13835724108927,\n+      129.19475468745958\n+    ],\n+    [\n+      323.878342072837,\n+      323.8841160971512\n+    ],\n+    [\n+      648.644986965484,\n+      648.7664636920285\n+    ],\n+    [\n+      1299.1429195834846,\n+      1300.461713901567\n+    ],\n+    [\n+      3255.0759001982465,\n+      3264.447501188085\n+    ],\n+    [\n+      6530.464316185204,\n+      6568.912872697433\n+    ],\n+    [\n+      13139.485274080751,\n+      13289.050392397534\n+    ],\n+    [\n+      33208.27593806766,\n+      33969.28296073798\n+    ],\n+    [\n+      39951.35486373432,\n+      40970.7358469784\n+    ],\n+    [\n+      53457.01517926583,\n+      55014.762916946136\n+    ],\n+    [\n+      60201.35832541849,\n+      62019.62974072058\n+    ]\n+  ],\n+  \"1-2.F\": [\n+    [\n+      5.710810136029215,\n+      5.747673681612526\n+    ],\n+    [\n+      12.156132505333645,\n+      12.191111010310296\n+    ],\n+    [\n+      31.439173052460696,\n+      31.41589722191518\n+    ],\n+    [\n+      63.886738140026004,\n+      64.07621600390165\n+    ],\n+    [\n+      128.29012289128153,\n+      128.4118316675704\n+    ],\n+    [\n+      321.57976002667033,\n+      321.5788518912974\n+    ],\n+    [\n+      644.0026881247459,\n+      644.0711588797042\n+    ],\n+    [\n+      1289.4547797658527,\n+      1290.2687353916658\n+    ],\n+    [\n+      3229.9151009407606,\n+      3237.083447308682\n+    ],\n+    [\n+      6477.39786705945,\n+      6508.647627289575\n+    ],\n+    [\n+      13019.581517714241,\n+      13140.761958312372\n+    ],\n+    [\n+      32848.83370758021,\n+      33474.790105337386\n+    ],\n+    [\n+      39504.13825234455,\n+      40344.11162360062\n+    ],\n+    [\n+      52824.79909737566,\n+      54104.04975988274\n+    ],\n+    [\n+      59476.947116115756,\n+      60967.46777380574\n+    ]\n+  ],\n+  \"1-2.G\": [\n+    [\n+      5.817950254915522,\n+      5.838836172212225\n+    ],\n+    [\n+      12.439541056645531,\n+      12.49541755325667\n+    ],\n+    [\n+      32.19442234864351,\n+      32.244684784749325\n+    ],\n+    [\n+      65.16780047141113,\n+      65.25761169436339\n+    ],\n+    [\n+      130.88087226871684,\n+      130.81591475869988\n+    ],\n+    [\n+      328.4241482029299,\n+      328.2992220945545\n+    ],\n+    [\n+      658.030470797949,\n+      658.1730924730828\n+    ],\n+    [\n+      1317.9659941526077,\n+      1319.3680819126291\n+    ],\n+    [\n+      3302.1259644316087,\n+      3311.6816046509844\n+    ],\n+    [\n+      6622.436202610635,\n+      6659.088716451719\n+    ],\n+    [\n+      13314.384993131389,\n+      13450.023873687907\n+    ],\n+    [\n+      33580.03323601273,\n+      34239.68961540917\n+    ],\n+    [\n+      40374.626986789524,\n+      41247.88076496593\n+    ],\n+    [\n+      53971.6690162953,\n+      55280.9356495109\n+    ],\n+    [\n+      60758.350180587884,\n+      62273.372752595824\n+    ]\n+  ],\n+  \"1-2.H\": [\n+    [\n+      6.110027143971594,\n+      6.339510570247705\n+    ],\n+    [\n+      12.746781178245568,\n+      12.915947970848139\n+    ],\n+    [\n+      32.80434217530778,\n+      32.956622426787455\n+    ],\n+    [\n+      66.2220520486799,\n+      66.33664242270629\n+    ],\n+    [\n+      133.384131170467,\n+      133.75182541269643\n+    ],\n+    [\n+      333.74984357267977,\n+      333.75286257230346\n+    ],\n+    [\n+      668.5461020407669,\n+      668.7965201342898\n+    ],\n+    [\n+      1338.6241605609678,\n+      1339.8557692950885\n+    ],\n+    [\n+      3351.927623577267,\n+      3359.1835674762433\n+    ],\n+    [\n+      6721.955790080625,\n+      6753.885699120209\n+    ],\n+    [\n+      13516.508110106693,\n+      13645.030433330623\n+    ],\n+    [\n+      34142.56548068248,\n+      34845.206791608754\n+    ],\n+    [\n+      41067.867987461184,\n+      42011.87622436477\n+    ],\n+    [\n+      54919.33664953573,\n+      56347.85943030654\n+    ],\n+    [\n+      61826.70513097341,\n+      63478.37732268197\n+    ]\n+  ],\n+  \"1-3.E\": [\n+    [\n+      5.727795066003439,\n+      5.805719990006721\n+    ],\n+    [\n+      12.129965984161958,\n+      12.18866343008562\n+    ],\n+    [\n+      31.362254677280053,\n+      31.391081402206748\n+    ],\n+    [\n+      63.33562443085981,\n+      63.23478173614205\n+    ],\n+    [\n+      127.58635727431188,\n+      127.52976468181913\n+    ],\n+    [\n+      320.1853899676095,\n+      320.1087702226322\n+    ],\n+    [\n+      641.3916240413969,\n+      641.4894878142408\n+    ],\n+    [\n+      1284.5108799670525,\n+      1285.6655274238917\n+    ],\n+    [\n+      3219.1090962448734,\n+      3228.6989717874594\n+    ],\n+    [\n+      6461.69408073116,\n+      6503.795571937185\n+    ],\n+    [\n+      13010.686145804,\n+      13176.889936427353\n+    ],\n+    [\n+      32955.0182552914,\n+      33830.27672041135\n+    ],\n+    [\n+      39661.117105457764,\n+      40832.81682870894\n+    ],\n+    [\n+      53097.498385291554,\n+      54889.17083535798\n+    ],\n+    [\n+      59776.206264031636,\n+      61836.08728808219\n+    ]\n+  ],\n+  \"1-3.F\": [\n+    [\n+      5.6732546149737795,\n+      5.586809689433802\n+    ],\n+    [\n+      12.32092616069726,\n+      12.335075504498212\n+    ],\n+    [\n+      32.256109057911914,\n+      32.57120784447557\n+    ],\n+    [\n+      64.93893170298516,\n+      65.20612224977884\n+    ],\n+    [\n+      130.1038885451256,\n+      130.07739164456697\n+    ],\n+    [\n+      326.638527772388,\n+      326.7740441922094\n+    ],\n+    [\n+      653.8520785742296,\n+      653.9133089418734\n+    ],\n+    [\n+      1309.2557868744077,\n+      1310.1457515751954\n+    ],\n+    [\n+      3279.997383726206,\n+      3287.920765309277\n+    ],\n+    [\n+      6577.778939544158,\n+      6610.751424779628\n+    ],\n+    [\n+      13224.422038711029,\n+      13353.01437530105\n+    ],\n+    [\n+      33376.66622778412,\n+      34038.19579676565\n+    ],\n+    [\n+      40140.03286270874,\n+      41025.42478586539\n+    ],\n+    [\n+      53680.60489187508,\n+      55028.98913882992\n+    ],\n+    [\n+      60440.48665797711,\n+      62009.66607611136\n+    ]\n+  ],\n+  \"1-3.G\": [\n+    [\n+      5.957401358518357,\n+      6.078955922588866\n+    ],\n+    [\n+      12.54328753420721,\n+      12.615190261048713\n+    ],\n+    [\n+      32.284799046971,\n+      32.19749082029188\n+    ],\n+    [\n+      65.66405033490639,\n+      65.78840785155153\n+    ],\n+    [\n+      131.90814152226082,\n+      131.9411957100729\n+    ],\n+    [\n+      331.06233985918004,\n+      331.24416837256365\n+    ],\n+    [\n+      662.5493965552258,\n+      662.5423310319959\n+    ],\n+    [\n+      1326.791404066331,\n+      1327.6752323446876\n+    ],\n+    [\n+      3323.9361648950085,\n+      3331.928279327289\n+    ],\n+    [\n+      6668.101302387866,\n+      6703.66964205771\n+    ],\n+    [\n+      13412.477828146652,\n+      13553.026587664039\n+    ],\n+    [\n+      33880.190051541234,\n+      34608.93562149102\n+    ],\n+    [\n+      40753.609640155555,\n+      41729.74666914575\n+    ],\n+    [\n+      54526.707884867894,\n+      56026.20869133941\n+    ],\n+    [\n+      61389.595938605955,\n+      63126.10363938782\n+    ]\n+  ],\n+  \"1-3.H\": [\n+    [\n+      6.07421885266647,\n+      6.339026742786293\n+    ],\n+    [\n+      12.693307582671999,\n+      12.958272128429048\n+    ],\n+    [\n+      32.553223599503816,\n+      32.835247524604895\n+    ],\n+    [\n+      65.32052715407761,\n+      65.30100146212969\n+    ],\n+    [\n+      131.60840450520084,\n+      131.7440165406522\n+    ],\n+    [\n+      330.0613397792238,\n+      330.25122421779963\n+    ],\n+    [\n+      660.763519173578,\n+      660.9911730226419\n+    ],\n+    [\n+      1323.4336607070145,\n+      1325.0044814978578\n+    ],\n+    [\n+      3314.0162758701535,\n+      3322.2017917296125\n+    ],\n+    [\n+      6648.563238157313,\n+      6684.828545194445\n+    ],\n+    [\n+      13376.83709123608,\n+      13522.146450235112\n+    ],\n+    [\n+      33793.23188083309,\n+      34536.829216163045\n+    ],\n+    [\n+      40649.809919106796,\n+      41644.44351254646\n+    ],\n+    [\n+      54385.82527799057,\n+      55907.5634072974\n+    ],\n+    [\n+      61226.10265121599,\n+      62982.3852074855\n+    ]\n+  ],\n+  \"1-4.E\": [\n+    [\n+      5.644369568481149,\n+      5.563014876425497\n+    ],\n+    [\n+      12.078471454119875,\n+      11.925018662377381\n+    ],\n+    [\n+      31.546426419309633,\n+      31.339369555430107\n+    ],\n+    [\n+      63.95199289456012,\n+      63.6159870340307\n+    ],\n+    [\n+      129.32276200448143,\n+      129.28591669851522\n+    ],\n+    [\n+      324.0494603623695,\n+      323.530589907936\n+    ],\n+    [\n+      649.8984915985808,\n+      649.8785869891551\n+    ],\n+    [\n+      1301.0344775775225,\n+      1301.4522247299492\n+    ],\n+    [\n+      3259.237203248968,\n+      3265.7752765735995\n+    ],\n+    [\n+      6536.25809173451,\n+      6566.450498404998\n+    ],\n+    [\n+      13149.713075864758,\n+      13272.651868681622\n+    ],\n+    [\n+      33164.23332093163,\n+      33806.52680904054\n+    ],\n+    [\n+      39884.621379031254,\n+      40746.33926099582\n+    ],\n+    [\n+      53347.10998582783,\n+      54671.19132230105\n+    ],\n+    [\n+      60075.71806087801,\n+      61628.47750114802\n+    ]\n+  ],\n+  \"1-4.F\": [\n+    [\n+      5.554400332993697,\n+      5.49037505048099\n+    ],\n+    [\n+      11.897708359430325,\n+      11.792613613465578\n+    ],\n+    [\n+      30.92655485574346,\n+      30.697380772321555\n+    ],\n+    [\n+      62.848750432864456,\n+      62.61807569065622\n+    ],\n+    [\n+      126.98120066729489,\n+      127.0364802783576\n+    ],\n+    [\n+      318.01751675835806,\n+      317.57268908484076\n+    ],\n+    [\n+      637.7170989590797,\n+      637.7428687204742\n+    ],\n+    [\n+      1276.6041567118914,\n+      1277.0604207334698\n+    ],\n+    [\n+      3198.794483693146,\n+      3206.087371996695\n+    ],\n+    [\n+      6414.709592444012,\n+      6445.7670640181595\n+    ],\n+    [\n+      12902.593501827667,\n+      13023.448785116183\n+    ],\n+    [\n+      32535.204042257832,\n+      33160.114263632175\n+    ],\n+    [\n+      39128.573771200834,\n+      39968.14606604363\n+    ],\n+    [\n+      52344.10891553086,\n+      53643.941878277255\n+    ],\n+    [\n+      58939.8337679149,\n+      60457.42267816878\n+    ]\n+  ],\n+  \"1-4.G\": [\n+    [\n+      5.882019529624445,\n+      5.878176114920667\n+    ],\n+    [\n+      12.680680512891895,\n+      12.788822683073287\n+    ],\n+    [\n+      32.76214450174328,\n+      32.888562472246505\n+    ],\n+    [\n+      66.03860376609822,\n+      66.00307985415178\n+    ],\n+    [\n+      132.82614550297004,\n+      132.70239094355324\n+    ],\n+    [\n+      333.4614368840268,\n+      333.3452802900193\n+    ],\n+    [\n+      668.1203026234044,\n+      668.2836553915739\n+    ],\n+    [\n+      1337.8126883219534,\n+      1338.910575448885\n+    ],\n+    [\n+      3351.1652138657205,\n+      3359.35862469666\n+    ],\n+    [\n+      6718.325988051148,\n+      6750.01545434336\n+    ],\n+    [\n+      13512.168474213622,\n+      13632.729797638447\n+    ],\n+    [\n+      34044.24063328262,\n+      34662.370954952494\n+    ],\n+    [\n+      40938.30904075562,\n+      41768.39442737214\n+    ],\n+    [\n+      54748.33332102256,\n+      56025.90499045691\n+    ],\n+    [\n+      61613.08964536806,\n+      63072.46499443297\n+    ]\n+  ],\n+  \"1-4.H\": [\n+    [\n+      5.674262914494702,\n+      5.582592459716469\n+    ],\n+    [\n+      12.228926448770473,\n+      12.138064919232345\n+    ],\n+    [\n+      32.06577839111303,\n+      32.152235005894795\n+    ],\n+    [\n+      64.81070155112472,\n+      64.87677107358839\n+    ],\n+    [\n+      129.81867842851378,\n+      129.36396574006267\n+    ],\n+    [\n+      326.90556480597286,\n+      326.94526245960816\n+    ],\n+    [\n+      654.4635300253802,\n+      654.40972972841\n+    ],\n+    [\n+      1311.536928419943,\n+      1313.255846437038\n+    ],\n+    [\n+      3284.5234947573845,\n+      3293.3416124432324\n+    ],\n+    [\n+      6584.925150011596,\n+      6617.769743721053\n+    ],\n+    [\n+      13238.959117684846,\n+      13357.439563876505\n+    ],\n+    [\n+      33325.96786721327,\n+      33897.20194645024\n+    ],\n+    [\n+      40060.2703026942,\n+      40817.18758565684\n+    ],\n+    [\n+      53541.54595658852,\n+      54683.49127616696\n+    ],\n+    [\n+      60274.014879098286,\n+      61600.09998814385\n+    ]\n+  ],\n+  \"1-5.E\": [\n+    [\n+      5.89294016146893,\n+      5.9478166954725635\n+    ],\n+    [\n+      12.452175660992845,\n+      12.431964617534497\n+    ],\n+    [\n+      32.39270691690984,\n+      32.41145856048488\n+    ],\n+    [\n+      65.71826895715026,\n+      65.89379353469192\n+    ],\n+    [\n+      131.95491614242488,\n+      132.02816937266562\n+    ],\n+    [\n+      330.9303715073364,\n+      330.96355556366433\n+    ],\n+    [\n+      662.6349442197552,\n+      662.6802302888707\n+    ],\n+    [\n+      1326.9670375332157,\n+      1327.9602156821566\n+    ],\n+    [\n+      3325.3090392261456,\n+      3334.514113914046\n+    ],\n+    [\n+      6671.8401234149915,\n+      6710.853013664394\n+    ],\n+    [\n+      13435.529080350698,\n+      13590.117340938117\n+    ],\n+    [\n+      33937.165479377676,\n+      34723.69545696076\n+    ],\n+    [\n+      40826.39086106543,\n+      41876.83039209784\n+    ],\n+    [\n+      54630.34338625707,\n+      56236.56422180105\n+    ],\n+    [\n+      61479.59097001604,\n+      63308.14846730759\n+    ]\n+  ],\n+  \"1-5.F\": [\n+    [\n+      6.054200989598048,\n+      6.2318934886681\n+    ],\n+    [\n+      12.42330315046008,\n+      12.283900595986932\n+    ],\n+    [\n+      32.41688249587125,\n+      32.222514291868244\n+    ],\n+    [\n+      65.8969947688006,\n+      65.76825776692961\n+    ],\n+    [\n+      132.93963656978045,\n+      133.0262244878084\n+    ],\n+    [\n+      333.12392800521604,\n+      332.9135078045358\n+    ],\n+    [\n+      667.4927877404155,\n+      667.5154763622875\n+    ],\n+    [\n+      1335.95461668175,\n+      1336.1679301556867\n+    ],\n+    [\n+      3347.071698520443,\n+      3353.601110118055\n+    ],\n+    [\n+      6712.901046194605,\n+      6744.034683242057\n+    ],\n+    [\n+      13505.291103070653,\n+      13631.780192765133\n+    ],\n+    [\n+      34060.54117165222,\n+      34720.88078947021\n+    ],\n+    [\n+      40960.56467271593,\n+      41844.32189939277\n+    ],\n+    [\n+      54778.96542777946,\n+      56129.53052793031\n+    ],\n+    [\n+      61672.56870512013,\n+      63240.39699428091\n+    ]\n+  ],\n+  \"1-5.G\": [\n+    [\n+      5.6429803705655885,\n+      5.801713482801365\n+    ],\n+    [\n+      11.712552369883912,\n+      11.700328756548334\n+    ],\n+    [\n+      30.262926835669248,\n+      30.09342599028585\n+    ],\n+    [\n+      61.376303362882005,\n+      61.13915335401607\n+    ],\n+    [\n+      124.11699869764651,\n+      124.25780200422302\n+    ],\n+    [\n+      310.7627339118107,\n+      310.46344468090774\n+    ],\n+    [\n+      622.9760355962464,\n+      623.0798567141932\n+    ],\n+    [\n+      1247.5236315319792,\n+      1248.5560447388596\n+    ],\n+    [\n+      3129.5935694263876,\n+      3141.8836677434765\n+    ],\n+    [\n+      6286.031973327612,\n+      6337.023555259321\n+    ],\n+    [\n+      12680.991486888592,\n+      12879.141730299207\n+    ],\n+    [\n+      32166.128871102366,\n+      33183.186398006976\n+    ],\n+    [\n+      38738.29900916857,\n+      40106.85463286967\n+    ],\n+    [\n+      51931.86676673585,\n+      54058.559933019926\n+    ],\n+    [\n+      58534.86482665865,\n+      61048.16268553196\n+    ]\n+  ],\n+  \"1-5.H\": [\n+    [\n+      5.466295588223951,\n+      5.2626492252029395\n+    ],\n+    [\n+      12.125301841835926,\n+      12.121576063952547\n+    ],\n+    [\n+      31.605041182154903,\n+      31.727912484149908\n+    ],\n+    [\n+      63.88397112646666,\n+      64.02959798547445\n+    ],\n+    [\n+      127.77692212497544,\n+      127.30485972405614\n+    ],\n+    [\n+      321.9161291591869,\n+      322.04538463914844\n+    ],\n+    [\n+      644.2551779882774,\n+      644.1631339752479\n+    ],\n+    [\n+      1290.4067731255045,\n+      1291.3463755730984\n+    ],\n+    [\n+      3233.593972496941,\n+      3242.3821004093516\n+    ],\n+    [\n+      6487.067799428508,\n+      6523.910955254987\n+    ],\n+    [\n+      13056.324213107848,\n+      13196.098487181\n+    ],\n+    [\n+      32943.60848507963,\n+      33646.64981039496\n+    ],\n+    [\n+      39623.609480022584,\n+      40562.487471094406\n+    ],\n+    [\n+      53004.58785336645,\n+      54438.04602775697\n+    ],\n+    [\n+      59684.778443081734,\n+      61354.939350891436\n+    ]\n+  ],\n+  \"1-6.E\": [\n+    [\n+      5.544189166902309,\n+      5.616515802108241\n+    ],\n+    [\n+      11.66380817546489,\n+      11.63663513747275\n+    ],\n+    [\n+      30.30731575480514,\n+      30.268885561359294\n+    ],\n+    [\n+      61.42790660984813,\n+      61.41876826752437\n+    ],\n+    [\n+      123.5809214297299,\n+      123.54230547474829\n+    ],\n+    [\n+      310.2102078720746,\n+      310.25335127672247\n+    ],\n+    [\n+      621.063322416929,\n+      621.0470474952535\n+    ],\n+    [\n+      1243.9755155695493,\n+      1245.047301413124\n+    ],\n+    [\n+      3116.7820719126867,\n+      3125.2070863770687\n+    ],\n+    [\n+      6251.253058831765,\n+      6285.184302661082\n+    ],\n+    [\n+      12570.699552799817,\n+      12700.443609348296\n+    ],\n+    [\n+      31742.335683592166,\n+      32407.8304936377\n+    ],\n+    [\n+      38179.77293804096,\n+      39071.123471754916\n+    ],\n+    [\n+      51079.29770174812,\n+      52449.1127336794\n+    ],\n+    [\n+      57523.93956420565,\n+      59127.88001343294\n+    ]\n+  ],\n+  \"1-6.F\": [\n+    [\n+      5.657307836902729,\n+      5.732689231757147\n+    ],\n+    [\n+      11.973972887159583,\n+      12.021844136215803\n+    ],\n+    [\n+      30.885642541345906,\n+      30.815033028049736\n+    ],\n+    [\n+      62.934870058514136,\n+      63.197547283635636\n+    ],\n+    [\n+      126.29548357421373,\n+      126.48422257025084\n+    ],\n+    [\n+      316.47159876851333,\n+      316.5349474578582\n+    ],\n+    [\n+      633.637309061151,\n+      633.6976414129389\n+    ],\n+    [\n+      1267.714363678978,\n+      1267.5143370784356\n+    ],\n+    [\n+      3175.403209529995,\n+      3179.886045966589\n+    ],\n+    [\n+      6364.7414814091135,\n+      6386.946317616799\n+    ],\n+    [\n+      12785.844637066844,\n+      12879.816741295956\n+    ],\n+    [\n+      32201.889941387846,\n+      32695.10926126829\n+    ],\n+    [\n+      38705.63457580183,\n+      39362.75371444117\n+    ],\n+    [\n+      51721.62244248143,\n+      52715.75879576334\n+    ],\n+    [\n+      58221.962208373225,\n+      59376.77605496755\n+    ]\n+  ],\n+  \"1-6.G\": [\n+    [\n+      5.901174091853887,\n+      6.100644842200541\n+    ],\n+    [\n+      12.458613293996104,\n+      12.728993809095057\n+    ],\n+    [\n+      31.80635414273457,\n+      31.9622429120198\n+    ],\n+    [\n+      64.1534938090024,\n+      64.22709531407513\n+    ],\n+    [\n+      128.82926610283704,\n+      128.72114445295725\n+    ],\n+    [\n+      323.65478051923725,\n+      323.79962941321736\n+    ],\n+    [\n+      648.004688737918,\n+      648.2119256111039\n+    ],\n+    [\n+      1297.8755602376507,\n+      1299.3803015197004\n+    ],\n+    [\n+      3250.8448481570617,\n+      3259.615652965229\n+    ],\n+    [\n+      6518.021344405962,\n+      6551.238297767658\n+    ],\n+    [\n+      13100.852465423513,\n+      13224.48201810136\n+    ],\n+    [\n+      33053.43750287104,\n+      33690.96463824871\n+    ],\n+    [\n+      39750.47735113277,\n+      40605.22270753952\n+    ],\n+    [\n+      53162.927585525984,\n+      54472.09412761617\n+    ],\n+    [\n+      59855.42355446081,\n+      61377.622997630984\n+    ]\n+  ],\n+  \"1-6.H\": [\n+    [\n+      5.693335025518265,\n+      5.737910738594165\n+    ],\n+    [\n+      12.295184376047137,\n+      12.526973908464164\n+    ],\n+    [\n+      31.389908272006384,\n+      31.456541949888244\n+    ],\n+    [\n+      63.32550083436108,\n+      63.23482771027103\n+    ],\n+    [\n+      127.64850784323828,\n+      127.69495213736029\n+    ],\n+    [\n+      320.09466720868977,\n+      320.02992571988784\n+    ],\n+    [\n+      641.2488988928767,\n+      641.4095219299356\n+    ],\n+    [\n+      1283.7125352794055,\n+      1284.479423774745\n+    ],\n+    [\n+      3214.802276173368,\n+      3221.097432760007\n+    ],\n+    [\n+      6444.549607631346,\n+      6471.402321502308\n+    ],\n+    [\n+      12946.260204605309,\n+      13049.262342589025\n+    ],\n+    [\n+      32611.78554276909,\n+      33139.866534037916\n+    ],\n+    [\n+      39202.42123150557,\n+      39906.56984797582\n+    ],\n+    [\n+      52391.743861222465,\n+      53456.8569585505\n+    ],\n+    [\n+      58971.065998096805,\n+      60200.82228632644\n+    ]\n+  ],\n+  \"2-1.E\": [\n+    [\n+      6.051535816168524,\n+      6.066725119236875\n+    ],\n+    [\n+      12.932859314750743,\n+      12.970836446737046\n+    ],\n+    [\n+      33.37308769550512,\n+      33.275643268779945\n+    ],\n+    [\n+      67.70437525082365,\n+      67.64494347015223\n+    ],\n+    [\n+      136.28096221825916,\n+      136.2120165495698\n+    ],\n+    [\n+      342.08260546979636,\n+      342.05700668300017\n+    ],\n+    [\n+      685.0296984091865,\n+      685.020760300151\n+    ],\n+    [\n+      1371.6494346355232,\n+      1372.3997819569013\n+    ],\n+    [\n+      3434.890981474871,\n+      3441.3119141396614\n+    ],\n+    [\n+      6885.959022382593,\n+      6914.247499538414\n+    ],\n+    [\n+      13837.47395940118,\n+      13951.386262725291\n+    ],\n+    [\n+      34873.83684033229,\n+      35465.31793328213\n+    ],\n+    [\n+      41924.1439337554,\n+      42711.991351419216\n+    ],\n+    [\n+      56033.67971906724,\n+      57224.07669606013\n+    ],\n+    [\n+      62889.33165159709,\n+      64073.90904185438\n+    ]\n+  ],\n+  \"2-1.F\": [\n+    [\n+      5.950793804488347,\n+      5.893197288761936\n+    ],\n+    [\n+      12.749336607719624,\n+      12.662869348879983\n+    ],\n+    [\n+      33.37291978414609,\n+      33.42721263439968\n+    ],\n+    [\n+      67.69313458217256,\n+      67.93118529612329\n+    ],\n+    [\n+      135.6890995278814,\n+      135.64788760811297\n+    ],\n+    [\n+      340.6119824240101,\n+      340.67042048377914\n+    ],\n+    [\n+      681.9117336005366,\n+      681.8978708721081\n+    ],\n+    [\n+      1365.3649771516525,\n+      1366.0606274999407\n+    ],\n+    [\n+      3418.6592906036285,\n+      3424.426410165998\n+    ],\n+    [\n+      6852.208866300289,\n+      6877.891377963252\n+    ],\n+    [\n+      13765.025412059973,\n+      13869.210025747749\n+    ],\n+    [\n+      34673.09558177167,\n+      35218.2443827579\n+    ],\n+    [\n+      41674.4045722686,\n+      42397.30922088637\n+    ],\n+    [\n+      55677.58235766004,\n+      56756.98532073525\n+    ],\n+    [\n+      62625.97865497117,\n+      63828.463095015824\n+    ]\n+  ],\n+  \"2-1.G\": [\n+    [\n+      5.963477437084493,\n+      6.014824407732636\n+    ],\n+    [\n+      12.658742113365992,\n+      12.68705061042687\n+    ],\n+    [\n+      32.69408845116289,\n+      32.60414664483951\n+    ],\n+    [\n+      66.20029246755662,\n+      66.0271231872848\n+    ],\n+    [\n+      133.43368418738035,\n+      133.31428429822623\n+    ],\n+    [\n+      334.888124419174,\n+      334.68534288695275\n+    ],\n+    [\n+      671.0325028874828,\n+      671.0775919994369\n+    ],\n+    [\n+      1344.3620667945263,\n+      1345.9458043427705\n+    ],\n+    [\n+      3370.37429262468,\n+      3382.6345515152143\n+    ],\n+    [\n+      6764.189479077322,\n+      6811.586459458276\n+    ],\n+    [\n+      13618.810505040547,\n+      13796.83209240521\n+    ],\n+    [\n+      34450.97288475824,\n+      35335.24177062085\n+    ],\n+    [\n+      41453.10815353899,\n+      42632.05849460436\n+    ],\n+    [\n+      55487.950794355806,\n+      57289.96683049888\n+    ],\n+    [\n+      62494.520556802694,\n+      64596.92335664038\n+    ]\n+  ],\n+  \"2-1.H\": [\n+    [\n+      5.98148683082943,\n+      6.052739823387687\n+    ],\n+    [\n+      12.688742672073431,\n+      12.750483667871535\n+    ],\n+    [\n+      32.78914477718706,\n+      32.802312510497885\n+    ],\n+    [\n+      66.28643068488864,\n+      66.21581663351807\n+    ],\n+    [\n+      133.51559105002013,\n+      133.51178674589596\n+    ],\n+    [\n+      334.9550495570464,\n+      334.90387269639564\n+    ],\n+    [\n+      670.8919499380563,\n+      670.9662842540896\n+    ],\n+    [\n+      1343.7387402040156,\n+      1345.0383329950123\n+    ],\n+    [\n+      3366.5659716476393,\n+      3375.8487781032195\n+    ],\n+    [\n+      6752.151934764039,\n+      6789.082220732715\n+    ],\n+    [\n+      13577.213905759803,\n+      13715.606664820549\n+    ],\n+    [\n+      34257.78332654247,\n+      34948.900231243424\n+    ],\n+    [\n+      41198.56841157761,\n+      42120.766564391495\n+    ],\n+    [\n+      55095.69421311097,\n+      56497.13553627852\n+    ],\n+    [\n+      61999.89680794569,\n+      63594.53523594269\n+    ]\n+  ],\n+  \"2-2.E\": [\n+    [\n+      5.8821842813759355,\n+      5.8941743069649695\n+    ],\n+    [\n+      12.53840951895106,\n+      12.53679135110103\n+    ],\n+    [\n+      32.43305547081551,\n+      32.31707386892156\n+    ],\n+    [\n+      65.71701699514604,\n+      65.5360365418138\n+    ],\n+    [\n+      132.29122726100996,\n+      131.98657266280242\n+    ],\n+    [\n+      332.6387501896577,\n+      332.58664753713623\n+    ],\n+    [\n+      666.1486238581161,\n+      666.1159367077088\n+    ],\n+    [\n+      1334.5415936511092,\n+      1335.9223986692402\n+    ],\n+    [\n+      3345.293190047582,\n+      3356.5190491351836\n+    ],\n+    [\n+      6714.3181281403,\n+      6759.934738854872\n+    ],\n+    [\n+      13530.289765005273,\n+      13706.510289145634\n+    ],\n+    [\n+      34221.96883592846,\n+      35118.5841544157\n+    ],\n+    [\n+      41188.65957804617,\n+      42393.507629845626\n+    ],\n+    [\n+      55149.02943459164,\n+      57000.52758856936\n+    ],\n+    [\n+      62100.99637634058,\n+      64246.136923591825\n+    ]\n+  ],\n+  \"2-2.F\": [\n+    [\n+      5.893215799177373,\n+      5.847617839945878\n+    ],\n+    [\n+      12.539797846496862,\n+      12.393989931433973\n+    ],\n+    [\n+      33.00404454693888,\n+      33.07647358475644\n+    ],\n+    [\n+      66.67185776780167,\n+      66.67118485209522\n+    ],\n+    [\n+      134.09418118974332,\n+      134.0343452411695\n+    ],\n+    [\n+      336.29129963049905,\n+      335.98428390559513\n+    ],\n+    [\n+      674.1026093096665,\n+      674.1990581466994\n+    ],\n+    [\n+      1349.6417877040337,\n+      1350.4627434623767\n+    ],\n+    [\n+      3381.686772510401,\n+      3390.1278113094077\n+    ],\n+    [\n+      6782.100793845597,\n+      6817.038157524792\n+    ],\n+    [\n+      13646.726440325257,\n+      13781.720412371986\n+    ],\n+    [\n+      34410.31454412426,\n+      35093.999987222334\n+    ],\n+    [\n+      41379.44950874661,\n+      42290.4223541759\n+    ],\n+    [\n+      55337.7597207988,\n+      56725.04454606489\n+    ],\n+    [\n+      62277.627656804674,\n+      63862.008710593065\n+    ]\n+  ],\n+  \"2-2.G\": [\n+    [\n+      5.823384703109111,\n+      5.729347652686551\n+    ],\n+    [\n+      12.689333273714754,\n+      12.734667081545942\n+    ],\n+    [\n+      33.42356664027331,\n+      34.038497016114306\n+    ],\n+    [\n+      66.8399027060052,\n+      67.23642254303874\n+    ],\n+    [\n+      133.86073939770003,\n+      134.02400463478895\n+    ],\n+    [\n+      335.32215925738956,\n+      335.19082916745117\n+    ],\n+    [\n+      672.0639063695675,\n+      672.4146836821119\n+    ],\n+    [\n+      1345.4047719651514,\n+      1346.577711088827\n+    ],\n+    [\n+      3371.46559180944,\n+      3381.1675908715233\n+    ],\n+    [\n+      6763.499272675812,\n+      6802.836922523398\n+    ],\n+    [\n+      13617.303276168046,\n+      13767.578218242366\n+    ],\n+    [\n+      34362.33973200721,\n+      35115.67013831134\n+    ],\n+    [\n+      41330.486289880704,\n+      42334.41423852208\n+    ],\n+    [\n+      55286.24590714539,\n+      56812.751212457595\n+    ],\n+    [\n+      62192.333836900754,\n+      63904.59431026613\n+    ]\n+  ],\n+  \"2-2.H\": [\n+    [\n+      6.2982684665609066,\n+      6.670148948096735\n+    ],\n+    [\n+      13.078519410108907,\n+      13.463752891713007\n+    ],\n+    [\n+      32.61311965888856,\n+      32.25436240437934\n+    ],\n+    [\n+      66.47330553036171,\n+      66.18605752047202\n+    ],\n+    [\n+      134.42838210860725,\n+      134.52316496537657\n+    ],\n+    [\n+      337.14510622533766,\n+      337.24096357028225\n+    ],\n+    [\n+      674.9772226960267,\n+      675.0458344754437\n+    ],\n+    [\n+      1352.3325734339371,\n+      1354.039998489212\n+    ],\n+    [\n+      3388.5518104637654,\n+      3399.3546497131347\n+    ],\n+    [\n+      6797.268039013059,\n+      6838.406894419133\n+    ],\n+    [\n+      13687.099406459925,\n+      13842.679063610305\n+    ],\n+    [\n+      34556.025052782315,\n+      35344.516756244004\n+    ],\n+    [\n+      41565.990651155786,\n+      42615.51855936164\n+    ],\n+    [\n+      55601.62384421025,\n+      57190.718263857256\n+    ],\n+    [\n+      62581.76837083092,\n+      64401.0601082412\n+    ]\n+  ],\n+  \"2-3.E\": [\n+    [\n+      6.065616921169328,\n+      6.1504365954696425\n+    ],\n+    [\n+      12.809920354419988,\n+      12.841170799018668\n+    ],\n+    [\n+      33.072813807858154,\n+      32.976826483119254\n+    ],\n+    [\n+      67.10007243712865,\n+      67.04721349301681\n+    ],\n+    [\n+      135.15235004510205,\n+      135.1839493689823\n+    ],\n+    [\n+      338.9787311171726,\n+      338.933342385472\n+    ],\n+    [\n+      678.8866178713379,\n+      678.9101727067566\n+    ],\n+    [\n+      1359.5934608568407,\n+      1360.6467974427733\n+    ],\n+    [\n+      3406.968532957657,\n+      3416.388522982937\n+    ],\n+    [\n+      6832.748286738263,\n+      6869.731830992229\n+    ],\n+    [\n+      13746.520105983662,\n+      13885.280883993039\n+    ],\n+    [\n+      34650.75211651519,\n+      35331.543702013936\n+    ],\n+    [\n+      41661.30525309757,\n+      42561.805692389724\n+    ],\n+    [\n+      55692.745638805,\n+      57044.08943958408\n+    ],\n+    [\n+      62628.123756505986,\n+      64120.80273550121\n+    ]\n+  ],\n+  \"2-3.F\": [\n+    [\n+      6.1451298590004715,\n+      6.323312806894363\n+    ],\n+    [\n+      12.78564029538659,\n+      12.813957398284169\n+    ],\n+    [\n+      33.28113864696189,\n+      33.44948751659414\n+    ],\n+    [\n+      67.17006591953013,\n+      67.29965724063204\n+    ],\n+    [\n+      134.9194931730008,\n+      134.94409254727404\n+    ],\n+    [\n+      338.4768013088135,\n+      338.49617036825975\n+    ],\n+    [\n+      677.9086195544581,\n+      678.0889703537814\n+    ],\n+    [\n+      1357.2801082801245,\n+      1358.2908852802257\n+    ],\n+    [\n+      3399.9426140757814,\n+      3408.0089872584695\n+    ],\n+    [\n+      6816.484309287156,\n+      6848.514304306536\n+    ],\n+    [\n+      13707.37277119591,\n+      13829.259963648792\n+    ],\n+    [\n+      34549.93710022152,\n+      35185.06453803699\n+    ],\n+    [\n+      41543.606678006625,\n+      42392.521000040055\n+    ],\n+    [\n+      55544.70299925062,\n+      56836.22700089273\n+    ],\n+    [\n+      62447.65392471744,\n+      63858.535002677265\n+    ]\n+  ],\n+  \"2-3.G\": [\n+    [\n+      5.970742910908296,\n+      5.9870542660435815\n+    ],\n+    [\n+      12.77061949454395,\n+      12.8214208720344\n+    ],\n+    [\n+      33.09432545329419,\n+      33.172186393298986\n+    ],\n+    [\n+      66.88498727860929,\n+      66.92563730097423\n+    ],\n+    [\n+      134.401005371727,\n+      134.30229199171958\n+    ],\n+    [\n+      337.3992790220211,\n+      337.3324792824542\n+    ],\n+    [\n+      675.8538126752738,\n+      675.9643920474012\n+    ],\n+    [\n+      1353.2442664450662,\n+      1354.191625440407\n+    ],\n+    [\n+      3388.828029278635,\n+      3395.7095278934294\n+    ],\n+    [\n+      6794.162511450613,\n+      6823.721042705818\n+    ],\n+    [\n+      13662.32565258008,\n+      13777.176271257164\n+    ],\n+    [\n+      34408.65089313019,\n+      35000.4021466603\n+    ],\n+    [\n+      41367.87513084821,\n+      42158.115612358946\n+    ],\n+    [\n+      55298.34680609415,\n+      56498.66064473822\n+    ],\n+    [\n+      62207.281423079534,\n+      63554.0243118608\n+    ]\n+  ],\n+  \"2-3.H\": [\n+    [\n+      6.065388568902858,\n+      6.219963712678541\n+    ],\n+    [\n+      12.806623117726035,\n+      12.980625700082598\n+    ],\n+    [\n+      32.35444382556914,\n+      31.918983357718126\n+    ],\n+    [\n+      65.8739969599558,\n+      65.35478520154038\n+    ],\n+    [\n+      133.22116884278714,\n+      132.84310312203772\n+    ],\n+    [\n+      334.9972222990592,\n+      334.78532491350074\n+    ],\n+    [\n+      671.1908572361175,\n+      671.1575652005902\n+    ],\n+    [\n+      1344.4169715776081,\n+      1345.5810049702911\n+    ],\n+    [\n+      3368.0330110608315,\n+      3376.7452223428727\n+    ],\n+    [\n+      6753.973349124207,\n+      6788.631439696683\n+    ],\n+    [\n+      13591.468561446933,\n+      13727.20086355682\n+    ],\n+    [\n+      34294.97143334254,\n+      35003.605305535944\n+    ],\n+    [\n+      41251.50979859803,\n+      42203.512938945525\n+    ],\n+    [\n+      55175.389647639946,\n+      56626.382395602806\n+    ],\n+    [\n+      62114.272495946105,\n+      63790.72824222294\n+    ]\n+  ],\n+  \"2-4.E\": [\n+    [\n+      6.052624466125057,\n+      6.115316919424936\n+    ],\n+    [\n+      12.85709818303311,\n+      12.917343438372907\n+    ],\n+    [\n+      33.17635339867449,\n+      33.135946976378776\n+    ],\n+    [\n+      67.1457116978678,\n+      67.04198123559686\n+    ],\n+    [\n+      135.2258888943598,\n+      135.13664693865405\n+    ],\n+    [\n+      339.43746654495413,\n+      339.3629855926359\n+    ],\n+    [\n+      679.9010374589117,\n+      679.9621682555419\n+    ],\n+    [\n+      1361.7482341683904,\n+      1363.0018124894868\n+    ],\n+    [\n+      3411.983983368343,\n+      3421.531158473553\n+    ],\n+    [\n+      6843.062966530888,\n+      6880.587701723636\n+    ],\n+    [\n+      13775.6666028444,\n+      13921.601713593282\n+    ],\n+    [\n+      34762.13902031095,\n+      35507.96539656417\n+    ],\n+    [\n+      41812.90039335824,\n+      42810.51083053823\n+    ],\n+    [\n+      55935.88070976594,\n+      57460.56303606704\n+    ],\n+    [\n+      62653.224208723856,\n+      64080.00266888265\n+    ]\n+  ],\n+  \"2-4.F\": [\n+    [\n+      5.762425829433539,\n+      5.688950432977634\n+    ],\n+    [\n+      12.456752636508572,\n+      12.444770979837953\n+    ],\n+    [\n+      32.175650937926406,\n+      31.987972596514286\n+    ],\n+    [\n+      65.31912842738289,\n+      65.11499056002593\n+    ],\n+    [\n+      131.6541435816358,\n+      131.46569929199583\n+    ],\n+    [\n+      330.5248501344549,\n+      330.2502031876015\n+    ],\n+    [\n+      662.3598678889399,\n+      662.3252411741872\n+    ],\n+    [\n+      1325.911466487402,\n+      1326.2389755833124\n+    ],\n+    [\n+      3322.779368629642,\n+      3330.423668751964\n+    ],\n+    [\n+      6664.569541746268,\n+      6698.207739225536\n+    ],\n+    [\n+      13410.047147074898,\n+      13542.048717086327\n+    ],\n+    [\n+      33830.08189850396,\n+      34515.07682609032\n+    ],\n+    [\n+      40684.963542610334,\n+      41599.45365334137\n+    ],\n+    [\n+      54413.307667070156,\n+      55807.05585799116\n+    ],\n+    [\n+      61221.158244615515,\n+      62795.525117033576\n+    ]\n+  ],\n+  \"2-4.G\": [\n+    [\n+      6.070341051267456,\n+      6.170847331687273\n+    ],\n+    [\n+      12.857875395749131,\n+      12.960233281619693\n+    ],\n+    [\n+      33.13234060438814,\n+      33.153809047028126\n+    ],\n+    [\n+      67.09800895099406,\n+      67.16092228143188\n+    ],\n+    [\n+      134.95959907587152,\n+      135.03554933176787\n+    ],\n+    [\n+      338.29315397566046,\n+      338.1570476087306\n+    ],\n+    [\n+      677.8721772441622,\n+      678.0724009337299\n+    ],\n+    [\n+      1357.6856676563941,\n+      1359.2156497328988\n+    ],\n+    [\n+      3401.4482509589343,\n+      3411.3114772090444\n+    ],\n+    [\n+      6821.304926416684,\n+      6858.774077469289\n+    ],\n+    [\n+      13724.998948638151,\n+      13863.817545855754\n+    ],\n+    [\n+      34614.354246940034,\n+      35319.32373335975\n+    ],\n+    [\n+      41633.00762390816,\n+      42578.710239999054\n+    ],\n+    [\n+      55697.09547180788,\n+      57153.27478069034\n+    ],\n+    [\n+      62491.47971436501,\n+      63953.5114522588\n+    ]\n+  ],\n+  \"2-4.H\": [\n+    [\n+      5.845344418287414,\n+      5.821799769935096\n+    ],\n+    [\n+      12.202817809459749,\n+      11.877173008838636\n+    ],\n+    [\n+      32.37126406322409,\n+      32.20082131828209\n+    ],\n+    [\n+      65.91095319657803,\n+      65.9372764687776\n+    ],\n+    [\n+      132.4657541931543,\n+      132.36288499794608\n+    ],\n+    [\n+      332.63494816170845,\n+      332.64899245156784\n+    ],\n+    [\n+      665.8292225383996,\n+      665.6172811625219\n+    ],\n+    [\n+      1333.860445592804,\n+      1334.8397243460022\n+    ],\n+    [\n+      3341.4347372452544,\n+      3349.485025689769\n+    ],\n+    [\n+      6701.266042910816,\n+      6735.094984507908\n+    ],\n+    [\n+      13485.64300214163,\n+      13619.393186420923\n+    ],\n+    [\n+      34002.62130961265,\n+      34677.12977972808\n+    ],\n+    [\n+      40888.55644281394,\n+      41786.78140678472\n+    ],\n+    [\n+      54676.60173991174,\n+      56039.91756871576\n+    ],\n+    [\n+      61551.47580254186,\n+      63127.43654118778\n+    ]\n+  ],\n+  \"2-5.E\": [\n+    [\n+      5.696042151034911,\n+      5.70939493955685\n+    ],\n+    [\n+      12.030248115065678,\n+      11.921986912250322\n+    ],\n+    [\n+      31.453645965508752,\n+      31.39758638685498\n+    ],\n+    [\n+      63.73165887629873,\n+      63.66971550823379\n+    ],\n+    [\n+      128.1679683352037,\n+      127.97485183650035\n+    ],\n+    [\n+      322.1574885572915,\n+      322.2504744421248\n+    ],\n+    [\n+      644.778606322712,\n+      644.6541264405663\n+    ],\n+    [\n+      1292.0666440372745,\n+      1293.55472822548\n+    ],\n+    [\n+      3237.980973283173,\n+      3248.383551602284\n+    ],\n+    [\n+      6499.485325620529,\n+      6543.266119895344\n+    ],\n+    [\n+      13089.122649965324,\n+      13259.909282504013\n+    ],\n+    [\n+      33141.6041766934,\n+      34022.95589247983\n+    ],\n+    [\n+      39889.494226474715,\n+      41073.24994322254\n+    ],\n+    [\n+      53420.739584125935,\n+      55248.55136056926\n+    ],\n+    [\n+      60142.922862366875,\n+      62246.78389952029\n+    ]\n+  ],\n+  \"2-5.F\": [\n+    [\n+      5.773045460034582,\n+      5.810802634227362\n+    ],\n+    [\n+      12.374393002066348,\n+      12.497690189059188\n+    ],\n+    [\n+      31.829549320994822,\n+      31.856475683148666\n+    ],\n+    [\n+      64.35485889276606,\n+      64.32319696429028\n+    ],\n+    [\n+      129.36907001794253,\n+      129.18408713626118\n+    ],\n+    [\n+      324.954196727375,\n+      324.8507523451113\n+    ],\n+    [\n+      651.0226971236018,\n+      651.148825608133\n+    ],\n+    [\n+      1303.7547114348943,\n+      1304.936061226977\n+    ],\n+    [\n+      3267.3313699883274,\n+      3277.0838664147195\n+    ],\n+    [\n+      6556.986079650796,\n+      6598.23296355802\n+    ],\n+    [\n+      13197.826748281885,\n+      13357.275814968103\n+    ],\n+    [\n+      33384.97570412209,\n+      34206.57502914552\n+    ],\n+    [\n+      40173.028698623566,\n+      41275.62247870922\n+    ],\n+    [\n+      53773.59043658015,\n+      55465.33568333768\n+    ],\n+    [\n+      60544.030550980926,\n+      62498.98855993343\n+    ]\n+  ],\n+  \"2-5.G\": [\n+    [\n+      5.745002916187254,\n+      5.823629405709374\n+    ],\n+    [\n+      12.47544567348861,\n+      12.855268057889994\n+    ],\n+    [\n+      31.65864140297344,\n+      31.89395296496214\n+    ],\n+    [\n+      63.56174051926736,\n+      63.50143682685012\n+    ],\n+    [\n+      127.82361044322467,\n+      127.63133801211292\n+    ],\n+    [\n+      321.0786966879253,\n+      320.95904032062623\n+    ],\n+    [\n+      643.43206342643,\n+      643.6954697437482\n+    ],\n+    [\n+      1289.0915398650718,\n+      1291.076632541901\n+    ],\n+    [\n+      3232.9698719571716,\n+      3247.069311782438\n+    ],\n+    [\n+      6492.967916144307,\n+      6547.75904090262\n+    ],\n+    [\n+      13088.444609229433,\n+      13293.611581720794\n+    ],\n+    [\n+      33191.345534708555,\n+      34217.18150370796\n+    ],\n+    [\n+      39962.578122133,\n+      41335.056108168574\n+    ],\n+    [\n+      53548.51252312325,\n+      55662.851655337625\n+    ],\n+    [\n+      60331.67935044003,\n+      62807.02344464752\n+    ]\n+  ],\n+  \"2-5.H\": [\n+    [\n+      5.876303526653597,\n+      5.921637475933955\n+    ],\n+    [\n+      12.182244770600427,\n+      11.913621367461461\n+    ],\n+    [\n+      32.165399469613384,\n+      31.99792775340271\n+    ],\n+    [\n+      65.82087786394463,\n+      66.18193840503727\n+    ],\n+    [\n+      131.85889158192,\n+      132.00006821629933\n+    ],\n+    [\n+      330.4118907514908,\n+      330.33768342440135\n+    ],\n+    [\n+      661.7286474956638,\n+      661.6907759546093\n+    ],\n+    [\n+      1325.6432037663412,\n+      1326.960380882982\n+    ],\n+    [\n+      3321.401142389283,\n+      3330.81919127219\n+    ],\n+    [\n+      6662.540789225758,\n+      6700.482688130227\n+    ],\n+    [\n+      13405.499436440674,\n+      13553.03895212415\n+    ],\n+    [\n+      33856.37203436314,\n+      34601.54617639873\n+    ],\n+    [\n+      40724.85833479373,\n+      41720.629440924844\n+    ],\n+    [\n+      54480.668457092186,\n+      55998.40235390854\n+    ],\n+    [\n+      61292.5042940376,\n+      63001.69998878779\n+    ]\n+  ],\n+  \"2-6.E\": [\n+    [\n+      5.991504188537272,\n+      6.027575513444424\n+    ],\n+    [\n+      12.659035401554508,\n+      12.595863023542542\n+    ],\n+    [\n+      33.17856457975541,\n+      33.33471068671438\n+    ],\n+    [\n+      66.94107648858846,\n+      67.02473045146326\n+    ],\n+    [\n+      134.4242241204919,\n+      134.322244642735\n+    ],\n+    [\n+      337.4426687975004,\n+      337.3528056419475\n+    ],\n+    [\n+      675.9896374892475,\n+      676.1029550366679\n+    ],\n+    [\n+      1353.2185379057805,\n+      1353.8734876282151\n+    ],\n+    [\n+      3390.9559390816376,\n+      3399.3058355930984\n+    ],\n+    [\n+      6802.46936530173,\n+      6839.070276194474\n+    ],\n+    [\n+      13687.262320115524,\n+      13832.133290678757\n+    ],\n+    [\n+      34562.22417142481,\n+      35306.57452552986\n+    ],\n+    [\n+      41574.8491734476,\n+      42572.64189707494\n+    ],\n+    [\n+      55620.711999975516,\n+      57148.05038131916\n+    ],\n+    [\n+      62478.598870763555,\n+      64096.99193993519\n+    ]\n+  ],\n+  \"2-6.F\": [\n+    [\n+      5.8035823458873885,\n+      5.901130749805753\n+    ],\n+    [\n+      12.346879997477686,\n+      12.50296929640466\n+    ],\n+    [\n+      31.705534222535512,\n+      31.763157251570966\n+    ],\n+    [\n+      64.0220685911309,\n+      63.97070054884283\n+    ],\n+    [\n+      128.85580479530648,\n+      128.7872439049653\n+    ],\n+    [\n+      323.4376697424319,\n+      323.398157139617\n+    ],\n+    [\n+      647.8864747532044,\n+      648.0411656648655\n+    ],\n+    [\n+      1297.0690742303677,\n+      1297.897589389273\n+    ],\n+    [\n+      3250.167867276896,\n+      3258.5886541986206\n+    ],\n+    [\n+      6519.665234326425,\n+      6555.208055622283\n+    ],\n+    [\n+      13115.243239481164,\n+      13253.439122728827\n+    ],\n+    [\n+      33106.92500277185,\n+      33803.51940534205\n+    ],\n+    [\n+      39817.60322669727,\n+      40746.609412985934\n+    ],\n+    [\n+      53255.94125049834,\n+      54668.41350622625\n+    ],\n+    [\n+      59960.01469706806,\n+      61598.55957396365\n+    ]\n+  ],\n+  \"2-6.G\": [\n+    [\n+      5.890048257791807,\n+      6.142255700812149\n+    ],\n+    [\n+      12.245709200200986,\n+      12.428360585315595\n+    ],\n+    [\n+      31.43569828506577,\n+      31.55345997597878\n+    ],\n+    [\n+      63.61591714203449,\n+      63.82642770220231\n+    ],\n+    [\n+      127.63031309702336,\n+      127.67909437831835\n+    ],\n+    [\n+      320.2271188759124,\n+      320.3463710242269\n+    ],\n+    [\n+      641.2053061577791,\n+      641.4255169871436\n+    ],\n+    [\n+      1284.5835848576485,\n+      1286.4301297008233\n+    ],\n+    [\n+      3219.4983231895694,\n+      3231.0346348390667\n+    ],\n+    [\n+      6462.972298503154,\n+      6509.501429751068\n+    ],\n+    [\n+      13018.203119382359,\n+      13194.516857407769\n+    ],\n+    [\n+      32962.09092604797,\n+      33861.093990905865\n+    ],\n+    [\n+      39677.39903454693,\n+      40886.02482429969\n+    ],\n+    [\n+      53148.58379915067,\n+      55021.317461907434\n+    ],\n+    [\n+      59884.20206139703,\n+      62089.60260745165\n+    ]\n+  ],\n+  \"2-6.H\": [\n+    [\n+      5.854897031343982,\n+      5.909532829829914\n+    ],\n+    [\n+      12.450403601143579,\n+      12.509422517668586\n+    ],\n+    [\n+      32.182214470133644,\n+      32.200087712243935\n+    ],\n+    [\n+      65.1450686550309,\n+      65.17131517095389\n+    ],\n+    [\n+      131.14616199761906,\n+      131.26463509290124\n+    ],\n+    [\n+      328.6141913192491,\n+      328.47374521933887\n+    ],\n+    [\n+      658.4308986360137,\n+      658.5622981379762\n+    ],\n+    [\n+      1318.7327470446617,\n+      1320.0776832375052\n+    ],\n+    [\n+      3304.2351028595517,\n+      3313.8399451207333\n+    ],\n+    [\n+      6626.243827204666,\n+      6662.579488938191\n+    ],\n+    [\n+      13329.870269489662,\n+      13468.984780776042\n+    ],\n+    [\n+      33656.98557877869,\n+      34375.28858739975\n+    ],\n+    [\n+      40488.67082332526,\n+      41455.29191211384\n+    ],\n+    [\n+      54171.0808118227,\n+      55655.36474031973\n+    ],\n+    [\n+      60972.82446051684,\n+      62674.57725251054\n+    ]\n+  ],\n+  \"3-1.E\": [\n+    [\n+      5.875767299641436,\n+      5.948876891592257\n+    ],\n+    [\n+      12.422841921190994,\n+      12.448112326099604\n+    ],\n+    [\n+      32.19104469132736,\n+      32.20227292996578\n+    ],\n+    [\n+      65.11364747253776,\n+      65.07716424336105\n+    ],\n+    [\n+      131.22145800104158,\n+      131.3522334745256\n+    ],\n+    [\n+      328.99879222783954,\n+      329.0847971993794\n+    ],\n+    [\n+      658.6159345516869,\n+      658.6157392174449\n+    ],\n+    [\n+      1318.8789677718446,\n+      1319.735721544863\n+    ],\n+    [\n+      3303.985948197625,\n+      3311.747444459513\n+    ],\n+    [\n+      6625.667244581537,\n+      6658.217827529421\n+    ],\n+    [\n+      13322.670136322758,\n+      13452.18889077766\n+    ],\n+    [\n+      33623.05959379889,\n+      34289.532146765\n+    ],\n+    [\n+      40433.96649059294,\n+      41323.472680521845\n+    ],\n+    [\n+      54067.80248348747,\n+      55416.69847074918\n+    ],\n+    [\n+      60856.261958071555,\n+      62405.16145296517\n+    ]\n+  ],\n+  \"3-1.F\": [\n+    [\n+      6.010462863349459,\n+      6.09054349437436\n+    ],\n+    [\n+      12.720338429507946,\n+      12.770071230953617\n+    ],\n+    [\n+      32.76661404633487,\n+      32.64479328232782\n+    ],\n+    [\n+      66.48598352179651,\n+      66.38640859012523\n+    ],\n+    [\n+      133.8886726789493,\n+      133.7980621137307\n+    ],\n+    [\n+      336.0396028165138,\n+      335.9189813897377\n+    ],\n+    [\n+      673.1728032084718,\n+      673.2171452361054\n+    ],\n+    [\n+      1348.1986833098583,\n+      1349.3334637699406\n+    ],\n+    [\n+      3377.11860018481,\n+      3385.383391082721\n+    ],\n+    [\n+      6772.567671052296,\n+      6806.751109505735\n+    ],\n+    [\n+      13615.971450464604,\n+      13747.87938054281\n+    ],\n+    [\n+      34350.511437719404,\n+      35017.72444840318\n+    ],\n+    [\n+      41303.92508624008,\n+      42191.13153406622\n+    ],\n+    [\n+      55222.56533224779,\n+      56562.78354478259\n+    ],\n+    [\n+      62154.38170485206,\n+      63692.43812670288\n+    ]\n+  ],\n+  \"3-1.G\": [\n+    [\n+      5.881563663779411,\n+      5.888670026682248\n+    ],\n+    [\n+      12.477891122635997,\n+      12.407085446254959\n+    ],\n+    [\n+      32.192698151575726,\n+      31.816832999490668\n+    ],\n+    [\n+      65.55632680621052,\n+      65.16878203118921\n+    ],\n+    [\n+      132.37372050724636,\n+      132.0556853730922\n+    ],\n+    [\n+      332.491219974968,\n+      332.05145231088875\n+    ],\n+    [\n+      666.6603320896476,\n+      666.6573549366559\n+    ],\n+    [\n+      1334.8691090784432,\n+      1335.611843555426\n+    ],\n+    [\n+      3344.5627491002742,\n+      3352.627726009655\n+    ],\n+    [\n+      6707.531411498724,\n+      6741.398446969162\n+    ],\n+    [\n+      13485.848470697083,\n+      13616.501957782595\n+    ],\n+    [\n+      34018.73605004567,\n+      34677.61773137724\n+    ],\n+    [\n+      40907.039556565,\n+      41785.54083033894\n+    ],\n+    [\n+      54702.135526916005,\n+      56039.929789054026\n+    ],\n+    [\n+      61585.20366530897,\n+      63137.66821335536\n+    ]\n+  ],\n+  \"3-1.H\": [\n+    [\n+      5.950022779780963,\n+      6.021377474770303\n+    ],\n+    [\n+      12.721495818915063,\n+      12.88518714818824\n+    ],\n+    [\n+      32.34316211601187,\n+      32.08737063428206\n+    ],\n+    [\n+      65.8693745164178,\n+      65.73617684392276\n+    ],\n+    [\n+      132.69127092106817,\n+      132.57610104135023\n+    ],\n+    [\n+      333.093438036338,\n+      332.96927277267076\n+    ],\n+    [\n+      667.2740420520065,\n+      667.3119303626003\n+    ],\n+    [\n+      1336.0288888992343,\n+      1336.785037036595\n+    ],\n+    [\n+      3346.8051587980995,\n+      3354.2426525949036\n+    ],\n+    [\n+      6711.17322948036,\n+      6742.926822462917\n+    ],\n+    [\n+      13488.177120675406,\n+      13609.149942623671\n+    ],\n+    [\n+      34000.50461834885,\n+      34610.71850753338\n+    ],\n+    [\n+      40875.40417606428,\n+      41685.11733606746\n+    ],\n+    [\n+      54629.63972968628,\n+      55843.50582195104\n+    ],\n+    [\n+      61455.27935568248,\n+      62817.57270769288\n+    ]\n+  ],\n+  \"3-2.E\": [\n+    [\n+      6.00893388605824,\n+      6.147160293996579\n+    ],\n+    [\n+      12.613930168677756,\n+      12.68049789802732\n+    ],\n+    [\n+      32.61227232845152,\n+      32.65520285300064\n+    ],\n+    [\n+      65.96372189018072,\n+      65.98857609679183\n+    ],\n+    [\n+      132.77630646053376,\n+      132.87485135730904\n+    ],\n+    [\n+      332.9230003450891,\n+      332.9512832026978\n+    ],\n+    [\n+      666.6878457761859,\n+      666.7861857171249\n+    ],\n+    [\n+      1335.0112432989674,\n+      1336.0441639318192\n+    ],\n+    [\n+      3344.564262963388,\n+      3353.001884474053\n+    ],\n+    [\n+      6706.892511470226,\n+      6740.860361265535\n+    ],\n+    [\n+      13487.007772175672,\n+      13620.32760716288\n+    ],\n+    [\n+      34034.937364728474,\n+      34714.49814380569\n+    ],\n+    [\n+      40928.35238966514,\n+      41833.72356992527\n+    ],\n+    [\n+      54725.65317302172,\n+      56094.33447495861\n+    ],\n+    [\n+      61589.24556070696,\n+      63152.94607201975\n+    ]\n+  ],\n+  \"3-2.F\": [\n+    [\n+      6.159781962760703,\n+      6.387529983460927\n+    ],\n+    [\n+      12.796182973782768,\n+      12.90383883366059\n+    ],\n+    [\n+      32.976541798117445,\n+      33.01589470317617\n+    ],\n+    [\n+      66.6495986186588,\n+      66.61562632530384\n+    ],\n+    [\n+      134.053223386543,\n+      133.93026654309196\n+    ],\n+    [\n+      336.61277210550816,\n+      336.5711290529532\n+    ],\n+    [\n+      674.2968384677074,\n+      674.4757671432602\n+    ],\n+    [\n+      1350.5842852473559,\n+      1352.1252956193055\n+    ],\n+    [\n+      3382.9528812964713,\n+      3392.1042489897222\n+    ],\n+    [\n+      6782.256587296354,\n+      6816.220892354833\n+    ],\n+    [\n+      13628.159495035325,\n+      13751.918341056957\n+    ],\n+    [\n+      34326.401753854945,\n+      34917.257660288014\n+    ],\n+    [\n+      41258.86273299557,\n+      42037.326656544836\n+    ],\n+    [\n+      55123.27715960142,\n+      56276.844235107215\n+    ],\n+    [\n+      62031.06724052516,\n+      63346.83757584659\n+    ]\n+  ],\n+  \"3-2.G\": [\n+    [\n+      5.706042007289974,\n+      5.653588430415627\n+    ],\n+    [\n+      12.28096910920733,\n+      12.259572134653615\n+    ],\n+    [\n+      31.909499078084263,\n+      31.88635026673295\n+    ],\n+    [\n+      64.5100894428699,\n+      64.37071233930108\n+    ],\n+    [\n+      129.81179344061968,\n+      129.54018078566048\n+    ],\n+    [\n+      325.94766849672624,\n+      325.5093177116412\n+    ],\n+    [\n+      653.6671279982723,\n+      653.7766162095911\n+    ],\n+    [\n+      1309.072116101648,\n+      1310.2455278860875\n+    ],\n+    [\n+      3282.385553200612,\n+      3293.885256866002\n+    ],\n+    [\n+      6588.922865843417,\n+      6635.536754760914\n+    ],\n+    [\n+      13268.45834499501,\n+      13445.152982850866\n+    ],\n+    [\n+      33574.368342069574,\n+      34454.92072751799\n+    ],\n+    [\n+      40402.00117568242,\n+      41577.49556536349\n+    ],\n+    [\n+      54081.855862602904,\n+      55874.65296273367\n+    ],\n+    [\n+      60912.5970077598,\n+      63004.65713718416\n+    ]\n+  ],\n+  \"3-2.H\": [\n+    [\n+      6.077721135699653,\n+      6.261338308577567\n+    ],\n+    [\n+      12.736682010028472,\n+      12.872236734106528\n+    ],\n+    [\n+      32.712016420766446,\n+      32.71228196243721\n+    ],\n+    [\n+      66.29194279435,\n+      66.35686984481313\n+    ],\n+    [\n+      133.30408157098208,\n+      133.35044320712734\n+    ],\n+    [\n+      334.52461948008073,\n+      334.6996115690805\n+    ],\n+    [\n+      669.5745214830009,\n+      669.6460353282607\n+    ],\n+    [\n+      1340.9854324200062,\n+      1342.1622886906734\n+    ],\n+    [\n+      3359.6038658439784,\n+      3368.501899733304\n+    ],\n+    [\n+      6739.832835350599,\n+      6777.614028071497\n+    ],\n+    [\n+      13562.0792291804,\n+      13711.554211619896\n+    ],\n+    [\n+      34267.5672209918,\n+      35037.52905774022\n+    ],\n+    [\n+      41223.333769040124,\n+      42254.22727442485\n+    ],\n+    [\n+      55157.66293002278,\n+      56735.4821164198\n+    ],\n+    [\n+      62088.88422516337,\n+      63902.448916499015\n+    ]\n+  ],\n+  \"3-3.E\": [\n+    [\n+      5.733198682824208,\n+      5.7118888502500065\n+    ],\n+    [\n+      12.225106680708022,\n+      12.157572080906787\n+    ],\n+    [\n+      31.88377871861457,\n+      31.859276892667513\n+    ],\n+    [\n+      64.54562492488458,\n+      64.49085718862126\n+    ],\n+    [\n+      129.78458378745813,\n+      129.58475697981413\n+    ],\n+    [\n+      325.9578397226096,\n+      325.7782088721554\n+    ],\n+    [\n+      653.0970938390733,\n+      653.1352102675279\n+    ],\n+    [\n+      1308.213023118257,\n+      1309.5255621301658\n+    ],\n+    [\n+      3280.148063756251,\n+      3291.907926873368\n+    ],\n+    [\n+      6588.83791012061,\n+      6640.432434506216\n+    ],\n+    [\n+      13291.031253077039,\n+      13494.868986224415\n+    ],\n+    [\n+      33711.64609097063,\n+      34763.77849644713\n+    ],\n+    [\n+      40596.46465236536,\n+      42010.756664734436\n+    ],\n+    [\n+      54403.28931989061,\n+      56583.97926579318\n+    ],\n+    [\n+      61275.42805022303,\n+      63806.16321960635\n+    ]\n+  ],\n+  \"3-3.F\": [\n+    [\n+      5.7001096359688725,\n+      5.68812612217175\n+    ],\n+    [\n+      12.179785485646505,\n+      12.157320142697758\n+    ],\n+    [\n+      31.71012453281466,\n+      31.747481109456444\n+    ],\n+    [\n+      64.02857572379398,\n+      63.93361312311932\n+    ],\n+    [\n+      128.94710531751363,\n+      128.8688438623581\n+    ],\n+    [\n+      323.53595975051786,\n+      323.3414053996259\n+    ],\n+    [\n+      648.3384816547477,\n+      648.4376605999645\n+    ],\n+    [\n+      1299.0647361433148,\n+      1300.8753009320915\n+    ],\n+    [\n+      3257.066517561419,\n+      3269.874439827021\n+    ],\n+    [\n+      6539.020117895371,\n+      6589.024133567973\n+    ],\n+    [\n+      13178.460356645664,\n+      13365.888309707661\n+    ],\n+    [\n+      33356.84505978911,\n+      34288.937497717874\n+    ],\n+    [\n+      40144.6694938805,\n+      41386.32697240174\n+    ],\n+    [\n+      53738.54922410375,\n+      55620.140337048295\n+    ],\n+    [\n+      60399.71881996477,\n+      62456.377762297576\n+    ]\n+  ],\n+  \"3-3.G\": [\n+    [\n+      5.656784458403973,\n+      5.638741205508585\n+    ],\n+    [\n+      12.08071063716275,\n+      12.0388121995709\n+    ],\n+    [\n+      31.375000736980247,\n+      31.283905753549046\n+    ],\n+    [\n+      63.61082909953065,\n+      63.516093544681866\n+    ],\n+    [\n+      127.84108327632765,\n+      127.49869013009895\n+    ],\n+    [\n+      321.4387276103958,\n+      321.25708015415455\n+    ],\n+    [\n+      644.0392867029718,\n+      644.0646348552657\n+    ],\n+    [\n+      1290.5948580388037,\n+      1292.3913502016756\n+    ],\n+    [\n+      3237.2061775818916,\n+      3251.3119673203855\n+    ],\n+    [\n+      6505.518930418752,\n+      6564.471125295459\n+    ],\n+    [\n+      13133.295769865552,\n+      13360.075657801648\n+    ],\n+    [\n+      33394.5652192239,\n+      34592.00865098833\n+    ],\n+    [\n+      40239.916137248816,\n+      41855.770993738304\n+    ],\n+    [\n+      53977.12251020205,\n+      56483.26121690951\n+    ],\n+    [\n+      60765.64807377203,\n+      63630.20594064851\n+    ]\n+  ],\n+  \"3-3.H\": [\n+    [\n+      5.814360112503609,\n+      5.925756816303308\n+    ],\n+    [\n+      12.332816052194493,\n+      12.480162923920798\n+    ],\n+    [\n+      31.771394693722907,\n+      31.909728610308523\n+    ],\n+    [\n+      64.14222337781496,\n+      64.24018139551657\n+    ],\n+    [\n+      128.78887651914252,\n+      128.71187585750297\n+    ],\n+    [\n+      323.4525825868258,\n+      323.57475044270535\n+    ],\n+    [\n+      647.5663194835516,\n+      647.6946489021288\n+    ],\n+    [\n+      1297.2565283779163,\n+      1298.8619162473565\n+    ],\n+    [\n+      3252.9322924651856,\n+      3265.615440047727\n+    ],\n+    [\n+      6533.674586679652,\n+      6586.397305251021\n+    ],\n+    [\n+      13179.69291915942,\n+      13383.856385032665\n+    ],\n+    [\n+      33410.15549764052,\n+      34441.19876528948\n+    ],\n+    [\n+      40223.51894197849,\n+      41600.48633358407\n+    ],\n+    [\n+      53875.75795553595,\n+      55973.71909909499\n+    ],\n+    [\n+      60685.40607026818,\n+      63126.63749771441\n+    ]\n+  ],\n+  \"3-4.E\": [\n+    [\n+      5.850407432934452,\n+      5.989697972166232\n+    ],\n+    [\n+      12.223806946610244,\n+      12.240564288262778\n+    ],\n+    [\n+      31.565220546082138,\n+      31.44567593366538\n+    ],\n+    [\n+      63.96243640735597,\n+      63.776614637219645\n+    ],\n+    [\n+      128.81620383502698,\n+      128.55697087024885\n+    ],\n+    [\n+      323.64325906706256,\n+      323.42920833079916\n+    ],\n+    [\n+      648.5788655580694,\n+      648.6644791344544\n+    ],\n+    [\n+      1299.3405217328743,\n+      1300.918069553596\n+    ],\n+    [\n+      3259.035749864791,\n+      3272.54757848889\n+    ],\n+    [\n+      6548.28064476144,\n+      6605.112504288106\n+    ],\n+    [\n+      13213.891763157235,\n+      13432.820879923107\n+    ],\n+    [\n+      33549.98283773581,\n+      34673.573054808425\n+    ],\n+    [\n+      40402.22191597311,\n+      41902.652039131346\n+    ],\n+    [\n+      54142.5760611875,\n+      56437.52183710134\n+    ],\n+    [\n+      60992.42507909283,\n+      63663.229002317894\n+    ]\n+  ],\n+  \"3-4.F\": [\n+    [\n+      5.690634980847967,\n+      5.732580988905519\n+    ],\n+    [\n+      12.041491583520463,\n+      12.01558966298259\n+    ],\n+    [\n+      31.271989203347694,\n+      31.221253424247315\n+    ],\n+    [\n+      63.2652317471192,\n+      63.11574513912051\n+    ],\n+    [\n+      127.33748863474761,\n+      127.07591334001107\n+    ],\n+    [\n+      319.84131702968847,\n+      319.5297337167922\n+    ],\n+    [\n+      641.2288990850984,\n+      641.3819688002761\n+    ],\n+    [\n+      1284.4542899900978,\n+      1285.9892226985687\n+    ],\n+    [\n+      3221.8009796822544,\n+      3235.200344202242\n+    ],\n+    [\n+      6471.7239454824075,\n+      6526.219257058557\n+    ],\n+    [\n+      13050.669388257234,\n+      13254.478547873487\n+    ],\n+    [\n+      33081.99491464224,\n+      34103.06516912632\n+    ],\n+    [\n+      39832.73768241704,\n+      41200.962790341015\n+    ],\n+    [\n+      53366.19967673887,\n+      55464.95947437851\n+    ],\n+    [\n+      59931.572014825186,\n+      62179.07251398405\n+    ]\n+  ],\n+  \"3-4.G\": [\n+    [\n+      5.639216358243525,\n+      5.506884234781158\n+    ],\n+    [\n+      12.247797668899867,\n+      12.160185883437336\n+    ],\n+    [\n+      32.135238304686006,\n+      32.25091648636056\n+    ],\n+    [\n+      64.8606235819058,\n+      64.89473125741642\n+    ],\n+    [\n+      130.25491257917443,\n+      130.07043538064062\n+    ],\n+    [\n+      327.0771767658334,\n+      326.8754616102512\n+    ],\n+    [\n+      655.4060793755158,\n+      655.4675479618151\n+    ],\n+    [\n+      1312.674732458013,\n+      1313.8747440712866\n+    ],\n+    [\n+      3290.992369089375,\n+      3302.153090641894\n+    ],\n+    [\n+      6606.065672513775,\n+      6651.9221450504465\n+    ],\n+    [\n+      13314.400240260837,\n+      13492.7163623375\n+    ],\n+    [\n+      33690.10143838216,\n+      34598.268326407\n+    ],\n+    [\n+      40547.17160911063,\n+      41762.633221241085\n+    ],\n+    [\n+      54284.64051881768,\n+      56140.95165627172\n+    ],\n+    [\n+      61018.123600092025,\n+      63050.75462063732\n+    ]\n+  ],\n+  \"3-4.H\": [\n+    [\n+      5.893579608898566,\n+      6.114683091177086\n+    ],\n+    [\n+      12.350129412988544,\n+      12.569396810621406\n+    ],\n+    [\n+      31.377608541713464,\n+      31.258339588599096\n+    ],\n+    [\n+      63.98051415009293,\n+      64.19332381311052\n+    ],\n+    [\n+      128.03866029166747,\n+      127.76733199079753\n+    ],\n+    [\n+      322.0253557633404,\n+      322.11369451739256\n+    ],\n+    [\n+      644.8173301759939,\n+      644.9868776208061\n+    ],\n+    [\n+      1292.1032931598438,\n+      1294.140393481467\n+    ],\n+    [\n+      3239.936891626172,\n+      3253.5970675600834\n+    ],\n+    [\n+      6507.863107778478,\n+      6562.743264026186\n+    ],\n+    [\n+      13130.76869677533,\n+      13342.067614187015\n+    ],\n+    [\n+      33346.61290428811,\n+      34458.81944805141\n+    ],\n+    [\n+      40170.111642996315,\n+      41669.66741404503\n+    ],\n+    [\n+      53849.314003260886,\n+      56160.814907578504\n+    ],\n+    [\n+      60669.410978334556,\n+      63366.44780748459\n+    ]\n+  ],\n+  \"3-5.E\": [\n+    [\n+      6.024922721296829,\n+      6.146779778253719\n+    ],\n+    [\n+      12.660720563793234,\n+      12.706247609860885\n+    ],\n+    [\n+      32.62664731279842,\n+      32.50874229458734\n+    ],\n+    [\n+      66.08513271422518,\n+      65.8765720074719\n+    ],\n+    [\n+      133.37718581727302,\n+      133.36127231847527\n+    ],\n+    [\n+      334.50834541108884,\n+      334.3274324902811\n+    ],\n+    [\n+      670.2773626425302,\n+      670.37163228951\n+    ],\n+    [\n+      1342.2503960681865,\n+      1343.3310551865413\n+    ],\n+    [\n+      3362.8604978859125,\n+      3371.610648092576\n+    ],\n+    [\n+      6747.125805950754,\n+      6785.396963098746\n+    ],\n+    [\n+      13577.944008273675,\n+      13730.555075365863\n+    ],\n+    [\n+      34332.166324785234,\n+      35134.06505063054\n+    ],\n+    [\n+      41306.80362173145,\n+      42382.46224009114\n+    ],\n+    [\n+      55281.365310202156,\n+      56932.41662412665\n+    ],\n+    [\n+      62246.825697532695,\n+      64162.79453852545\n+    ]\n+  ],\n+  \"3-5.F\": [\n+    [\n+      5.850644167982907,\n+      5.774266678073709\n+    ],\n+    [\n+      12.642620089137122,\n+      12.6217454333091\n+    ],\n+    [\n+      32.88789085471955,\n+      32.90577246275172\n+    ],\n+    [\n+      66.33802098670436,\n+      66.12919803781391\n+    ],\n+    [\n+      133.7383865760084,\n+      133.57450208036062\n+    ],\n+    [\n+      335.70382667770656,\n+      335.44046907021897\n+    ],\n+    [\n+      672.8057074678912,\n+      672.8691733928356\n+    ],\n+    [\n+      1347.156068927457,\n+      1348.020731989367\n+    ],\n+    [\n+      3375.778862161453,\n+      3384.639873332771\n+    ],\n+    [\n+      6771.339656077919,\n+      6808.189197687645\n+    ],\n+    [\n+      13620.115729564763,\n+      13763.299676715069\n+    ],\n+    [\n+      34381.56627930375,\n+      35101.208944277\n+    ],\n+    [\n+      41347.76811530963,\n+      42305.02170176909\n+    ],\n+    [\n+      55291.91595007334,\n+      56737.494087896994\n+    ],\n+    [\n+      62223.10562080348,\n+      63870.01135967822\n+    ]\n+  ],\n+  \"3-5.G\": [\n+    [\n+      5.944925955545215,\n+      5.9727729549291695\n+    ],\n+    [\n+      12.836103875403365,\n+      13.034828673588759\n+    ],\n+    [\n+      32.953684984646266,\n+      33.09799277949767\n+    ],\n+    [\n+      66.18061552673724,\n+      65.9361336140036\n+    ],\n+    [\n+      133.8372402714274,\n+      134.01672182931847\n+    ],\n+    [\n+      335.14382481391584,\n+      334.93378432053544\n+    ],\n+    [\n+      671.7236778901556,\n+      671.9334360132167\n+    ],\n+    [\n+      1345.260334343148,\n+      1346.6882209764976\n+    ],\n+    [\n+      3371.282335152499,\n+      3381.803562271204\n+    ],\n+    [\n+      6764.6197808711595,\n+      6807.111128166439\n+    ],\n+    [\n+      13615.588244001172,\n+      13778.255887237392\n+    ],\n+    [\n+      34416.94532540615,\n+      35237.82086093293\n+    ],\n+    [\n+      41408.99355333635,\n+      42508.00942543139\n+    ],\n+    [\n+      55418.82669355118,\n+      57102.50568153383\n+    ],\n+    [\n+      62329.71910052943,\n+      64206.29440470043\n+    ]\n+  ],\n+  \"3-5.H\": [\n+    [\n+      6.16080565179032,\n+      6.505590415580628\n+    ],\n+    [\n+      12.652333274145882,\n+      12.8442491325706\n+    ],\n+    [\n+      32.40056494371644,\n+      32.450952132345364\n+    ],\n+    [\n+      66.06900875919713,\n+      66.64783531678007\n+    ],\n+    [\n+      131.77575286423883,\n+      131.76639070500428\n+    ],\n+    [\n+      331.09480830726085,\n+      331.53535458615096\n+    ],\n+    [\n+      662.2760625028263,\n+      662.4477774182811\n+    ],\n+    [\n+      1326.9917454799142,\n+      1328.9829930584688\n+    ],\n+    [\n+      3325.472538294072,\n+      3337.286195686491\n+    ],\n+    [\n+      6673.932933650874,\n+      6719.9853698665165\n+    ],\n+    [\n+      13438.816997915179,\n+      13613.759321932164\n+    ],\n+    [\n+      34027.6439400402,\n+      34934.67861038394\n+    ],\n+    [\n+      40954.26138978766,\n+      42170.44722421509\n+    ],\n+    [\n+      54839.158676338426,\n+      56708.82800756187\n+    ],\n+    [\n+      61764.47099122606,\n+      63943.04469885754\n+    ]\n+  ],\n+  \"3-6.E\": [\n+    [\n+      6.092581371335289,\n+      6.40718145819617\n+    ],\n+    [\n+      12.577729468545254,\n+      12.782759589159298\n+    ],\n+    [\n+      32.123292666974955,\n+      32.12292140336504\n+    ],\n+    [\n+      65.02083724759478,\n+      65.0052194640777\n+    ],\n+    [\n+      131.01780735677022,\n+      131.17375162562493\n+    ],\n+    [\n+      328.1686579569146,\n+      327.9985742786005\n+    ],\n+    [\n+      657.7659707087814,\n+      658.0652869815628\n+    ],\n+    [\n+      1316.792646745941,\n+      1317.8634514844723\n+    ],\n+    [\n+      3299.7613468418804,\n+      3309.0583868937233\n+    ],\n+    [\n+      6619.724224095067,\n+      6657.897328053008\n+    ],\n+    [\n+      13319.864953558961,\n+      13468.230011998838\n+    ],\n+    [\n+      33658.51843940589,\n+      34421.962852555655\n+    ],\n+    [\n+      40492.953911049284,\n+      41516.58064282892\n+    ],\n+    [\n+      54190.858126416795,\n+      55766.55407625231\n+    ],\n+    [\n+      61027.51417396746,\n+      62866.5847653667\n+    ]\n+  ],\n+  \"3-6.F\": [\n+    [\n+      5.762984987720595,\n+      5.677760592873547\n+    ],\n+    [\n+      12.454094173919533,\n+      12.412582997381556\n+    ],\n+    [\n+      32.59490043128487,\n+      32.75608549234144\n+    ],\n+    [\n+      65.69737838608528,\n+      65.72898798701205\n+    ],\n+    [\n+      132.12027245245756,\n+      132.11221048615428\n+    ],\n+    [\n+      331.46453912392644,\n+      331.41308617296164\n+    ],\n+    [\n+      663.8612364305137,\n+      663.8937073851321\n+    ],\n+    [\n+      1329.3743337131323,\n+      1330.2950035370416\n+    ],\n+    [\n+      3329.9235873484186,\n+      3337.5336733008844\n+    ],\n+    [\n+      6678.261014699166,\n+      6711.22547144786\n+    ],\n+    [\n+      13431.914560259655,\n+      13565.01188654615\n+    ],\n+    [\n+      33903.48320795926,\n+      34590.11705738468\n+    ],\n+    [\n+      40774.91657115692,\n+      41693.32907446954\n+    ],\n+    [\n+      54538.49257128282,\n+      55943.00169103168\n+    ],\n+    [\n+      61405.88760889055,\n+      63038.56036814553\n+    ]\n+  ],\n+  \"3-6.G\": [\n+    [\n+      5.978692200237094,\n+      6.078620382237521\n+    ],\n+    [\n+      12.719526908667794,\n+      12.879242579731038\n+    ],\n+    [\n+      32.567738769203956,\n+      32.52957744300358\n+    ],\n+    [\n+      66.00605996263982,\n+      65.99925255902504\n+    ],\n+    [\n+      132.53478885547233,\n+      132.24350482482282\n+    ],\n+    [\n+      333.0835797614572,\n+      332.89899571737504\n+    ],\n+    [\n+      667.4879287174348,\n+      667.638380692312\n+    ],\n+    [\n+      1336.6601224213844,\n+      1337.8452951305323\n+    ],\n+    [\n+      3349.114706439466,\n+      3358.3634666691783\n+    ],\n+    [\n+      6718.714664112099,\n+      6757.063156187087\n+    ],\n+    [\n+      13517.770950473501,\n+      13665.488144140705\n+    ],\n+    [\n+      34155.09629106938,\n+      34920.86177092974\n+    ],\n+    [\n+      41090.611805706365,\n+      42118.81637852119\n+    ],\n+    [\n+      54988.5614570361,\n+      56571.11695867222\n+    ],\n+    [\n+      61928.68887749895,\n+      63779.419526172875\n+    ]\n+  ],\n+  \"3-6.H\": [\n+    [\n+      5.635966776394523,\n+      5.4282264920642955\n+    ],\n+    [\n+      12.303008865134531,\n+      12.10875690752958\n+    ],\n+    [\n+      32.52030100959645,\n+      32.59423587007157\n+    ],\n+    [\n+      66.08638242973868,\n+      66.48502504876731\n+    ],\n+    [\n+      132.11569211550335,\n+      132.05409049774735\n+    ],\n+    [\n+      331.7659057178902,\n+      331.89294798922424\n+    ],\n+    [\n+      663.9450309787702,\n+      663.8152008530926\n+    ],\n+    [\n+      1329.5805616143678,\n+      1330.2145900909516\n+    ],\n+    [\n+      3330.0289896118584,\n+      3336.5079279067036\n+    ],\n+    [\n+      6676.934954193352,\n+      6706.074197266708\n+    ],\n+    [\n+      13419.284021606894,\n+      13532.915607431603\n+    ],\n+    [\n+      33819.3562011709,\n+      34405.9121927051\n+    ],\n+    [\n+      40660.75284207991,\n+      41444.81964550363\n+    ],\n+    [\n+      54356.1029454322,\n+      55548.858928628535\n+    ],\n+    [\n+      61173.79537159323,\n+      62539.74753294483\n+    ]\n+  ],\n+  \"4-1.E\": [\n+    [\n+      6.147124045581604,\n+      6.189667358948234\n+    ],\n+    [\n+      12.861798263202228,\n+      12.684767686545296\n+    ],\n+    [\n+      33.60186308021694,\n+      33.35497738201745\n+    ],\n+    [\n+      68.29335318799596,\n+      68.05483676681955\n+    ],\n+    [\n+      137.66400050405147,\n+      137.4314302531795\n+    ],\n+    [\n+      345.75958193672176,\n+      345.52956343738566\n+    ],\n+    [\n+      692.7387750816806,\n+      692.6664973699562\n+    ],\n+    [\n+      1387.3672988868734,\n+      1388.2815259329327\n+    ],\n+    [\n+      3474.843337403278,\n+      3482.321270044616\n+    ],\n+    [\n+      6967.972419798925,\n+      7000.50151294841\n+    ],\n+    [\n+      14008.91138255391,\n+      14138.863695183374\n+    ],\n+    [\n+      35356.621979303614,\n+      36045.09542537523\n+    ],\n+    [\n+      42524.30536207184,\n+      43450.634607694534\n+    ],\n+    [\n+      56868.33698641796,\n+      58280.30530021701\n+    ],\n+    [\n+      62983.78972513063,\n+      63545.54270205432\n+    ]\n+  ],\n+  \"4-1.F\": [\n+    [\n+      6.215456084815327,\n+      6.282159601991496\n+    ],\n+    [\n+      13.268862450785898,\n+      13.402509392156118\n+    ],\n+    [\n+      34.076459177839446,\n+      34.05512379283034\n+    ],\n+    [\n+      69.08628406493973,\n+      69.13936645920246\n+    ],\n+    [\n+      138.9879520404912,\n+      139.07184326924104\n+    ],\n+    [\n+      348.5637175850412,\n+      348.61071009853896\n+    ],\n+    [\n+      697.9415412111014,\n+      698.0120001558454\n+    ],\n+    [\n+      1397.7518935836836,\n+      1398.9249655259791\n+    ],\n+    [\n+      3501.0141906180343,\n+      3509.3422435151692\n+    ],\n+    [\n+      7021.351451762201,\n+      7056.629842924499\n+    ],\n+    [\n+      14116.760235206342,\n+      14252.944787226581\n+    ],\n+    [\n+      35608.14267867905,\n+      36294.67377080859\n+    ],\n+    [\n+      42816.8216015605,\n+      43731.07199629741\n+    ],\n+    [\n+      57245.51148499612,\n+      58627.752656232115\n+    ],\n+    [\n+      62792.01302797781,\n+      62701.21167933214\n+    ]\n+  ],\n+  \"4-1.G\": [\n+    [\n+      6.044500377597188,\n+      6.002578033372702\n+    ],\n+    [\n+      13.103122811049893,\n+      13.204513183870754\n+    ],\n+    [\n+      33.78895362019288,\n+      33.82805754582004\n+    ],\n+    [\n+      68.32383375099677,\n+      68.31879813795265\n+    ],\n+    [\n+      137.3783021580907,\n+      137.26987055675647\n+    ],\n+    [\n+      344.8939650847487,\n+      344.8272617515999\n+    ],\n+    [\n+      690.8093968100336,\n+      690.8683560689152\n+    ],\n+    [\n+      1383.4516380923296,\n+      1384.5742212446714\n+    ],\n+    [\n+      3466.5546852855523,\n+      3476.066919587302\n+    ],\n+    [\n+      6956.036481189972,\n+      6997.350852059828\n+    ],\n+    [\n+      14000.417040324071,\n+      14162.536558473837\n+    ],\n+    [\n+      35400.962716857815,\n+      36243.358508467434\n+    ],\n+    [\n+      42595.73088271285,\n+      43726.77593753089\n+    ],\n+    [\n+      57015.02456161472,\n+      58756.10977916714\n+    ],\n+    [\n+      62904.48928730596,\n+      63574.71734566591\n+    ]\n+  ],\n+  \"4-1.H\": [\n+    [\n+      6.07019039591168,\n+      6.179835400301214\n+    ],\n+    [\n+      12.884855992545681,\n+      13.03428444665887\n+    ],\n+    [\n+      33.068427601685244,\n+      33.07576896265962\n+    ],\n+    [\n+      66.67738552721178,\n+      66.42142258297568\n+    ],\n+    [\n+      134.64796215142553,\n+      134.6151034974101\n+    ],\n+    [\n+      337.6724982410732,\n+      337.424854876451\n+    ],\n+    [\n+      676.8179281308927,\n+      676.9830907281704\n+    ],\n+    [\n+      1355.1584337536058,\n+      1356.1998965034438\n+    ],\n+    [\n+      3396.15152048335,\n+      3405.817860699939\n+    ],\n+    [\n+      6814.326076305549,\n+      6855.056772857952\n+    ],\n+    [\n+      13712.503897863447,\n+      13869.601849219454\n+    ],\n+    [\n+      34641.5361664854,\n+      35428.09978995869\n+    ],\n+    [\n+      41668.24809120285,\n+      42715.06538196222\n+    ],\n+    [\n+      55741.235186135425,\n+      57330.121636202275\n+    ],\n+    [\n+      62711.741566220066,\n+      64502.14612791354\n+    ]\n+  ],\n+  \"4-2.E\": [\n+    [\n+      5.9769396977964355,\n+      5.948645768898522\n+    ],\n+    [\n+      12.733254184722725,\n+      12.638483103532101\n+    ],\n+    [\n+      33.25230101811568,\n+      33.20583039249348\n+    ],\n+    [\n+      67.39905873007291,\n+      67.38244868684372\n+    ],\n+    [\n+      135.53239279946695,\n+      135.41554118443528\n+    ],\n+    [\n+      340.1483801946396,\n+      339.94650517680407\n+    ],\n+    [\n+      681.5457392001198,\n+      681.5727297681967\n+    ],\n+    [\n+      1365.1305054398422,\n+      1366.4067039119807\n+    ],\n+    [\n+      3420.94612261246,\n+      3431.0563410711184\n+    ],\n+    [\n+      6863.30638211843,\n+      6904.3068500757845\n+    ],\n+    [\n+      13811.107526540733,\n+      13970.179497181593\n+    ],\n+    [\n+      34901.840964808136,\n+      35705.76345442\n+    ],\n+    [\n+      41985.23746932051,\n+      43057.806254803734\n+    ],\n+    [\n+      56179.01626833152,\n+      57818.394197738555\n+    ],\n+    [\n+      62915.608435328,\n+      64458.66722780355\n+    ]\n+  ],\n+  \"4-2.F\": [\n+    [\n+      6.200625010135603,\n+      6.318499832022014\n+    ],\n+    [\n+      13.188320774613667,\n+      13.380668809991503\n+    ],\n+    [\n+      33.77413263602937,\n+      33.8081985990836\n+    ],\n+    [\n+      68.36072957412351,\n+      68.41245691275765\n+    ],\n+    [\n+      137.53841050323348,\n+      137.62995985991014\n+    ],\n+    [\n+      344.88099287992384,\n+      344.90140995648534\n+    ],\n+    [\n+      690.7015796804179,\n+      690.8531992626671\n+    ],\n+    [\n+      1383.029987410995,\n+      1384.1320261624562\n+    ],\n+    [\n+      3466.0968981025935,\n+      3476.1576413913535\n+    ],\n+    [\n+      6953.692087881546,\n+      6994.66479709982\n+    ],\n+    [\n+      13989.158997720819,\n+      14144.730462025345\n+    ],\n+    [\n+      35337.93291117617,\n+      36124.89719595644\n+    ],\n+    [\n+      42508.77278566678,\n+      43561.06498750852\n+    ],\n+    [\n+      56871.464638259684,\n+      58477.56421148682\n+    ],\n+    [\n+      62762.79902662954,\n+      63307.01113729676\n+    ]\n+  ],\n+  \"4-2.G\": [\n+    [\n+      6.218422165069559,\n+      6.353341209752499\n+    ],\n+    [\n+      13.12717447882606,\n+      13.253789382775365\n+    ],\n+    [\n+      33.74016572339709,\n+      33.732363853882596\n+    ],\n+    [\n+      68.2186161741166,\n+      68.1124264668774\n+    ],\n+    [\n+      137.6735433189436,\n+      137.86838649101063\n+    ],\n+    [\n+      344.69890543858384,\n+      344.45698017450405\n+    ],\n+    [\n+      690.9305409074778,\n+      691.1501177018696\n+    ],\n+    [\n+      1383.1299879391795,\n+      1384.0094343239382\n+    ],\n+    [\n+      3467.1194865955517,\n+      3477.398106713817\n+    ],\n+    [\n+      6955.961398599813,\n+      6997.599022996085\n+    ],\n+    [\n+      13994.995695918053,\n+      14152.098537371883\n+    ],\n+    [\n+      35344.14230549866,\n+      36129.168118530884\n+    ],\n+    [\n+      42512.38944368302,\n+      43558.31960989956\n+    ],\n+    [\n+      56866.860398571356,\n+      58454.46411998819\n+    ],\n+    [\n+      62709.610832815044,\n+      63185.02269679501\n+    ]\n+  ],\n+  \"4-2.H\": [\n+    [\n+      5.970530397337869,\n+      5.954103478194059\n+    ],\n+    [\n+      12.630564307915554,\n+      12.473600608863352\n+    ],\n+    [\n+      33.25377004510312,\n+      33.31063470434332\n+    ],\n+    [\n+      67.08497156262654,\n+      66.96067103521355\n+    ],\n+    [\n+      134.72389429175342,\n+      134.2152129314683\n+    ],\n+    [\n+      338.9231814365258,\n+      338.5372842761537\n+    ],\n+    [\n+      679.598489501624,\n+      679.7624836959934\n+    ],\n+    [\n+      1361.8063279875523,\n+      1363.9313992843927\n+    ],\n+    [\n+      3412.7738730514066,\n+      3425.1579066091485\n+    ],\n+    [\n+      6847.045951015674,\n+      6892.709692713295\n+    ],\n+    [\n+      13778.052533775433,\n+      13945.108225477856\n+    ],\n+    [\n+      34803.87787059493,\n+      35614.52166324006\n+    ],\n+    [\n+      41862.42605404749,\n+      42937.588442960834\n+    ],\n+    [\n+      55993.97895559686,\n+      57614.343242784365\n+    ],\n+    [\n+      62977.33845068407,\n+      64783.337122199664\n+    ]\n+  ],\n+  \"4-3.E\": [\n+    [\n+      6.198059569985509,\n+      6.312408902519351\n+    ],\n+    [\n+      13.14194376558541,\n+      13.284909974074191\n+    ],\n+    [\n+      33.775921400974745,\n+      33.80715472185553\n+    ],\n+    [\n+      68.37274439224599,\n+      68.42714542131203\n+    ],\n+    [\n+      137.508177844509,\n+      137.55064283053662\n+    ],\n+    [\n+      344.9505754792527,\n+      344.9933993604464\n+    ],\n+    [\n+      690.7687230339303,\n+      690.8930018536936\n+    ],\n+    [\n+      1383.402297192892,\n+      1384.68790211641\n+    ],\n+    [\n+      3466.930749436418,\n+      3477.3546538288174\n+    ],\n+    [\n+      6955.281655265671,\n+      6996.9057924774315\n+    ],\n+    [\n+      14003.589052238656,\n+      14163.506304666442\n+    ],\n+    [\n+      35357.26102498384,\n+      36159.47816362252\n+    ],\n+    [\n+      42529.08268737593,\n+      43596.735856611354\n+    ],\n+    [\n+      56895.14106968163,\n+      58518.25869295274\n+    ],\n+    [\n+      62832.66786869598,\n+      63439.35987989889\n+    ]\n+  ],\n+  \"4-3.F\": [\n+    [\n+      6.345103208621868,\n+      6.6297527922008905\n+    ],\n+    [\n+      13.228562592434054,\n+      13.489661181918743\n+    ],\n+    [\n+      33.738899579461396,\n+      33.80588888191734\n+    ],\n+    [\n+      68.16333265666907,\n+      68.15541271168452\n+    ],\n+    [\n+      137.20070029416598,\n+      137.2317330841972\n+    ],\n+    [\n+      344.26682333107294,\n+      344.36872644373517\n+    ],\n+    [\n+      689.3862503610445,\n+      689.6155087141589\n+    ],\n+    [\n+      1380.3952300309904,\n+      1381.6502962168393\n+    ],\n+    [\n+      3458.880183321669,\n+      3468.6941737859797\n+    ],\n+    [\n+      6938.484191115935,\n+      6978.179097339208\n+    ],\n+    [\n+      13963.20173858723,\n+      14111.94782712466\n+    ],\n+    [\n+      35227.8499267875,\n+      35972.740251861884\n+    ],\n+    [\n+      42368.748765948745,\n+      43362.02368868517\n+    ],\n+    [\n+      56666.48057417683,\n+      58174.12235860891\n+    ],\n+    [\n+      63027.46980920939,\n+      63971.10605364272\n+    ]\n+  ],\n+  \"4-3.G\": [\n+    [\n+      6.111238671250507,\n+      6.126644595491863\n+    ],\n+    [\n+      13.07249030614372,\n+      13.123105772919873\n+    ],\n+    [\n+      33.774323705776915,\n+      33.74800456782311\n+    ],\n+    [\n+      68.2631310547612,\n+      68.09502329338869\n+    ],\n+    [\n+      137.76268753173662,\n+      137.8317749487861\n+    ],\n+    [\n+      345.23934275175804,\n+      344.9992621769477\n+    ],\n+    [\n+      691.8991983680017,\n+      692.0089062483837\n+    ],\n+    [\n+      1385.2594447599772,\n+      1386.1100686788666\n+    ],\n+    [\n+      3469.9818599598857,\n+      3477.712106532385\n+    ],\n+    [\n+      6957.305106351443,\n+      6989.3895755782105\n+    ],\n+    [\n+      13994.275768830863,\n+      14118.925480066971\n+    ],\n+    [\n+      35254.399072744665,\n+      35889.889665196\n+    ],\n+    [\n+      42389.520118607565,\n+      43239.385079944324\n+    ],\n+    [\n+      56676.09355776329,\n+      57972.418683448814\n+    ],\n+    [\n+      62970.72879080524,\n+      63612.98816971763\n+    ]\n+  ],\n+  \"4-3.H\": [\n+    [\n+      6.045344582014462,\n+      6.112163150271487\n+    ],\n+    [\n+      12.658234101395447,\n+      12.544542832488851\n+    ],\n+    [\n+      33.225374772301805,\n+      33.29685177033182\n+    ],\n+    [\n+      67.1658114147288,\n+      67.209105498609\n+    ],\n+    [\n+      134.86064743857415,\n+      134.66205451543783\n+    ],\n+    [\n+      338.59071734160165,\n+      338.3111557550978\n+    ],\n+    [\n+      678.7061947647368,\n+      678.8569603304747\n+    ],\n+    [\n+      1359.5258251616056,\n+      1361.128168467315\n+    ],\n+    [\n+      3406.135532707633,\n+      3416.266072368535\n+    ],\n+    [\n+      6832.453826937564,\n+      6872.25363882666\n+    ],\n+    [\n+      13752.458344735576,\n+      13902.501439784655\n+    ],\n+    [\n+      34715.04662858173,\n+      35478.856692404275\n+    ],\n+    [\n+      41758.98000518286,\n+      42780.996176685876\n+    ],\n+    [\n+      55861.76810185714,\n+      57416.87848473968\n+    ],\n+    [\n+      62811.378529118236,\n+      64525.83411476494\n+    ]\n+  ],\n+  \"4-4.E\": [\n+    [\n+      6.099461887573657,\n+      6.1051199754718235\n+    ],\n+    [\n+      12.909609693089827,\n+      12.80245205712305\n+    ],\n+    [\n+      33.5758560234271,\n+      33.363831997079906\n+    ],\n+    [\n+      68.23187654061385,\n+      68.05570806353488\n+    ],\n+    [\n+      137.44954334195347,\n+      137.25232182382257\n+    ],\n+    [\n+      345.2353293856602,\n+      345.1080029776523\n+    ],\n+    [\n+      691.4698187102215,\n+      691.3841963226231\n+    ],\n+    [\n+      1383.918835804422,\n+      1383.8967223984132\n+    ],\n+    [\n+      3465.914246599339,\n+      3470.7378053155703\n+    ],\n+    [\n+      6947.443435091617,\n+      6971.948169187164\n+    ],\n+    [\n+      13957.66413988553,\n+      14059.030151750914\n+    ],\n+    [\n+      35215.59042727886,\n+      35823.036912961514\n+    ],\n+    [\n+      42350.20016480559,\n+      43173.81291493031\n+    ],\n+    [\n+      56615.912409042256,\n+      57868.94781640926\n+    ],\n+    [\n+      62789.385225069826,\n+      63268.535353789826\n+    ]\n+  ],\n+  \"4-4.F\": [\n+    [\n+      5.862936846496147,\n+      5.663166454365042\n+    ],\n+    [\n+      12.708094649931677,\n+      12.455052172449996\n+    ],\n+    [\n+      33.37604768544052,\n+      33.098574343776136\n+    ],\n+    [\n+      67.94344851325374,\n+      67.74899124369321\n+    ],\n+    [\n+      136.7584248137225,\n+      136.41402166732962\n+    ],\n+    [\n+      343.644072895717,\n+      343.2891018882556\n+    ],\n+    [\n+      688.6549046732458,\n+      688.4842601148225\n+    ],\n+    [\n+      1378.8203377162781,\n+      1379.1628078005199\n+    ],\n+    [\n+      3452.1174013471236,\n+      3456.806177772894\n+    ],\n+    [\n+      6918.72096829282,\n+      6941.8220737314105\n+    ],\n+    [\n+      13893.269422561838,\n+      13985.017708135256\n+    ],\n+    [\n+      34955.48774843561,\n+      35435.692181534985\n+    ],\n+    [\n+      42010.10410891291,\n+      42651.540495091846\n+    ],\n+    [\n+      56122.361224074615,\n+      57089.753726402465\n+    ],\n+    [\n+      62868.64630176435,\n+      63679.73872479233\n+    ]\n+  ],\n+  \"4-4.G\": [\n+    [\n+      5.978303815619427,\n+      5.960335611719047\n+    ],\n+    [\n+      12.70694690317341,\n+      12.605293317064339\n+    ],\n+    [\n+      33.019248695918215,\n+      32.79138075069077\n+    ],\n+    [\n+      67.46561457055816,\n+      67.61740178632806\n+    ],\n+    [\n+      135.3910986006651,\n+      135.33711467661024\n+    ],\n+    [\n+      339.9052387077687,\n+      339.9725660841452\n+    ],\n+    [\n+      680.3537789203467,\n+      680.2149689517389\n+    ],\n+    [\n+      1362.543803457158,\n+      1363.2860086711278\n+    ],\n+    [\n+      3411.2773972837713,\n+      3416.8337231939254\n+    ],\n+    [\n+      6836.537911793607,\n+      6860.8852437411915\n+    ],\n+    [\n+      13734.476629683295,\n+      13833.206689262115\n+    ],\n+    [\n+      34632.18383777244,\n+      35209.17102256333\n+    ],\n+    [\n+      41645.01863854289,\n+      42426.693215886175\n+    ],\n+    [\n+      55669.98848171354,\n+      56860.99028094126\n+    ],\n+    [\n+      62541.12114640081,\n+      63789.652353501086\n+    ]\n+  ],\n+  \"4-4.H\": [\n+    [\n+      6.298144554892471,\n+      6.419498672644536\n+    ],\n+    [\n+      13.333161255172985,\n+      13.467838595095824\n+    ],\n+    [\n+      34.58336799323907,\n+      34.90768235169189\n+    ],\n+    [\n+      69.44983742854109,\n+      69.53398159166804\n+    ],\n+    [\n+      139.64529821664982,\n+      139.71738179314144\n+    ],\n+    [\n+      349.8960130768139,\n+      349.5966473780195\n+    ],\n+    [\n+      701.6535951795422,\n+      702.0745108051798\n+    ],\n+    [\n+      1403.4845489495015,\n+      1403.661594767426\n+    ],\n+    [\n+      3515.2931036790983,\n+      3521.0644131776085\n+    ],\n+    [\n+      7043.378404476961,\n+      7066.931136413314\n+    ],\n+    [\n+      14141.466210376306,\n+      14230.842983018088\n+    ],\n+    [\n+      35529.08053389992,\n+      35960.44809227362\n+    ],\n+    [\n+      42679.80345598855,\n+      43243.316857999744\n+    ],\n+    [\n+      56976.646588213196,\n+      57799.89374635452\n+    ],\n+    [\n+      62762.95556833808,\n+      62342.87097330261\n+    ]\n+  ],\n+  \"4-5.E\": [\n+    [\n+      5.911836036480531,\n+      5.993305676350496\n+    ],\n+    [\n+      12.478617913867708,\n+      12.500011623359653\n+    ],\n+    [\n+      32.27368712567962,\n+      32.212869657298306\n+    ],\n+    [\n+      65.45927738810562,\n+      65.45500310097044\n+    ],\n+    [\n+      131.5717518005076,\n+      131.42225662465168\n+    ],\n+    [\n+      330.5142138985442,\n+      330.53340431360635\n+    ],\n+    [\n+      661.8003353379977,\n+      661.8163087451151\n+    ],\n+    [\n+      1325.9595742336667,\n+      1327.5580353584419\n+    ],\n+    [\n+      3322.688075692575,\n+      3333.310990809263\n+    ],\n+    [\n+      6665.796913815999,\n+      6706.852808123229\n+    ],\n+    [\n+      13410.453375245657,\n+      13563.827799039169\n+    ],\n+    [\n+      33879.75195762543,\n+      34648.41758601773\n+    ],\n+    [\n+      40758.04523677584,\n+      41787.52728400954\n+    ],\n+    [\n+      54543.43602414197,\n+      56125.99585440909\n+    ],\n+    [\n+      61373.623568033465,\n+      63166.87008756519\n+    ]\n+  ],\n+  \"4-5.F\": [\n+    [\n+      5.981930512700408,\n+      5.992914004135687\n+    ],\n+    [\n+      12.714326680006057,\n+      12.673536644381933\n+    ],\n+    [\n+      32.89923071470429,\n+      32.6916908019622\n+    ],\n+    [\n+      66.93165142023308,\n+      66.83395560500544\n+    ],\n+    [\n+      134.79255759980265,\n+      134.7128685543193\n+    ],\n+    [\n+      338.34496597883975,\n+      338.28922349812467\n+    ],\n+    [\n+      677.5303615167313,\n+      677.4459845566618\n+    ],\n+    [\n+      1357.0848847826028,\n+      1358.127758694289\n+    ],\n+    [\n+      3399.593095055278,\n+      3407.879389150031\n+    ],\n+    [\n+      6818.207381433972,\n+      6853.125465653196\n+    ],\n+    [\n+      13710.342132204227,\n+      13845.692404031568\n+    ],\n+    [\n+      34593.8721438582,\n+      35280.51882569216\n+    ],\n+    [\n+      41599.71951939689,\n+      42514.24143756077\n+    ],\n+    [\n+      55629.11348031345,\n+      57018.65932804761\n+    ],\n+    [\n+      62572.18311238456,\n+      64124.21966901576\n+    ]\n+  ],\n+  \"4-5.G\": [\n+    [\n+      5.834753049289876,\n+      5.968068519848959\n+    ],\n+    [\n+      12.517299789662816,\n+      12.85777802209292\n+    ],\n+    [\n+      32.17250147991723,\n+      32.72420308693848\n+    ],\n+    [\n+      64.02943806041466,\n+      64.021668558545\n+    ],\n+    [\n+      128.93961423439762,\n+      129.0278654789842\n+    ],\n+    [\n+      323.04952996355655,\n+      322.8051649512773\n+    ],\n+    [\n+      647.9345839892003,\n+      648.5045025708346\n+    ],\n+    [\n+      1296.9010655808356,\n+      1298.2962916870144\n+    ],\n+    [\n+      3252.70621753347,\n+      3265.528977841037\n+    ],\n+    [\n+      6533.982946506087,\n+      6587.7602658434425\n+    ],\n+    [\n+      13172.373169670876,\n+      13377.670916400299\n+    ],\n+    [\n+      33485.202596304225,\n+      34599.99183611609\n+    ],\n+    [\n+      40332.84748760874,\n+      41831.64288413963\n+    ],\n+    [\n+      54065.01332159866,\n+      56374.003180426276\n+    ],\n+    [\n+      60903.24654195793,\n+      63587.813146583365\n+    ]\n+  ],\n+  \"4-5.H\": [\n+    [\n+      6.079131699624906,\n+      6.286412660248979\n+    ],\n+    [\n+      12.709665516336809,\n+      12.86304530647185\n+    ],\n+    [\n+      32.95389697173806,\n+      33.31531468221153\n+    ],\n+    [\n+      65.85073900344504,\n+      65.7082430294128\n+    ],\n+    [\n+      132.892463971012,\n+      132.99717852573508\n+    ],\n+    [\n+      332.9211415668301,\n+      332.67176217254286\n+    ],\n+    [\n+      667.4763581234936,\n+      667.8107239861935\n+    ],\n+    [\n+      1336.3271511503985,\n+      1337.5703946513368\n+    ],\n+    [\n+      3349.783784525495,\n+      3360.689233187261\n+    ],\n+    [\n+      6723.057321677115,\n+      6767.78201314545\n+    ],\n+    [\n+      13533.077277252538,\n+      13701.05006862665\n+    ],\n+    [\n+      34227.05149540294,\n+      35078.42224663117\n+    ],\n+    [\n+      41186.14469495561,\n+      42327.281379447144\n+    ],\n+    [\n+      55129.1725166104,\n+      56877.45232042102\n+    ],\n+    [\n+      62053.19029585953,\n+      64054.872461401996\n+    ]\n+  ],\n+  \"4-6.E\": [\n+    [\n+      6.049357741723875,\n+      6.093806686135572\n+    ],\n+    [\n+      12.787490278069736,\n+      12.74666419382334\n+    ],\n+    [\n+      33.24522422454736,\n+      33.19244530061151\n+    ],\n+    [\n+      67.2714515621088,\n+      67.1290499618211\n+    ],\n+    [\n+      135.4906125042144,\n+      135.33511210060234\n+    ],\n+    [\n+      340.0959951396842,\n+      339.84945582750987\n+    ],\n+    [\n+      681.6183166900146,\n+      681.7332450566274\n+    ],\n+    [\n+      1364.187797251602,\n+      1364.5508946269922\n+    ],\n+    [\n+      3418.0390926059954,\n+      3425.3046845936133\n+    ],\n+    [\n+      6854.110481439201,\n+      6885.972586943037\n+    ],\n+    [\n+      13774.408117752688,\n+      13895.370398486759\n+    ],\n+    [\n+      34716.03232035227,\n+      35327.39365813657\n+    ],\n+    [\n+      41738.79550364813,\n+      42554.772420133806\n+    ],\n+    [\n+      55797.60404612278,\n+      57037.258581633156\n+    ],\n+    [\n+      62591.72761166252,\n+      63798.16305234769\n+    ]\n+  ],\n+  \"4-6.F\": [\n+    [\n+      6.047961591460838,\n+      6.111755536287617\n+    ],\n+    [\n+      12.767213122811533,\n+      12.749581131447602\n+    ],\n+    [\n+      33.08021378502459,\n+      32.9757832374291\n+    ],\n+    [\n+      67.11990711615704,\n+      67.05472503522266\n+    ],\n+    [\n+      135.13922163094782,\n+      135.0929515377115\n+    ],\n+    [\n+      339.16122121050125,\n+      339.13585904032664\n+    ],\n+    [\n+      679.1674672662871,\n+      679.1465621670083\n+    ],\n+    [\n+      1360.0387974607045,\n+      1360.8861740810319\n+    ],\n+    [\n+      3405.859831727515,\n+      3412.530077141534\n+    ],\n+    [\n+      6826.599691847084,\n+      6854.089184135097\n+    ],\n+    [\n+      13715.708061947798,\n+      13824.603758742402\n+    ],\n+    [\n+      34535.67384892309,\n+      35080.44447631393\n+    ],\n+    [\n+      41507.38311539468,\n+      42227.65303534703\n+    ],\n+    [\n+      55452.433656281726,\n+      56525.77859763094\n+    ],\n+    [\n+      62360.78608232053,\n+      63544.102158457805\n+    ]\n+  ],\n+  \"4-6.G\": [\n+    [\n+      5.910798116666799,\n+      6.059531531430117\n+    ],\n+    [\n+      12.501433532799075,\n+      12.688848278153953\n+    ],\n+    [\n+      31.941030164381292,\n+      31.9120874800776\n+    ],\n+    [\n+      64.84057640858839,\n+      64.95600366146088\n+    ],\n+    [\n+      130.14357194295363,\n+      130.0511449578938\n+    ],\n+    [\n+      326.75996245925,\n+      326.75171727393143\n+    ],\n+    [\n+      654.4914998753661,\n+      654.6612719979969\n+    ],\n+    [\n+      1310.8251767995437,\n+      1312.2229428517119\n+    ],\n+    [\n+      3284.3855753271464,\n+      3294.0492664608287\n+    ],\n+    [\n+      6590.889342827469,\n+      6631.744551457847\n+    ],\n+    [\n+      13268.694005525618,\n+      13429.606856958824\n+    ],\n+    [\n+      33616.01656311303,\n+      34500.11862917764\n+    ],\n+    [\n+      40469.90915844967,\n+      41668.66320533341\n+    ],\n+    [\n+      54207.618183898645,\n+      56069.26375772921\n+    ],\n+    [\n+      61060.065134622346,\n+      63236.159132202556\n+    ]\n+  ],\n+  \"4-6.H\": [\n+    [\n+      6.012508269434097,\n+      6.079892704010277\n+    ],\n+    [\n+      12.747946114586933,\n+      12.79442446637603\n+    ],\n+    [\n+      33.66793119622407,\n+      34.38175034147509\n+    ],\n+    [\n+      67.08490918958164,\n+      67.42376197211219\n+    ],\n+    [\n+      134.5173683079584,\n+      134.72965707100812\n+    ],\n+    [\n+      337.25972675862613,\n+      337.5412978083021\n+    ],\n+    [\n+      675.0137249844483,\n+      675.2608639682189\n+    ],\n+    [\n+      1351.409207773605,\n+      1352.476008842332\n+    ],\n+    [\n+      3384.252411430325,\n+      3391.447173135795\n+    ],\n+    [\n+      6785.360017891651,\n+      6815.901165334042\n+    ],\n+    [\n+      13638.338133638337,\n+      13757.369851777907\n+    ],\n+    [\n+      34372.03631418384,\n+      34976.50080675114\n+    ],\n+    [\n+      41322.71538322749,\n+      42127.00237660268\n+    ],\n+    [\n+      55236.92951058514,\n+      56454.81721522914\n+    ],\n+    [\n+      62126.94084016793,\n+      63481.71342787284\n+    ]\n+  ],\n+  \"5-1.E\": [\n+    [\n+      5.9890221746015015,\n+      6.176429211408633\n+    ],\n+    [\n+      12.521611737262258,\n+      12.638684356334226\n+    ],\n+    [\n+      32.227630752939106,\n+      32.254696748990014\n+    ],\n+    [\n+      65.27879013682266,\n+      65.36549978772167\n+    ],\n+    [\n+      131.14658328143372,\n+      131.1177613081427\n+    ],\n+    [\n+      329.2210596271462,\n+      329.31707512503436\n+    ],\n+    [\n+      659.1518851706584,\n+      659.2626241240105\n+    ],\n+    [\n+      1320.2496742445712,\n+      1321.6274345577033\n+    ],\n+    [\n+      3307.726611674396,\n+      3317.1099091984324\n+    ],\n+    [\n+      6636.4141627032695,\n+      6675.52675506844\n+    ],\n+    [\n+      13352.294199717655,\n+      13503.20417190326\n+    ],\n+    [\n+      33751.82250613009,\n+      34530.38147962919\n+    ],\n+    [\n+      40602.70497035943,\n+      41642.21984094285\n+    ],\n+    [\n+      54325.554345695535,\n+      55910.241089383395\n+    ],\n+    [\n+      61154.963069999234,\n+      62978.62907879056\n+    ]\n+  ],\n+  \"5-1.F\": [\n+    [\n+      5.931684704343836,\n+      5.960543926863978\n+    ],\n+    [\n+      12.613326076204666,\n+      12.616671561689802\n+    ],\n+    [\n+      32.65648589781076,\n+      32.58211361907965\n+    ],\n+    [\n+      65.9386055260013,\n+      65.61272269748572\n+    ],\n+    [\n+      133.28278888935853,\n+      133.22933429323706\n+    ],\n+    [\n+      334.2400704408109,\n+      333.933670606081\n+    ],\n+    [\n+      669.9522889855326,\n+      670.0070285614876\n+    ],\n+    [\n+      1341.2342407466515,\n+      1341.8696235287796\n+    ],\n+    [\n+      3360.402835482117,\n+      3368.1194265292374\n+    ],\n+    [\n+      6739.539766578327,\n+      6773.033264297739\n+    ],\n+    [\n+      13548.029225863509,\n+      13676.88208528268\n+    ],\n+    [\n+      34171.46607746431,\n+      34820.76381970327\n+    ],\n+    [\n+      41085.30184973424,\n+      41947.01410049268\n+    ],\n+    [\n+      54918.78026503255,\n+      56211.98842071224\n+    ],\n+    [\n+      61807.78952453595,\n+      63287.85262348972\n+    ]\n+  ],\n+  \"5-1.G\": [\n+    [\n+      5.932940360787982,\n+      6.062381338606027\n+    ],\n+    [\n+      12.451789457331222,\n+      12.500362232609316\n+    ],\n+    [\n+      32.175574510930645,\n+      32.156330584179116\n+    ],\n+    [\n+      64.90306288325453,\n+      64.62676794933067\n+    ],\n+    [\n+      131.26237065249225,\n+      131.37287703469488\n+    ],\n+    [\n+      328.93006384690784,\n+      328.79395998063427\n+    ],\n+    [\n+      658.9964645469894,\n+      659.0696099695322\n+    ],\n+    [\n+      1318.911856849396,\n+      1319.1862371471486\n+    ],\n+    [\n+      3305.0028245262133,\n+      3312.241364484264\n+    ],\n+    [\n+      6630.926359072113,\n+      6665.682860707814\n+    ],\n+    [\n+      13340.386587405554,\n+      13481.131979670414\n+    ],\n+    [\n+      33724.05465746217,\n+      34479.753135783016\n+    ],\n+    [\n+      40580.13332316909,\n+      41603.3723993145\n+    ],\n+    [\n+      54320.12374375083,\n+      55909.060246973306\n+    ],\n+    [\n+      61184.00486634302,\n+      63049.732340195\n+    ]\n+  ],\n+  \"5-1.H\": [\n+    [\n+      5.860429794090266,\n+      5.847649277108062\n+    ],\n+    [\n+      12.613940674079968,\n+      12.681765697148228\n+    ],\n+    [\n+      32.538803098588225,\n+      32.51143272204062\n+    ],\n+    [\n+      65.66488921406416,\n+      65.3984688299943\n+    ],\n+    [\n+      132.54776345295707,\n+      132.43083834988198\n+    ],\n+    [\n+      332.7599396256996,\n+      332.6579157736604\n+    ],\n+    [\n+      666.5183413095475,\n+      666.5126912244338\n+    ],\n+    [\n+      1335.243823478094,\n+      1336.6411228744043\n+    ],\n+    [\n+      3345.4829875843106,\n+      3355.174051656827\n+    ],\n+    [\n+      6711.854482081893,\n+      6751.501957586823\n+    ],\n+    [\n+      13502.058428380673,\n+      13651.819063655948\n+    ],\n+    [\n+      34107.30973546487,\n+      34865.71737146797\n+    ],\n+    [\n+      41027.41012258836,\n+      42040.59936364504\n+    ],\n+    [\n+      54891.3541233418,\n+      56440.08728515161\n+    ],\n+    [\n+      61758.43791747515,\n+      63506.64168941497\n+    ]\n+  ],\n+  \"5-2.E\": [\n+    [\n+      5.910788396379201,\n+      5.967205311931021\n+    ],\n+    [\n+      12.464261126167912,\n+      12.421356010621935\n+    ],\n+    [\n+      32.49366889417769,\n+      32.522823100945686\n+    ],\n+    [\n+      65.69222021901152,\n+      65.65787206959874\n+    ],\n+    [\n+      132.16489151199423,\n+      132.07916130197643\n+    ],\n+    [\n+      331.6711802077233,\n+      331.5194669928401\n+    ],\n+    [\n+      664.5346908741337,\n+      664.625963887131\n+    ],\n+    [\n+      1330.3135944099415,\n+      1330.9431210968205\n+    ],\n+    [\n+      3333.9134493737142,\n+      3342.4415365855093\n+    ],\n+    [\n+      6688.322531127686,\n+      6725.235924977629\n+    ],\n+    [\n+      13453.778097827162,\n+      13598.420935093536\n+    ],\n+    [\n+      33992.88715061047,\n+      34740.61919250963\n+    ],\n+    [\n+      40887.33542454868,\n+      41884.76530698523\n+    ],\n+    [\n+      54692.839458831986,\n+      56208.04811165474\n+    ],\n+    [\n+      61551.40063005539,\n+      63279.08584206924\n+    ]\n+  ],\n+  \"5-2.F\": [\n+    [\n+      6.203760480019327,\n+      6.438461786339764\n+    ],\n+    [\n+      12.905381937834147,\n+      13.042762252510727\n+    ],\n+    [\n+      33.22980598047411,\n+      33.314881176628404\n+    ],\n+    [\n+      67.08446042697517,\n+      67.06481135998318\n+    ],\n+    [\n+      135.07091699260866,\n+      135.11940170681007\n+    ],\n+    [\n+      338.6007179661507,\n+      338.4240625428159\n+    ],\n+    [\n+      678.6360904974455,\n+      678.9031356569823\n+    ],\n+    [\n+      1358.8215247334729,\n+      1360.0917157661218\n+    ],\n+    [\n+      3403.925643031686,\n+      3412.7716371211113\n+    ],\n+    [\n+      6826.022852146832,\n+      6861.206750266549\n+    ],\n+    [\n+      13717.15546217339,\n+      13845.445221020982\n+    ],\n+    [\n+      34563.84786006928,\n+      35180.13822464402\n+    ],\n+    [\n+      41544.076406374385,\n+      42353.43189393091\n+    ],\n+    [\n+      55500.44143849444,\n+      56692.07580065344\n+    ],\n+    [\n+      62443.10320946183,\n+      63788.91195705049\n+    ]\n+  ],\n+  \"5-2.G\": [\n+    [\n+      5.961715800958227,\n+      6.134092736861522\n+    ],\n+    [\n+      12.409389400210232,\n+      12.441260961625781\n+    ],\n+    [\n+      32.2134226519999,\n+      32.29922632171816\n+    ],\n+    [\n+      65.0444729292051,\n+      65.04401834762865\n+    ],\n+    [\n+      131.014438087522,\n+      131.1499274491236\n+    ],\n+    [\n+      327.9850038835249,\n+      327.58890219657826\n+    ],\n+    [\n+      657.8463379081974,\n+      658.1404045114382\n+    ],\n+    [\n+      1316.3254253618977,\n+      1316.7569530774265\n+    ],\n+    [\n+      3299.062314112414,\n+      3307.2258800727554\n+    ],\n+    [\n+      6619.406507028822,\n+      6656.391482133373\n+    ],\n+    [\n+      13320.788311126178,\n+      13469.746894231619\n+    ],\n+    [\n+      33718.038575630235,\n+      34539.31330212549\n+    ],\n+    [\n+      40580.76157982035,\n+      41691.401754060425\n+    ],\n+    [\n+      54328.17474309902,\n+      56042.23328478875\n+    ],\n+    [\n+      61183.824950729104,\n+      63180.81253135498\n+    ]\n+  ],\n+  \"5-2.H\": [\n+    [\n+      5.526865212869443,\n+      5.273212738874953\n+    ],\n+    [\n+      12.227917503870735,\n+      12.083098646961606\n+    ],\n+    [\n+      32.02095105679648,\n+      31.92247667815898\n+    ],\n+    [\n+      65.21823054328641,\n+      65.40852202374914\n+    ],\n+    [\n+      130.71781419546468,\n+      130.58973440682382\n+    ],\n+    [\n+      328.6250136969033,\n+      328.9517392601367\n+    ],\n+    [\n+      657.0963203833314,\n+      656.8065090921764\n+    ],\n+    [\n+      1316.3310515691578,\n+      1317.1009998743305\n+    ],\n+    [\n+      3297.3585057491996,\n+      3304.6456949906133\n+    ],\n+    [\n+      6613.802468387306,\n+      6646.804994230705\n+    ],\n+    [\n+      13304.75425853117,\n+      13440.576392117466\n+    ],\n+    [\n+      33599.764342431976,\n+      34306.096263341824\n+    ],\n+    [\n+      40413.88754604765,\n+      41359.67475764965\n+    ],\n+    [\n+      54065.85759185456,\n+      55516.380524526125\n+    ],\n+    [\n+      60850.572851047276,\n+      62510.22298610153\n+    ]\n+  ],\n+  \"5-3.E\": [\n+    [\n+      5.685400430174756,\n+      5.766339080664648\n+    ],\n+    [\n+      12.124088361075701,\n+      12.275297362684292\n+    ],\n+    [\n+      31.164816276641492,\n+      31.247680220235658\n+    ],\n+    [\n+      63.02307077764311,\n+      63.11839512707726\n+    ],\n+    [\n+      126.53622695832371,\n+      126.45318143104443\n+    ],\n+    [\n+      317.60918484118514,\n+      317.52474335331055\n+    ],\n+    [\n+      636.3580208456003,\n+      636.5652653517693\n+    ],\n+    [\n+      1274.8817953903258,\n+      1276.7009490038297\n+    ],\n+    [\n+      3198.800825329855,\n+      3213.863893228653\n+    ],\n+    [\n+      6430.096125074416,\n+      6492.4100781871175\n+    ],\n+    [\n+      12978.071353973686,\n+      13217.009600712878\n+    ],\n+    [\n+      33021.576016626765,\n+      34241.67081168129\n+    ],\n+    [\n+      39790.12951618164,\n+      41431.1585628329\n+    ],\n+    [\n+      53387.69495384901,\n+      55939.4004083146\n+    ],\n+    [\n+      60181.121788149205,\n+      63183.368887388926\n+    ]\n+  ],\n+  \"5-3.F\": [\n+    [\n+      5.853610322543006,\n+      6.10885761759841\n+    ],\n+    [\n+      12.117511805907412,\n+      12.254485017252474\n+    ],\n+    [\n+      31.10607026156521,\n+      31.11094930954157\n+    ],\n+    [\n+      62.89651492743931,\n+      62.8267099828771\n+    ],\n+    [\n+      126.59446154939327,\n+      126.49219744213943\n+    ],\n+    [\n+      317.74579144345626,\n+      317.60359363885\n+    ],\n+    [\n+      636.8078198773496,\n+      637.0756330389407\n+    ],\n+    [\n+      1275.722028074919,\n+      1277.6025721124035\n+    ],\n+    [\n+      3199.238365964505,\n+      3212.7771823295966\n+    ],\n+    [\n+      6425.707276424613,\n+      6479.5853321308\n+    ],\n+    [\n+      12950.099339156925,\n+      13152.115189033004\n+    ],\n+    [\n+      32857.553970365334,\n+      33881.617880643775\n+    ],\n+    [\n+      39565.06983881137,\n+      40938.74943780981\n+    ],\n+    [\n+      53019.04299746303,\n+      55135.78490603558\n+    ],\n+    [\n+      59703.602866387155,\n+      62146.63622233621\n+    ]\n+  ],\n+  \"5-3.G\": [\n+    [\n+      5.700338585848197,\n+      5.633050950573837\n+    ],\n+    [\n+      12.182221344354295,\n+      12.043455763247133\n+    ],\n+    [\n+      31.770067633945526,\n+      31.556529314073554\n+    ],\n+    [\n+      64.35399047230462,\n+      63.95464681395257\n+    ],\n+    [\n+      129.87265814107593,\n+      129.4493194992046\n+    ],\n+    [\n+      326.6031412334503,\n+      326.28453954289256\n+    ],\n+    [\n+      654.488628558591,\n+      654.3474536993101\n+    ],\n+    [\n+      1311.0823066648768,\n+      1312.1200404749338\n+    ],\n+    [\n+      3286.9796920796575,\n+      3297.7022247860727\n+    ],\n+    [\n+      6597.808094111372,\n+      6642.547750376725\n+    ],\n+    [\n+      13285.778406673453,\n+      13459.003372000334\n+    ],\n+    [\n+      33651.432214457134,\n+      34556.581460086265\n+    ],\n+    [\n+      40507.80356159129,\n+      41727.08789075914\n+    ],\n+    [\n+      54254.72705081886,\n+      56140.32804342512\n+    ],\n+    [\n+      61080.40199886308,\n+      63248.5113143851\n+    ]\n+  ],\n+  \"5-3.H\": [\n+    [\n+      5.620172435402193,\n+      5.326229321620088\n+    ],\n+    [\n+      12.366682436311681,\n+      12.072098555325855\n+    ],\n+    [\n+      32.655723649348666,\n+      32.43021165212521\n+    ],\n+    [\n+      66.5216553005789,\n+      66.46996369884047\n+    ],\n+    [\n+      133.49995997625433,\n+      133.0469089838178\n+    ],\n+    [\n+      336.07193480690046,\n+      336.0458056114443\n+    ],\n+    [\n+      672.6434843554667,\n+      672.2832501753837\n+    ],\n+    [\n+      1348.3551885261818,\n+      1349.8965343809705\n+    ],\n+    [\n+      3378.5466852282275,\n+      3388.8742178386883\n+    ],\n+    [\n+      6780.572374016925,\n+      6824.113531087059\n+    ],\n+    [\n+      13650.731100247072,\n+      13820.552653572277\n+    ],\n+    [\n+      34513.66739143753,\n+      35357.7069557844\n+    ],\n+    [\n+      41518.37250918586,\n+      42638.26592046105\n+    ],\n+    [\n+      55535.74749389164,\n+      57216.75571831663\n+    ],\n+    [\n+      62487.13757405453,\n+      64388.15809031896\n+    ]\n+  ],\n+  \"5-4.E\": [\n+    [\n+      5.720495121869298,\n+      5.7083104938586775\n+    ],\n+    [\n+      12.226912061501144,\n+      12.207583426851981\n+    ],\n+    [\n+      31.94116806881255,\n+      32.09611854347413\n+    ],\n+    [\n+      64.45707571680153,\n+      64.55952292309043\n+    ],\n+    [\n+      129.46391293793462,\n+      129.43738936745916\n+    ],\n+    [\n+      324.7451081818708,\n+      324.5928810896447\n+    ],\n+    [\n+      650.7139362916329,\n+      650.8522288540879\n+    ],\n+    [\n+      1303.732620140123,\n+      1305.535524024596\n+    ],\n+    [\n+      3270.1146359757595,\n+      3284.288686934218\n+    ],\n+    [\n+      6569.257835637694,\n+      6626.220990184272\n+    ],\n+    [\n+      13258.558184107504,\n+      13479.625120347946\n+    ],\n+    [\n+      33665.700997502296,\n+      34801.420061971025\n+    ],\n+    [\n+      40545.003438740685,\n+      42064.26873799147\n+    ],\n+    [\n+      54341.75075279493,\n+      56671.53897800371\n+    ],\n+    [\n+      61202.15088635427,\n+      63896.61906525119\n+    ]\n+  ],\n+  \"5-4.F\": [\n+    [\n+      5.817964694789643,\n+      5.773508521995369\n+    ],\n+    [\n+      12.526824805942805,\n+      12.52954875712179\n+    ],\n+    [\n+      32.38162555913495,\n+      32.25562936429026\n+    ],\n+    [\n+      65.66052755118346,\n+      65.5066138175289\n+    ],\n+    [\n+      132.1930451819691,\n+      131.9583269417709\n+    ],\n+    [\n+      332.09673587053356,\n+      331.92523301453804\n+    ],\n+    [\n+      665.3309096215121,\n+      665.3265895056679\n+    ],\n+    [\n+      1332.7075470609716,\n+      1333.947211552447\n+    ],\n+    [\n+      3340.736894430952,\n+      3351.638850381663\n+    ],\n+    [\n+      6705.279573931899,\n+      6750.320302748485\n+    ],\n+    [\n+      13505.84696255593,\n+      13677.167908495432\n+    ],\n+    [\n+      34141.827811893476,\n+      34998.74542761637\n+    ],\n+    [\n+      41076.6784647737,\n+      42216.92498668099\n+    ],\n+    [\n+      54961.77960156747,\n+      56686.10623167006\n+    ],\n+    [\n+      61853.90635002106,\n+      63816.954267271554\n+    ]\n+  ],\n+  \"5-4.G\": [\n+    [\n+      5.639383523957998,\n+      5.63464802255318\n+    ],\n+    [\n+      12.041997481909675,\n+      12.02697391677754\n+    ],\n+    [\n+      31.336347083634028,\n+      31.376958731521622\n+    ],\n+    [\n+      63.30690290296258,\n+      63.25348112079269\n+    ],\n+    [\n+      127.42917872632295,\n+      127.36885261489428\n+    ],\n+    [\n+      319.7537308527897,\n+      319.63047306136514\n+    ],\n+    [\n+      640.5807876247025,\n+      640.6387143325084\n+    ],\n+    [\n+      1283.354587632653,\n+      1284.8964994900994\n+    ],\n+    [\n+      3217.498211857914,\n+      3229.350465250394\n+    ],\n+    [\n+      6459.895323276283,\n+      6507.998485623248\n+    ],\n+    [\n+      13019.769365632314,\n+      13202.486834463873\n+    ],\n+    [\n+      32953.76392275646,\n+      33868.41521556179\n+    ],\n+    [\n+      39661.08870243775,\n+      40881.90310472531\n+    ],\n+    [\n+      53105.52827512948,\n+      54971.85628478939\n+    ],\n+    [\n+      59818.03248117468,\n+      61997.180407931985\n+    ]\n+  ],\n+  \"5-4.H\": [\n+    [\n+      5.883633923483181,\n+      5.9954128282164065\n+    ],\n+    [\n+      12.43337658938094,\n+      12.533193857296544\n+    ],\n+    [\n+      31.93474741129548,\n+      31.854101229020976\n+    ],\n+    [\n+      64.93815339600141,\n+      65.05885897957964\n+    ],\n+    [\n+      130.65047832005672,\n+      130.87953778356265\n+    ],\n+    [\n+      327.3171663026959,\n+      327.40007768088\n+    ],\n+    [\n+      655.307894787285,\n+      655.3607657735222\n+    ],\n+    [\n+      1312.363602210688,\n+      1313.43154039443\n+    ],\n+    [\n+      3287.8735587248825,\n+      3296.347907205369\n+    ],\n+    [\n+      6597.2942392023515,\n+      6635.176288537115\n+    ],\n+    [\n+      13286.553626224362,\n+      13438.466467427546\n+    ],\n+    [\n+      33558.55709115871,\n+      34333.30866379277\n+    ],\n+    [\n+      40368.893568959786,\n+      41401.85601021161\n+    ],\n+    [\n+      54008.16080861544,\n+      55578.13738158627\n+    ],\n+    [\n+      60782.07993703067,\n+      62572.43861854628\n+    ]\n+  ],\n+  \"5-5.E\": [\n+    [\n+      5.952929090788472,\n+      6.307567270248719\n+    ],\n+    [\n+      12.269655212469067,\n+      12.54356442771533\n+    ],\n+    [\n+      31.151152956993414,\n+      31.150089691472008\n+    ],\n+    [\n+      63.04460672175763,\n+      63.019524004189385\n+    ],\n+    [\n+      127.14844369689327,\n+      127.39268992959985\n+    ],\n+    [\n+      318.533438615753,\n+      318.6573487907353\n+    ],\n+    [\n+      637.7740714768818,\n+      637.9637792143982\n+    ],\n+    [\n+      1276.5227676657344,\n+      1277.111699705373\n+    ],\n+    [\n+      3198.7982969625614,\n+      3206.6326135966165\n+    ],\n+    [\n+      6418.7231350012735,\n+      6454.917714879907\n+    ],\n+    [\n+      12918.920283584686,\n+      13065.879196788195\n+    ],\n+    [\n+      32668.04407274774,\n+      33437.055875594444\n+    ],\n+    [\n+      39304.60057390407,\n+      40335.324768125916\n+    ],\n+    [\n+      52604.544479602366,\n+      54188.1602211464\n+    ],\n+    [\n+      59214.69875909029,\n+      61032.85426467795\n+    ]\n+  ],\n+  \"5-5.F\": [\n+    [\n+      5.743001745948683,\n+      5.79995396257083\n+    ],\n+    [\n+      12.294724224904032,\n+      12.443427113719512\n+    ],\n+    [\n+      31.885076133390026,\n+      32.24275514048116\n+    ],\n+    [\n+      64.02850555473539,\n+      64.2202729522878\n+    ],\n+    [\n+      128.54688603030885,\n+      128.64464391651057\n+    ],\n+    [\n+      322.3881229518029,\n+      322.49138958707283\n+    ],\n+    [\n+      645.5518571799871,\n+      645.7594214606437\n+    ],\n+    [\n+      1292.6969631753743,\n+      1293.9318047206152\n+    ],\n+    [\n+      3239.1875802637173,\n+      3248.5822559491944\n+    ],\n+    [\n+      6497.189643364284,\n+      6534.173894761488\n+    ],\n+    [\n+      13062.644657248271,\n+      13198.577032993324\n+    ],\n+    [\n+      32962.10288769881,\n+      33632.392611702395\n+    ],\n+    [\n+      39636.06775991092,\n+      40525.28573817864\n+    ],\n+    [\n+      52992.538973649935,\n+      54329.22514779325\n+    ],\n+    [\n+      59643.42677733675,\n+      61175.28270501811\n+    ]\n+  ],\n+  \"5-5.G\": [\n+    [\n+      5.927365321401817,\n+      6.098158571052978\n+    ],\n+    [\n+      12.430360278148532,\n+      12.554474267353875\n+    ],\n+    [\n+      31.99117392174985,\n+      32.036587983056656\n+    ],\n+    [\n+      64.45122375486515,\n+      64.22682086890245\n+    ],\n+    [\n+      130.1218889062282,\n+      130.10619612666218\n+    ],\n+    [\n+      326.40811813065886,\n+      326.2951609121153\n+    ],\n+    [\n+      653.9720193289924,\n+      654.1170797127384\n+    ],\n+    [\n+      1309.462151794635,\n+      1310.4863596186676\n+    ],\n+    [\n+      3280.494393794143,\n+      3288.7354829137466\n+    ],\n+    [\n+      6578.579224742487,\n+      6611.994649493848\n+    ],\n+    [\n+      13223.956633314534,\n+      13350.310877454844\n+    ],\n+    [\n+      33349.52969958934,\n+      33980.99130081909\n+    ],\n+    [\n+      40101.68152195013,\n+      40944.80452528178\n+    ],\n+    [\n+      53622.91592319455,\n+      54907.74168573288\n+    ],\n+    [\n+      60366.2835447857,\n+      61854.081455418505\n+    ]\n+  ],\n+  \"5-5.H\": [\n+    [\n+      5.8624852143163695,\n+      6.006863111131283\n+    ],\n+    [\n+      12.336121035528462,\n+      12.45079930622533\n+    ],\n+    [\n+      31.707599085195017,\n+      31.689946763666693\n+    ],\n+    [\n+      64.49615579846154,\n+      64.76354913249862\n+    ],\n+    [\n+      129.5838280817255,\n+      129.92949887797687\n+    ],\n+    [\n+      324.405860624415,\n+      324.5450605482088\n+    ],\n+    [\n+      649.4056043049437,\n+      649.4984370805378\n+    ],\n+    [\n+      1299.56169804436,\n+      1299.7185014214456\n+    ],\n+    [\n+      3254.179770964936,\n+      3258.6845177012847\n+    ],\n+    [\n+      6524.68945017408,\n+      6549.329756674886\n+    ],\n+    [\n+      13114.690890551168,\n+      13221.734840956547\n+    ],\n+    [\n+      33063.00154730521,\n+      33631.79616972929\n+    ],\n+    [\n+      39752.00485628164,\n+      40513.57793969097\n+    ],\n+    [\n+      53137.78757403275,\n+      54293.589683039514\n+    ],\n+    [\n+      59792.781808752894,\n+      61106.28656747502\n+    ]\n+  ],\n+  \"5-6.E\": [\n+    [\n+      5.803731113497014,\n+      5.90742883792178\n+    ],\n+    [\n+      12.267599240633121,\n+      12.355458514895467\n+    ],\n+    [\n+      31.91809731850127,\n+      32.223187611145896\n+    ],\n+    [\n+      64.25588846486943,\n+      64.5042848256651\n+    ],\n+    [\n+      128.92215081911024,\n+      129.05087537659065\n+    ],\n+    [\n+      323.4465258940094,\n+      323.7444411488735\n+    ],\n+    [\n+      647.1807623801795,\n+      647.2871152848479\n+    ],\n+    [\n+      1295.9226953042999,\n+      1296.9206472328697\n+    ],\n+    [\n+      3247.385404131129,\n+      3256.316588059094\n+    ],\n+    [\n+      6515.957956870714,\n+      6554.407376094833\n+    ],\n+    [\n+      13120.479477119772,\n+      13271.609232065644\n+    ],\n+    [\n+      33152.674509828816,\n+      33931.4457667647\n+    ],\n+    [\n+      39889.200844399966,\n+      40934.82279440194\n+    ],\n+    [\n+      53389.93167986372,\n+      54999.667981411665\n+    ],\n+    [\n+      60133.268579011485,\n+      62017.99384812554\n+    ]\n+  ],\n+  \"5-6.F\": [\n+    [\n+      5.6618806012065255,\n+      5.682588469459333\n+    ],\n+    [\n+      12.079033576274567,\n+      12.107234228570709\n+    ],\n+    [\n+      31.344255384244388,\n+      31.408795770563586\n+    ],\n+    [\n+      63.39730596339476,\n+      63.46659010271509\n+    ],\n+    [\n+      127.29040256873164,\n+      127.15634932220507\n+    ],\n+    [\n+      319.86092915567974,\n+      320.00781761560427\n+    ],\n+    [\n+      640.1850810993362,\n+      640.1735439455549\n+    ],\n+    [\n+      1282.5221238485512,\n+      1283.884053272629\n+    ],\n+    [\n+      3214.593397606816,\n+      3225.1647925318857\n+    ],\n+    [\n+      6451.355725102653,\n+      6494.111232037398\n+    ],\n+    [\n+      12994.258605889308,\n+      13157.071788421035\n+    ],\n+    [\n+      32851.656423684726,\n+      33676.01000858785\n+    ],\n+    [\n+      39530.749300039686,\n+      40634.3387600419\n+    ],\n+    [\n+      52913.30307815875,\n+      54602.42662709803\n+    ],\n+    [\n+      59530.32002351877,\n+      61433.51814510349\n+    ]\n+  ],\n+  \"5-6.G\": [\n+    [\n+      5.686477340921611,\n+      5.7518462848062715\n+    ],\n+    [\n+      12.02745072200096,\n+      12.045465629959018\n+    ],\n+    [\n+      31.079982830373844,\n+      30.987944151320406\n+    ],\n+    [\n+      63.22024425748455,\n+      63.33032997482286\n+    ],\n+    [\n+      126.88781922162902,\n+      126.78925512161791\n+    ],\n+    [\n+      318.64042086840794,\n+      318.66604182239354\n+    ],\n+    [\n+      638.0116970060056,\n+      638.0280303369393\n+    ],\n+    [\n+      1277.6541040165407,\n+      1278.552350765316\n+    ],\n+    [\n+      3201.4100811864214,\n+      3209.80229082714\n+    ],\n+    [\n+      6423.65115033886,\n+      6460.669015867995\n+    ],\n+    [\n+      12938.19008868991,\n+      13087.080696636893\n+    ],\n+    [\n+      32695.2833692107,\n+      33471.26682953219\n+    ],\n+    [\n+      39341.21542077144,\n+      40384.480727438415\n+    ],\n+    [\n+      52663.251576790644,\n+      54274.195073579795\n+    ],\n+    [\n+      59252.22686681782,\n+      61070.87738396827\n+    ]\n+  ],\n+  \"5-6.H\": [\n+    [\n+      5.678293036427221,\n+      5.731520176392591\n+    ],\n+    [\n+      12.050625427722359,\n+      12.08395705063758\n+    ],\n+    [\n+      31.25269568502624,\n+      31.3126460122998\n+    ],\n+    [\n+      63.20744227608665,\n+      63.262947638771415\n+    ],\n+    [\n+      126.80266610003932,\n+      126.53565905703391\n+    ],\n+    [\n+      318.9695734271518,\n+      319.1142110891393\n+    ],\n+    [\n+      638.4137626357203,\n+      638.4112572992155\n+    ],\n+    [\n+      1279.3386022720647,\n+      1281.0807724574688\n+    ],\n+    [\n+      3206.856842802615,\n+      3218.610251924753\n+    ],\n+    [\n+      6436.571846351156,\n+      6482.408832514532\n+    ],\n+    [\n+      12966.222849619724,\n+      13135.716820637772\n+    ],\n+    [\n+      32778.72334983194,\n+      33620.145307346924\n+    ],\n+    [\n+      39441.45959189654,\n+      40563.78680183367\n+    ],\n+    [\n+      52788.308311331275,\n+      54496.31265844021\n+    ],\n+    [\n+      59455.46611497782,\n+      61450.01025804439\n+    ]\n+  ],\n+  \"6-1.E\": [\n+    [\n+      5.792784606263703,\n+      5.768625832587099\n+    ],\n+    [\n+      12.41185109026993,\n+      12.397282501806576\n+    ],\n+    [\n+      32.180964316676224,\n+      32.10748557158744\n+    ],\n+    [\n+      65.06515348181766,\n+      64.82959275592401\n+    ],\n+    [\n+      131.361872485915,\n+      131.32826563206135\n+    ],\n+    [\n+      329.4162426713833,\n+      329.15543829861844\n+    ],\n+    [\n+      660.1399780098359,\n+      660.1331010223129\n+    ],\n+    [\n+      1321.956320450803,\n+      1322.8271563601688\n+    ],\n+    [\n+      3312.4057441237624,\n+      3320.9297504164324\n+    ],\n+    [\n+      6646.097562506747,\n+      6683.808311638276\n+    ],\n+    [\n+      13385.01615968172,\n+      13537.104032721694\n+    ],\n+    [\n+      33822.10851938449,\n+      34616.26924515868\n+    ],\n+    [\n+      40690.03834596278,\n+      41751.50351880464\n+    ],\n+    [\n+      54447.1898267948,\n+      56066.823852071524\n+    ],\n+    [\n+      61307.50581624527,\n+      63187.1934155796\n+    ]\n+  ],\n+  \"6-1.F\": [\n+    [\n+      5.880538038420829,\n+      5.812191353800385\n+    ],\n+    [\n+      12.474238554353752,\n+      12.24305053721556\n+    ],\n+    [\n+      32.77335727042202,\n+      32.558037606298114\n+    ],\n+    [\n+      66.51249621602781,\n+      66.23553339197152\n+    ],\n+    [\n+      134.29655338205572,\n+      134.20152445126845\n+    ],\n+    [\n+      336.8388495779449,\n+      336.48331528156643\n+    ],\n+    [\n+      675.103433465467,\n+      675.0069463545711\n+    ],\n+    [\n+      1352.3599728281104,\n+      1353.510639849815\n+    ],\n+    [\n+      3388.614243550271,\n+      3398.013202125849\n+    ],\n+    [\n+      6797.417883587241,\n+      6835.757825096048\n+    ],\n+    [\n+      13681.262571234412,\n+      13828.396947824085\n+    ],\n+    [\n+      34532.98869442543,\n+      35282.17932629032\n+    ],\n+    [\n+      41540.051689550746,\n+      42543.98371380538\n+    ],\n+    [\n+      55577.5385070765,\n+      57116.52791619577\n+    ],\n+    [\n+      62509.589338569596,\n+      64224.86921130757\n+    ]\n+  ],\n+  \"6-1.G\": [\n+    [\n+      5.6840744808921295,\n+      5.628672846019914\n+    ],\n+    [\n+      12.178691641509184,\n+      12.096048816753376\n+    ],\n+    [\n+      31.768285693887464,\n+      31.709151804668508\n+    ],\n+    [\n+      64.43617905712334,\n+      64.4354421415488\n+    ],\n+    [\n+      129.71791648457747,\n+      129.78017461413862\n+    ],\n+    [\n+      324.89185432123696,\n+      324.4722342210103\n+    ],\n+    [\n+      651.561980977446,\n+      651.7181089172748\n+    ],\n+    [\n+      1305.13424415995,\n+      1306.6766718933775\n+    ],\n+    [\n+      3271.600257437328,\n+      3283.083853640566\n+    ],\n+    [\n+      6566.266772845656,\n+      6611.750930894736\n+    ],\n+    [\n+      13226.977702925797,\n+      13396.33601579929\n+    ],\n+    [\n+      33438.82522736828,\n+      34290.18300027188\n+    ],\n+    [\n+      40240.54809459364,\n+      41382.10451759747\n+    ],\n+    [\n+      53878.41142155643,\n+      55638.24942227408\n+    ],\n+    [\n+      60687.05652392722,\n+      62745.530307511755\n+    ]\n+  ],\n+  \"6-1.H\": [\n+    [\n+      5.61954644012802,\n+      5.5955622164711825\n+    ],\n+    [\n+      11.963894274640078,\n+      11.872498073210881\n+    ],\n+    [\n+      31.198651109504333,\n+      31.104513537974114\n+    ],\n+    [\n+      63.49395438114552,\n+      63.63333978037342\n+    ],\n+    [\n+      127.44424637986758,\n+      127.41002623167098\n+    ],\n+    [\n+      319.57377507956886,\n+      319.29849556256534\n+    ],\n+    [\n+      640.5570392805985,\n+      640.6467801579274\n+    ],\n+    [\n+      1282.9053769691222,\n+      1284.108532172757\n+    ],\n+    [\n+      3216.265810704566,\n+      3227.15696175856\n+    ],\n+    [\n+      6456.679573982388,\n+      6502.084660579263\n+    ],\n+    [\n+      13013.038137689942,\n+      13187.24868838573\n+    ],\n+    [\n+      32920.41111240087,\n+      33802.82469225769\n+    ],\n+    [\n+      39618.11959360921,\n+      40796.906078185435\n+    ],\n+    [\n+      53041.53706266305,\n+      54844.21275817656\n+    ],\n+    [\n+      59743.34255282893,\n+      61847.81967272945\n+    ]\n+  ],\n+  \"6-2.E\": [\n+    [\n+      5.680988563151796,\n+      5.671707525509424\n+    ],\n+    [\n+      12.186049981389793,\n+      12.21652484435231\n+    ],\n+    [\n+      31.61451716884052,\n+      31.677411274010208\n+    ],\n+    [\n+      64.16582454721888,\n+      64.45436333987266\n+    ],\n+    [\n+      128.85832698823415,\n+      129.18524483923676\n+    ],\n+    [\n+      322.6414371566138,\n+      322.78971694074727\n+    ],\n+    [\n+      645.8024629191517,\n+      645.843395893459\n+    ],\n+    [\n+      1293.1470888410072,\n+      1293.9965887308613\n+    ],\n+    [\n+      3241.399268220038,\n+      3250.9184693800635\n+    ],\n+    [\n+      6506.160878023245,\n+      6547.998104162743\n+    ],\n+    [\n+      13099.239565786685,\n+      13264.173614297948\n+    ],\n+    [\n+      33158.58105395684,\n+      34012.547856098914\n+    ],\n+    [\n+      39907.53150919645,\n+      41055.75466024211\n+    ],\n+    [\n+      53435.7934947786,\n+      55206.20943956747\n+    ],\n+    [\n+      60168.681550443725,\n+      62217.298173007206\n+    ]\n+  ],\n+  \"6-2.F\": [\n+    [\n+      5.598664461370182,\n+      5.497045414551138\n+    ],\n+    [\n+      11.991219214930108,\n+      11.80437247068219\n+    ],\n+    [\n+      31.38726457168833,\n+      31.15860170951853\n+    ],\n+    [\n+      63.94300358103677,\n+      63.87417092336909\n+    ],\n+    [\n+      128.73313166496126,\n+      128.66577837609103\n+    ],\n+    [\n+      323.12254951810087,\n+      323.0787433060595\n+    ],\n+    [\n+      646.8982175191214,\n+      646.6870812502483\n+    ],\n+    [\n+      1295.5663584752567,\n+      1296.1374237307868\n+    ],\n+    [\n+      3245.970249167525,\n+      3253.3031637901204\n+    ],\n+    [\n+      6510.136219126665,\n+      6542.346596671329\n+    ],\n+    [\n+      13093.574717614298,\n+      13225.20166566445\n+    ],\n+    [\n+      33060.86076099853,\n+      33741.9401527135\n+    ],\n+    [\n+      39761.78032902288,\n+      40671.519631236704\n+    ],\n+    [\n+      53175.837407910614,\n+      54556.503135714935\n+    ],\n+    [\n+      59871.612474459405,\n+      61476.12914407048\n+    ]\n+  ],\n+  \"6-2.G\": [\n+    [\n+      5.642807748578484,\n+      5.5557751875757075\n+    ],\n+    [\n+      11.990474149069602,\n+      11.74309691106047\n+    ],\n+    [\n+      31.54566027167101,\n+      31.31439160701391\n+    ],\n+    [\n+      64.23020245637804,\n+      64.12265621773845\n+    ],\n+    [\n+      129.34116486614394,\n+      129.22591918323113\n+    ],\n+    [\n+      324.795395487845,\n+      324.77851362942613\n+    ],\n+    [\n+      650.164458473546,\n+      649.92379443167\n+    ],\n+    [\n+      1302.4807061952145,\n+      1303.3709419949703\n+    ],\n+    [\n+      3262.338195623749,\n+      3269.5436402767655\n+    ],\n+    [\n+      6544.136172143638,\n+      6577.362272787408\n+    ],\n+    [\n+      13164.73228500853,\n+      13300.723795835696\n+    ],\n+    [\n+      33266.99506338404,\n+      33990.89472308069\n+    ],\n+    [\n+      40022.71448493681,\n+      40998.27165975539\n+    ],\n+    [\n+      53564.51467786368,\n+      55076.4462450491\n+    ],\n+    [\n+      60327.02889042911,\n+      62098.65436906748\n+    ]\n+  ],\n+  \"6-2.H\": [\n+    [\n+      5.866901970721279,\n+      6.036270916083334\n+    ],\n+    [\n+      12.846292032720445,\n+      13.547601575781764\n+    ],\n+    [\n+      32.22948118677029,\n+      32.85248817976673\n+    ],\n+    [\n+      64.47195599831049,\n+      64.93390468799845\n+    ],\n+    [\n+      129.21911975269356,\n+      129.63627837088896\n+    ],\n+    [\n+      323.35548153682663,\n+      323.53772061685174\n+    ],\n+    [\n+      647.6978128827651,\n+      648.2727292470288\n+    ],\n+    [\n+      1295.8269172572868,\n+      1296.630803984656\n+    ],\n+    [\n+      3246.4006067535497,\n+      3254.0955614663258\n+    ],\n+    [\n+      6510.842257592107,\n+      6543.624333214674\n+    ],\n+    [\n+      13092.500741569092,\n+      13221.61901150222\n+    ],\n+    [\n+      33042.842644813274,\n+      33704.443234747625\n+    ],\n+    [\n+      39740.20550782422,\n+      40626.51679515193\n+    ],\n+    [\n+      53159.115738122455,\n+      54521.018695434446\n+    ],\n+    [\n+      59829.06999904069,\n+      61387.4684687576\n+    ]\n+  ],\n+  \"6-3.E\": [\n+    [\n+      5.867046844628958,\n+      6.0607167518255345\n+    ],\n+    [\n+      12.246661599135466,\n+      12.361639840590666\n+    ],\n+    [\n+      31.3524056440584,\n+      31.213120853933596\n+    ],\n+    [\n+      63.59629841595614,\n+      63.43476273350347\n+    ],\n+    [\n+      128.18595629312176,\n+      128.0818847600893\n+    ],\n+    [\n+      321.775130532146,\n+      321.6645738293655\n+    ],\n+    [\n+      644.632188740786,\n+      644.7193172942675\n+    ],\n+    [\n+      1290.276480208452,\n+      1290.6893270532041\n+    ],\n+    [\n+      3235.076557352644,\n+      3244.3598800406753\n+    ],\n+    [\n+      6492.924499670951,\n+      6533.690131299059\n+    ],\n+    [\n+      13069.430345376859,\n+      13228.54213253857\n+    ],\n+    [\n+      33057.399895676666,\n+      33869.0918792386\n+    ],\n+    [\n+      39774.57860719323,\n+      40859.62364739877\n+    ],\n+    [\n+      53235.179895196525,\n+      54895.877766859994\n+    ],\n+    [\n+      59957.40525223926,\n+      61897.72622789448\n+    ]\n+  ],\n+  \"6-3.F\": [\n+    [\n+      5.735846046869243,\n+      5.713623420640419\n+    ],\n+    [\n+      12.116226454209954,\n+      11.934581081297747\n+    ],\n+    [\n+      31.71944167151208,\n+      31.51216835690763\n+    ],\n+    [\n+      64.50704906262476,\n+      64.37389061269552\n+    ],\n+    [\n+      129.91434204731596,\n+      129.763567103496\n+    ],\n+    [\n+      326.16102002668737,\n+      325.9824058748164\n+    ],\n+    [\n+      653.3569488422477,\n+      653.2501247877765\n+    ],\n+    [\n+      1308.6904029212938,\n+      1309.6696309982\n+    ],\n+    [\n+      3278.964596919214,\n+      3287.4951210082295\n+    ],\n+    [\n+      6575.717946925761,\n+      6609.916084273674\n+    ],\n+    [\n+      13217.653597380355,\n+      13345.578590860845\n+    ],\n+    [\n+      33345.07299342768,\n+      33990.79160025802\n+    ],\n+    [\n+      40096.28869969242,\n+      40956.544208319385\n+    ],\n+    [\n+      53611.82266207358,\n+      54915.53148138103\n+    ],\n+    [\n+      60331.71807057046,\n+      61817.606640307895\n+    ]\n+  ],\n+  \"6-3.G\": [\n+    [\n+      5.800579140727081,\n+      5.806514706623483\n+    ],\n+    [\n+      12.429673356882978,\n+      12.480960938500349\n+    ],\n+    [\n+      32.013043622398285,\n+      31.896081251910392\n+    ],\n+    [\n+      64.89131087285162,\n+      64.73284265272846\n+    ],\n+    [\n+      130.96420572193594,\n+      131.03882263052535\n+    ],\n+    [\n+      328.0822056744439,\n+      327.75669823618404\n+    ],\n+    [\n+      657.7368864451091,\n+      657.868429175018\n+    ],\n+    [\n+      1316.6256883027293,\n+      1317.251636771618\n+    ],\n+    [\n+      3297.3803245426316,\n+      3303.5883249532712\n+    ],\n+    [\n+      6608.901426593542,\n+      6634.746251199042\n+    ],\n+    [\n+      13279.681632416137,\n+      13385.040250087795\n+    ],\n+    [\n+      33455.899245393164,\n+      34001.61344048994\n+    ],\n+    [\n+      40217.93503388009,\n+      40945.92300091279\n+    ],\n+    [\n+      53754.02416103754,\n+      54859.543233079996\n+    ],\n+    [\n+      60487.17276895151,\n+      61745.24932267538\n+    ]\n+  ],\n+  \"6-3.H\": [\n+    [\n+      5.991015378410717,\n+      6.161331980163222\n+    ],\n+    [\n+      12.830417273750978,\n+      13.228514497150638\n+    ],\n+    [\n+      32.6257357708342,\n+      32.95375806837274\n+    ],\n+    [\n+      65.84221877998968,\n+      66.29204593164367\n+    ],\n+    [\n+      131.9869817812105,\n+      132.39082079928676\n+    ],\n+    [\n+      330.0966100800775,\n+      330.0420502304721\n+    ],\n+    [\n+      661.5930372618564,\n+      662.090603829936\n+    ],\n+    [\n+      1322.946214012484,\n+      1322.9072532130278\n+    ],\n+    [\n+      3314.9561603950906,\n+      3321.271207521288\n+    ],\n+    [\n+      6647.244042112303,\n+      6676.516699817827\n+    ],\n+    [\n+      13357.957857485744,\n+      13471.788378032623\n+    ],\n+    [\n+      33654.50940827709,\n+      34224.850703086966\n+    ],\n+    [\n+      40456.421455446914,\n+      41214.21026142277\n+    ],\n+    [\n+      54067.6623322584,\n+      55208.54889305485\n+    ],\n+    [\n+      60853.824492946456,\n+      62166.104802531685\n+    ]\n+  ],\n+  \"6-4.E\": [\n+    [\n+      5.897291147124707,\n+      5.929661384818709\n+    ],\n+    [\n+      12.598359838481503,\n+      12.668014368518445\n+    ],\n+    [\n+      32.475699206958055,\n+      32.430403661311175\n+    ],\n+    [\n+      65.70393996520036,\n+      65.56715618847481\n+    ],\n+    [\n+      132.34793734602255,\n+      132.21509690902042\n+    ],\n+    [\n+      332.31702494320024,\n+      332.2334407805856\n+    ],\n+    [\n+      665.657096628858,\n+      665.7140447996484\n+    ],\n+    [\n+      1333.4435139640193,\n+      1334.8893943070696\n+    ],\n+    [\n+      3341.0641868607995,\n+      3350.9613158399015\n+    ],\n+    [\n+      6699.415896342788,\n+      6735.837255137897\n+    ],\n+    [\n+      13466.285710056623,\n+      13599.290839104155\n+    ],\n+    [\n+      33962.34636031946,\n+      34617.956006326225\n+    ],\n+    [\n+      40836.26508935071,\n+      41707.5899751269\n+    ],\n+    [\n+      54592.96244903124,\n+      55905.622016710644\n+    ],\n+    [\n+      61457.647587540545,\n+      62976.827731126\n+    ]\n+  ],\n+  \"6-4.F\": [\n+    [\n+      6.3821022628130155,\n+      6.760127443331578\n+    ],\n+    [\n+      13.213146158372206,\n+      13.56424479290873\n+    ],\n+    [\n+      33.622820991917656,\n+      33.838121192066964\n+    ],\n+    [\n+      67.83782882190069,\n+      68.03776077559823\n+    ],\n+    [\n+      136.3045357458741,\n+      136.51171413115492\n+    ],\n+    [\n+      341.66028892859924,\n+      341.84543136152024\n+    ],\n+    [\n+      684.0918276680908,\n+      684.4126091157859\n+    ],\n+    [\n+      1369.3469751672792,\n+      1370.331561590575\n+    ],\n+    [\n+      3430.4315630313745,\n+      3438.7444779582884\n+    ],\n+    [\n+      6878.520848297852,\n+      6912.106698897729\n+    ],\n+    [\n+      13825.790985712234,\n+      13952.771409774952\n+    ],\n+    [\n+      34843.451761761076,\n+      35469.16810218839\n+    ],\n+    [\n+      41887.373781636794,\n+      42716.13416080971\n+    ],\n+    [\n+      55980.395420814835,\n+      57221.16493003338\n+    ],\n+    [\n+      62793.167941822045,\n+      63996.51340291959\n+    ]\n+  ],\n+  \"6-4.G\": [\n+    [\n+      6.024988920561752,\n+      6.139891143995883\n+    ],\n+    [\n+      12.718679296138657,\n+      12.8081962848389\n+    ],\n+    [\n+      32.83067958977502,\n+      32.87899168306227\n+    ],\n+    [\n+      66.19848102065266,\n+      66.02721533044418\n+    ],\n+    [\n+      133.2956466787658,\n+      133.04606566516878\n+    ],\n+    [\n+      334.9876009992156,\n+      334.90300018536584\n+    ],\n+    [\n+      671.058407698387,\n+      671.1670726421934\n+    ],\n+    [\n+      1344.0831723282565,\n+      1345.4629248974943\n+    ],\n+    [\n+      3366.8900221532285,\n+      3375.8337315684203\n+    ],\n+    [\n+      6753.036829290873,\n+      6789.524417361738\n+    ],\n+    [\n+      13580.772926240457,\n+      13719.923193897497\n+    ],\n+    [\n+      34271.226883172865,\n+      34969.446926495686\n+    ],\n+    [\n+      41215.16604805919,\n+      42146.409797658474\n+    ],\n+    [\n+      55121.95919395623,\n+      56539.87738860509\n+    ],\n+    [\n+      62016.87220619833,\n+      63616.83288161934\n+    ]\n+  ],\n+  \"6-4.H\": [\n+    [\n+      5.622117560859253,\n+      5.409390057717058\n+    ],\n+    [\n+      12.24825088500627,\n+      12.018558322504603\n+    ],\n+    [\n+      32.37251613975156,\n+      32.34535664570571\n+    ],\n+    [\n+      65.56832830679093,\n+      65.54135901947028\n+    ],\n+    [\n+      131.7095433684957,\n+      131.43313882016568\n+    ],\n+    [\n+      330.9384095987,\n+      330.716764663356\n+    ],\n+    [\n+      663.008292718461,\n+      662.90028506196\n+    ],\n+    [\n+      1328.6868421363213,\n+      1330.3472087670987\n+    ],\n+    [\n+      3329.7441337854093,\n+      3340.7593998280513\n+    ],\n+    [\n+      6680.659806292384,\n+      6723.263292132732\n+    ],\n+    [\n+      13444.14148187978,\n+      13604.599975126534\n+    ],\n+    [\n+      33972.101798090895,\n+      34767.58938703929\n+    ],\n+    [\n+      40869.280745619915,\n+      41931.53433083485\n+    ],\n+    [\n+      54692.14338080142,\n+      56319.1052031424\n+    ],\n+    [\n+      61585.647941592615,\n+      63476.305723653626\n+    ]\n+  ],\n+  \"6-5.E\": [\n+    [\n+      5.551065870542002,\n+      5.446594179394074\n+    ],\n+    [\n+      11.970007440073799,\n+      11.85541801698511\n+    ],\n+    [\n+      31.247506207690456,\n+      31.125301055498184\n+    ],\n+    [\n+      63.40652065314496,\n+      63.30220931487535\n+    ],\n+    [\n+      127.85925643211746,\n+      127.92591829628515\n+    ],\n+    [\n+      320.2856757486276,\n+      319.93422002225145\n+    ],\n+    [\n+      642.0395881347806,\n+      642.0335196635903\n+    ],\n+    [\n+      1285.6615197010524,\n+      1286.461602119023\n+    ],\n+    [\n+      3221.819039725369,\n+      3230.3498864639523\n+    ],\n+    [\n+      6463.259634267826,\n+      6499.327359987938\n+    ],\n+    [\n+      13004.292772437442,\n+      13147.548131736863\n+    ],\n+    [\n+      32861.45846125517,\n+      33599.06701377399\n+    ],\n+    [\n+      39534.46002652617,\n+      40524.92226364003\n+    ],\n+    [\n+      52909.987343205576,\n+      54438.35292903673\n+    ],\n+    [\n+      59555.98843074359,\n+      61309.431592317094\n+    ]\n+  ],\n+  \"6-5.F\": [\n+    [\n+      5.974880395880237,\n+      6.182099128604023\n+    ],\n+    [\n+      12.546822656245709,\n+      12.761473600071557\n+    ],\n+    [\n+      32.01971234771029,\n+      32.020120607210956\n+    ],\n+    [\n+      64.7854634440142,\n+      64.74577575733969\n+    ],\n+    [\n+      130.66641658761623,\n+      130.89631878005724\n+    ],\n+    [\n+      327.00668201508955,\n+      326.7414207805824\n+    ],\n+    [\n+      655.6473366731923,\n+      655.9639416885184\n+    ],\n+    [\n+      1312.135622391513,\n+      1312.8232687567709\n+    ],\n+    [\n+      3287.912050041053,\n+      3296.0435181841767\n+    ],\n+    [\n+      6593.8396326616485,\n+      6627.461985433507\n+    ],\n+    [\n+      13255.755267315373,\n+      13384.18570997929\n+    ],\n+    [\n+      33432.390767026875,\n+      34071.69145606152\n+    ],\n+    [\n+      40197.838190666385,\n+      41046.982802848775\n+    ],\n+    [\n+      53738.77510034491,\n+      55018.717696415675\n+    ],\n+    [\n+      60493.775399861945,\n+      61973.07870119257\n+    ]\n+  ],\n+  \"6-5.G\": [\n+    [\n+      6.257169684183113,\n+      6.708260692322852\n+    ],\n+    [\n+      12.860191546576626,\n+      13.2649224716497\n+    ],\n+    [\n+      32.490310995610095,\n+      32.6191306462836\n+    ],\n+    [\n+      65.4697681918507,\n+      65.42058745723246\n+    ],\n+    [\n+      132.21216137560629,\n+      132.592455956102\n+    ],\n+    [\n+      330.69794088733,\n+      330.6210148746433\n+    ],\n+    [\n+      662.7857909830268,\n+      663.2271203033068\n+    ],\n+    [\n+      1326.0511484754509,\n+      1326.6180427890715\n+    ],\n+    [\n+      3323.281348734389,\n+      3331.680199958163\n+    ],\n+    [\n+      6665.52031269277,\n+      6700.622183823049\n+    ],\n+    [\n+      13402.148230992643,\n+      13535.792824442928\n+    ],\n+    [\n+      33814.82044453947,\n+      34486.53260279497\n+    ],\n+    [\n+      40664.66528426033,\n+      41561.07592817547\n+    ],\n+    [\n+      54378.09161743807,\n+      55739.02868050562\n+    ],\n+    [\n+      61209.928571592216,\n+      62777.2044360189\n+    ]\n+  ],\n+  \"6-5.H\": [\n+    [\n+      5.441364543029212,\n+      5.105079098198803\n+    ],\n+    [\n+      11.962604988631314,\n+      11.550323030704018\n+    ],\n+    [\n+      32.001932535117014,\n+      31.845628187031465\n+    ],\n+    [\n+      64.99906649721221,\n+      64.8903081103284\n+    ],\n+    [\n+      130.4676938694763,\n+      129.9315863670092\n+    ],\n+    [\n+      328.5299226375376,\n+      328.3598889819665\n+    ],\n+    [\n+      657.8311772874572,\n+      657.4724625481045\n+    ],\n+    [\n+      1318.5631811869146,\n+      1319.9576610444974\n+    ],\n+    [\n+      3303.027106146092,\n+      3311.967962836354\n+    ],\n+    [\n+      6625.682991390836,\n+      6662.559317313087\n+    ],\n+    [\n+      13327.311383925611,\n+      13469.350944222811\n+    ],\n+    [\n+      33662.530690631014,\n+      34392.33391104337\n+    ],\n+    [\n+      40487.6846426443,\n+      41460.164944817254\n+    ],\n+    [\n+      54153.43600591282,\n+      55628.361919623225\n+    ],\n+    [\n+      60955.32906600982,\n+      62649.02998542767\n+    ]\n+  ],\n+  \"6-6.E\": [\n+    [\n+      5.325821972147624,\n+      5.313536522630862\n+    ],\n+    [\n+      11.36321398077039,\n+      11.32318296346978\n+    ],\n+    [\n+      29.548070699500915,\n+      29.497093017705748\n+    ],\n+    [\n+      59.90067628259596,\n+      59.875974924387464\n+    ],\n+    [\n+      120.65138404350871,\n+      120.72492235327616\n+    ],\n+    [\n+      302.40901389960453,\n+      302.28267068684994\n+    ],\n+    [\n+      605.8106813608495,\n+      605.823428284889\n+    ],\n+    [\n+      1213.891724418333,\n+      1215.46249450236\n+    ],\n+    [\n+      3046.243171633022,\n+      3060.6561276106954\n+    ],\n+    [\n+      6125.952442464274,\n+      6188.00382650169\n+    ],\n+    [\n+      12373.194235638335,\n+      12613.936689572996\n+    ],\n+    [\n+      31513.108159297,\n+      32747.198564490027\n+    ],\n+    [\n+      37985.683583055616,\n+      39650.492321113765\n+    ],\n+    [\n+      50993.96443227153,\n+      53592.66317871493\n+    ],\n+    [\n+      57471.72548166009,\n+      60509.42310522245\n+    ]\n+  ],\n+  \"6-6.F\": [\n+    [\n+      5.635806654920515,\n+      5.729768455109077\n+    ],\n+    [\n+      11.981680825306627,\n+      12.123169264307307\n+    ],\n+    [\n+      30.744218034423856,\n+      30.751222292132308\n+    ],\n+    [\n+      62.20205906178548,\n+      62.174627243607105\n+    ],\n+    [\n+      125.04970326659675,\n+      124.88554411163487\n+    ],\n+    [\n+      314.1551364866943,\n+      314.1424578825758\n+    ],\n+    [\n+      629.1938254316659,\n+      629.2969643234243\n+    ],\n+    [\n+      1260.435966902349,\n+      1261.937240680439\n+    ],\n+    [\n+      3160.575342585872,\n+      3172.7234399908907\n+    ],\n+    [\n+      6347.405551474998,\n+      6397.500779756026\n+    ],\n+    [\n+      12792.936864289253,\n+      12984.92033342643\n+    ],\n+    [\n+      32435.78286942631,\n+      33408.34510173788\n+    ],\n+    [\n+      39052.07894821274,\n+      40356.31747006813\n+    ],\n+    [\n+      52319.27111884197,\n+      54325.74323630549\n+    ],\n+    [\n+      58848.722024234834,\n+      61094.64323682961\n+    ]\n+  ],\n+  \"6-6.G\": [\n+    [\n+      5.683461150857522,\n+      5.740976645353619\n+    ],\n+    [\n+      12.179897604975302,\n+      12.342497221905449\n+    ],\n+    [\n+      31.289195414625603,\n+      31.38046384465567\n+    ],\n+    [\n+      63.26899145706084,\n+      63.37538031354067\n+    ],\n+    [\n+      127.14808933179314,\n+      127.20424473221085\n+    ],\n+    [\n+      318.7938608871233,\n+      318.7082415707806\n+    ],\n+    [\n+      638.7156549193479,\n+      638.90596378757\n+    ],\n+    [\n+      1279.4399427203612,\n+      1281.064744407141\n+    ],\n+    [\n+      3207.0458288654877,\n+      3218.43944093658\n+    ],\n+    [\n+      6436.512298379841,\n+      6481.180956553299\n+    ],\n+    [\n+      12960.270214117834,\n+      13128.436330280421\n+    ],\n+    [\n+      32796.2721623204,\n+      33650.40111222381\n+    ],\n+    [\n+      39470.814321035126,\n+      40617.24597867153\n+    ],\n+    [\n+      52853.94933907506,\n+      54622.58918769335\n+    ],\n+    [\n+      59447.48108889104,\n+      61423.005547402914\n+    ]\n+  ],\n+  \"6-6.H\": [\n+    [\n+      5.543240468043179,\n+      5.63923563489194\n+    ],\n+    [\n+      11.779172773018319,\n+      11.920052357016111\n+    ],\n+    [\n+      30.20657471819067,\n+      30.199958437012903\n+    ],\n+    [\n+      60.9515046656793,\n+      60.7351954200743\n+    ],\n+    [\n+      122.59170281061752,\n+      122.10596984744463\n+    ],\n+    [\n+      308.8740365814826,\n+      308.93635509596874\n+    ],\n+    [\n+      618.3859524728339,\n+      618.4062449339037\n+    ],\n+    [\n+      1239.2478316745767,\n+      1241.024686629599\n+    ],\n+    [\n+      3106.220360971844,\n+      3117.6858320117503\n+    ],\n+    [\n+      6236.206203348094,\n+      6282.415989783846\n+    ],\n+    [\n+      12561.601134220216,\n+      12735.620064353776\n+    ],\n+    [\n+      31808.24173133547,\n+      32685.371368050382\n+    ],\n+    [\n+      38284.755739661254,\n+      39458.70944924723\n+    ],\n+    [\n+      51268.86322399042,\n+      53071.03846984919\n+    ],\n+    [\n+      57730.66344299372,\n+      59814.99367055382\n+    ]\n+  ]\n+}\n\\ No newline at end of file\n",
                            "Issue 22702: Move example json from VIS_NonLinearity_Flat",
                            "Chris Dolding",
                            "2023-07-27T13:44:55.000+01:00",
                            "246531cd5b713b5708c2cc518f14a386e52043f1"
                        ]
                    ],
                    "VIS_NonLinearity/auxdir/VIS_NonLinearity/Patty_FlatfieldNL.readme.txt": [
                        [
                            "@@ -1,4 +1,4 @@\n An example json file containing measured NL points for each quadrant.\n Downloaded from:\n https://euclid.roe.ac.uk/issues/22517#note-28\n-https://euclid.roe.ac.uk/attachments/87505\n\\ No newline at end of file\n+https://euclid.roe.ac.uk/attachments/87505\n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ],
                        [
                            "@@ -0,0 +1,4 @@\n+An example json file containing measured NL points for each quadrant.\n+Downloaded from:\n+https://euclid.roe.ac.uk/issues/22517#note-28\n+https://euclid.roe.ac.uk/attachments/87505\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ],
                        [
                            "@@ -0,0 +1,4 @@\n+An example json file containing measured NL points for each quadrant.\n+Downloaded from:\n+https://euclid.roe.ac.uk/issues/22517#note-28\n+https://euclid.roe.ac.uk/attachments/87505\n",
                            "Issue 22702: Move example json from VIS_NonLinearity_Flat",
                            "Chris Dolding",
                            "2023-07-27T13:44:55.000+01:00",
                            "246531cd5b713b5708c2cc518f14a386e52043f1"
                        ]
                    ],
                    "VIS_NonLinearity/python/VIS_NonLinearity/VIS_NonLinCorrection_IO/file_entry_point.py": [
                        [
                            "@@ -22,6 +22,8 @@ A corrected copy of the specified input quadrant will be written to the output f\n \n import os.path\n import numpy as np\n+import json\n+import configparser\n import re #regular expressions\n from astropy.io import fits\n \n@@ -29,15 +31,18 @@ import ElementsKernel.Logging as elog\n \n import VIS_PyLibrary_M.fits_io_library as fio\n \n-from VIS_NonLinearity_Flat.VIS_NonLinCorrectionFlat_IO import file_entry_point as flat_method\n-\n-from ..VIS_NonLin_Removal import non_lin_removal as algo\n+from ..VIS_NonLin_Removal import non_lin_removal as pixel_algo\n+from ..VIS_NonLin_Removal import non_lin_flat_removal as flat_algo\n \n __all__ = ['file_layer_entry_point']\n \n+#the name of this PE's [section] in the configuration ini file\n+_CONFIG_SECTION = \"CorrectNonLinearity\"\n+\n \n-def _read_corr_model_file(model_file_name, quad_name):\n-    \"\"\"Read the non-linearity correction model of the specified quadrant from a file.\n+def _read_corr_model_file_pixel(model_file_name, quad_name):\n+    \"\"\"Read the non-linearity correction model of the specified quadrant from a file.  For the pixel-based method\n+       where the file contains a polynomial.\n \n     Parameters\n     ----------\n@@ -65,7 +70,33 @@ def _read_corr_model_file(model_file_name, quad_name):\n     model_coeffs = [model[name][0] for name in model.names if iscoeff(name)]\n     return model_coeffs\n \n-def file_layer_entry_point(input_file, model_file, output_file, quadrant_id=None):\n+def _read_corr_model_file_flat(model_file_name, quad_name):\n+    \"\"\"Read the non-linearity correction model of the specified quadrant from a json file.  Intended for the\n+       list of data points which define the model fitted to flat exposures.\n+\n+    Parameters\n+    ----------\n+    model_file_name : string\n+        File name of the json file containing the model which converts non-linear flux to linear flux, where both\n+        are in ADU.  It must contain the quadrant specified by `quad_name`.\n+    quad_name : string\n+        Name of the quadrant whose model shall be read from the file.  It should match a name used inside the file.\n+\n+    Returns\n+    -------\n+    2-D array_like of float\n+        A set of pairs of flux values which convert non-linear flux to linear flux, where both are in ADU.  If there are\n+        N pairs this array's shape is [N][2].  In each pair, index [1] is a non-linear (i.e. observed) flux and [0] is the\n+        corresponding linear (i.e. corrected) flux.\n+    \"\"\"\n+    log = elog.getLogger(__name__)\n+    with open( model_file_name, \"r\") as file:\n+        json_data = json.load(file)\n+    model_points = np.array(json_data[quad_name])\n+    log.info(\"_read_corr_model_file(): Loaded a model with \" + str(len(model_points)) + \" points\")\n+    return model_points\n+\n+def file_layer_entry_point(input_file, model_file, config_file, output_file, quadrant_id=None):\n     \"\"\"Handles the I/O to/from files.  It is a wrapper around the core algorithm.\n \n     Parameters\n@@ -76,6 +107,8 @@ def file_layer_entry_point(input_file, model_file, output_file, quadrant_id=None\n         File name of the FITS (for pixel method) or json (for flat method) file containing the model which converts\n         non-linear flux to linear flux, where both are in ADU.  It must contain the quadrant specified by `quadrant_id`.\n         The file name must end in .fits or .json, to distinguish the two supported methods of correcting non-linearity.\n+    config_file : string\n+        File name of the configuration parameters for this PE.  It should be in the ini file format.\n     output_file : string\n         Output FITS file name.  If it already exists, only the one corrected quadrant will be modified.  If it does\n         not already exist, a new output file will be created.\n@@ -88,25 +121,41 @@ def file_layer_entry_point(input_file, model_file, output_file, quadrant_id=None\n     log.info(\"file_layer_entry_point(): argument 'input_file' is: \" + str(input_file))\n     log.info(\"file_layer_entry_point(): argument 'quadrant_id' is: \" + str(quadrant_id))\n     log.info(\"file_layer_entry_point(): argument 'model_file' is: \" + str(model_file))\n+    log.info(\"file_layer_entry_point(): argument 'config_file' is: \" + str(config_file))\n     log.info(\"file_layer_entry_point(): argument 'output_file' is: \" + str(output_file))\n+    if config_file is None:\n+        message = (\"file_layer_entry_point(): Configuration ini file name must be supplied (see #22822)\")\n+        log.error(message)\n+        raise Exception(message)\n+    config = configparser.ConfigParser()\n+    config.read(config_file)\n+    if _CONFIG_SECTION not in config:\n+        message = (\"file_layer_entry_point(): The section [\" + str(_CONFIG_SECTION) + \"] is missing from \"\n+                   \"the configuration ini file (see #22822)\")\n+        log.error(message)\n+        raise Exception(message)\n+    non_lin_cfg = config[_CONFIG_SECTION]\n     if (quadrant_id is None) or (quadrant_id == \"\"):\n         quadrant_id = 1 #use the first image extension\n     elif quadrant_id.isdigit():\n         quadrant_id = int(quadrant_id)\n     quad_name = fio.read_ext_name(input_file, quadrant_id)\n+    log.info(\"file_layer_entry_point(): quadrant name (converted) is: \" + str(quad_name))\n+    image = fio.load_single_ext(input_file, quad_name, apply_gain=False)\n     if \".json\" in model_file.lower():\n         log.info(\"file_layer_entry_point(): calling flat version of NL removal\")\n-        flat_method.file_layer_entry_point(input_file, model_file, output_file, str(quadrant_id))\n+        model_points = _read_corr_model_file_flat(model_file, quad_name)\n+        log.debug(\"file_layer_entry_point(): FITS model points are \" + str(model_points))\n+        output_image = flat_algo.remove_non_lin_flat(image, model_points, non_lin_cfg)\n     else:\n-        log.info(\"file_layer_entry_point(): quadrant name (converted) is: \" + str(quad_name))\n-        image = fio.load_single_ext(input_file, quad_name, apply_gain=False)\n-        model_coeffs = _read_corr_model_file(model_file, quad_name)\n+        log.info(\"file_layer_entry_point(): calling pixel-based version of NL removal\")\n+        model_coeffs = _read_corr_model_file_pixel(model_file, quad_name)\n         log.debug(\"file_layer_entry_point(): FITS model coeffs are \" + str(model_coeffs))\n-        output_image = algo.remove_non_lin(image, model_coeffs)\n-        if os.path.isfile(output_file):\n-            log.info(\"file_layer_entry_point(): saving to existing file: \" + output_file)\n-            fio.update_single_ext(output_file, output_image, quad_name, gain=None, apply_gain=False)\n-        else:\n-            log.info(\"file_layer_entry_point(): saving image to new file: \" + output_file)\n-            fio.save_single_ext(output_file, output_image, quad_name, input_file, gain=None, apply_gain=False)\n+        output_image = pixel_algo.remove_non_lin(image, model_coeffs)\n+    if os.path.isfile(output_file):\n+        log.info(\"file_layer_entry_point(): saving to existing file: \" + output_file)\n+        fio.update_single_ext(output_file, output_image, quad_name, gain=None, apply_gain=False)\n+    else:\n+        log.info(\"file_layer_entry_point(): saving image to new file: \" + output_file)\n+        fio.save_single_ext(output_file, output_image, quad_name, input_file, gain=None, apply_gain=False)\n     log.info(\"file_layer_entry_point(): end\")\n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ],
                        [
                            "@@ -6,7 +6,7 @@ output file to be written.\n A corrected copy of the specified input quadrant will be written to the output file.\n \"\"\"\n #\n-# Copyright (C) 2012-2020 Euclid Science Ground Segment\n+# Copyright (C) 2012-2023 Euclid Science Ground Segment\n #\n # This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n # Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n@@ -22,6 +22,8 @@ A corrected copy of the specified input quadrant will be written to the output f\n \n import os.path\n import numpy as np\n+import json\n+import configparser\n import re #regular expressions\n from astropy.io import fits\n \n@@ -29,13 +31,18 @@ import ElementsKernel.Logging as elog\n \n import VIS_PyLibrary_M.fits_io_library as fio\n \n-from ..VIS_NonLin_Removal import non_lin_removal as algo\n+from ..VIS_NonLin_Removal import non_lin_removal as pixel_algo\n+from ..VIS_NonLin_Removal import non_lin_flat_removal as flat_algo\n \n __all__ = ['file_layer_entry_point']\n \n+#the name of this PE's [section] in the configuration ini file\n+_CONFIG_SECTION = \"CorrectNonLinearity\"\n \n-def _read_corr_model_file(model_file_name, quad_name):\n-    \"\"\"Read the non-linearity correction model of the specified quadrant from a file.\n+\n+def _read_corr_model_file_pixel(model_file_name, quad_name):\n+    \"\"\"Read the non-linearity correction model of the specified quadrant from a file.  For the pixel-based method\n+       where the file contains a polynomial.\n \n     Parameters\n     ----------\n@@ -63,17 +70,45 @@ def _read_corr_model_file(model_file_name, quad_name):\n     model_coeffs = [model[name][0] for name in model.names if iscoeff(name)]\n     return model_coeffs\n \n-def file_layer_entry_point(input_file, model_file, output_file, quadrant_id=None):\n+def _read_corr_model_file_flat(model_file_name, quad_name):\n+    \"\"\"Read the non-linearity correction model of the specified quadrant from a json file.  Intended for the\n+       list of data points which define the model fitted to flat exposures.\n+\n+    Parameters\n+    ----------\n+    model_file_name : string\n+        File name of the json file containing the model which converts non-linear flux to linear flux, where both\n+        are in ADU.  It must contain the quadrant specified by `quad_name`.\n+    quad_name : string\n+        Name of the quadrant whose model shall be read from the file.  It should match a name used inside the file.\n+\n+    Returns\n+    -------\n+    2-D array_like of float\n+        A set of pairs of flux values which convert non-linear flux to linear flux, where both are in ADU.  If there are\n+        N pairs this array's shape is [N][2].  In each pair, index [1] is a non-linear (i.e. observed) flux and [0] is the\n+        corresponding linear (i.e. corrected) flux.\n+    \"\"\"\n+    log = elog.getLogger(__name__)\n+    with open( model_file_name, \"r\") as file:\n+        json_data = json.load(file)\n+    model_points = np.array(json_data[quad_name])\n+    log.info(\"_read_corr_model_file(): Loaded a model with \" + str(len(model_points)) + \" points\")\n+    return model_points\n+\n+def file_layer_entry_point(input_file, model_file, config_file, output_file, quadrant_id=None):\n     \"\"\"Handles the I/O to/from files.  It is a wrapper around the core algorithm.\n \n     Parameters\n     ----------\n     input_file : string\n-        File name of the input FITS image file to be examined.  It must contain the quadrant specified by\n-        `quadrant_id`.\n+        File name of the input FITS image file to be examined.  It must contain the quadrant specified by `quadrant_id`.\n     model_file : string\n-        File name of the FITS file containing the model which converts non-linear flux to linear flux, where both\n-        are in ADU.  It must contain the quadrant specified by `quadrant_id`.\n+        File name of the FITS (for pixel method) or json (for flat method) file containing the model which converts\n+        non-linear flux to linear flux, where both are in ADU.  It must contain the quadrant specified by `quadrant_id`.\n+        The file name must end in .fits or .json, to distinguish the two supported methods of correcting non-linearity.\n+    config_file : string\n+        File name of the configuration parameters for this PE.  It should be in the ini file format.\n     output_file : string\n         Output FITS file name.  If it already exists, only the one corrected quadrant will be modified.  If it does\n         not already exist, a new output file will be created.\n@@ -86,7 +121,20 @@ def file_layer_entry_point(input_file, model_file, output_file, quadrant_id=None\n     log.info(\"file_layer_entry_point(): argument 'input_file' is: \" + str(input_file))\n     log.info(\"file_layer_entry_point(): argument 'quadrant_id' is: \" + str(quadrant_id))\n     log.info(\"file_layer_entry_point(): argument 'model_file' is: \" + str(model_file))\n+    log.info(\"file_layer_entry_point(): argument 'config_file' is: \" + str(config_file))\n     log.info(\"file_layer_entry_point(): argument 'output_file' is: \" + str(output_file))\n+    if config_file is None:\n+        message = (\"file_layer_entry_point(): Configuration ini file name must be supplied (see #22822)\")\n+        log.error(message)\n+        raise Exception(message)\n+    config = configparser.ConfigParser()\n+    config.read(config_file)\n+    if _CONFIG_SECTION not in config:\n+        message = (\"file_layer_entry_point(): The section [\" + str(_CONFIG_SECTION) + \"] is missing from \"\n+                   \"the configuration ini file (see #22822)\")\n+        log.error(message)\n+        raise Exception(message)\n+    non_lin_cfg = config[_CONFIG_SECTION]\n     if (quadrant_id is None) or (quadrant_id == \"\"):\n         quadrant_id = 1 #use the first image extension\n     elif quadrant_id.isdigit():\n@@ -94,9 +142,16 @@ def file_layer_entry_point(input_file, model_file, output_file, quadrant_id=None\n     quad_name = fio.read_ext_name(input_file, quadrant_id)\n     log.info(\"file_layer_entry_point(): quadrant name (converted) is: \" + str(quad_name))\n     image = fio.load_single_ext(input_file, quad_name, apply_gain=False)\n-    model_coeffs = _read_corr_model_file(model_file, quad_name)\n-    log.debug(\"file_layer_entry_point(): FITS model coeffs are \" + str(model_coeffs))\n-    output_image = algo.remove_non_lin(image, model_coeffs)\n+    if \".json\" in model_file.lower():\n+        log.info(\"file_layer_entry_point(): calling flat version of NL removal\")\n+        model_points = _read_corr_model_file_flat(model_file, quad_name)\n+        log.debug(\"file_layer_entry_point(): FITS model points are \" + str(model_points))\n+        output_image = flat_algo.remove_non_lin_flat(image, model_points, non_lin_cfg)\n+    else:\n+        log.info(\"file_layer_entry_point(): calling pixel-based version of NL removal\")\n+        model_coeffs = _read_corr_model_file_pixel(model_file, quad_name)\n+        log.debug(\"file_layer_entry_point(): FITS model coeffs are \" + str(model_coeffs))\n+        output_image = pixel_algo.remove_non_lin(image, model_coeffs)\n     if os.path.isfile(output_file):\n         log.info(\"file_layer_entry_point(): saving to existing file: \" + output_file)\n         fio.update_single_ext(output_file, output_image, quad_name, gain=None, apply_gain=False)\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ],
                        [
                            "@@ -36,7 +36,8 @@ from ..VIS_NonLin_Removal import non_lin_flat_removal as flat_algo\n \n __all__ = ['file_layer_entry_point']\n \n-_CONFIG_SECTION = \"VIS_nonlinearity\"\n+#the name of this PE's [section] in the configuration ini file\n+_CONFIG_SECTION = \"CorrectNonLinearity\"\n \n \n def _read_corr_model_file_pixel(model_file_name, quad_name):\n",
                            "Issue 22702: In NL PE rename correction_lower_limit to linear_up_to_adu",
                            "Chris Dolding",
                            "2023-07-27T13:20:26.000+01:00",
                            "dbc1b604514789e5e893fa5b155a64b387c1a57f"
                        ],
                        [
                            "@@ -22,6 +22,8 @@ A corrected copy of the specified input quadrant will be written to the output f\n \n import os.path\n import numpy as np\n+import json\n+import configparser\n import re #regular expressions\n from astropy.io import fits\n \n@@ -29,15 +31,17 @@ import ElementsKernel.Logging as elog\n \n import VIS_PyLibrary_M.fits_io_library as fio\n \n-from VIS_NonLinearity_Flat.VIS_NonLinCorrectionFlat_IO import file_entry_point as flat_method\n-\n-from ..VIS_NonLin_Removal import non_lin_removal as algo\n+from ..VIS_NonLin_Removal import non_lin_removal as pixel_algo\n+from ..VIS_NonLin_Removal import non_lin_flat_removal as flat_algo\n \n __all__ = ['file_layer_entry_point']\n \n+_CONFIG_SECTION = \"VIS_nonlinearity\"\n+\n \n-def _read_corr_model_file(model_file_name, quad_name):\n-    \"\"\"Read the non-linearity correction model of the specified quadrant from a file.\n+def _read_corr_model_file_pixel(model_file_name, quad_name):\n+    \"\"\"Read the non-linearity correction model of the specified quadrant from a file.  For the pixel-based method\n+       where the file contains a polynomial.\n \n     Parameters\n     ----------\n@@ -65,7 +69,33 @@ def _read_corr_model_file(model_file_name, quad_name):\n     model_coeffs = [model[name][0] for name in model.names if iscoeff(name)]\n     return model_coeffs\n \n-def file_layer_entry_point(input_file, model_file, output_file, quadrant_id=None):\n+def _read_corr_model_file_flat(model_file_name, quad_name):\n+    \"\"\"Read the non-linearity correction model of the specified quadrant from a json file.  Intended for the\n+       list of data points which define the model fitted to flat exposures.\n+\n+    Parameters\n+    ----------\n+    model_file_name : string\n+        File name of the json file containing the model which converts non-linear flux to linear flux, where both\n+        are in ADU.  It must contain the quadrant specified by `quad_name`.\n+    quad_name : string\n+        Name of the quadrant whose model shall be read from the file.  It should match a name used inside the file.\n+\n+    Returns\n+    -------\n+    2-D array_like of float\n+        A set of pairs of flux values which convert non-linear flux to linear flux, where both are in ADU.  If there are\n+        N pairs this array's shape is [N][2].  In each pair, index [1] is a non-linear (i.e. observed) flux and [0] is the\n+        corresponding linear (i.e. corrected) flux.\n+    \"\"\"\n+    log = elog.getLogger(__name__)\n+    with open( model_file_name, \"r\") as file:\n+        json_data = json.load(file)\n+    model_points = np.array(json_data[quad_name])\n+    log.info(\"_read_corr_model_file(): Loaded a model with \" + str(len(model_points)) + \" points\")\n+    return model_points\n+\n+def file_layer_entry_point(input_file, model_file, config_file, output_file, quadrant_id=None):\n     \"\"\"Handles the I/O to/from files.  It is a wrapper around the core algorithm.\n \n     Parameters\n@@ -76,6 +106,8 @@ def file_layer_entry_point(input_file, model_file, output_file, quadrant_id=None\n         File name of the FITS (for pixel method) or json (for flat method) file containing the model which converts\n         non-linear flux to linear flux, where both are in ADU.  It must contain the quadrant specified by `quadrant_id`.\n         The file name must end in .fits or .json, to distinguish the two supported methods of correcting non-linearity.\n+    config_file : string\n+        File name of the configuration parameters for this PE.  It should be in the ini file format.\n     output_file : string\n         Output FITS file name.  If it already exists, only the one corrected quadrant will be modified.  If it does\n         not already exist, a new output file will be created.\n@@ -88,25 +120,41 @@ def file_layer_entry_point(input_file, model_file, output_file, quadrant_id=None\n     log.info(\"file_layer_entry_point(): argument 'input_file' is: \" + str(input_file))\n     log.info(\"file_layer_entry_point(): argument 'quadrant_id' is: \" + str(quadrant_id))\n     log.info(\"file_layer_entry_point(): argument 'model_file' is: \" + str(model_file))\n+    log.info(\"file_layer_entry_point(): argument 'config_file' is: \" + str(config_file))\n     log.info(\"file_layer_entry_point(): argument 'output_file' is: \" + str(output_file))\n+    if config_file is None:\n+        message = (\"file_layer_entry_point(): Configuration ini file name must be supplied (see #22822)\")\n+        log.error(message)\n+        raise Exception(message)\n+    config = configparser.ConfigParser()\n+    config.read(config_file)\n+    if _CONFIG_SECTION not in config:\n+        message = (\"file_layer_entry_point(): The section [\" + str(_CONFIG_SECTION) + \"] is missing from \"\n+                   \"the configuration ini file (see #22822)\")\n+        log.error(message)\n+        raise Exception(message)\n+    non_lin_cfg = config[_CONFIG_SECTION]\n     if (quadrant_id is None) or (quadrant_id == \"\"):\n         quadrant_id = 1 #use the first image extension\n     elif quadrant_id.isdigit():\n         quadrant_id = int(quadrant_id)\n     quad_name = fio.read_ext_name(input_file, quadrant_id)\n+    log.info(\"file_layer_entry_point(): quadrant name (converted) is: \" + str(quad_name))\n+    image = fio.load_single_ext(input_file, quad_name, apply_gain=False)\n     if \".json\" in model_file.lower():\n         log.info(\"file_layer_entry_point(): calling flat version of NL removal\")\n-        flat_method.file_layer_entry_point(input_file, model_file, output_file, str(quadrant_id))\n+        model_points = _read_corr_model_file_flat(model_file, quad_name)\n+        log.debug(\"file_layer_entry_point(): FITS model points are \" + str(model_points))\n+        output_image = flat_algo.remove_non_lin_flat(image, model_points, non_lin_cfg)\n     else:\n-        log.info(\"file_layer_entry_point(): quadrant name (converted) is: \" + str(quad_name))\n-        image = fio.load_single_ext(input_file, quad_name, apply_gain=False)\n-        model_coeffs = _read_corr_model_file(model_file, quad_name)\n+        log.info(\"file_layer_entry_point(): calling pixel-based version of NL removal\")\n+        model_coeffs = _read_corr_model_file_pixel(model_file, quad_name)\n         log.debug(\"file_layer_entry_point(): FITS model coeffs are \" + str(model_coeffs))\n-        output_image = algo.remove_non_lin(image, model_coeffs)\n-        if os.path.isfile(output_file):\n-            log.info(\"file_layer_entry_point(): saving to existing file: \" + output_file)\n-            fio.update_single_ext(output_file, output_image, quad_name, gain=None, apply_gain=False)\n-        else:\n-            log.info(\"file_layer_entry_point(): saving image to new file: \" + output_file)\n-            fio.save_single_ext(output_file, output_image, quad_name, input_file, gain=None, apply_gain=False)\n+        output_image = pixel_algo.remove_non_lin(image, model_coeffs)\n+    if os.path.isfile(output_file):\n+        log.info(\"file_layer_entry_point(): saving to existing file: \" + output_file)\n+        fio.update_single_ext(output_file, output_image, quad_name, gain=None, apply_gain=False)\n+    else:\n+        log.info(\"file_layer_entry_point(): saving image to new file: \" + output_file)\n+        fio.save_single_ext(output_file, output_image, quad_name, input_file, gain=None, apply_gain=False)\n     log.info(\"file_layer_entry_point(): end\")\n",
                            "Issue 22702: Merge VIS_NonLinearity_Flat into VIS_NonLinearity",
                            "Chris Dolding",
                            "2023-07-25T18:00:13.000+01:00",
                            "409a404d40f5c79a4d142196961c619ba50b006d"
                        ]
                    ],
                    "VIS_NonLinearity/python/VIS_NonLinearity/VIS_NonLinCorrection_Programs/VIS_remove_non_lin.py": [
                        [
                            "@@ -3,7 +3,7 @@\n The Elements Program name matches the name of this .py file.\n \"\"\"\n #\n-# Copyright (C) 2012-2021 Euclid Science Ground Segment\n+# Copyright (C) 2012-2023 Euclid Science Ground Segment\n #\n # This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n # Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n@@ -43,6 +43,7 @@ def mainMethod(args):\n     \"\"\"\n     fep.file_layer_entry_point(args.in_image,\n                                args.in_model,\n+                               args.config_ini,\n                                args.out_file_name,\n                                quadrant_id=args.extname)\n \n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ]
                    ],
                    "VIS_NonLinearity/python/VIS_NonLinearity/VIS_NonLinCorrection_Programs/command_line_options.py": [
                        [
                            "@@ -37,6 +37,8 @@ def define_cmd_line_options():\n                         help='Input non-linearity correction model file name (ending in either .fits or .json).')\n     parser.add_argument('--extname', type=str,\n                         help='(optional) name or number of the quadrant to be corrected (e.g. \"2-1.E\").')\n+    parser.add_argument('--config_ini', type=str,\n+                        help='Input configuration file name')\n     parser.add_argument('--out_file_name', type=str,\n                         help='Output file name for the corrected quadrant.  It may already exist and contain other ' +\n                              'quadrants.  If it does not exist, a new file will be created.')\n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ],
                        [
                            "@@ -3,7 +3,7 @@\n For a more general overview of the input and output data, see this project's README.md.\n \"\"\"\n #\n-# Copyright (C) 2012-2020 Euclid Science Ground Segment\n+# Copyright (C) 2012-2023 Euclid Science Ground Segment\n #\n # This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n # Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n@@ -34,9 +34,11 @@ def define_cmd_line_options():\n     parser.add_argument('--in_image', type=str,\n                         help='Input FITS image file name.  It must contain the quadrant to be corrected (--extname).')\n     parser.add_argument('--in_model', type=str,\n-                        help='Input non-linearity correction model file name.')\n+                        help='Input non-linearity correction model file name (ending in either .fits or .json).')\n     parser.add_argument('--extname', type=str,\n                         help='(optional) name or number of the quadrant to be corrected (e.g. \"2-1.E\").')\n+    parser.add_argument('--config_ini', type=str,\n+                        help='Input configuration file name')\n     parser.add_argument('--out_file_name', type=str,\n                         help='Output file name for the corrected quadrant.  It may already exist and contain other ' +\n                              'quadrants.  If it does not exist, a new file will be created.')\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_NonLinearity/python/VIS_NonLinearity/VIS_NonLin_Removal/__init__.py": [
                        [
                            "@@ -13,3 +13,4 @@ __path__ = extend_path(__path__, __name__)\n \n #import the python files which define the external interface of this Elements module\n from .non_lin_removal import *\n+from .non_lin_flat_removal import *\n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ]
                    ],
                    "VIS_NonLinearity/python/VIS_NonLinearity/VIS_NonLin_Removal/non_lin_flat_removal.py": [
                        [
                            "@@ -1,4 +1,10 @@\n \"\"\"Corrects the non-linearity effect in image pixel data, using a model from flat images.\n+\n+standalone test with:\n+\n+$ cd /sps/euclid/Users/smottet/wrk_pattynlcorr\n+$ E-Run VIS_Tasks VIS_remove_non_lin_flat --in_image EUC_VIS_EXP_000024-01-1.fits_sa_bs.010 --in_model Patty_FlatfieldNL.json --extname  1-3.F --out_file_name outfilename.fits\n+\n \"\"\"\n #\n # Copyright (C) 2012-2023 Euclid Science Ground Segment\n@@ -17,43 +23,35 @@\n \n import numpy as np\n \n-__all__ = ['remove_non_lin']\n+import ElementsKernel.Logging as elog\n+\n+__all__ = ['remove_non_lin_flat']\n \n-#flux values above this should not occur.  If they do exist they will receive the same correction as 65535.0\n+#The model will be extrapolated up to this non-linear (observed) flux value.  If there is any flux value\n+#above this, they will receive the same correction as this value.\n _EXTRAPOLATION_LIMIT = 65535.0\n \n+#flux values below this will be unchanged\n+_MINIMUM_FLUX = -10000.0\n \n-def _interpolate_nl_to_linear(nl_flux_value, points_model):\n-    \"\"\"Correct the non-linearity effect of a flux value by applying a model defined by several fixed points.\n+\n+def _assert_config_valid(non_lin_flat_cfg):\n+    \"\"\"Raise an exception if the config is not valid for this algorithm.\n \n     Parameters\n     ----------\n-    nl_flux_value : number\n-        A value in which is to be corrected for the non-linearity effect.\n-    points_model : 2-D array_like of float\n-        A set of pairs of numbers.  In each pair, index [1] is a non-linear (i.e. observed) flux and [0] is the\n-        corresponding linear (i.e. corrected) flux.\n-\n-    Returns\n-    -------\n-    number\n-        The flux value with the non-linearity effect corrected.\n+    non_lin_flat_cfg : dictionary-like\n+        Config parameters.  This could be a SectionProxy from a ConfigParser, or any other dictionary-like object.\n     \"\"\"\n-    if nl_flux_value >= _EXTRAPOLATION_LIMIT:\n-        #use the correction defined by the last point\n-        result = nl_flux_value + (points_model[-1,0] - points_model[-1,1])\n-    elif (len(points_model) < 2) or (nl_flux_value <= 0.0) or (nl_flux_value <= points_model[0,1]):\n-        #don't apply any correction\n-        result = nl_flux_value\n-    else:\n-        for pair_i in range(len(points_model)-2):\n-            if (nl_flux_value > points_model[pair_i,1]) and (nl_flux_value <= points_model[pair_i+1,1]):\n-                linear_diff = points_model[pair_i+1,0] - points_model[pair_i,0]\n-                nl_diff     = points_model[pair_i+1,1] - points_model[pair_i,1]\n-                result = points_model[pair_i,0] + (nl_flux_value - points_model[pair_i,1]) / nl_diff * linear_diff\n-    return result\n-\n-def remove_non_lin(image, points_model):\n+    log = elog.getLogger(__name__)\n+    required_config = \"linear_up_to_adu\"\n+    if required_config not in non_lin_flat_cfg:\n+        message = (\"_assert_config_valid(): The configuration value \" + str(required_config) + \" is missing from \"\n+                   \"the configuration (check the ini file?)\")\n+        log.error(message)\n+        raise Exception(message)\n+\n+def remove_non_lin_flat(image, points_model, non_lin_flat_cfg):\n     \"\"\"Correct the non-linearity effect in an image by applying a model defined by several fixed points.\n \n     Parameters\n@@ -63,15 +61,27 @@ def remove_non_lin(image, points_model):\n     points_model : 2-D ndarray of floats\n         A set of pairs of numbers.  In each pair, index [1] is a non-linear (i.e. observed) flux and [0] is the\n         corresponding linear (i.e. corrected) flux.\n+    non_lin_flat_cfg : dictionary-like\n+        Config parameters.  This could be a SectionProxy from a ConfigParser, or any other dictionary-like object.\n \n     Returns\n     -------\n     array_like of number\n         A copy of `image` with the non-linearity effect corrected.\n     \"\"\"\n-    if points_model[0,1] > 0.0:\n-        #prepend another point at zero,zero\n-        ext_model = np.concatenate((np.zeros_like(points_model, shape=(1,2)), points_model))\n+    log = elog.getLogger(__name__)\n+    _assert_config_valid(non_lin_flat_cfg)\n+    correction_lower_limit = float(non_lin_flat_cfg[\"linear_up_to_adu\"])\n+    log.info(\"remove_non_lin_flat(): The correction lower limit (linear_up_to_adu in config) is \" + str(correction_lower_limit))\n+    # prepend two additional linear points at -1000 ADU and 'correction_lower_limit'\n+    # to take into account negative readout noise values in overscans and not correct pixels up to 'correction_lower_limit'\n+    ext_model = np.array( [[_MINIMUM_FLUX, _MINIMUM_FLUX], [correction_lower_limit, correction_lower_limit]], dtype=np.float32)\n+    for pair_i in range(len(points_model)):\n+        _, nonlin_val = points_model[pair_i]\n+        if nonlin_val <= correction_lower_limit:\n+            continue\n+        ext_model = np.concatenate((ext_model, [points_model[pair_i]]))\n+\n     if ext_model[-1,1] < _EXTRAPOLATION_LIMIT:\n         #append a new last point at _EXTRAPOLATION_LIMIT\n         last_linear_diff = ext_model[-1,0] - ext_model[-2,0]\n@@ -82,7 +92,27 @@ def remove_non_lin(image, points_model):\n         new_last_point[0,1] = _EXTRAPOLATION_LIMIT\n         new_last_point[0,0] = ext_model[-1,0] + (_EXTRAPOLATION_LIMIT - ext_model[-1,1]) * gradient\n         ext_model = np.concatenate((ext_model, new_last_point))\n-    #apply the non-linearity correction function to each flux value individually\n-    nl_correction = np.vectorize(_interpolate_nl_to_linear, otypes=[float], excluded=[\"points_model\"])\n-    corrected_img = nl_correction(nl_flux_value=image, points_model=ext_model)\n+\n+    corrected_img = image.copy() * np.nan\n+    #pixels lower than the model's lowest point are unchanged\n+    nl_pixels_mask = image < ext_model[0,1]\n+    corrected_img[nl_pixels_mask] = image[nl_pixels_mask]\n+    #pixels at or above the model's highest point are given the NL correction which that point defines\n+    nl_pixels_mask = image >= ext_model[-1,1]\n+    corrected_img[nl_pixels_mask] = image[nl_pixels_mask] + (ext_model[-1,0] - ext_model[-1,1])\n+    for pair_i in range(len(ext_model)-1):\n+        linear_beg, nonlin_beg = ext_model[pair_i]\n+        linear_end, nonlin_end = ext_model[pair_i+1]\n+        log.debug( f\"remove_non_lin_flat(): linear_beg, nonlin_beg, linear_end, nonlin_end = \" +\n+                   f\"{linear_beg:.2f}, {nonlin_beg:.2f}, {linear_end:.2f}, {nonlin_end:.2f}\")\n+        nl_pixels_mask = np.logical_and( image >= nonlin_beg, image < nonlin_end)\n+        log.debug( f\"remove_non_lin_flat(): pixel count = {np.count_nonzero( nl_pixels_mask)}\")\n+        linear_diff = linear_end - linear_beg\n+        nl_diff     = nonlin_end - nonlin_beg\n+        corrected_img[nl_pixels_mask] = linear_beg + (image[nl_pixels_mask] - nonlin_beg) / nl_diff * linear_diff\n+\n+    uncorrected_pixel_count = np.count_nonzero( np.isnan( corrected_img))\n+    log.debug( f\"remove_non_lin_flat(): uncorrected pixels = {uncorrected_pixel_count}\")\n+    assert uncorrected_pixel_count == 0, (f\"remove_non_lin_flat(): Error: {uncorrected_pixel_count} pixels \" +\n+                                          f\"were not corrected. This should not happen\")\n     return corrected_img\n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ],
                        [
                            "@@ -0,0 +1,118 @@\n+\"\"\"Corrects the non-linearity effect in image pixel data, using a model from flat images.\n+\n+standalone test with:\n+\n+$ cd /sps/euclid/Users/smottet/wrk_pattynlcorr\n+$ E-Run VIS_Tasks VIS_remove_non_lin_flat --in_image EUC_VIS_EXP_000024-01-1.fits_sa_bs.010 --in_model Patty_FlatfieldNL.json --extname  1-3.F --out_file_name outfilename.fits\n+\n+\"\"\"\n+#\n+# Copyright (C) 2012-2023 Euclid Science Ground Segment\n+#\n+# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n+# Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n+# any later version.\n+#\n+# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n+# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+# details.\n+#\n+# You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n+# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+#\n+\n+import numpy as np\n+\n+import ElementsKernel.Logging as elog\n+\n+__all__ = ['remove_non_lin_flat']\n+\n+#The model will be extrapolated up to this non-linear (observed) flux value.  If there is any flux value\n+#above this, they will receive the same correction as this value.\n+_EXTRAPOLATION_LIMIT = 65535.0\n+\n+#flux values below this will be unchanged\n+_MINIMUM_FLUX = -10000.0\n+\n+\n+def _assert_config_valid(non_lin_flat_cfg):\n+    \"\"\"Raise an exception if the config is not valid for this algorithm.\n+\n+    Parameters\n+    ----------\n+    non_lin_flat_cfg : dictionary-like\n+        Config parameters.  This could be a SectionProxy from a ConfigParser, or any other dictionary-like object.\n+    \"\"\"\n+    log = elog.getLogger(__name__)\n+    required_config = \"linear_up_to_adu\"\n+    if required_config not in non_lin_flat_cfg:\n+        message = (\"_assert_config_valid(): The configuration value \" + str(required_config) + \" is missing from \"\n+                   \"the configuration (check the ini file?)\")\n+        log.error(message)\n+        raise Exception(message)\n+\n+def remove_non_lin_flat(image, points_model, non_lin_flat_cfg):\n+    \"\"\"Correct the non-linearity effect in an image by applying a model defined by several fixed points.\n+\n+    Parameters\n+    ----------\n+    image : array_like of number\n+        A 2-D array which is to be corrected for the non-linearity effect.\n+    points_model : 2-D ndarray of floats\n+        A set of pairs of numbers.  In each pair, index [1] is a non-linear (i.e. observed) flux and [0] is the\n+        corresponding linear (i.e. corrected) flux.\n+    non_lin_flat_cfg : dictionary-like\n+        Config parameters.  This could be a SectionProxy from a ConfigParser, or any other dictionary-like object.\n+\n+    Returns\n+    -------\n+    array_like of number\n+        A copy of `image` with the non-linearity effect corrected.\n+    \"\"\"\n+    log = elog.getLogger(__name__)\n+    _assert_config_valid(non_lin_flat_cfg)\n+    correction_lower_limit = float(non_lin_flat_cfg[\"linear_up_to_adu\"])\n+    log.info(\"remove_non_lin_flat(): The correction lower limit (linear_up_to_adu in config) is \" + str(correction_lower_limit))\n+    # prepend two additional linear points at -1000 ADU and 'correction_lower_limit'\n+    # to take into account negative readout noise values in overscans and not correct pixels up to 'correction_lower_limit'\n+    ext_model = np.array( [[_MINIMUM_FLUX, _MINIMUM_FLUX], [correction_lower_limit, correction_lower_limit]], dtype=np.float32)\n+    for pair_i in range(len(points_model)):\n+        _, nonlin_val = points_model[pair_i]\n+        if nonlin_val <= correction_lower_limit:\n+            continue\n+        ext_model = np.concatenate((ext_model, [points_model[pair_i]]))\n+\n+    if ext_model[-1,1] < _EXTRAPOLATION_LIMIT:\n+        #append a new last point at _EXTRAPOLATION_LIMIT\n+        last_linear_diff = ext_model[-1,0] - ext_model[-2,0]\n+        last_nl_diff = ext_model[-1,1] - ext_model[-2,1]\n+        #gradient means the slope steepness of linear over non-linear (i.e. linear per non-linear flux)\n+        gradient = last_linear_diff / last_nl_diff\n+        new_last_point = np.zeros_like(points_model, shape=(1,2))\n+        new_last_point[0,1] = _EXTRAPOLATION_LIMIT\n+        new_last_point[0,0] = ext_model[-1,0] + (_EXTRAPOLATION_LIMIT - ext_model[-1,1]) * gradient\n+        ext_model = np.concatenate((ext_model, new_last_point))\n+\n+    corrected_img = image.copy() * np.nan\n+    #pixels lower than the model's lowest point are unchanged\n+    nl_pixels_mask = image < ext_model[0,1]\n+    corrected_img[nl_pixels_mask] = image[nl_pixels_mask]\n+    #pixels at or above the model's highest point are given the NL correction which that point defines\n+    nl_pixels_mask = image >= ext_model[-1,1]\n+    corrected_img[nl_pixels_mask] = image[nl_pixels_mask] + (ext_model[-1,0] - ext_model[-1,1])\n+    for pair_i in range(len(ext_model)-1):\n+        linear_beg, nonlin_beg = ext_model[pair_i]\n+        linear_end, nonlin_end = ext_model[pair_i+1]\n+        log.debug( f\"remove_non_lin_flat(): linear_beg, nonlin_beg, linear_end, nonlin_end = \" +\n+                   f\"{linear_beg:.2f}, {nonlin_beg:.2f}, {linear_end:.2f}, {nonlin_end:.2f}\")\n+        nl_pixels_mask = np.logical_and( image >= nonlin_beg, image < nonlin_end)\n+        log.debug( f\"remove_non_lin_flat(): pixel count = {np.count_nonzero( nl_pixels_mask)}\")\n+        linear_diff = linear_end - linear_beg\n+        nl_diff     = nonlin_end - nonlin_beg\n+        corrected_img[nl_pixels_mask] = linear_beg + (image[nl_pixels_mask] - nonlin_beg) / nl_diff * linear_diff\n+\n+    uncorrected_pixel_count = np.count_nonzero( np.isnan( corrected_img))\n+    log.debug( f\"remove_non_lin_flat(): uncorrected pixels = {uncorrected_pixel_count}\")\n+    assert uncorrected_pixel_count == 0, (f\"remove_non_lin_flat(): Error: {uncorrected_pixel_count} pixels \" +\n+                                          f\"were not corrected. This should not happen\")\n+    return corrected_img\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ],
                        [
                            "@@ -28,11 +28,11 @@ import ElementsKernel.Logging as elog\n __all__ = ['remove_non_lin_flat']\n \n #The model will be extrapolated up to this non-linear (observed) flux value.  If there is any flux value\n-#above this, an assertion will fail.\n-_EXTRAPOLATION_LIMIT = 100_000.0\n+#above this, they will receive the same correction as this value.\n+_EXTRAPOLATION_LIMIT = 65535.0\n \n-#flux values below this should never occur.  If they do exist an assertion will fail.\n-_MINIMUM_FLUX = -1000.0\n+#flux values below this will be unchanged\n+_MINIMUM_FLUX = -10000.0\n \n \n def _assert_config_valid(non_lin_flat_cfg):\n@@ -73,7 +73,6 @@ def remove_non_lin_flat(image, points_model, non_lin_flat_cfg):\n     _assert_config_valid(non_lin_flat_cfg)\n     correction_lower_limit = float(non_lin_flat_cfg[\"linear_up_to_adu\"])\n     log.info(\"remove_non_lin_flat(): The correction lower limit (linear_up_to_adu in config) is \" + str(correction_lower_limit))\n-    assert np.count_nonzero(np.isnan(image)) == 0, \"Error: some pixels are NotANumber in source image\"\n     # prepend two additional linear points at -1000 ADU and 'correction_lower_limit'\n     # to take into account negative readout noise values in overscans and not correct pixels up to 'correction_lower_limit'\n     ext_model = np.array( [[_MINIMUM_FLUX, _MINIMUM_FLUX], [correction_lower_limit, correction_lower_limit]], dtype=np.float32)\n@@ -95,11 +94,17 @@ def remove_non_lin_flat(image, points_model, non_lin_flat_cfg):\n         ext_model = np.concatenate((ext_model, new_last_point))\n \n     corrected_img = image.copy() * np.nan\n-\n+    #pixels lower than the model's lowest point are unchanged\n+    nl_pixels_mask = image < ext_model[0,1]\n+    corrected_img[nl_pixels_mask] = image[nl_pixels_mask]\n+    #pixels at or above the model's highest point are given the NL correction which that point defines\n+    nl_pixels_mask = image >= ext_model[-1,1]\n+    corrected_img[nl_pixels_mask] = image[nl_pixels_mask] + (ext_model[-1,0] - ext_model[-1,1])\n     for pair_i in range(len(ext_model)-1):\n         linear_beg, nonlin_beg = ext_model[pair_i]\n         linear_end, nonlin_end = ext_model[pair_i+1]\n-        log.debug( f\"remove_non_lin_flat(): linear_beg, nonlin_beg, linear_end, nonlin_end = {linear_beg:.2f}, {nonlin_beg:.2f}, {linear_end:.2f}, {nonlin_end:.2f}\")\n+        log.debug( f\"remove_non_lin_flat(): linear_beg, nonlin_beg, linear_end, nonlin_end = \" +\n+                   f\"{linear_beg:.2f}, {nonlin_beg:.2f}, {linear_end:.2f}, {nonlin_end:.2f}\")\n         nl_pixels_mask = np.logical_and( image >= nonlin_beg, image < nonlin_end)\n         log.debug( f\"remove_non_lin_flat(): pixel count = {np.count_nonzero( nl_pixels_mask)}\")\n         linear_diff = linear_end - linear_beg\n@@ -108,5 +113,6 @@ def remove_non_lin_flat(image, points_model, non_lin_flat_cfg):\n \n     uncorrected_pixel_count = np.count_nonzero( np.isnan( corrected_img))\n     log.debug( f\"remove_non_lin_flat(): uncorrected pixels = {uncorrected_pixel_count}\")\n-    assert uncorrected_pixel_count == 0, f\"remove_non_lin_flat(): Error: {uncorrected_pixel_count} pixels are not in the range of NL correction model, this should not happen\"\n+    assert uncorrected_pixel_count == 0, (f\"remove_non_lin_flat(): Error: {uncorrected_pixel_count} pixels \" +\n+                                          f\"were not corrected. This should not happen\")\n     return corrected_img\n",
                            "Issue 22702-30: Tolerate very high and low numbers in the input image",
                            "Chris Dolding",
                            "2023-07-27T15:43:15.000+01:00",
                            "f2ba08057f8104c9f7cf828d5c1036d8e48af866"
                        ],
                        [
                            "@@ -36,7 +36,7 @@ _MINIMUM_FLUX = -1000.0\n \n \n def _assert_config_valid(non_lin_flat_cfg):\n-    \"\"\" Throw an exception if the config is not valid for this algorithm.\n+    \"\"\"Raise an exception if the config is not valid for this algorithm.\n \n     Parameters\n     ----------\n@@ -44,9 +44,9 @@ def _assert_config_valid(non_lin_flat_cfg):\n         Config parameters.  This could be a SectionProxy from a ConfigParser, or any other dictionary-like object.\n     \"\"\"\n     log = elog.getLogger(__name__)\n-    required_config = \"correction_lower_limit\"\n+    required_config = \"linear_up_to_adu\"\n     if required_config not in non_lin_flat_cfg:\n-        message = (\"_assert_cfg_valid(): The configuration value \" + str(required_config) + \" is missing from \"\n+        message = (\"_assert_config_valid(): The configuration value \" + str(required_config) + \" is missing from \"\n                    \"the configuration (check the ini file?)\")\n         log.error(message)\n         raise Exception(message)\n@@ -71,8 +71,8 @@ def remove_non_lin_flat(image, points_model, non_lin_flat_cfg):\n     \"\"\"\n     log = elog.getLogger(__name__)\n     _assert_config_valid(non_lin_flat_cfg)\n-    correction_lower_limit = float(non_lin_flat_cfg[\"correction_lower_limit\"])\n-    log.info(\"remove_non_lin(): correction_lower_limit is \" + str(correction_lower_limit))\n+    correction_lower_limit = float(non_lin_flat_cfg[\"linear_up_to_adu\"])\n+    log.info(\"remove_non_lin_flat(): The correction lower limit (linear_up_to_adu in config) is \" + str(correction_lower_limit))\n     assert np.count_nonzero(np.isnan(image)) == 0, \"Error: some pixels are NotANumber in source image\"\n     # prepend two additional linear points at -1000 ADU and 'correction_lower_limit'\n     # to take into account negative readout noise values in overscans and not correct pixels up to 'correction_lower_limit'\n@@ -99,14 +99,14 @@ def remove_non_lin_flat(image, points_model, non_lin_flat_cfg):\n     for pair_i in range(len(ext_model)-1):\n         linear_beg, nonlin_beg = ext_model[pair_i]\n         linear_end, nonlin_end = ext_model[pair_i+1]\n-        log.debug( f\"linear_beg, nonlin_beg, linear_end, nonlin_end = {linear_beg:.2f}, {nonlin_beg:.2f}, {linear_end:.2f}, {nonlin_end:.2f}\")\n+        log.debug( f\"remove_non_lin_flat(): linear_beg, nonlin_beg, linear_end, nonlin_end = {linear_beg:.2f}, {nonlin_beg:.2f}, {linear_end:.2f}, {nonlin_end:.2f}\")\n         nl_pixels_mask = np.logical_and( image >= nonlin_beg, image < nonlin_end)\n-        log.debug( f\"pixel count = {np.count_nonzero( nl_pixels_mask)}\")\n+        log.debug( f\"remove_non_lin_flat(): pixel count = {np.count_nonzero( nl_pixels_mask)}\")\n         linear_diff = linear_end - linear_beg\n         nl_diff     = nonlin_end - nonlin_beg\n         corrected_img[nl_pixels_mask] = linear_beg + (image[nl_pixels_mask] - nonlin_beg) / nl_diff * linear_diff\n \n     uncorrected_pixel_count = np.count_nonzero( np.isnan( corrected_img))\n-    log.debug( f\"uncorrected pixels = {uncorrected_pixel_count}\")\n-    assert uncorrected_pixel_count == 0, f\"Error: {uncorrected_pixel_count} pixels are not in the range of NL correction model, this should not happen\"\n+    log.debug( f\"remove_non_lin_flat(): uncorrected pixels = {uncorrected_pixel_count}\")\n+    assert uncorrected_pixel_count == 0, f\"remove_non_lin_flat(): Error: {uncorrected_pixel_count} pixels are not in the range of NL correction model, this should not happen\"\n     return corrected_img\n",
                            "Issue 22702: In NL PE rename correction_lower_limit to linear_up_to_adu",
                            "Chris Dolding",
                            "2023-07-27T13:20:26.000+01:00",
                            "dbc1b604514789e5e893fa5b155a64b387c1a57f"
                        ],
                        [
                            "@@ -23,70 +23,90 @@ $ E-Run VIS_Tasks VIS_remove_non_lin_flat --in_image EUC_VIS_EXP_000024-01-1.fit\n \n import numpy as np\n \n-import logging\n-logger = logging.getLogger( __name__)\n-\n-__all__ = ['remove_non_lin']\n-\n-#flux values above this should not occur.  If they do exist they will receive the same correction as 65535.0\n-_EXTRAPOLATION_LIMIT = 100_000\n-\n-\n-def remove_non_lin(image, points_model, linear_up_to_adu=0.0):\n-  \"\"\"Correct the non-linearity effect in an image by applying a model defined by several fixed points.\n-\n-  Parameters\n-  ----------\n-  image : array_like of number\n-      A 2-D array which is to be corrected for the non-linearity effect.\n-  points_model : 2-D ndarray of floats\n-      A set of pairs of numbers.  In each pair, index [1] is a non-linear (i.e. observed) flux and [0] is the\n-      corresponding linear (i.e. corrected) flux.\n-  linear_up_to_adu: ADU value under which signal is supposed to be linear and non-linearity is not corrected\n-\n-  Returns\n-  -------\n-  array_like of number\n-      A copy of `image` with the non-linearity effect corrected.\n-  \"\"\"\n-\n-  assert np.count_nonzero( np.isnan( image)) == 0, \\\n-    \"Error: some pixels are NotANumber in source image\"\n-\n-  # prepend two additional linear points at -1000 ADU and 'linear_up_to_adu'\n-  # to take into account negative readout noise values in overscans and not correct pixels up to 'linear_up_to_adu'\n-  ext_model = np.array( [[-1000.0, -1000.0], [linear_up_to_adu, linear_up_to_adu]], dtype=np.float32)\n-  for pair_i in range( len( points_model)-1):\n-    linear_val, nonlin_val = points_model[pair_i]\n-    if nonlin_val <= linear_up_to_adu:\n-      continue\n-    ext_model = np.concatenate((ext_model, [points_model[pair_i]]))\n-\n-  if ext_model[-1,1] < _EXTRAPOLATION_LIMIT:\n-    #append a new last point at _EXTRAPOLATION_LIMIT\n-    last_linear_diff = ext_model[-1,0] - ext_model[-2,0]\n-    last_nl_diff = ext_model[-1,1] - ext_model[-2,1]\n-    #gradient means the slope steepness of linear over non-linear (i.e. linear per non-linear flux)\n-    gradient = last_linear_diff / last_nl_diff\n-    new_last_point = np.zeros_like(points_model, shape=(1,2))\n-    new_last_point[0,1] = _EXTRAPOLATION_LIMIT\n-    new_last_point[0,0] = ext_model[-1,0] + (_EXTRAPOLATION_LIMIT - ext_model[-1,1]) * gradient\n-    ext_model = np.concatenate((ext_model, new_last_point))\n-\n-  corrected_img = image.copy() * np.nan\n-\n-  for pair_i in range( len( ext_model)-1):\n-    linear_beg, nonlin_beg = ext_model[pair_i]\n-    linear_end, nonlin_end = ext_model[pair_i+1]\n-    logger.debug( f\"linear_beg, nonlin_beg, linear_end, nonlin_end = {linear_beg:.2f}, {nonlin_beg:.2f}, {linear_end:.2f}, {nonlin_end:.2f}\")\n-    nl_pixels_mask = np.logical_and( image >= nonlin_beg, image < nonlin_end)\n-    logger.debug( f\"pixel count = {np.count_nonzero( nl_pixels_mask)}\")\n-    linear_diff = linear_end - linear_beg\n-    nl_diff     = nonlin_end - nonlin_beg\n-    corrected_img[nl_pixels_mask] = linear_beg + (image[nl_pixels_mask] - nonlin_beg) / nl_diff * linear_diff\n-\n-  uncorrected_pixel_count = np.count_nonzero( np.isnan( corrected_img))\n-  logger.debug( f\"uncorrected pixels = {uncorrected_pixel_count}\")\n-  assert uncorrected_pixel_count == 0, \\\n-    \"Error: some pixels are not in the range of NL correction model, this should not happen\"\n-  return corrected_img\n+import ElementsKernel.Logging as elog\n+\n+__all__ = ['remove_non_lin_flat']\n+\n+#The model will be extrapolated up to this non-linear (observed) flux value.  If there is any flux value\n+#above this, an assertion will fail.\n+_EXTRAPOLATION_LIMIT = 100_000.0\n+\n+#flux values below this should never occur.  If they do exist an assertion will fail.\n+_MINIMUM_FLUX = -1000.0\n+\n+\n+def _assert_config_valid(non_lin_flat_cfg):\n+    \"\"\" Throw an exception if the config is not valid for this algorithm.\n+\n+    Parameters\n+    ----------\n+    non_lin_flat_cfg : dictionary-like\n+        Config parameters.  This could be a SectionProxy from a ConfigParser, or any other dictionary-like object.\n+    \"\"\"\n+    log = elog.getLogger(__name__)\n+    required_config = \"correction_lower_limit\"\n+    if required_config not in non_lin_flat_cfg:\n+        message = (\"_assert_cfg_valid(): The configuration value \" + str(required_config) + \" is missing from \"\n+                   \"the configuration (check the ini file?)\")\n+        log.error(message)\n+        raise Exception(message)\n+\n+def remove_non_lin_flat(image, points_model, non_lin_flat_cfg):\n+    \"\"\"Correct the non-linearity effect in an image by applying a model defined by several fixed points.\n+\n+    Parameters\n+    ----------\n+    image : array_like of number\n+        A 2-D array which is to be corrected for the non-linearity effect.\n+    points_model : 2-D ndarray of floats\n+        A set of pairs of numbers.  In each pair, index [1] is a non-linear (i.e. observed) flux and [0] is the\n+        corresponding linear (i.e. corrected) flux.\n+    non_lin_flat_cfg : dictionary-like\n+        Config parameters.  This could be a SectionProxy from a ConfigParser, or any other dictionary-like object.\n+\n+    Returns\n+    -------\n+    array_like of number\n+        A copy of `image` with the non-linearity effect corrected.\n+    \"\"\"\n+    log = elog.getLogger(__name__)\n+    _assert_config_valid(non_lin_flat_cfg)\n+    correction_lower_limit = float(non_lin_flat_cfg[\"correction_lower_limit\"])\n+    log.info(\"remove_non_lin(): correction_lower_limit is \" + str(correction_lower_limit))\n+    assert np.count_nonzero(np.isnan(image)) == 0, \"Error: some pixels are NotANumber in source image\"\n+    # prepend two additional linear points at -1000 ADU and 'correction_lower_limit'\n+    # to take into account negative readout noise values in overscans and not correct pixels up to 'correction_lower_limit'\n+    ext_model = np.array( [[_MINIMUM_FLUX, _MINIMUM_FLUX], [correction_lower_limit, correction_lower_limit]], dtype=np.float32)\n+    for pair_i in range(len(points_model)):\n+        _, nonlin_val = points_model[pair_i]\n+        if nonlin_val <= correction_lower_limit:\n+            continue\n+        ext_model = np.concatenate((ext_model, [points_model[pair_i]]))\n+\n+    if ext_model[-1,1] < _EXTRAPOLATION_LIMIT:\n+        #append a new last point at _EXTRAPOLATION_LIMIT\n+        last_linear_diff = ext_model[-1,0] - ext_model[-2,0]\n+        last_nl_diff = ext_model[-1,1] - ext_model[-2,1]\n+        #gradient means the slope steepness of linear over non-linear (i.e. linear per non-linear flux)\n+        gradient = last_linear_diff / last_nl_diff\n+        new_last_point = np.zeros_like(points_model, shape=(1,2))\n+        new_last_point[0,1] = _EXTRAPOLATION_LIMIT\n+        new_last_point[0,0] = ext_model[-1,0] + (_EXTRAPOLATION_LIMIT - ext_model[-1,1]) * gradient\n+        ext_model = np.concatenate((ext_model, new_last_point))\n+\n+    corrected_img = image.copy() * np.nan\n+\n+    for pair_i in range(len(ext_model)-1):\n+        linear_beg, nonlin_beg = ext_model[pair_i]\n+        linear_end, nonlin_end = ext_model[pair_i+1]\n+        log.debug( f\"linear_beg, nonlin_beg, linear_end, nonlin_end = {linear_beg:.2f}, {nonlin_beg:.2f}, {linear_end:.2f}, {nonlin_end:.2f}\")\n+        nl_pixels_mask = np.logical_and( image >= nonlin_beg, image < nonlin_end)\n+        log.debug( f\"pixel count = {np.count_nonzero( nl_pixels_mask)}\")\n+        linear_diff = linear_end - linear_beg\n+        nl_diff     = nonlin_end - nonlin_beg\n+        corrected_img[nl_pixels_mask] = linear_beg + (image[nl_pixels_mask] - nonlin_beg) / nl_diff * linear_diff\n+\n+    uncorrected_pixel_count = np.count_nonzero( np.isnan( corrected_img))\n+    log.debug( f\"uncorrected pixels = {uncorrected_pixel_count}\")\n+    assert uncorrected_pixel_count == 0, f\"Error: {uncorrected_pixel_count} pixels are not in the range of NL correction model, this should not happen\"\n+    return corrected_img\n",
                            "Issue 22702: Merge VIS_NonLinearity_Flat into VIS_NonLinearity",
                            "Chris Dolding",
                            "2023-07-25T18:00:13.000+01:00",
                            "409a404d40f5c79a4d142196961c619ba50b006d"
                        ],
                        [
                            "@@ -0,0 +1,92 @@\n+\"\"\"Corrects the non-linearity effect in image pixel data, using a model from flat images.\n+\n+standalone test with:\n+\n+$ cd /sps/euclid/Users/smottet/wrk_pattynlcorr\n+$ E-Run VIS_Tasks VIS_remove_non_lin_flat --in_image EUC_VIS_EXP_000024-01-1.fits_sa_bs.010 --in_model Patty_FlatfieldNL.json --extname  1-3.F --out_file_name outfilename.fits\n+\n+\"\"\"\n+#\n+# Copyright (C) 2012-2023 Euclid Science Ground Segment\n+#\n+# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n+# Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n+# any later version.\n+#\n+# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n+# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+# details.\n+#\n+# You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n+# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+#\n+\n+import numpy as np\n+\n+import logging\n+logger = logging.getLogger( __name__)\n+\n+__all__ = ['remove_non_lin']\n+\n+#flux values above this should not occur.  If they do exist they will receive the same correction as 65535.0\n+_EXTRAPOLATION_LIMIT = 100_000\n+\n+\n+def remove_non_lin(image, points_model, linear_up_to_adu=0.0):\n+  \"\"\"Correct the non-linearity effect in an image by applying a model defined by several fixed points.\n+\n+  Parameters\n+  ----------\n+  image : array_like of number\n+      A 2-D array which is to be corrected for the non-linearity effect.\n+  points_model : 2-D ndarray of floats\n+      A set of pairs of numbers.  In each pair, index [1] is a non-linear (i.e. observed) flux and [0] is the\n+      corresponding linear (i.e. corrected) flux.\n+  linear_up_to_adu: ADU value under which signal is supposed to be linear and non-linearity is not corrected\n+\n+  Returns\n+  -------\n+  array_like of number\n+      A copy of `image` with the non-linearity effect corrected.\n+  \"\"\"\n+\n+  assert np.count_nonzero( np.isnan( image)) == 0, \\\n+    \"Error: some pixels are NotANumber in source image\"\n+\n+  # prepend two additional linear points at -1000 ADU and 'linear_up_to_adu'\n+  # to take into account negative readout noise values in overscans and not correct pixels up to 'linear_up_to_adu'\n+  ext_model = np.array( [[-1000.0, -1000.0], [linear_up_to_adu, linear_up_to_adu]], dtype=np.float32)\n+  for pair_i in range( len( points_model)-1):\n+    linear_val, nonlin_val = points_model[pair_i]\n+    if nonlin_val <= linear_up_to_adu:\n+      continue\n+    ext_model = np.concatenate((ext_model, [points_model[pair_i]]))\n+\n+  if ext_model[-1,1] < _EXTRAPOLATION_LIMIT:\n+    #append a new last point at _EXTRAPOLATION_LIMIT\n+    last_linear_diff = ext_model[-1,0] - ext_model[-2,0]\n+    last_nl_diff = ext_model[-1,1] - ext_model[-2,1]\n+    #gradient means the slope steepness of linear over non-linear (i.e. linear per non-linear flux)\n+    gradient = last_linear_diff / last_nl_diff\n+    new_last_point = np.zeros_like(points_model, shape=(1,2))\n+    new_last_point[0,1] = _EXTRAPOLATION_LIMIT\n+    new_last_point[0,0] = ext_model[-1,0] + (_EXTRAPOLATION_LIMIT - ext_model[-1,1]) * gradient\n+    ext_model = np.concatenate((ext_model, new_last_point))\n+\n+  corrected_img = image.copy() * np.nan\n+\n+  for pair_i in range( len( ext_model)-1):\n+    linear_beg, nonlin_beg = ext_model[pair_i]\n+    linear_end, nonlin_end = ext_model[pair_i+1]\n+    logger.debug( f\"linear_beg, nonlin_beg, linear_end, nonlin_end = {linear_beg:.2f}, {nonlin_beg:.2f}, {linear_end:.2f}, {nonlin_end:.2f}\")\n+    nl_pixels_mask = np.logical_and( image >= nonlin_beg, image < nonlin_end)\n+    logger.debug( f\"pixel count = {np.count_nonzero( nl_pixels_mask)}\")\n+    linear_diff = linear_end - linear_beg\n+    nl_diff     = nonlin_end - nonlin_beg\n+    corrected_img[nl_pixels_mask] = linear_beg + (image[nl_pixels_mask] - nonlin_beg) / nl_diff * linear_diff\n+\n+  uncorrected_pixel_count = np.count_nonzero( np.isnan( corrected_img))\n+  logger.debug( f\"uncorrected pixels = {uncorrected_pixel_count}\")\n+  assert uncorrected_pixel_count == 0, \\\n+    \"Error: some pixels are not in the range of NL correction model, this should not happen\"\n+  return corrected_img\n",
                            "VIS_NonLin_Removal/non_lin_flat_removal.py: improve execution time, move non_lin_flat_removal.py into VIS_NonLin_Removal",
                            "Sylvain Mottet",
                            "2023-07-25T12:06:30.000+02:00",
                            "a37ce7761a165be0798efc2e389970f61b27d388"
                        ]
                    ],
                    "VIS_NonLinearity/tests/python/VIS_remove_non_lin_flat_test.py": [
                        [
                            "@@ -26,26 +26,109 @@ To run them at the command line, use \"make purge install ; make CTEST_OUTPUT_ON_\n \n import pytest\n \n-import VIS_NonLinearity_Flat.VIS_NonLinCorrectionFlat_Programs.VIS_remove_non_lin_flat as prog\n+from   VIS_NonLinearity import VIS_NonLin_Removal\n+import numpy as np\n+import json\n+import sys\n \n+import logging\n+logger = logging.getLogger( __name__)\n \n-def test_main_method_badargs():\n-    \"\"\"Call the command line entry point with an argument that is not recognised.\n \n-    Assert that the expected exception is thrown due to the invalid argument.\n-    \"\"\"\n-    arg_string = ['argv_item_zero_which_is_not_used', '--unrecognised_argument']\n-    #Python's argparse.py calls sys.exit() which throws a SystemExit Exception\n-    with pytest.raises(SystemExit):\n-        prog.cmd_line_entry_point(arg_string)\n+def test_non_lin_flat_removal():\n+  # to get the log messages, execute with:\n+  # build.*/run pytest --capture=no VIS_NonLinearity_Flat/tests/python/VIS_remove_non_lin_flat_test.py\n \n-def test_main_method_callable():\n-    \"\"\"Call the command line entry point with input files that do not exist.\n+  # from https://euclid.roe.ac.uk/issues/22517#note-28\n+  # first value in the pair is the linear signal in ADU,\n+  # the second one is the correcponding non-linear signal in ADU\n+  NLMODEL = \"\"\"{\n+\"1-1.E\": [\n+    [\n+      5.7205759826688904,\n+      5.807249847988931\n+    ],\n+    [\n+      12.088025578334763,\n+      12.13829002398899\n+    ],\n+    [\n+      31.357132187303225,\n+      31.468369922215974\n+    ],\n+    [\n+      63.12610021814389,\n+      62.992331362068676\n+    ],\n+    [\n+      127.18233644061723,\n+      127.07687630976658\n+    ],\n+    [\n+      319.2614419237922,\n+      319.15183262424875\n+    ],\n+    [\n+      639.6414209206326,\n+      639.7731134066603\n+    ],\n+    [\n+      1281.0531955783497,\n+      1282.3205548366452\n+    ],\n+    [\n+      3209.5279760698586,\n+      3218.461708954091\n+    ],\n+    [\n+      6438.379363052668,\n+      6474.959727033666\n+    ],\n+    [\n+      12949.723502523604,\n+      13089.290747508476\n+    ],\n+    [\n+      32698.444425748825,\n+      33398.46232320779\n+    ],\n+    [\n+      39328.831991792795,\n+      40263.488795679245\n+    ],\n+    [\n+      52608.14872305627,\n+      54032.42242146698\n+    ],\n+    [\n+      59221.55010694724,\n+      60863.18786984436\n+    ]\n+  ]\n+}\"\"\"\n+  logger.info( \"\")\n+  # correct nonlinearity in a random array\n+  non_lin_flat_cfg = { \"linear_up_to_adu\": 300 }\n+  model_points = np.array( json.loads( NLMODEL)[\"1-1.E\"])\n+  nonlin_image = np.random.rand( 1000, 1000) * 65535.0 - 100.0\n+  linear_image = VIS_NonLin_Removal.remove_non_lin_flat( nonlin_image, model_points, non_lin_flat_cfg)\n+  pixels_above_1000 = linear_image > 1000\n \n-    Assert that the expected file-not-found exception is thrown.\n-    \"\"\"\n-    arg_string = ['argv_item_zero_which_is_not_used',\n-                  '--in_image', 'non/existent/input/file.fits']\n-    #An IOError Exception \"No such file or directory\" is expected\n-    with pytest.raises(IOError):\n-        prog.cmd_line_entry_point(arg_string)\n+  # check that correction goes in the right way\n+  # (with model above, linear values above 1000 ADU are lower than non-linear values)\n+  logger.info( f\"above 1000 ADU correction mean: {np.mean( linear_image[pixels_above_1000] - nonlin_image[pixels_above_1000]):.2f} ADU\")\n+  assert np.all( linear_image[pixels_above_1000] < nonlin_image[pixels_above_1000])\n+\n+  # invert nl correction model\n+  inv_model = model_points[:,::-1]\n+\n+  # convert linear_image back to non linear image\n+  nonlin_image2 = VIS_NonLin_Removal.remove_non_lin_flat( linear_image, inv_model, non_lin_flat_cfg)\n+  diff = nonlin_image2 - nonlin_image\n+\n+  # and check various stats\n+  logger.info( f\"max difference={np.abs( diff).max()}\")\n+  logger.info( f\"abs difference sum={np.abs( diff).sum()}\")\n+  logger.info( f\"different pixels count={np.count_nonzero( diff):,}\")\n+  assert np.abs( diff).sum() < 1\n+  return\n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ],
                        [
                            "@@ -36,7 +36,12 @@ logger = logging.getLogger( __name__)\n \n \n def test_non_lin_flat_removal():\n+  # to get the log messages, execute with:\n+  # build.*/run pytest --capture=no VIS_NonLinearity_Flat/tests/python/VIS_remove_non_lin_flat_test.py\n+\n   # from https://euclid.roe.ac.uk/issues/22517#note-28\n+  # first value in the pair is the linear signal in ADU,\n+  # the second one is the correcponding non-linear signal in ADU\n   NLMODEL = \"\"\"{\n \"1-1.E\": [\n     [\n@@ -101,18 +106,29 @@ def test_non_lin_flat_removal():\n     ]\n   ]\n }\"\"\"\n+  logger.info( \"\")\n   # correct nonlinearity in a random array\n   non_lin_flat_cfg = { \"linear_up_to_adu\": 300 }\n   model_points = np.array( json.loads( NLMODEL)[\"1-1.E\"])\n   nonlin_image = np.random.rand( 1000, 1000) * 65535.0 - 100.0\n   linear_image = VIS_NonLin_Removal.remove_non_lin_flat( nonlin_image, model_points, non_lin_flat_cfg)\n+  pixels_above_1000 = linear_image > 1000\n+\n+  # check that correction goes in the right way\n+  # (with model above, linear values above 1000 ADU are lower than non-linear values)\n+  logger.info( f\"above 1000 ADU correction mean: {np.mean( linear_image[pixels_above_1000] - nonlin_image[pixels_above_1000]):.2f} ADU\")\n+  assert np.all( linear_image[pixels_above_1000] < nonlin_image[pixels_above_1000])\n+\n   # invert nl correction model\n   inv_model = model_points[:,::-1]\n+\n   # convert linear_image back to non linear image\n   nonlin_image2 = VIS_NonLin_Removal.remove_non_lin_flat( linear_image, inv_model, non_lin_flat_cfg)\n   diff = nonlin_image2 - nonlin_image\n+\n+  # and check various stats\n   logger.info( f\"max difference={np.abs( diff).max()}\")\n   logger.info( f\"abs difference sum={np.abs( diff).sum()}\")\n-  logger.info( f\"different pixels count={np.count_nonzero( diff)}\")\n+  logger.info( f\"different pixels count={np.count_nonzero( diff):,}\")\n   assert np.abs( diff).sum() < 1\n   return\n",
                            "Merge branch 'release-13.0' into develop: fix Bug #23240 [CorrectNonLinearity] section missing",
                            "Catherine Grenet",
                            "2023-08-01T10:48:03.000+02:00",
                            "d6ed2ca06b809fbe575e804aaf491cc82d40a7ad"
                        ],
                        [
                            "@@ -36,7 +36,12 @@ logger = logging.getLogger( __name__)\n \n \n def test_non_lin_flat_removal():\n+  # to get the log messages, execute with:\n+  # build.*/run pytest --capture=no VIS_NonLinearity_Flat/tests/python/VIS_remove_non_lin_flat_test.py\n+\n   # from https://euclid.roe.ac.uk/issues/22517#note-28\n+  # first value in the pair is the linear signal in ADU,\n+  # the second one is the correcponding non-linear signal in ADU\n   NLMODEL = \"\"\"{\n \"1-1.E\": [\n     [\n@@ -101,18 +106,29 @@ def test_non_lin_flat_removal():\n     ]\n   ]\n }\"\"\"\n+  logger.info( \"\")\n   # correct nonlinearity in a random array\n   non_lin_flat_cfg = { \"linear_up_to_adu\": 300 }\n   model_points = np.array( json.loads( NLMODEL)[\"1-1.E\"])\n   nonlin_image = np.random.rand( 1000, 1000) * 65535.0 - 100.0\n   linear_image = VIS_NonLin_Removal.remove_non_lin_flat( nonlin_image, model_points, non_lin_flat_cfg)\n+  pixels_above_1000 = linear_image > 1000\n+\n+  # check that correction goes in the right way\n+  # (with model above, linear values above 1000 ADU are lower than non-linear values)\n+  logger.info( f\"above 1000 ADU correction mean: {np.mean( linear_image[pixels_above_1000] - nonlin_image[pixels_above_1000]):.2f} ADU\")\n+  assert np.all( linear_image[pixels_above_1000] < nonlin_image[pixels_above_1000])\n+\n   # invert nl correction model\n   inv_model = model_points[:,::-1]\n+\n   # convert linear_image back to non linear image\n   nonlin_image2 = VIS_NonLin_Removal.remove_non_lin_flat( linear_image, inv_model, non_lin_flat_cfg)\n   diff = nonlin_image2 - nonlin_image\n+\n+  # and check various stats\n   logger.info( f\"max difference={np.abs( diff).max()}\")\n   logger.info( f\"abs difference sum={np.abs( diff).sum()}\")\n-  logger.info( f\"different pixels count={np.count_nonzero( diff)}\")\n+  logger.info( f\"different pixels count={np.count_nonzero( diff):,}\")\n   assert np.abs( diff).sum() < 1\n   return\n",
                            "Merge branch 'hotfix_23240_NLconfig' into 'release-13.0'",
                            "Catherine Grenet",
                            "2023-08-01T08:38:54.000+00:00",
                            "a0342857e6bea87c6e75d8c0756e71923b4d8a50"
                        ],
                        [
                            "@@ -36,7 +36,12 @@ logger = logging.getLogger( __name__)\n \n \n def test_non_lin_flat_removal():\n+  # to get the log messages, execute with:\n+  # build.*/run pytest --capture=no VIS_NonLinearity_Flat/tests/python/VIS_remove_non_lin_flat_test.py\n+\n   # from https://euclid.roe.ac.uk/issues/22517#note-28\n+  # first value in the pair is the linear signal in ADU,\n+  # the second one is the correcponding non-linear signal in ADU\n   NLMODEL = \"\"\"{\n \"1-1.E\": [\n     [\n@@ -101,18 +106,29 @@ def test_non_lin_flat_removal():\n     ]\n   ]\n }\"\"\"\n+  logger.info( \"\")\n   # correct nonlinearity in a random array\n   non_lin_flat_cfg = { \"linear_up_to_adu\": 300 }\n   model_points = np.array( json.loads( NLMODEL)[\"1-1.E\"])\n   nonlin_image = np.random.rand( 1000, 1000) * 65535.0 - 100.0\n   linear_image = VIS_NonLin_Removal.remove_non_lin_flat( nonlin_image, model_points, non_lin_flat_cfg)\n+  pixels_above_1000 = linear_image > 1000\n+\n+  # check that correction goes in the right way\n+  # (with model above, linear values above 1000 ADU are lower than non-linear values)\n+  logger.info( f\"above 1000 ADU correction mean: {np.mean( linear_image[pixels_above_1000] - nonlin_image[pixels_above_1000]):.2f} ADU\")\n+  assert np.all( linear_image[pixels_above_1000] < nonlin_image[pixels_above_1000])\n+\n   # invert nl correction model\n   inv_model = model_points[:,::-1]\n+\n   # convert linear_image back to non linear image\n   nonlin_image2 = VIS_NonLin_Removal.remove_non_lin_flat( linear_image, inv_model, non_lin_flat_cfg)\n   diff = nonlin_image2 - nonlin_image\n+\n+  # and check various stats\n   logger.info( f\"max difference={np.abs( diff).max()}\")\n   logger.info( f\"abs difference sum={np.abs( diff).sum()}\")\n-  logger.info( f\"different pixels count={np.count_nonzero( diff)}\")\n+  logger.info( f\"different pixels count={np.count_nonzero( diff):,}\")\n   assert np.abs( diff).sum() < 1\n   return\n",
                            "VIS_process_quad.py: fix #23240, add config_filename to NL correction PE call",
                            "Sylvain Mottet",
                            "2023-07-31T22:56:54.000+02:00",
                            "3c15e82dbcf77e140c653f2ca955a63c2092a040"
                        ],
                        [
                            "@@ -0,0 +1,118 @@\n+\"\"\"Tests for the VIS_remove_non_lin_flat Elements program.\n+\n+To run these tests in Eclipse in LODEEN, it would be necessary to set up the Elements environment.  There was a\n+method described at https://euclid.roe.ac.uk/projects/codeen-users/wiki/EclipseIntegration but this seems to be\n+out-of-date.  Some of the ingredients might be:\n+   - Open Window -> Preferences -> PyDev -> PyUnit -> Test Runner\n+   - Choose py.test from the dropdown box, and delete any text in the arguments window.\n+   - Right click on the \"python\" directory (under tests) and Run As -> Python unit-test.\n+\n+To run them at the command line, use \"make purge install ; make CTEST_OUTPUT_ON_FAILURE=1 test\"\n+\"\"\"\n+#\n+# Copyright (C) 2012-2023 Euclid Science Ground Segment\n+#\n+# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n+# Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n+# any later version.\n+#\n+# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n+# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+# details.\n+#\n+# You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n+# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+#\n+\n+import pytest\n+\n+from   VIS_NonLinearity import VIS_NonLin_Removal\n+import numpy as np\n+import json\n+import sys\n+\n+import logging\n+logger = logging.getLogger( __name__)\n+\n+\n+def test_non_lin_flat_removal():\n+  # from https://euclid.roe.ac.uk/issues/22517#note-28\n+  NLMODEL = \"\"\"{\n+\"1-1.E\": [\n+    [\n+      5.7205759826688904,\n+      5.807249847988931\n+    ],\n+    [\n+      12.088025578334763,\n+      12.13829002398899\n+    ],\n+    [\n+      31.357132187303225,\n+      31.468369922215974\n+    ],\n+    [\n+      63.12610021814389,\n+      62.992331362068676\n+    ],\n+    [\n+      127.18233644061723,\n+      127.07687630976658\n+    ],\n+    [\n+      319.2614419237922,\n+      319.15183262424875\n+    ],\n+    [\n+      639.6414209206326,\n+      639.7731134066603\n+    ],\n+    [\n+      1281.0531955783497,\n+      1282.3205548366452\n+    ],\n+    [\n+      3209.5279760698586,\n+      3218.461708954091\n+    ],\n+    [\n+      6438.379363052668,\n+      6474.959727033666\n+    ],\n+    [\n+      12949.723502523604,\n+      13089.290747508476\n+    ],\n+    [\n+      32698.444425748825,\n+      33398.46232320779\n+    ],\n+    [\n+      39328.831991792795,\n+      40263.488795679245\n+    ],\n+    [\n+      52608.14872305627,\n+      54032.42242146698\n+    ],\n+    [\n+      59221.55010694724,\n+      60863.18786984436\n+    ]\n+  ]\n+}\"\"\"\n+  # correct nonlinearity in a random array\n+  non_lin_flat_cfg = { \"linear_up_to_adu\": 300 }\n+  model_points = np.array( json.loads( NLMODEL)[\"1-1.E\"])\n+  nonlin_image = np.random.rand( 1000, 1000) * 65535.0 - 100.0\n+  linear_image = VIS_NonLin_Removal.remove_non_lin_flat( nonlin_image, model_points, non_lin_flat_cfg)\n+  # invert nl correction model\n+  inv_model = model_points[:,::-1]\n+  # convert linear_image back to non linear image\n+  nonlin_image2 = VIS_NonLin_Removal.remove_non_lin_flat( linear_image, inv_model, non_lin_flat_cfg)\n+  diff = nonlin_image2 - nonlin_image\n+  logger.info( f\"max difference={np.abs( diff).max()}\")\n+  logger.info( f\"abs difference sum={np.abs( diff).sum()}\")\n+  logger.info( f\"different pixels count={np.count_nonzero( diff)}\")\n+  assert np.abs( diff).sum() < 1\n+  return\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ],
                        [
                            "@@ -26,26 +26,93 @@ To run them at the command line, use \"make purge install ; make CTEST_OUTPUT_ON_\n \n import pytest\n \n-import VIS_NonLinearity_Flat.VIS_NonLinCorrectionFlat_Programs.VIS_remove_non_lin_flat as prog\n+from   VIS_NonLinearity import VIS_NonLin_Removal\n+import numpy as np\n+import json\n+import sys\n \n+import logging\n+logger = logging.getLogger( __name__)\n \n-def test_main_method_badargs():\n-    \"\"\"Call the command line entry point with an argument that is not recognised.\n \n-    Assert that the expected exception is thrown due to the invalid argument.\n-    \"\"\"\n-    arg_string = ['argv_item_zero_which_is_not_used', '--unrecognised_argument']\n-    #Python's argparse.py calls sys.exit() which throws a SystemExit Exception\n-    with pytest.raises(SystemExit):\n-        prog.cmd_line_entry_point(arg_string)\n-\n-def test_main_method_callable():\n-    \"\"\"Call the command line entry point with input files that do not exist.\n-\n-    Assert that the expected file-not-found exception is thrown.\n-    \"\"\"\n-    arg_string = ['argv_item_zero_which_is_not_used',\n-                  '--in_image', 'non/existent/input/file.fits']\n-    #An IOError Exception \"No such file or directory\" is expected\n-    with pytest.raises(IOError):\n-        prog.cmd_line_entry_point(arg_string)\n+def test_non_lin_flat_removal():\n+  # from https://euclid.roe.ac.uk/issues/22517#note-28\n+  NLMODEL = \"\"\"{\n+\"1-1.E\": [\n+    [\n+      5.7205759826688904,\n+      5.807249847988931\n+    ],\n+    [\n+      12.088025578334763,\n+      12.13829002398899\n+    ],\n+    [\n+      31.357132187303225,\n+      31.468369922215974\n+    ],\n+    [\n+      63.12610021814389,\n+      62.992331362068676\n+    ],\n+    [\n+      127.18233644061723,\n+      127.07687630976658\n+    ],\n+    [\n+      319.2614419237922,\n+      319.15183262424875\n+    ],\n+    [\n+      639.6414209206326,\n+      639.7731134066603\n+    ],\n+    [\n+      1281.0531955783497,\n+      1282.3205548366452\n+    ],\n+    [\n+      3209.5279760698586,\n+      3218.461708954091\n+    ],\n+    [\n+      6438.379363052668,\n+      6474.959727033666\n+    ],\n+    [\n+      12949.723502523604,\n+      13089.290747508476\n+    ],\n+    [\n+      32698.444425748825,\n+      33398.46232320779\n+    ],\n+    [\n+      39328.831991792795,\n+      40263.488795679245\n+    ],\n+    [\n+      52608.14872305627,\n+      54032.42242146698\n+    ],\n+    [\n+      59221.55010694724,\n+      60863.18786984436\n+    ]\n+  ]\n+}\"\"\"\n+  # correct nonlinearity in a random array\n+  non_lin_flat_cfg = { \"linear_up_to_adu\": 300 }\n+  model_points = np.array( json.loads( NLMODEL)[\"1-1.E\"])\n+  nonlin_image = np.random.rand( 1000, 1000) * 65535.0 - 100.0\n+  linear_image = VIS_NonLin_Removal.remove_non_lin_flat( nonlin_image, model_points, non_lin_flat_cfg)\n+  # invert nl correction model\n+  inv_model = model_points[:,::-1]\n+  # convert linear_image back to non linear image\n+  nonlin_image2 = VIS_NonLin_Removal.remove_non_lin_flat( linear_image, inv_model, non_lin_flat_cfg)\n+  diff = nonlin_image2 - nonlin_image\n+  logger.info( f\"max difference={np.abs( diff).max()}\")\n+  logger.info( f\"abs difference sum={np.abs( diff).sum()}\")\n+  logger.info( f\"different pixels count={np.count_nonzero( diff)}\")\n+  assert np.abs( diff).sum() < 1\n+  return\n",
                            "Merge branch 'release-13.0' into develop: feature #22702-14 VIS_NonLinCorrection_Flat PE",
                            "Catherine Grenet",
                            "2023-07-31T10:18:34.000+02:00",
                            "a2c28d46ff4722c80b3a74ee61c4e497b880f207"
                        ],
                        [
                            "@@ -26,26 +26,93 @@ To run them at the command line, use \"make purge install ; make CTEST_OUTPUT_ON_\n \n import pytest\n \n-import VIS_NonLinearity_Flat.VIS_NonLinCorrectionFlat_Programs.VIS_remove_non_lin_flat as prog\n+from   VIS_NonLinearity import VIS_NonLin_Removal\n+import numpy as np\n+import json\n+import sys\n \n+import logging\n+logger = logging.getLogger( __name__)\n \n-def test_main_method_badargs():\n-    \"\"\"Call the command line entry point with an argument that is not recognised.\n \n-    Assert that the expected exception is thrown due to the invalid argument.\n-    \"\"\"\n-    arg_string = ['argv_item_zero_which_is_not_used', '--unrecognised_argument']\n-    #Python's argparse.py calls sys.exit() which throws a SystemExit Exception\n-    with pytest.raises(SystemExit):\n-        prog.cmd_line_entry_point(arg_string)\n-\n-def test_main_method_callable():\n-    \"\"\"Call the command line entry point with input files that do not exist.\n-\n-    Assert that the expected file-not-found exception is thrown.\n-    \"\"\"\n-    arg_string = ['argv_item_zero_which_is_not_used',\n-                  '--in_image', 'non/existent/input/file.fits']\n-    #An IOError Exception \"No such file or directory\" is expected\n-    with pytest.raises(IOError):\n-        prog.cmd_line_entry_point(arg_string)\n+def test_non_lin_flat_removal():\n+  # from https://euclid.roe.ac.uk/issues/22517#note-28\n+  NLMODEL = \"\"\"{\n+\"1-1.E\": [\n+    [\n+      5.7205759826688904,\n+      5.807249847988931\n+    ],\n+    [\n+      12.088025578334763,\n+      12.13829002398899\n+    ],\n+    [\n+      31.357132187303225,\n+      31.468369922215974\n+    ],\n+    [\n+      63.12610021814389,\n+      62.992331362068676\n+    ],\n+    [\n+      127.18233644061723,\n+      127.07687630976658\n+    ],\n+    [\n+      319.2614419237922,\n+      319.15183262424875\n+    ],\n+    [\n+      639.6414209206326,\n+      639.7731134066603\n+    ],\n+    [\n+      1281.0531955783497,\n+      1282.3205548366452\n+    ],\n+    [\n+      3209.5279760698586,\n+      3218.461708954091\n+    ],\n+    [\n+      6438.379363052668,\n+      6474.959727033666\n+    ],\n+    [\n+      12949.723502523604,\n+      13089.290747508476\n+    ],\n+    [\n+      32698.444425748825,\n+      33398.46232320779\n+    ],\n+    [\n+      39328.831991792795,\n+      40263.488795679245\n+    ],\n+    [\n+      52608.14872305627,\n+      54032.42242146698\n+    ],\n+    [\n+      59221.55010694724,\n+      60863.18786984436\n+    ]\n+  ]\n+}\"\"\"\n+  # correct nonlinearity in a random array\n+  non_lin_flat_cfg = { \"linear_up_to_adu\": 300 }\n+  model_points = np.array( json.loads( NLMODEL)[\"1-1.E\"])\n+  nonlin_image = np.random.rand( 1000, 1000) * 65535.0 - 100.0\n+  linear_image = VIS_NonLin_Removal.remove_non_lin_flat( nonlin_image, model_points, non_lin_flat_cfg)\n+  # invert nl correction model\n+  inv_model = model_points[:,::-1]\n+  # convert linear_image back to non linear image\n+  nonlin_image2 = VIS_NonLin_Removal.remove_non_lin_flat( linear_image, inv_model, non_lin_flat_cfg)\n+  diff = nonlin_image2 - nonlin_image\n+  logger.info( f\"max difference={np.abs( diff).max()}\")\n+  logger.info( f\"abs difference sum={np.abs( diff).sum()}\")\n+  logger.info( f\"different pixels count={np.count_nonzero( diff)}\")\n+  assert np.abs( diff).sum() < 1\n+  return\n",
                            "Merge branch 'hotfix_22702-14' into 'release-13.0'",
                            "Catherine Grenet",
                            "2023-07-31T08:01:51.000+00:00",
                            "7a8239c2517df3494ba2dd2b94162082de07e428"
                        ],
                        [
                            "@@ -104,7 +104,7 @@ def test_non_lin_flat_removal():\n   # correct nonlinearity in a random array\n   non_lin_flat_cfg = { \"linear_up_to_adu\": 300 }\n   model_points = np.array( json.loads( NLMODEL)[\"1-1.E\"])\n-  nonlin_image = np.random.rand( 1000, 1000) * 70000 - 100\n+  nonlin_image = np.random.rand( 1000, 1000) * 65535.0 - 100.0\n   linear_image = VIS_NonLin_Removal.remove_non_lin_flat( nonlin_image, model_points, non_lin_flat_cfg)\n   # invert nl correction model\n   inv_model = model_points[:,::-1]\n",
                            "Issue 22702-30: Tolerate very high and low numbers in the input image",
                            "Chris Dolding",
                            "2023-07-27T15:43:15.000+01:00",
                            "f2ba08057f8104c9f7cf828d5c1036d8e48af866"
                        ],
                        [
                            "@@ -102,7 +102,7 @@ def test_non_lin_flat_removal():\n   ]\n }\"\"\"\n   # correct nonlinearity in a random array\n-  non_lin_flat_cfg = { \"correction_lower_limit\": 300 }\n+  non_lin_flat_cfg = { \"linear_up_to_adu\": 300 }\n   model_points = np.array( json.loads( NLMODEL)[\"1-1.E\"])\n   nonlin_image = np.random.rand( 1000, 1000) * 70000 - 100\n   linear_image = VIS_NonLin_Removal.remove_non_lin_flat( nonlin_image, model_points, non_lin_flat_cfg)\n",
                            "Issue 22702: In NL PE rename correction_lower_limit to linear_up_to_adu",
                            "Chris Dolding",
                            "2023-07-27T13:20:26.000+01:00",
                            "dbc1b604514789e5e893fa5b155a64b387c1a57f"
                        ],
                        [
                            "@@ -102,13 +102,14 @@ def test_non_lin_flat_removal():\n   ]\n }\"\"\"\n   # correct nonlinearity in a random array\n+  non_lin_flat_cfg = { \"correction_lower_limit\": 300 }\n   model_points = np.array( json.loads( NLMODEL)[\"1-1.E\"])\n   nonlin_image = np.random.rand( 1000, 1000) * 70000 - 100\n-  linear_image = VIS_NonLin_Removal.remove_non_lin( nonlin_image, model_points)\n+  linear_image = VIS_NonLin_Removal.remove_non_lin_flat( nonlin_image, model_points, non_lin_flat_cfg)\n   # invert nl correction model\n   inv_model = model_points[:,::-1]\n   # convert linear_image back to non linear image\n-  nonlin_image2 = VIS_NonLin_Removal.remove_non_lin( linear_image, inv_model)\n+  nonlin_image2 = VIS_NonLin_Removal.remove_non_lin_flat( linear_image, inv_model, non_lin_flat_cfg)\n   diff = nonlin_image2 - nonlin_image\n   logger.info( f\"max difference={np.abs( diff).max()}\")\n   logger.info( f\"abs difference sum={np.abs( diff).sum()}\")\n",
                            "Issue 22702: Merge VIS_NonLinearity_Flat into VIS_NonLinearity",
                            "Chris Dolding",
                            "2023-07-25T18:00:13.000+01:00",
                            "409a404d40f5c79a4d142196961c619ba50b006d"
                        ],
                        [
                            "@@ -0,0 +1,117 @@\n+\"\"\"Tests for the VIS_remove_non_lin_flat Elements program.\n+\n+To run these tests in Eclipse in LODEEN, it would be necessary to set up the Elements environment.  There was a\n+method described at https://euclid.roe.ac.uk/projects/codeen-users/wiki/EclipseIntegration but this seems to be\n+out-of-date.  Some of the ingredients might be:\n+   - Open Window -> Preferences -> PyDev -> PyUnit -> Test Runner\n+   - Choose py.test from the dropdown box, and delete any text in the arguments window.\n+   - Right click on the \"python\" directory (under tests) and Run As -> Python unit-test.\n+\n+To run them at the command line, use \"make purge install ; make CTEST_OUTPUT_ON_FAILURE=1 test\"\n+\"\"\"\n+#\n+# Copyright (C) 2012-2023 Euclid Science Ground Segment\n+#\n+# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n+# Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n+# any later version.\n+#\n+# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n+# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+# details.\n+#\n+# You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n+# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+#\n+\n+import pytest\n+\n+from   VIS_NonLinearity import VIS_NonLin_Removal\n+import numpy as np\n+import json\n+import sys\n+\n+import logging\n+logger = logging.getLogger( __name__)\n+\n+\n+def test_non_lin_flat_removal():\n+  # from https://euclid.roe.ac.uk/issues/22517#note-28\n+  NLMODEL = \"\"\"{\n+\"1-1.E\": [\n+    [\n+      5.7205759826688904,\n+      5.807249847988931\n+    ],\n+    [\n+      12.088025578334763,\n+      12.13829002398899\n+    ],\n+    [\n+      31.357132187303225,\n+      31.468369922215974\n+    ],\n+    [\n+      63.12610021814389,\n+      62.992331362068676\n+    ],\n+    [\n+      127.18233644061723,\n+      127.07687630976658\n+    ],\n+    [\n+      319.2614419237922,\n+      319.15183262424875\n+    ],\n+    [\n+      639.6414209206326,\n+      639.7731134066603\n+    ],\n+    [\n+      1281.0531955783497,\n+      1282.3205548366452\n+    ],\n+    [\n+      3209.5279760698586,\n+      3218.461708954091\n+    ],\n+    [\n+      6438.379363052668,\n+      6474.959727033666\n+    ],\n+    [\n+      12949.723502523604,\n+      13089.290747508476\n+    ],\n+    [\n+      32698.444425748825,\n+      33398.46232320779\n+    ],\n+    [\n+      39328.831991792795,\n+      40263.488795679245\n+    ],\n+    [\n+      52608.14872305627,\n+      54032.42242146698\n+    ],\n+    [\n+      59221.55010694724,\n+      60863.18786984436\n+    ]\n+  ]\n+}\"\"\"\n+  # correct nonlinearity in a random array\n+  model_points = np.array( json.loads( NLMODEL)[\"1-1.E\"])\n+  nonlin_image = np.random.rand( 1000, 1000) * 70000 - 100\n+  linear_image = VIS_NonLin_Removal.remove_non_lin( nonlin_image, model_points)\n+  # invert nl correction model\n+  inv_model = model_points[:,::-1]\n+  # convert linear_image back to non linear image\n+  nonlin_image2 = VIS_NonLin_Removal.remove_non_lin( linear_image, inv_model)\n+  diff = nonlin_image2 - nonlin_image\n+  logger.info( f\"max difference={np.abs( diff).max()}\")\n+  logger.info( f\"abs difference sum={np.abs( diff).sum()}\")\n+  logger.info( f\"different pixels count={np.count_nonzero( diff)}\")\n+  assert np.abs( diff).sum() < 1\n+  return\n",
                            "VIS_NonLin_Removal/non_lin_flat_removal.py: improve execution time, move non_lin_flat_removal.py into VIS_NonLin_Removal",
                            "Sylvain Mottet",
                            "2023-07-25T12:06:30.000+02:00",
                            "a37ce7761a165be0798efc2e389970f61b27d388"
                        ]
                    ],
                    "VIS_NonLinearity_Flat/CMakeLists.txt": [
                        [
                            "@@ -1,70 +0,0 @@\n-CMAKE_MINIMUM_REQUIRED(VERSION 2.8.5)\n-\n-#===============================================================================\n-# Load elements_subdir macro here\n-# Examples:\n-#   For declaring a project module:\n-#         elements_subdir(ElementsExamples)\n-#===============================================================================\n-elements_subdir(VIS_NonLinearity_Flat)\n-\n-#===============================================================================\n-# Load elements_depends_on_subdirs macro here\n-#   For creating a dependency onto an other accessible module\n-#         elements_depends_on_subdirs(ElementsKernel)\n-#===============================================================================\n-elements_depends_on_subdirs(ElementsKernel)\n-\n-#===============================================================================\n-# Add the find_package macro (a pure CMake command) here to locate the\n-# libraries.\n-# Examples:\n-#          find_package(CppUnit)\n-#===============================================================================\n-\n-#===============================================================================\n-# Declare the library dependencies here\n-# Example:\n-#         elements_add_library(ElementsExamples src/Lib/*.cpp\n-#                     LINK_LIBRARIES Boost ElementsKernel\n-#                     INCLUDE_DIRS Boost ElementsKernel\n-#                     PUBLIC_HEADERS ElementsExamples)\n-#===============================================================================\n-\n-#===============================================================================\n-# Declare the executables here\n-# Example:\n-# elements_add_executable(ElementsProgramExample src/Program/ProgramExample.cpp\n-#                        LINK_LIBRARIES Boost ElementsExamples\n-#                        INCLUDE_DIRS Boost ElementsExamples)\n-#===============================================================================\n-\n-#===============================================================================\n-# Declare the Boost tests here\n-# Example:\n-# elements_add_unit_test(BoostClassExample tests/src/Boost/ClassExample_test.cpp\n-#                       EXECUTABLE BoostClassExample_test\n-#                       INCLUDE_DIRS ElementsExamples\n-#                       LINK_LIBRARIES ElementsExamples TYPE Boost)\n-#===============================================================================\n-\n-#===============================================================================\n-# Use the following macro for python modules, scripts and aux files:\n-#  elements_install_python_modules()\n-#  elements_install_scripts()\n-#===============================================================================\n-elements_install_python_modules()\n-\n-#===============================================================================\n-# Declare the Python programs here\n-# Examples :\n-# elements_add_python_program(PythonProgramExample\n-#                             ElementsExamples.PythonProgramExample)\n-#===============================================================================\n-elements_add_python_program(VIS_remove_non_lin_flat VIS_NonLinearity_Flat.VIS_NonLinCorrectionFlat_Programs.VIS_remove_non_lin_flat)\n-\n-#===============================================================================\n-# Add the elements_install_conf_files macro\n-# Examples:\n-#          elements_install_conf_files()\n-#===============================================================================\n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ]
                    ],
                    "VIS_NonLinearity_Flat/python/VIS_NonLinearity_Flat/VIS_NonLinCorrectionFlat_IO/__init__.py": [
                        [
                            "@@ -1,9 +0,0 @@\n-\"\"\"\n-This package contains the VIS_NonLinCorrectionFlat_IO Elements module.\n-\"\"\"\n-\n-from pkgutil import extend_path\n-__path__ = extend_path(__path__, __name__)\n-\n-#import the python files which define the external interface of this Elements module\n-from .file_entry_point import *\n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ]
                    ],
                    "VIS_NonLinearity_Flat/python/VIS_NonLinearity_Flat/VIS_NonLinCorrectionFlat_IO/file_entry_point.py": [
                        [
                            "@@ -1,103 +0,0 @@\n-\"\"\"The layer of the Non-linearity Correction (Flat exposures) PE which reads/writes files on disk.\n-\n-This layer should be used by a caller who can supply the file names of input files to be read, and the name of an\n-output file to be written.\n-\n-A corrected copy of the specified input quadrant will be written to the output file.\n-\"\"\"\n-#\n-# Copyright (C) 2012-2023 Euclid Science Ground Segment\n-#\n-# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n-# Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n-# any later version.\n-#\n-# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n-# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n-# details.\n-#\n-# You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n-# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n-#\n-\n-import os.path\n-import numpy as np\n-import json\n-import re #regular expressions\n-from astropy.io import fits\n-\n-import ElementsKernel.Logging as elog\n-\n-import VIS_PyLibrary_M.fits_io_library as fio\n-\n-from ..VIS_NonLinFlat_Removal import non_lin_flat_removal as algo\n-\n-__all__ = ['file_layer_entry_point']\n-\n-\n-def _read_corr_model_file(model_file_name, quad_name):\n-    \"\"\"Read the non-linearity correction model of the specified quadrant from a json file.\n-\n-    Parameters\n-    ----------\n-    model_file_name : string\n-        File name of the json file containing the model which converts non-linear flux to linear flux, where both\n-        are in ADU.  It must contain the quadrant specified by `quad_name`.\n-    quad_name : string\n-        Name of the quadrant whose model shall be read from the file.  It should match a name used inside the file.\n-\n-    Returns\n-    -------\n-    2-D array_like of float\n-        A set of pairs of flux values which convert non-linear flux to linear flux, where both are in ADU.  If there are\n-        N pairs this array's shape is [N][2].  In each pair, index [1] is a non-linear (i.e. observed) flux and [0] is the\n-        corresponding linear (i.e. corrected) flux.\n-    \"\"\"\n-    log = elog.getLogger(__name__)\n-    with open( model_file_name, \"r\") as file:\n-        json_data = json.load(file)\n-    model_points = np.array(json_data[quad_name])\n-    log.info(\"_read_corr_model_file(): Loaded a model with \" + str(len(model_points)) + \" points\")\n-    return model_points\n-\n-def file_layer_entry_point(input_file, model_file, output_file, quadrant_id=None):\n-    \"\"\"Handles the I/O to/from files.  It is a wrapper around the core algorithm.\n-\n-    Parameters\n-    ----------\n-    input_file : string\n-        File name of the input FITS image file to be examined.  It must contain the quadrant specified by\n-        `quadrant_id`.\n-    model_file : string\n-        File name of the json file containing the model (as a set of points) which converts non-linear flux to linear\n-        flux, where both are in ADU.  It must contain the quadrant specified by `quadrant_id`.\n-    output_file : string\n-        Output FITS file name.  If it already exists, only the one corrected quadrant will be modified.  If it does\n-        not already exist, a new output file will be created.\n-    quadrant_id : string or number\n-        Optional name or number of the quadrant to examine.  It should match the EXTNAME in the FITS header of\n-        an image extension in the `input_file`.  Alternatively it can be an integer index of the extension within\n-        the FITS file (usually 1 to 144 in Euclid).  If not supplied, the first image extension is examined.\n-    \"\"\"\n-    log = elog.getLogger(__name__)\n-    log.info(\"file_layer_entry_point(): argument 'input_file' is: \" + str(input_file))\n-    log.info(\"file_layer_entry_point(): argument 'quadrant_id' is: \" + str(quadrant_id))\n-    log.info(\"file_layer_entry_point(): argument 'model_file' is: \" + str(model_file))\n-    log.info(\"file_layer_entry_point(): argument 'output_file' is: \" + str(output_file))\n-    if (quadrant_id is None) or (quadrant_id == \"\"):\n-        quadrant_id = 1 #use the first image extension\n-    elif quadrant_id.isdigit():\n-        quadrant_id = int(quadrant_id)\n-    quad_name = fio.read_ext_name(input_file, quadrant_id)\n-    log.info(\"file_layer_entry_point(): quadrant name (converted) is: \" + str(quad_name))\n-    image = fio.load_single_ext(input_file, quad_name, apply_gain=False)\n-    model_points = _read_corr_model_file(model_file, quad_name)\n-    log.debug(\"file_layer_entry_point(): FITS model points are \" + str(model_points))\n-    output_image = algo.remove_non_lin(image, model_points)\n-    if os.path.isfile(output_file):\n-        log.info(\"file_layer_entry_point(): saving to existing file: \" + output_file)\n-        fio.update_single_ext(output_file, output_image, quad_name, gain=None, apply_gain=False)\n-    else:\n-        log.info(\"file_layer_entry_point(): saving image to new file: \" + output_file)\n-        fio.save_single_ext(output_file, output_image, quad_name, input_file, gain=None, apply_gain=False)\n-    log.info(\"file_layer_entry_point(): end\")\n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ]
                    ],
                    "VIS_NonLinearity_Flat/python/VIS_NonLinearity_Flat/VIS_NonLinCorrectionFlat_Programs/VIS_remove_non_lin_flat.py": [
                        [
                            "@@ -1,68 +0,0 @@\n-\"\"\"Entry point for the Elements program of the Non-linearity Correction PE for a model from flat exposures.\n-\n-The Elements Program name matches the name of this .py file.\n-\"\"\"\n-#\n-# Copyright (C) 2012-2023 Euclid Science Ground Segment\n-#\n-# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n-# Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n-# any later version.\n-#\n-# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n-# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n-# details.\n-#\n-# You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n-# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n-#\n-\n-import ElementsKernel.Logging as elog\n-\n-from ..VIS_NonLinCorrectionFlat_IO import file_entry_point as fep\n-\n-from . import command_line_options as clo\n-from . import identity as this_emod #Id of the Elements module which contains this program\n-\n-__all__ = ['defineSpecificProgramOptions', 'mainMethod', 'cmd_line_entry_point', 'parent_module_name']\n-\n-\n-def defineSpecificProgramOptions():\n-    \"\"\"Standard method required by Elements, defining the options.\"\"\"\n-    return clo.define_cmd_line_options()\n-\n-def mainMethod(args):\n-    \"\"\"Entry point for launching the algorithm with pre-parsed arguments.\n-\n-    Used by Euclid Elements (E-Run for example).\n-\n-    Parameters\n-    ----------\n-    args : argparse.Namespace\n-        Named arguments and their values, as defined in `command_line_options.py`.\n-    \"\"\"\n-    fep.file_layer_entry_point(args.in_image,\n-                               args.in_model,\n-                               args.out_file_name,\n-                               quadrant_id=args.extname)\n-\n-def cmd_line_entry_point(argv):\n-    \"\"\"Entry point for launching the algorithm with command line arguments.\n-\n-    Technically these args could come directly from a command line, or from other Python code such as a unit test.\n-\n-    Parameters\n-    ----------\n-    argv : array_like\n-        An array of arguments in the same format as sys.argv.  The supported arguments are defined\n-        in `command_line_options.py`.\n-    \"\"\"\n-    log = elog.getLogger(__name__)\n-    log.debug(\"cmd_line_entry_point(): argv is \" + str(argv))\n-    parser = clo.define_cmd_line_options()\n-    parsed_args = parser.parse_args(argv[1:])\n-    mainMethod(parsed_args)\n-\n-def parent_module_name():\n-    \"\"\"Returns the name of the Elements module which contains this program.\"\"\"\n-    return this_emod.elements_module_name()\n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ]
                    ],
                    "VIS_NonLinearity_Flat/python/VIS_NonLinearity_Flat/VIS_NonLinCorrectionFlat_Programs/__init__.py": [
                        [
                            "@@ -1,9 +0,0 @@\n-\"\"\"\n-This package contains the VIS_NonLinCorrectionFlat_Programs Elements module.\n-\"\"\"\n-\n-from pkgutil import extend_path\n-__path__ = extend_path(__path__, __name__)\n-\n-#import the python files which define the external interface of this Elements module\n-from .VIS_remove_non_lin_flat import *\n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ]
                    ],
                    "VIS_NonLinearity_Flat/python/VIS_NonLinearity_Flat/VIS_NonLinCorrectionFlat_Programs/command_line_options.py": [
                        [
                            "@@ -1,43 +0,0 @@\n-\"\"\"Defines the command line arguments supported by the Elements program of this PE.\n-\n-For a more general overview of the input and output data, see this project's README.md.\n-\"\"\"\n-#\n-# Copyright (C) 2012-2023 Euclid Science Ground Segment\n-#\n-# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n-# Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n-# any later version.\n-#\n-# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n-# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n-# details.\n-#\n-# You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n-# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n-#\n-\n-import argparse\n-\n-__all__ = ['define_cmd_line_options']\n-\n-\n-def define_cmd_line_options():\n-    \"\"\"Define the command line arguments supported by the VIS_remove_non_lin_flat Elements program.\n-\n-    Returns\n-    -------\n-    argparse.ArgumentParser\n-        A definition of arguments.\n-    \"\"\"\n-    parser = argparse.ArgumentParser()\n-    parser.add_argument('--in_image', type=str,\n-                        help='Input FITS image file name.  It must contain the quadrant to be corrected (--extname).')\n-    parser.add_argument('--in_model', type=str,\n-                        help='Input non-linearity correction model json file name.')\n-    parser.add_argument('--extname', type=str,\n-                        help='(optional) name or number of the quadrant to be corrected (e.g. \"2-1.E\").')\n-    parser.add_argument('--out_file_name', type=str,\n-                        help='Output file name for the corrected quadrant.  It may already exist and contain other ' +\n-                             'quadrants.  If it does not exist, a new file will be created.')\n-    return parser\n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ]
                    ],
                    "VIS_NonLinearity_Flat/python/VIS_NonLinearity_Flat/VIS_NonLinCorrectionFlat_Programs/eclipse_main.py": [
                        [
                            "@@ -1,27 +0,0 @@\n-\"\"\"\n-This is the entry point only for use in Eclipse.  It replaces a similar 'if' statement which was previously\n-in VIS_remove_non_lin_flat.py, but did not work with relative imports (i.e. \"from . import\")).\n-\"\"\"\n-#\n-# Copyright (C) 2012-2023 Euclid Science Ground Segment\n-#\n-# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n-# Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n-# any later version.\n-#\n-# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n-# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n-# details.\n-#\n-# You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n-# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n-#\n-\n-import sys\n-\n-#from . import VIS_remove_non_lin_flat as program  #this does not work in Eclipse\n-import VIS_NonLinearity_Flat.VIS_NonLinCorrectionFlat_Programs.VIS_remove_non_lin_flat as program\n-\n-\n-if __name__ == '__main__':\n-    program.cmd_line_entry_point(sys.argv)\n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ]
                    ],
                    "VIS_NonLinearity_Flat/python/VIS_NonLinearity_Flat/VIS_NonLinCorrectionFlat_Programs/identity.py": [
                        [
                            "@@ -1,20 +0,0 @@\n-\"\"\"Defines the identity of the Elements module which contains it.\n-\"\"\"\n-#\n-# Copyright (C) 2012-2023 Euclid Science Ground Segment\n-#\n-# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n-# Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n-# any later version.\n-#\n-# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n-# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n-# details.\n-#\n-# You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n-# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n-#\n-\n-def elements_module_name():\n-    \"\"\"Returns the name of the Elements module.\"\"\"\n-    return \"VIS_NonLinCorrectionFlat_Programs\"\n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ]
                    ],
                    "VIS_NonLinearity_Flat/python/VIS_NonLinearity_Flat/VIS_NonLinFlat_Removal/__init__.py": [
                        [
                            "@@ -1,9 +0,0 @@\n-\"\"\"\n-This package contains the VIS_NonLinFlat_Removal Elements module.\n-\"\"\"\n-\n-from pkgutil import extend_path\n-__path__ = extend_path(__path__, __name__)\n-\n-#import the python files which define the external interface of this Elements module\n-from .non_lin_flat_removal import *\n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ]
                    ],
                    "VIS_NonLinearity_Flat/python/VIS_NonLinearity_Flat/__init__.py": [
                        [
                            "@@ -1,7 +0,0 @@\n-\"\"\"\n-This package contains the VIS Non-linearity Ccorrection PE which uses a model made from flat\n-exposures (i.e. the Calibration Unit LED).\n-\"\"\"\n-\n-from pkgutil import extend_path\n-__path__ = extend_path(__path__, __name__)\n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ]
                    ],
                    "VIS_Tasks_Common/python/VIS_Tasks_Common/FromToXML.py": [
                        [
                            "@@ -78,6 +78,7 @@ from ST_DataModelBindings.dpd.vis import visbloomingmodel_stub\n from ST_DataModelBindings.dpd.vis import vistrappumpingmodel_stub\n from ST_DataModelBindings.dpd.vis import visgainmodel_stub\n from ST_DataModelBindings.dpd.vis import viszeropoint_stub\n+from ST_DataModelBindings.dpd.vis import visghostmodel_stub\n # pro\n from ST_DataModelBindings.pro import le1_stub\n from ST_DataModelBindings.pro import vis_stub\n@@ -1795,3 +1796,9 @@ def create_DpdVisZeroPoint( file_name: str) ->  viszeropoint_stub.DpdVisZeroPoin\n   dp = viszeropoint_stub.DpdVisZeroPoint()\n   fill_visFileContainer_dp( dp, [file_name])\n   return dp\n+\n+\n+def create_DpdVisGhostModel( file_name: str) ->  visghostmodel_stub.DpdVisGhostModel:\n+  dp = visghostmodel_stub.DpdVisGhostModel()\n+  fill_visFileContainer_dp( dp, [file_name])\n+  return dp\n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ],
                        [
                            "@@ -78,6 +78,7 @@ from ST_DataModelBindings.dpd.vis import visbloomingmodel_stub\n from ST_DataModelBindings.dpd.vis import vistrappumpingmodel_stub\n from ST_DataModelBindings.dpd.vis import visgainmodel_stub\n from ST_DataModelBindings.dpd.vis import viszeropoint_stub\n+from ST_DataModelBindings.dpd.vis import visghostmodel_stub\n # pro\n from ST_DataModelBindings.pro import le1_stub\n from ST_DataModelBindings.pro import vis_stub\n@@ -260,6 +261,14 @@ def failsafe_symlink( src, dest):\n   return\n \n \n+#-------------------------------------------------------------------------------\n+\n+def microsec_timestamp():\n+  \"\"\"return a string containing the current UTC date and time to the microsecond\n+  in the same format as ST_DM_FilenameProvider.FilenameProvider\"\"\"\n+  return datetime.utcnow().strftime( \"%Y%m%dT%H%M%S.%f\") + \"Z\"\n+\n+\n #---------------\n # Generic header\n #---------------\n@@ -871,29 +880,23 @@ def master_flat_dp(fits_file):\n     # Open the FITS file\n     fits = fitsio.FITS(fits_file, 'r')\n     nhdu = fits[-1].get_extnum()\n-    header = fits[1]. read_header()\n+    prim_hdr = fits[0]. read_header()\n+    ext_hdr  = fits[1]. read_header()\n \n     data.ImgType = create_img_type(\"CALIB\", \"FLAT\", \"LAMP\", \"CALIBRATION\")\n     data.ImgArea = img_stub.imgArea(Name = \"QUADRANT\")\n     data.ImgNumber   = nhdu\n-    data.AxisNumber  = header[\"NAXIS\"]\n-    data.AxisLengths = [header[\"NAXIS1\"], header[\"NAXIS2\"]]\n-    data.DataSize    = header[\"BITPIX\"]\n-    data.DataLength  = header[\"NAXIS1\"] * header[\"NAXIS2\"]\n+    data.AxisNumber  = ext_hdr[\"NAXIS\"]\n+    data.AxisLengths = [ext_hdr[\"NAXIS1\"], ext_hdr[\"NAXIS2\"]]\n+    data.DataSize    = ext_hdr[\"BITPIX\"]\n+    data.DataLength  = ext_hdr[\"NAXIS1\"] * ext_hdr[\"NAXIS2\"]\n     data.ValidityRange = create_validity_range()\n     data.Filter        = vis_filter()\n \n     calib_unit = vis_stub.visLedForFlat()\n-# FIXME with the actual FITS keyword names when they are implemented in VIS_PRNU\n-    if \"LEDID\" in header:\n-      calib_unit.LedId = header[\"LEDID\"]\n-    else:\n-      calib_unit.LedId = UNKNOWN_STRING\n-    if \"FLUENCE\" in header:\n-      calib_unit.Fluence = header[\"FLUENCE\"]\n-    else:\n-      calib_unit.Fluence = UNKNOWN_FLOAT\n-# /FIXME\n+    # fail if keyword absent\n+    calib_unit.LedId   = str( prim_hdr[\"LEDID\"])\n+    calib_unit.Fluence = float( prim_hdr[\"FLUENCE\"])\n     data.CalibUnitLed.append( calib_unit)\n \n     # DataStorage\n@@ -1390,7 +1393,7 @@ def create_validation_requirementresult(requirement_id, requirement_result_passe\n \n     return requirement_result\n \n-def create_analysis_dp(result_passed: bool, aux_file: str, raw_frame_id=None, analysis_id=None, obs_seq_foranalysis=None):\n+def create_analysis_dp(result_passed: bool, aux_file: str, raw_frame_id=None, analysis_id=None, obs_seq_foranalysis=None, analysis_data=None):\n     \"\"\"Create a new DpdVisAnalysisResult data product, normally with an associated tar/zip file.\n     Parameters\n     ----------\n@@ -1439,6 +1442,15 @@ def create_analysis_dp(result_passed: bool, aux_file: str, raw_frame_id=None, an\n     data.InputRawFrameReference.ProductID = raw_frame_id\n     data.InputRawFrameReference.ProductType = \"DpdVisRawFrame\"\n \n+    if analysis_data is not None:\n+       for filename in analysis_data:\n+         analysis_data = vis_stub.visAnalysisData.Factory()\n+         analysis_data.DataContainer = dss_stub.dataContainer.Factory()\n+         analysis_data.DataContainer.FileName = os.path.basename(filename)\n+         analysis_data.DataContainer.filestatus = \"PROPOSED\"\n+         analysis_data.DataContainer.FileType = \"fits\" \n+         data.AnalysisData.append(analysis_data)\n+\n     data_product.Data = data\n     return data_product\n \n@@ -1784,3 +1796,9 @@ def create_DpdVisZeroPoint( file_name: str) ->  viszeropoint_stub.DpdVisZeroPoin\n   dp = viszeropoint_stub.DpdVisZeroPoint()\n   fill_visFileContainer_dp( dp, [file_name])\n   return dp\n+\n+\n+def create_DpdVisGhostModel( file_name: str) ->  visghostmodel_stub.DpdVisGhostModel:\n+  dp = visghostmodel_stub.DpdVisGhostModel()\n+  fill_visFileContainer_dp( dp, [file_name])\n+  return dp\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_Common/python/VIS_Tasks_Common/Modules.py": [
                        [
                            "@@ -172,12 +172,13 @@ def CorrectDark( config, infile, outfile):\n \n     logger.debug( f\"CorrectDark() Output: {outfile}\")\n \n-def CorrectNonLin( config, infile, outfile, quad_name):\n+def CorrectNonLin( config, config_filename, infile, outfile, quad_name):\n \n     workdir = config.get( \"General\", \"workdir\")\n     nlcorr_model = os.path.join( workdir, config.get( \"CalibDataProducts\", \"nlcorr_model\"))\n     non_lin_cor_io.file_layer_entry_point(infile,\n                                           nlcorr_model,\n+                                          config_filename,\n                                           outfile,\n                                           quad_name)\n \n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ],
                        [
                            "@@ -119,7 +119,8 @@ from astropy.io import fits\n \n \n # Euclid specific imports\n-\n+from VIS_ImageTools_M import FlagMap, FPA_quadrant\n+from EL_Lacosmicx import lacosmicx\n # VIS specific imports\n from VIS_SatPixels.SatPixelFlagging import flag_sat_pixels_io\n # DarkCorrection imports\n@@ -131,7 +132,8 @@ from VIS_PRNU import VIS_PRNUCorrection_IO as prnu_cor_io\n import ST_DM_MDBTools.Mdb\n # LargeFlatCalibration imports\n \n-import VIS_CTI_Programs.VIS_calibrate_file_entry_point as cti_io\n+import VIS_CTI_Programs.VIS_calibrate_file_entry_point\n+import VIS_CTI_Programs.VIS_master_ci_file_entry_point\n from   VIS_CTI_Programs import VIS_fit_time_evolution\n from   VIS_CTI_Programs import VIS_correct_cti\n import VIS_LargeFlat.VIS_LargeFlatCalibration_IO.file_entry_point as largeflat_cal_io\n@@ -182,7 +184,7 @@ def CorrectNonLin( config, infile, outfile, quad_name):\n     logger.debug( f\"CorrectNonLin() Output: {outfile}\")\n \n \n-def CalibrateCTI(config, infile, outfile):\n+def CalibrateCTI(config, infile, cti_parallel_output, cti_serial_output):\n \n     workdir = config.get(\"General\", \"workdir\")\n \n@@ -190,15 +192,12 @@ def CalibrateCTI(config, infile, outfile):\n \n     print(infile)\n \n-    output_path = os.path.join(workdir, \"output\") # Will be extended with CCD / Quad Id\n-\n-    print(f\"CTI Calibration Output Path: {output_path}\")\n-\n-    cti_io.file_layer_entry_point(\n-        data_input_files=infile, \n-        master_input_files=None, \n-        outfile=outfile,\n-        output_path=f\"{workdir}/output\", \n+    VIS_CTI_Programs.VIS_calibrate_file_entry_point.file_layer_entry_point(\n+        data_input_files=infile,\n+        master_input_files=None,\n+        cti_parallel_output=cti_parallel_output,\n+        cti_serial_output=cti_serial_output,\n+        output_path=f\"{workdir}/output\",\n     )\n \n     logger.info(\"END CALL CTI\")\n@@ -225,6 +224,23 @@ def TimeEvolutionCTI(config, infile, outfile):\n     logger.info(\"END CALL CTI\")\n \n \n+def Master_CI(config, infile, cti_master_ci):\n+\n+    workdir = config.get(\"General\", \"workdir\")\n+\n+    logger.info(\"START CALL CTI Master CI Pipeline.\")\n+\n+    print(infile)\n+\n+    VIS_CTI_Programs.VIS_master_ci_file_entry_point.file_layer_entry_point(\n+        quad_list_of_lists=infile,\n+        cti_master_ci=cti_master_ci,\n+        output_path=f\"{workdir}\",\n+    )\n+\n+    logger.info(\"END CALL CTI\")\n+\n+\n def CorrectCTI( config, infile, outfile):\n \n     workdir = config.get( \"General\", \"workdir\")\n@@ -253,85 +269,6 @@ def CorrectFlatField( config, infile, outfile):\n \n     logger.debug( f\"CorrectFlatField() Output: {outfile}\")\n \n-\n-def Cosmics(config, quad_name, infile, inflagmap, outfile, outmask, outflagmap):\n-\n-    # Construct the shell command\n-    command = []\n-    command.append('VIS_expandimage')\n-\n-    command.append('--i')\n-    command.append(infile)\n-    expanded_file = infile + '_exp'\n-    command.append('--o')\n-    command.append(expanded_file)\n-\n-    logger.info(f\"VIS_expandimage command: {' '.join( command)}\")\n-    try:\n-        subprocess.run(command, check=True)\n-    except subprocess.CalledProcessError as cpe:\n-        logger.error(f\"Cosmics (1/3) subprocess error code: {cpe}\")\n-        raise\n-\n-    # lacosmicx\n-    # Populate command to spawn from parameters in the corresponding section\n-    # of the config file\n-    command = []\n-    command.append('VIS_Lacosmicx')\n-\n-    command.append('-infile')\n-    command.append(expanded_file)\n-    command.append('-outfile')\n-    command.append(outfile)\n-    command.append('-outmask')\n-    command.append(outmask)\n-    command.append('-sigclip')\n-    command.append(config.get('Cosmics', 'sigclip'))\n-    command.append('-sigfrac')\n-    command.append(config.get('Cosmics', 'sigfrac'))\n-    command.append('-objlim')\n-    command.append(config.get('Cosmics', 'objlim'))\n-    command.append('-gain')\n-    command.append(config.get( \"GainPerQuad\", quad_name))\n-    command.append('-pssl')\n-    command.append(config.get('Cosmics', 'pssl'))\n-    command.append('-readnoise')\n-    command.append(config.get( \"ReadoutNoisePerQuad\", quad_name))\n-    command.append('-satlevel')\n-    command.append(config.get('SaturationPerQuad', quad_name))\n-    command.append('-niter')\n-    command.append(config.get('Cosmics', 'niter'))\n-    if config.get('Cosmics', 'robust') == True:\n-        command.append('-robust')\n-\n-    logger.info(f\"Lacosmicx command: {' '.join( command)}\")\n-    try:\n-        subprocess.run(command, check=True)\n-    except subprocess.CalledProcessError as cpe:\n-        logger.error(f\"Cosmics (2/3) subprocess error code: {cpe}\")\n-        raise\n-\n-    # Populate flagmap creation command\n-    command = []\n-    command.append('VIS_setcosmic')\n-\n-    command.append('--i')\n-    command.append(outmask)\n-    command.append('--p')\n-    command.append(inflagmap)\n-    command.append('--o')\n-    command.append(outflagmap)\n-\n-    logger.info(f\"VIS_setcosmic command: {' '.join( command)}\")\n-    try:\n-        subprocess.run(command, check=True)\n-    except subprocess.CalledProcessError as cpe:\n-        logger.error(f\"Cosmics (3/3) subprocess error code: {cpe}\")\n-        raise\n-\n-    return(True)\n-\n-\n def ExtractSources( workdir, infile, catalog, tmpdir, weight=None, flag=None):\n \n     cmdline  = f\"--workdir {workdir} \"\n@@ -349,7 +286,7 @@ def ExtractSources( workdir, infile, catalog, tmpdir, weight=None, flag=None):\n     VIS_extract_sources.mainMethod( sex_argparser.parse_args( cmdline.split()))\n     return\n \n-def PSFCalibration(config, catalogue, workdir):\n+def PSFCalibration( catalogue, workdir):\n \n     cmdline  = f\"--workdir {workdir} \"\n     cmdline += f\"--catalogue {catalogue}\"\n@@ -479,6 +416,8 @@ def WcsFitCalibration( config, workdir, catalog, star_file, distormodel, plot_di\n     cmdline += f\"--src-cats {' '.join(map(str, catalog))} \"\n     cmdline += f\"--ref-cats {star_file} \"\n     cmdline += f\"--workdir {workdir} \"\n+    if config.has_option( 'CalibDataProducts', 'dist_model'):\n+      cmdline += f\"--init-fpa-model {config.get( 'CalibDataProducts', 'dist_model')} \"\n     cmdline += f\"--output-fpa-model {distormodel} \"\n     cmdline += f\"--order 3 \"\n     cmdline += f\"--target-precision 1 \"\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ],
                        [
                            "@@ -388,7 +388,7 @@ def Calibrate_Astrometry(config, section, workdir, catalog, star_file, distormod\n            logger.error(f\"Astrometry subprocess error code: {cpe}\")\n            raise\n \n-def Wcsfit(config, catalogue, star_file, exp_list, plot_dir=None):\n+def Wcsfit(config, catalogue, star_file, exp_list, exptime, plot_dir=None):\n \n     # Populate command line for runwcsfit module\n     cmdline  = f\"use-fpa-model \"\n@@ -399,7 +399,7 @@ def Wcsfit(config, catalogue, star_file, exp_list, plot_dir=None):\n     cmdline += f\"--target-precision 3 \"\n     cmdline += f\"--niter 3 \"\n     cmdline += f\"--refmagcol VIS \"\n-    cmdline += f\"--refmagmin 18.5 \"\n+    cmdline += f\"--refmagmin {18.5 + 2.5 * np.log10(exptime / 565.0)} \"\n     cmdline += f\"--refmagmax 22.0 \"\n     cmdline += f\"--writeto {' '.join(map(str, exp_list))} {catalogue} \"\n     cmdline += f\"--loglevel debug \"\n",
                            "[ENH]Feature #23191 Astrometric calibration (use-fpa-model): adapt magnitude range selection to exposure duration",
                            "Catherine Grenet",
                            "2023-07-29T12:41:51.000+02:00",
                            "f72b6bb6fa2a29935463bd8c402c3f1ae1927344"
                        ]
                    ],
                    "VIS_Tasks_M/auxdir/VIS_Tasks_M/EUC_VIS_PPR-SC8_00_20210423T163838.815652Z.ini": [
                        [
                            "@@ -127,6 +127,8 @@ ReferenceGain = 3.48\n ;-------------------------------------------------------------------------------\n [CorrectNonLinearity]\n invNLmodel = invNonLinearityModel_Sim_CCD273.txt\n+; When correcting data, model data points (from json file) below this value are not used (ADU).  The value must be >= 0.\n+linear_up_to_adu = 300\n \n \n ;-------------------------------------------------------------------------------\n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ],
                        [
                            "@@ -127,6 +127,8 @@ ReferenceGain = 3.48\n ;-------------------------------------------------------------------------------\n [CorrectNonLinearity]\n invNLmodel = invNonLinearityModel_Sim_CCD273.txt\n+; When correcting data, model data points (from json file) below this value are not used (ADU).  The value must be >= 0.\n+linear_up_to_adu = 300\n \n \n ;-------------------------------------------------------------------------------\n@@ -195,6 +197,8 @@ main_bias_line_end   = 2085\n ;type=str, choices=(\"mean\",\"median\"),\n ;help='Specifies whether to use mean or median when combining the values of a pixel.')\n combine_method=mean\n+;type=float, help=\"Outlier exclusion value which is multiplied by the distribution width to get the thresholds.\"\n+outlier_exclusion_kappa = 4.0\n \n \n ;-------------------------------------------------------------------------------\n@@ -204,6 +208,8 @@ main_bias_col_start  = 2104\n main_bias_col_end    = 2127\n main_bias_line_start = 2070\n main_bias_line_end   = 2085\n+;type=float, help=\"Outlier exclusion value which is multiplied by the distribution width to get the thresholds.\"\n+outlier_exclusion_kappa = 4.0\n \n \n ;-------------------------------------------------------------------------------\n@@ -216,3 +222,14 @@ seuil_distance = 1000\n [SatPixelFlagging]\n bleeding_indice = 3\n \n+\n+;-------------------------------------------------------------------------------\n+[VIS_model_dark]\n+; Kappa value to be used when sigma-kappa clipping cosmic outliers\n+cosmic_exclusion_kappa = 3\n+; If a column has this many bad pixels, it is counted as a bad column.\n+bad_column_threshold = 200\n+; Threshold above which a pixel is defined as a bad hot pixel. Expressed in electrons per second, as defined in #14799-20\n+hot_threshold_per_sec = 0.3\n+; Threshold above which a pixel is defined as a warm pixel. Expressed in electrons per second, as defined in #15878-2\n+warm_threshold_per_sec = 0.00886\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ],
                        [
                            "@@ -127,6 +127,8 @@ ReferenceGain = 3.48\n ;-------------------------------------------------------------------------------\n [CorrectNonLinearity]\n invNLmodel = invNonLinearityModel_Sim_CCD273.txt\n+; When correcting data, model data points (from json file) below this value are not used (ADU).  The value must be >= 0.\n+linear_up_to_adu = 300\n \n \n ;-------------------------------------------------------------------------------\n@@ -231,8 +233,3 @@ bad_column_threshold = 200\n hot_threshold_per_sec = 0.3\n ; Threshold above which a pixel is defined as a warm pixel. Expressed in electrons per second, as defined in #15878-2\n warm_threshold_per_sec = 0.00886\n-\n-;-------------------------------------------------------------------------------\n-[VIS_nonlinearity]\n-; When correcting data, model data points (from json file) below this value are not used (ADU).  The value must be >= 0.\n-correction_lower_limit = 300\n",
                            "Issue 22702: In ini, add linear_up_to_adu, remove correction_lower_limit",
                            "Chris Dolding",
                            "2023-07-27T13:03:35.000+01:00",
                            "cc91e5c2bedc31e3f7034bdfff14ad3c8835f846"
                        ],
                        [
                            "@@ -231,3 +231,8 @@ bad_column_threshold = 200\n hot_threshold_per_sec = 0.3\n ; Threshold above which a pixel is defined as a warm pixel. Expressed in electrons per second, as defined in #15878-2\n warm_threshold_per_sec = 0.00886\n+\n+;-------------------------------------------------------------------------------\n+[VIS_nonlinearity]\n+; When correcting data, model data points (from json file) below this value are not used (ADU).  The value must be >= 0.\n+correction_lower_limit = 300\n",
                            "Issue 22702: Merge VIS_NonLinearity_Flat into VIS_NonLinearity",
                            "Chris Dolding",
                            "2023-07-25T18:00:13.000+01:00",
                            "409a404d40f5c79a4d142196961c619ba50b006d"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_process_quad.py": [
                        [
                            "@@ -140,7 +140,7 @@ def mainMethod(args):\n     # get visible pixel indices\n     xmin, xmax, ymin, ymax = FPA_quadrant.get_quadrant_real_pixels( mef_hdul[1])\n \n-    \n+\n     # get an objects_mask flagmap if one available\n     objmask_cfg_section = f\"object_mask_ObsId-{prim_hdr['OBS_ID']}-PointingId-{prim_hdr['PTGID']}\"\n     objmask_name = None\n@@ -148,7 +148,7 @@ def mainMethod(args):\n       objmask_name = config.get( objmask_cfg_section, \"flagmap_FITS\")\n       flagmap_list.append( os.path.join( DATADIR, objmask_name))\n       logger.info( f\"found {objmask_name} to mask objects in {args.raw_exp_in}\")\n-    \n+\n     for hdu_in in mef_hdul[1:]:\n       # read quadrant extension from MEF\n       quad_dat = hdu_in.data.astype( \"float32\")\n@@ -271,7 +271,7 @@ def mainMethod(args):\n       outfile = out_prefix # eg. /workdir/EUC_VIS_EXP_052929_01.fits\n       logger.info( \"==> Processing \" + os.path.basename( outfile + dot_ext))\n \n-       \n+\n       # Flag saturated pixels\n       if config.has_option('CalibDataProducts', 'saturation_model'):\n         infile = outfile\n@@ -293,8 +293,8 @@ def mainMethod(args):\n           os.remove( infile + dot_ext)\n       else:\n         logger.info( \"### Saturated pixels flagging deactivated in \" + args.config)\n-        \n-    \n+\n+\n     # Correct XTalk\n     # all quadrants of a block must be in the same processing state to correct XTalk\n     if config.has_option('CalibDataProducts', 'xtalk_model'):\n@@ -309,7 +309,7 @@ def mainMethod(args):\n         os.remove( infile + dot_ext)\n     else:\n       logger.info( \"### CrossTalk correction deactivated in \" + args.config)\n-    \n+\n     processed_quad_fits = list()\n     processed_quad_flg_fits = list()\n     outfile_init = outfile\n@@ -349,7 +349,7 @@ def mainMethod(args):\n       if config.has_option('CalibDataProducts', 'nlcorr_model'):\n         infile = outfile\n         outfile = infile + '_nl' # eg. /workdir/EUC_VIS_EXP_052929_01.fits_sa_xt_bs_nl\n-        CorrectNonLin( config, infile + dot_ext, outfile + dot_ext, quad_name)\n+        CorrectNonLin( config, args.config, infile + dot_ext, outfile + dot_ext, quad_name)\n         logger.info( f\"==> CorrectNonLin done on {quad_name} ({iquad+1}/{len( qnames)})\")\n         if rm_tmpfiles:\n           os.remove( infile + dot_ext)\n@@ -381,33 +381,33 @@ def mainMethod(args):\n #        if rm_tmpfiles:\n #          os.remove( infile + dot_ext)\n \n-      # Cosmics      \n-      logger.info(f\"flagmap before Cosmics is : {flg_file}\")      \n-      \n+      # Cosmics\n+      logger.info(f\"flagmap before Cosmics is : {flg_file}\")\n+\n       start_time = time.time()\n       if config.getboolean('General', 'FlagCosmics') == True:\n         infile = outfile\n         # This processing step does not modify the input image\n         # hence, we do directly : outfile = infile\n         outfile = infile\n-        Cosmics( config, quad_name, infile + dot_ext, flg_file + dot_ext)        \n+        Cosmics( config, quad_name, infile + dot_ext, flg_file + dot_ext)\n         outfile = infile\n         logger.info(f\"outfile after Cosmics is : {outfile+dot_ext}\")\n         logger.info(f\"flagmap after Cosmics is : {flg_file+dot_ext}\")\n         logger.info( f\"==> Cosmics flagged in {quad_name} ({iquad+1}/{len( qnames)})\")\n       else:\n         logger.info( \"### Cosmics flagging deactivated in \" + args.config)\n-      \n+\n       end_time = time.time()\n       total_time = end_time - start_time\n       logger.info(f\"Flagging of CR takes {total_time} seconds\")\n-      \n+\n       # Correct Brighter-Fatter\n       if config.has_option('CalibDataProducts', 'bfe_model'):\n         infile = outfile\n         outfile = infile + '_bfe' # eg. /workdir/EUC_VIS_EXP_052929_01.fits_sa_xt_bs_nl_cti_bfe\n-        BrighterFatter_correction(infile + dot_ext, flg_file + dot_ext, \n-                                  bfe_kernels_dict[quad_name], quad_name, config.getfloat( \"GainPerQuad\", quad_name), \n+        BrighterFatter_correction(infile + dot_ext, flg_file + dot_ext,\n+                                  bfe_kernels_dict[quad_name], quad_name, config.getfloat( \"GainPerQuad\", quad_name),\n                                   outfile + dot_ext)\n         logger.info( f\"==> CorrectBFE done on {quad_name} ({iquad+1}/{len( qnames)})\")\n         if rm_tmpfiles:\n@@ -428,7 +428,7 @@ def mainMethod(args):\n           os.remove( infile + dot_ext)\n       else:\n         logger.info( \"### Pre/Overscan pixels removal deactivated in \" + args.config)\n-        \n+\n       # Correct flat field\n       if config.has_option('CalibDataProducts', 'master_flat'):\n         infile = outfile\n",
                            "Merge branch 'release-13.0' into hotfix-23190-wcsfit-flux-rad",
                            "Catherine Grenet",
                            "2023-08-01T16:25:35.000+02:00",
                            "28cbd64c5e24d5653a897f3feb8d736b54c399bb"
                        ],
                        [
                            "@@ -21,6 +21,7 @@ Mar 24, 2016 (CG):\n import argparse\n import ElementsKernel.Logging as log\n \n+import math\n import os\n import configparser\n import numpy as np\n@@ -28,13 +29,14 @@ import shutil\n import json\n import sys\n from astropy.io import fits\n+import time\n \n # Euclid/VIS imports\n from VIS_ImageTools_M import FlagMap, FPA_quadrant, VIS_plot_FPA\n from VIS_Tasks_Common import FromToXML\n-\n+from VIS_Tasks_M.VIS_Cosmics import Cosmics\n from VIS_Tasks_Common.Modules import CorrectDark, CorrectNonLin, \\\n-                                     CorrectCTI, CorrectFlatField, Cosmics\n+                                     CorrectCTI, CorrectFlatField\n from VIS_Bias import VIS_BiasCorrection_IO as bias_cor_io\n from VIS_Gains import VIS_gain_equalisation\n \n@@ -50,6 +52,24 @@ from VIS_XTalk import VIS_XTalk_correction\n from VIS_BrighterFatter.VIS_BrighterFatter_correction import BrighterFatter_correction\n \n \n+################################################################################\n+def init_cd_matrix(plate_scale: float, pixel_size: float, pos_angle:float):\n+    \"\"\"\n+    Computes an initial CD matrix from plate scale (arcsec/um), pixel size (um) and position angle (degrees)\n+\n+    Return\n+    ------\n+    A 2 x 2 numpy array\n+    \"\"\"\n+    pixel_scale_deg = plate_scale * pixel_size / 3600\n+    theta = math.radians(pos_angle + 90.0)\n+    cd = np.zeros((2,2))\n+    cd[0, 0] = - pixel_scale_deg * math.cos(theta)\n+    cd[0, 1] = + pixel_scale_deg * math.sin(theta)\n+    cd[1, 0] = cd[0, 1]\n+    cd[1, 1] = - cd[0, 0]\n+    return cd\n+\n ################################################################################\n \n def defineSpecificProgramOptions():\n@@ -120,14 +140,15 @@ def mainMethod(args):\n     # get visible pixel indices\n     xmin, xmax, ymin, ymax = FPA_quadrant.get_quadrant_real_pixels( mef_hdul[1])\n \n+    \n     # get an objects_mask flagmap if one available\n-    objmask_cfg_section = f\"object_mask_PointingId-{prim_hdr['PTGID']}\"\n+    objmask_cfg_section = f\"object_mask_ObsId-{prim_hdr['OBS_ID']}-PointingId-{prim_hdr['PTGID']}\"\n     objmask_name = None\n     if objmask_cfg_section in config:\n       objmask_name = config.get( objmask_cfg_section, \"flagmap_FITS\")\n       flagmap_list.append( os.path.join( DATADIR, objmask_name))\n       logger.info( f\"found {objmask_name} to mask objects in {args.raw_exp_in}\")\n-\n+    \n     for hdu_in in mef_hdul[1:]:\n       # read quadrant extension from MEF\n       quad_dat = hdu_in.data.astype( \"float32\")\n@@ -155,6 +176,18 @@ def mainMethod(args):\n       quad_hdr[\"RA\"]  = prim_hdr[\"RA\"]\n       quad_hdr[\"DEC\"] = prim_hdr[\"DEC\"]\n       quad_hdr[\"PA\"]  = prim_hdr[\"PA\"]\n+      # Copy RA, DEC to CRVAL1, CRVAL2\n+      quad_hdr[\"CRVAL1\"] = quad_hdr[\"RA\"]\n+      quad_hdr[\"CRVAL2\"] = quad_hdr[\"DEC\"]\n+\n+      # Initialise CD matrix (#21979#note-6)\n+      plate_scale = config.getfloat('MDB', 'SpaceSegment.PLM.TelescopeVISPlatescale')\n+      pixel_size  = config.getfloat('MDB', 'SpaceSegment.Instrument.VIS.VISAveragePixelSizemicron')\n+      cd_matrix = init_cd_matrix(plate_scale, pixel_size, prim_hdr[\"PA\"])\n+      quad_hdr[\"CD1_1\"] = cd_matrix[0, 0]\n+      quad_hdr[\"CD1_2\"] = cd_matrix[0, 1]\n+      quad_hdr[\"CD2_1\"] = cd_matrix[1, 0]\n+      quad_hdr[\"CD2_2\"] = cd_matrix[1, 1]\n \n       # add prescan and overscan keywords if they're missing\n       if \"PRESCANX\" not in quad_hdr:\n@@ -237,8 +270,8 @@ def mainMethod(args):\n       dot_ext = \".\" + FPA_quadrant.quad_name_index( quad_name)\n       outfile = out_prefix # eg. /workdir/EUC_VIS_EXP_052929_01.fits\n       logger.info( \"==> Processing \" + os.path.basename( outfile + dot_ext))\n-      \n-      \n+\n+       \n       # Flag saturated pixels\n       if config.has_option('CalibDataProducts', 'saturation_model'):\n         infile = outfile\n@@ -261,6 +294,7 @@ def mainMethod(args):\n       else:\n         logger.info( \"### Saturated pixels flagging deactivated in \" + args.config)\n         \n+    \n     # Correct XTalk\n     # all quadrants of a block must be in the same processing state to correct XTalk\n     if config.has_option('CalibDataProducts', 'xtalk_model'):\n@@ -275,8 +309,7 @@ def mainMethod(args):\n         os.remove( infile + dot_ext)\n     else:\n       logger.info( \"### CrossTalk correction deactivated in \" + args.config)\n-\n-\n+    \n     processed_quad_fits = list()\n     processed_quad_flg_fits = list()\n     outfile_init = outfile\n@@ -348,11 +381,34 @@ def mainMethod(args):\n #        if rm_tmpfiles:\n #          os.remove( infile + dot_ext)\n \n+      # Cosmics      \n+      logger.info(f\"flagmap before Cosmics is : {flg_file}\")      \n+      \n+      start_time = time.time()\n+      if config.getboolean('General', 'FlagCosmics') == True:\n+        infile = outfile\n+        # This processing step does not modify the input image\n+        # hence, we do directly : outfile = infile\n+        outfile = infile\n+        Cosmics( config, quad_name, infile + dot_ext, flg_file + dot_ext)        \n+        outfile = infile\n+        logger.info(f\"outfile after Cosmics is : {outfile+dot_ext}\")\n+        logger.info(f\"flagmap after Cosmics is : {flg_file+dot_ext}\")\n+        logger.info( f\"==> Cosmics flagged in {quad_name} ({iquad+1}/{len( qnames)})\")\n+      else:\n+        logger.info( \"### Cosmics flagging deactivated in \" + args.config)\n+      \n+      end_time = time.time()\n+      total_time = end_time - start_time\n+      logger.info(f\"Flagging of CR takes {total_time} seconds\")\n+      \n       # Correct Brighter-Fatter\n       if config.has_option('CalibDataProducts', 'bfe_model'):\n         infile = outfile\n         outfile = infile + '_bfe' # eg. /workdir/EUC_VIS_EXP_052929_01.fits_sa_xt_bs_nl_cti_bfe\n-        BrighterFatter_correction(infile + dot_ext, bfe_kernels_dict[quad_name], quad_name, config.getfloat( \"GainPerQuad\", quad_name), outfile + dot_ext)\n+        BrighterFatter_correction(infile + dot_ext, flg_file + dot_ext, \n+                                  bfe_kernels_dict[quad_name], quad_name, config.getfloat( \"GainPerQuad\", quad_name), \n+                                  outfile + dot_ext)\n         logger.info( f\"==> CorrectBFE done on {quad_name} ({iquad+1}/{len( qnames)})\")\n         if rm_tmpfiles:\n           logger.info(\"remove\")\n@@ -361,7 +417,7 @@ def mainMethod(args):\n         logger.info( \"### BrighterFatter correction deactivated in \" + args.config)\n \n       # Remove pre/overscan pixels from data and flagmap quadrant FITS files\n-      # (because master flat field does not have them)\n+      # (because master flat field does not have them) and because we need the pre/overscan removed when we enter VIS_gather_ccd\n       if config.getboolean('General', 'RemovePreOverscan') == True:\n         infile = outfile\n         outfile = infile + '_por' # eg. /workdir/EUC_VIS_EXP_052929_01.fits_sa_xt_bs_nl_cti_bfe_por\n@@ -372,7 +428,7 @@ def mainMethod(args):\n           os.remove( infile + dot_ext)\n       else:\n         logger.info( \"### Pre/Overscan pixels removal deactivated in \" + args.config)\n-\n+        \n       # Correct flat field\n       if config.has_option('CalibDataProducts', 'master_flat'):\n         infile = outfile\n@@ -384,31 +440,14 @@ def mainMethod(args):\n       else:\n         logger.info( \"### Flatfield correction deactivated in \" + args.config)\n \n-      # Cosmics\n-      if config.getboolean('General', 'FlagCosmics') == True:\n+      # Equalise gains, now optional because of the calibration pipelines\n+      if config.has_section('GainEqualisation'):\n         infile = outfile\n-        # This processing step does not modify the input image\n-        # infile + '_cmx' is an output of lacosmicx which is not used in\n-        # the rest of the processing\n-        outmask = infile + '_cmxmsk'\n-        Cosmics( config, quad_name, infile + dot_ext, flg_file + dot_ext,\n-                 infile + '_cmx' + dot_ext, outmask + dot_ext, flg_file + dot_ext)\n-        logger.info( f\"==> Cosmics flagged in {quad_name} ({iquad+1}/{len( qnames)})\")\n+        outfile = infile + '_ge' # eg. /workdir/EUC_VIS_EXP_052929_01.fits_sa_xt_bs\n+        VIS_gain_equalisation.gain_equalisation_fits( config, infile + dot_ext, outfile + dot_ext)\n+        # 'done' logger message is produced by gain_equalisation_fits() with more informations\n         if rm_tmpfiles:\n-          os.remove( infile + dot_ext + \"_exp\") # hidden temporary file\n-          os.remove( infile + '_cmx' + dot_ext)\n-          os.remove( outmask + dot_ext)\n-      else:\n-        logger.info( \"### Cosmics flagging deactivated in \" + args.config)\n-\n-      # Equalise gains, now optional because of the calibration pipelines\n-      #if config.has_section('GainEqualisation'):\n-      #  infile = outfile\n-      #  outfile = infile + '_ge' # eg. /workdir/EUC_VIS_EXP_052929_01.fits_sa_xt_bs\n-      #  VIS_gain_equalisation.gain_equalisation_fits( config, infile + dot_ext, outfile + dot_ext)\n-      #  # 'done' logger message is produced by gain_equalisation_fits() with more informations\n-      #  if rm_tmpfiles:\n-      #    os.remove( infile + dot_ext)\n+          os.remove( infile + dot_ext)\n \n       # Add output quadrant filename to the list of output quadrants\n       processed_quad_fits.append( os.path.basename(outfile + dot_ext))\n@@ -426,4 +465,3 @@ def mainMethod(args):\n   logger.info('#')\n   logger.info('# Exiting %s mainMethod()' % __name__)\n   logger.info('#')\n-\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_cti_xml_out.py": [
                        [
                            "@@ -181,7 +181,7 @@ def mainMethod( args):\n \r\n     for key in dq_key_list:\r\n \r\n-      file = os.path.join(args.workdir, cti_result[key])\r\n+      file = os.path.join(args.workdir, \"data\", cti_result[key])\r\n \r\n       if cti_result[\"IsParallel\"]:\r\n         parallel_dq_file_list.append(file)\r\n",
                            "added data to DQ file path",
                            "James Nightingale",
                            "2023-08-01T14:32:40.000+01:00",
                            "92e051546f2a3e652ddb157ad8ad642b6e71e175"
                        ],
                        [
                            "@@ -181,10 +181,12 @@ def mainMethod( args):\n \r\n     for key in dq_key_list:\r\n \r\n+      file = os.path.join(args.workdir, cti_result[key])\r\n+\r\n       if cti_result[\"IsParallel\"]:\r\n-        parallel_dq_file_list.append(cti_result[key])\r\n+        parallel_dq_file_list.append(file)\r\n       else:\r\n-        serial_dq_file_list.append(cti_result[key])\r\n+        serial_dq_file_list.append(file)\r\n \r\n   ##### PARALLEL #####\r\n \r\n@@ -215,7 +217,7 @@ def mainMethod( args):\n                                                              type_name=\"QC-PLOTS-CTI-PARALLEL\",\r\n                                                              instance_id='',\r\n                                                              extension='.tar.gz')\r\n-  print(parallel_dq_file_list)\r\n+\r\n   write_tar_zip(parallel_dq_file_list, os.path.join(args.workdir, \"data\", parallel_dq_file))\r\n   add_quality_parameter_file(data_product, parallel_dq_file)\r\n \r\n",
                            "full path to each DQ file that goes in zip",
                            "James Nightingale",
                            "2023-08-01T14:30:37.000+01:00",
                            "eaee002f17e55d1e2385f0b5dc1552ff9fd6134d"
                        ],
                        [
                            "@@ -215,7 +215,7 @@ def mainMethod( args):\n                                                              type_name=\"QC-PLOTS-CTI-PARALLEL\",\r\n                                                              instance_id='',\r\n                                                              extension='.tar.gz')\r\n-\r\n+  print(parallel_dq_file_list)\r\n   write_tar_zip(parallel_dq_file_list, os.path.join(args.workdir, \"data\", parallel_dq_file))\r\n   add_quality_parameter_file(data_product, parallel_dq_file)\r\n \r\n",
                            "print statement to bebug why tar of dq fiels doesnt work",
                            "James Nightingale",
                            "2023-08-01T14:27:28.000+01:00",
                            "76818df9e98e42ab028ebb49f94e1a8ffebd85e6"
                        ],
                        [
                            "@@ -155,7 +155,7 @@ def mainMethod( args):\n \r\n     fit.CovarianceMatrix = create_data_container(cti_result[\"CovarianceMatrix\"])\r\n \r\n-    fit.ExtractedEPERs = create_data_container(cti_result[\"ExtractedEPERs\"])\r\n+    fit.ExtractedEPERs = create_data_container(str(cti_result[\"ExtractedEPERs\"]))\r\n \r\n     fit.TotalTraps = cti_result[\"TotalTraps\"]\r\n     fit.TrapType = cti_result[\"TrapType\"]\r\n",
                            "ExtractedEPERs is converted to string as int not compatible",
                            "James Nightingale",
                            "2023-08-01T14:24:18.000+01:00",
                            "ba11d291ddb9f506edcccaf87fd6fa3765a57602"
                        ],
                        [
                            "@@ -16,9 +16,8 @@ from typing import Union\n from ST_DM_FilenameProvider.FilenameProvider import FileNameProvider\r\n from ST_DataModelBindings.pro import vis_stub\r\n from ST_DM_DmUtils.DmUtils import create_data_container, save_product_metadata\r\n-from VIS_Tasks_Common.FromToXML import vis_generic_header, UNKNOWN_STRING, add_quality_parameter_file\r\n+from VIS_Tasks_Common.FromToXML import create_validity_range, vis_generic_header, UNKNOWN_STRING, add_quality_parameter_file\r\n \r\n-from VIS_Tasks_Common import FromToXML\r\n from VIS_PyLibrary_Common.zip_tools import tar_zip_files\r\n from VIS_PyLibrary_Common import pipe_tools\r\n \r\n@@ -82,8 +81,6 @@ def mainMethod( args):\n   # {\"MultiNestZip\": \"/sps/euclid/Users/jnightin/workspaces/ctical/ppo_root/workdir//output/2022-10-13T11:37:14.399Z_CCD6-4/parallel[x1]/2f929b8acbe296cfb1102229221a7438.zip\",\r\n   # {\"ModelInfo\": \"/sps/euclid/Users/jnightin/workspaces/ctical/ppo_root/workdir//output/2022-10-13T11:37:14.399Z_CCD6-4/parallel[x1]/2f929b8acbe296cfb1102229221a7438/model.info\"}\r\n \r\n-#  cti_per_ccd = FromToXML.load_list_from_file( args.calibrate_cti_results_list)\r\n-\r\n   with open(args.calibrate_cti_results_list, \"r\") as f:\r\n     cti_per_ccd_list = json.load(f)\r\n \r\n@@ -146,7 +143,10 @@ def mainMethod( args):\n     fit.SearchPickle = create_data_container(cti_result[\"SearchPickle\"])\r\n     fit.ModelPickle = create_data_container(cti_result[\"ModelPickle\"])\r\n     fit.ModelInfo = create_data_container(cti_result[\"ModelInfo\"])\r\n-    fit.Model = create_data_container(cti_result[\"Model\"])\r\n+    try:\r\n+      fit.Model = create_data_container(cti_result[\"Model\"])\r\n+    except KeyError:\r\n+      fit.Model = create_data_container(cti_result[\"ModelResults\"])\r\n \r\n     fit.ModelResults = create_data_container(cti_result[\"ModelResults\"])\r\n     fit.SearchInfo = create_data_container(cti_result[\"SearchInfo\"])\r\n@@ -155,8 +155,7 @@ def mainMethod( args):\n \r\n     fit.CovarianceMatrix = create_data_container(cti_result[\"CovarianceMatrix\"])\r\n \r\n-    # fit.ExtractedEPERs = create_data_container(cti_result[\"ExtractedEPERs\"])\r\n-    fit.ExtractedEPERs = create_data_container(\"placeholder.json\")\r\n+    fit.ExtractedEPERs = create_data_container(cti_result[\"ExtractedEPERs\"])\r\n \r\n     fit.TotalTraps = cti_result[\"TotalTraps\"]\r\n     fit.TrapType = cti_result[\"TrapType\"]\r\n@@ -171,6 +170,22 @@ def mainMethod( args):\n     else:\r\n       serial_fit_list.append(fit)\r\n \r\n+  ##### DQ FILES #####\r\n+\r\n+  parallel_dq_file_list = []\r\n+  serial_dq_file_list = []\r\n+\r\n+  for cti_result in cti_result_list:\r\n+\r\n+    dq_key_list = [key for key in cti_result.keys() if key.startswith(\"DQ\")]\r\n+\r\n+    for key in dq_key_list:\r\n+\r\n+      if cti_result[\"IsParallel\"]:\r\n+        parallel_dq_file_list.append(cti_result[key])\r\n+      else:\r\n+        serial_dq_file_list.append(cti_result[key])\r\n+\r\n   ##### PARALLEL #####\r\n \r\n   # Create the data product\r\n@@ -181,7 +196,7 @@ def mainMethod( args):\n \r\n   # Create the Data\r\n   data = vis_stub.visCTICalibrationResults.Factory()\r\n-  data.ValidityRange = FromToXML.create_validity_range()\r\n+  data.ValidityRange = create_validity_range()\r\n   data.DateRange = date_range\r\n   data.PreviousCTIModelsUsedID = \"0\"\r\n \r\n@@ -201,7 +216,7 @@ def mainMethod( args):\n                                                              instance_id='',\r\n                                                              extension='.tar.gz')\r\n \r\n-  write_tar_zip(qc_stats_paths, os.path.join(args.workdir, \"data\", parallel_dq_file))\r\n+  write_tar_zip(parallel_dq_file_list, os.path.join(args.workdir, \"data\", parallel_dq_file))\r\n   add_quality_parameter_file(data_product, parallel_dq_file)\r\n \r\n   dqc_params_dm = vis_stub.visDqcParams.Factory()\r\n@@ -222,7 +237,7 @@ def mainMethod( args):\n \r\n   # Create the Data\r\n   data = vis_stub.visCTICalibrationResults.Factory()\r\n-  data.ValidityRange = FromToXML.create_validity_range()\r\n+  data.ValidityRange = create_validity_range()\r\n   data.DateRange = date_range\r\n   data.PreviousCTIModelsUsedID = \"0\"\r\n \r\n@@ -241,6 +256,7 @@ def mainMethod( args):\n                                                              type_name=\"QC-PLOTS-CTI-SERIAL\",\r\n                                                              instance_id='',\r\n                                                              extension='.tar.gz')\r\n+  write_tar_zip(serial_dq_file_list, os.path.join(args.workdir, \"data\", serial_dq_file))\r\n   add_quality_parameter_file(data_product, serial_dq_file)\r\n   \r\n   dqc_params_dm = vis_stub.visDqcParams.Factory()\r\n",
                            "update VIS_cti_xml_out task with DQ zip file",
                            "James Nightingale",
                            "2023-08-01T14:20:53.000+01:00",
                            "d13c37f35cf947b2673d069fef9b79dcfc86603b"
                        ],
                        [
                            "@@ -7,24 +7,19 @@\n #Standard library imports\r\n import argparse\r\n import os\r\n-import shutil\r\n import json\r\n-import tarfile\r\n-import time\r\n-\r\n-from types import SimpleNamespace as Namespace\r\n+from pathlib import Path\r\n+from typing import Union\r\n \r\n \r\n # Euclid specific imports\r\n from ST_DM_FilenameProvider.FilenameProvider import FileNameProvider\r\n-from ST_DM_DmUtils import DmUtils\r\n-from ST_DataModelBindings.dpd.vis import visctimodel_stub\r\n from ST_DataModelBindings.pro import vis_stub\r\n-import ST_DataModelBindings.ins_stub as ins_dict\r\n from ST_DM_DmUtils.DmUtils import create_data_container, save_product_metadata\r\n-from VIS_Tasks_Common.FromToXML import vis_generic_header, UNKNOWN_STRING\r\n+from VIS_Tasks_Common.FromToXML import vis_generic_header, UNKNOWN_STRING, add_quality_parameter_file\r\n \r\n from VIS_Tasks_Common import FromToXML\r\n+from VIS_PyLibrary_Common.zip_tools import tar_zip_files\r\n from VIS_PyLibrary_Common import pipe_tools\r\n \r\n import ElementsKernel.Logging\r\n@@ -48,6 +43,10 @@ def defineSpecificProgramOptions():\n \r\n ################################################################################\r\n \r\n+def write_tar_zip(in_files: list[Union[Path, str]], out_file: Path) -> None:\r\n+  tar_zip_files(\" \".join(map(str, in_files)), str(out_file), False)\r\n+\r\n+\r\n def mainMethod( args):\r\n \r\n   logger.info( '#')\r\n@@ -68,11 +67,11 @@ def mainMethod( args):\n   \r\n   # TODO : Need to check if type_name is a good name or not\r\n   \r\n-  datafile_out = FileNameProvider().get_allowed_filename( processing_function='VIS',\r\n-                                                          type_name          =\"PREFIX-CTI\",\r\n-                                                          instance_id        ='',\r\n-                                                          extension          ='.json')\r\n-  datafile_out = os.path.join( args.workdir, \"data\", datafile_out)\r\n+  # datafile_out = FileNameProvider().get_allowed_filename( processing_function='VIS',\r\n+  #                                                         type_name          =\"CTI\",\r\n+  #                                                         instance_id        ='',\r\n+  #                                                         extension          ='.json')\r\n+  # datafile_out = os.path.join( args.workdir, \"data\", datafile_out)\r\n   \r\n   # concatenate the CTI models in datafile_out\r\n \r\n@@ -132,6 +131,9 @@ def mainMethod( args):\n   # This loop iterates over all results, creates a visCTIModelFitData() object for each\r\n   # and then stores in them data.Fits at the end.\r\n \r\n+  dq_parallel_file_list = []\r\n+  dq_serial_file_list = []\r\n+\r\n   for cti_result in cti_result_list:\r\n     fit = vis_stub.visCTIModelFitData()\r\n \r\n@@ -169,7 +171,6 @@ def mainMethod( args):\n     else:\r\n       serial_fit_list.append(fit)\r\n \r\n-\r\n   ##### PARALLEL #####\r\n \r\n   # Create the data product\r\n@@ -193,15 +194,23 @@ def mainMethod( args):\n   data_product.Data = data\r\n \r\n   # Need to add all .png files contained in cti_result_list to these objects as a .tar\r\n-  qualPramStorage = vis_stub.visQualityParameterStorageFitsFile()\r\n+ # qualPramStorage = vis_stub.visQualityParameterStorageFitsFile()\r\n+\r\n+  parallel_dq_file = FileNameProvider().get_allowed_filename(processing_function='VIS',\r\n+                                                             type_name=\"QC-PLOTS-CTI-PARALLEL\",\r\n+                                                             instance_id='',\r\n+                                                             extension='.tar.gz')\r\n+\r\n+  write_tar_zip(qc_stats_paths, os.path.join(args.workdir, \"data\", parallel_dq_file))\r\n+  add_quality_parameter_file(data_product, parallel_dq_file)\r\n+\r\n   dqc_params_dm = vis_stub.visDqcParams.Factory()\r\n \r\n-  data_product.QualityParameterStorage = qualPramStorage\r\n   data_product.QualityParams = dqc_params_dm\r\n \r\n-  # Output to XML^M                                                                                   \n-\n-  DmUtils.save_product_metadata(data_product, args.parallel_cti_xml_out)\n+  # Output to XML^M                                                                                   \r\n+\r\n+  DmUtils.save_product_metadata(data_product, args.parallel_cti_xml_out)\r\n \r\n   ##### SERIAL #####\r\n \r\n@@ -226,16 +235,23 @@ def mainMethod( args):\n   data_product.Data = data\r\n \r\n   # Need to add all .png files contained in cti_result_list to these objects as a .tar\r\n-  qualPramStorage = vis_stub.visQualityParameterStorageFitsFile()\r\n+  # qualPramStorage = vis_stub.visQualityParameterStorageFitsFile()\r\n+  \r\n+  serial_dq_file = FileNameProvider().get_allowed_filename(processing_function='VIS',\r\n+                                                             type_name=\"QC-PLOTS-CTI-SERIAL\",\r\n+                                                             instance_id='',\r\n+                                                             extension='.tar.gz')\r\n+  add_quality_parameter_file(data_product, serial_dq_file)\r\n+  \r\n   dqc_params_dm = vis_stub.visDqcParams.Factory()\r\n \r\n-  data_product.QualityParameterStorage = qualPramStorage\r\n+#  data_product.QualityParameterStorage = qualPramStorage\r\n   data_product.QualityParams = dqc_params_dm\r\n \r\n   # Output to XML\r\n \r\n   DmUtils.save_product_metadata(data_product, args.serial_cti_xml_out)\r\n-\n+\r\n \r\n   logger.info( \"#\")\r\n   logger.info( \"# Exiting %s mainMethod()\" % __name__)\r\n",
                            "updates to vis_cti_xml_out to include .zip files",
                            "James Nightingale",
                            "2023-07-31T15:07:48.000+01:00",
                            "819d493c23becb1260dbd7b5602d8bd0597c2d30"
                        ],
                        [
                            "@@ -199,7 +199,9 @@ def mainMethod( args):\n   data_product.QualityParameterStorage = qualPramStorage\r\n   data_product.QualityParams = dqc_params_dm\r\n \r\n-\r\n+  # Output to XML^M                                                                                   \n+\n+  DmUtils.save_product_metadata(data_product, args.parallel_cti_xml_out)\n \r\n   ##### SERIAL #####\r\n \r\n@@ -230,12 +232,8 @@ def mainMethod( args):\n   data_product.QualityParameterStorage = qualPramStorage\r\n   data_product.QualityParams = dqc_params_dm\r\n \r\n-\r\n-\r\n-\r\n   # Output to XML\r\n \r\n-  DmUtils.save_product_metadata(data_product, args.parallel_cti_xml_out)\r\n   DmUtils.save_product_metadata(data_product, args.serial_cti_xml_out)\r\n \n \r\n",
                            "fix data product output in VIS_cti_xml_out",
                            "James Nightingale",
                            "2023-07-28T16:09:16.000+02:00",
                            "8ec483b98e16563fbb0261bf34b085ce7218cc2a"
                        ],
                        [
                            "@@ -98,6 +98,7 @@ def mainMethod( args):\n           cti_result = json.load(f)\r\n           cti_result_list.append(cti_result)\r\n \r\n+\r\n   logger.info( f\"reading {len( cti_per_ccd_list)} CCD CTI calibration files\")\r\n \r\n   # cti_out = dict()\r\n@@ -236,6 +237,7 @@ def mainMethod( args):\n \r\n   DmUtils.save_product_metadata(data_product, args.parallel_cti_xml_out)\r\n   DmUtils.save_product_metadata(data_product, args.serial_cti_xml_out)\r\n+\n \r\n   logger.info( \"#\")\r\n   logger.info( \"# Exiting %s mainMethod()\" % __name__)\r\n",
                            "Merge branch 'cti_xml_out' of https://gitlab.euclid-sgs.uk/PF-VIS/VIS_Tasks into cti_xml_out",
                            "James Nightingale",
                            "2023-07-27T15:54:35.000+01:00",
                            "6092e2b722f8f8004bd604b708ac50f04d015272"
                        ],
                        [
                            "@@ -136,8 +136,8 @@ def mainMethod( args):\n \r\n     fit.ValidityRange = date_range\r\n     fit.DateRange = date_range\r\n-    fit.DetectorId = cti_result[\"DetectorID\"]\r\n-    #   fit.DetectorId = cti_result[\"DetectorID\"] # Need to update this to each Detector\r\n+    fit.DetectorId = cti_result[\"DetectorId\"]\r\n+    #   fit.DetectorId = cti_result[\"DetectorId\"] # Need to update this to each Detector\r\n \r\n     fit.FitMetaData = create_data_container(cti_result[\"FitMetaData\"])\r\n     fit.SearchPickle = create_data_container(cti_result[\"SearchPickle\"])\r\n",
                            "DetectorID result key to DetectorId",
                            "James Nightingale",
                            "2023-07-27T15:54:29.000+01:00",
                            "f0801a3b6fcf8db0be3ff306dc71d64bc065f3c5"
                        ],
                        [
                            "@@ -1,5 +1,5 @@\n \"\"\"\r\n-@file: python/Tasks/VIS_cti_xml_out.py\r\n+@file: python/Tasks/VIS_parallel_cti_xml_out.py\r\n @author: user\r\n @date: 21/02/2023\r\n \"\"\"\r\n@@ -42,7 +42,8 @@ def defineSpecificProgramOptions():\n     parser.add_argument('--config',                                      help='configuration file path')\r\n     parser.add_argument( '--calibrate_cti_results_list', required=True,  help='Path to the CTI calibration results json file')\r\n     # outputs\r\n-    parser.add_argument( '--cti_xml_out',                required=True,  help='output CTI results xml filename')\r\n+    parser.add_argument( '--parallel_cti_xml_out',                required=True,  help='output parallel CTI results xml filename')\r\n+    parser.add_argument( '--serial_cti_xml_out',                required=True,  help='output serial CTI results xml filename')\r\n     return parser\r\n \r\n ################################################################################\r\n@@ -57,10 +58,10 @@ def mainMethod( args):\n   \r\n   # Create workdir folders for XML files if not present:\r\n   \r\n-  if not os.path.isabs( args.cti_xml_out):\r\n-    args.cti_xml_out = os.path.join( args.workdir, args.cti_xml_out)\r\n+  if not os.path.isabs( args.parallel_cti_xml_out):\r\n+    args.parallel_cti_xml_out = os.path.join( args.workdir, args.parallel_cti_xml_out)\r\n \r\n-  out_dir = os.path.split(args.cti_xml_out )[0]\r\n+  out_dir = os.path.split(args.parallel_cti_xml_out )[0]\r\n   os.makedirs(out_dir, exist_ok=True)\r\n \r\n   # get an Euclid compliant filename to store XML\r\n@@ -115,26 +116,15 @@ def mainMethod( args):\n   from ST_DataModelBindings.dpd.vis import viscticalibrationresults_stub\r\n   import ST_DataModelBindings.ins_stub as ins_dict\r\n \r\n-  # Create the data product\r\n-  data_product = viscticalibrationresults_stub.DpdVisCTICalibrationResults()\r\n-\r\n-  # Add Header\r\n-  data_product.Header = vis_generic_header(\"DpdVisCTICalibrationResults\", UNKNOWN_STRING)\r\n-\r\n   # Create the date range\r\n   date_range = ins_dict.calibrationValidPeriod()\r\n   date_range.TimestampStart = \"2023-02-21T00:00:00.000Z\"\r\n   date_range.TimestampEnd = \"2023-02-22T00:00:00.000Z\"\r\n \r\n-  # Create the Data\r\n-  data = vis_stub.visCTICalibrationResults.Factory()\r\n-  data.ValidityRange = FromToXML.create_validity_range()\r\n-  data.DateRange = date_range\r\n-  data.PreviousCTIModelsUsedID = \"0\"\r\n-  data.FitID = \"234\"\r\n \r\n   # Create a CTI model fit entry\r\n-  fit_list = []\r\n+  parallel_fit_list = []\r\n+  serial_fit_list = []\r\n \r\n   # The cti_result_list contains the results of all 72 CTI calibrations performed in this pipeline\r\n   # run (36 x parallel CTI, 36 x serial CTI).\r\n@@ -147,25 +137,21 @@ def mainMethod( args):\n \r\n     fit.ValidityRange = date_range\r\n     fit.DateRange = date_range\r\n-    fit.DetectorId = \"1-1\"\r\n+    fit.DetectorId = cti_result[\"DetectorID\"]\r\n     #   fit.DetectorId = cti_result[\"DetectorID\"] # Need to update this to each Detector\r\n \r\n     fit.FitMetaData = create_data_container(cti_result[\"FitMetaData\"])\r\n     fit.SearchPickle = create_data_container(cti_result[\"SearchPickle\"])\r\n     fit.ModelPickle = create_data_container(cti_result[\"ModelPickle\"])\r\n     fit.ModelInfo = create_data_container(cti_result[\"ModelInfo\"])\r\n-    # fit.Model = create_data_container(cti_result[\"Model\"])\r\n-    fit.Model = create_data_container(\"placeholder.json\")\r\n+    fit.Model = create_data_container(cti_result[\"Model\"])\r\n \r\n     fit.ModelResults = create_data_container(cti_result[\"ModelResults\"])\r\n-    # fit.SearchInfo = create_data_container(cti_result[\"SearchInfo\"])\r\n-    fit.SearchInfo = create_data_container(\"placeholder.json\")\r\n+    fit.SearchInfo = create_data_container(cti_result[\"SearchInfo\"])\r\n \r\n-    # fit.MaxLikelihoodInstance = create_data_container(cti_result[\"MaxLikelihoodInstance\"])\r\n-    fit.MaxLikelihoodInstance = create_data_container(\"placeholder.json\")\r\n+    fit.MaxLikelihoodInstance = create_data_container(cti_result[\"MaxLikelihoodInstance\"])\r\n \r\n-    # fit.CovarianceMatrix = create_data_container(cti_result[\"CovarianceMatrix\"])\r\n-    fit.CovarianceMatrix = create_data_container(\"placeholder.json\")\r\n+    fit.CovarianceMatrix = create_data_container(cti_result[\"CovarianceMatrix\"])\r\n \r\n     # fit.ExtractedEPERs = create_data_container(cti_result[\"ExtractedEPERs\"])\r\n     fit.ExtractedEPERs = create_data_container(\"placeholder.json\")\r\n@@ -178,10 +164,61 @@ def mainMethod( args):\n     fit.IsraelDeltaEllipticity = cti_result[\"IsraelDeltaEllipticity\"]\r\n     fit.TimeFromZero = cti_result[\"TimeFromZero\"]\r\n \r\n-    fit_list.append(fit)\r\n+    if cti_result[\"IsParallel\"]:\r\n+      parallel_fit_list.append(fit)\r\n+    else:\r\n+      serial_fit_list.append(fit)\r\n+\r\n+\r\n+  ##### PARALLEL #####\r\n+\r\n+  # Create the data product\r\n+  data_product = viscticalibrationresults_stub.DpdVisCTICalibrationResults()\r\n+\r\n+  # Add Header\r\n+  data_product.Header = vis_generic_header(\"DpdVisCTICalibrationResults\", UNKNOWN_STRING)\r\n+\r\n+  # Create the Data\r\n+  data = vis_stub.visCTICalibrationResults.Factory()\r\n+  data.ValidityRange = FromToXML.create_validity_range()\r\n+  data.DateRange = date_range\r\n+  data.PreviousCTIModelsUsedID = \"0\"\r\n+\r\n+  data.FitID = \"Par_Hello\"\r\n+\r\n+  # Add fit to data\r\n+  data.Fits = parallel_fit_list\r\n+\r\n+  # Add data to data product\r\n+  data_product.Data = data\r\n+\r\n+  # Need to add all .png files contained in cti_result_list to these objects as a .tar\r\n+  qualPramStorage = vis_stub.visQualityParameterStorageFitsFile()\r\n+  dqc_params_dm = vis_stub.visDqcParams.Factory()\r\n+\r\n+  data_product.QualityParameterStorage = qualPramStorage\r\n+  data_product.QualityParams = dqc_params_dm\r\n+\r\n+\r\n+\r\n+  ##### SERIAL #####\r\n+\r\n+  # Create the data product\r\n+  data_product = viscticalibrationresults_stub.DpdVisCTICalibrationResults()\r\n+\r\n+  # Add Header\r\n+  data_product.Header = vis_generic_header(\"DpdVisCTICalibrationResults\", UNKNOWN_STRING)\r\n+\r\n+  # Create the Data\r\n+  data = vis_stub.visCTICalibrationResults.Factory()\r\n+  data.ValidityRange = FromToXML.create_validity_range()\r\n+  data.DateRange = date_range\r\n+  data.PreviousCTIModelsUsedID = \"0\"\r\n+\r\n+  data.FitID = \"Ser_Hello\"\r\n \r\n   # Add fit to data\r\n-  data.Fits = fit_list\r\n+  data.Fits = serial_fit_list\r\n \r\n   # Add data to data product\r\n   data_product.Data = data\r\n@@ -193,8 +230,14 @@ def mainMethod( args):\n   data_product.QualityParameterStorage = qualPramStorage\r\n   data_product.QualityParams = dqc_params_dm\r\n \r\n+\r\n+\r\n+\r\n   # Output to XML\r\n-  DmUtils.save_product_metadata(data_product, args.cti_xml_out)\r\n+\r\n+  DmUtils.save_product_metadata(data_product, args.parallel_cti_xml_out)\r\n+  DmUtils.save_product_metadata(data_product, args.serial_cti_xml_out)\r\n+\n \r\n   logger.info( \"#\")\r\n   logger.info( \"# Exiting %s mainMethod()\" % __name__)\r\n",
                            "conflict resolved",
                            "James Nightingale",
                            "2023-07-27T16:29:03.000+02:00",
                            "ccb6df51d3565f86bce27bcdec0181999bbaf989"
                        ],
                        [
                            "@@ -97,6 +97,7 @@ def mainMethod( args):\n           cti_result = json.load(f)\r\n           cti_result_list.append(cti_result)\r\n \r\n+\r\n   logger.info( f\"reading {len( cti_per_ccd_list)} CCD CTI calibration files\")\r\n \r\n   # cti_out = dict()\r\n@@ -193,8 +194,7 @@ def mainMethod( args):\n   data_product.QualityParams = dqc_params_dm\r\n \r\n   # Output to XML\r\n-  cti_xml_out = \"cti.xml\"\r\n-  DmUtils.save_product_metadata(data_product, cti_xml_out)\r\n+  DmUtils.save_product_metadata(data_product, args.cti_xml_out)\r\n \r\n   logger.info( \"#\")\r\n   logger.info( \"# Exiting %s mainMethod()\" % __name__)\r\n",
                            "minor edits to xml out for debugging",
                            "James Nightingale",
                            "2023-07-27T16:28:30.000+02:00",
                            "91901bddb928b637529557f9fff04197072ea3e0"
                        ],
                        [
                            "@@ -1,5 +1,5 @@\n \"\"\"\r\n-@file: python/Tasks/VIS_cti_xml_out.py\r\n+@file: python/Tasks/VIS_parallel_cti_xml_out.py\r\n @author: user\r\n @date: 21/02/2023\r\n \"\"\"\r\n@@ -42,7 +42,8 @@ def defineSpecificProgramOptions():\n     parser.add_argument('--config',                                      help='configuration file path')\r\n     parser.add_argument( '--calibrate_cti_results_list', required=True,  help='Path to the CTI calibration results json file')\r\n     # outputs\r\n-    parser.add_argument( '--cti_xml_out',                required=True,  help='output CTI results xml filename')\r\n+    parser.add_argument( '--parallel_cti_xml_out',                required=True,  help='output parallel CTI results xml filename')\r\n+    parser.add_argument( '--serial_cti_xml_out',                required=True,  help='output serial CTI results xml filename')\r\n     return parser\r\n \r\n ################################################################################\r\n@@ -57,10 +58,10 @@ def mainMethod( args):\n   \r\n   # Create workdir folders for XML files if not present:\r\n   \r\n-  if not os.path.isabs( args.cti_xml_out):\r\n-    args.cti_xml_out = os.path.join( args.workdir, args.cti_xml_out)\r\n+  if not os.path.isabs( args.parallel_cti_xml_out):\r\n+    args.parallel_cti_xml_out = os.path.join( args.workdir, args.parallel_cti_xml_out)\r\n \r\n-  out_dir = os.path.split(args.cti_xml_out )[0]\r\n+  out_dir = os.path.split(args.parallel_cti_xml_out )[0]\r\n   os.makedirs(out_dir, exist_ok=True)\r\n \r\n   # get an Euclid compliant filename to store XML\r\n@@ -114,26 +115,15 @@ def mainMethod( args):\n   from ST_DataModelBindings.dpd.vis import viscticalibrationresults_stub\r\n   import ST_DataModelBindings.ins_stub as ins_dict\r\n \r\n-  # Create the data product\r\n-  data_product = viscticalibrationresults_stub.DpdVisCTICalibrationResults()\r\n-\r\n-  # Add Header\r\n-  data_product.Header = vis_generic_header(\"DpdVisCTICalibrationResults\", UNKNOWN_STRING)\r\n-\r\n   # Create the date range\r\n   date_range = ins_dict.calibrationValidPeriod()\r\n   date_range.TimestampStart = \"2023-02-21T00:00:00.000Z\"\r\n   date_range.TimestampEnd = \"2023-02-22T00:00:00.000Z\"\r\n \r\n-  # Create the Data\r\n-  data = vis_stub.visCTICalibrationResults.Factory()\r\n-  data.ValidityRange = FromToXML.create_validity_range()\r\n-  data.DateRange = date_range\r\n-  data.PreviousCTIModelsUsedID = \"0\"\r\n-  data.FitID = \"234\"\r\n \r\n   # Create a CTI model fit entry\r\n-  fit_list = []\r\n+  parallel_fit_list = []\r\n+  serial_fit_list = []\r\n \r\n   # The cti_result_list contains the results of all 72 CTI calibrations performed in this pipeline\r\n   # run (36 x parallel CTI, 36 x serial CTI).\r\n@@ -146,25 +136,21 @@ def mainMethod( args):\n \r\n     fit.ValidityRange = date_range\r\n     fit.DateRange = date_range\r\n-    fit.DetectorId = \"1-1\"\r\n+    fit.DetectorId = cti_result[\"DetectorID\"]\r\n     #   fit.DetectorId = cti_result[\"DetectorID\"] # Need to update this to each Detector\r\n \r\n     fit.FitMetaData = create_data_container(cti_result[\"FitMetaData\"])\r\n     fit.SearchPickle = create_data_container(cti_result[\"SearchPickle\"])\r\n     fit.ModelPickle = create_data_container(cti_result[\"ModelPickle\"])\r\n     fit.ModelInfo = create_data_container(cti_result[\"ModelInfo\"])\r\n-    # fit.Model = create_data_container(cti_result[\"Model\"])\r\n-    fit.Model = create_data_container(\"placeholder.json\")\r\n+    fit.Model = create_data_container(cti_result[\"Model\"])\r\n \r\n     fit.ModelResults = create_data_container(cti_result[\"ModelResults\"])\r\n-    # fit.SearchInfo = create_data_container(cti_result[\"SearchInfo\"])\r\n-    fit.SearchInfo = create_data_container(\"placeholder.json\")\r\n+    fit.SearchInfo = create_data_container(cti_result[\"SearchInfo\"])\r\n \r\n-    # fit.MaxLikelihoodInstance = create_data_container(cti_result[\"MaxLikelihoodInstance\"])\r\n-    fit.MaxLikelihoodInstance = create_data_container(\"placeholder.json\")\r\n+    fit.MaxLikelihoodInstance = create_data_container(cti_result[\"MaxLikelihoodInstance\"])\r\n \r\n-    # fit.CovarianceMatrix = create_data_container(cti_result[\"CovarianceMatrix\"])\r\n-    fit.CovarianceMatrix = create_data_container(\"placeholder.json\")\r\n+    fit.CovarianceMatrix = create_data_container(cti_result[\"CovarianceMatrix\"])\r\n \r\n     # fit.ExtractedEPERs = create_data_container(cti_result[\"ExtractedEPERs\"])\r\n     fit.ExtractedEPERs = create_data_container(\"placeholder.json\")\r\n@@ -177,10 +163,61 @@ def mainMethod( args):\n     fit.IsraelDeltaEllipticity = cti_result[\"IsraelDeltaEllipticity\"]\r\n     fit.TimeFromZero = cti_result[\"TimeFromZero\"]\r\n \r\n-    fit_list.append(fit)\r\n+    if cti_result[\"IsParallel\"]:\r\n+      parallel_fit_list.append(fit)\r\n+    else:\r\n+      serial_fit_list.append(fit)\r\n+\r\n+\r\n+  ##### PARALLEL #####\r\n+\r\n+  # Create the data product\r\n+  data_product = viscticalibrationresults_stub.DpdVisCTICalibrationResults()\r\n+\r\n+  # Add Header\r\n+  data_product.Header = vis_generic_header(\"DpdVisCTICalibrationResults\", UNKNOWN_STRING)\r\n+\r\n+  # Create the Data\r\n+  data = vis_stub.visCTICalibrationResults.Factory()\r\n+  data.ValidityRange = FromToXML.create_validity_range()\r\n+  data.DateRange = date_range\r\n+  data.PreviousCTIModelsUsedID = \"0\"\r\n+\r\n+  data.FitID = \"Par_Hello\"\r\n+\r\n+  # Add fit to data\r\n+  data.Fits = parallel_fit_list\r\n+\r\n+  # Add data to data product\r\n+  data_product.Data = data\r\n+\r\n+  # Need to add all .png files contained in cti_result_list to these objects as a .tar\r\n+  qualPramStorage = vis_stub.visQualityParameterStorageFitsFile()\r\n+  dqc_params_dm = vis_stub.visDqcParams.Factory()\r\n+\r\n+  data_product.QualityParameterStorage = qualPramStorage\r\n+  data_product.QualityParams = dqc_params_dm\r\n+\r\n+\r\n+\r\n+  ##### SERIAL #####\r\n+\r\n+  # Create the data product\r\n+  data_product = viscticalibrationresults_stub.DpdVisCTICalibrationResults()\r\n+\r\n+  # Add Header\r\n+  data_product.Header = vis_generic_header(\"DpdVisCTICalibrationResults\", UNKNOWN_STRING)\r\n+\r\n+  # Create the Data\r\n+  data = vis_stub.visCTICalibrationResults.Factory()\r\n+  data.ValidityRange = FromToXML.create_validity_range()\r\n+  data.DateRange = date_range\r\n+  data.PreviousCTIModelsUsedID = \"0\"\r\n+\r\n+  data.FitID = \"Ser_Hello\"\r\n \r\n   # Add fit to data\r\n-  data.Fits = fit_list\r\n+  data.Fits = serial_fit_list\r\n \r\n   # Add data to data product\r\n   data_product.Data = data\r\n@@ -192,9 +229,13 @@ def mainMethod( args):\n   data_product.QualityParameterStorage = qualPramStorage\r\n   data_product.QualityParams = dqc_params_dm\r\n \r\n+\r\n+\r\n+\r\n   # Output to XML\r\n-  cti_xml_out = \"cti.xml\"\r\n-  DmUtils.save_product_metadata(data_product, cti_xml_out)\r\n+\r\n+  DmUtils.save_product_metadata(data_product, args.parallel_cti_xml_out)\r\n+  DmUtils.save_product_metadata(data_product, args.serial_cti_xml_out)\r\n \r\n   logger.info( \"#\")\r\n   logger.info( \"# Exiting %s mainMethod()\" % __name__)\r\n",
                            "update output ports to split parallel and serial xml files",
                            "James Nightingale",
                            "2023-07-27T15:28:02.000+01:00",
                            "c529d333acb5085b25d7c982e4d0389a05aa37c9"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_cti_master_ci_xml_out.py": [
                        [
                            "@@ -0,0 +1,126 @@\n+\"\"\"\r\n+@file: python/Tasks/VIS_master_ci_xml_out.py\r\n+@author: user\r\n+@date: 21/02/2023\r\n+\"\"\"\r\n+\r\n+#Standard library imports\r\n+import argparse\r\n+import os\r\n+import fitsio\r\n+from pathlib import Path\r\n+from typing import Union\r\n+\r\n+\r\n+# Euclid specific imports\r\n+from ST_DM_DmUtils import DmUtils\r\n+from ST_DataModelBindings.bas import img_stub\r\n+from ST_DataModelBindings.pro import vis_stub\r\n+from ST_DataModelBindings.dpd.vis import vismasterciframe_stub\r\n+from VIS_Tasks_Common.FromToXML import (\r\n+  vis_filter,\r\n+  create_validity_range,\r\n+  vis_generic_header,\r\n+  create_img_type,\r\n+  UNKNOWN_STRING,\r\n+  add_quality_parameter_file\r\n+)\r\n+\r\n+from VIS_PyLibrary_Common.zip_tools import tar_zip_files\r\n+from VIS_PyLibrary_Common import pipe_tools\r\n+\r\n+import ElementsKernel.Logging\r\n+logger = ElementsKernel.Logging.getLogger( __name__)\r\n+\r\n+\r\n+################################################################################\r\n+\r\n+def defineSpecificProgramOptions():\r\n+\r\n+    parser = argparse.ArgumentParser()\r\n+    # inputs\r\n+    parser.add_argument( '--workdir',                    required=True,  help='absolute path to the workdir')\r\n+    parser.add_argument( '--logdir',                     required=True,  help='path to the logdir, relative to the workdir')\r\n+    parser.add_argument('--config',                                      help='configuration file path')\r\n+    parser.add_argument( '--cti_master_ci_list', required=True,  help='Path to the master CI results json file')\r\n+    # outputs\r\n+    parser.add_argument( '--master_ci_xml_out',                required=True,  help='output master CI results xml filename')\r\n+    return parser\r\n+\r\n+################################################################################\r\n+\r\n+def write_tar_zip(in_files: list[Union[Path, str]], out_file: Path) -> None:\r\n+  tar_zip_files(\" \".join(map(str, in_files)), str(out_file), False)\r\n+\r\n+\r\n+def mainMethod( args):\r\n+\r\n+  logger.info( '#')\r\n+  logger.info( '# Entering %s mainMethod()' % __name__)\r\n+  logger.info( '# command line: ' + pipe_tools.get_erun_commandline())\r\n+  pipe_tools.log_task_environment( logger)\r\n+  logger.info( '#')\r\n+  \r\n+  # Create workdir folders for XML files if not present:\r\n+  \r\n+  if not os.path.isabs( args.master_ci_xml_out):\r\n+    args.master_ci_xml_out = os.path.join( args.workdir, args.master_ci_xml_out)\r\n+\r\n+  out_dir = os.path.split(args.master_ci_xml_out )[0]\r\n+  os.makedirs(out_dir, exist_ok=True)\r\n+\r\n+  # Create the data product\r\n+  data_product = vismasterciframe_stub.DpdVisMasterCIFrame()\r\n+\r\n+  # Add Header\r\n+  data_product.Header = vis_generic_header(\"DpdVisMasterCIFrame\")\r\n+\r\n+  # Add Data\r\n+  data = vis_stub.visMasterCIFrame.Factory()\r\n+\r\n+  fits_file = \"placeholder.fits\"\r\n+\r\n+  # Open the FITS file\r\n+  fits = fitsio.FITS(fits_file, 'r')\r\n+  nhdu = fits[-1].get_extnum()\r\n+  header = fits[1].read_header()\r\n+\r\n+  data.ImgType = create_img_type(\"CALIB\", \"CHARGE-INJECTION\", \"OTHER\", \"CALIBRATION\")\r\n+  data.ImgArea = img_stub.imgArea(Name=\"QUADRANT\")\r\n+  data.ImgNumber = nhdu\r\n+  data.AxisNumber = header[\"NAXIS\"]\r\n+  data.AxisLengths = [header[\"NAXIS1\"], header[\"NAXIS2\"]]\r\n+  data.DataSize = header[\"BITPIX\"]\r\n+  data.DataLength = header[\"NAXIS1\"] * header[\"NAXIS2\"]\r\n+  data.ValidityRange = create_validity_range()\r\n+  data.Filter = vis_filter()\r\n+  # DataStorage\r\n+  data.DataStorage = DmUtils.create_fits_storage(\r\n+    vis_stub.visMasterCIStorageFitsFile,\r\n+    os.path.basename(fits_file), \"vis.masterCI\", \"0.1\")\r\n+\r\n+  fits.close()\r\n+\r\n+  # Add data to data product\r\n+  data_product.Data = data\r\n+\r\n+  # Need to add all .png files contained in cti_result_list to these objects as a .tar\r\n+  # qualPramStorage = vis_stub.visQualityParameterStorageFitsFile()\r\n+  dqc_params_dm = vis_stub.visDqcParams.Factory()\r\n+\r\n+  add_quality_parameter_file(data_product, \"placeholder.json\")\r\n+\r\n+  # data_product.Data.QualityParameterStorage.append(qualPramStorage)\r\n+  # data_product.Data.QualityParameterStorage[-1].DataContainer = create_data_container(\"placeholder.json\")\r\n+  data_product.QualityParams = dqc_params_dm\r\n+\r\n+  # Output to XML\r\n+  cti_xml_out = \"ci_master.xml\"\r\n+  DmUtils.save_product_metadata(data_product, cti_xml_out)\r\n+  # Output to XML^M                                                                                   \r\n+\r\n+  DmUtils.save_product_metadata(data_product, args.master_ci_xml_out)\r\n+\r\n+  logger.info( \"#\")\r\n+  logger.info( \"# Exiting %s mainMethod()\" % __name__)\r\n+  logger.info( \"#\")\r\n",
                            "update VIS_cti_xml_out task with DQ zip file",
                            "James Nightingale",
                            "2023-08-01T14:20:53.000+01:00",
                            "d13c37f35cf947b2673d069fef9b79dcfc86603b"
                        ]
                    ],
                    "VIS_Astrometry/python/VIS_Astrometry/wcsfit.py": [
                        [
                            "@@ -2218,6 +2218,7 @@ def get_observation(src_cat_path, refdata, refmagmin=None, refmagmax=None,\n             _mask = filter_catalogue(\n                 mags, fluxrad,\n                 mag_min=refmagmin, mag_max=refmagmax, mag_margin=0.5,\n+                flux_rad_min=2.0, flux_rad_max=4.0,\n                 logger=logger\n             )\n \n@@ -3310,12 +3311,13 @@ def gauss_func(x, a, x0, sigma):\n     )\n \n \n-def gauss_fit(xdat, ydat):\n+def gauss_fit(xdat, ydat, flux_rad_min, flux_rad_max):\n     \"\"\"\n     Perform a Gaussian fit (courtesy of Sylvain Mottet)\n     \"\"\"\n     # initial parameters\n-    p0 = np.array([0.5, 1.1, 0.15])\n+    flux_rad_med = 0.5 * (flux_rad_min + flux_rad_max)\n+    p0 = np.array([0.5, flux_rad_med, 0.15])\n \n     def func(x, p00, p01, p02):\n         # composite of two Gaussian functions\n@@ -3324,13 +3326,14 @@ def gauss_fit(xdat, ydat):\n     popt, pcov = curve_fit(\n         func, xdat, ydat,\n         p0=p0, bounds=(\n-            [0, 0.5, 0],\n-            [np.inf, 2.5, np.inf]\n+            [0, flux_rad_min, 0],\n+            [np.inf, flux_rad_max, np.inf]\n         )\n     )\n     return popt  # a, x0, sigma\n \n def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n+                     flux_rad_min=0.5, flux_rad_max=2.5,\n                      logger=None):\n     \"\"\"\n     Filter a set of sources by magnitude and flux radius\n@@ -3347,6 +3350,10 @@ def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n         Maximum magnitude\n     mag_margin : float, optional\n         Allowable margin for error on the magnitudes\n+    flux_rad_min : float, optional\n+        Lower limit of acceptable flux_radius range, default 0.5.\n+    flux_rad_max : float, optional\n+        Upper limit of acceptable flux_radius range, default 2.5.\n     logger : Logger, optional\n         A logger which will be used for printing the logging messages (None for\n         no printing).\n@@ -3370,7 +3377,7 @@ def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n         mask[mag > (mag_max + mag_margin)] = False\n \n     # basic fluxrad filtering\n-    mask[(fluxrad < 0.5) | (fluxrad > 2.5)] = False\n+    mask[(fluxrad < flux_rad_min) | (fluxrad > flux_rad_max)] = False\n \n     # check on current source count, can we do something fancy?\n     num_in_range = np.count_nonzero(mask)\n@@ -3380,13 +3387,13 @@ def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n         bin_count = 50\n         # get flux radius histogram\n         radius_count, bin_edges = np.histogram(\n-            fluxrad[mask], bins=bin_count, range=[0.5, 2.5], density=True\n+            fluxrad[mask], bins=bin_count, range=[flux_rad_min, flux_rad_max], density=True\n         )\n         bin_centers = (bin_edges[:-1] + bin_edges[1:]) / 2\n \n         # try to fit a gaussian to the flux_radius distribution\n         try:\n-            a, x0, sig = gauss_fit(bin_centers, radius_count)\n+            a, x0, sig = gauss_fit(bin_centers, radius_count, flux_rad_min, flux_rad_max)\n             mask[np.abs(fluxrad - x0) > (5 * sig)] = False\n \n             # plt.hist(\n",
                            "alter flux_radius range for intra/extra focal",
                            "Leigh Smith",
                            "2023-07-31T14:37:43.000+02:00",
                            "1f4b4ce7e624298fb6375a23e1d47537594bfba0"
                        ]
                    ],
                    ".gitignore": [
                        [
                            "@@ -6,4 +6,5 @@\n .cache\n __pycache__\n *.pyc\n+*.py.NOTUSED\n .ipynb_checkpoints\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    ".jenkinsFile": [
                        [
                            "@@ -1,3 +1,3 @@\n #!groovy\n-@Library('integration-library@release-9') _\n-pipelineElements(artifactId:\"VIS_Tasks\", component:'eden.3.0')\n+@Library('integration-library@release-10') _\n+pipelineElements(name:\"VIS_Tasks\", component:'eden.3.1')\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Astrometry/tests/python/VIS_calibrate_astrometry_scamp_largeflat_test.py": [
                        [
                            "@@ -23,7 +23,7 @@\n :author: user\n \"\"\"\n \n-import py.test\n+import pytest\n import VIS_Astrometry.VIS_calibrate_astrometry_scamp_largeflat\n \n class TestVIS_calibrate_astrometry_scamp_largeflat(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Astrometry/tests/python/VIS_calibrate_astrometry_scamp_test.py": [
                        [
                            "@@ -23,7 +23,7 @@\n :author: user\n \"\"\"\n \n-import py.test\n+import pytest\n import VIS_Astrometry.VIS_calibrate_astrometry_scamp\n \n class TestVIS_calibrate_astrometry_scamp(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Astrometry/tests/python/VIS_calibrate_astrometry_wcsfit.py": [
                        [
                            "@@ -23,7 +23,7 @@\n :author: user\n \"\"\"\n \n-import py.test\n+import pytest\n import VIS_Astrometry.VIS_calibrate_astrometry_wcsfit\n \n class TestVIS_calibrate_astrometry_wcsfit(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Astrometry/tests/python/scamp_test.py": [
                        [
                            "@@ -23,7 +23,7 @@\n :author: user\n \"\"\"\n \n-import py.test\n+import pytest\n import VIS_Astrometry.scamp\n \n class Testscamp(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Astrometry/tests/python/sip_tpv_test.py": [
                        [
                            "@@ -23,7 +23,7 @@\n :author: user\n \"\"\"\n \n-import py.test\n+import pytest\n import VIS_Astrometry.sip_tpv\n \n class Testsip_tpv(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Astrometry/tests/python/wcsfit_test.py": [
                        [
                            "@@ -23,7 +23,7 @@\n :author: user\n \"\"\"\n \n-import py.test\n+import pytest\n import VIS_Astrometry.wcsfit\n \n class Testwcsfit(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Bias/conf/VIS_BiasCalibration_Programs/test_data_file_lists/regression_cmp_7816.output.txt": [
                        [
                            "@@ -1 +1 @@\n-regression_cmp_7816/expected_master_bias.v1.10.fits\tregression_cmp_7816/expected_master_bias.fits\n+regression_cmp_7816/expected_master_bias.v1.11.fits\tregression_cmp_7816/expected_master_bias.fits\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Bias/conf/VIS_BiasCorrection_Programs/test_data_file_lists/regression_cmp_7813.output.txt": [
                        [
                            "@@ -1 +1 @@\n-regression_cmp_7813/expected_bias_corrected.v1.6.fits\tregression_cmp_7813/expected_bias_corrected.fits\n\\ No newline at end of file\n+regression_cmp_7813/expected_bias_corrected.v1.7.fits\tregression_cmp_7813/expected_bias_corrected.fits\n\\ No newline at end of file\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Bias/python/VIS_Bias/VIS_BiasCalibration_IO/file_entry_point.py": [
                        [
                            "@@ -17,6 +17,7 @@\n \n import numpy as np\n import fitsio\n+import astropy.io.fits as pf\n import configparser\n \n import ElementsKernel.Logging as elog\n@@ -25,6 +26,7 @@ import VIS_PyLibrary_M.fits_io_library as fio\n import VIS_PyLibrary_M.image_statistics as istat\n import VIS_PyLibrary_Common.pe_run_information as peri\n \n+from ..VIS_Bias_Modelling import bias_utils\n from ..VIS_Bias_Modelling import bias_modelling as algo\n \n from . import file_validation as fv\n@@ -32,7 +34,7 @@ from . import file_validation as fv\n __all__ = ['file_layer_entry_point']\n \n \n-def file_layer_entry_point(input_files, config_file, output_master_file, quadrant_id=None, in_flagmaps=None):\n+def file_layer_entry_point(input_files, config_file, output_master_file, quadrant_id=None, in_flagmaps=None, output_stdev_file=None, output_count_file=None):\n     \"\"\"\n     This layer handles the I/O to/from files.  It is a wrapper around the algorithm.\n \n@@ -59,6 +61,12 @@ def file_layer_entry_point(input_files, config_file, output_master_file, quadran\n     log.info(\"file_layer_entry_point(): argument 'quadrant_id' is: \" + str(quadrant_id))\n     log.info(\"file_layer_entry_point(): argument 'config_file' is: \" + str(config_file))\n     log.info(\"file_layer_entry_point(): argument 'output_master_file' is: \" + str(output_master_file))\n+    if output_stdev_file is None:\n+        output_stdev_file = output_master_file + \".stdev.fits\"\n+    if output_count_file is None:\n+        output_count_file = output_master_file + \".count.fits\"\n+    log.info(\"file_layer_entry_point(): output_stdev_file is: \" + str(output_stdev_file))\n+    log.info(\"file_layer_entry_point(): output_count_file is: \" + str(output_count_file))\n     config = configparser.ConfigParser()\n     config.read(config_file)\n     fv._assert_input_fits_valid(input_files)\n@@ -91,12 +99,22 @@ def file_layer_entry_point(input_files, config_file, output_master_file, quadran\n         flagmaps = fio.load_multi_same_ext(in_flagmaps, quad_name, apply_gain=False)\n         flagmaps = np.array(flagmaps, dtype=np.int32, copy=True, order=\"C\")\n     bias_cfg = config[\"VIS_model_bias\"]\n-    master_image, stats, master_stats = algo.model_bias(image_stack32, flagmaps, bias_cfg, ccd_id, quad_letter,\n-                                          prescan_size, serial_overscan_size, parallel_overscan_size)\n+    master_image, stats, master_stats, stdev_image, count_image = algo.model_bias(\n+                                                        image_stack32, flagmaps, bias_cfg, ccd_id, quad_letter,\n+                                                        prescan_size, serial_overscan_size, parallel_overscan_size)\n     log.info(\"file_layer_entry_point(): writing master bias image to FITS file \" + output_master_file)\n     fio.save_single_ext(output_master_file, master_image, quad_name, input_files[0], gain=None, apply_gain=False)\n+    fio.save_single_ext(output_stdev_file, stdev_image, quad_name, input_files[0], gain=1.0, apply_gain=False)\n+    fio.save_single_ext(output_count_file, count_image, quad_name, input_files[0], gain=1.0, apply_gain=False)\n+    #note that comment length is very limited (too-long comments trigger a warning log message)\n+    pf.setval(output_master_file, \"BIASSEC\", value=bias_utils.offset_area_to_string(bias_cfg),\n+              comment=\"Offset area relative to readout, 1-based\", ext=0, memmap=False)\n+    for file in [output_master_file, output_stdev_file, output_count_file]:\n+        pf.setval(file, \"STKCOUNT\", value=len(input_files), extname=quad_name, memmap=False)\n     stats.update(istat.header_stats_list(input_files))\n     stats = istat.replace_indexes_with_names(stats, input_files)\n+    master_stats = istat.replace_internal_name(master_stats, \"master_bias\", output_master_file)\n+    master_stats.update(istat.dates_summary(stats, \"bias\"))\n     peri.save_peri(stats, output_master_file, \"VIS_BiasCalibration_Frames\", context_name=quad_name)\n     peri.save_peri(master_stats, output_master_file, \"VIS_BiasCalibration_Master\", context_name=quad_name)\n     log.info(\"file_layer_entry_point(): end\")\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Bias/python/VIS_Bias/VIS_BiasCalibration_Programs/VIS_model_bias.py": [
                        [
                            "@@ -3,7 +3,7 @@ This is the entry point for the Elements program of the Bias Calibration PE.\n The Elements program name matches the name of this .py file.\n \"\"\"\n #\n-# Copyright (C) 2012-2022 Euclid Science Ground Segment\n+# Copyright (C) 2012-2023 Euclid Science Ground Segment\n #\n # This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n # Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n@@ -42,7 +42,7 @@ def mainMethod(args):\n         Named arguments.  The supported arguments are defined in command_line_options.py.\n     \"\"\"\n     fep.file_layer_entry_point(args.in_images,\n-                               args.config_file,\n+                               args.config_ini,\n                                args.out_master,\n                                quadrant_id=args.extname,\n                                in_flagmaps=args.in_flagmaps)\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Bias/python/VIS_Bias/VIS_BiasCalibration_Programs/command_line_options.py": [
                        [
                            "@@ -3,7 +3,7 @@\n For a more general overview of the input and output data, see this project's README.md.\n \"\"\"\n #\n-# Copyright (C) 2012-2022 Euclid Science Ground Segment\n+# Copyright (C) 2012-2023 Euclid Science Ground Segment\n #\n # This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n # Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n@@ -37,7 +37,7 @@ def define_cmd_line_options():\n                         help='(optional) input flagmaps FITS file names')\n     parser.add_argument('--extname', type=str,\n                         help='(optional) name or number of the quadrant to be examined (e.g. \"CCDID 2-1 QUADID E\").')\n-    parser.add_argument('--config_file', type=str,\n+    parser.add_argument('--config_ini', type=str,\n                         help='Input configuration file name')\n     parser.add_argument('--out_master', type=str,\n                         help='master bias image output FITS file name')\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Bias/python/VIS_Bias/VIS_BiasCorrection_IO/file_entry_point.py": [
                        [
                            "@@ -23,15 +23,23 @@ import ElementsKernel.Logging as elog\n import VIS_PyLibrary_M.fits_io_library as fio\n import VIS_PyLibrary_M.image_statistics as istat\n import VIS_PyLibrary_Common.pe_run_information as peri\n+from VIS_PyLibrary_Common import pipe_tools\n \n+from ..VIS_Bias_Modelling import bias_utils\n from ..VIS_Bias_Subtraction import bias_subtraction as algo\n-from VIS_PyLibrary_Common import pipe_tools\n \n from . import file_validation as fv\n \n __all__ = ['file_layer_entry_point']\n \n \n+\"\"\" Quietly delete a FITS header item without complaining if it does not exist \"\"\"\n+def quiet_delval(output_file, keyword_name, *args, **kwargs):\n+    try:\n+        pf.delval(output_file, keyword_name, *args, **kwargs)\n+    except KeyError:\n+        pass\n+\n def file_layer_entry_point(input_file, master_bias_file, config_file, output_file, quadrant_id=None, in_flagmap=None):\n     \"\"\"\n     This layer handles the I/O to/from files.  It is a wrapper around the algorithm.\n@@ -89,7 +97,7 @@ def file_layer_entry_point(input_file, master_bias_file, config_file, output_fil\n     except:\n         expnum = None\n         log.warning(\"file_layer_entry_point(): EXPNUM not found so it will be missing from output\")\n- \n+\n     exp_id = \"\"\n     software_name = \"VIS_BiasCorrection_Frames\"\n     if obs_id is not None and dithobs is not None and expnum is not None:\n@@ -131,10 +139,15 @@ def file_layer_entry_point(input_file, master_bias_file, config_file, output_fil\n     else:\n         log.debug(\"file_layer_entry_point(): saving image after bias subtraction to: \" + output_file)\n         fio.save_single_ext(output_file, corrected_image, quad_name, input_file, gain=None, apply_gain=False)\n-\n     peri.save_peri(stats, output_file + \"_\" + exp_id + \"_\", software_name , context_name=quad_name,obs_id=obs_id, dithobs=dithobs,expnum=expnum)\n \n     # SM 6May2022: dirty hack to update FITS header because fio.save_single_ext() doesn't handle header\n-    dat = pf.getdata( output_file, 1)\n-    pf.update( output_file, dat, 1, header=img_hdr)\n+    dat = pf.getdata( output_file, extname=quad_name)\n+    pf.update( output_file, dat, extname=quad_name, header=img_hdr)\n+\n+    quiet_delval(output_file, \"CHECKSUM\", extname=quad_name, checksum=False)\n+    quiet_delval(output_file, \"DATASUM\", extname=quad_name, checksum=False)\n+    #note that comment length is very limited (too-long comments trigger a warning log message)\n+    pf.setval(output_file, \"BIASSEC\", value=bias_utils.offset_area_to_string(bias_cfg),\n+              comment=\"Offset area relative to readout, 1-based\", ext=0)\n     log.info(\"file_layer_entry_point(): end\")\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Bias/python/VIS_Bias/VIS_BiasCorrection_Programs/VIS_subtract_bias.py": [
                        [
                            "@@ -4,7 +4,7 @@ corrects an exposure for the bias, i.e. subtracts it.\n The Elements program name matches the name of this .py file.\n \"\"\"\n #\n-# Copyright (C) 2012-2021 Euclid Science Ground Segment\n+# Copyright (C) 2012-2023 Euclid Science Ground Segment\n #\n # This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n # Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n@@ -45,7 +45,7 @@ def mainMethod(args):\n     \"\"\"\n     fep.file_layer_entry_point(args.in_image,\n                                args.in_master,\n-                               args.config_file,\n+                               args.config_ini,\n                                args.out_image,\n                                quadrant_id=args.extname,\n                                in_flagmap=args.in_flagmap)\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Bias/python/VIS_Bias/VIS_BiasCorrection_Programs/command_line_options.py": [
                        [
                            "@@ -4,7 +4,7 @@ Defines the command line arguments supported by the Elements program of this PE.\n For a more general overview of the input and output data, see this project's README.md.\n \"\"\"\n #\n-# Copyright (C) 2012-2022 Euclid Science Ground Segment\n+# Copyright (C) 2012-2023 Euclid Science Ground Segment\n #\n # This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n # Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n@@ -41,7 +41,7 @@ def define_cmd_line_options():\n                         help='(optional) name or number of the quadrant to be corrected (e.g. \"CCDID 2-1 QUADID E\").')\n     parser.add_argument('--in_master', type=str,\n                         help='(optional) input master bias FITS file name')\n-    parser.add_argument('--config_file', type=str,\n+    parser.add_argument('--config_ini', type=str,\n                         help='Input configuration file name')\n     parser.add_argument('--out_image', type=str,\n                         help='output FITS image file name (after subtracting the bias)')\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Bias/python/VIS_Bias/VIS_Bias_Modelling/bias_modelling.py": [
                        [
                            "@@ -29,11 +29,9 @@ import VIS_PyLibrary_M.image_subareas as isa\n import VIS_PyLibrary_M.image_statistics as istat\n import VIS_PyLibrary_M.maths_outliers as mo\n \n-__all__ = ['pe_name','model_bias']\n+from . import bias_utils\n \n-_OUTLIER_EXCLUSION_KAPPA = 4\n-#threshold for exclusion of hot/dead/cosmic ray pixels at kappa*sigma.  If changing this, consider whether to\n-#change the similar value in image_statistics.py, and see comment 17 on #13953.\n+__all__ = ['pe_name','model_bias']\n \n \n def _assert_cfg_valid(col_start, col_end, line_start, line_end, selected_px, bias_image):\n@@ -90,17 +88,24 @@ def model_bias(bias_images, flagmaps, bias_cfg, ccd_id, quad_id, prescan_size, s\n     Returns\n     -------\n     tuple (array_like of number, dictionary)\n-        A tuple containing two items:\n+        A tuple containing five items:\n         - The master bias image, as a 2-D array in the same orientation as `bias_images`.  If a pixel's value\n           cannot be determined (e.g. bad pixels or all cosmics), it will have the value zero.\n+        - A dictionary containing name+number pairs of statistics for each of the bias frames.\n         - A dictionary containing name+number pairs of statistics of the master bias image.\n+        - Another image, as a 2-D array of a similar type to the master bias, which contains the standard\n+          deviation of the bias frame values that were used to calculate each pixel's master bias value.\n+          If a pixel's value cannot be determined (e.g. bad pixels or all cosmics), it will have the value zero.\n+        - An image containing the number of good/valid values that were used to calculate each pixel's master bias.\n+          If a pixel's value cannot be determined (e.g. bad pixels or all cosmics), it will have the value zero.\n     \"\"\"\n-    logger = elog.getLogger(__name__)\n+    log = elog.getLogger(__name__)\n     use_mean = (bias_cfg[\"combine_method\"] == \"mean\")\n     cfg_col_start  = bias_cfg[\"main_bias_col_start\"]\n     cfg_col_end    = bias_cfg[\"main_bias_col_end\"]\n     cfg_line_start = bias_cfg[\"main_bias_line_start\"]\n     cfg_line_end   = bias_cfg[\"main_bias_line_end\"]\n+    cfg_outlier_kappa = float(bias_cfg[\"outlier_exclusion_kappa\"])\n     selected_px = (\"readout relative [\" + str(cfg_col_start) + \",\" + str(cfg_col_end) + \",\" +\n                    str(cfg_line_start) + \",\" + str(cfg_line_end) + \"]\")\n     _assert_cfg_valid(cfg_col_start, cfg_col_end, cfg_line_start, cfg_line_end, selected_px, bias_images[0])\n@@ -111,26 +116,35 @@ def model_bias(bias_images, flagmaps, bias_cfg, ccd_id, quad_id, prescan_size, s\n                            for flagmap in flagmaps]\n             flagmaps = np.array(flagmap_ext, dtype=flagmap_ext[0].dtype, copy=False)\n         bias_images = ma.array(bias_images, mask=flagmaps & VIS_FLAGS[\"INVALID\"], copy=False)\n-    statistics = istat.bias_stats_list(bias_images, ccd_id, quad_id,\n-                                       prescan_size, serial_overscan_size, parallel_overscan_size)\n     debiased_images = []\n-    for image_data in bias_images:\n+    statistics = {}\n+    for i, image_data in enumerate(bias_images):\n         #subtract the general bias level of this exposure from itself\n         xscan_pixel_data = isa.get_readout_rel_rectangle(image_data, ccd_id, quad_id,\n                                                          int(cfg_col_start), int(cfg_col_end),\n                                                          int(cfg_line_start), int(cfg_line_end))\n-        cleaned_xscan = mo.sigma_clip_mask(xscan_pixel_data, _OUTLIER_EXCLUSION_KAPPA)[0]\n+        cleaned_xscan = mo.sigma_clip_mask(xscan_pixel_data, cfg_outlier_kappa)[0]\n         excluded_px = cleaned_xscan.size - cleaned_xscan.count()\n         xscan_mean = cleaned_xscan.mean(dtype=np.float64)\n         if xscan_mean is ma.masked:\n-            logger.warning(\"model_bias(): Mean of selected pixels (\" + selected_px + \") could not be calculated \" +\n-                                         \"(\" + str(excluded_px) + \" excluded)\")\n+            #somehow all pixels in the rectangle got masked or are outliers\n+            message = (\"model_bias(): Mean of selected pixels (\" + selected_px + \") could not be calculated \" +\n+                                     \"(\" + str(excluded_px) + \" excluded)\")\n+            #this must be fatal, otherwise the missing image from debiased_images would lead to incorrect\n+            #image numbering [n] in the key values of statistics\n+            log.error(message)\n+            raise Exception(message)\n         else:\n-            logger.info(\"model_bias(): Mean of selected pixels (\" + selected_px + \"): \" + str(xscan_mean) + \" \" +\n-                                      \"(\" + str(excluded_px) + \" excluded)\")\n+            log.info(\"model_bias(): Mean of selected pixels (\" + selected_px + \"): \" + str(xscan_mean) + \" \" +\n+                                   \"(\" + str(excluded_px) + \" excluded)\")\n             debiased_images.append(image_data - xscan_mean)\n+            statistics[\"bias_offset[\" + str(i) + \"]\"] = float(xscan_mean)\n+            statistics.update(bias_utils.offset_area_stats(cleaned_xscan, name=i))\n     bias_images = None #MEMORYUSE: ineffective because the caller still has a reference\n-    cleaned_images = [mo.sigma_clip_mask(image, _OUTLIER_EXCLUSION_KAPPA)[0] for image in debiased_images]\n+    statistics.update(istat.bias_stats_list(debiased_images, ccd_id, quad_id,\n+                                            prescan_size, serial_overscan_size, parallel_overscan_size,\n+                                            outlier_exclusion_kappa=cfg_outlier_kappa))\n+    cleaned_images = [mo.sigma_clip_mask(image, cfg_outlier_kappa)[0] for image in debiased_images]\n     debiased_images = None #MEMORYUSE: free up memory\n     cleaned_stack = ma.concatenate([ma.expand_dims(img, axis=0) for img in cleaned_images])\n     cleaned_images = None #MEMORYUSE: free up memory\n@@ -139,10 +153,16 @@ def model_bias(bias_images, flagmaps, bias_cfg, ccd_id, quad_id, prescan_size, s\n     else:\n         combine_func = ma.median\n     master_bias = combine_func(cleaned_stack, axis=0) #MEMORYUSE: makes a temporary copy internally\n+    #generate stdev_image and count_image (issue 18295)\n+    stdev_image = np.array(cleaned_stack.std(axis=0).filled(fill_value=0.0), dtype=np.float32, copy=False)\n+    count_image = np.array(cleaned_stack.count(axis=0), dtype=np.int16, copy=False)\n     #look for pixels which are invalid in ALL the images (perhaps bad pixels)\n     missing_pixels = master_bias.size - master_bias.count()\n     if missing_pixels != 0:\n-        logger.warning(\"model_bias(): Master bias has \" + str(missing_pixels) + \" missing pixels\")\n+        log.warning(\"model_bias(): Master bias has \" + str(missing_pixels) + \" missing pixels\")\n     master_statistics = istat.bias_stats(master_bias, ccd_id, quad_id,\n-                                       prescan_size, serial_overscan_size, parallel_overscan_size, \"master_bias\")\n-    return master_bias.filled(fill_value=0.0), statistics, master_statistics\n+                                         prescan_size, serial_overscan_size, parallel_overscan_size,\n+                                         name=\"master_bias\", outlier_exclusion_kappa=cfg_outlier_kappa)\n+    master_statistics[\"bias_combine_method\"] = bias_cfg[\"combine_method\"]\n+    master_statistics[\"bias_offset_rectangle\"] = bias_utils.offset_area_to_string(bias_cfg)\n+    return master_bias.filled(fill_value=0.0), statistics, master_statistics, stdev_image, count_image\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Bias/python/VIS_Bias/VIS_Bias_Modelling/bias_utils.py": [
                        [
                            "@@ -0,0 +1,59 @@\n+\"\"\"\n+Utility functions related to bias.\n+\"\"\"\n+#\n+# Copyright (C) 2012-2023 Euclid Science Ground Segment\n+#\n+# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n+# Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n+# any later version.\n+#\n+# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n+# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+# details.\n+#\n+# You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n+# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+#\n+\n+import math\n+\n+\n+def offset_area_stats(image_px, name=None):\n+    \"\"\"\n+    Return statistics about the given masked array of pixels as specified in #18326-14.\n+\n+    Parameters\n+    ----------\n+    image_px : MaskedArray of number\n+        An array containing pixel values.\n+    name : string or number\n+        Optional name of the image, to be placed in statistic names e.g. my_stat[name]=99.\n+\n+    Returns\n+    -------\n+    dictionary\n+        Containing statname+number pairs of statistics.\n+    \"\"\"\n+    if name is None:\n+        suffix = \"\"\n+    else:\n+        suffix = \"[\" + str(name) + \"]\"\n+    stats = {}\n+    bias_offset_noise = float(image_px.std())\n+    stats[\"bias_offset_noise\" + suffix] = bias_offset_noise\n+    pixel_count = image_px.count()\n+    stats[\"bias_offset_error\" + suffix] = bias_offset_noise / math.sqrt(pixel_count)\n+    stats[\"bias_offset_noise_error\" + suffix] = bias_offset_noise / math.sqrt(pixel_count * 2)\n+    return stats\n+\n+def offset_area_to_string(bias_cfg):\n+    \"\"\" Convert the given rectangular area to a string containing the four numbers. \"\"\"\n+    #the coords should be 1-based as specified in #20241-5\n+    col_start  = 1 + int(bias_cfg[\"main_bias_col_start\"])\n+    col_end    = 1 + int(bias_cfg[\"main_bias_col_end\"])\n+    line_start = 1 + int(bias_cfg[\"main_bias_line_start\"])\n+    line_end   = 1 + int(bias_cfg[\"main_bias_line_end\"])\n+    offset_area = (\"[\" + str(col_start)  + \":\" + str(col_end) + \",\" +\n+                         str(line_start) + \":\" + str(line_end) + \"]\")\n+    return offset_area\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Bias/python/VIS_Bias/VIS_Bias_Subtraction/bias_subtraction.py": [
                        [
                            "@@ -6,7 +6,7 @@ The function in this file can be used to remove the bias from a single exposure.\n be a single quadrant to be corrected.  The corresponding master bias image must also be supplied.\n \"\"\"\n #\n-# Copyright (C) 2012-2022 Euclid Science Ground Segment\n+# Copyright (C) 2012-2023 Euclid Science Ground Segment\n #\n # This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n # Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n@@ -31,11 +31,9 @@ import VIS_PyLibrary_M.image_subareas as isa\n import VIS_PyLibrary_M.image_statistics as istat\n import VIS_PyLibrary_M.maths_outliers as mo\n \n-__all__ = ['pe_name','subtract_bias']\n+from ..VIS_Bias_Modelling import bias_utils\n \n-_OUTLIER_EXCLUSION_KAPPA = 4\n-#threshold for exclusion of hot/dead/cosmic ray pixels at kappa*sigma.  If changing this, consider whether to\n-#change the similar value in image_statistics.py, and see comment 17 on #13953.\n+__all__ = ['pe_name','subtract_bias']\n \n \n def _assert_cfg_valid(col_start, col_end, line_start, line_end, selected_px, bias_image):\n@@ -104,6 +102,7 @@ def subtract_bias(input_image, img_hdr, flagmap, master_bias_image, bias_cfg, cc\n           the corrected image.\n     \"\"\"\n     log = elog.getLogger(__name__)\n+    stats = {}\n \n     # mask input science image with optional flagmap\n     if flagmap is not None:\n@@ -114,14 +113,11 @@ def subtract_bias(input_image, img_hdr, flagmap, master_bias_image, bias_cfg, cc\n         flagmap &= VIS_FLAGS[\"INVALID\"]\n     masked_image = ma.array(input_image, mask=flagmap)\n \n-    # produce statistics about masked input image\n-    stats = {}\n-    stats.update(istat.bias_stats(masked_image, ccd_id, quad_id, prescan_size, serial_overscan_size, parallel_overscan_size))\n-    stats.update(istat.cr_stats(masked_image, ccd_id, quad_id, prescan_size, serial_overscan_size, parallel_overscan_size))\n     cfg_col_start  = bias_cfg[\"main_bias_col_start\"]\n     cfg_col_end    = bias_cfg[\"main_bias_col_end\"]\n     cfg_line_start = bias_cfg[\"main_bias_line_start\"]\n     cfg_line_end   = bias_cfg[\"main_bias_line_end\"]\n+    cfg_outlier_kappa = float(bias_cfg[\"outlier_exclusion_kappa\"])\n     selected_px = (\"readout relative [\" + str(cfg_col_start) + \",\" + str(cfg_col_end) + \",\" +\n                    str(cfg_line_start) + \",\" + str(cfg_line_end) + \"]\")\n     _assert_cfg_valid(cfg_col_start, cfg_col_end, cfg_line_start, cfg_line_end, selected_px, masked_image)\n@@ -134,7 +130,7 @@ def subtract_bias(input_image, img_hdr, flagmap, master_bias_image, bias_cfg, cc\n     xscan_pixel_data = isa.get_readout_rel_rectangle(masked_image, ccd_id, quad_id,\n                                                      int(cfg_col_start), int(cfg_col_end),\n                                                      int(cfg_line_start), int(cfg_line_end))\n-    cleaned_xscan = mo.sigma_clip_mask(xscan_pixel_data, _OUTLIER_EXCLUSION_KAPPA)[0]\n+    cleaned_xscan = mo.sigma_clip_mask(xscan_pixel_data, cfg_outlier_kappa)[0]\n     excluded_px = cleaned_xscan.size - cleaned_xscan.count()\n     general_bias_level = cleaned_xscan.mean(dtype=np.float64)\n     readout_noise = cleaned_xscan.std(dtype=np.float64)\n@@ -143,15 +139,19 @@ def subtract_bias(input_image, img_hdr, flagmap, master_bias_image, bias_cfg, cc\n     if general_bias_level is ma.masked:\n         message = (\"subtract_bias(): Mean of selected pixels (\" + selected_px + \") could not be calculated \" +\n                                     \"(\" + str(excluded_px) + \" excluded)\")\n-        result = None\n         log.error(message)\n         raise Exception(message)\n-    else:\n-        log.info( f\"subtract_bias(): {ccd_id}.{quad_id} Mean of selected pixels ({selected_px})= \"\n-                 +f\"{general_bias_level:>9,.3f} ({excluded_px} excluded)\")\n-        #remove the mask, so that bad pixels are corrected in the same way as any other pixel\n-        unmasked_image = np.asarray(masked_image, dtype='float64')\n-        result = unmasked_image - general_bias_level\n+    log.info( f\"subtract_bias(): {ccd_id}.{quad_id} Mean of selected pixels ({selected_px})= \"\n+             +f\"{general_bias_level:>9,.3f} ({excluded_px} excluded)\")\n+    masked_image.data[:] = masked_image.data - general_bias_level #apply to ALL pixels not just good ones\n+    stats[\"bias_offset\"] = float(general_bias_level)\n+    stats[\"bias_offset_rectangle\"] = bias_utils.offset_area_to_string(bias_cfg)\n+    stats.update(bias_utils.offset_area_stats(cleaned_xscan))\n+    stats.update(istat.bias_stats(masked_image, ccd_id, quad_id, prescan_size, serial_overscan_size,\n+                                  parallel_overscan_size, outlier_exclusion_kappa=cfg_outlier_kappa))\n+    stats.update(istat.cr_stats(masked_image, ccd_id, quad_id, prescan_size, serial_overscan_size,\n+                                parallel_overscan_size, outlier_exclusion_kappa=cfg_outlier_kappa))\n+    result = masked_image.data\n \n     # add quality control parameters to quadrant FITS header\n     if \"BIAS_LVL\" not in img_hdr:\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Bias/tests/python/regression_cmp_7813_test.py": [
                        [
                            "@@ -1,5 +1,5 @@\n #\n-# Copyright (C) 2012-2021 Euclid Science Ground Segment\n+# Copyright (C) 2012-2023 Euclid Science Ground Segment\n #\n # This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n # Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n@@ -48,12 +48,13 @@ def test_main():\n     ini_file.write(\"main_bias_col_end=50\\n\")\n     ini_file.write(\"main_bias_line_start=0\\n\")\n     ini_file.write(\"main_bias_line_end=2065\\n\")\n+    ini_file.write(\"outlier_exclusion_kappa=4.0\\n\")\n     ini_file.close()\n     prog.cmd_line_entry_point([\"dummy_unused_program_name\",\n                                \"--in_image\",  cmp_test_manager.get_input_filenames()[0],\n                                \"--extname\", \"1\",\n                                \"--in_master\", cmp_test_manager.get_input_filenames()[1],\n-                               \"--config_file\", ini_file_name,\n+                               \"--config_ini\", ini_file_name,\n                                \"--out_image\", cmp_test_manager.get_actual_output_filename()])\n     os.remove(ini_file_name)\n-#    cmp_test_manager.compare_output()\n+    cmp_test_manager.compare_output()\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Bias/tests/python/regression_cmp_7816_test.py": [
                        [
                            "@@ -1,5 +1,5 @@\n #\n-# Copyright (C) 2012-2021 Euclid Science Ground Segment\n+# Copyright (C) 2012-2023 Euclid Science Ground Segment\n #\n # This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n # Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n@@ -49,12 +49,13 @@ def test_main():\n     ini_file.write(\"main_bias_line_start=0\\n\")\n     ini_file.write(\"main_bias_line_end=2085\\n\")\n     ini_file.write(\"combine_method=median\\n\")\n+    ini_file.write(\"outlier_exclusion_kappa=4.0\\n\")\n     ini_file.close()\n     prog.cmd_line_entry_point([\"dummy_unused_program_name\",\n                                \"--in_images\"] +\n                               cmp_test_manager.get_input_filenames() +\n                               [\"--extname\", \"1\",\n-                               \"--config_file\", ini_file_name,\n+                               \"--config_ini\", ini_file_name,\n                                \"--out_master\", cmp_test_manager.get_actual_output_filename()])\n     os.remove(ini_file_name)\n     cmp_test_manager.compare_output()\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Blooming/tests/python/VIS_PTC_test.py": [
                        [
                            "@@ -23,7 +23,7 @@\n :author: tflanet\n \"\"\"\n \n-import py.test\n+import pytest\n import VIS_Blooming.VIS_blooming_calib\n \n class TestVIS_PTC(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_BrighterFatter/python/VIS_BrighterFatter/VIS_BrighterFatter_calib.py": [
                        [
                            "@@ -38,7 +38,6 @@ import numpy as np\n from astropy.io import fits\n \n from VIS_Tasks_Common import Modules, FromToXML\n-from VIS_Tasks_Common.FromToXML import ReadFromXML, load_list_from_file\n from VIS_PyLibrary_Common import pipe_tools\n \n from ST_DM_FilenameProvider.FilenameProvider import FileNameProvider\n@@ -125,9 +124,9 @@ def algo_bfe(list1, list2, ext, workdir, config, quad_name):\n     full_processing(list1, list2, size, sig, ext, workdir)  \n     \n     # covs, PTC, Reach (only for plotting)\n-    covs(workdir, ext, gain, size)\n-    photontransfercurve(workdir, ext, gain, size)\n-    reach(workdir, ext, gain, size)\n+    #covs(workdir, ext, gain, size)\n+    #photontransfercurve(workdir, ext, gain, size)\n+    #reach(workdir, ext, gain, size)\n     \n     # extract kernels, size is a customable parameter\n     kernel_extractor(size, ext, workdir, gain)\n@@ -170,9 +169,9 @@ def mainMethod(args):\n     # getting the data ready\n     \n     logger.info(exposure_quadlist)\n-    heap_list = load_list_from_file(exposure_quadlist)\n-    heap_list_flg = load_list_from_file(flag_list)\n-    \n+    heap_list = FromToXML.load_list_from_file(exposure_quadlist)\n+    heap_list_flg = FromToXML.load_list_from_file(flag_list)\n+      \n     list_data_filename = [heap_list[0][:-4]]\n     for item_data in heap_list:\n       nquad = int(item_data[-3:])\n@@ -197,7 +196,6 @@ def mainMethod(args):\n     kernel_fits = []\n     # quad_name_list is a list of string representing the quadrant\n     quad_name_list = []\n-    #nquad= 1 # to test\n     for ext in range(0, nquad):\n        logger.info (\"==>Processing quadrant %s\", ext)\n        \n@@ -214,6 +212,7 @@ def mainMethod(args):\n        logger.info(list2)\n \n        quad_name = fits.open(list1[0])[1].header[\"EXTNAME\"]\n+       \n \n        image3D_flag_1 = fpe.file_layer_entry_point(list1, \"\", in_flagmap=list1_flg)\n        image3D_flag_2 = fpe.file_layer_entry_point(list2, \"\", in_flagmap=list2_flg)\n@@ -252,8 +251,8 @@ def mainMethod(args):\n     dpdcalib_bfe = os.path.abspath( os.path.join( args.workdir, dpdcalib_bfe))\n     logger.info( \"** Writing Bfe model data product XML to \" + dpdcalib_bfe)\n     logger.info(dpdcalib_bfe)\n-    data_product = FromToXML.create_FileContainer_dp( \"bfe_model\",\n-                                                      os.path.basename( bfe_model_file))\n+    data_product = FromToXML.create_DpdVisFileContainer( datafile_list = [os.path.basename(bfe_model_file)],\n+                                                         vis_product=\"bfe_model\")\n     DmUtils.save_product_metadata( data_product, dpdcalib_bfe)       \n      \n     \n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_BrighterFatter/python/VIS_BrighterFatter/VIS_BrighterFatter_correction.py": [
                        [
                            "@@ -39,8 +39,8 @@ import logging\n logger = logging.getLogger( __name__)\n \n # VIS imports\n-from VIS_ImageTools_M import FPA_quadrant, FlagMap\n from VIS_PyLibrary_Common import pipe_tools\n+from VIS_ImageTools_M import FlagMap, VIS_inpainting\n \n # VIS_Instrument_Tools\n from BrighterFatter.BFE_Correction import FluxConservingBrighterFatterCorrection\n@@ -52,6 +52,7 @@ import time\n ################################################################################\n \n def BrighterFatter_correction(infile,         # input file with dot_ext\n+                      flg_file,          # input of the flag file\n                       kernel_data,       # kernel corresponding to the quadrant\n                       quad_name,    # name of the quadrant associated with the kernel\n                       gain,         # gain of the quadrant\n@@ -61,27 +62,27 @@ def BrighterFatter_correction(infile,         # input file with dot_ext\n   logger.info(  \"#\")\n   logger.info(  \"# BrighterFatter_correction() starting.\")\n   \n-  # Open kernel and input file\n+  # Open input file\n   infile_data = fitsio.read(infile)\n+  # open input flagmap FITS\n+  #flagmap = FlagMap.FlagMap( filename=flg_file).flags\n+  \n+  # inpainting algorithm (not used for the simulated data)\n+  #inpainted_data = VIS_inpainting.inpaint_astropy_convolution(infile_data, flagmap)\n   \n   # BrighterFatter algo\n   logger.info(\"entering FluxConservingBrighterFatterCorrection\")\n   \n   # get the current time in seconds since the epoch\n   start_time = time.time()\n- \n-  coeff = 1 # used to distinguish between simulation of the brighter fatter and correction\n-  corrected_image, _, _ = FluxConservingBrighterFatterCorrection(infile_data, kernel_data, coeff, gain)\n+  \n+  corrected_image, _, _ = FluxConservingBrighterFatterCorrection(infile_data, kernel_data, gain)\n   \n   end_time = time.time()\n   total_time = end_time - start_time\n   logger.info(f\"FluxConservingBrighterFatterCorrection takes {total_time} seconds\")\n   \n-  # because BFE model is not yet ready, when the BF algo doesn't not converge, we want to get in output the input\n-  # TODO : when BFE model is ready, to replace with an assert when the BF algo does not converge\n-  if corrected_image is None:\n-    corrected_image = infile_data\n-  #assert corrected_image != None, 'BrighterFatter corrected image is None'\n+  assert corrected_image is not None, \"BrighterFatter corrected image is None\"\n   \n   # save updated quadrant to FITS\n   with fits.open( infile, memmap=False) as hdul:\n@@ -95,9 +96,11 @@ def defineSpecificProgramOptions():\n \n   ap = argparse.ArgumentParser()\n   ap.add_argument( '--data_in',     type=str, required=True,  help='input data FITS file name')\n-  ap.add_argument( '--kernel',   type=str, required=False, help='path to the kernel')\n-  ap.add_argument( '--quad_name', type=str, required=False, help='name of the quadrant')\n-  ap.add_argument( '--outfile',  type=str, required=False, help='output data FITS file name')\n+  ap.add_argument( '--data_in_flg', type=str, required=True,  help='input data FITS flaag file name')  \n+  ap.add_argument( '--kernel',   type=str, required=True, help='path to the kernel')\n+  ap.add_argument( '--quad_name', type=str, required=True, help='name of the quadrant')\n+  ap.add_argument( '--gain',     type=float, required=True,  help='gain of the quadrant')  \n+  ap.add_argument( '--outfile',  type=str, required=True, help='output data FITS file name')\n   return ap\n \n \n@@ -113,8 +116,10 @@ def mainMethod( args):\n \n \n   BrighterFatter_correction( infile    = args.data_in,\n+                             flg_file  = args.data_in_flg,\n                      kernel =  args.kernel,\n                      quad_name = args.quad_name,\n+                     gain = args.gain,\n                      outfile = args.outfile)\n \n   logger.info( '#')\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_BrighterFatter/python/VIS_BrighterFatter/processing.py": [
                        [
                            "@@ -190,12 +190,12 @@ def full_processing(list1, list2, size, sig, ext, workdir):\n     exp_times = []    \n     for i in range(len(list1)):\n         counts = np.nanmedian(list1[i])\n-        fake_exp = np.around(counts / 1000, 0)\n-        exp_times.append(fake_exp)\n-    for i in range(len(list2)):\n-        counts = np.nanmedian(list2[i])\n-        fake_exp = np.around(counts / 1000, 0)\n+        fake_exp = np.around(counts / 1000)\n         exp_times.append(fake_exp)\n+    \n+    # duplication of exp_times to accound for list2 (contains the same fluence values than list1)    \n+    exp_times = np.tile(exp_times, 2)\n+    \n         \n     for i in range(len(list1)):\n         diff = list2[i] - list1[i]                            \n@@ -215,7 +215,7 @@ def full_processing(list1, list2, size, sig, ext, workdir):\n             i_stds)\n \n     logger.info('Predata saved')\n-     \n+    \n     clean_diffs = []\n     vars = []\n     covs = []\n@@ -319,7 +319,7 @@ def full_processing(list1, list2, size, sig, ext, workdir):\n \n     # note that function groupnpairndiff sorted the difference\n     # images according to exposure time:\n-    \n+    #logger.info(f\"exp_times is : {exp_times}\")\n     group_data = collections.Counter(np.sort(exp_times))\n \n     i_signals_mean = [ 0.5 * (m + n) for m, n in i_signals ]\n@@ -329,7 +329,7 @@ def full_processing(list1, list2, size, sig, ext, workdir):\n     cov_err = []\n     signal_means = []\n     signal_std = []\n-\n+    \n     start_index = 0\n     for exp_time in group_data.keys():\n         n_diffs = group_data[exp_time] // 2\n@@ -337,7 +337,7 @@ def full_processing(list1, list2, size, sig, ext, workdir):\n         var_means.append(np.mean(vars[start_index:end_index]))\n         var_std.append(np.std(vars[start_index:end_index]))\n         cov_means.append(np.nanmean(covs[start_index:end_index], axis=0))\n-        cov_err.append(np.mean(covs_err[start_index:end_index],\n+        cov_err.append(np.nanmean(covs_err[start_index:end_index],\n                                axis=0) / np.sqrt(n_diffs))\n         signal_means.append(np.mean(i_signals_mean[start_index:end_index]))\n         signal_std.append(np.std(i_signals_mean[start_index:end_index]))\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_BrighterFatter/tests/python/VIS_BrighterFatter_test.py": [
                        [
                            "@@ -23,7 +23,7 @@\n :author: tflanet\n \"\"\"\n \n-import py.test\n+import pytest\n import VIS_BrighterFatter.VIS_BrighterFatter_correction\n \n class TestVIS_BrighterFatter_correction(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Cosmics/CMakeLists.txt": [
                        [
                            "@@ -1,85 +0,0 @@\n-CMAKE_MINIMUM_REQUIRED(VERSION 2.8.5)\n-\n-#===============================================================================\n-# Load elements_subdir macro here\n-# Examples:\n-#   For declaring a project module:\n-#         elements_subdir(ElementsExamples)\n-#===============================================================================\n-elements_subdir(VIS_Cosmics)\n-\n-#===============================================================================\n-# Load elements_depends_on_subdirs macro here\n-#   For creating a dependency onto an other accessible module\n-#         elements_depends_on_subdirs(ElementsKernel)\n-#===============================================================================\n-elements_depends_on_subdirs(ElementsKernel)\n-\n-#===============================================================================\n-# Add the find_package macro (a pure CMake command) here to locate the\n-# libraries.\n-# Examples:\n-#          find_package(CppUnit)\n-#===============================================================================\n-find_package(CCfits)\n-find_package(Cfitsio)\n-\n-#===============================================================================\n-# Declare the library dependencies here\n-# Example:\n-#         elements_add_library(ElementsExamples src/Lib/*.cpp\n-#                     INCLUDE_DIRS Boost ElementsKernel\n-#                     LINK_LIBRARIES Boost ElementsKernel\n-#                     PUBLIC_HEADERS ElementsExamples)\n-#===============================================================================\n-elements_add_library(VIS_Cosmics src/lib/*.cpp\n-                     INCLUDE_DIRS ElementsKernel CCfits Cfitsio\n-                     LINK_LIBRARIES ElementsKernel CCfits Cfitsio\n-                     PUBLIC_HEADERS VIS_Cosmics)\n-\n-#===============================================================================\n-# Declare the executables here\n-# Example:\n-# elements_add_executable(ElementsProgramExample src/Program/ProgramExample.cpp\n-#                        INCLUDE_DIRS Boost ElementsExamples\n-#                        LINK_LIBRARIES Boost ElementsExamples)\n-#===============================================================================\n-elements_add_executable(VIS_Lacosmicx src/program/VIS_Lacosmicx.cpp\n-                     INCLUDE_DIRS ElementsKernel VIS_Cosmics\n-                     LINK_LIBRARIES ElementsKernel VIS_Cosmics)\n-\n-#===============================================================================\n-# Declare the Boost tests here\n-# Example:\n-# elements_add_unit_test(BoostClassExample tests/src/Boost/ClassExample_test.cpp\n-#                       EXECUTABLE BoostClassExample_test\n-#                       INCLUDE_DIRS ElementsExamples\n-#                       LINK_LIBRARIES ElementsExamples TYPE Boost)\n-#===============================================================================\n-elements_add_unit_test(functions tests/src/functions_test.cpp \n-                     EXECUTABLE VIS_Cosmics_functions_test\n-                     LINK_LIBRARIES VIS_Cosmics\n-                     TYPE Boost)\n-\n-#===============================================================================\n-# Use the following macro for python modules, scripts and aux files:\n-#  elements_install_python_modules()\n-#  elements_install_scripts()\n-#===============================================================================\n-elements_install_python_modules()\n-\n-#===============================================================================\n-# Declare the Python programs here\n-# Examples :\n-# elements_add_python_program(PythonProgramExample\n-#                             ElementsExamples.PythonProgramExample)\n-#===============================================================================\n-elements_add_python_program(VIS_expandimage VIS_Cosmics.VIS_expandimage)\n-elements_add_python_program(VIS_setcosmic VIS_Cosmics.VIS_setcosmic)\n-\n-#===============================================================================\n-# Add the elements_install_conf_files macro\n-# Examples:\n-#          elements_install_conf_files()\n-#===============================================================================\n-elements_install_conf_files()\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Cosmics/VIS_Cosmics/VIS_Lacosmicx.h": [
                        [
                            "@@ -1,69 +0,0 @@\n-/**\n- * @file VIS_Cosmics/VIS_Lacosmicx.h\n- * @date 03/02/16\n- * @author user\n- */\n-\n-#ifndef _LACOSMICX_LACOSMICX_H\n-#define _LACOSMICX_LACOSMICX_H\n-\n-#include<iostream>\n-\n-class lacosmicx {\n-\n-  /*\n-   sigclip : increase this if you detect cosmics where there are none. Default is 5.0, a good value for earth-bound images.\n-   objlim : increase this if normal stars are detected as cosmics. Default is 5.0, a good value for earth-bound images.\n-\n-   Constructor of the cosmic class, takes a 2D numpy array of your image as main argument.\n-   sigclip : laplacian-to-noise limit for cosmic ray detection\n-   objlim : minimum contrast between laplacian image and fine structure image. Use 5.0 if your image is undersampled, HST, ...\n-\n-   satlevel : if we find agglomerations of pixels above this level, we consider it to be a saturated star and\n-   do not try to correct and pixels around it. A negative satlevel skips this feature.\n-\n-   pssl is the previously subtracted sky level !\n-\n-   real   gain    = 1.0          # gain (electrons/ADU) (0=unknown)\n-   real   readn   = 6.5         # read noise (electrons) (0=unknown)\n-   ##gain0  string statsec = \"*,*\"       # section to use for automatic computation of gain\n-   real   skyval  = 0.           # sky level that has been subtracted (ADU)\n-   real   sigclip = 4.5          # detection limit for cosmic rays (sigma)\n-   real   sigfrac = 035          # fractional detection limit for neighbouring pixels\n-   real   objlim  = 3.5           # contrast limit between CR and underlying object\n-   int    niter   = 4            # maximum number of iterations\n-\n-   */\n-\n-public:\n-  friend ostream &operator<<(ostream &out, lacosmicx *l);\n-  int nx;\n-  int ny;\n-  int nxny;\n-  float* data;\n-  float* cleanarr;\n-  bool* crmask;\n-  bool* mask;\n-  float pssl;\n-  float gain;\n-  float readnoise;\n-  float sigclip;\n-  float sigfrac;\n-  float objlim;\n-  float satlevel;\n-  float sigcliplow;\n-  float backgroundlevel;\n-  bool verbose;\n-  bool robust;\n-  lacosmicx(float* data, bool* mask, int nx, int ny, float pssl = 0.0,\n-      float gain = 1.0, float readnoise = 6.5, float sigclip = 4.5,\n-      float sigfrac = 0.3, float objlim = 5.0, float satlevel = 50000.0,\n-      bool robust = false, bool verbose = true);\n-  ~lacosmicx();\n-  void run(int maxiter = 4);\n-  void findsatstars();\n-  int lacosmiciteration();\n-  void clean();\n-};\n-\n-#endif /* LACOSMICX_H_ */\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Cosmics/VIS_Cosmics/functions.h": [
                        [
                            "@@ -1,35 +0,0 @@\n-/**\n- * @file VIS_Cosmics/functions.h\n- * @date 03/02/16\n- * @author user\n- */\n-\n-#ifndef _LACOSMICX_FUNCTIONS_H\n-#define _LACOSMICX_FUNCTIONS_H\n-\n-float median(float* a, int n);\n-float optmed25(float* a);\n-float optmed3(float* a);\n-float optmed7(float* a);\n-float optmed5(float* a);\n-float optmed9(float* a);\n-float* medfilt3(float* data, int nx, int ny);\n-float* medfilt5(float* data, int nx, int ny);\n-float* medfilt7(float* data, int nx, int ny);\n-float* sepmedfilt3(float* data, int nx, int ny);\n-float* sepmedfilt5(float* data, int nx, int ny);\n-float* sepmedfilt7(float* data, int nx, int ny);\n-float* sepmedfilt9(float* data, int nx, int ny);\n-bool* dilate(bool* data, int iter, int nx, int ny);\n-float* subsample(float* data, int nx, int ny);\n-float* laplaceconvolve(float* data, int nx, int ny);\n-float* rebin(float* data, int nx, int ny);\n-bool* growconvolve(bool* data, int nx, int ny);\n-float* fromfits(char* filename, int hdunum, bool verbose = true);\n-bool* boolfromfits(char* filename, bool verbose = true);\n-void tofits(char* filename, float* data, int nx, int ny, int hdunum,\n-    char* hdr = (char *) \"\", bool verbose = true);\n-void booltofits(char* filename, bool* data, int nx, int ny, int hdunum,\n-    char* hdr = (char *) \"\", bool verbose = true);\n-void printfitserror(int status);\n-#endif /* FUNCTION_H_ */\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Cosmics/conf/VIS_Cosmics/VIS_expandimage.conf": [
                        [
                            "@@ -1 +0,0 @@\n-# Write your program options here. e.g. : option = string\n\\ No newline at end of file\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Cosmics/conf/VIS_Cosmics/VIS_setcosmic.conf": [
                        [
                            "@@ -1 +0,0 @@\n-# Write your program options here. e.g. : option = string\n\\ No newline at end of file\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Cosmics/conf/VIS_Lacosmicx.conf": [
                        [
                            "@@ -1,5 +0,0 @@\n-###############################################################################\n-#\n-# Configuration file for the <VIS_Lacosmicx> executable \n-#\n-###############################################################################\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Cosmics/doc/doc_module.rst": [
                        [
                            "@@ -1,25 +0,0 @@\n-Module Overview <----------------- TO BE WRITTEN ------------------------>\n-==========================================================================\n-\n-.. important:: Please edit ./@_el_pack_short@/doc/module.rst to replace this section.\n-\n-.. The following sections can be replaced or updated. \n-   You may also use a toctree directive for sub documents. \n-\n-Introduction\n-------------\n-\n-Purpose of this Elements Module.\n-\n-What does it do?\n-\n-Architecture overview\n----------------------\n-\n-Highlevel overview of the Module.\n-\n-How is it done?\n-\n-  1. List of packages\n-  2. Explanation of used design patterns\n-  3. Useful UML diagrams: UML Package, UML Structure and Deployment, UML Use Case\n\\ No newline at end of file\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Cosmics/python/VIS_Cosmics/VIS_expandimage.py": [
                        [
                            "@@ -1,72 +0,0 @@\n-import sys\n-from astropy.io import fits\n-from VIS_PyLibrary_Common import pipe_tools\n-from VIS_ImageTools_M import FlagMap\n-import argparse\n-import numpy as np\n-\n-# Euclid specific imports\n-import ElementsKernel.Logging as log\n-\n-def defineSpecificProgramOptions():\n-    \"\"\"\n-    @brief Allows to define the (command line and configuration file) options\n-    specific to this program\n-\n-    @details\n-        See the Elements documentation for more details.\n-    @return\n-        An  ArgumentParser.\n-    \"\"\"\n-\n-    parser = argparse.ArgumentParser()\n-\n-    parser.add_argument('--i', type=str,\n-                        help='input image to pad', dest='input_image')\n-    parser.add_argument('--o', type=str,\n-                        help='output padded image', dest='output_image')\n-\n-    return parser\n-\n-\n-def mainMethod(args):\n-    \"\"\"\n-    @brief The \"main\" method.\n-    @details\n-        This method is the entry point to the program. In this sense, it is\n-        similar to a main (and it is why it is called mainMethod()).\n-    \"\"\"\n-\n-    logger = log.getLogger( __name__)\n-    logger.info( '#')\n-    logger.info( '# Entering %s mainMethod()' % __name__)\n-    logger.info( '# command line: ' + pipe_tools.get_erun_commandline())\n-    pipe_tools.log_task_environment( logger)\n-    logger.info( '#')\n-\n-    # Read arguments\n-    input_image = args.input_image\n-    output_image = args.output_image\n-\n-    hdulist = fits.open(input_image, memmap=False)\n-    primaryheader=hdulist[0].header\n-    data=hdulist[1].data\n-    header=hdulist[1].header\n-# TODO: read padding from config(\"Cosmics\")\n-    pad_data=np.lib.pad(data, (5,5), 'symmetric')\n-\n-    hdulist = fits.HDUList()\n-    # Add primary header\n-    hdulist.append ( fits.PrimaryHDU(data=None, header=primaryheader) )\n-    # Add first extension\n-    ### TBD: test array data type\n-    hdu = fits.ImageHDU(data=pad_data, header=header)\n-    hdulist.append (hdu)\n-\n-    # Write in filename\n-    hdulist.writeto(output_image, overwrite=True)\n-    hdulist.close()\n-\n-    logger.info('#')\n-    logger.info('# Exiting %s mainMethod()' % __name__)\n-    logger.info('#')\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Cosmics/python/VIS_Cosmics/VIS_setcosmic.py": [
                        [
                            "@@ -1,79 +0,0 @@\n-from __future__ import division, print_function\n-import sys\n-if sys.version_info[0] < 3:\n-    from future_builtins import *\n-\n-from VIS_PyLibrary_Common import pipe_tools\n-from VIS_ImageTools_M import FlagMap\n-from astropy.io import fits\n-import argparse\n-import numpy as np\n-\n-# Euclid specific imports\n-import ElementsKernel.Logging as log\n-\n-def defineSpecificProgramOptions():\n-    \"\"\"\n-    @brief Allows to define the (command line and configuration file) options\n-    specific to this program\n-    \n-    @details\n-        See the Elements documentation for more details.\n-    @return\n-        An  ArgumentParser.\n-    \"\"\"\n-    \n-    parser = argparse.ArgumentParser()\n-\n-    parser.add_argument('--i', type=str, \n-                        help='input flag map from lacosmic', dest='input_flag_lacosmic')\n-    parser.add_argument('--p', type=str, \n-                        help='input flag map from previous treatment', dest='input_flag_prev') \n-    parser.add_argument('--o', type=str, \n-                        help='output flag map', dest='output_flag')\n-   \n-\n-    return parser\n-\n-\n-def mainMethod(args):\n-    \"\"\"\n-    @brief The \"main\" method.\n-    @details\n-        This method is the entry point to the program. In this sense, it is \n-        similar to a main (and it is why it is called mainMethod()).\n-    \"\"\"\n-\n-    logger = log.getLogger( __name__)\n-    logger.info( '#')\n-    logger.info( '# Entering %s mainMethod()' % __name__)\n-    logger.info( '# command line: ' + pipe_tools.get_erun_commandline())\n-    pipe_tools.log_task_environment( logger)\n-    logger.info( '#')\n-\n-    # Read arguments\n-\n-    input_flag_lacosmic = args.input_flag_lacosmic\n-    input_flag_prev = args.input_flag_prev\n-    output_flag = args.output_flag\n-\n-    #To read the input flagmap from lacosmic\n-    flagmap_cosmic = FlagMap.FlagMap(filename=input_flag_lacosmic)\n-# TODO: read padding from config(\"Cosmics\")\n-    flagmap_cosmic.flags = flagmap_cosmic.flags[5:-5,5:-5]\n-\n-    #To read the input flagmap from previous treatment\n-    flagmap0 = FlagMap.FlagMap(filename=input_flag_prev)\n-\n-    #convert 8 bit unsigned integer mask from cosmic ray removal module to boolean array expected by the 'set' method of class FlagMap\n-    flagmap_cosmic.flags = flagmap_cosmic.flags.astype('bool')\n-\n-    #setting the right bit flag for cosmic rays\n-    flagmap0.set('COSMIC',flagmap_cosmic.flags)\n-\n-    #writing the final mask\n-    flagmap0.write(output_flag)\n-   \n-    logger.info('#')\n-    logger.info('# Exiting %s mainMethod()' % __name__)\n-    logger.info('#')\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Cosmics/python/VIS_Cosmics/__init__.py": [
                        [
                            "@@ -1,2 +0,0 @@\n-from pkgutil import extend_path\n-__path__ = extend_path(__path__, __name__)\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Cosmics/src/lib/functions.cpp": [
                        [
                            "@@ -1,1240 +0,0 @@\n-/**\n- * @file src/lib/functions.cpp\n- * @date 03/02/16\n- * @author user\n- */\n-\n-#include \"VIS_Cosmics/functions.h\"\n-\n-using namespace std;\n-#include<malloc.h>\n-#include<stdlib.h>\n-#include<iostream>\n-#include<math.h>\n-#include\"fitsio.h\"\n-#include<string.h>\n-#include<stdio.h>\n-#include<omp.h>\n-\n-//namespace VIS_Cosmics {\n-//{\n-\n-#define ELEM_SWAP(a,b) { float t=(a);(a)=(b);(b)=t; }\n-\n-float median(float* a, int n) {\n-  /*\n-   *  This Quickselect routine is based on the algorithm described in\n-   *  \"Numerical recipes in C\", Second Edition,\n-   *  Cambridge University Press, 1992, Section 8.5, ISBN 0-521-43108-5\n-   *  This code by Nicolas Devillard - 1998. Public domain.\n-   */\n-\n-  //Make a copy of the array\n-  float* arr;\n-  arr = new float[n];\n-  float med;\n-  int i;\n-  for (i = 0; i < n; i++) {\n-    arr[i] = a[i];\n-\n-  }\n-  int low, high;\n-  int median;\n-  int middle, ll, hh;\n-\n-  low = 0;\n-  high = n - 1;\n-  median = (low + high) / 2;\n-  for (;;) {\n-    if (high <= low) { /* One element only */\n-      med = arr[median];\n-      delete[] arr;\n-      return med;\n-    }\n-\n-    if (high == low + 1) { /* Two elements only */\n-      if (arr[low] > arr[high])\n-        ELEM_SWAP(arr[low], arr[high]);\n-      med = arr[median];\n-      delete[] arr;\n-      return med;\n-    }\n-\n-    /* Find median of low, middle and high items; swap into position low */\n-    middle = (low + high) / 2;\n-    if (arr[middle] > arr[high])\n-      ELEM_SWAP(arr[middle], arr[high]);\n-    if (arr[low] > arr[high])\n-      ELEM_SWAP(arr[low], arr[high]);\n-    if (arr[middle] > arr[low])\n-      ELEM_SWAP(arr[middle], arr[low]);\n-\n-    /* Swap low item (now in position middle) into position (low+1) */ELEM_SWAP(arr[middle], arr[low+1]);\n-\n-    /* Nibble from each end towards middle, swapping items when stuck */\n-    ll = low + 1;\n-    hh = high;\n-    for (;;) {\n-      do\n-        ll++;\n-      while (arr[low] > arr[ll]);\n-      do\n-        hh--;\n-      while (arr[hh] > arr[low]);\n-\n-      if (hh < ll)\n-        break;\n-\n-      ELEM_SWAP(arr[ll], arr[hh]);\n-    }\n-\n-    /* Swap middle item (in position low) back into correct position */ELEM_SWAP(arr[low], arr[hh]);\n-\n-    /* Re-set active partition */\n-    if (hh <= median)\n-      low = ll;\n-    if (hh >= median)\n-      high = hh - 1;\n-  }\n-\n-}\n-\n-#undef ELEM_SWAP\n-\n-/** All of the optimized median methods were written by Nicolas Devillard and are in public domain */\n-#define PIX_SORT(a,b) { if (a>b) PIX_SWAP(a,b); }\n-#define PIX_SWAP(a,b) { float temp=a;a=b;b=temp; }\n-\n-/*----------------------------------------------------------------------------\n- Function :   opt_med3()\n- In       :   pointer to array of 3 pixel values\n- Out      :   a pixelvalue\n- Job      :   optimized search of the median of 3 pixel values\n- Notice   :   found on sci.image.processing\n- cannot go faster unless assumptions are made\n- on the nature of the input signal.\n- ---------------------------------------------------------------------------*/\n-\n-float optmed3(float* p) {\n-  PIX_SORT(p[0],p[1]);PIX_SORT(p[1],p[2]);PIX_SORT(p[0],p[1]);\n-  return (p[1]);\n-}\n-\n-/*----------------------------------------------------------------------------\n- Function :   opt_med5()\n- In       :   pointer to array of 5 pixel values\n- Out      :   a pixelvalue\n- Job      :   optimized search of the median of 5 pixel values\n- Notice   :   found on sci.image.processing\n- cannot go faster unless assumptions are made\n- on the nature of the input signal.\n- ---------------------------------------------------------------------------*/\n-\n-float optmed5(float* p) {\n-  PIX_SORT(p[0],p[1]);PIX_SORT(p[3],p[4]);PIX_SORT(p[0],p[3]);\n-  PIX_SORT(p[1],p[4]);PIX_SORT(p[1],p[2]);PIX_SORT(p[2],p[3]);\n-  PIX_SORT(p[1],p[2]);\n-  return (p[2]);\n-}\n-\n-/*----------------------------------------------------------------------------\n- Function :   opt_med7()\n- In       :   pointer to array of 7 pixel values\n- Out      :   a pixelvalue\n- Job      :   optimized search of the median of 7 pixel values\n- Notice   :   found on sci.image.processing\n- cannot go faster unless assumptions are made\n- on the nature of the input signal.\n- ---------------------------------------------------------------------------*/\n-\n-float optmed7(float* p) {\n-  PIX_SORT(p[0], p[5]);PIX_SORT(p[0], p[3]);PIX_SORT(p[1], p[6]);\n-  PIX_SORT(p[2], p[4]);PIX_SORT(p[0], p[1]);PIX_SORT(p[3], p[5]);\n-  PIX_SORT(p[2], p[6]);PIX_SORT(p[2], p[3]);PIX_SORT(p[3], p[6]);\n-  PIX_SORT(p[4], p[5]);PIX_SORT(p[1], p[4]);PIX_SORT(p[1], p[3]);\n-  PIX_SORT(p[3], p[4]);\n-  return (p[3]);\n-}\n-/*----------------------------------------------------------------------------\n- Function :   opt_med9()\n- In       :   pointer to an array of 9 pixelvalues\n- Out      :   a pixelvalue\n- Job      :   optimized search of the median of 9 pixelvalues\n- Notice   :   in theory, cannot go faster without assumptions on the\n- signal.\n- Formula from:\n- XILINX XCELL magazine, vol. 23 by John L. Smith\n-\n- The input array is modified in the process\n- The result array is guaranteed to contain the median\n- value\n- in middle position, but other elements are NOT sorted.\n- ---------------------------------------------------------------------------*/\n-\n-float optmed9(float* p) {\n-  PIX_SORT(p[1], p[2]);PIX_SORT(p[4], p[5]);PIX_SORT(p[7], p[8]);\n-  PIX_SORT(p[0], p[1]);PIX_SORT(p[3], p[4]);PIX_SORT(p[6], p[7]);\n-  PIX_SORT(p[1], p[2]);PIX_SORT(p[4], p[5]);PIX_SORT(p[7], p[8]);\n-  PIX_SORT(p[0], p[3]);PIX_SORT(p[5], p[8]);PIX_SORT(p[4], p[7]);\n-  PIX_SORT(p[3], p[6]);PIX_SORT(p[1], p[4]);PIX_SORT(p[2], p[5]);\n-  PIX_SORT(p[4], p[7]);PIX_SORT(p[4], p[2]);PIX_SORT(p[6], p[4]);\n-  PIX_SORT(p[4], p[2]);\n-  return (p[4]);\n-}\n-\n-/*----------------------------------------------------------------------------\n- Function :   opt_med25()\n- In       :   pointer to an array of 25 pixelvalues\n- Out      :   a pixelvalue\n- Job      :   optimized search of the median of 25 pixelvalues\n- Notice   :   in theory, cannot go faster without assumptions on the\n- signal.\n- Code taken from Graphic Gems.\n- ---------------------------------------------------------------------------*/\n-\n-float optmed25(float* p) {\n-\n-  PIX_SORT(p[0], p[1]);PIX_SORT(p[3], p[4]);PIX_SORT(p[2], p[4]);\n-  PIX_SORT(p[2], p[3]);PIX_SORT(p[6], p[7]);PIX_SORT(p[5], p[7]);\n-  PIX_SORT(p[5], p[6]);PIX_SORT(p[9], p[10]);PIX_SORT(p[8], p[10]);\n-  PIX_SORT(p[8], p[9]);PIX_SORT(p[12], p[13]);PIX_SORT(p[11], p[13]);\n-  PIX_SORT(p[11], p[12]);PIX_SORT(p[15], p[16]);PIX_SORT(p[14], p[16]);\n-  PIX_SORT(p[14], p[15]);PIX_SORT(p[18], p[19]);PIX_SORT(p[17], p[19]);\n-  PIX_SORT(p[17], p[18]);PIX_SORT(p[21], p[22]);PIX_SORT(p[20], p[22]);\n-  PIX_SORT(p[20], p[21]);PIX_SORT(p[23], p[24]);PIX_SORT(p[2], p[5]);\n-  PIX_SORT(p[3], p[6]);PIX_SORT(p[0], p[6]);PIX_SORT(p[0], p[3]);\n-  PIX_SORT(p[4], p[7]);PIX_SORT(p[1], p[7]);PIX_SORT(p[1], p[4]);\n-  PIX_SORT(p[11], p[14]);PIX_SORT(p[8], p[14]);PIX_SORT(p[8], p[11]);\n-  PIX_SORT(p[12], p[15]);PIX_SORT(p[9], p[15]);PIX_SORT(p[9], p[12]);\n-  PIX_SORT(p[13], p[16]);PIX_SORT(p[10], p[16]);PIX_SORT(p[10], p[13]);\n-  PIX_SORT(p[20], p[23]);PIX_SORT(p[17], p[23]);PIX_SORT(p[17], p[20]);\n-  PIX_SORT(p[21], p[24]);PIX_SORT(p[18], p[24]);PIX_SORT(p[18], p[21]);\n-  PIX_SORT(p[19], p[22]);PIX_SORT(p[8], p[17]);PIX_SORT(p[9], p[18]);\n-  PIX_SORT(p[0], p[18]);PIX_SORT(p[0], p[9]);PIX_SORT(p[10], p[19]);\n-  PIX_SORT(p[1], p[19]);PIX_SORT(p[1], p[10]);PIX_SORT(p[11], p[20]);\n-  PIX_SORT(p[2], p[20]);PIX_SORT(p[2], p[11]);PIX_SORT(p[12], p[21]);\n-  PIX_SORT(p[3], p[21]);PIX_SORT(p[3], p[12]);PIX_SORT(p[13], p[22]);\n-  PIX_SORT(p[4], p[22]);PIX_SORT(p[4], p[13]);PIX_SORT(p[14], p[23]);\n-  PIX_SORT(p[5], p[23]);PIX_SORT(p[5], p[14]);PIX_SORT(p[15], p[24]);\n-  PIX_SORT(p[6], p[24]);PIX_SORT(p[6], p[15]);PIX_SORT(p[7], p[16]);\n-  PIX_SORT(p[7], p[19]);PIX_SORT(p[13], p[21]);PIX_SORT(p[15], p[23]);\n-  PIX_SORT(p[7], p[13]);PIX_SORT(p[7], p[15]);PIX_SORT(p[1], p[9]);\n-  PIX_SORT(p[3], p[11]);PIX_SORT(p[5], p[17]);PIX_SORT(p[11], p[17]);\n-  PIX_SORT(p[9], p[17]);PIX_SORT(p[4], p[10]);PIX_SORT(p[6], p[12]);\n-  PIX_SORT(p[7], p[14]);PIX_SORT(p[4], p[6]);PIX_SORT(p[4], p[7]);\n-  PIX_SORT(p[12], p[14]);PIX_SORT(p[10], p[14]);PIX_SORT(p[6], p[7]);\n-  PIX_SORT(p[10], p[12]);PIX_SORT(p[6], p[10]);PIX_SORT(p[6], p[17]);\n-  PIX_SORT(p[12], p[17]);PIX_SORT(p[7], p[17]);PIX_SORT(p[7], p[10]);\n-  PIX_SORT(p[12], p[18]);PIX_SORT(p[7], p[12]);PIX_SORT(p[10], p[18]);\n-  PIX_SORT(p[12], p[20]);PIX_SORT(p[10], p[20]);PIX_SORT(p[10], p[12]);\n-\n-  return (p[12]);\n-}\n-\n-#undef PIX_SORT\n-#undef PIX_SWAP\n-\n-/**\n- * All of these median filters don't do anything to a border of pixels the size of the half width\n- */\n-float* medfilt3(float* data, int nx, int ny) {\n-  /**\n-   * To save on space and computation we just leave the border pixels alone. Most data has blank edges\n-   * and funny things happen at the edges anyway so we don't worry too much about it.\n-   *\n-   */\n-\n-  int i;\n-  int j;\n-  int nxj;\n-  int nxny = nx * ny;\n-\n-  float* output;\n-  output = new float[nxny];\n-  int k, l, nxk;\n-  float* medarr;\n-  int counter;\n-\n-#pragma omp parallel firstprivate(output,data,nx,ny) private(i,j,k,l,medarr,nxj,counter,nxk)\n-  {\n-    medarr = new float[9];\n-\n-#pragma omp for nowait\n-    for (j = 1; j < ny - 1; j++) {\n-      nxj = nx * j;\n-      for (i = 1; i < nx - 1; i++) {\n-\n-        counter = 0;\n-        for (k = -1; k < 2; k++) {\n-          nxk = nx * k;\n-          for (l = -1; l < 2; l++) {\n-            medarr[counter] = data[nxj + i + nxk + l];\n-            counter++;\n-          }\n-        }\n-\n-        output[nxj + i] = optmed9(medarr);\n-      }\n-    }\n-\n-    delete[] medarr;\n-  }\n-\n-  for (i = 0; i < nx; i++) {\n-    output[i] = data[i];\n-    output[nxny - nx + i] = data[nxny - nx + i];\n-  }\n-  for (i = 0; i < ny; i++) {\n-    nxj = nx * i;\n-    output[nxj] = data[nxj];\n-    output[nxj + nx - 1] = data[nxj + nx - 1];\n-  }\n-\n-  return output;\n-}\n-\n-float* medfilt5(float* data, int nx, int ny) {\n-  /**\n-   * To save on space and computation we just leave the border pixels alone. Most data has blank edges\n-   * and funny things happen at the edges anyway so we don't worry too much about it.\n-   *\n-   */\n-\n-  int i;\n-  int j;\n-  int nxj;\n-  int nxny = nx * ny;\n-\n-  float* output;\n-  output = new float[nxny];\n-  int k, l, nxk;\n-  float* medarr;\n-  int counter;\n-\n-#pragma omp parallel firstprivate(output,data,nx,ny) private(i,j,k,l,medarr,nxj,counter,nxk)\n-  {\n-    medarr = new float[25];\n-\n-#pragma omp for nowait\n-    for (j = 2; j < ny - 2; j++) {\n-      nxj = nx * j;\n-      for (i = 2; i < nx - 2; i++) {\n-\n-        counter = 0;\n-        for (k = -2; k < 3; k++) {\n-          nxk = nx * k;\n-          for (l = -2; l < 3; l++) {\n-            medarr[counter] = data[nxj + i + nxk + l];\n-            counter++;\n-          }\n-        }\n-\n-        output[nxj + i] = optmed25(medarr);\n-      }\n-    }\n-\n-    delete[] medarr;\n-  }\n-\n-  for (i = 0; i < nx; i++) {\n-    output[i] = data[i];\n-    output[i + nx] = data[i + nx];\n-    output[nxny - nx + i] = data[nxny - nx + i];\n-    output[nxny - nx - nx + i] = data[nxny - nx - nx + i];\n-  }\n-  for (i = 0; i < ny; i++) {\n-    nxj = nx * i;\n-    output[nxj] = data[nxj];\n-    output[nxj + 1] = data[nxj + 1];\n-    output[nxj + nx - 1] = data[nxj + nx - 1];\n-    output[nxj + nx - 2] = data[nxj + nx - 2];\n-  }\n-\n-  return output;\n-}\n-\n-float* medfilt7(float* data, int nx, int ny) {\n-  /**\n-   * To save on space and computation we just leave the border pixels alone. Most data has blank edges\n-   * and funny things happen at the edges anyway so we don't worry too much about it.\n-   *\n-   */\n-\n-  int i;\n-  int j;\n-  int nxj;\n-  int nxny = nx * ny;\n-\n-  float* output;\n-  output = new float[nxny];\n-  int k, l, nxk;\n-  float* medarr;\n-  int counter;\n-\n-#pragma omp parallel firstprivate(output,data,nx,ny) private(i,j,k,l,medarr,nxj,counter,nxk)\n-  {\n-    medarr = new float[49];\n-\n-#pragma omp for nowait\n-    for (j = 3; j < ny - 3; j++) {\n-      nxj = nx * j;\n-      for (i = 3; i < nx - 3; i++) {\n-\n-        counter = 0;\n-        for (k = -3; k < 4; k++) {\n-          nxk = nx * k;\n-          for (l = -3; l < 4; l++) {\n-            medarr[counter] = data[nxj + i + nxk + l];\n-            counter++;\n-          }\n-        }\n-\n-        output[nxj + i] = median(medarr, 49);\n-      }\n-    }\n-\n-    delete[] medarr;\n-  }\n-\n-  for (i = 0; i < nx; i++) {\n-    output[i] = data[i];\n-    output[i + nx] = data[i + nx];\n-    output[i + nx + nx] = data[i + nx + nx];\n-    output[nxny - nx + i] = data[nxny - nx + i];\n-    output[nxny - nx - nx + i] = data[nxny - nx - nx + i];\n-    output[nxny - nx - nx - nx + i] = data[nxny - nx - nx - nx + i];\n-  }\n-  for (i = 0; i < ny; i++) {\n-    nxj = nx * i;\n-    output[nxj] = data[nxj];\n-    output[nxj + 1] = data[nxj + 1];\n-    output[nxj + 2] = data[nxj + 2];\n-    output[nxj + nx - 1] = data[nxj + nx - 1];\n-    output[nxj + nx - 2] = data[nxj + nx - 2];\n-    output[nxj + nx - 3] = data[nxj + nx - 3];\n-  }\n-\n-  return output;\n-}\n-\n-\n-\n-float* sepmedfilt3(float* data, int nx, int ny) {\n-  //Just ignore the borders, fill them with data as strange things happen along the edges anyway\n-  int nxny = nx * ny;\n-\n-  float* rowmed;\n-  rowmed = new float[nxny];\n-  int i;\n-  int j;\n-  int nxj;\n-\n-  //The median seperates so we can median the rows and then median the columns\n-  float* medarr;\n-#pragma omp parallel firstprivate(data,rowmed,nx,ny) private(i,j,nxj,medarr)\n-  {\n-    medarr = new float[3];\n-\n-#pragma omp for nowait\n-    for (j = 0; j < ny; j++) {\n-      nxj = nx * j;\n-      for (i = 1; i < nx - 1; i++) {\n-        medarr[0] = data[nxj + i];\n-        medarr[1] = data[nxj + i - 1];\n-        medarr[2] = data[nxj + i + 1];\n-        rowmed[nxj + i] = optmed3(medarr);\n-      }\n-    }\n-    delete[] medarr;\n-  }\n-\n-  float* output;\n-  output = new float[nxny];\n-\n-#pragma omp parallel firstprivate(rowmed,output,nx,ny) private(i,j,nxj,medarr)\n-  {\n-    medarr = new float[3];\n-\n-#pragma omp for nowait\n-    for (j = 1; j < ny - 1; j++) {\n-      nxj = nx * j;\n-      for (i = 1; i < nx - 1; i++) {\n-\n-        medarr[0] = rowmed[i + nxj - nx];\n-        medarr[1] = rowmed[i + nxj + nx];\n-        medarr[2] = rowmed[i + nxj];\n-        output[nxj + i] = optmed3(medarr);\n-      }\n-    }\n-    delete medarr;\n-  }\n-  delete[] rowmed;\n-  //Fill up the skipped borders\n-#pragma omp parallel for firstprivate(output,nx,ny,nxny) private(i,j,nxj)\n-  for (i = 0; i < nx; i++) {\n-    output[i] = data[i];\n-    output[nxny - nx + i] = data[nxny - nx + i];\n-  }\n-#pragma omp parallel for firstprivate(output,nx,ny) private(i,nxj)\n-  for (i = 0; i < ny; i++) {\n-    nxj = nx * i;\n-    output[nxj] = data[nxj];\n-    output[nxj + nx - 1] = data[nxj + nx - 1];\n-  }\n-\n-  return output;\n-}\n-\n-float* sepmedfilt5(float* data, int nx, int ny) {\n-  //Just ignore the borders, fill them with data as strange things happen along the edges anyway\n-  int nxny = nx * ny;\n-\n-  float* rowmed;\n-  rowmed = new float[nxny];\n-  int i;\n-  int j;\n-  int nxj;\n-\n-  //The median seperates so we can median the rows and then median the columns\n-  float* medarr;\n-#pragma omp parallel firstprivate(data,rowmed,nx,ny) private(i,j,nxj,medarr)\n-  {\n-    medarr = new float[5];\n-\n-#pragma omp for nowait\n-    for (j = 0; j < ny; j++) {\n-      nxj = nx * j;\n-      for (i = 2; i < nx - 2; i++) {\n-        medarr[0] = data[nxj + i];\n-        medarr[1] = data[nxj + i - 1];\n-        medarr[2] = data[nxj + i + 1];\n-        medarr[3] = data[nxj + i - 2];\n-        medarr[4] = data[nxj + i + 2];\n-        rowmed[nxj + i] = optmed5(medarr);\n-      }\n-    }\n-    delete[] medarr;\n-  }\n-\n-  float* output;\n-  output = new float[nxny];\n-\n-#pragma omp parallel firstprivate(rowmed,output,nx,ny) private(i,j,nxj,medarr)\n-  {\n-    medarr = new float[5];\n-\n-#pragma omp for nowait\n-    for (j = 2; j < ny - 2; j++) {\n-      nxj = nx * j;\n-      for (i = 2; i < nx - 2; i++) {\n-\n-        medarr[0] = rowmed[i + nxj - nx];\n-        medarr[1] = rowmed[i + nxj + nx];\n-        medarr[2] = rowmed[i + nxj + nx + nx];\n-        medarr[3] = rowmed[i + nxj - nx - nx];\n-        medarr[4] = rowmed[i + nxj];\n-        output[nxj + i] = optmed5(medarr);\n-      }\n-    }\n-    delete medarr;\n-  }\n-  delete[] rowmed;\n-  //Fill up the skipped borders\n-#pragma omp parallel for firstprivate(output,nx,ny,nxny) private(i,j,nxj)\n-  for (i = 0; i < nx; i++) {\n-    output[i] = data[i];\n-    output[i + nx] = data[i + nx];\n-    output[nxny - nx + i] = data[nxny - nx + i];\n-    output[nxny - nx - nx + i] = data[nxny - nx - nx + i];\n-  }\n-#pragma omp parallel for firstprivate(output,nx,ny) private(i,nxj)\n-  for (i = 0; i < ny; i++) {\n-    nxj = nx * i;\n-    output[nxj] = data[nxj];\n-    output[nxj + 1] = data[nxj + 1];\n-    output[nxj + nx - 1] = data[nxj + nx - 1];\n-    output[nxj + nx - 2] = data[nxj + nx - 2];\n-  }\n-\n-  return output;\n-}\n-\n-float* sepmedfilt7(float* data, int nx, int ny) {\n-  //Just ignore the borders, fill them with data as strange things happen along the edges anyway\n-  int nxny = nx * ny;\n-\n-  float* rowmed;\n-  rowmed = new float[nxny];\n-  int i;\n-  int j;\n-  int nxj;\n-\n-  //The median separates so we can median the rows and then median the columns\n-  float* medarr;\n-#pragma omp parallel firstprivate(data,rowmed,nx,ny) private(i,j,nxj,medarr)\n-  {\n-    medarr = new float[7];\n-\n-#pragma omp for nowait\n-    for (j = 0; j < ny; j++) {\n-      nxj = nx * j;\n-      for (i = 3; i < nx - 3; i++) {\n-        medarr[0] = data[nxj + i];\n-        medarr[1] = data[nxj + i - 1];\n-        medarr[2] = data[nxj + i + 1];\n-        medarr[3] = data[nxj + i - 2];\n-        medarr[4] = data[nxj + i + 2];\n-        medarr[5] = data[nxj + i - 3];\n-        medarr[6] = data[nxj + i + 3];\n-        rowmed[nxj + i] = optmed7(medarr);\n-      }\n-    }\n-    delete[] medarr;\n-  }\n-\n-  float* output;\n-  output = new float[nxny];\n-\n-#pragma omp parallel firstprivate(rowmed,output,nx,ny) private(i,j,nxj,medarr)\n-  {\n-    medarr = new float[9];\n-\n-#pragma omp for nowait\n-    for (j = 3; j < ny - 3; j++) {\n-      nxj = nx * j;\n-      for (i = 3; i < nx - 3; i++) {\n-\n-        medarr[0] = rowmed[i + nxj - nx];\n-        medarr[1] = rowmed[i + nxj + nx];\n-        medarr[2] = rowmed[i + nxj + nx + nx];\n-        medarr[3] = rowmed[i + nxj - nx - nx];\n-        medarr[4] = rowmed[i + nxj];\n-        medarr[5] = rowmed[i + nxj + nx + nx + nx];\n-        medarr[6] = rowmed[i + nxj - nx - nx - nx];\n-        output[nxj + i] = optmed7(medarr);\n-      }\n-    }\n-    delete medarr;\n-  }\n-  delete[] rowmed;\n-  //Fill up the skipped borders\n-#pragma omp parallel for firstprivate(output,nx,ny,nxny) private(i,j,nxj)\n-  for (i = 0; i < nx; i++) {\n-    output[i] = data[i];\n-    output[i + nx] = data[i + nx];\n-    output[i + nx + nx] = data[i + nx + nx];\n-    output[nxny - nx + i] = data[nxny - nx + i];\n-    output[nxny - nx - nx + i] = data[nxny - nx - nx + i];\n-    output[nxny - nx - nx - nx + i] = data[nxny - nx - nx - nx + i];\n-  }\n-#pragma omp parallel for firstprivate(output,nx,ny) private(i,nxj)\n-  for (i = 0; i < ny; i++) {\n-    nxj = nx * i;\n-    output[nxj] = data[nxj];\n-    output[nxj + 1] = data[nxj + 1];\n-    output[nxj + 2] = data[nxj + 2];\n-    output[nxj + nx - 1] = data[nxj + nx - 1];\n-    output[nxj + nx - 2] = data[nxj + nx - 2];\n-    output[nxj + nx - 3] = data[nxj + nx - 3];\n-  }\n-\n-  return output;\n-}\n-\n-float* sepmedfilt9(float* data, int nx, int ny) {\n-  //Just ignore the borders, fill them with data as strange things happen along the edges anyway\n-  int nxny = nx * ny;\n-\n-  float* rowmed;\n-  rowmed = new float[nxny];\n-  int i;\n-  int j;\n-  int nxj;\n-\n-  //The median seperates so we can median the rows and then median the columns\n-  float* medarr;\n-#pragma omp parallel firstprivate(data,rowmed,nx,ny) private(i,j,nxj,medarr)\n-  {\n-    medarr = new float[9];\n-\n-#pragma omp for nowait\n-    for (j = 0; j < ny; j++) {\n-      nxj = nx * j;\n-      for (i = 4; i < nx - 4; i++) {\n-        medarr[0] = data[nxj + i];\n-        medarr[1] = data[nxj + i - 1];\n-        medarr[2] = data[nxj + i + 1];\n-        medarr[3] = data[nxj + i - 2];\n-        medarr[4] = data[nxj + i + 2];\n-        medarr[5] = data[nxj + i - 3];\n-        medarr[6] = data[nxj + i + 3];\n-        medarr[7] = data[nxj + i - 4];\n-        medarr[8] = data[nxj + i + 4];\n-        rowmed[nxj + i] = optmed9(medarr);\n-      }\n-    }\n-    delete[] medarr;\n-  }\n-\n-  float* output;\n-  output = new float[nxny];\n-\n-#pragma omp parallel firstprivate(rowmed,output,nx,ny) private(i,j,nxj,medarr)\n-  {\n-    medarr = new float[9];\n-\n-#pragma omp for nowait\n-    for (j = 4; j < ny - 4; j++) {\n-      nxj = nx * j;\n-      for (i = 4; i < nx - 4; i++) {\n-\n-        medarr[0] = rowmed[i + nxj - nx];\n-        medarr[1] = rowmed[i + nxj + nx];\n-        medarr[2] = rowmed[i + nxj + nx + nx];\n-        medarr[3] = rowmed[i + nxj - nx - nx];\n-        medarr[4] = rowmed[i + nxj];\n-        medarr[5] = rowmed[i + nxj + nx + nx + nx];\n-        medarr[6] = rowmed[i + nxj - nx - nx - nx];\n-        medarr[7] = rowmed[i + nxj + nx + nx + nx + nx];\n-        medarr[8] = rowmed[i + nxj - nx - nx - nx - nx];\n-        output[nxj + i] = optmed9(medarr);\n-      }\n-    }\n-    delete medarr;\n-  }\n-  delete[] rowmed;\n-  //Fill up the skipped borders\n-#pragma omp parallel for firstprivate(output,nx,ny,nxny) private(i,j,nxj)\n-  for (i = 0; i < nx; i++) {\n-    output[i] = data[i];\n-    output[i + nx] = data[i + nx];\n-    output[i + nx + nx] = data[i + nx + nx];\n-    output[i + nx + nx + nx] = data[i + nx + nx + nx];\n-    output[nxny - nx + i] = data[nxny - nx + i];\n-    output[nxny - nx - nx + i] = data[nxny - nx - nx + i];\n-    output[nxny - nx - nx - nx + i] = data[nxny - nx - nx - nx + i];\n-    output[nxny - nx - nx - nx - nx + i] = data[nxny - nx - nx - nx - nx\n-        + i];\n-  }\n-#pragma omp parallel for firstprivate(output,nx,ny) private(i,nxj)\n-  for (i = 0; i < ny; i++) {\n-    nxj = nx * i;\n-    output[nxj] = data[nxj];\n-    output[nxj + 1] = data[nxj + 1];\n-    output[nxj + 2] = data[nxj + 2];\n-    output[nxj + 3] = data[nxj + 3];\n-    output[nxj + nx - 1] = data[nxj + nx - 1];\n-    output[nxj + nx - 2] = data[nxj + nx - 2];\n-    output[nxj + nx - 3] = data[nxj + nx - 3];\n-    output[nxj + nx - 4] = data[nxj + nx - 4];\n-  }\n-\n-  return output;\n-}\n-\n-float* subsample(float* data, int nx, int ny) {\n-  float* output;\n-  output = new float[4 * nx * ny];\n-  int padnx = 2 * nx;\n-  int i;\n-  int j;\n-  int nxj;\n-  int padnxj;\n-#pragma omp parallel for firstprivate(padnx,data,output,nx,ny) private(i,j,nxj,padnxj)\n-  for (j = 0; j < ny; j++) {\n-    nxj = nx * j;\n-    padnxj = 2 * padnx * j;\n-    for (i = 0; i < nx; i++) {\n-      output[2 * i + padnxj] = data[i + nxj];\n-      output[2 * i + padnxj + padnx] = data[i + nxj];\n-      output[2 * i + 1 + padnxj + padnx] = data[i + nxj];\n-      output[2 * i + 1 + padnxj] = data[i + nxj];\n-    }\n-  }\n-\n-  return output;\n-}\n-\n-bool* dilate(bool* data, int iter, int nx, int ny) {\n-  /**\n-   * Here we do a boolean dilation of the image to connect the cosmic rays for the masks\n-   * We use a kernel that looks like\n-   * 0 1 1 1 0\n-   * 1 1 1 1 1\n-   * 1 1 1 1 1\n-   * 1 1 1 1 1\n-   * 0 1 1 1 0\n-   *\n-   * Since we have to do multiple iterations, this takes a little more memory.\n-   * But it's bools so its ok.\n-   */\n-  //Pad the array with a border of zeros\n-\n-  int padnx = nx + 4;\n-  int padny = ny + 4;\n-  int padnxny = padnx * padny;\n-  int nxny = nx * ny;\n-  bool* padarr;\n-  padarr = new bool[padnxny];\n-  int i;\n-  for (i = 0; i < padnx; i++) {\n-    padarr[i] = false;\n-    padarr[i + padnx] = false;\n-    padarr[padnxny - padnx + i] = false;\n-    padarr[padnxny - padnx - padnx + i] = false;\n-  }\n-  for (i = 0; i < padny; i++) {\n-\n-    padarr[padnx * i] = false;\n-    padarr[padnx * i + 1] = false;\n-    padarr[padnx * i + padnx - 1] = false;\n-    padarr[padnx * i + padnx - 2] = false;\n-  }\n-\n-  bool* output;\n-  output = new bool[nxny];\n-\n-  //Set the first iteration output array to the input data\n-  for (i = 0; i < nxny; i++) {\n-    output[i] = data[i];\n-  }\n-\n-  int counter;\n-  int j;\n-  int nxj;\n-  int padnxj;\n-  for (counter = 0; counter < iter; counter++) {\n-#pragma omp parallel for firstprivate(padarr,output,nx,ny,padnx,padny,counter) private(nxj,padnxj,i,j)\n-    for (j = 0; j < ny; j++) {\n-      padnxj = padnx * j;\n-      nxj = nx * j;\n-      for (i = 0; i < nx; i++) {\n-        padarr[i + 2 + padnx + padnx + padnxj] = output[i + nxj];\n-      }\n-    }\n-#pragma omp parallel for firstprivate(padarr,output,nx,ny,padnx,padny,counter) private(nxj,padnxj,i,j)\n-    for (j = 0; j < ny; j++) {\n-      nxj = nx * j;\n-      padnxj = padnx * j;\n-      for (i = 0; i < nx; i++) {\n-\n-        //Start in the middle and work out\n-        output[i + nxj] = padarr[i + 2 + padnx + padnx + padnxj] ||\n-        //right 1\n-            padarr[i + 3 + padnx + padnx + padnxj] ||\n-        //left 1\n-            padarr[i + 1 + padnx + padnx + padnxj] ||\n-        //up 1\n-            padarr[i + 2 + padnx + padnx + padnx + padnxj] ||\n-        //down 1\n-            padarr[i + 2 + padnx + padnxj] ||\n-        //up 1 right 1\n-            padarr[i + 3 + padnx + padnx + padnx + padnxj] ||\n-        //up 1 left 1\n-            padarr[i + 1 + padnx + padnx + padnx + padnxj] ||\n-        //down 1 right 1\n-            padarr[i + 3 + padnx + padnxj] ||\n-        //down 1 left 1\n-            padarr[i + 1 + padnx + padnxj] ||\n-        //right 2\n-            padarr[i + 4 + padnx + padnx + padnxj] ||\n-        //left 2\n-            padarr[i + padnx + padnx + padnxj] ||\n-        //up 2\n-            padarr[i + 2 + padnx + padnx + padnx + padnx + padnxj]\n-            ||\n-            //down 2\n-            padarr[i + 2 + padnxj] ||\n-        //right 2 up 1\n-            padarr[i + 4 + padnx + padnx + padnx + padnxj] ||\n-        //right 2 down 1\n-            padarr[i + 4 + padnx + padnxj] ||\n-        //left 2 up 1\n-            padarr[i + padnx + padnx + padnx + padnxj] ||\n-        //left 2 down 1\n-            padarr[i + padnx + padnxj] ||\n-        //up 2 right 1\n-            padarr[i + 3 + padnx + padnx + padnx + padnx + padnxj]\n-            ||\n-            //up 2 left 1\n-            padarr[i + 1 + padnx + padnx + padnx + padnx + padnxj]\n-            ||\n-            //down 2 right 1\n-            padarr[i + 3 + padnxj] ||\n-        //down 2 left 1\n-            padarr[i + 1 + padnxj];\n-\n-      }\n-    }\n-\n-  }\n-  delete[] padarr;\n-\n-  return output;\n-}\n-float* laplaceconvolve(float* data, int nx, int ny) {\n-  /*\n-   * Here we do a short circuited convolution using the kernel\n-   *  0 -1  0\n-   * -1  4 -1\n-   *  0 -1  0\n-   */\n-\n-  int nxny = nx * ny;\n-  float* output;\n-  output = new float[nxny];\n-  int i;\n-  int j;\n-  int nxj;\n-  //Do all but the edges that we will do explicitly to save memory.\n-#pragma omp parallel for firstprivate(nx,ny,nxny,output,data) private(i,j,nxj)\n-  for (j = 1; j < ny - 1; j++) {\n-    nxj = nx * j;\n-    for (i = 1; i < nx - 1; i++) {\n-\n-      output[nxj + i] = 4.0 * data[nxj + i] - data[i + 1 + nxj] - data[i\n-          - 1 + nxj] - data[i + nxj + nx] - data[i + nxj - nx];\n-    }\n-  }\n-\n-  //bottom row and top row\n-  for (i = 1; i < nx - 1; i++) {\n-    output[i] = 4.0 * data[i] - data[i + 1] - data[i - 1] - data[i + nx];\n-    output[i + nxny - nx] = 4.0 * data[i + nxny - nx] - data[i + 1 + nxny\n-        - nx] - data[i - 1] - data[i - nx + nxny - nx];\n-  }\n-\n-  //first and last column\n-  for (j = 1; j < ny - 1; j++) {\n-    nxj = nx * j;\n-    output[nxj] = 4.0 * data[nxj] - data[nxj + 1] - data[nxj + nx]\n-        - data[nxj - nx];\n-    output[nxj + nx - 1] = 4.0 * data[nxj + nx - 1] - data[nxj + nx - 2]\n-        - data[nxj + nx + nx - 1] - data[nxj - 1];\n-  }\n-\n-  //bottom left corner\n-  output[0] = 4.0 * data[0] - data[1] - data[nx];\n-  //bottom right corner\n-  output[nx - 1] = 4.0 * data[nx - 1] - data[nx - 2] - data[nx + nx - 1];\n-  //top left corner\n-  output[nxny - nx] = 4.0 * data[nxny - nx - 1] - data[nxny - nx] - data[nxny\n-      - 1 - nx - nx];\n-  //top right corner\n-  output[nxny - 1] = 4.0 * data[nxny - 1] - data[nxny - 2] - data[nxny - 1\n-      - nx];\n-\n-  return output;\n-}\n-\n-bool* growconvolve(bool* data, int nx, int ny) {\n-  /* This basically does a binary dilation with all ones in a 3x3 kernel:\n-   * I have not decided if this is exactly equivalent or which is faster to calculate.\n-   * In python this looks like\n-   *  np.cast['bool'](signal.convolve2d(np.cast['float32'](cosmics), growkernel, mode=\"same\", boundary=\"symm\"))\n-   * For speed and memory savings, I just convolve the whole image except the border. The border is just copied from the input image\n-   * This is not technically correct, but it should be good enough.\n-   */\n-\n-  //Pad the array with a border of zeros\n-  int nxny = nx * ny;\n-  int i;\n-  int j;\n-  int nxj;\n-  bool* output;\n-  output = new bool[nxny];\n-\n-#pragma omp parallel for firstprivate(output,data,nxny,nx,ny) private(i,j,nxj)\n-  for (j = 1; j < ny - 1; j++) {\n-    nxj = nx * j;\n-\n-    for (i = 1; i < nx - 1; i++) {\n-      //Start in the middle and work out\n-      output[i + nxj] = data[i + nxj] ||\n-      //right 1\n-          data[i + 1 + nxj] ||\n-      //left 1\n-          data[i - 1 + nxj] ||\n-      //up 1\n-          data[i + nx + nxj] ||\n-      //down 1\n-          data[i - nx + nxj] ||\n-      //up 1 right 1\n-          data[i + 1 + nx + nxj] ||\n-      //up 1 left 1\n-          data[i - 1 + nx + nxj] ||\n-      //down 1 right 1\n-          data[i + 1 - nx + nxj] ||\n-      //down 1 left 1\n-          data[i - 1 - nx + nxj];\n-\n-    }\n-  }\n-\n-  for (i = 0; i < nx; i++) {\n-    output[i] = data[i];\n-    output[nxny - nx + i] = data[nxny - nx + i];\n-  }\n-  for (j = 0; j < ny; j++) {\n-    nxj = nx * j;\n-    output[nxj] = data[nxj];\n-    output[nxj - 1 + nx] = data[nxj - 1 + nx];\n-  }\n-\n-  return output;\n-}\n-\n-float* rebin(float* data, int nx, int ny) {\n-  //Basically we want to do the opposite of subsample averaging the 4 pixels back down to 1\n-  //nx and ny are the final dimensions of the rebinned image\n-  float* output;\n-  output = new float[nx * ny];\n-  int padnx = nx * 2;\n-  int i;\n-  int j;\n-  int nxj;\n-  int padnxj;\n-#pragma omp parallel for firstprivate(output,data,nx,ny,padnx) private(i,j,nxj,padnxj)\n-  for (j = 0; j < ny; j++) {\n-    nxj = nx * j;\n-    padnxj = 2 * padnx * j;\n-    for (i = 0; i < nx; i++) {\n-      output[i + nxj] = (data[2 * i + padnxj] + data[2 * i + padnxj\n-          + padnx] + data[2 * i + 1 + padnxj + padnx] + data[2 * i\n-          + 1 + padnxj]) / 4.0;\n-    }\n-  }\n-  return output;\n-}\n-\n-/*\n- FITS import - export\n- */\n-float* fromfits(char* filename, int hdunum, bool verbose) {\n-  /*\n-   Reads a FITS file and returns a 1D array of floats.\n-   Use hdu to specify which HDU you want (default = primary = 0)\n-   **/\n-  int status = 0;\n-  fitsfile* infptr = NULL;\n-  if (fits_open_file(&infptr, filename, READONLY, &status)) {\n-    printfitserror(status);\n-  }\n-  fits_movabs_hdu(infptr, hdunum+1, NULL, &status);\n-  long naxes[2] = { 1, 1 };\n-  int naxis = 2;\n-  int bitpix = -32;\n-  long fpixel[2] = { 1, 1 };\n-  if (fits_get_img_param(infptr, 2, &bitpix, &naxis, naxes, &status)) {\n-    printfitserror(status);\n-  }\n-  int nx = naxes[0];\n-  int ny = naxes[1];\n-  if (verbose) {\n-    cout << \"FITS import shape : (\" << nx << \",\" << ny << \")\\n\";\n-    cout << \"FITS file BITPIX : \" << bitpix << \"\\n\";\n-  }\n-\n-  float* data;\n-  data = new float[nx * ny];\n-  if (fits_read_pix(infptr, TFLOAT, fpixel, nx * ny, NULL, data, NULL,\n-      &status)) {\n-    printfitserror(status);\n-  }\n-\n-  if (fits_close_file(infptr, &status)) {\n-    printfitserror(status);\n-  }\n-  return data;\n-}\n-\n-bool* boolfromfits(char* filename, bool verbose) {\n-  /*\n-   Reads a FITS file and returns a 1D array of floats.\n-   Use hdu to specify which HDU you want (default = primary = 0)\n-   **/\n-  int status = 0;\n-  fitsfile* infptr;\n-  if (fits_open_file(&infptr, filename, READONLY, &status)) {\n-    printfitserror(status);\n-  }\n-  long naxes[2] = { 1, 1 };\n-  int naxis = 2;\n-  int bitpix = -32;\n-  long fpixel[2] = { 1, 1 };\n-  if (fits_get_img_param(infptr, 2, &bitpix, &naxis, naxes, &status)) {\n-    printfitserror(status);\n-  }\n-  int nx = naxes[0];\n-  int ny = naxes[1];\n-  if (verbose) {\n-    cout << \"FITS import shape : (\" << nx << \",\" << ny << \")\\n\";\n-    cout << \"FITS file BITPIX : \" << bitpix << \"\\n\";\n-  }\n-\n-  bool* data;\n-  data = new bool[nx * ny];\n-  if (fits_read_pix(infptr, TBYTE, fpixel, nx * ny, NULL, data, NULL, &status)) {\n-    printfitserror(status);\n-  }\n-\n-  if (fits_close_file(infptr, &status)) {\n-    printfitserror(status);\n-  }\n-  return data;\n-}\n-void tofits(char* filename, float *data, int nx, int ny, int hdunum, char* hdr,\n-    bool verbose) {\n-  /*\n-   Takes a 1D  array and write it into a FITS file.\n-   Pass the filename with an ! to clobber a file\n-   If you specify a header file, the header will be copied from the header file to the new file\n-   */\n-\n-  if (verbose) {\n-    cout << \"FITS export shape : (\" << nx << \",\" << ny << \")\\n\";\n-  }\n-  int status = 0;\n-  long naxis = 2; //2-D image\n-  long naxes[2] = { nx, ny };\n-  int i, nkeys;\n-  char card[81];\n-  //Create the new file\n-  if ( 1 == hdunum ) remove(filename);\n-  fitsfile* outfptr = NULL;\n-\n-  if ( 1 == hdunum ) {\n-    if (fits_create_file(&outfptr, filename, &status)) {\n-      printfitserror(status);\n-    }\n-    if (fits_create_img(outfptr, 8, 0, naxes, &status)) {\n-      printfitserror(status);\n-    }\n-  }\n-  else {\n-    if (fits_open_file(&outfptr, filename, READWRITE, &status)) {\n-      printfitserror(status);\n-    }\n-  }\n-  if (fits_create_img(outfptr, FLOAT_IMG, naxis, naxes, &status)) {\n-    printfitserror(status);\n-  }\n-  if (strcmp(hdr, \"\") != 0) {\n-    if (verbose) {\n-      cout << \"Copying header from \" << hdr << \"\\n\";\n-    }\n-    fitsfile* infptr = NULL;\n-    if (fits_open_file(&infptr, hdr, READONLY, &status)) {\n-      printfitserror(status);\n-    }\n-    fits_movabs_hdu(infptr, hdunum+1, NULL, &status); /* try to move to next hdu */\n-    //Copy the header keywords that are not the structure keywords\n-    if (fits_get_hdrspace(infptr, &nkeys, NULL, &status)) {\n-      printfitserror(status);\n-    }\n-    for (i = 1; i <= nkeys; i++) {\n-      fits_read_record(infptr, i, card, &status);\n-      if (fits_get_keyclass(card) > TYP_CMPRS_KEY) {\n-        fits_write_record(outfptr, card, &status);\n-      }\n-    }\n-    if (fits_close_file(infptr, &status)) {\n-      printfitserror(status);\n-    }\n-  }\n-  if (fits_write_img(outfptr, TFLOAT, 1, nx * ny, data, &status)) {\n-    printfitserror(status);\n-  }\n-  if (fits_close_file(outfptr, &status)) {\n-    printfitserror(status);\n-  }\n-\n-  if (verbose) {\n-    cout << \"Wrote \" << filename << \"\\n\";\n-  }\n-}\n-void booltofits(char* filename, bool* data, int nx, int ny, int hdunum, char* hdr,\n-    bool verbose) {\n-  /*\n-   Takes a 1D  array and write it into a FITS file.\n-   Pass the filename with an ! to clobber a file\n-   If you specify a header file, the header will be copied from the header file to the new file\n-   You can give me boolean arrays, I will convert them into shorts.\n-   */\n-\n-  int status = 0;\n-  long naxis = 2; //2-D image\n-  long naxes[2] = { nx, ny };\n-  int i, nkeys;\n-  char card[81];\n-\n-  if ( 1 == hdunum ) remove(filename);\n-  //Create the new file\n-  fitsfile* outfptr;\n-\n-  if ( 1 == hdunum ) {\n-    if (fits_create_file(&outfptr, filename, &status)) {\n-      printfitserror(status);\n-    }\n-    if (fits_create_img(outfptr, 8, 0, naxes, &status)) {\n-                printfitserror(status);\n-            }\n-        }\n-        else {\n-          if (fits_open_file(&outfptr, filename, READWRITE, &status)) {\n-            printfitserror(status);\n-          }\n-        }\n-  if (fits_create_img(outfptr, SBYTE_IMG, naxis, naxes, &status)) {\n-    printfitserror(status);\n-  }\n-\n-  if (strcmp(hdr, \"\") != 0) {\n-    if (verbose) {\n-      cout << \"Copying header from \" << hdr << \"\\n\";\n-    }\n-    fitsfile* infptr;\n-    if (fits_open_file(&infptr, hdr, READONLY, &status)) {\n-      printfitserror(status);\n-    }\n-    fits_movabs_hdu(infptr, hdunum+1, NULL, &status); /* try to move to next hdu */\n-    //Copy the header keywords that are not the structure keywords\n-\n-    if (fits_get_hdrspace(infptr, &nkeys, NULL, &status)) {\n-      printfitserror(status);\n-    }\n-    for (i = 1; i <= nkeys; i++) {\n-      fits_read_record(infptr, i, card, &status);\n-      if (fits_get_keyclass(card) > TYP_CMPRS_KEY) {\n-        fits_write_record(outfptr, card, &status);\n-      }\n-    }\n-    if (fits_close_file(infptr, &status)) {\n-      printfitserror(status);\n-    }\n-  }\n-  if (fits_write_img(outfptr, TBYTE, 1, nx * ny, data, &status)) {\n-    printfitserror(status);\n-  }\n-\n-  if (fits_close_file(outfptr, &status)) {\n-    printfitserror(status);\n-  }\n-\n-  if (verbose) {\n-    cout << \"Wrote \" << filename << \"\\n\";\n-  }\n-\n-}\n-void printfitserror(int status) {\n-  /*****************************************************/\n-  /* Print out cfitsio error messages and exit program */\n-  /*****************************************************/\n-\n-  if (status) {\n-    fits_report_error(stderr, status); /* print error report */\n-\n-    exit(status); /* terminate the program, returning error status */\n-  }\n-  return;\n-}\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Cosmics/src/program/VIS_Lacosmicx.cpp": [
                        [
                            "@@ -1,742 +0,0 @@\n-/**\n- * @file src/program/VIS_Lacosmicx.cpp\n- * @date 03/02/16\n- * @author user\n- */\n-\n-#include <map>\n-\n-#include <boost/program_options.hpp>\n-#include \"ElementsKernel/ProgramHeaders.h\"\n-\n-using namespace std;\n-#include \"VIS_Cosmics/VIS_Lacosmicx.h\"\n-#include \"VIS_Cosmics/functions.h\"\n-#include<malloc.h>\n-#include<stdlib.h>\n-#include<iostream>\n-#include<math.h>\n-#include\"fitsio.h\"\n-#include<string.h>\n-#include<stdio.h>\n-\n-//============================================================================\n-// Name        : VIS_lacosmicx.cpp\n-// Author      : Curtis McCully\n-// Version     :\n-// Copyright   :\n-// Description : Lacosmic Written in C++\n-//============================================================================\n-\n-\n-/*\n- * VIS_Lacosmicx.cpp\n- *\n- *  Created on: Apr 19, 2011\n- *      Author: cmccully\n- */\n-\n-//#include \"VIS_Lacosmicx.h\"\n-\n-/*\n- About\n- =====\n-\n- lacosmicx is designed to detect and clean cosmic ray hits on images (numpy arrays or FITS), using scipy, and based on Pieter van Dokkum's L.A.Cosmic algorithm.\n-\n- Most of this code was directly adapted from cosmics.py written by Malte Tewes. I have removed some of the extras that he wrote, ported everything to c++, and optimized any places that I can.\n- This is designed to be as fast as possible so some of the readability has been sacrificed.\n-\n- L.A.Cosmic = Laplacian cosmic ray detection\n-\n- U{http://www.astro.yale.edu/dokkum/lacosmic/}\n-\n- (article : U{http://arxiv.org/abs/astro-ph/0108003})\n-\n-\n- Differences from original LA-cosmic\n- ===================\n-\n- - Automatic recognition of saturated stars, including their full saturation trails.\n- This avoids that such stars are treated as big cosmics.\n- Indeed saturated stars tend to get even uglier when you try to clean them. Plus they\n- keep L.A.Cosmic iterations going on forever.\n- This feature is mainly for pretty-image production. It is optional, requires one more parameter (a CCD saturation level in ADU), and uses some\n- nicely robust morphology operations and object extraction.\n-\n-\n- -I have tried to optimize all of the code as much as possible while maintaining the integrity of the algorithm.\n-\n- -This implementation is much faster than the Python or Iraf versions by ~factor of 7.\n-\n- - In cfitsio, data are striped along x dimen, thus all loops\n- are y outer, x inner.  or at least they should be...\n- Usage\n- =====\n-\n-\n- Todo\n- ====\n-\n- Curtis McCully April 2011\n-\n-\n- __version__ = '1.0'\n-\n-\n- sigclip : increase this if you detect cosmics where there are none. Default is 5.0, a good value for earth-bound images.\n- objlim : increase this if normal stars are detected as cosmics. Default is 5.0, a good value for earth-bound images.\n-\n- Constructor of the cosmic class, takes a 2D numpy array of your image as main argument.\n- sigclip : laplacian-to-noise limit for cosmic ray detection\n- objlim : minimum contrast between laplacian image and fine structure image. Use 5.0 if your image is undersampled, HST, ...\n-\n- satlevel : if we find an agglomeration of pixels above this level, we consider it to be a saturated star and\n- do not try to correct and pixels around it.This is given in electrons\n-\n- pssl is the previously subtracted sky level !\n-\n- real   gain    = 1.0         # gain (electrons/ADU)\n- real   readn   = 6.5         # read noise (electrons)\n- real   skyval  = 0.           # sky level that has been subtracted (ADU)\n- real   sigclip = 4.5          # detection limit for cosmic rays (sigma)\n- real   sigfrac = 0.3          # fractional detection limit for neighboring pixels\n- real   objlim  = 5.0           # contrast limit between CR and underlying object\n- int    niter   = 4            # maximum number of iterations\n-\n- */\n-int main(int argc, char* argv[]) {\n-\n-  int iarg;\n-  int i;\n-  char* infile;\n-  char* outfile;\n-  char* outmask;\n-  char* maskfile;\n-  infile = NULL;\n-  outfile = NULL;\n-  outmask = NULL;\n-  maskfile = NULL;\n-  float sigclip = 4.5;\n-  float sigfrac = 0.3;\n-  float objlim = 5.0;\n-  float pssl = 0.0;\n-  float gain = 1.0;\n-  float readnoise = 6.5;\n-  bool verbose = false;\n-  float satlevel = 50000.0;\n-  int niter = 4;\n-  bool robust = false;\n-  int nx;\n-  int ny;\n-  int nxny;\n-  float* indat;\n-  bool* maskdat;\n-  int extnum = 1;\n-  int status = 0;\n-  fitsfile* infptr = NULL;\n-\n-  if (argc == 1) {\n-    cout << \"Usage: VIS_Lacosmicx -options\\n\";\n-    cout << \"-infile    : Input Image Filename (Required)\\n\";\n-    cout\n-        << \"-inmask    : Input Mask Image Filename: Bad Pixels; Saturated Stars are detected automatically\\n\";\n-    cout << \"-outfile   : Output Image Filename\\n\";\n-    cout << \"-outmask   : Output Cosmic Ray Mask Image Filename\\n\";\n-    cout\n-        << \"-sigclip   : Detection Limit for Cosmic Rays (sigma): Default(4.5)\\n\";\n-    cout\n-        << \"-sigfrac   : Fractional Detection Limit for Neighboring Pixels: Default(0.3)\\n\";\n-    cout\n-        << \"-objlim    : Contrast Level Between Cosmic Rays and Underlying Objects: Default(5.0)\\n\";\n-    cout << \"-gain      : Gain: Electrons/ADU: Default(1.0)\\n\";\n-    cout\n-        << \"-pssl      : Previously Subtracted Level: ADU: Default(0.0) \\n\";\n-    cout << \"-readnoise : Read Noise: Electrons: Default(6.5)\\n\";\n-    cout << \"-satlevel  : Saturation Level: Electrons: Default(50000.0)\\n\";\n-    cout << \"-niter     : Number of Lacosmic Iterations: Default(4)\\n\";\n-    cout\n-        << \"-robust : Use the true median instead of the separable median filter: Default(False)\\n\";\n-    cout\n-        << \"Note that the true median is much slower to calculate (factor of ~3), but more robustly flags cosmic rays without flagging real stars\\n\";\n-    cout << \"-verbose   : Verbose: Default(False)\\n\";\n-\n-    exit(0);\n-  }\n-  /* read in command options. j counts # of required args given */\n-  for (iarg = 1; iarg < argc; iarg++) {\n-    if (argv[iarg][0] == '-') {\n-      if (strcasecmp(argv[iarg] + 1, \"infile\") == 0) {\n-        infile = argv[++iarg];\n-      } else if (strcasecmp(argv[iarg] + 1, \"outfile\") == 0) {\n-        outfile = argv[++iarg];\n-      } else if (strcasecmp(argv[iarg] + 1, \"outmask\") == 0) {\n-        outmask = argv[++iarg];\n-      } else if (strcasecmp(argv[iarg] + 1, \"sigclip\") == 0) {\n-        sigclip = atof(argv[++iarg]);\n-      } else if (strcasecmp(argv[iarg] + 1, \"sigfrac\") == 0) {\n-        sigfrac = atof(argv[++iarg]);\n-      } else if (strcasecmp(argv[iarg] + 1, \"pssl\") == 0) {\n-        pssl = atof(argv[++iarg]);\n-      } else if (strcasecmp(argv[iarg] + 1, \"gain\") == 0) {\n-        gain = atof(argv[++iarg]);\n-      } else if (strcasecmp(argv[iarg] + 1, \"inmask\") == 0) {\n-        maskfile = argv[++iarg];\n-      } else if (strcasecmp(argv[iarg] + 1, \"objlim\") == 0) {\n-        objlim = atof(argv[++iarg]);\n-      } else if (strcasecmp(argv[iarg] + 1, \"readnoise\") == 0) {\n-        readnoise = atof(argv[++iarg]);\n-      } else if (strcasecmp(argv[iarg] + 1, \"satlevel\") == 0) {\n-        satlevel = atof(argv[++iarg]);\n-      } else if (strcasecmp(argv[iarg] + 1, \"verbose\") == 0) {\n-        verbose = true;\n-      } else if (strcasecmp(argv[iarg] + 1, \"robust\") == 0) {\n-        robust = true;\n-      } else if (strcasecmp(argv[iarg] + 1, \"niter\") == 0) {\n-        niter = atoi(argv[++iarg]);\n-      } else {\n-        fprintf(stderr, \"Unknown option : %s\\n\", argv[iarg]);\n-        exit(1);\n-      }\n-    } else {\n-      fprintf(stderr,\n-          \"Unexpected string encountered on command line : %s\\n\",\n-          argv[iarg]);\n-      exit(1);\n-    }\n-  }\n-\n-  if (infile == NULL) {\n-    fprintf(stderr, \"You must include the input file!\\n\");\n-    exit(1);\n-  }\n-\n-  //Get nx and ny\n-  if (fits_open_file(&infptr, infile, READONLY, &status)) {\n-    printfitserror(status);\n-  }\n-  if (fits_movrel_hdu(infptr, extnum, NULL, &status)) {\n-    printfitserror(status);\n-  }\n-\n-  while ( !status ) {\n-    long naxes[2] = { 1, 1 };\n-    int naxis = 2;\n-    int bitpix = -32;\n-    if (fits_get_img_param(infptr, 2, &bitpix, &naxis, naxes, &status)) {\n-      printfitserror(status);\n-    }\n-    nx = naxes[0];\n-    ny = naxes[1];\n-    nxny = nx * ny;\n-    indat = fromfits(infile,extnum);\n-\n-\n-    if (maskfile == NULL) {\n-      //By default don't mask anything\n-      maskdat = new bool[nxny];\n-      for (i = 0; i < nxny; i++) {\n-        maskdat[i] = false;\n-      }\n-    } else {\n-      maskdat = boolfromfits(maskfile);\n-    }\n-\n-    lacosmicx* l;\n-    l = new lacosmicx(indat, maskdat, nx, ny, pssl, gain, readnoise, sigclip,\n-          sigfrac, objlim, satlevel, robust, verbose);\n-    l->run(niter);\n-    cout << l;\n-    if (outfile != NULL) {\n-      tofits(outfile, l->cleanarr, nx, ny, extnum, infile);\n-    }\n-\n-    if (outmask != NULL) {\n-      booltofits(outmask, l->crmask, nx, ny,extnum, infile);\n-    }\n-    //explicitly delete here so we don't have to derefence the arrays in the python call\n-    delete[] l->data;\n-    delete[] l->mask;\n-    delete l;\n-    fits_movrel_hdu(infptr, 1, NULL, &status); /* try to move to next hdu */\n-    extnum++;\n-  }//end while\n-  status = 0;\n-  if (fits_close_file(infptr, &status)) {\n-    printfitserror(status);\n-  }\n-}\n-\n-lacosmicx::lacosmicx(float* data, bool* mask, int nx, int ny, float pssl,\n-    float gain, float readnoise, float sigclip, float sigfrac,\n-    float objlim, float satlevel, bool robust, bool verbose) {\n-\n-  int i;\n-  this->nx = nx;\n-  this->ny = ny;\n-  int this_nxny = nx * ny;\n-  this->nxny = this_nxny;\n-\n-#pragma omp parallel for firstprivate(this_nxny,data,gain,pssl) private(i)\n-  for (i = 0; i < this_nxny; i++) {\n-    // internally, we will always work \"with sky\" and in electrons, not ADU (gain=1)\n-    data[i] += pssl;\n-    data[i] *= gain;\n-  }\n-\n-  //This data mask needs to be indexed with (i,j) -> (nx *j+i)\n-  this->data = data;\n-  this->gain = gain;\n-  this->readnoise = readnoise;\n-  this->sigclip = sigclip;\n-  this->objlim = objlim;\n-  this->sigcliplow = sigclip * sigfrac;\n-  this->satlevel = satlevel;\n-\n-  this->verbose = verbose;\n-  this->robust = robust;\n-  this->pssl = pssl;\n-\n-  //A mask of saturated stars and pixels with no data\n-  this->mask = mask;\n-  //Calculate a default background level, take into account the mask\n-  //This background level is used for large cosmics\n-  int ngoodpix = 0;\n-#pragma omp parallel for firstprivate(this_nxny,mask) private(i) reduction(+ : ngoodpix)\n-  for (i = 0; i < this_nxny; i++) {\n-    if (!mask[i]) {\n-      ngoodpix++;\n-    }\n-  }\n-  int goodcounter = 0;\n-  float *gooddata = new float[ngoodpix];\n-  for (i = 0; i < ngoodpix; i++) {\n-    if (!mask[i]) {\n-      gooddata[goodcounter] = data[i];\n-      goodcounter++;\n-    }\n-  }\n-  backgroundlevel = median(gooddata, ngoodpix);\n-  delete[] gooddata;\n-\n-  cleanarr = new float[nxny];\n-  float* this_cleanarr;\n-  this_cleanarr = cleanarr;\n-#pragma omp parallel for firstprivate(this_cleanarr,this_nxny,data) private(i)\n-  for (i = 0; i < this_nxny; i++) {\n-    this_cleanarr[i] = data[i]; // In lacosmiciteration() we work on this guy\n-  }\n-\n-  crmask = new bool[nxny];\n-  bool *this_crmask;\n-  this_crmask = crmask;\n-#pragma omp parallel for firstprivate(this_nxny,this_crmask) private(i)\n-  for (i = 0; i < this_nxny; i++) {\n-    // All False, no cosmics yet\n-    this_crmask[i] = false;\n-  }\n-}\n-\n-lacosmicx::~lacosmicx() {\n-  //Don't delete mask and data so that we can use them in the python call\n-  //Deleting either of those messes things up.\n-  delete[] crmask;\n-  delete[] cleanarr;\n-}\n-\n-ostream& operator<<(ostream& out, lacosmicx *l) {\n-  /*\n-   Gives a summary of the current state, including the number of cosmic pixels in the mask etc.\n-   */\n-  out << \"Input array: (\" << l->nx << \",\" << l->ny << \")\\n\";\n-  int i;\n-  int crsum = 0;\n-  int masksum = 0;\n-  int this_nxny = l->nx * l->ny;\n-  bool* this_crmask;\n-  this_crmask = l->crmask;\n-  bool* this_mask;\n-  this_mask = l->mask;\n-#pragma omp parallel for reduction(+ : crsum) reduction(+ : masksum) firstprivate(this_nxny,this_crmask,this_mask) private(i)\n-  for (i = 0; i < this_nxny; i++) {\n-    if (this_crmask[i]) {\n-      crsum++;\n-    }\n-    if (this_mask[i]) {\n-      masksum++;\n-    }\n-  }\n-  out << \"Current cosmic ray mask : \" << crsum << \" pixels \\n\";\n-\n-  out << \"Using a previously subtracted sky level of \" << l->pssl << \"\\n\";\n-\n-  out << \"Median Sky Level: \" << l->backgroundlevel << \"\\n\";\n-\n-  out << \"Saturated Stars and Masked Data: \" << masksum << \" pixels \\n\";\n-\n-  return out;\n-}\n-\n-void lacosmicx::run(int maxiter) {\n-  /*\n-   Full artillery :-)\n-   - Find saturated stars\n-   - Run maxiter L.A.Cosmic iterations (stops if no more cosmics are found)\n-   */\n-\n-  findsatstars();\n-  int i;\n-  cout << \"Starting \" << maxiter << \" L.A.Cosmic iterations \\n\";\n-  for (i = 0; i < maxiter; i++) {\n-    cout << \"Iteration \" << i + 1 << \"\\n\";\n-\n-    //Detect the cosmic rays\n-    int ncrpix;\n-    ncrpix = lacosmiciteration();\n-    cout << ncrpix << \" cosmic pixels\\n\";\n-\n-    //If we didn't find anything, we're done.\n-    if (ncrpix == 0) {\n-      break;\n-    }\n-  }\n-  //Convert back to ADU and subtract the sky again\n-  int this_nxny = nxny;\n-  float this_gain = gain;\n-  float this_pssl = pssl;\n-  float* this_data;\n-  this_data = data;\n-  float* this_cleanarr;\n-  this_cleanarr = cleanarr;\n-#pragma omp parallel for firstprivate(this_nxny,this_gain,this_pssl,this_data,this_cleanarr)\n-  for (i = 0; i < this_nxny; i++) {\n-    this_data[i] /= this_gain;\n-    this_data[i] -= this_pssl;\n-    this_cleanarr[i] /= this_gain;\n-    this_cleanarr[i] -= this_pssl;\n-  }\n-  cout << \"Finished!\\n\";\n-}\n-\n-void lacosmicx::findsatstars() {\n-  /*\n-   Uses the satlevel to find saturated stars (not cosmics !), and puts the result as a mask in self.satstars.\n-   This can then be used to avoid these regions in cosmic detection and cleaning procedures.\n-   */\n-\n-  if (verbose) {\n-    cout << \"Detecting saturated stars\\n\";\n-  }\n-  // DETECTION\n-\n-  //Find all of the saturated pixels\n-  bool* satpixels;\n-  satpixels = new bool[nxny];\n-\n-  int i;\n-  int this_nxny = nxny;\n-  float *this_data;\n-  this_data = data;\n-  float this_satlevel = satlevel;\n-#pragma omp parallel for firstprivate(this_nxny,this_data,this_satlevel,satpixels) private(i)\n-  for (i = 0; i < this_nxny; i++) {\n-    satpixels[i] = this_data[i] > this_satlevel;\n-  }\n-\n-  //in an attempt to avoid saturated cosmic rays we try prune the saturated stars using the large scale structure\n-  float* m5;\n-  if (robust) {\n-    m5 = medfilt5(data, nx, ny);\n-  } else {\n-    m5 = sepmedfilt5(data, nx, ny);\n-  }\n-  //This mask will include saturated pixels and masked pixels\n-\n-\n-#pragma omp parallel for firstprivate(this_nxny,this_satlevel,m5,satpixels) private(i)\n-  for (i = 0; i < this_nxny; i++) {\n-    satpixels[i] = satpixels[i] && (m5[i] > this_satlevel / 10.0);\n-  }\n-  delete[] m5;\n-\n-  if (verbose) {\n-    cout << \"Building mask of saturated stars\\n\";\n-  }\n-\n-  // BUILDING THE MASK\n-\n-  //Combine the saturated pixels with the given input mask\n-  //Grow the input mask by one pixel to make sure we cover bad pixels\n-  bool* grow_mask;\n-  grow_mask = growconvolve(mask, nx, ny);\n-\n-  //We want to dilate both the mask and the saturated stars to remove false detections along the edges of the mask\n-  bool* dilsatpixels;\n-  dilsatpixels = dilate(satpixels, 2, nx, ny);\n-  delete[] satpixels;\n-  bool* this_mask;\n-  this_mask = mask;\n-#pragma omp parallel for firstprivate(this_nxny,this_mask,dilsatpixels,grow_mask) private(i)\n-  for (i = 0; i < this_nxny; i++) {\n-    this_mask[i] = dilsatpixels[i] || grow_mask[i];\n-  }\n-  delete[] dilsatpixels;\n-  delete[] grow_mask;\n-  if (verbose) {\n-    cout << \"Mask of saturated stars done\\n\";\n-  }\n-\n-}\n-\n-int lacosmicx::lacosmiciteration() {\n-  /*\n-   Performs one iteration of the L.A.Cosmic algorithm.\n-   It operates on cleanarray, and afterwards updates crmask by adding the newly detected\n-   cosmics to the existing crmask. Cleaning is not done automatically ! You have to call\n-   clean() after each iteration.\n-   This way you can run it several times in a row to to L.A.Cosmic \"iterations\".\n-   See function lacosmic, that mimics the full iterative L.A.Cosmic algorithm.\n-\n-   Returns numcr : the number of cosmic pixels detected in this iteration\n-\n-   */\n-\n-  if (verbose) {\n-    cout << \"Convolving image with Laplacian kernel\\n\";\n-  }\n-\n-  // We subsample, convolve, clip negative values, and rebin to original size\n-  float* subsam;\n-  subsam = subsample(cleanarr, nx, ny);\n-\n-  float* conved;\n-  conved = laplaceconvolve(subsam, 2 * nx, 2 * ny);\n-  delete[] subsam;\n-  int this_nxny = nxny;\n-  int i;\n-  int nxny4 = 4 * nxny;\n-#pragma omp parallel for firstprivate(nxny4,conved) private(i)\n-  for (i = 0; i < nxny4; i++) {\n-    if (conved[i] < 0.0) {\n-      conved[i] = 0.0;\n-    }\n-  }\n-\n-  float* s;\n-  s = rebin(conved, nx, ny);\n-  delete[] conved;\n-\n-  if (verbose) {\n-    cout << \"Creating noise model\\n\";\n-  }\n-\n-  // We build a custom noise map, to compare the laplacian to\n-\n-  float* m5;\n-  if (robust) {\n-    m5 = medfilt5(cleanarr, nx, ny);\n-  } else {\n-    m5 = sepmedfilt7(cleanarr, nx, ny);\n-  }\n-  float* noise;\n-  noise = new float[nxny];\n-\n-  float this_noise;\n-  float this_readnoise = readnoise;\n-#pragma omp parallel for firstprivate(this_nxny,this_readnoise,m5,noise) private(i,this_noise)\n-  for (i = 0; i < this_nxny; i++) {\n-    // We clip noise so that we can take a square root\n-    m5[i] < 0.0001 ? this_noise = 0.0001 : this_noise = m5[i];\n-    noise[i] = sqrt(this_noise + this_readnoise * this_readnoise);\n-  }\n-  delete[] m5;\n-  if (verbose) {\n-    cout << \"Calculating Laplacian signal to noise ratio\\n\";\n-  }\n-  // Laplacian signal to noise ratio :\n-\n-#pragma omp parallel for firstprivate(this_nxny,noise,s) private(i)\n-  for (i = 0; i < this_nxny; i++) {\n-    s[i] = s[i] / (2.0 * noise[i]);\n-    // the 2.0 is from the 2x2 subsampling\n-    // This s is called sigmap in the original lacosmic.cl\n-  }\n-\n-  float* sp;\n-  if (robust) {\n-    sp = medfilt5(s, nx, ny);\n-  } else {\n-    sp = sepmedfilt7(s, nx, ny);\n-  }\n-\n-  // We remove the large structures (s prime) :\n-#pragma omp parallel for firstprivate(this_nxny,s,sp) private(i)\n-  for (i = 0; i < this_nxny; i++) {\n-    sp[i] = s[i] - sp[i];\n-  }\n-  delete[] s;\n-  if (verbose) {\n-    cout\n-        << \"Selecting candidate cosmic rays, excluding saturated stars and bad pixels\\n\";\n-  }\n-\n-  // We build the fine structure image :\n-  float* m3;\n-  if (robust) {\n-    m3 = medfilt3(cleanarr, nx, ny);\n-  } else {\n-    m3 = sepmedfilt5(cleanarr, nx, ny);\n-  }\n-  float* f;\n-  if (robust) {\n-    f = medfilt7(m3, nx, ny);\n-  } else {\n-    f = sepmedfilt9(m3, nx, ny);\n-  }\n-\n-#pragma omp parallel for firstprivate(this_nxny,f,m3,noise) private(i)\n-  for (i = 0; i < this_nxny; i++) {\n-    f[i] = (m3[i] - f[i]) / noise[i];\n-    if (f[i] < 0.01) {\n-      // as we will divide by f. like in the iraf version.\n-      f[i] = 0.01;\n-    }\n-  }\n-\n-  delete[] m3;\n-  delete[] noise;\n-\n-  //Comments from Malte Tewes\n-  // In the article that's it, but in lacosmic.cl f is divided by the noise...\n-  // Ok I understand why, it depends on if you use sp/f or L+/f as criterion.\n-  // There are some differences between the article and the iraf implementation.\n-  // So we will stick to the iraf implementation.\n-\n-  if (verbose) {\n-    cout << \"Removing suspected compact bright objects\\n\";\n-  }\n-  // Now we have our better selection of cosmics :\n-  // Note the sp/f and not lplus/f ... due to the f = f/noise above.\n-  bool* cosmics;\n-  cosmics = new bool[nxny];\n-  float this_sigclip = sigclip;\n-  bool* this_mask;\n-  this_mask = mask;\n-  float this_objlim = objlim;\n-#pragma omp parallel for firstprivate(cosmics,sp,f,this_objlim,this_sigclip,this_nxny,this_mask) private(i)\n-  for (i = 0; i < this_nxny; i++) {\n-    cosmics[i] = (sp[i] > this_sigclip) && !this_mask[i] && ((sp[i] / f[i])\n-        > this_objlim);\n-  }\n-\n-  delete[] f;\n-\n-  // What follows is a special treatment for neighbors, with more relaxed constraints.\n-  // We grow these cosmics a first time to determine the immediate neighborhood  :\n-  bool* growcosmics;\n-  growcosmics = growconvolve(cosmics, nx, ny);\n-\n-  delete[] cosmics;\n-  // From this grown set, we keep those that have sp > sigmalim\n-  // so obviously not requiring sp/f > objlim, otherwise it would be pointless\n-  //This step still feels pointless to me, but we leave it in because the iraf implementation has it\n-#pragma omp parallel for firstprivate(this_nxny,sp,growcosmics,this_mask,this_sigclip) private(i)\n-  for (i = 0; i < this_nxny; i++) {\n-    growcosmics[i] = (sp[i] > this_sigclip) && growcosmics[i]\n-        && !this_mask[i];\n-  }\n-\n-  // Now we repeat this procedure, but lower the detection limit to sigmalimlow :\n-  bool* finalsel;\n-  finalsel = growconvolve(growcosmics, nx, ny);\n-  delete[] growcosmics;\n-\n-  //Our CR counter\n-  int numcr = 0;\n-  float this_sigcliplow = sigcliplow;\n-#pragma omp parallel for reduction(+ : numcr) firstprivate(finalsel,sp,this_sigcliplow,this_nxny,this_mask) private(i)\n-  for (i = 0; i < this_nxny; i++) {\n-    finalsel[i] = (sp[i] > this_sigcliplow) && finalsel[i]\n-        && (!this_mask[i]);\n-    if (finalsel[i]) {\n-      numcr++;\n-    }\n-  }\n-  delete[] sp;\n-  if (verbose) {\n-    cout << numcr << \" pixels detected as cosmics\\n\";\n-  }\n-  // We update the crmask with the cosmics we have found :\n-  bool* this_crmask;\n-  this_crmask = crmask;\n-#pragma omp parallel for firstprivate(this_crmask,finalsel,this_nxny) private(i)\n-  for (i = 0; i < this_nxny; i++) {\n-    this_crmask[i] = this_crmask[i] || finalsel[i];\n-  }\n-\n-  // Now the replacement of the cosmics...\n-  // we outsource this to the function clean(), as for some purposes the cleaning might not even be needed.\n-  // Easy way without masking would be :\n-  //self.cleanarray[finalsel] = m5[finalsel]\n-  //Go through and clean the image using a masked mean filter, we outsource this to the clean method\n-  clean();\n-\n-  delete[] finalsel;\n-  // We return the number of cr pixels\n-  // (used by function lacosmic)\n-\n-  return numcr;\n-}\n-\n-void lacosmicx::clean() {\n-  //Go through all of the pixels, ignore the borders\n-  int i;\n-  int j;\n-  int nxj;\n-  int idx;\n-  int k, l;\n-  int nxl;\n-  float sum;\n-  int numpix;\n-\n-  int this_nx = nx;\n-  int this_ny = ny;\n-  bool* this_crmask;\n-  this_crmask = crmask;\n-  float* this_cleanarr;\n-  this_cleanarr = cleanarr;\n-  float this_backgroundlevel = backgroundlevel;\n-#pragma omp parallel for firstprivate(this_nx,this_ny,this_crmask,this_cleanarr,this_backgroundlevel) private(i,j,nxj,idx,numpix,sum,nxl,k,l)\n-  for (j = 2; j < this_ny - 2; j++) {\n-    nxj = this_nx * j;\n-    for (i = 2; i < this_nx - 2; i++) {\n-      //if the pixel is in the crmask\n-      idx = nxj + i;\n-      if (this_crmask[idx]) {\n-        numpix = 0;\n-        sum = 0.0;\n-        //sum the 25 pixels around the pixel ignoring any pixels that are masked\n-\n-        for (l = -2; l < 3; l++) {\n-          nxl = this_nx * l;\n-          for (k = -2; k < 3; k++) {\n-            if (!this_crmask[idx + k + nxl]) {\n-              sum += this_cleanarr[idx + k + nxl];\n-              numpix++;\n-            }\n-          }\n-\n-        }\n-\n-        //if the pixels count is 0 then put in the background of the image\n-        if (numpix == 0) {\n-          sum = this_backgroundlevel;\n-        } else {\n-          //else take the mean\n-          sum /= float(numpix);\n-        }\n-        this_cleanarr[idx] = sum;\n-      }\n-    }\n-  }\n-}\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Cosmics/tests/src/functions_test.cpp": [
                        [
                            "@@ -1,32 +0,0 @@\n-/**\n- * @file tests/src/functions_test.cpp\n- * @date 03/02/16\n- * @author user\n- */\n-\n-#include <boost/test/unit_test.hpp>\n-\n-#include \"VIS_Cosmics/functions.h\"\n-\n-//using namespace Lacosmicx;\n-\n-//-----------------------------------------------------------------------------\n-\n-BOOST_AUTO_TEST_SUITE (functions_test)\n-\n-//-----------------------------------------------------------------------------\n-\n-BOOST_AUTO_TEST_CASE( example_test ) {\n-  //BOOST_FAIL(\"!!!! Please implement your tests !!!!\");\n-  float toto[3];\n-  toto[0] = 1.5;\n-  toto[1] = 3.2;\n-  toto[2] = 1.8;\n-  BOOST_CHECK_CLOSE(median(toto,3), 1.8, 1e-3);\n-}\n-\n-//-----------------------------------------------------------------------------\n-\n-BOOST_AUTO_TEST_SUITE_END ()\n-\n-\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Cosmics/tests/src/lacosmicx_test.cpp": [
                        [
                            "@@ -1,29 +0,0 @@\n-/**\n- * @file tests/src/lacosmicx_test.cpp\n- * @date 03/02/16\n- * @author user\n- */\n-\n-#include <boost/test/unit_test.hpp>\n-\n-#include \"VIS_Cosmics/VIS_Lacosmicx.h\"\n-\n-//using namespace Lacosmicx;\n-\n-//-----------------------------------------------------------------------------\n-\n-BOOST_AUTO_TEST_SUITE (lacosmicx_test)\n-\n-//-----------------------------------------------------------------------------\n-\n-BOOST_AUTO_TEST_CASE( example_test ) {\n-\n-  BOOST_FAIL(\"!!!! Please implement your tests !!!!\");\n-\n-}\n-\n-//-----------------------------------------------------------------------------\n-\n-BOOST_AUTO_TEST_SUITE_END ()\n-\n-\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Dark/conf/VIS_DarkCalibration_Programs/test_data_file_lists/regression_cmp_10692.output.txt": [
                        [
                            "@@ -1 +1 @@\n-regression_cmp_10692/expected_master_dark.v1.8.fits\tregression_cmp_10692/expected_master_dark.fits\n\\ No newline at end of file\n+regression_cmp_10692/expected_master_dark.v1.9.fits\tregression_cmp_10692/expected_master_dark.fits\n\\ No newline at end of file\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Dark/python/VIS_Dark/VIS_DarkCalibration_IO/file_entry_point.py": [
                        [
                            "@@ -17,6 +17,7 @@\n \n import astropy.io.fits as pf\n import numpy as np\n+import configparser\n \n import ElementsKernel.Logging as elog\n \n@@ -30,7 +31,7 @@ from . import file_validation as fv\n __all__ = ['file_layer_entry_point']\n \n \n-def file_layer_entry_point(input_files, output_master_file, quadrant_id=None, in_flagmaps=None):\n+def file_layer_entry_point(input_files, config_file, output_master_file, quadrant_id=None, in_flagmaps=None):\n     \"\"\"\n     This layer handles the I/O to/from files.  It is a wrapper around the algorithm.\n \n@@ -39,6 +40,8 @@ def file_layer_entry_point(input_files, output_master_file, quadrant_id=None, in\n     input_files : array_like of string\n         Array of file names of input FITS files.  Each file should contain a single quadrant of a single\n         dark exposure.  All files must contain the same quadrant.\n+    config_file : string\n+        File name of the configuration parameters for this PE.  It should be in the ini file format.\n     output_master_file : string\n         File name to write the master dark FITS file to.\n     quadrant_id : string or number\n@@ -53,7 +56,11 @@ def file_layer_entry_point(input_files, output_master_file, quadrant_id=None, in\n     log.info(\"file_layer_entry_point(): argument 'input_files' are: \" + str(input_files))\n     log.info(\"file_layer_entry_point(): argument 'in_flagmaps' are: \" + str(in_flagmaps))\n     log.info(\"file_layer_entry_point(): argument 'quadrant_id' is: \" + str(quadrant_id))\n+    log.info(\"file_layer_entry_point(): argument 'config_file' is: \" + str(config_file))\n     log.info(\"file_layer_entry_point(): argument 'output_master_file' is: \" + str(output_master_file))\n+    config = configparser.ConfigParser()\n+    config.read(config_file)\n+    dark_cfg = config[\"VIS_model_dark\"]\n     if not fv.input_fits_files_valid(input_files):\n         log.error(\"file_layer_entry_point(): input files failed validity tests\")\n     else:\n@@ -96,7 +103,7 @@ def file_layer_entry_point(input_files, output_master_file, quadrant_id=None, in\n                 flag_quad_id = handle[quadrant_id].header[\"QUADID\"]\n                 handle.close()\n             dark_image, flagmap_image, master_stats = algo.model_dark(image_stack, exposure_durations, flagmaps,\n-                                                               flag_ccd_id, flag_quad_id, flag_prescan_size,\n+                                                               dark_cfg, flag_ccd_id, flag_quad_id, flag_prescan_size,\n                                                                flag_serial_overscan_size, flag_parallel_overscan_size)\n             inputs_stats = istat.header_stats_list(input_files)\n             inputs_stats = istat.replace_indexes_with_names(inputs_stats, input_files)\n@@ -106,6 +113,7 @@ def file_layer_entry_point(input_files, output_master_file, quadrant_id=None, in\n                                 input_files[0], apply_gain=False, bunit=\"ELECTRON/s\", exptime=exptime_mean)\n             fio.save_single_ext(output_master_file + \".flagmap.fits\", flagmap_image, quad_name,\n                                 input_files[0], gain=1.0, apply_gain=False)\n+            master_stats.update(istat.dates_summary(inputs_stats, \"dark\"))\n             peri.save_peri(inputs_stats, output_master_file, \"VIS_DarkCalibration_Frames\", context_name=quad_name)\n             peri.save_peri(master_stats, output_master_file, \"VIS_DarkCalibration_Master\", context_name=quad_name)\n     log.info(\"file_layer_entry_point(): end\")\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Dark/python/VIS_Dark/VIS_DarkCalibration_Programs/VIS_model_dark.py": [
                        [
                            "@@ -3,7 +3,7 @@ This is the entry point for the Elements program of the Dark Calibration PE.\n The Elements program name matches the name of this .py file.\n \"\"\"\n #\n-# Copyright (C) 2012-2022 Euclid Science Ground Segment\n+# Copyright (C) 2012-2023 Euclid Science Ground Segment\n #\n # This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n # Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n@@ -41,6 +41,7 @@ def mainMethod(args):\n         Named arguments.  The supported arguments are defined in command_line_options.py.\n     \"\"\"\n     fep.file_layer_entry_point(args.in_images,\n+                               args.config_ini,\n                                args.out_master,\n                                quadrant_id=args.extname,\n                                in_flagmaps=args.in_flagmaps)\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Dark/python/VIS_Dark/VIS_DarkCalibration_Programs/command_line_options.py": [
                        [
                            "@@ -3,7 +3,7 @@\n For a more general overview of the input and output data, see this project's README.md.\n \"\"\"\n #\n-# Copyright (C) 2012-2022 Euclid Science Ground Segment\n+# Copyright (C) 2012-2023 Euclid Science Ground Segment\n #\n # This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n # Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n@@ -37,6 +37,8 @@ def define_cmd_line_options():\n                         help='(optional) input flagmaps FITS file names')\n     parser.add_argument('--extname', type=str,\n                         help='(optional) name or number of the quadrant to be examined (e.g. \"CCDID 2-1 QUADID E\").')\n+    parser.add_argument('--config_ini', type=str,\n+                        help='Input configuration file name')\n     parser.add_argument('--out_master', type=str,\n                         help='master dark current image output FITS file name')\n     return parser\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Dark/python/VIS_Dark/VIS_Dark_Modelling/dark_modelling.py": [
                        [
                            "@@ -28,21 +28,8 @@ import VIS_PyLibrary_M.image_subareas as isa\n \n __all__ = ['pe_name','model_dark']\n \n-_COSMIC_EXCLUSION_KAPPA = 3 #kappa value to be used when sigma-kappa clipping cosmic outliers\n \n-##If a column has this many bad pixels, it is counted as a bad column.\n-_BAD_COLUMN_THRESHOLD = 200\n-\n-##Threshold above which a pixel is defined as a bad hot pixel.  Expressed in electrons per second, as defined\n-# in #14799-20.\n-_HOT_THRESHOLD_PER_SEC = 0.3\n-\n-##Threshold above which a pixel is defined as a warm pixel.  Expressed in electrons per second, as defined\n-# in #15878-2.\n-_WARM_THRESHOLD_PER_SEC = 0.00886  #TODO this seems too low compared to readout noise (TBD)\n-\n-\n-def _exclude_cosmics(images):\n+def _exclude_cosmics(images, dark_cfg):\n     \"\"\"\n     Create a masked array from images.\n \n@@ -51,6 +38,8 @@ def _exclude_cosmics(images):\n     images : MaskedArray of number\n         A stack of images, in which cosmic ray affected pixels shall be identified.  Not modified by this method,\n         but the returned array may be a view not a copy of the data.\n+    dark_cfg : dictionary-like\n+        Config parameters.  This could be a SectionProxy from a ConfigParser, or any other dictionary-like object.\n \n     Returns\n     -------\n@@ -59,20 +48,22 @@ def _exclude_cosmics(images):\n     \"\"\"\n     log = elog.getLogger(__name__)\n     log_fn = log.debug\n+    cosmic_exclusion_kappa = float(dark_cfg[\"cosmic_exclusion_kappa\"])\n+    log.info(\"model_dark(): cosmic_exclusion_kappa is \" + str(cosmic_exclusion_kappa))\n     masked_img = ma.array(images, copy=False)\n     initial_masked_count = int(masked_img.size - masked_img.count())\n     median_img = ma.median(masked_img, axis=0)\n     stdev_img = ma.std(masked_img, axis=0, dtype=np.float64)\n     stdev_median = ma.median(stdev_img) #should be a pixel which has no cosmics in it\n-    hi_threshold_img = median_img + (stdev_median * _COSMIC_EXCLUSION_KAPPA)\n-    lo_threshold_img = median_img - (stdev_median * _COSMIC_EXCLUSION_KAPPA)\n+    hi_threshold_img = median_img + (stdev_median * cosmic_exclusion_kappa)\n+    lo_threshold_img = median_img - (stdev_median * cosmic_exclusion_kappa)\n     masked_img = ma.array(masked_img, mask=((masked_img >= hi_threshold_img) | (masked_img <= lo_threshold_img)), copy=False)\n     masked_count = int(masked_img.size - masked_img.count())\n     masked_count = masked_count - initial_masked_count\n     log_fn(\"_exclude_cosmics(): excluded \" + str(masked_count) + \" (total \" + str(initial_masked_count+masked_count) + \")\")\n     return masked_img\n \n-def _generate_flagmap(image, prior_flagmap=None):\n+def _generate_flagmap(image, dark_cfg, prior_flagmap=None):\n     \"\"\"\n     Create a new flagmap of hot pixels.\n \n@@ -81,6 +72,8 @@ def _generate_flagmap(image, prior_flagmap=None):\n     image : MaskedArray of number\n         An image in which bad pixels shall be identified, by relative comparison.  It should be in the same units\n         as the threshold value used here.  Not modified by this method.\n+    dark_cfg : dictionary-like\n+        Config parameters.  This could be a SectionProxy from a ConfigParser, or any other dictionary-like object.\n     prior_flagmap : numpy.ndarray of int32\n         The existing flagmap to be added to, or optionally None.\n \n@@ -93,8 +86,13 @@ def _generate_flagmap(image, prior_flagmap=None):\n         - The total number of hot pixels.\n         - The total number of bad columns (i.e. containing more than N bad pixels).\n     \"\"\"\n+    log = elog.getLogger(__name__)\n+    hot_threshold_per_sec = float(dark_cfg[\"hot_threshold_per_sec\"])\n+    log.info(\"model_dark(): hot_threshold_per_sec is \" + str(hot_threshold_per_sec))\n+    bad_column_threshold = int(dark_cfg[\"bad_column_threshold\"])\n+    log.info(\"model_dark(): bad_column_threshold is \" + str(bad_column_threshold))\n     new_flagmap = np.zeros_like(image.data, dtype=np.int32)\n-    new_flagmap[image > _HOT_THRESHOLD_PER_SEC] = VIS_FLAGS[\"HOT\"] | VIS_FLAGS[\"INVALID\"]\n+    new_flagmap[image > hot_threshold_per_sec] = VIS_FLAGS[\"HOT\"] | VIS_FLAGS[\"INVALID\"]\n     #apply the mask to avoid re-detecting prior known hot pixels\n     flagmap_masked = ma.array(new_flagmap, mask=image.mask, copy=False)\n     new_flagmap = flagmap_masked.filled(fill_value=0)\n@@ -103,7 +101,7 @@ def _generate_flagmap(image, prior_flagmap=None):\n     hot_count = int(((new_flagmap & VIS_FLAGS[\"HOT\"] ) != 0).sum())\n     bad_columns = 0\n     for column in new_flagmap:\n-        if int(((column & VIS_FLAGS[\"HOT\"]) != 0).sum()) >= _BAD_COLUMN_THRESHOLD:\n+        if int(((column & VIS_FLAGS[\"HOT\"]) != 0).sum()) >= bad_column_threshold:\n             column[:] = VIS_FLAGS[\"HOT\"] | VIS_FLAGS[\"INVALID\"]\n             bad_columns += 1\n     return new_flagmap, hot_count, bad_columns\n@@ -112,7 +110,7 @@ def pe_name():\n     \"\"\"Returns the name of the corresponding PE (not to be confused with module, program or project name).\"\"\"\n     return \"VIS_DarkCalibration\"\n \n-def model_dark(image_stack, exposure_durations, flagmaps, flag_ccd_id, flag_quad_id,\n+def model_dark(image_stack, exposure_durations, flagmaps, dark_cfg, flag_ccd_id, flag_quad_id,\n                flag_prescan_size, flag_serial_overscan_size, flag_parallel_overscan_size):\n     \"\"\"\n     Combines N images in to 1 and measures the dark current effect.\n@@ -128,6 +126,9 @@ def model_dark(image_stack, exposure_durations, flagmaps, flag_ccd_id, flag_quad\n         A 3-D array, the same size and orientation as the images in `image_stack`, except for the optional presence\n         of pre/overscan areas.  Each pixel is a bitfield of flags, in some integer type (not floating point).\n         If `image_stack` is a MaskedArray then this parameter should be None (to avoid ambiguity).\n+    dark_cfg : dictionary-like\n+        Config parameters for the algorithm.  This could be a SectionProxy from a ConfigParser, or any other\n+        dictionary-like object.\n     flag_ccd_id : string\n         In the usual Euclid X-Y format, e.g. \"2-4\".  Only applicable if flagmaps are supplied.\n     flag_quad_id : string\n@@ -172,6 +173,8 @@ def model_dark(image_stack, exposure_durations, flagmaps, flag_ccd_id, flag_quad\n                             for flagmap in flagmaps]\n             flagmaps = np.array(flagmap_crop, dtype=flagmap_crop[0].dtype, copy=False)\n         image_stack = ma.array(image_stack, mask=flagmaps & VIS_FLAGS[\"INVALID\"], copy=False)\n+    warm_threshold_per_sec = float(dark_cfg[\"warm_threshold_per_sec\"])\n+    log.info(\"model_dark(): warm_threshold_per_sec is \" + str(warm_threshold_per_sec))\n     initial_count = image_stack.count()\n     log.info(\"model_dark(): Exposure durations: \" + str(exposure_durations))\n     durations = np.array(exposure_durations)\n@@ -179,7 +182,7 @@ def model_dark(image_stack, exposure_durations, flagmaps, flag_ccd_id, flag_quad\n     #this reshape allows us to divide each image by its own exposure time\n     durations_3d = durations.reshape(durations.size,1,1)\n     dark_rate_stack = image_stack / durations_3d\n-    masked_rate_stack = _exclude_cosmics(dark_rate_stack)\n+    masked_rate_stack = _exclude_cosmics(dark_rate_stack, dark_cfg)\n     statistics[\"dark_cr_density\"] = (initial_count - int(masked_rate_stack.count())) / initial_count\n     image_means = masked_rate_stack.mean(axis=(1,2))\n     log.info(\"model_dark(): Mean dark current (per unit time) of each image: \" + str(image_means.tolist()))\n@@ -188,15 +191,19 @@ def model_dark(image_stack, exposure_durations, flagmaps, flag_ccd_id, flag_quad\n     #istat.print_stats(istat.calc_img_stats(dark_rate_image), \"Mean dark current rate image\")\n     log.info(\"model_dark(): Min,Mean,Max of dark current rate image: \" + str(dark_rate_image.min()) +\n                             \", \" + str(dark_rate_image.mean()) + \", \" + str(dark_rate_image.max()))\n-    flagmap, hot_count, bad_cols = _generate_flagmap(dark_rate_image)\n+    flagmap, hot_count, bad_cols = _generate_flagmap(dark_rate_image, dark_cfg)\n     fully_masked_img = ma.array(dark_rate_image, mask=flagmap)\n     statistics[\"dark_hot_px_count\"] = hot_count\n     statistics[\"dark_bad_column_count\"] = bad_cols\n-    if hot_count < fully_masked_img.size:\n-        statistics[\"dark_mean\"] = fully_masked_img.mean()\n-        statistics[\"dark_warm_px_count\"] = int((fully_masked_img >= _WARM_THRESHOLD_PER_SEC).sum())\n-    else:\n+    if hot_count == fully_masked_img.size:\n         message = \"model_dark(): All pixels are hot\"\n         log.error(message)\n         raise Exception(message)\n+    elif fully_masked_img.count() == 0:\n+        message = \"model_dark(): All pixels are masked (perhaps the hot pixel threshold is too low?)\"\n+        log.error(message)\n+        raise Exception(message)\n+    else:\n+        statistics[\"dark_mean\"] = fully_masked_img.mean()\n+        statistics[\"dark_warm_px_count\"] = int((fully_masked_img >= warm_threshold_per_sec).sum())\n     return dark_rate_image, flagmap, statistics\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Dark/tests/python/VIS_model_dark_test.py": [
                        [
                            "@@ -10,7 +10,7 @@ out-of-date.  Some of the ingredients might be:\n To run them at the command line, use \"make purge install ; make CTEST_OUTPUT_ON_FAILURE=1 test\"\n \"\"\"\n #\n-# Copyright (C) 2012-2020 Euclid Science Ground Segment\n+# Copyright (C) 2012-2023 Euclid Science Ground Segment\n #\n # This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n # Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n@@ -28,6 +28,9 @@ import pytest\n \n import VIS_Dark.VIS_DarkCalibration_Programs.VIS_model_dark as prog\n \n+#remove suffix from the python module's file name, to give the name of this test\n+_TEST_NAME = __name__.split(\"_test\")[0]\n+\n \n def test_main_method_badargs():\n     \"\"\"Call the command line entry point with an argument that is not recognised.\n@@ -44,8 +47,14 @@ def test_main_method_callable():\n \n     Assert that the expected file-not-found exception is thrown.\n     \"\"\"\n+    ini_file_name = \"params_\" + _TEST_NAME + \".ini\"\n+    ini_file = open(ini_file_name, 'w')\n+    ini_file.write(\"[VIS_model_dark]\\n\")\n+    ini_file.write(\"not_used = 0\\n\")\n+    ini_file.close()\n     arg_string = ['argv_item_zero_which_is_not_used',\n-                  '--in_image', 'non/existent/input/file.fits']\n+                  '--in_images', 'non/existent/input/file.fits',\n+                  \"--config_ini\", ini_file_name]\n     #An IOError Exception \"No such file or directory\" is expected\n     with pytest.raises(IOError):\n         prog.cmd_line_entry_point(arg_string)\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Dark/tests/python/regression_cmp_10692_test.py": [
                        [
                            "@@ -15,7 +15,7 @@ out-of-date.  Some of the ingredients might be:\n To run them at the command line, use \"make purge install ; make CTEST_OUTPUT_ON_FAILURE=1 test\"\n \"\"\"\n #\n-# Copyright (C) 2012-2020 Euclid Science Ground Segment\n+# Copyright (C) 2012-2023 Euclid Science Ground Segment\n #\n # This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n # Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n@@ -40,9 +40,17 @@ _TEST_NAME = __name__.split(\"_test\")[0]\n def test_main():\n     \"\"\" Call the Elements program, then compare the actual output file with the expected output. \"\"\"\n     cmp_test_manager = regcmp.RegressionCmp(prog.parent_subpackage_name(), _TEST_NAME)\n+    ini_file_name = \"params_\" + _TEST_NAME + \".ini\"\n+    ini_file = open(ini_file_name, 'w')\n+    ini_file.write(\"[VIS_model_dark]\\n\")\n+    ini_file.write(\"cosmic_exclusion_kappa = 3\\n\")\n+    ini_file.write(\"bad_column_threshold = 200\\n\")\n+    ini_file.write(\"hot_threshold_per_sec = 0.3\\n\")\n+    ini_file.write(\"warm_threshold_per_sec = 0.00886\\n\")\n+    ini_file.close()\n     prog.cmd_line_entry_point([\"dummy_unused_program_name\",\n                                \"--in_images\"] +\n                               cmp_test_manager.get_input_filenames() +\n-                              [\"--extname\", \"2-3.G\",\n+                              [\"--extname\", \"2-3.G\", \"--config_ini\", ini_file_name,\n                                \"--out_master\", cmp_test_manager.get_actual_output_filename()])\n     cmp_test_manager.compare_output()\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Gains/tests/python/VIS_gain_equalisation_test.py": [
                        [
                            "@@ -30,7 +30,7 @@ import tempfile\n import numpy as np\n import fitsio\n \n-import py.test\n+import pytest\n from VIS_Gains import VIS_gain_equalisation\n \n \n@@ -43,7 +43,15 @@ class TestVIS_gain_equalisation(object):\n     if (not \"HOSTNAME\" in os.environ) or not os.environ[\"HOSTNAME\"].startswith( \"cca\"):\n       return\n \n-    assert os.path.exists( fits_name)\n+    if not os.path.exists( fits_name):\n+      return\n+\n+\n+\n+### TODO: create an artificial FITS quadrant instead of using an existing CC one\n+\n+\n+\n     print( \"starting VIS_Gain test using \" + fits_name)\n \n     # use a fake ref_gain so that ref_gain/cal_gain is a power of two\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Ghosts/python/VIS_Ghosts/VIS_flag_ghosts_lib.py": [
                        [
                            "@@ -990,7 +990,7 @@ class FlagGhostsConfig():\n \n \n     # build QualityControl HTML filename\n-    qc_filename = visdiags.diagdir_filename( self.logdir, visdiags.ghost_flagging_filename( self.VISEXPID))\n+    self.qc_filename = visdiags.diagdir_filename( self.logdir, visdiags.ghost_flagging_filename( self.VISEXPID))\n \n     # Build the plot\n     fig = plt.figure()\n@@ -1062,7 +1062,7 @@ class FlagGhostsConfig():\n <!DOCTYPE html>\n <html>\n <head>\n-<title>{os.path.basename( qc_filename)}</title>\n+<title>{os.path.basename( self.qc_filename)}</title>\n </head>\n \n <body>\n@@ -1124,11 +1124,11 @@ Flag quality number: <b>{self.flag_quality:.2f}</b> <br>\"\"\"\n \"\"\"\n \n     # write quality report in HTML file\n-    with open( qc_filename, \"w\") as text_file:\n+    with open( self.qc_filename, \"w\") as text_file:\n       text_file.write( html)\n-    logger.info( f\"written quality report in \" + qc_filename)\n+    logger.info( f\"written quality report in \" + self.qc_filename)\n     # and link it in data for DSS ingestion\n-    visdiags.link_diags_to_data( self.logdir, qc_filename)\n+    visdiags.link_diags_to_data( self.logdir, self.qc_filename)\n     return\n \n \n@@ -1155,7 +1155,7 @@ Flag quality number: <b>{self.flag_quality:.2f}</b> <br>\"\"\"\n       ghostcat_xmlname = self.GHOSTCAT_PREFIX + self.VISEXPID + \".xml\"\n       # create Euclid unique data filename\n       euc_gcat_file = FileNameProvider().get_allowed_filename( processing_function = 'VIS',\n-                                                               type_name = \"SWL-GHOSTCAT-\" + self.VISEXPID + \"-0000000\",\n+                                                               type_name = \"SWL-GHOSTCAT-\" + self.VISEXPID,\n                                                                instance_id = '',\n                                                                extension = '.txt')\n       # fill xml with metadata\n@@ -1164,9 +1164,12 @@ Flag quality number: <b>{self.flag_quality:.2f}</b> <br>\"\"\"\n                                                     obs_sequence = FromToXML.create_observation_sequence_from_header( self.prim_hdr))\n       # link ghost catalogue in data directory with unique filename\n       euc_gcat_file = os.path.join( self.workdir, DATADIR, euc_gcat_file)\n-      if os.path.exists( euc_gcat_file):\n-        os.remove( euc_gcat_file)\n-      os.symlink( self.ghostcat_filename, euc_gcat_file)\n+      FromToXML.failsafe_symlink( self.ghostcat_filename, euc_gcat_file)\n+\n+      # add HTML ghost report to DpdVisGhostCatalogue.Data.QualityParameterStorage\n+      if hasattr( self, \"qc_filename\"):\n+        FromToXML.add_quality_parameter_file( gc_dp, self.qc_filename)\n+\n       # write xml to disk\n       DmUtils.save_product_metadata( gc_dp, ghostcat_xmlname)\n       logger.info( \"Written ghost catalogue data product in \" + ghostcat_xmlname)\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Ghosts/tests/python/VIS_flag_ghosts_lib_test.py": [
                        [
                            "@@ -4,7 +4,7 @@\n @author smottet\n \"\"\"\n \n-import py.test\n+import pytest\n from VIS_Ghosts import VIS_flag_ghosts\n \n def test_VIS_flag_ghosts():\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Ghosts/tests/python/VIS_ghost_model_test.py": [
                        [
                            "@@ -4,7 +4,7 @@\n @author mottet@iap.fr\n \"\"\"\n \n-import py.test\n+import pytest\n import os\n import tempfile\n \n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_LargeFlat/tests/python/VIS_largeflat_calibration_test.py": [
                        [
                            "@@ -3,7 +3,7 @@\n @date 01/03/21\n @author user\n \"\"\"\n-import py.test\n+import pytest\n import VIS_LargeFlat.VIS_LargeFlatCalibration_Programs.VIS_illum_model\n \n class TestVIS_LargeFlat_correction(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_LargeFlat/tests/python/VIS_largeflat_correction_test.py": [
                        [
                            "@@ -3,7 +3,7 @@\n @date 01/03/21\n @author user\n \"\"\"\n-import py.test\n+import pytest\n import VIS_LargeFlat.VIS_LargeFlatCorrection_Programs.VIS_illum_correct\n \n class TestVIS_LargeFlat_correction(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_NonLinearity/python/VIS_NonLinearity/VIS_NLcalib_quadrant.py": [
                        [
                            "@@ -20,6 +20,7 @@ logger = ElementsKernel.Logging.getLogger( __name__)\n from VIS_Tasks_Common import FromToXML\n from VIS_PyLibrary_Common import pipe_tools\n import VIS_NonLinearity.VIS_NonLinCalibration_IO.file_entry_point as NonLinCalibration\n+import VIS_NonLinearity_Aperture.VIS_NonLinCalibrationAper_IO.file_entry_point as NonLinCalibration_Aper\n \n \n #-------------------------------------------------------------------------------\n@@ -81,6 +82,15 @@ def mainMethod(args):\n \n   # calibrate nonlinearity using all exposures for each quadrant\n   output_nlmodels_list = list()\n+\n+  nl_method = 'PIXELS'\n+\n+  if config.has_section( 'NLCalib' ):\n+    if config.has_option('NLCalib', 'Method'):\n+      nl_method = config.get( 'NLCalib', 'Method')\n+    else:\n+      logger.info(\"No NLCalib.Method found default to PIXELS\")\n+\n   for i, ext in enumerate( quads_to_calib):\n     logger.info( f\"Processing quadrant '{ext}' ({i+1}/{len( quads_to_calib)})\")\n \n@@ -91,7 +101,12 @@ def mainMethod(args):\n #    flag_quad_list = [flg_name + \".\" + ext for flg_name in flagmaps_list]\n \n     output_model_file = f\"NLCalib_model_quad{ext}.json\"\n-    NonLinCalibration.file_layer_entry_point( exp_quad_list, output_file=output_model_file)\n+    if nl_method == 'PIXELS':\n+      logger.info(\"Calling Pixels algorithm\")\n+      NonLinCalibration.file_layer_entry_point( exp_quad_list, output_file=output_model_file)\n+    else:\n+      logger.info(\"Calling Aperature algorithm\")\n+      NonLinCalibration_Aper.file_layer_entry_point( exp_quad_list, output_file=output_model_file)\n     output_nlmodels_list.append( output_model_file)\n \n   # write list of NL model json file per quadrant\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_NonLinearity/python/VIS_NonLinearity/VIS_NLcalib_xml_out.py": [
                        [
                            "@@ -107,10 +107,11 @@ def mainMethod( args):\n #\n #  FromToXML.create_qualityparams_fromlist(data_product,None, qcnewfile ,False,True)\n ###############\n+  FromToXML.create_qualityparams_fromlist(data_product,None, qcnewfile ,False,True)\n \n-  FromToXML.add_generic_parameter_file( data_product,\n-                                        \"NL_QualityControl\",\n-                                        os.path.join(  os.path.dirname( datafile_out) , qcnewfile))\n+  #FromToXML.add_generic_parameter_file( data_product,\n+  #                                      \"NL_QualityControl\",\n+  #                                      os.path.join(  os.path.dirname( datafile_out) , qcnewfile))\n \n   DmUtils.save_product_metadata( data_product, args.nlcorr_xml_out)\n \n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_NonLinearity/python/VIS_NonLinearity/VIS_NonLinCalibration_IO/image_reading.py": [
                        [
                            "@@ -97,7 +97,7 @@ def read_all_images(input_files, quadrant_name, in_flagmaps=None):\n     Parameters\n     ----------\n     input_files : array_like of string\n-        File names of the input FITS files, to be examined.  All of them must contain the quadrant specifed\n+        File names of the input FITS files, to be examined.  All of them must contain the quadrant specified\n         by `quadrant_name`.  They must be sorted by sequence then by increasing exposure duration.  All sequences\n         must have the same number of exposures (e.g. 16 sequences each having 4 exposures).\n     quadrant_name : string\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_NonLinearity_Aperture/python/VIS_NonLinearity_Aperture/VIS_NonLinAper_Modelling/non_lin_aper_modelling.py": [
                        [
                            "@@ -154,7 +154,7 @@ def model_non_lin(observed_images, exposure_durations, aperture_centres, flagmap\n     log.info(\"model_non_lin(): aperture list count after filtering: \" + str(len(apertures_list)))\n     log.info(\"model_non_lin(): mean filtered exposure count per sequence: \" +\n                                str(sum([len(a) for a in apertures_list]) / len(apertures_list)))\n-    #TODO cope with overlapping apertures, e.g. by merging them (see email on 7 Feb)\n+    #TODO investigate whether apertures ever overlap (and merge them? see email on 7 Feb)\n     fit_coeffs = aperture_method.main_realdata(log, exposure_times_lookup, apertures_list, exposure_time_indexes)\n     fit_coeffs = np.flip(fit_coeffs)\n     return fit_coeffs\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_NonLinearity_Aperture/python/VIS_NonLinearity_Aperture/VIS_NonLinCalibrationAper_IO/file_entry_point.py": [
                        [
                            "@@ -1,4 +1,4 @@\n-\"\"\"The layer of the Non-linearity Calibration PE which reads/writes files on disk.\n+\"\"\"The layer of the Non-linearity Aperture-based Calibration PE which reads/writes files on disk.\n \n This layer should be used by a caller who can supply the file names of input files to be read, and optionally the\n name of an output file to be written.  The output fitted model converts non-linear to linear flux.\n@@ -18,32 +18,34 @@ name of an output file to be written.  The output fitted model converts non-line\n # the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n #\n \n+import os\n import numpy as np\n import astropy.io.fits as pf\n import json\n \n import ElementsKernel.Logging as elog\n \n+from VIS_Tasks_Common import Modules\n+\n import VIS_PyLibrary_M.fits_io_library as fio\n \n from VIS_NonLinearity_Aperture.VIS_NonLinAper_Modelling import non_lin_aper_modelling as algo\n from . import file_validation as fv\n from . import image_reading as reader\n-#from . import image_stitching as ims\n \n __all__ = ['file_layer_entry_point']\n \n+#the FITS extension number to look at in SExtractor catalogues\n+_CATALOGUE_EXTENSION_INDEX = 2\n+\n #the output file will have these column names on the first line\n _HEADER_ROW = (\"linear_flux\", \"non-linear_flux\")\n \n \n def _read_catalogue(catalogue_filename):\n     hdu = pf.open(catalogue_filename)\n-    #TODO how do we know which extension (i.e. table) to look at?\n-    _EXTENSION_INDEX = 2\n-    #TODO which column should be used and is there any conversion/offset needed?\n-    x_values = hdu[_EXTENSION_INDEX].data[\"XWIN_IMAGE\"]\n-    y_values = hdu[_EXTENSION_INDEX].data[\"YWIN_IMAGE\"]\n+    x_values = hdu[_CATALOGUE_EXTENSION_INDEX].data[\"XWIN_IMAGE\"]\n+    y_values = hdu[_CATALOGUE_EXTENSION_INDEX].data[\"YWIN_IMAGE\"]\n     x_y_coords = np.column_stack((x_values, y_values))\n     hdu.close()\n     return x_y_coords\n@@ -55,7 +57,57 @@ def _read_all_catalogues(catalogue_filenames, required_shape):\n     star_xy.shape = required_shape\n     return star_xy\n \n-def file_layer_entry_point(input_files, catalogues, in_flagmaps=None, output_file=None, quadrant_id=None):\n+def _find_stars(input_files, in_flagmaps, required_shape, temp_dir):\n+    \"\"\"Find star x,y positions in the supplied images.\n+\n+    Parameters\n+    ----------\n+    input_files : array_like of string\n+        File names of the input FITS files, to be examined.\n+    in_flagmaps : array_like of string\n+        Optional file names of input flagmap FITS files.  They must correspond to `input_files`, in the same order\n+        and number.  Otherwise this parameter can be None if there are no flagmaps.\n+    required_shape : array_like of number\n+        The expected shape of the output array of star x,y positions.\n+    temp_dir : string\n+        Directory to use for SExtractor output files.\n+\n+    Returns\n+    -------\n+    ndarray of ndarray of number\n+        Two-dimensional numpy array of the same shape as the first two dimensions of `observed_images`.  Each array\n+        item contains a 2-D array listing the x,y coordinates of the centres of the stars.  For use as zero-based\n+        indexes in to `observed_images`.  The number of stars will be different in each image, hence this is a 2-D array\n+        of variably sized 2-D arrays, and not a 4-D array.\n+    \"\"\"\n+    log = elog.getLogger(__name__)\n+    log.info(\"_find_stars(): Creating sources catalogues with SExtractor\")\n+    if len(temp_dir) == 0:\n+        temp_dir = os.getcwd()\n+    star_xy = np.empty(shape=required_shape, dtype=np.object)\n+    for seq_i in range(len(star_xy)):\n+        sequence_length = len(star_xy[0])\n+        for exp_i in range(sequence_length):\n+            file_name_i = seq_i * sequence_length + exp_i #index for both image and flagmap file name arrays\n+            image_file_name = input_files[file_name_i]\n+            catalogue_name = os.path.join(temp_dir, os.path.basename(image_file_name) + '.ldac')\n+            log.info(\"_find_stars(): Making temp catalogue in \" + catalogue_name)\n+            if in_flagmaps is None:\n+                flagmap_file_name = None\n+            else:\n+                flagmap_file_name = in_flagmaps[file_name_i]\n+            Modules.ExtractSources(temp_dir, image_file_name, catalogue_name, temp_dir, flag=flagmap_file_name)\n+            catalogue = _read_catalogue(catalogue_name)\n+            #clean up unwanted SExtractor temporary files\n+            name_prefix = image_file_name.split(\".fits\")[0]\n+            if os.path.isfile(name_prefix + \".rms\"):\n+                os.remove(name_prefix + \".rms\")\n+            if os.path.isfile(name_prefix + \".bkg\"):\n+                os.remove(name_prefix + \".bkg\")\n+            star_xy[seq_i, exp_i] = catalogue\n+    return star_xy\n+\n+def file_layer_entry_point(input_files, in_flagmaps=None, output_file=None, quadrant_id=None):\n     \"\"\"Handles the I/O to/from files.  It is a wrapper around the core algorithm.  Each call processes a\n        single quadrant.\n \n@@ -66,9 +118,6 @@ def file_layer_entry_point(input_files, catalogues, in_flagmaps=None, output_fil\n         by `quadrant_id` (if supplied).  They must be sorted by sequence then by increasing exposure duration.\n         All sequences must have the same number of exposures (e.g. 16 sequences each having 4 exposures).  The\n         exposures of each sequence must have the same set of exposure durations.\n-    catalogues : array_like of string\n-        File names of the input LDAC catalogues, containing the central coordinates of the objects which should\n-        be used in this calibration.  They should correspond to `input_files`, in the same order and number.\n     in_flagmaps : array_like of string\n         Optional file names of input flagmap FITS files.  They should correspond to `input_files`, in the same order\n         and number.  Otherwise this can be None if there are no flagmaps.\n@@ -90,7 +139,6 @@ def file_layer_entry_point(input_files, catalogues, in_flagmaps=None, output_fil\n     \"\"\"\n     log = elog.getLogger(__name__)\n     log.info(\"file_layer_entry_point(): argument 'input_files' is: \" + str(input_files))\n-    log.info(\"file_layer_entry_point(): argument 'catalogues' is: \"  + str(catalogues))\n     log.info(\"file_layer_entry_point(): argument 'in_flagmaps' is: \" + str(in_flagmaps))\n     log.info(\"file_layer_entry_point(): argument 'quadrant_id' is: \" + str(quadrant_id))\n     log.info(\"file_layer_entry_point(): argument 'output_file' is: \" + str(output_file))\n@@ -110,7 +158,8 @@ def file_layer_entry_point(input_files, catalogues, in_flagmaps=None, output_fil\n         else:\n             images, all_exp_durations, flagmaps = reader.read_all_images(input_files, quad_name, in_flagmaps)\n         seq_durations = all_exp_durations[0]\n-        star_xy = _read_all_catalogues(catalogues, images.shape[0:2])\n+        #TODO the core PE algo currently expects a catalogue for every image but should we change this?\n+        star_xy = _find_stars(input_files, in_flagmaps, images.shape[0:2], os.path.dirname(output_file))\n         model_coeffs = algo.model_non_lin(images, seq_durations, star_xy, flagmaps)\n         if output_file:\n             with open(output_file, \"w\") as output:\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_NonLinearity_Aperture/python/VIS_NonLinearity_Aperture/VIS_NonLinCalibrationAper_IO/image_reading.py": [
                        [
                            "@@ -97,7 +97,7 @@ def read_all_images(input_files, quadrant_name, in_flagmaps=None):\n     Parameters\n     ----------\n     input_files : array_like of string\n-        File names of the input FITS files, to be examined.  All of them must contain the quadrant specifed\n+        File names of the input FITS files, to be examined.  All of them must contain the quadrant specified\n         by `quadrant_name`.  They must be sorted by sequence then by increasing exposure duration.  All sequences\n         must have the same number of exposures (e.g. 16 sequences each having 4 exposures).\n     quadrant_name : string\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_NonLinearity_Aperture/python/VIS_NonLinearity_Aperture/VIS_NonLinCalibrationAper_Programs/VIS_model_non_lin_aper.py": [
                        [
                            "@@ -42,7 +42,6 @@ def mainMethod(args):\n         Named arguments and their values, as defined in `command_line_options.py`.\n     \"\"\"\n     fep.file_layer_entry_point(args.in_images,\n-                               args.in_catalogues,\n                                in_flagmaps=args.in_flagmaps,\n                                output_file=args.out_file_name,\n                                quadrant_id=args.extname)\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_NonLinearity_Aperture/python/VIS_NonLinearity_Aperture/VIS_NonLinCalibrationAper_Programs/command_line_options.py": [
                        [
                            "@@ -35,10 +35,6 @@ def define_cmd_line_options():\n                         help='Input FITS file names (space separated, no quotes needed) sorted by sequence then ' +\n                              'by increasing exposure duration.  All sequences must have the same number of ' +\n                              'exposures and the same set of exposure durations.')\n-    parser.add_argument('--in_catalogues', type=str, nargs='+',\n-                        help='File names of input LDAC catalogues, one per corresponding exposure and in the same ' +\n-                             'order as --in_images.  They should containing the central coordinates of the objects ' +\n-                             'which should be used in this calibration')\n     parser.add_argument('--in_flagmaps', type=str, nargs='+',\n                         help='Input flagmaps FITS file names, one per corresponding exposure and in the same ' +\n                              'order as --in_images.')\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_PRNU/CMakeLists.txt": [
                        [
                            "@@ -61,9 +61,11 @@ elements_install_python_modules()\n # elements_add_python_program(PythonProgramExample\n #                             ElementsExamples.PythonProgramExample)\n #===============================================================================\n-elements_add_python_program(VIS_model_prnu VIS_PRNU.VIS_PRNUCalibration_Programs.VIS_model_prnu)\n-elements_add_python_program(VIS_remove_prnu VIS_PRNU.VIS_PRNUCorrection_Programs.VIS_remove_prnu)\n-elements_add_python_program(VIS_CombinePRNU VIS_PRNU.VIS_CombinePRNU)\n+elements_add_python_program(VIS_model_prnu            VIS_PRNU.VIS_PRNUCalibration_Programs.VIS_model_prnu)\n+elements_add_python_program(VIS_remove_prnu           VIS_PRNU.VIS_PRNUCorrection_Programs.VIS_remove_prnu)\n+elements_add_python_program(VIS_SmallScaleFlat_xml_in VIS_PRNU.VIS_SmallScaleFlat.VIS_SmallScaleFlat_xml_in)\n+elements_add_python_program(VIS_ExtrapolatePRNU       VIS_PRNU.VIS_SmallScaleFlat.VIS_ExtrapolatePRNU)\n+elements_add_python_program(VIS_CombinePRNU           VIS_PRNU.VIS_SmallScaleFlat.VIS_CombinePRNU)\n \n #===============================================================================\n # Add the elements_install_conf_files macro\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_PRNU/python/VIS_PRNU/VIS_PRNUCalibration_IO/file_entry_point.py": [
                        [
                            "@@ -15,6 +15,7 @@\n # the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n #\n \n+import math\n import astropy.io.fits as pf\n import numpy as np\n \n@@ -31,7 +32,47 @@ from . import file_validation as fv\n __all__ = ['file_layer_entry_point']\n \n \n-def file_layer_entry_point(input_files, interm_dir, output_master_file, output_surface_file, quadrant_id=None, in_flagmaps=None):\n+def parse_headers_leds(input_files, quadrant_name):\n+    \"\"\"\n+    Read and interpret LED-related FITS headers from the specified files.  As originally defined in redmine\n+    issue #21758.\n+\n+    Parameters\n+    ----------\n+    input_files : array_like of string\n+        Array of file names of input FITS files.  All files must contain the quadrant to be examined.\n+    quadrant_name : string\n+        Name of the quadrant to examine.  It should match the EXTNAME in the FITS header of an image extension\n+        in each of the `input_files`.\n+\n+    Returns\n+    -------\n+    tuple containing two values:\n+        integer or None\n+            A value in the range 1 to 6 specifying the LED number, derived from CULEDMSK.\n+            If CULEDMSK is missing this value will be None.\n+        float or None\n+            Copied from LEDnFLUN (where n is the LED number 1 to 6) but only if all the input images have the\n+            same value.  Otherwise it is zero.\n+            If either of the keywords is missing this value will be None.\n+    \"\"\"\n+    headers = [pf.getheader(filename, ext=0, memmap=False) for filename in input_files]\n+    led_id = None\n+    fluence = None\n+    if \"CULEDMSK\" in headers[0]:\n+        #assume that all the files have this value in their header\n+        led_masks = [int(hdr[\"CULEDMSK\"]) for hdr in headers]\n+        led_id = int(math.log2(led_masks[0])) + 1\n+        fluence_keyword = \"LED\" + str(led_id) + \"FLUN\"\n+        if fluence_keyword in headers[0]:\n+            fluences = np.array([float(hdr[fluence_keyword]) for hdr in headers])\n+            if (fluences == fluences[0]).all():\n+                fluence = float(fluences[0])\n+            else:\n+                fluence = 0.0\n+    return (led_id, fluence)\n+\n+def file_layer_entry_point(input_files, interm_dir, output_master_file, output_surface_file, quadrant_id=None, in_flagmaps=None, output_avg_file=None):\n     \"\"\"\n     This layer handles the I/O to/from files.  It is a wrapper around the algorithm.\n \n@@ -64,6 +105,12 @@ def file_layer_entry_point(input_files, interm_dir, output_master_file, output_s\n     log.info(\"file_layer_entry_point(): argument 'interm_dir' is: \" + str(interm_dir))\n     log.info(\"file_layer_entry_point(): argument 'output_master_file' is: \" + str(output_master_file))\n     log.info(\"file_layer_entry_point(): argument 'output_surface_file' is: \" + str(output_surface_file))\n+    if output_master_file:\n+        if output_avg_file:\n+            output_average_flat_file = output_avg_file\n+        else:\n+            output_average_flat_file = output_master_file + \".avgflat.fits\"\n+        log.info(\"file_layer_entry_point(): output_average_flat_file is: \" + str(output_average_flat_file))\n \n     if interm_dir == \".\":\n         interm_dir = \"\"  #write to the current directory\n@@ -81,9 +128,7 @@ def file_layer_entry_point(input_files, interm_dir, output_master_file, output_s\n             elif quadrant_id.isdigit():\n                 quadrant_id = int(quadrant_id)\n             quad_name = fio.read_ext_name(input_files[0], quadrant_id)\n-            #In future the VIS_PyLibrary might support loading directly in to float32, but for the moment\n-            #this loads as float64 then converts to float32.  This has no significant cost and maximises\n-            #compatibility.  Wait for the outcomes of #11116 and #10907 before deciding what to do.\n+            led_id, fluence = parse_headers_leds(input_files, quad_name)\n             image_stack = fio.load_multi_same_ext(input_files, quad_name, apply_gain=False)\n             image_stack32 = np.array(image_stack, dtype=np.float32, copy=False, order=\"C\")\n             image_stack = None\n@@ -105,7 +150,7 @@ def file_layer_entry_point(input_files, interm_dir, output_master_file, output_s\n                 flag_ccd_id = handle[quadrant_id].header[\"CCDID\"]\n                 flag_quad_id = handle[quadrant_id].header[\"QUADID\"]\n                 handle.close()\n-            prnu_image, flagmap_image, surface_image, inputs_stats, master_stats = algo.model_prnu(\n+            prnu_image, flagmap_image, surface_image, avg_flat, inputs_stats, master_stats = algo.model_prnu(\n                     image_stack32, flagmaps, input_files, quad_name, interm_dir, flag_ccd_id, flag_quad_id,\n                     flag_prescan_size, flag_serial_overscan_size, flag_parallel_overscan_size)\n             header_stats = istat.header_stats_list(input_files)\n@@ -113,9 +158,15 @@ def file_layer_entry_point(input_files, interm_dir, output_master_file, output_s\n             inputs_stats.update(header_stats)\n             log.info(\"file_layer_entry_point(): writing master PRNU image to FITS file \" + output_master_file)\n             fio.save_single_ext(output_master_file, prnu_image, quad_name, input_files[0], gain=1.0, apply_gain=False, bunit=\"n/a\")\n+            if led_id is not None:\n+                pf.setval(output_master_file, \"LEDID\",   value=led_id,  ext=0, memmap=False)\n+            if fluence is not None:\n+                pf.setval(output_master_file, \"FLUENCE\", value=fluence, ext=0, memmap=False)\n             fio.save_single_ext(output_master_file + \".flagmap.fits\", flagmap_image, quad_name, input_files[0], gain=1.0, apply_gain=False, bunit=\"n/a\")\n             if output_surface_file is not None:\n                 fio.save_single_ext(output_surface_file, surface_image, quad_name, input_files[0], gain=1.0, apply_gain=False, bunit=\"n/a\")\n+            fio.save_single_ext(output_average_flat_file, avg_flat, quad_name, input_files[0], gain=None, apply_gain=False)\n+            master_stats.update(istat.dates_summary(inputs_stats, \"prnu\"))\n             peri.save_peri(inputs_stats, output_master_file, \"VIS_PRNUCalibration_Frames\", context_name=quad_name)\n             peri.save_peri(master_stats, output_master_file, \"VIS_PRNUCalibration_Master\", context_name=quad_name)\n     log.info(\"file_layer_entry_point(): end\")\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_PRNU/python/VIS_PRNU/VIS_PRNU_Modelling/prnu_modelling.py": [
                        [
                            "@@ -168,6 +168,8 @@ def model_prnu(image_stack, flagmaps, input_files, quadrant_name, interm_dir, fl\n     excluded_frac_before = 1.0 - int(image_stack.count()) / image_stack.size\n     log.info(\"model_prnu(): Initially, {:.3G}% of pixel values are masked\".format(excluded_frac_before * 100))\n     log.info(\"model_prnu(): Sigma of stack: \" + str(ma.std(image_stack, dtype=np.float64)))\n+    #this averaged flat image is interesting for offline viewing\n+    averaged_flat = ma.median(image_stack, axis=0).filled(fill_value=1.0)\n     exclusion_mask = oi.find_outliers(image_stack, _OUTLIER_N_SIGMA_ONE, _OUTLIER_N_SIGMA_TWO, _MODE_BIN_WIDTH,\n                                       _MINIMUM_FLUX, input_files, quadrant_name, interm_dir)\n     masked_stack = ma.array(image_stack, mask=exclusion_mask, copy=False)\n@@ -209,4 +211,4 @@ def model_prnu(image_stack, flagmaps, input_files, quadrant_name, interm_dir, fl\n     master_stats[\"prnu_cold_count\"] = cold_count\n     master_stats[\"prnu_hot_count\"] = hot_count\n     master_stats[\"prnu_bad_column_count\"] = bad_cols\n-    return prnu_image.filled(fill_value=1.0), flagmap, surface_model, stats, master_stats\n+    return prnu_image.filled(fill_value=1.0), flagmap, surface_model, averaged_flat, stats, master_stats\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_PRNU/python/VIS_PRNU/VIS_SmallScaleFlat/VIS_CombinePRNU.py": [
                        [
                            "@@ -0,0 +1,209 @@\n+#\n+# Copyright (C) 2012-2020 Euclid Science Ground Segment\n+#\n+# This library is free software; you can redistribute it and/or modify it under\n+# the terms of the GNU Lesser General Public License as published by the Free\n+# Software Foundation; either version 3.0 of the License, or (at your option)\n+# any later version.\n+#\n+# This library is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+# FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+# details.\n+#\n+# You should have received a copy of the GNU Lesser General Public License\n+# along with this library; if not, write to the Free Software Foundation, Inc.,\n+# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+#\n+\n+\n+\"\"\"\n+:file: VIS_PRNU/VIS_SmallScaleFlat/VIS_CombinePRNU.py\n+\n+:date: 26 May 2023\n+:author: mottet@iap.fr\n+\n+:description:\n+\n+The VIS_SmallScaleFlat pipeline comes after the VIS_MasterFlat pipeline.\n+First the VIS_MasterFlat pipeline is called once for every LEDID/FLUENCE pair,\n+to produce one MasterFlat frame per LEDID/FLUENCE\n+\n+Then all these MasterFlat frames are fed to a single VIS_SmallScaleFlat pipeline,\n+which processes them in two steps.\n+\n+First, for each LEDID, the VIS_SmallScaleFlat pipeline selects all the available FLUENCEs\n+and linearly extrapolate each pixel to the equivalent of a 0 ADU FLUENCE MasterFlat,\n+to create one 0 FLUENCE MasterFlat per LEDID.\n+\n+Then all the O FLUENCE MasterFlat per LEDID are then linearly combined using weights\n+to create a LED0 0 ADU FLUENCE MasterFlat frame which is the final MasterFlat frame\n+used in the science pipelines and other calibration pipeleines.\n+\n+\"\"\"\n+\n+import argparse\n+import os\n+import numpy as np\n+\n+import logging\n+logger = logging.getLogger( __name__)\n+\n+from astropy.io import fits\n+from ST_DM_DmUtils import DmUtils\n+\n+from VIS_Tasks_Common import FromToXML\n+from VIS_PyLibrary_Common import pipe_tools\n+from VIS_PyLibrary_Common.common_definitions import DATADIR\n+from VIS_PRNU.VIS_SmallScaleFlat import VIS_SmallScaleFlat_xml_in\n+\n+\n+################################################################################\n+\n+MODEL = {\n+  \"LED1\": 1.0,\n+  \"LED2\": 1.0,\n+  \"LED3\": 1.0,\n+  \"LED4\": 1.0,\n+  \"LED5\": 1.0,\n+  \"LED6\": 1.0\n+}\n+\n+\n+################################################################################\n+\n+def combine_flagmaps( flagin_list, flagmap_out):\n+\n+  hdul0 = fits.open( flagin_list[0], memmap=False)\n+\n+  # create output flagmap\n+  logger.info( \"writing output flagmap \" + flagmap_out)\n+  fits.writeto( flagmap_out, data=None, header=hdul0[0].header, overwrite=True)\n+\n+  # scan and combine flagmaps extensions\n+  for hdu in hdul0[1:]:\n+    extname = hdu.header[\"EXTNAME\"]\n+    flag_out = hdu.data\n+    for flagmapin in flagin_list[1:]:\n+      temp_flag = fits.getdata( flagmapin, extname=extname)\n+      flag_out |= temp_flag\n+    fits.append( flagmap_out, flag_out, header=hdu.header, verify=False)\n+  hdul0.close()\n+  return\n+\n+\n+################################################################################\n+\n+def combine_PRNU( prnu_filelist, combine_model, timestamp):\n+  \"\"\"Linearly combine all quadrants in PRNU files in 'prnu_filelist'\n+  with coefficients in 'combine_model' and write the result in 'prnu_file_out' FITS file\n+  \"\"\"\n+\n+  # get LED identifiant of each input monochromatic PRNU\n+  # and create a primary header storing the combined PRNU file names and coefficients\n+  prnu_dict = dict()\n+  prim_hdr = dict()\n+  for prnu_filename in prnu_filelist:\n+    hdul_in = fits.open( prnu_filename, memmap=False)\n+    led_id, fluence = VIS_SmallScaleFlat_xml_in.get_PRNU_metadata( prnu_filename)\n+    logger.info( f\"{prnu_filename}, LED{led_id}\")\n+    prnu_dict[led_id] = hdul_in\n+    prim_hdr[led_id + \"FILE\"] = os.path.basename( prnu_filename)\n+    prim_hdr[led_id + \"COEF\"] = combine_model[\"LED\"+led_id]\n+\n+  led_ids = sorted( list( set( prnu_dict.keys())))\n+  assert len( led_ids) == len( prnu_dict.keys()), \\\n+    f\"ERROR: there must be only one input zero-signal PRNU per LED\"\n+\n+  norm = 0\n+  for led_id in led_ids:\n+    norm += combine_model[\"LED\"+led_id]\n+  logger.info( f\"model norm for leds {led_ids}: {norm}\")\n+\n+  # create the output combined PRNU FITS file primary HDU\n+  small_scale_flat_out = os.path.join( DATADIR, f\"EUC_VIS_MSR-FLA_LED{''.join( led_ids)}-000ADU__{timestamp}.fits\")\n+  logger.info( \"create output combined PRNU file: \" + small_scale_flat_out)\n+  prim_hdu = fits.HDUList( [fits.PrimaryHDU( header=fits.Header( prim_hdr))])\n+  prim_hdu.writeto( small_scale_flat_out, overwrite=True)\n+\n+  # combine each quadrant and append it to ouput FITS file\n+  hdul0 = prnu_dict[led_ids[0]]\n+  for hdu in hdul0[1:]:\n+    combined_quad = np.zeros_like( hdu.data)\n+    extname = hdu.header[\"EXTNAME\"]\n+    logger.debug( \"combine \" + extname)\n+    for led_id in led_ids:\n+      combined_quad += combine_model[\"LED\"+led_id] * prnu_dict[led_id][extname].data\n+      prnu_dict[led_id][extname].data = None\n+    combined_quad /= norm\n+    fits.append( small_scale_flat_out, data=combined_quad, header=hdu.header, verify=False)\n+  return small_scale_flat_out\n+\n+\n+################################################################################\n+\n+def defineSpecificProgramOptions():\n+\n+  ap = argparse.ArgumentParser( description=\"Monochromatic PRNU combination pipeline\")\n+\n+  # https://euclid.roe.ac.uk/projects/codeen-users/wiki/Pipeline_Interfaces#Arguments\n+  # \"The workdir and logdir parameters are mandatory - any task to be run as part of a pipeline needs to support these parameters\"\n+  ap.add_argument( \"--workdir\", help=\"absolute path to the working directory\")\n+  ap.add_argument( \"--logdir\",  help=\"path to the log directory, relative to 'workdir'\")\n+  # parameters\n+  ap.add_argument( \"--MDB\",           help=\"MDB XML file path relative to 'workdir'\")\n+  ap.add_argument( \"--vis_config_in\", help='input configuration template XML file')\n+  # inputs\n+  ap.add_argument( \"--prnulist_in\",   help=\"list of input single fluence monochromatic PRNU to combine\")\n+  ap.add_argument( \"--flagmaps_in\",   help=\"list of input flagmaps to combine\")\n+  # outputs\n+  ap.add_argument( \"--smallscaleflat_out\", help=\"output SmallScaleFlat data product XML file path\")\n+  ap.add_argument( \"--prnuflagmap_out\",    help=\"output flagmap data product XML file path\")\n+  ap.add_argument( \"--dqc_data_out\",       help=\"output data quality control data product XML file path\")\n+  return ap\n+\n+\n+################################################################################\n+\n+def mainMethod( args):\n+\n+  logger.info( \"#\")\n+  logger.info( \"# Entering %s mainMethod()\" % __name__)\n+  logger.info( \"# command line: \" + pipe_tools.get_erun_commandline())\n+  pipe_tools.log_task_environment( logger)\n+  logger.info( \"#\")\n+\n+  timestamp = FromToXML.microsec_timestamp()\n+\n+  all_flatfiles = FromToXML.load_list_from_file( args.prnulist_in)\n+  # flats come by 3, first the extrapolated master flat, then its standard error per pixel\n+  # finally the extrapolation slope per pixel\n+  extrapolated_flats = all_flatfiles[0::3]\n+  extrap_stderr = all_flatfiles[1::3]\n+  extrap_slope = all_flatfiles[2::3]\n+\n+  # combine input 0-signal per LED master flats with weight per LED\n+  small_scale_flat_out = combine_PRNU( extrapolated_flats, MODEL, timestamp)\n+\n+  # merge input flagmaps\n+  flagmaps_in = list()\n+  xml_list = FromToXML.load_list_from_file( args.flagmaps_in)\n+  for xml in xml_list:\n+    flagmaps_in.append( os.path.join( DATADIR, FromToXML.get_xml_data_file_list( xml)[0]))\n+  flagmap_out = small_scale_flat_out.replace(\"EUC_VIS_MSR-FLA_LED\", \"EUC_VIS_MSR-FLA-FLAGMAP_LED\")\n+  combine_flagmaps( flagmaps_in, flagmap_out)\n+\n+  # create SmallScaleFlat data product\n+  dp_ssf_out = FromToXML.master_flat_dp( small_scale_flat_out)\n+  DmUtils.save_product_metadata( dp_ssf_out, args.smallscaleflat_out)\n+\n+  # create SmallScaleFlat FlagMap data product\n+  dp_flag_out = FromToXML.flagmap_dp( flagmap_out, \"flat\")\n+  DmUtils.save_product_metadata( dp_flag_out, args.prnuflagmap_out)\n+\n+  # create data quality control data product\n+  # encapsulating extrapolated master flats and standard errors and slopes\n+\n+  logger.info( \"#\")\n+  logger.info( \"# Exiting %s mainMethod()\" % __name__)\n+  logger.info( \"#\")\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_PRNU/python/VIS_PRNU/VIS_SmallScaleFlat/VIS_ExtrapolatePRNU.py": [
                        [
                            "@@ -0,0 +1,163 @@\n+#\n+# Copyright (C) 2012-2020 Euclid Science Ground Segment\n+#\n+# This library is free software; you can redistribute it and/or modify it under\n+# the terms of the GNU Lesser General Public License as published by the Free\n+# Software Foundation; either version 3.0 of the License, or (at your option)\n+# any later version.\n+#\n+# This library is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+# FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+# details.\n+#\n+# You should have received a copy of the GNU Lesser General Public License\n+# along with this library; if not, write to the Free Software Foundation, Inc.,\n+# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+#\n+\n+\n+\"\"\"\n+:file: VIS_PRNU/VIS_SmallScaleFlat/VIS_ExtrapolatePRNU.py\n+\n+:date: 26 May 2023\n+:author: mottet@iap.fr\n+\n+:description: Extrapolates to zero signal a series of master flat taken at\n+the same wavelength (LED) and different fluences.\n+\"\"\"\n+\n+import argparse\n+import os\n+import numpy as np\n+import time\n+\n+import logging\n+logger = logging.getLogger( __name__)\n+\n+from astropy.io import fits\n+\n+from VIS_Tasks_Common import FromToXML\n+from VIS_PyLibrary_Common import pipe_tools\n+from VIS_PRNU.VIS_SmallScaleFlat import VIS_SmallScaleFlat_xml_in\n+\n+\n+################################################################################\n+\n+def extrapolate_prnu( ledid, prnulist_in, fluences, out_fitsname, err_fitsname, slope_fitsname):\n+\n+  logger.info( f\"extrapolate_prnu(ledid={ledid}) fluences:\\n{fluences}\")\n+  logger.info( f\"extrapolate_prnu(ledid={ledid}) prnulist_in:\\n{prnulist_in}\")\n+\n+  # pre-compute constant x parts of per-pixel linear regression\n+  x = np.array( fluences, dtype=np.float32)\n+  Sx = np.sum( x)\n+  Sxx = np.dot( x, x)\n+  n = x.size\n+  nSxx_SxSx = n*Sxx - Sx*Sx\n+\n+  # open first FITS file to get a primary header and extension names\n+  hdul = fits.open( prnulist_in[0], memmap=False)\n+  primhdr = hdul[0].header\n+  primhdr[\"LEDID\"] = ledid\n+  primhdr[\"FLUENCE\"] = 0\n+\n+  logger.info( \"creating \" + out_fitsname)\n+  fits.writeto( out_fitsname, data=None, header=primhdr, overwrite=True)\n+  logger.info( \"creating \" + err_fitsname)\n+  fits.writeto( err_fitsname, data=None, header=primhdr, overwrite=True)\n+  logger.info( \"creating \" + slope_fitsname)\n+  fits.writeto( slope_fitsname, data=None, header=primhdr, overwrite=True)\n+\n+  t0 = time.time()\n+  for hdu in hdul[1:]:\n+    extname = hdu.header[\"EXTNAME\"]\n+    height, width = hdu.data.shape\n+    data_out = np.zeros_like( hdu.data)\n+    error_out = np.zeros_like( hdu.data)\n+    slope_out = np.zeros_like( hdu.data)\n+    quadstack = np.zeros( (len( prnulist_in), height, width))\n+    quadstack[0] = hdu.data\n+    for i, fitsname in enumerate( prnulist_in[1:]):\n+      quadstack[i+1] = fits.getdata( fitsname, extname=extname)\n+    for row in range( height):\n+      for col in range( width):\n+        y = quadstack[:, row, col]\n+        # https://en.wikipedia.org/wiki/Simple_linear_regression#Numerical_example\n+        Sy  = np.sum( y)\n+        Syy = np.dot( y, y)\n+        Sxy = np.dot( x, y)\n+        # slope\n+        b = (n*Sxy - Sx*Sy) / nSxx_SxSx\n+        # intercept\n+        a = Sy/n - b * Sx/n\n+        # standard errors\n+        # https://en.wikipedia.org/wiki/Standard_error\n+        Se2 = (n*Syy - Sy*Sy - b*b*nSxx_SxSx) / (n * (n-2))\n+        Sb2 = n*Se2 / nSxx_SxSx\n+        Sa2 = Sb2 * Sxx / n\n+        # save outputs\n+        data_out[row, col]  = a\n+        error_out[row, col] = np.sqrt( Sa2)\n+        slope_out[row, col] = b\n+    hdu.data = None\n+    fits.append( out_fitsname,   data_out,  header=hdu.header, verify=False)\n+    fits.append( err_fitsname,   error_out, header=hdu.header, verify=False)\n+    fits.append( slope_fitsname, slope_out, header=hdu.header, verify=False)\n+\n+  hdul.close()\n+  logger.info( f\"average extension processing duration: {(time.time()-t0)/(len( hdul)-1):.2f}s.\")\n+  return\n+\n+\n+################################################################################\n+\n+def defineSpecificProgramOptions():\n+\n+  ap = argparse.ArgumentParser( description=\"Monochromatic PRNU combination pipeline\")\n+  ap.add_argument( \"--workdir\",        required=True, help=\"absolute path to the working directory\")\n+  ap.add_argument( \"--logdir\",         required=True, help=\"path to the log directory, relative to 'workdir'\")\n+  # parameters\n+  ap.add_argument( \"--MDB\",            help=\"MDB XML file path relative to 'workdir'\")\n+  ap.add_argument( \"--vis_config_in\",  help='input configuration template XML file')\n+  # input\n+  ap.add_argument( \"--prnulist_in\",  required=True, help=\"list of input monochromatic PRNU to extrapolate\")\n+  # output\n+  ap.add_argument( \"--prnulist_out\", required=True, help=\"list of output 'zero-signal', 'standard error' and 'slope' master flats\")\n+  return ap\n+\n+\n+################################################################################\n+\n+def mainMethod( args):\n+\n+  logger.info( \"#\")\n+  logger.info( \"# Entering %s mainMethod()\" % __name__)\n+  logger.info( \"# command line: \" + pipe_tools.get_erun_commandline())\n+  pipe_tools.log_task_environment( logger)\n+  logger.info( \"#\")\n+\n+  # get fluence of each input monochromatic PRNU\n+  prnu_list = FromToXML.load_list_from_file( args.prnulist_in)\n+  fluences = list()\n+  ledid = None\n+  for prnu_filename in prnu_list:\n+    led, fluence = VIS_SmallScaleFlat_xml_in.get_PRNU_metadata( prnu_filename)\n+    if ledid is None:\n+      ledid = led\n+    else:\n+      assert led == ledid\n+    fluences.append( fluence)\n+\n+  timestamp = FromToXML.microsec_timestamp()\n+  out_fitsname   = f\"EUC_VIS_MSR-FLA_LED{ledid}-000ADU__{timestamp}.fits\"\n+  err_fitsname   = f\"EUC_VIS_MSR-FLA_LED{ledid}-000ADU-stderr__{timestamp}.fits\"\n+  slope_fitsname = f\"EUC_VIS_MSR-FLA_LED{ledid}-000ADU-slope__{timestamp}.fits\"\n+  extrapolate_prnu( ledid, prnu_list, fluences, out_fitsname, err_fitsname, slope_fitsname)\n+\n+  # write to output\n+  FromToXML.write_json( (out_fitsname, err_fitsname, slope_fitsname), args.prnulist_out)\n+\n+  logger.info( \"#\")\n+  logger.info( \"# Exiting %s mainMethod()\" % __name__)\n+  logger.info( \"#\")\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_PRNU/python/VIS_PRNU/VIS_SmallScaleFlat/VIS_SmallScaleFlat_xml_in.py": [
                        [
                            "@@ -0,0 +1,119 @@\n+#\n+# Copyright (C) 2012-2020 Euclid Science Ground Segment\n+#\n+# This library is free software; you can redistribute it and/or modify it under\n+# the terms of the GNU Lesser General Public License as published by the Free\n+# Software Foundation; either version 3.0 of the License, or (at your option)\n+# any later version.\n+#\n+# This library is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+# FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+# details.\n+#\n+# You should have received a copy of the GNU Lesser General Public License\n+# along with this library; if not, write to the Free Software Foundation, Inc.,\n+# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+#\n+\n+\n+\"\"\"\n+:file: VIS_PRNU/VIS_SmallScaleFlat/VIS_SmallScaleFlat_xml_in.py\n+\n+:date: 26 May 2023\n+:author: mottet@iap.fr\n+\n+:description:\n+\n+The VIS_SmallScaleFlat pipeline comes after the VIS_MasterFlat pipeline.\n+First the VIS_MasterFlat pipeline is called once for every LEDID/FLUENCE pair,\n+to produce one MasterFlat frame per LEDID/FLUENCE\n+\n+Then all these MasterFlat frames are fed to a single VIS_SmallScaleFlat pipeline,\n+which processes them in two steps.\n+\n+First, for each LEDID, the VIS_SmallScaleFlat pipeline selects all the available FLUENCEs\n+and linearly extrapolate each pixel to the equivalent of a 0 ADU FLUENCE MasterFlat,\n+to create one 0 FLUENCE MasterFlat per LEDID.\n+\n+Then all the O FLUENCE MasterFlat per LEDID are then linearly combined using weights\n+to create a LED0 0 ADU FLUENCE MasterFlat frame which is the final MasterFlat frame\n+used in the science pipelines and other calibration pipeleines.\n+\n+\"\"\"\n+\n+import argparse\n+import os\n+\n+import logging\n+logger = logging.getLogger( __name__)\n+\n+from astropy.io import fits\n+from VIS_Tasks_Common import FromToXML\n+from VIS_PyLibrary_Common import pipe_tools\n+from VIS_PyLibrary_Common.common_definitions import DATADIR\n+\n+\n+################################################################################\n+\n+def get_PRNU_metadata( prnu_filename):\n+  \"\"\"return the LEDID as string and FLUENCE as float keywords read in DpdVisMasterFlatFrame FITS file\"\"\"\n+  prim_hdr = fits.getheader( prnu_filename, ext=0)\n+  return str( prim_hdr[\"LEDID\"]), float( prim_hdr[\"FLUENCE\"])\n+\n+\n+################################################################################\n+\n+def defineSpecificProgramOptions():\n+\n+  ap = argparse.ArgumentParser( description=\"Monochromatic PRNU combination pipeline\")\n+\n+  # https://euclid.roe.ac.uk/projects/codeen-users/wiki/Pipeline_Interfaces#Arguments\n+  # \"The workdir and logdir parameters are mandatory - any task to be run as part of a pipeline needs to support these parameters\"\n+  ap.add_argument( \"--workdir\",        required=True, help=\"absolute path to the working directory\")\n+  ap.add_argument( \"--logdir\",         required=True, help=\"path to the log directory, relative to 'workdir'\")\n+  # parameters\n+  ap.add_argument( \"--MDB\",            help=\"MDB XML file path relative to 'workdir'\")\n+  ap.add_argument( \"--vis_config_in\",  help='input configuration template XML file')\n+  # input\n+  ap.add_argument( \"--prnulist_in\",    required=True, help=\"list of input single fluence monochromatic PRNU to combine\")\n+  # output\n+  ap.add_argument( \"--prnulists_out\",  required=True, help=\"output model XML file path, relative to workdir\")\n+  return ap\n+\n+\n+################################################################################\n+\n+def mainMethod( args):\n+\n+  logger.info( \"#\")\n+  logger.info( \"# Entering %s mainMethod()\" % __name__)\n+  logger.info( \"# command line: \" + pipe_tools.get_erun_commandline())\n+  pipe_tools.log_task_environment( logger)\n+  logger.info( \"#\")\n+\n+  # get the list of all input master flat frames per LED and per fluence\n+  # and produce a list of master flat frames per LED to be processed\n+  # by one VIS_ExtrapolatePRNU per LED in parallel\n+\n+  led_prnu_dict = dict()\n+  prnu_xml_list = FromToXML.load_list_from_file( args.prnulist_in)\n+  for xml_file in prnu_xml_list:\n+    prnu_filename = os.path.join( DATADIR, FromToXML.get_xml_data_file_list( xml_file)[0])\n+    ledid, fluence = get_PRNU_metadata( prnu_filename)\n+    logger.info( f\"{prnu_filename}: LEDID={ledid}, FLUENCE={fluence}\")\n+    if ledid not in led_prnu_dict:\n+      led_prnu_dict[ledid] = list()\n+    led_prnu_dict[ledid].append( prnu_filename)\n+\n+  # convert dict of lists to list of lists\n+  led_prnu_list = list()\n+  for k, v in led_prnu_dict.items():\n+    led_prnu_list.append( v)\n+\n+  # write to output\n+  FromToXML.write_json( led_prnu_list, args.prnulists_out)\n+\n+  logger.info( \"#\")\n+  logger.info( \"# Exiting %s mainMethod()\" % __name__)\n+  logger.info( \"#\")\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_PRNU/tests/python/VIS_CombinePRNU_test.py": [
                        [
                            "@@ -1,11 +0,0 @@\n-\"\"\"\n-@file tests/python/VIS_CombinePRNU_test.py\n-@date 29 March 2023\n-@author mottet@iap.fr\n-\"\"\"\n-import py.test\n-from   VIS_PRNU import VIS_CombinePRNU\n-\n-class TestVIS_CombinePRNU( object):\n-  def testImport( self):\n-    assert True\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_PRNU/tests/python/VIS_SmallScalFlat_test.py": [
                        [
                            "@@ -0,0 +1,14 @@\n+\"\"\"\n+@file tests/python/VIS_SmallScaleFlat_test.py\n+@date 29 May 2023\n+@author mottet@iap.fr\n+\"\"\"\n+\n+import pytest\n+import VIS_PRNU.VIS_SmallScaleFlat.VIS_SmallScaleFlat_xml_in\n+import VIS_PRNU.VIS_SmallScaleFlat.VIS_ExtrapolatePRNU\n+import VIS_PRNU.VIS_SmallScaleFlat.VIS_CombinePRNU\n+\n+class TestVIS_SmallScaleFlat( object):\n+  def testImport( self):\n+    assert True\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_PSF/tests/python/VIS_PSF_Astromatic_test.py": [
                        [
                            "@@ -23,7 +23,7 @@\n :author: user\n \"\"\"\n \n-import py.test\n+import pytest\n import VIS_PSF.VIS_PSF_Astromatic\n \n class TestVIS_PSF_Astromatic(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_PSF/tests/python/VIS_model_psf_psfex_test.py": [
                        [
                            "@@ -23,7 +23,7 @@\n :author: user\n \"\"\"\n \n-import py.test\n+import pytest\n import VIS_PSF.VIS_model_psf_psfex\n \n class TestVIS_model_psf_psfex_test(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_PTC_NL/python/VIS_PTC_NL/VIS_PTC_NL_Test_code.py": [
                        [
                            "@@ -0,0 +1,236 @@\n+    ###\n+    ### End of To remove/adapt to the needs\n+\n+    # list1_regex         = re.compile(r'EUC_SIM_VIS-FLAT-\\d-\\d\\d-1')\n+    # list2_regex         = re.compile(r'EUC_SIM_VIS-FLAT-\\d-\\d\\d-2')\n+    # list_science_regex  = re.compile(r'EUC_SIM_VIS-SCIENCE-\\d-\\d\\d-3')\n+\n+    # list_of_flats_1 = []\n+    # list_of_flats_2 = []\n+    # list_of_science = []\n+\n+    # for entry in os.listdir(data_dir):\n+    #     if os.path.isfile(os.path.join(data_dir, entry)):\n+    #         if (list1_regex.search(entry) != None):\n+    #             list_of_flats_1.append(data_dir + entry)\n+    #         elif (list2_regex.search(entry) != None):\n+    #             list_of_flats_2.append(data_dir + entry)\n+    #         elif (list_science_regex.search(entry) != None):\n+    #             list_of_science.append(data_dir + entry)\n+\n+    # #####\n+    # ##### Clotilde's code\n+    # #####\n+    # #############\n+\n+    # # parameterization\n+    # quadid = 1\n+    # bf_corr_typ = 2 ## if bf_corr_typ==0 : no bfe correction; if bf_corr_typ==1: correction with covariance; if bf_corr_typ==2: correction with rebinning\n+    # tile_s = 4 ## when bf_corr_typ ==2 , tile_s must be a small number.\n+    # kernelsize = 8 ## if bf_corr_typ==2:  we rebin in superpixels of size kernelsize x kernelsize original pixels\n+\n+    # ##############\n+\n+    # v_tab_3 = np.array([])\n+    # f_tab_3 = np.array([])\n+    # err_tab_3 = np.array([])\n+\n+    # # list_of_flats_1 = [ '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-1-1_0E43D1A0EC01-0018238_20221222T141522.726823Z_FLAT_TF_09112022.fits',\n+    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-2-1_0E43D1A0EB9A-0060914_20221222T142737.386594Z_FLAT_TF_09112022.fits',\n+    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-3-1_07CD30ACE22D-0013209_20221222T143959.613069Z_FLAT_TF_09112022.fits',\n+    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-4-1_0BC97E1CA19B-0062114_20221222T141134.235432Z_FLAT_TF_09112022.fits',\n+    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-5-1_0BC97E1E4DF1-0022650_20221222T142805.331970Z_FLAT_TF_09112022.fits',\n+    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-6-1_07CD30AD0A15-0011461_20221222T141051.440556Z_FLAT_TF_09112022.fits',\n+    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-7-1_07CD30AD0A63-0036325_20221222T144405.099680Z_FLAT_TF_09112022.fits',\n+    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-8-1_07CD30ACE142-0027930_20221222T143545.663197Z_FLAT_TF_09112022.fits',\n+    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-9-1_0BC97E1CA256-0052431_20221222T134930.119532Z_FLAT_TF_09112022.fits']\n+    # # list_of_flats_2 = [ '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-1-2_07CD30AD0A6B-0039803_20221222T140615.104667Z_FLAT_TF_09112022.fits',\n+    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-2-2_0E43D1A0EB43-0032513_20221222T142852.347851Z_FLAT_TF_09112022.fits',\n+    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-3-2_0E43D1A0D889-0005051_20221222T135028.477404Z_FLAT_TF_09112022.fits',\n+    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-4-2_0BC97E1E91C5-0000515_20221222T141958.343722Z_FLAT_TF_09112022.fits',\n+    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-5-2_07CD30ACE19D-0031519_20221222T143938.668663Z_FLAT_TF_09112022.fits',\n+    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-6-2_0E43D1A0EBB8-0050384_20221222T134615.299234Z_FLAT_TF_09112022.fits',\n+    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-7-2_0E43D1A0EB9A-0060957_20221222T142021.565634Z_FLAT_TF_09112022.fits',\n+    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-8-2_0E43D1A0EC06-0028479_20221222T141717.205930Z_FLAT_TF_09112022.fits',\n+    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-9-2_0E43D1A0D853-0015066_20221222T142519.887644Z_FLAT_TF_09112022.fits']\n+    # # list_of_science = ['/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/ShortSciences/EUC_SIM_VIS-SCIENCE-3-1-3_0E43D1A0EC01-0018237_20221222T140044.439812Z_FLAT_TF_09112022.fits',\n+    # #                    '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/ShortSciences/EUC_SIM_VIS-SCIENCE-3-2-3_0BC97E1E4ED5-0016873_20221222T135924.259720Z_FLAT_TF_09112022.fits',\n+    # #                    '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/ShortSciences/EUC_SIM_VIS-SCIENCE-3-3-3_0BC97E1E91C5-0000544_20221222T140118.327490Z_FLAT_TF_09112022.fits',\n+    # #                    '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/ShortSciences/EUC_SIM_VIS-SCIENCE-3-4-3_07CD30ACE175-0029180_20221222T143354.540751Z_FLAT_TF_09112022.fits',\n+    # #                    '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/ShortSciences/EUC_SIM_VIS-SCIENCE-3-5-3_0E43D1A0EB05-0055484_20221222T135231.767878Z_FLAT_TF_09112022.fits',\n+    # #                    '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/ShortSciences/EUC_SIM_VIS-SCIENCE-3-6-3_0E43D1A0D709-0042086_20221222T140918.430030Z_FLAT_TF_09112022.fits',\n+    # #                    '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/ShortSciences/EUC_SIM_VIS-SCIENCE-3-7-3_0E43D1A0D94E-0011403_20221222T140134.579868Z_FLAT_TF_09112022.fits',\n+    # #                    '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/ShortSciences/EUC_SIM_VIS-SCIENCE-3-8-3_0E43D1A0D853-0015091_20221222T140513.847513Z_FLAT_TF_09112022.fits',\n+    # #                    '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/ShortSciences/EUC_SIM_VIS-SCIENCE-3-9-3_07CD30ACE15F-0028155_20221222T140927.277939Z_FLAT_TF_09112022.fits']\n+\n+    # # Thomas simulations\n+    # # list_of_flats_1 = [ '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-1-1_0E43D1A0EC01-0018238_20221222T141522.726823Z_FLAT_TF_09112022.fits']\n+    # # list_of_flats_2 = [ '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-1-2_07CD30AD0A6B-0039803_20221222T140615.104667Z_FLAT_TF_09112022.fits']\n+    # # list_of_science = ['/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/ShortSciences/EUC_SIM_VIS-SCIENCE-3-1-3_0E43D1A0EC01-0018237_20221222T140044.439812Z_FLAT_TF_09112022.fits']\n+\n+\n+    # # # PV-022 without BFE\n+    # # list_of_flats_1 = [ '/sps/euclid/Users/nguyenki/Work/Local_PPOs/test_data/PV_022/wo_bfe/EUC_SIM_VIS-FLAT-3-36-2_0BC97E1AB9F8-0005767_20220610T103623.925050Z_PV022_VIS_3_22_6.fits']\n+    # # list_of_flats_2 = [ '/sps/euclid/Users/nguyenki/Work/Local_PPOs/test_data/PV_022/wo_bfe/EUC_SIM_VIS-FLAT-3-36-3_0E43D1A599F0-0010566_20220610T103341.173539Z_PV022_VIS_3_22_6.fits']\n+    # # list_of_science = [ '/sps/euclid/Users/nguyenki/Work/Local_PPOs/test_data/PV_022/wo_bfe/EUC_SIM_VIS-SCIENCE-3-36-4_0E43D1A599BF-0058463_20220610T110635.000550Z_PV022_VIS_3_22_6.fits']\n+\n+    # # PV-022 with BFE\n+    # list_of_flats_1 = [ '/sps/euclid/Users/nguyenki/Work/Local_PPOs/test_data/PV_022/with_bfe/EUC_SIM_VIS-FLAT-3-36-2_0BC97E124404-0064861_20230225T005431.001850Z_PV022_VIS_3_22_0.fits',\n+    #                     '/sps/euclid/Users/nguyenki/Work/Local_PPOs/test_data/PV_022/with_bfe/EUC_SIM_VIS-FLAT-3-37-1_0BC97E1CF120-0030568_20230225T031831.356808Z_PV022_VIS_3_22_0.fits']\n+    # list_of_flats_2 = [ '/sps/euclid/Users/nguyenki/Work/Local_PPOs/test_data/PV_022/with_bfe/EUC_SIM_VIS-FLAT-3-36-3_07CD30ACE19D-0006781_20230225T034154.637063Z_PV022_VIS_3_22_0.fits',\n+    #                     '/sps/euclid/Users/nguyenki/Work/Local_PPOs/test_data/PV_022/with_bfe/EUC_SIM_VIS-FLAT-3-37-2_0E43D1A0EB9A-0062566_20230225T014435.415700Z_PV022_VIS_3_22_0.fits']\n+    # list_of_science = [ '/sps/euclid/Users/nguyenki/Work/Local_PPOs/test_data/PV_022/with_bfe/EUC_SIM_VIS-SCIENCE-3-36-4_0BC97E1CF0CF-0056112_20230225T023004.597967Z_PV022_VIS_3_22_0.fits',\n+    #                     '/sps/euclid/Users/nguyenki/Work/Local_PPOs/test_data/PV_022/with_bfe/EUC_SIM_VIS-SCIENCE-3-37-3_07CD30AD0A75-0013590_20230225T030130.702969Z_PV022_VIS_3_22_0.fits']\n+\n+    # print(\"list_of_flats_1: \", list_of_flats_1)\n+    # print(\"list_of_flats_2: \", list_of_flats_2)\n+    # print(\"list_of_science: \", list_of_science)\n+\n+\n+    # ptc_model_file = \"\"\n+    # for fl in range(len(list_of_flats_1)):\n+    #     print (\"Processing flats pair number %s\" % fl)\n+    #     flat_1 = fits.open(list_of_flats_1[fl])[quadid].data\n+    #     flat_2 = fits.open(list_of_flats_2[fl])[quadid].data\n+\n+    #     ### mask from sci\n+    #     sci = fits.open(list_of_science[fl])[quadid].data\n+    #     mm = np.median(sci)\n+    #     ss = np.std(sci)\n+    #     w_mask = np.where(sci > mm+ss)\n+    #     mask = np.zeros(np.shape(sci))\n+    #     mask[w_mask] = 1 ## a value of 1 means a masked pixel\n+\n+    #     quad_name = fits.open(list_of_flats_1[fl])[quadid].header['CCDID']+'.'+fits.open(list_of_flats_1[fl])[quadid].header['QUADID']\n+\n+    #     tab_var, tab_mean, tab_err_var = ptcnl_cal.compute_ptc(flat_1, flat_2, quad_name, n_tile=tile_s, bf_corr_typ=bf_corr_typ, kernelsize=kernelsize)\n+\n+    #     v_tab_3 = np.append(v_tab_3, tab_var)\n+    #     f_tab_3 = np.append(f_tab_3, tab_mean)\n+    #     err_tab_3 = np.append(err_tab_3, tab_err_var)\n+\n+    #     if ptc_model_file == \"\":\n+    #         ptc_model_file = FileNameProvider().get_allowed_filename( processing_function = 'VIS',\n+    #                                                                   type_name           = \"MDL-PTC\",\n+    #                                                                   instance_id         = '',\n+    #                                                                   extension           = '.json')\n+\n+\n+    #     ptc_model_file = os.path.join( args.workdir, \"\", ptc_model_file)\n+    #     ptc_json_dict = dict( model_name = \"VIS_ptc_calib\",\n+    #                           date   = time.ctime(),\n+    #                           source = \"\",\n+    #                           author = __file__)\n+\n+    #     with open(ptc_model_file, 'w') as fp:\n+    #         json.dump(ptc_json_dict, fp, indent=2, default=np.ndarray.tolist)\n+\n+    #     ptc_json_dict = {}\n+    #     ptc_json_dict[quad_name] =  {\n+    #                                     \"ptc_v_tab_3\": v_tab_3,\n+    #                                     \"ptc_f_tab_3\": f_tab_3\n+    #                                 }\n+\n+    # print(\"PTC f_tab_3  : \", f_tab_3)\n+    # print(\"PTC v_tab_3  : \", v_tab_3)\n+    # print(\"PTC err_tab_3: \", err_tab_3)\n+\n+    # with open(ptc_model_file, 'r') as fp:\n+    #         ptc_json = json.load(fp)\n+    #         ptc_json.update(ptc_json_dict)\n+\n+    # with open(ptc_model_file, 'w') as fp:\n+    #         fp.write(json.dumps(ptc_json, indent=2, default=np.ndarray.tolist))\n+    #         logger.info( \"** Updating ptc model JSON file to %s\", ptc_model_file)\n+\n+    # # Write end data product\n+    # dpdcalib_ptc = os.path.abspath(os.path.join( args.workdir, dpdcalib_ptc))\n+    # logger.info( \"** Writing ptc model data product XML to \" + dpdcalib_ptc)\n+\n+    # data_product = FromToXML.create_FileContainer_dp( \"other\",\n+    #                                                   os.path.basename(ptc_model_file))\n+    # DmUtils.save_product_metadata( data_product, dpdcalib_ptc)\n+\n+    # ##\n+    # ## Mcmc calculation\n+    # ##\n+    # xx = f_tab_3\n+    # yy  = v_tab_3\n+    # yy_err = err_tab_3\n+    # #yy_err = (yy)**(1./1.5)\n+\n+    # ### parameterization\n+    # nwalkers = 32\n+    # n_steps_burn_ = 100\n+    # n_steps_tot = 5000\n+\n+    # ## initialisation\n+    # p1_r = np.array([0.5,1.5])\n+    # p2_r = np.array([-0.5,0.5])\n+    # p3_r = np.array([-0.5,0.5])\n+    # tab_r = np.array([p1_r,p2_r,p3_r ]) #range on which vary the parameters\n+\n+    # p = np.array([1,0,0]) # initial guess for the parameter\n+    # ndim = len(p)\n+    # p0 = 0.1*np.random.rand(nwalkers, ndim)+ np.expand_dims(p,axis=0) # initial position for the walkers\n+\n+    # #####\n+    # sampler = mcmc.run_mcmc(xx, yy, yy_err, tab_r, p0, nwalkers, n_steps_burn_=n_steps_burn_ , n_steps_tot=n_steps_tot)\n+    # samples = sampler.get_chain(flat=True)\n+    # p_out  = np.mean(samples[n_steps_burn_ :,:], axis=0)\n+    # p_out_err = np.std(samples[n_steps_burn_ :,:], axis=0)\n+\n+    # logger.info(\"p_out    : %s\" % p_out)\n+    # logger.info(\"p_out_err: %s\" % p_out_err)\n+\n+    # nl_model_file = \"\"\n+    # if nl_model_file == \"\":\n+    #     nl_model_file = FileNameProvider().get_allowed_filename( processing_function = 'VIS',\n+    #                                                              type_name           = \"MDL-NL\",\n+    #                                                              instance_id         = '',\n+    #                                                              extension           = '.json')\n+\n+\n+    # nl_model_file = os.path.join( args.workdir, \"\", nl_model_file)\n+    # nl_json_dict = dict( model_name = \"VIS_nl_calib\",\n+    #                       date   = time.ctime(),\n+    #                       source = \"\",\n+    #                       author = __file__)\n+\n+    # with open(nl_model_file, 'w') as fp:\n+    #     json.dump(nl_json_dict, fp, indent=2, default=np.ndarray.tolist)\n+\n+    # nl_json_dict = {}\n+    # nl_json_dict =  {\n+    #     \"p_out\"    : p_out,\n+    #     \"p_out_err\": p_out_err\n+    # }\n+\n+    # with open(nl_model_file, 'r') as fp:\n+    #     nl_json = json.load(fp)\n+    #     nl_json.update(nl_json_dict)\n+\n+    # with open(nl_model_file, 'w') as fp:\n+    #     fp.write(json.dumps(nl_json, indent=2, default=np.ndarray.tolist))\n+    #     logger.info( \"** Updating nl model JSON file to %s\", nl_model_file)\n+\n+\n+    # # Write end data product\n+    # dpdcalib_nl = os.path.abspath(os.path.join( args.workdir, dpdcalib_nl))\n+    # logger.info( \"** Writing nl model data product XML to \" + dpdcalib_nl)\n+\n+    # data_product = FromToXML.create_FileContainer_dp( \"other\",\n+    #                                                   os.path.basename(nl_model_file))\n+    # DmUtils.save_product_metadata( data_product, dpdcalib_nl)\n+\n+    # #p_out gives the value of the 3 parameters encoding the NL polynomial, and p_out_err provides the associated errors\n+\n+    # ### si on veut afficher le resultat\n+    # samples = sampler.get_chain(flat=True)\n+    # p_mdl = [1,-1.097760e-2, 3.952350e-2]\n+    # mcmc.Make_Corner_Plot(samples, p_mdl, (tab_r), args.logdir)\n+\n+    # ###############\n+    # #######\n+    # ####### End of Clotilde's code\n+    # #######\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_PTC_NL/python/VIS_PTC_NL/VIS_PTC_NL_calibration.py": [
                        [
                            "@@ -58,31 +58,13 @@ import ElementsKernel.Logging\n logger = ElementsKernel.Logging.getLogger( __name__)\n \n \n-def align_quadrant_readout(quad_name, quad_data):\n-  ccdrow, ccdcol = re.findall( \"[1-6]\", quad_name)\n-  qltr = quad_name[-1]\n-  assert qltr in \"EFGH\"\n-  if ((ccdcol in \"123\") and (qltr == \"E\")) or ((ccdcol in \"456\") and (qltr == \"G\")):\n-    # bottom left quadrants, do nothing\n-    return quad_data\n-  if ((ccdcol in \"123\") and (qltr == \"F\")) or ((ccdcol in \"456\") and (qltr == \"H\")):\n-    # bottom right quadrants, flip horizontally\n-    return np.fliplr( quad_data)\n-  if ((ccdcol in \"123\") and (qltr == \"G\")) or ((ccdcol in \"456\") and (qltr == \"E\")):\n-    # top right quadrants, flip horizontally and vertically\n-    return np.fliplr( np.flipud( quad_data))\n-  if ((ccdcol in \"123\") and (qltr == \"H\")) or ((ccdcol in \"456\") and (qltr == \"F\")):\n-    # top left quadrants, flip vertically\n-    return np.flipud( quad_data)\n-  raise Exception( f\"VIS_ImageTools_M/FPA_quadrant.py/align_quadrant_readout(): unkown quadrant name: '{quad_name}'\")\n-\n-\n-def compute_ptc(flat_1, flat_2, quad_name, n_tile=10, bf_corr_typ=1, kernelsize=8):\n+def compute_ptc(flat_1, flat_2, quad_name, n_tile=10, bf_corr_typ=1, kernelsize=12, fltn=0):\n     '''\n     @brief\n     flat_1 and flat_2 are two flats of a single pair (already processed)\n     quadid is the id of the quadrant\n     n_tile: number of tiles used to compute the mean and variance\n+    if fltn=1, the flats are flattened, and pixels are sorted by values and divided in a certain number of bins. Variance / mean are computed on\n \n     @return\n     two arrays containing the mean and the variance in tiles respectively\n@@ -95,14 +77,14 @@ def compute_ptc(flat_1, flat_2, quad_name, n_tile=10, bf_corr_typ=1, kernelsize=\n     tab_diff = np.array([])\n \n     if (bf_corr_typ == 0):\n-        tab_var, tab_mean, tab_err_var  = Compute_mean_var_correctedfromBFE(flat_1, flat_2, n_tile, 0, mm=1, fltn=1)\n+        tab_var, tab_mean, tab_err_var  = Compute_mean_var_correctedfromBFE(flat_1, flat_2, n_tile, 0, mm=1, fltn=fltn)\n     elif (bf_corr_typ == 1):\n          # we correct from brighter-fatter with covariance'\n-         tab_var, tab_mean, tab_err_var = Compute_mean_var_correctedfromBFE(flat_1, flat_2, n_tile, kernelsize, mm=1, fltn=1)\n+         tab_var, tab_mean, tab_err_var = Compute_mean_var_correctedfromBFE(flat_1, flat_2, n_tile, kernelsize, mm=1, fltn=fltn)\n     else:\n          # we first rebin the quadrants\n          new_flat_1, new_flat_2         = rebin3(flat_1, flat_2, kernelsize)\n-         tab_var, tab_mean, tab_err_var = Compute_mean_var_correctedfromBFE(new_flat_1, new_flat_2, n_tile, 0, mm=1, fltn=1)\n+         tab_var, tab_mean, tab_err_var = Compute_mean_var_correctedfromBFE(new_flat_1, new_flat_2, n_tile, 0, mm=1, fltn=fltn)\n          tab_var                        = tab_var*kernelsize*kernelsize\n          tab_err_var                    = tab_err_var*(kernelsize*kernelsize)**2\n \n@@ -130,14 +112,14 @@ def Compute_mean_var_correctedfromBFE(image_1, image_2, n_tile, kernelsize, mm=1\n     if (fltn == 0):\n         MM_s = (image_s1+image_s2)/2.\n         DD_s = (image_s1-image_s2)\n-        ww = np.where((np.abs(DD_s)<MM_s) * (np.isfinite(DD_s)))\n+        # ww = np.where((np.abs(DD_s)<MM_s) * (np.isfinite(DD_s)))\n     else:\n         ### flatten the image and sort the pixels by their values\n         MM_s = ((image_s1+image_s2).flatten()/2.)\n         DD_s = ((image_s1-image_s2).flatten())\n         idi = np.argsort(MM_s)\n-        ww = np.where((np.abs(DD_s[idi])<MM_s[idi]) * (np.isfinite(DD_s[idi])))[0]\n-        idi = idi[ww]\n+        # ww = np.where((np.abs(DD_s[idi])<MM_s[idi]) * (np.isfinite(DD_s[idi])))[0]\n+        # idi = idi[ww]\n \n     n1 = np.shape(image_s1)[0]\n     n2 = np.shape(image_s2)[1]\n@@ -148,6 +130,7 @@ def Compute_mean_var_correctedfromBFE(image_1, image_2, n_tile, kernelsize, mm=1\n         n_tile_2 = n_tile #np.int(n2/n_tile)\n         fluxmean_all = np.zeros(n_tile_1*n_tile_2)\n         variance_all = np.zeros(n_tile_1*n_tile_2)\n+        err_var_all  = np.zeros(n_tile_1*n_tile_2)\n         n_pix_1 = np.int(n1/n_tile)\n         n_pix_2 = np.int(n2/n_tile)\n         for k in range(n_tile_1):\n@@ -155,29 +138,43 @@ def Compute_mean_var_correctedfromBFE(image_1, image_2, n_tile, kernelsize, mm=1\n                 MM_tmp = MM_s[k*n_pix_1:(k+1)*n_pix_1,j*n_pix_2:(j+1)*n_pix_2]\n                 DD_tmp = DD_s[k*n_pix_1:(k+1)*n_pix_1,j*n_pix_2:(j+1)*n_pix_2]\n \n-                ww = np.where((np.abs(DD_tmp)<MM_tmp)*(np.isfinite(DD_tmp)))\n-                n_pt = len(MM[ww])\n+                # ww = np.where((np.abs(DD_tmp)<MM_tmp)*(np.isfinite(DD_tmp)))\n+                # n_pt = len(MM[ww])\n+                DD_tmp = astropy.stats.sigma_clip(DD_tmp,sigma = 5)\n+                mask_ = ma.getmask(DD_tmp)\n+                w = np.where(mask_ == False)\n+                MM_tmp = MM_tmp[w]\n+                n_pt = len(MM_tmp.flatten())\n+                ic = k*n_tile_2 + j\n+\n                 if (mm==1):\n-                    fluxmean_all[k] = np.mean(MM_tmp[ww])\n+                    fluxmean_all[ic] = np.mean(MM_tmp)\n                 else:\n-                    fluxmean_all[k] = np.median(MM_tmp[ww])\n+                    fluxmean_all[ic] = np.median(MM_tmp)\n                 if (kernelsize == 0):\n-                    variance_all[k] = np.std((DD_tmp[ww]))**2\n-                    mu_4 = np.mean((DD_tmp[ww] - np.mean(DD_tmp[ww]))**4)\n-                    err_var_all[k] = mu_4/n_pt - variance_all[k]**2*(n_pt-3)/(n_pt*(n_pt-1))\n-                    variance_all[k] /= 2 ## because uncertainties on the two flats of the pair add up in quadrature. We don't want to count it twice\n-                    err_var_all[k] /= 4 ## if we divide variance by 2, we also divide its std by 2, and therefore its variance by 4\n+                    variance_all[ic] = np.std((DD_tmp))**2\n+                    mu_4 = np.mean((DD_tmp - np.mean(DD_tmp))**4)\n+                    # err_var_all[k] = mu_4/n_pt - variance_all[k]**2*(n_pt-3)/(n_pt*(n_pt-1))\n+                    # variance_all[k] /= 2 ## because uncertainties on the two flats of the pair add up in quadrature. We don't want to count it twice\n+                    # err_var_all[k] /= 4 ## if we divide variance by 2, we also divide its std by 2, and therefore its variance by 4\n+                    err_var_all[ic] = mu_4/n_pt - variance_all[ic]**2*(n_pt-3)/(n_pt*(n_pt-1))\n+                    variance_all[ic] /= 2 ## because uncertainties on the two flats of the pair add up in quadrature. We don't want to count it twice\n+                    err_var_all[ic] /= 4 ## if we divide variance by 2, we also divide its std by 2, and therefore its variance by 4\n                 else:\n-                    med = np.median(MM_tmp[ww])\n+                    med = np.median(MM_tmp)\n                     for m in range(-kernelsize,kernelsize+1):\n                         for n in range(-kernelsize,kernelsize+1):\n-                            newids1 = kernelsize + ww[0]+ m #kernelsize+newids//n2+m  ##3\n-                            newids2 = kernelsize + ww[1]+ n #kernelsize+newids%n2+n\n-                            variance_all[k] = variance_all[k] + np.sum(DD_tmp*DD[newids1,newids2])/(len(ww[0])-1) - np.sum(DD_tmp[ww])*np.sum(DD_tmp[ww])/(len(ww)-1)**2\n-                            mu_4 = np.mean((DD_tmp[ww] - np.mean(DD_tmp[ww]))**4)\n-                            err_var_all[k] = mu_4/n_pt - variance_all[k]**4*(n_pt-3)/(n_pt*(n_pt-1))\n-                            err_var_all[k] /= 4 ### check this factor 4\n-\n+                            newids1 = kernelsize + w[0]+ m #kernelsize+newids//n2+m  ##3\n+                            newids2 = kernelsize + w[1]+ n #kernelsize+newids%n2+n\n+                            # variance_all[k] = variance_all[k] + np.sum(DD_tmp*DD[newids1,newids2])/(len(ww[0])-1) - np.sum(DD_tmp)*np.sum(DD_tmp)/(len(ww)-1)**2\n+                            # mu_4 = np.mean((DD_tmp - np.mean(DD_tmp))**4)\n+                            # err_var_all[k] = mu_4/n_pt - variance_all[k]**4*(n_pt-3)/(n_pt*(n_pt-1))\n+                            # err_var_all[k] /= 4 ### check this factor 4\n+                            # ic = k*n_tile_2 + j\n+                            variance_all[ic] = variance_all[ic] + np.sum(DD_tmp*DD[newids1,newids2])/(len(w[0])-1) - np.sum(DD_tmp)*np.sum(DD_tmp)/(len(w)-1)**2\n+                            mu_4 = np.mean((DD_tmp - np.mean(DD_tmp))**4)\n+                            err_var_all[ic] = mu_4/n_pt - variance_all[ic]**4*(n_pt-3)/(n_pt*(n_pt-1))\n+                            err_var_all[ic] /= 4 ### check this factor 4\n     else:\n         fluxmean_all = np.zeros(n_tile)\n         variance_all = np.zeros(n_tile)\n@@ -186,12 +183,17 @@ def Compute_mean_var_correctedfromBFE(image_1, image_2, n_tile, kernelsize, mm=1\n \n         for k in range(n_tile):\n             newids = idi[k*nnn:(k+1)*nnn] #ids of the pixels which will contribute to this bin\n+            DD_tmp = astropy.stats.sigma_clip(DD_s[newids],sigma = 5)\n+            mask_ = ma.getmask(DD_tmp)\n+            ww = np.where(mask_ == False)[0]\n+            newids = newids[ww]\n \n             n_pt = len(newids)\n             if (mm==1):\n                 fluxmean_all[k] = np.mean(MM_s[newids])\n             else:\n                 fluxmean_all[k] = np.median(MM_s[newids])\n+\n             if (kernelsize == 0):\n                 variance_all[k] = np.std((DD_s[newids]))**2 #/2.\n                 mu_4 = np.mean((DD_s[newids] - np.mean(DD_s[newids]) )**4)\n@@ -214,143 +216,6 @@ def Compute_mean_var_correctedfromBFE(image_1, image_2, n_tile, kernelsize, mm=1\n \n     return variance_all, fluxmean_all, err_var_all\n \n-\n-def smooth(y, box_pts):\n-    '''\n-    @brief\n-    @return\n-    '''\n-    box = np.ones(box_pts)/box_pts\n-    y_smooth = np.convolve(y, box, mode='same')\n-    return y_smooth\n-\n-\n-def DeterminePIXOF(quad,quadid,prx,ovx,pry,ovy):\n-    '''\n-    @brief\n-    @return\n-    '''\n-    nx=np.shape(quad)[1]\n-    ny=np.shape(quad)[0]\n-\n-    if (np.int(((quadid-1)/12))%2==1):\n-\n-        if (quadid%4==1):\n-            ixo=0;ixo2=ovy;iyo=0;iyo2=ovx;\n-        elif (quadid%4==2):\n-            ixo=0;ixo2=ovy;iyo=-ovx;iyo2=nx;\n-\n-        elif (quadid%4==3):\n-            ixo=-ovy;ixo2=ny;iyo=-ovx;iyo2=nx;\n-        else:\n-            ixo=-ovy;ixo2=ny;iyo=0;iyo2=ovx;\n-\n-    else:\n-        if (quadid%4==1):\n-            ixo=-ovy;ixo2=ny;iyo=-ovx;iyo2=nx;\n-        elif (quadid%4==2):\n-            ixo=-ovy;ixo2=ny;iyo=0;iyo2=ovx;\n-        elif (quadid%4==3):\n-            ixo=0;ixo2=ovy;iyo=0;iyo2=ovx;\n-        else:\n-            ixo=0;ixo2=ovy;iyo=-ovx;iyo2=nx;\n-\n-    return ixo,ixo2,iyo,iyo2;\n-\n-\n-def DeterminePIXRES(quad,quadid,prx,ovx,pry,ovy):\n-    '''\n-    @brief\n-    @return\n-    '''\n-    nx=np.shape(quad)[1]\n-    ny=np.shape(quad)[0]\n-    if (np.int(((quadid-1)/12))%2==1):\n-\n-        if (quadid%4==1):\n-            ix2=-pry;ix1=ovy;iy2=-prx;iy1=ovx;\n-        elif (quadid%4==2):\n-            ix2=-pry;ix1=ovy;iy2=-ovx;iy1=prx;\n-        elif (quadid%4==3):\n-            ix2=-ovy;ix1=pry;iy2=-ovx;iy1=prx;\n-        else:\n-            ix2=-ovy;ix1=pry;iy2=-prx;iy1=ovx;\n-    else:\n-        if (quadid%4==1):\n-            ix1=pry;ix2=-ovy;iy1=prx;iy2=-ovx;\n-            #print(ix1,ix2,iy1,iy2)\n-        elif (quadid%4==2):\n-            ix2=-ovy;ix1=pry;iy2=-prx;iy1=ovx;\n-        elif (quadid%4==3):\n-            ix2=-pry;ix1=ovy;iy2=-prx;iy1=ovx;\n-        else:\n-            ix2=-pry;ix1=ovy;iy2=-ovx;iy1=prx;\n-    return ix1,ix2,iy1,iy2\n-\n-\n-def overscan_comp(quadid,prex,ovx,nn):\n-    '''\n-    @brief\n-    @return\n-    '''\n-    if (quadid%4==0):#E\n-        i1=prex\n-        i2=nn-ovx\n-    elif (quadid%4==1):#F\n-        i1=ovx\n-        i2=nn-prex\n-    elif (quadid%4==2):\n-        i1=ovx\n-        i2=nn-prex\n-    else:\n-        i1=prex\n-        i2=nn-ovx\n-    return i1,i2\n-\n-\n-\n-# def rebin3(quad1, quad2, *args):\n-#     '''\n-#     @brief\n-#     rebin ndarray data into a smaller ndarray of the same rank whose dimensions\n-#     are factors of the original dimensions. eg. An array with 6 columns and 4 rows\n-#     can be reduced to have 6,3,2 or 1 columns and 4,2 or 1 rows.\n-#     example usages:\n-#     >>> a=rand(6,4); b=rebin(a,3,2)\n-#     >>> a=rand(6); b=rebin(a,2)\n-#     @return\n-#     '''\n-#     shape = quad1.shape;\n-#     lenShape = len(shape);\n-#     narrays = (asarray(shape)/asarray(args[:2])).astype(np.int)-1\n-#     if (args[2]=='all'):\n-#         nq1=np.zeros([narrays[0],narrays[1],args[0]*args[1]])\n-#         nq2=np.zeros([narrays[0],narrays[1],args[0]*args[1]])\n-#         for np1 in range(args[0]):\n-#             for np2 in range(args[1]):\n-#                 a = quad1[np1:,np2:][:narrays[0]*args[0],:narrays[1]*args[1]]\n-#                 nn = np.array(a.reshape(narrays[0],args[0],narrays[1],args[1]))\n-#                 nn = np.mean(nn,axis=1) # A modifier peut-etre\n-\n-#                 nq1[:,:,np1*args[1]+np2] = np.mean(nn,axis=2)#scipy.stats.trim_mean(nn,0.2,axis=2)\n-\n-\n-#                 a = quad2[np1:,np2:][:narrays[0]*args[0],:narrays[1]*args[1]]\n-#                 nn = np.array(a.reshape(narrays[0],args[0],narrays[1],args[1]))\n-#                 nn = np.mean(nn,axis=1)\n-\n-#                 nq2[:,:,np1*args[1]+np2] = np.mean(nn,axis=2) # scipy.stats.trim_mean(nn,0.2,axis=2)\n-#     else:\n-#         nn = quad1\n-#         nn = np.mean(nn,axis=1)\n-#         nq1 = np.mean(nn,axis=2)\n-\n-#         nn = quad2\n-#         nn = np.mean(nn,axis=1)\n-#         nq2 = np.mean(nn,axis=2)\n-\n-#     return nq1,nq2\n-\n def rebin3(quad1, quad2, kernelsize):\n     '''\n     @brief\n@@ -377,34 +242,3 @@ def rebin3(quad1, quad2, kernelsize):\n                 nq2[:,:,np1*narrays[1]+np2] = np.mean(nn,axis=(1,3))\n \n     return nq1[:,:,0], nq2[:,:,0] #np.mean(nq1, axis=2), np.mean(nq2, axis=2)\n-\n-\n-def recQuad(ffs,GC=1,iccd=1):\n-    '''\n-    @brief\n-    @return\n-    '''\n-    quad_E = np.transpose(fits.getdata(ffs, 1))\n-    n1=np.shape(quad_E)[0]-71\n-    n2=np.shape(quad_E)[1]-40\n-    raw_image = np.zeros([n1*2,n2*2])\n-    ip=0\n-    if (GC==1):\n-        for i in range(2):\n-            for j in range(2):\n-                ip=ip+1\n-                if (ip==1):\n-                    ip2=1\n-                elif (ip==2):\n-                    ip2=2\n-                elif (ip==3):\n-                    ip2=4\n-                else:\n-                    ip2=3\n-                raw_image[j*n1:(j+1)*n1,i*n2:(i+1)*n2]=np.transpose(fits.getdata(ffs, ip2+(iccd-1)*4))[51:-20,20:-20]\n-    else:\n-        for i in range(2):\n-            for j in range(2):\n-                ip=ip+1\n-                raw_image[j*n1:(j+1)*n1,i*n2:(i+1)*n2]=np.transpose(fits.getdata(ffs, ip))\n-    return raw_image\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_PTC_NL/python/VIS_PTC_NL/VIS_mcmc_emcee.py": [
                        [
                            "@@ -73,9 +73,11 @@ rcParams['ytick.labelsize']=16\n def run_mcmc(xx, yy, yy_err, param_range, p0, nwalkers, n_steps_burn_=100, n_steps_tot=2000):\n     ndim = len(param_range[:,1])\n     sampler = emcee.EnsembleSampler(nwalkers, ndim, log_probability, args=(xx, yy, yy_err, param_range))\n-    state = sampler.run_mcmc(p0, n_steps_burn_, progress=True)\n+    logger.info(\"running sampler.run_mcmc on p0, n_steps_burn_...\")\n+    state = sampler.run_mcmc(p0, n_steps_burn_, progress=False)\n     sampler.reset()\n-    sampler.run_mcmc(state, n_steps_tot, progress=True);\n+    logger.info(\"running sampler.run_mcmc on state n_steps_tot...\")\n+    sampler.run_mcmc(state, n_steps_tot, progress=False);\n     return sampler\n \n def log_probability(p, mean_data, var_data, y_err,tab_r):\n@@ -186,7 +188,8 @@ def Make_Corner_Plot(out_chain, thetaref, rangetab, typ=\"mean\", burn_ = 100, log\n \n     for n in range(nparams):\n         for k in range(n+1,nparams):\n-            plt.subplot(nparams,nparams,k*nparams+n+1)\n+            # plt.subplot(nparams,nparams,k*nparams+n+1)\n+            plt.subplot(nparams-1,nparams-1,k*(nparams-1)+n-1)\n             if (k==nparams-1):\n                 plt.xlabel(f'p{n+1}',fontsize=16)\n             if (n==0):\n@@ -205,7 +208,7 @@ def Make_Corner_Plot(out_chain, thetaref, rangetab, typ=\"mean\", burn_ = 100, log\n             else:\n                 plt.scatter(np.median(out_chain[:,n]),np.median(out_chain[:,n]),color=\"black\",marker='+')\n \n-            # plt.scatter(thetaref[n],thetaref[k],color=\"red\",marker='+',s=200)\n+            plt.scatter(thetaref[n],thetaref[k],color=\"black\",marker='+',s=200)\n             axes=plt.gca()\n             plt.text(0.05,0.08,f'measured: p{n+1}={np.round(np.mean(out_chain[:,n])*1000.)/1000.}; p{k+1}={np.round(np.mean(out_chain[:,k])*1000.)/1000.} ',\n                      transform=axes.transAxes,horizontalalignment='left',verticalalignment='bottom',fontsize=14,color=\"firebrick\")\n@@ -217,7 +220,7 @@ def Make_Corner_Plot(out_chain, thetaref, rangetab, typ=\"mean\", burn_ = 100, log\n     save_path = logdir + \"/plot_\" + ext_num + \".png\"\n     plt.savefig(save_path)\n     #plt.show()\n-\n+    plt.close()\n \n def get_level(prob_arr,v):\n    # Premi\u00e8re \u00e9tape, r\u00e9ordonner par ordre d\u00e9croissant une version monodimensionnelle de la grille.\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_PTC_NL/python/VIS_PTC_NL/file_entry_point.py": [
                        [
                            "@@ -18,19 +18,16 @@\n import astropy.io.fits as pf\n import numpy as np\n import numpy.ma as ma\n+from timeit import default_timer as timer\n \n import ElementsKernel.Logging as elog\n \n import VIS_PyLibrary_M.fits_io_library as fio\n-import VIS_PyLibrary_Common.pe_run_information as peri\n+# import VIS_PyLibrary_Common.pe_run_information as peri\n \n-from VIS_PRNU.VIS_PRNUCalibration_IO import file_validation as fv\n+# from VIS_PRNU.VIS_PRNUCalibration_IO import file_validation as fv\n from VIS_Gains import gain_flagging as algo\n \n-# Object masking\n-from VIS_ImageTools_M.FlagMap import VIS_FLAGS\n-\n-\n __all__ = ['file_layer_entry_point']\n \n \n@@ -75,9 +72,13 @@ def file_layer_entry_point(input_files, interm_dir, quadrant_id=None, in_flagmap\n     #In future the VIS_PyLibrary might support loading directly in to float32, but for the moment\n     #this loads as float64 then converts to float32.  This has no significant cost and maximises\n     #compatibility.  Wait for the outcomes of #11116 and #10907 before deciding what to do.\n+    print(f\"loading image_stack...\")\n+    loading_start = timer()\n     image_stack = fio.load_multi_same_ext(input_files, quad_name, apply_gain=False)\n     image_stack32 = np.array(image_stack, dtype=np.float32, copy=False, order=\"C\")\n-    # image_stack = None\n+    loading_end = timer()\n+    print(f\"image_stack loaded in {loading_end - loading_start} seconds...\")\n+\n     if in_flagmap is None:\n         flagmap = None\n         flag_prescan_size = None\n@@ -86,9 +87,16 @@ def file_layer_entry_point(input_files, interm_dir, quadrant_id=None, in_flagmap\n         flag_ccd_id = None\n         flag_quad_id = None\n     else:\n+        print(f\"loading flagmap...\")\n+        loading_start = timer()\n         flagmap = fio.load_multi_same_ext(in_flagmap, quad_name, apply_gain=False)\n         #use int32 (signed) because that is supported by the FITS standard\n         flagmap = np.array(flagmap, dtype=np.int32, copy=True, order=\"C\")\n+\n+        loading_end = timer()\n+        print(f\"flagmap loaded in {loading_end - loading_start} seconds...\")\n+\n+        print(f\"handling flagmap...\")\n         handle = pf.open(in_flagmap[0], memmap=False)\n         flag_prescan_size = handle[quadrant_id].header[\"PRESCANX\"]\n         flag_serial_overscan_size = handle[quadrant_id].header[\"OVRSCANX\"]\n@@ -96,20 +104,12 @@ def file_layer_entry_point(input_files, interm_dir, quadrant_id=None, in_flagmap\n         flag_ccd_id = handle[quadrant_id].header[\"CCDID\"]\n         flag_quad_id = handle[quadrant_id].header[\"QUADID\"]\n         handle.close()\n+        print(f\"flagmap handler closed...\")\n \n-        image_stack = algo.flagging_stack(image_stack32,\n-                                          flagmap,\n-                                          input_files,\n-                                          quad_name,\n-                                          interm_dir,\n-                                          flag_ccd_id,\n-                                          flag_quad_id,\n-                                          flag_prescan_size,\n-                                          flag_serial_overscan_size,\n-                                          flag_parallel_overscan_size)\n-\n+        print(f\"applying algo.flagging_stack...\")\n+        flagging_stack_start = timer()\n         # image_stack = algo.flagging_stack(image_stack32,\n-        #                                   ((flagmap & VIS_FLAGS[\"OBJECTS\"]) == 0),\n+        #                                   flagmap,\n         #                                   input_files,\n         #                                   quad_name,\n         #                                   interm_dir,\n@@ -118,9 +118,9 @@ def file_layer_entry_point(input_files, interm_dir, quadrant_id=None, in_flagmap\n         #                                   flag_prescan_size,\n         #                                   flag_serial_overscan_size,\n         #                                   flag_parallel_overscan_size)\n-\n-    # image_stack = ma.array(image_stack32, mask=flagmap, copy=False)\n-    # image_stack = ma.array(image_stack32, mask=((flagmap & VIS_FLAGS[\"OBJECTS\"]) == 0), copy=False)\n+        flagging_stack_end = timer()\n+        print(f\"flagging_stack processed in {flagging_stack_end-flagging_stack_start} seconds...\")\n+    image_stack = ma.array(image_stack32, mask=flagmap, copy=False)\n \n     log.info(\"file_layer_entry_point(): end\")\n     return image_stack\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_PTC_NL/tests/python/VIS_PTC_NL_calibration_test.py": [
                        [
                            "@@ -23,7 +23,7 @@\n :author: nguyenki\n \"\"\"\n \n-import py.test\n+import pytest\n import VIS_PTC_NL.VIS_PTC_NL_calibration\n \n class TestVIS_PTC_NL_calibration(object):\n@@ -38,4 +38,4 @@ class TestVIS_PTC_NL_calibration(object):\n     #     assert False, \"!!!! Please implement your tests !!!!\"\n \n     def testOk(self):\n-        assert True, \"Test OK\"\n\\ No newline at end of file\n+        assert True, \"Test OK\"\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Persistence/tests/python/VIS_Persistence_test.py": [
                        [
                            "@@ -23,7 +23,7 @@\n :author: user\n \"\"\"\n \n-import py.test\n+import pytest\n import VIS_Persistence.VIS_persistence_calibration as pc\n \n class TestVIS_Persistence(object):\n@@ -47,4 +47,4 @@ class TestVIS_Persistence(object):\n                 quad2[j*i] = i\n \n         value, std, mean_err = pc.ExtractPersistenceValue(quad1, quad2)\n-        assert value == 0\n\\ No newline at end of file\n+        assert value == 0\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Photometry/python/VIS_Photometry/VIS_Calibrate_Photometry.py": [
                        [
                            "@@ -11,7 +11,9 @@ import os\n import shutil\n import json\n from astropy.io import fits\n+from astropy.table import Table, vstack\n import numpy as np\n+import matplotlib.pyplot as plt\n \n import ElementsKernel.Logging\n logger = ElementsKernel.Logging.getLogger(__name__)\n@@ -22,12 +24,19 @@ from VIS_PyLibrary_Common import pipe_tools\n from VIS_ImageTools_Astromatic.Astromatic import Sextractor\n from VIS_ImageTools_M import VIS_plot_spreadmodel\n from VIS_PyLibrary_Common import pe_run_information\n-from VIS_Tasks_Common import FromToXML\n import VIS_Tasks_Common.VIS_diagnostics as visdiags\n import VIS_PyLibrary_Common.common_definitions as visdef\n-from VIS_Tasks_Common import Modules\n+from VIS_Tasks_Common import Modules, FromToXML\n from VIS_Astrometry import wcsfit\n \n+#-------------------------------------------------------------------------------\n+\n+def save_dqc_table( dqc, filename):\n+    tbl = Table( rows=dqc)\n+    tbl.write( filename, format='ascii.ecsv', overwrite=True)\n+    return\n+\n+#-------------------------------------------------------------------------------\n \n def defineSpecificProgramOptions():\n     \"\"\"\n@@ -67,7 +76,7 @@ def defineSpecificProgramOptions():\n \n     return parser\n \n-def get_zeropoint(catref_file, catmes_file, exp_time, logdir, sigmaclip_zp=True):\n+def get_zeropoint(catref_file, catmes_file, exp_time, logdir):\n     \"\"\"\n       Select useful stars from both catalogues\n       Match catalogues\n@@ -110,49 +119,102 @@ def get_zeropoint(catref_file, catmes_file, exp_time, logdir, sigmaclip_zp=True)\n     decref = catref_data.field('DEC')\n     magref = catref_data.field('VIS')\n \n-    raref_filt = raref[(magref<21.0) & (magref>19.0)]\n-    decref_filt = decref[(magref<21.0) & (magref>19.0)]\n-    magref_filt = magref[(magref<21.0) & (magref>19.0)]\n+    logger.info (\"Total number of objects in the reference catalogue: %d\", len(magref))\n \n-    logger.info (\"Number of objects selected in the reference catalogue: %s\", str(len(magref_filt)))\n+    full_list_aper_cor = []\n+    full_list_zero_point = []\n \n     hdulist = fits.open(catmes_file, memmap=False)\n     if len(hdulist) <= 2:\n         logger.info (\"Warning: Problem with the number of hdu units in the measured catalogue, too low.\")\n         sys.exit(1)\n     else:\n-        rames = ()\n-        decmes = ()\n-        magmes_13 = ()\n-        magmes_50 = ()\n-        flag = ()\n-        classmes = ()\n+        aper_cor_dqc = list()\n+        zero_point_dqc = list()\n         # Look for LDAC_OBJECTS extention\n         for hdu in hdulist[1:]:\n+           if hdu.header[\"EXTNAME\"] == \"LDAC_IMHEAD\":\n+             kwd_string_list = hdu.data['Field Header Card'][0]\n+             hdr_string = '\\n'.join(kwd_string_list)\n+             init_header = fits.Header.fromstring(hdr_string, sep='\\n')\n+             if 'EXTNAME' in init_header:\n+               # Single exposure mode \n+               CCDID = init_header['EXTNAME']\n+             else:\n+               # Stack exposure mode\n+               CCDID = \"STACK\"\n            if hdu.header[\"EXTNAME\"] == \"LDAC_OBJECTS\":\n-             catmes_data = hdu.data  # assuming the first extension is a table\n-             rames = np.concatenate((rames, catmes_data.field('XWIN_WORLD')), axis=0)\n-             decmes = np.concatenate((decmes,catmes_data.field('YWIN_WORLD')), axis=0)\n-             magmes_13 = np.concatenate((magmes_13,catmes_data.field('MAG_APER')[:,1]), axis=0)\n-             magmes_50 = np.concatenate((magmes_50,catmes_data.field('MAG_APER')[:,3]), axis=0)\n-             flag = np.concatenate((flag,catmes_data.field('FLAGS')), axis=0)\n-             classmes = np.concatenate((classmes, catmes_data.field('SPREAD_MODEL')), axis=0) #Changed CLASS_STAR to SPREAD_MODEL\n+             catmes_data = hdu.data\n+             if 'MAG_APER_RAW' in catmes_data.columns.names:\n+               catmes_data['MAG_APER'] = catmes_data['MAG_APER_RAW']\n+             \n              smp.add_ext( hdu)\n-        hdulist.close()\n-\n-    rames_filt = rames[flag == 0]\n-    decmes_filt = decmes[flag == 0]\n-    magmes_13_filt = magmes_13[flag == 0]\n-    magmes_50_filt = magmes_50[flag == 0]\n+             ### Filtering VIS sources\n+             mask = (catmes_data['SNR_WIN'] > 100) & (np.abs(catmes_data['SPREAD_MODEL']) < 0.005) & (catmes_data['ELLIPTICITY'] < 0.05) & (catmes_data['FLAGS'] == 0)\n+             ### Fill in the dqc table\n+             dqc_data = catmes_data[mask]\n+             aper_cor_dqc_row = dict()\n+             aper_cor_dqc_row[\"CCDID\"]       = CCDID\n+             aper_cor_dqc_row[\"X_IMAGE\"]     = dqc_data.field('X_IMAGE')\n+             aper_cor_dqc_row[\"Y_IMAGE\"]     = dqc_data.field('Y_IMAGE')\n+             aper_cor_dqc_row[\"MAG_APER_13\"] = dqc_data.field('MAG_APER')[:,1]\n+       \t     aper_cor_dqc_row[\"MAG_APER_50\"] = dqc_data.field('MAG_APER')[:,3]\n+             aper_cor_dqc_row[\"APER_COR_13\"] = dqc_data.field('MAG_APER')[:,3] - dqc_data.field('MAG_APER')[:,1]\n+\n+             ra_vis       = dqc_data.field('X_WORLD')\n+             dec_vis      = dqc_data.field('Y_WORLD')\n+             x_vis        = dqc_data.field('X_IMAGE')\n+             y_vis        = dqc_data.field('Y_IMAGE')\n+             mag_13       = dqc_data.field('MAG_APER')[:,1] + 2.5 * np.log10(exp_time)\n+             magerr_13    = dqc_data.field('MAGERR_APER')[:,1] \n+             mag_50       = dqc_data.field('MAG_APER')[:,3] + 2.5 * np.log10(exp_time)\n+             magerr_50    = dqc_data.field('MAGERR_APER')[:,3]\n+             aper_cor     = mag_50 - mag_13\n+             aper_cor_err = np.sqrt(magerr_13**2 + magerr_50**2)\n+                      \n+             #aper_cor_mean = np.average(aper_cor, weights=aper_cor_err) \n+             aper_cor_mean = np.mean(sigma_clip(aper_cor, sigma=3, maxiters=1))\n+\n+             full_list_aper_cor = np.concatenate((full_list_aper_cor, aper_cor))\n+\n+             c = SkyCoord(ra=ra_vis * u.degree, dec=dec_vis * u.degree)\n+             catalog = SkyCoord(ra=raref * u.degree, dec=decref * u.degree)\n+             idref, dist_sexa, dist_radian = c.match_to_catalog_sky(catalog)\n+             dist_arcsec_abs = dist_radian * 3600.0 * 180.0 / 3.1415\n+\n+             magref_assoc = np.take(magref, idref)\n+\n+             ######\n+             # Crossmatching tolerance in arcsec\n+             tol = 0.1\n+             ######\n+\n+             magref_matched  = magref_assoc[ dist_arcsec_abs < tol ]\n+             ra_vis_matched  = ra_vis[ dist_arcsec_abs < tol ]\n+             dec_vis_matched = dec_vis[ dist_arcsec_abs < tol ]\n+             x_vis_matched   = x_vis[ dist_arcsec_abs < tol ]\n+             y_vis_matched   = y_vis[ dist_arcsec_abs < tol ]\n+             mag_13_matched  = mag_13[ dist_arcsec_abs < tol ]\n+             mag_50_matched  = mag_50[ dist_arcsec_abs < tol ]\n+\n+             #zero_point = magref_matched - (mag_13_matched + aper_cor_mean)\n+             zero_point = magref_matched - mag_13_matched\n+\n+             zero_point_dqc_row = dict()\n+             zero_point_dqc_row[\"CCDID\"]       = CCDID\n+             zero_point_dqc_row[\"X_IMAGE\"]     = x_vis_matched\n+             zero_point_dqc_row[\"Y_IMAGE\"]     = y_vis_matched\n+             zero_point_dqc_row[\"MAG_APER_13\"] = mag_13_matched\n+             zero_point_dqc_row[\"MAG_VIS\"]     = mag_13_matched + zero_point - aper_cor_mean\n+             zero_point_dqc_row[\"MAG_VIS_Ref\"] = magref_matched\n+             zero_point_dqc_row[\"zero_point\"]  = zero_point - aper_cor_mean\n+\n+             full_list_zero_point = np.concatenate((full_list_zero_point, zero_point - aper_cor_mean))\n+ \n+             aper_cor_dqc.append(aper_cor_dqc_row)\n+             zero_point_dqc.append(zero_point_dqc_row)\n \n-    magmes_13_filt = magmes_13_filt + 2.5 * np.log10(exp_time)\n-    magmes_50_filt = magmes_50_filt + 2.5 * np.log10(exp_time)\n-    #np.savetxt('test.out', np.transpose([rames_filt,decmes_filt,magmes_filt]))\n-    #np.savetxt('testref.out', np.transpose([raref_filt,decref_filt,magref_filt]))\n-\n-    if (len(magmes_13_filt) < 30):\n-        logger.info (\"Error: the number of objects detected on the image is too low to estimate a zero point\")\n-        return(-1)\n+        hdulist.close()\n \n     # write spread_model plot\n     try: # failsafe mode\n@@ -164,34 +226,46 @@ def get_zeropoint(catref_file, catmes_file, exp_time, logdir, sigmaclip_zp=True)\n       logger.info( f\"!!! caught exception '{e}' in VIS_plot_spreadmodel.py, skipping...\")\n     del smp\n \n-    logger.info (\"Info: crossmatch between reference and measured catalogue...\")\n-    c = SkyCoord(ra=rames_filt * u.degree, dec=decmes_filt * u.degree)\n-    catalog = SkyCoord(ra=raref_filt * u.degree, dec=decref_filt * u.degree)\n-    idref, dist_sexa, dist_radian = c.match_to_catalog_sky(catalog)\n-    dist_arcsec_abs = dist_radian * 3600.0 * 180.0 / 3.1415\n-\n-    # Here add criteria about isolated star, reject galaxies + spurious\n-    magref_assoc = np.take(magref_filt, idref)\n-    magref_selected = magref_assoc[dist_arcsec_abs < 0.2]\n-    if (len(magref_selected) < 5):\n-        logger.info (\"Error: the number of cross-matched objects is too low to estimate a zero point\")\n-        return(-1)\n-    magmes_13_selected = magmes_13_filt[dist_arcsec_abs < 0.2]\n-    magmes_50_selected = magmes_50_filt[dist_arcsec_abs < 0.2]\n-    rames_selected = rames_filt[dist_arcsec_abs < 0.2]\n-    decmes_selected = decmes_filt[dist_arcsec_abs < 0.2]\n-\n-    filtered_aper_cor = sigma_clip(magmes_50_selected-magmes_13_selected, sigma=3, maxiters=1)\n+    aper_cor_dqc_filename = os.path.join( visdef.DATADIR, visdef.PPOID + \".\" + expid + \".Photometry_AC_DQC.txt\")\n+    zero_point_dqc_filename = os.path.join( visdef.DATADIR, visdef.PPOID + \".\" + expid + \".Photometry_ZP_DQC.txt\")\n+    # save Data Quality Control parameter dictionaries\n+    logger.info( \"saving Photometry DQC table to: \" + aper_cor_dqc_filename)\n+    save_dqc_table( aper_cor_dqc, aper_cor_dqc_filename)\n+    logger.info( \"saving Photometry DQC table to: \" + zero_point_dqc_filename)\n+    save_dqc_table( zero_point_dqc, zero_point_dqc_filename) \n+\n+    # Applying some filtering to the zero_point and aper_cor data\n+\n+    filtered_aper_cor = sigma_clip(full_list_aper_cor, sigma=3, maxiters=2)\n     aper_cor = np.ma.median(filtered_aper_cor)\n     aper_cor_rms = np.ma.std(filtered_aper_cor)\n \n-    zero_point = magref_selected - (magmes_13_selected + aper_cor)\n-    filtered_zero_point = sigma_clip(zero_point, sigma=3, maxiters=2)\n+    filtered_zero_point = sigma_clip(full_list_zero_point, sigma=3, maxiters=2)\n     zero_point = np.ma.median(filtered_zero_point)\n     zero_point_rms = np.ma.std(filtered_zero_point)\n \n-    logger.info (\"Number of objects associated after filtering for aperture correction: %d\", np.sum(~filtered_aper_cor.mask))\n-    logger.info (\"Number of objects associated after filtering for zero point: %d\", np.sum(~filtered_zero_point.mask))\n+    logger.info (\"Number of crossmatches after filtering for zero point computation: %d\", np.sum(~filtered_zero_point.mask))\n+    logger.info (\"Number of crossmatches after filtering for aperture correction computation: %d\", np.sum(~filtered_aper_cor.mask))\n+\n+    plt.figure()\n+    fig = plt.hist(full_list_zero_point, \n+                   bins=np.arange(min(full_list_zero_point), max(full_list_zero_point) + 0.01, 0.01),\n+                   histtype=u'step')\n+    mean_full_list_zp     = np.mean(full_list_zero_point)\n+    mean_full_list_zp_rms = np.std(full_list_zero_point)\n+    \n+    plt.axvline(mean_full_list_zp-mean_full_list_zp_rms, color='red', linestyle='dashed', linewidth=1)\n+    plt.axvline(mean_full_list_zp+mean_full_list_zp_rms, color='red', linestyle='dashed', linewidth=1)\n+    plt.title('Zero point Distribution')\n+    plt.xlabel(\"Zero Point\")\n+    plt.ylabel(\"Number\")\n+    plt.xlim(xmin=mean_full_list_zp - 3*mean_full_list_zp_rms, xmax = mean_full_list_zp + 3*mean_full_list_zp_rms)\n+    zero_point_dqc_plot_filename = os.path.join( visdef.DATADIR, visdef.PPOID + \".\" + expid + \".Hist_Zero_Point.png\")\n+    logger.info( \"saving zero point histogram plot to: \" + zero_point_dqc_plot_filename)\n+    plt.savefig(zero_point_dqc_plot_filename)\n+\n+    if (len(full_list_aper_cor) == 0) or (len(full_list_zero_point) == 0):\n+      return(-1) \n \n     phot_dict = dict()\n     phot_dict[\"zero_point\"] = zero_point\n@@ -235,9 +309,7 @@ def mainMethod(args):\n \n       # output stack PSF is 'raw_catalog' with \".psf\" extension instead of \".ldac\"\n       logger.info( \"* running PSFEx on stack catalogue\")\n-      Modules.PSFCalibration( args.config,\n-                              raw_catalogue,\n-                              workdir)\n+      Modules.PSFCalibration( raw_catalogue, workdir)\n       psf_out_prefix = os.path.splitext( raw_catalogue)[0]\n       psf = psf_out_prefix + \".psf\"\n     else:\n@@ -309,8 +381,7 @@ def mainMethod(args):\n     chk_phot = get_zeropoint( star_file_filename,\n                               os.path.join( workdir, catalog),\n                               exp_time,\n-                              args.logdir,\n-                              sigmaclip_zp=True)\n+                              args.logdir)\n     if chk_phot != -1:\n       logger.info (\"==> found zero point value of %f with corresponding rms of %f\", chk_phot[\"zero_point\"], chk_phot[\"zp_rms\"])\n       logger.info (\"==> found aperture correction value of %f with corresponding rms of %f\", chk_phot[\"aper_cor\"], chk_phot[\"aper_cor_rms\"])\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Photometry/tests/python/Photometry_Calib_test.py": [
                        [
                            "@@ -3,7 +3,7 @@\n @date 08/09/18\n @author grenet\n \"\"\"\n-import py.test\n+import pytest\n import VIS_Photometry.VIS_Calibrate_Photometry\n \n class TestVIS_Calibrate_Photometry(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_SatPixels/tests/python/SatPixelFlagging_test.py": [
                        [
                            "@@ -3,7 +3,7 @@\n @date 10/09/16\n @author user\n \"\"\"\n-import py.test\n+import pytest\n import VIS_SatPixels.SatPixelFlagging\n \n import os\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_SourceExtraction/python/VIS_SourceExtraction/VIS_extract_sources.py": [
                        [
                            "@@ -49,7 +49,7 @@ def defineSpecificProgramOptions():\n   parser.add_argument( \"--OUTPUT_CAT\", required=True, help=\"name of the output catalog\")\n   parser.add_argument( \"--FLAGS\",      help=\"name of the flags map, mandatory, will be updated with OBJECTS check-image\")\n   parser.add_argument( \"--WEIGHT\",     help=\"name of the weight map, optional\")\n-  parser.add_argument( \"--tmpdir\",     help=\"directory where default sextractor parameter and conf files are written\")\n+  parser.add_argument( \"--tmpdir\",     help=\"deprecated and ignored, now automatically generated - directory where default sextractor parameter and conf files are written\")\n   return parser\n \n \n@@ -67,7 +67,11 @@ def mainMethod(args):\n   inflagmap = args.FLAGS\n   inweight = args.WEIGHT\n   workdir = args.workdir\n-  tmpdir = args.tmpdir + '/'\n+\n+  # tmpdir must be used an unique, we build it from the exposure name\n+  # actual arg.tmpdir argument value is ignored\n+  tmpdir = os.path.basename( args.FITS_INPUT) + \".sexconf\"\n+  os.mkdir( tmpdir)\n \n   #Arguments given in input of the command for SExtractor\n   if (image[-5:] == \".fits\"):\n@@ -166,6 +170,12 @@ def mainMethod(args):\n     os.remove( inflagmap)\n     os.rename( temp_flagmap, inflagmap)\n \n+  # remove SExtractor configuration temporary directory\n+  try:\n+    shutil.rmtree( tmpdir)\n+  except:\n+    pass\n+\n   logger.info( \"#\")\n   logger.info( \"# Exiting %s mainMethod()\", __name__)\n   logger.info( \"#\")\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_SourceExtraction/tests/python/VIS_extract_sources_test.py": [
                        [
                            "@@ -23,7 +23,7 @@ Created on: 11/09/17\n Author: herent\n \"\"\"\n \n-import py.test\n+import pytest\n from VIS_SourceExtraction import VIS_extract_sources\n \n class TestVIS_extract_sources( object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Stacking/python/VIS_Stacking/VIS_stacking.py": [
                        [
                            "@@ -159,16 +159,11 @@ def runSWarp( config, workdir, exposure_list, stack_img_file, stack_wgt_file, wg\n   # of the config file\n \n   # CAVEAT: SWarp does not support too long paths\n-  # That is why we will specify all the paths relatively to workdir and cd to\n-  # workdir before executing SWarp, then go back to previous cwd\n-\n-  # Get current working directory\n-  cwd = os.getcwd()\n-  # cd to workdir\n-  os.chdir(workdir)\n+  # That is why we will specify all the paths relatively to workdir\n \n   hdulist = fits.open(exposure_list[0], memmap=False)\n-  obsid = hdulist[0].header['OBS_ID']\n+  obsid   = hdulist[0].header['OBS_ID']\n+  dithobs = hdulist[0].header['DITHOBS']\n   CD1_1 = hdulist[1].header['CD1_1']\n   CD1_2 = hdulist[1].header['CD1_2']\n   CD2_1 = hdulist[1].header['CD2_1']\n@@ -176,6 +171,7 @@ def runSWarp( config, workdir, exposure_list, stack_img_file, stack_wgt_file, wg\n   hdulist.close()\n \n   if not os.path.isdir('TMP_SWARP'):\n+    # TMP_SWARP is hardcoded in VIS_Tasks_Common/auxdir/VIS_Tasks_Common/default.swarp\n     os.mkdir('TMP_SWARP')\n \n # first SWarp run: resampling\n@@ -273,17 +269,15 @@ def runSWarp( config, workdir, exposure_list, stack_img_file, stack_wgt_file, wg\n     raise\n \n   # Updating FIELDID keyword in the stack header\n-  hdulist_stk = fits.open(stack_img_file, mode = 'update', memmap=False)\n-  hdulist_stk[0].header['OBS_ID'] = obsid\n-  hdulist_stk[0].header['DITHOBS'] = 0\n-  hdulist_stk[0].header['EXPNUM'] = 0\n+  hdulist_stk = fits.open( stack_img_file, mode = 'update', memmap=False)\n+  hdulist_stk[0].header['OBS_ID']  = obsid\n+  hdulist_stk[0].header['DITHOBS'] = dithobs\n+  hdulist_stk[0].header['EXPNUM']  = 0\n   hdulist_stk.close()\n \n   # Removing temporary swarp files\n   shutil.rmtree('TMP_SWARP')\n \n-  # Go back to previous directory\n-  os.chdir(cwd)\n   return\n \n \n@@ -544,7 +538,7 @@ def defineSpecificProgramOptions():\n   # configuration and parameters\n   parser.add_argument( \"--workdir\", required=True, help=\"absolute path to the workdir\")\n   parser.add_argument( \"--logdir\",  required=True, help=\"path to the logdir, relative to the workdir\")\n-  parser.add_argument( \"--config\",  required=True, help=\"configuration file path\")\n+  parser.add_argument( \"--vis_config_in\",  required=True, help=\"configuration file path\")\n   # inputs\n   parser.add_argument( \"--exposure_list\",  required=True, help=\"list of exposures to stack, either all FITS files or all DpdVisCalibratedFrame XML files\")\n   parser.add_argument( \"--ref_catalogues\",                help=\"list of corresponding star catalogues, optional if running as a task, not a pipeline\")\n@@ -570,7 +564,7 @@ def mainMethod(args):\n   stack_out_prefix = \"\"\n \n   # read configuration file\n-  config = FromToXML.read_config( args.config)\n+  config = FromToXML.read_config( args.vis_config_in)\n   ZIP_OUTPUTS = config.getboolean( \"General\", \"ZipOutputs\", fallback=False)\n \n   if config.getboolean( \"General\", \"Stacking\") == True:\n@@ -596,7 +590,7 @@ def mainMethod(args):\n #-------------------------------------\n # read input exposure and weightmap list\n \n-    input_files = FromToXML.read_json( args.exposure_list)\n+    input_files = sorted( FromToXML.read_json( args.exposure_list))\n     exposure_list = list()\n     wgt_files_list = list()\n     for input_file in input_files:\n@@ -608,10 +602,16 @@ def mainMethod(args):\n         # eg. dat_datafile = \"EUC_VIS_SWL-DET-018539-01-1-0000000__20220308T151025.889897Z.fits\"\n         # extract science extensions from DpdVisCalibratedFrame\n         sci_datafile = dat_datafile\n+        # remove .gz extension if input is compressed (https://euclid.roe.ac.uk/issues/22777)\n+        root, ext = os.path.splitext( sci_datafile)\n+        if ext.lower() == \".gz\":\n+          assert root.lower().endswith( \".fits\")\n+          sci_datafile = root\n         dat_datafile = os.path.join( DATADIR, dat_datafile)\n         FromToXML.extract_visCalibratedFrame_component( dat_datafile, sci_datafile, component=\".SCI\")\n         exposure_list.append( sci_datafile)\n-        wgt_files_list.append( os.path.join( DATADIR, wgt_datafile))\n+        wgt_datafile = zip_tools.unzip( os.path.join( DATADIR, wgt_datafile))\n+        wgt_files_list.append( wgt_datafile)\n       else:\n         # working as stacking task in another pipeline\n         # args.exposure_list contains \"process_photo_exp.reduce/tuplelist.json\"\n@@ -635,9 +635,15 @@ def mainMethod(args):\n \n     logger.info( f\"* stacking {len( exposure_list)} science exposures\")\n \n-    stack_img_file = os.path.basename(exposure_list[0]) + \"_stk.fits\"\n-    stack_wgt_file = os.path.basename(exposure_list[0]) + \"_stk.weight.fits\"\n-    stack_out_prefix = os.path.splitext( stack_img_file)[0]\n+    # build stack filename to not collide with first exposure (https://euclid.roe.ac.uk/issues/21980)\n+    first_expname = os.path.basename(exposure_list[0])\n+    prim_hdr = fits.getheader( first_expname, ext=0)\n+    prim_hdr[\"EXPNUM\"] = 0\n+    stack_expid = pipe_tools.get_vis_expid( prim_hdr)\n+    stack_out_prefix = f\"{visdef.EUCVISEXP_PREFIX}{stack_expid}_stk\"\n+    stack_img_file = stack_out_prefix + \".fits\"\n+    stack_wgt_file = stack_out_prefix + \".weight.fits\"\n+\n     runSWarp( config,\n               workdir,\n               exposure_list,\n@@ -663,7 +669,7 @@ def mainMethod(args):\n \n       logger.info( \"* running SExtractor with stack PSF\")\n       catalog_psf = stack_out_prefix + \"_psf.ldac\"\n-      Modules.Photometry( args.config,\n+      Modules.Photometry( args.vis_config_in,\n                           workdir,\n                           args.logdir,\n                           stack_img_file,\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Stacking/tests/python/VIS_stacking_test.py": [
                        [
                            "@@ -3,7 +3,7 @@\n @date 01/04/2022\n @author mottet@iap.fr\n \"\"\"\n-import py.test\n+import pytest\n import VIS_Stacking.VIS_stacking\n \n class TestVIS_stacking(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_Common/python/VIS_Tasks_Common/MDB.py": [
                        [
                            "@@ -74,6 +74,7 @@ def MDB_in( MDBfile: str, config: RawConfigParser):\n                  \"SpaceSegment.Instrument.VIS.VISDetectorPixelLongDimensionFormat\",\n                  \"SpaceSegment.PLM.TelescopeVISFoVCentreXscNominal\",\n                  \"SpaceSegment.PLM.TelescopeVISFoVCentreYscNominal\",\n+                 \"SpaceSegment.PLM.TelescopeVISPlatescale\",\n     )\n     for key in mdb_keys:\n       config.set( 'MDB', key, mdb.get_value( key))\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_Common/python/VIS_Tasks_Common/VIS_diagnostics.py": [
                        [
                            "@@ -32,14 +32,17 @@ at the end of a VIS pipeline.\n import os, sys\n import time\n import csv\n+import glob\n+import json\n \n import logging\n logger = logging.getLogger( __name__)\n \n from VIS_PyLibrary_Common import pipe_tools, html_tools\n-import VIS_PyLibrary_Common.common_definitions as visdef\n+from VIS_PyLibrary_Common import pe_run_information as peri\n from VIS_PyLibrary_Common.common_definitions import DATADIR\n-from VIS_Tasks_Common import FromToXML\n+import VIS_PyLibrary_Common.common_definitions as visdef\n+from VIS_Tasks_Common import FromToXML, pipeline_profiling\n \n \n ################################################################################\n@@ -101,7 +104,8 @@ def datadir_filename( filename):\n   return os.path.join( DATADIR, os.path.basename( filename))\n \n def link_diags_to_data( logdir, filename):\n-  \"\"\"create a symlink in 'data/<filename>' to '<workdir>/logs/diags/<filename>'\"\"\"\n+  \"\"\"create a symlink to '<workdir>/logs/diags/<filename>' in 'data/<filename>',\n+  so that <filename> can be ingested in the EAS\"\"\"\n   data_dest = datadir_filename( filename)\n   if DIAGDIR not in filename:\n     filename = diagdir_filename( logdir, filename)\n@@ -109,6 +113,28 @@ def link_diags_to_data( logdir, filename):\n   return\n \n \n+################################################################################\n+\n+def consolidate_peri_json():\n+  \"\"\"read all *.peri.json files in workdir and loads their content in a dictionary\n+  which first entry is the exposure identifier and the second entry is the DQ parameter name\"\"\"\n+  peri_list = sorted( glob.glob( \"*\" + peri._PERI_FILE_SUFFIX + peri._PERI_FILE_EXT))\n+  all_peri = dict()\n+  for peri_file in peri_list:\n+    with open( peri_file, \"r\") as f:\n+      pedict = json.load( f)\n+    if pedict[\"_obs_id\"] is not None:\n+      hdr = { \"OBS_ID\":  str( int( pedict[\"_obs_id\"])),\n+              \"DITHOBS\": str( int( pedict[\"_dithobs\"])),\n+              \"EXPNUM\":  str( int( pedict[\"_expnum\"]))}\n+      expid = pipe_tools.get_vis_expid( hdr)\n+      if expid in all_peri:\n+        all_peri[expid].update( pedict[\"_quality_control_stats\"])\n+      else:\n+        all_peri[expid] = pedict[\"_quality_control_stats\"]\n+  return all_peri\n+\n+\n ################################################################################\n \n def get_dqc_from_dpdanalysis( data_filename):\n@@ -124,28 +150,37 @@ def get_dqc_from_dpdanalysis( data_filename):\n \n ################################################################################\n \n-def pipeline_diagnostic_html( config, logdir):\n+def pipeline_diagnostic_html( config, logdir, dataproduct=None):\n   \"\"\"Create a diagnostic HTML file named <PPOId>.html in the pipeline working directory,\n-  return a list of created file names to be published in EAS/DSS\"\"\"\n+  and add the generated files to the genericParameterKeyValue elements of 'dataproduct'\"\"\"\n \n   # get pipeline metadata\n   project_root, project_name = pipe_tools.get_project_name()\n   project_version = pipe_tools.get_project_version( project_name)\n   workdir  = config.get(\"General\", \"workdir\")\n   pipename = config.get(\"General\", \"PipelineName\")\n-  explist = sorted( filter( lambda s: s.startswith( visdef.EUCVISEXP_PREFIX), config.sections()))\n-\n-  config_fname     = config_filename()\n-  piperun_fname    = piperun_filename()\n-  files_to_publish = [config_fname, piperun_fname]\n-\n+  explist = sorted( [sec for sec in config.sections() if sec.startswith( visdef.EUCVISEXP_PREFIX)])\n+\n+  # write final config.cfg to logs/diags\n+  config_fname = config_filename()\n+  diag_config_name = diagdir_filename( logdir, config_fname)\n+  with open( diag_config_name, 'w') as fd:\n+    config.write( fd)\n+  link_diags_to_data( logdir, diag_config_name)\n+\n+  # create pipeline profiling HTML report in logs/diags\n+  piperun_fname = piperun_filename()\n+  profiling_filename = diagdir_filename( logdir, piperun_fname)\n+  pipeline_profiling.Pipeline( \".\", verbose=True, html_filename=profiling_filename)\n+  link_diags_to_data( logdir, profiling_filename)\n+\n+  # create footprint plot\n   footprint_fname  = diagdir_filename( logdir, footprint_filename())\n   if os.path.exists( footprint_fname):\n     footprint_html = html_tools.image_file_to_base64( footprint_fname, html_attributes=\"width='500'\")\n   else:\n     footprint_html = \"\"\n \n-\n   # HTML header and pipeline metadata\n   html = html_tools.html_file_header(f\"{pipename} Execution Report\")\n   html += f\"\"\"\n@@ -207,34 +242,35 @@ Footprint preview:<br>\n \n \n # Quality Controls summary table\n-  if \"DpdVisAnalysisResults_DATA\" in config[exp_name]:\n-    try:\n-      html += f\"<hr/>\\n<h2>Exposure Quality Controls table</h2>\\n\"\n-      html += \"<table style='border:1px solid black;border-collapse:collapse;'>\\n\"\n-      html += \"<tr><th>VIS ExpName</th>\"\n+  all_peri = consolidate_peri_json()\n+  try:\n+    html += f\"<hr/>\\n<h2>Exposure Quality Controls table</h2>\\n\"\n+    html += \"<table style='border:1px solid black;border-collapse:collapse;'>\\n\"\n+    html += \"<tr><th>VIS ExpName</th>\"\n+    for qc_key in QCNAMES:\n+      html += f\"<th>{QCNAMES[qc_key][0]}</th>\"\n+    html +=\"</tr>\\n\"\n+    for exp_name in explist:\n+      expid = visdef.get_expid_from_filename( exp_name)\n+      dqc = all_peri[expid]\n+      html += f\"<tr><td><nobr>{exp_name}</nobr></td>\"\n       for qc_key in QCNAMES:\n-        html += f\"<th>{QCNAMES[qc_key][0]}</th>\"\n-      html +=\"</tr>\\n\"\n-      for exp_name in explist:\n-        dqc = get_dqc_from_dpdanalysis( config[exp_name][\"DpdVisAnalysisResults_DATA\"])\n-        html += f\"<tr><td><nobr>{exp_name}</nobr></td>\"\n-        for qc_key in QCNAMES:\n-          if qc_key in dqc:\n-            align = \"\"\n-            if QCNAMES[qc_key][1].endswith( \"f\"):\n-              dqc[qc_key] = float( dqc[qc_key])\n-              align = \"align='right'\"\n-            elif  QCNAMES[qc_key][1].endswith( \"d\"):\n-              dqc[qc_key] = int( dqc[qc_key])\n-              align = \"align='right'\"\n-            html += f\"<td {align}><nobr>{dqc[qc_key]:{QCNAMES[qc_key][1]}}</nobr></td>\"\n-          else:\n-            html += f\"<td></td>\"\n-        html += \"</tr>\\n\"\n-      html += \"</table>\\n\\n\"\n-    except Exception as e:\n-      html += \"</table>\\n\"\n-      html += f\"<p>caught exception '{e}' in VIS_Tasks_Common.VIS_diagnostics.pipeline_diagnostic_html(), when reading Data Quality Controls from DpdVisAnalysisResults, ignoring....</p>\\n\\n\"\n+        if qc_key in dqc:\n+          align = \"\"\n+          if QCNAMES[qc_key][1].endswith( \"f\"):\n+            dqc[qc_key] = float( dqc[qc_key])\n+            align = \"align='right'\"\n+          elif  QCNAMES[qc_key][1].endswith( \"d\"):\n+            dqc[qc_key] = int( dqc[qc_key])\n+            align = \"align='right'\"\n+          html += f\"<td {align}><nobr>{dqc[qc_key]:{QCNAMES[qc_key][1]}}</nobr></td>\"\n+        else:\n+          html += f\"<td></td>\"\n+      html += \"</tr>\\n\"\n+    html += \"</table>\\n\\n\"\n+  except Exception as e:\n+    html += \"</table>\\n\"\n+    html += f\"<p>caught exception '{e}' in VIS_Tasks_Common.VIS_diagnostics.pipeline_diagnostic_html(), when reading Data Quality Controls from DpdVisAnalysisResults, ignoring....</p>\\n\\n\"\n \n \n # exposure sections\n@@ -297,16 +333,21 @@ Footprint preview:<br>\n \n   # save HTML file to logs/diags/<PPOID>.html\n   # create link to data/<PPOID>.html for data product ingestion\n-  # return <PPOID>.html to put in XML data product\n-  # after ingestion, file should be viewable through https://euclidsocdss-rep1.esac.esa.int/<PPOID>.html\n+  # after pipeline end, dignaostics HTML page is viewable through https://euclidsocdss-rep1.esac.esa.int/<PPOID>.html\n   # eg. https://euclidsocdss-rep1.esac.esa.int/RUN_20230131_122504_8019.html\n   html += html_tools.html_file_footer()\n-\n   html_filename = visdef.PPOID + \".html\"\n   html_out = diagdir_filename( logdir, html_filename)\n   logger.info( f\"writing HTML diagnostic report to \" + html_out)\n   with open( html_out, \"w\") as f:\n     f.write( html)\n   link_diags_to_data( logdir, html_out)\n-  files_to_publish.append( html_filename)\n-  return files_to_publish\n+\n+  if dataproduct is not None:\n+    # attach generated files to 'dataproduct'\n+    files_to_ingest = [config_fname, piperun_fname, html_filename]\n+    # remove possible duplicates and file paths\n+    files_to_ingest = set( [os.path.basename( filename) for filename in files_to_ingest])\n+    for filename in files_to_ingest:\n+      FromToXML.add_generic_parameter_file( dataproduct, filename, filename)\n+  return\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_Common/tests/python/FromToXML_test.py": [
                        [
                            "@@ -6,7 +6,7 @@\n from astropy.units import dP\n from tkinter.constants import OFF\n \n-import py.test\n+import pytest\n from VIS_Tasks_Common import FromToXML\n \n from math import isnan, nan\n@@ -29,7 +29,7 @@ from ST_DM_DmUtils import DmUtils\n from VIS_TASKS_VERSION import VIS_TASKS_ORIGINAL_VERSION\n \n \n-@py.test.fixture(scope=\"module\")\n+@pytest.fixture(scope=\"module\")\n def ref_obs_sequence():\n     \"\"\"Return reference observation sequence\n     \"\"\"\n@@ -43,7 +43,7 @@ def ref_obs_sequence():\n     return(observation_sequence)\n \n \n-@py.test.fixture(scope=\"module\")\n+@pytest.fixture(scope=\"module\")\n def ref_polygon():\n     \"\"\"Return reference polygon\n        Values copied from SC4/LWF1_S2/19699 Dither 1\n@@ -146,7 +146,9 @@ class TestFromToXML(object):\n         naxis1 = 3\n         naxis2 = 2\n         master_flat = fitsio.FITS(filename, 'rw')\n-        master_flat.write(data=None, header=None)\n+        # LEDID and FLUENCE keywords are now mandatory (SM 23 Jun 2023)\n+        prim_hdr = dict( LEDID=\"3\", FLUENCE=40000.0)\n+        master_flat.write(data=None, header=prim_hdr)\n         image = numpy.arange(2 * 3, dtype='f4').reshape(naxis2, naxis1)\n         for i in range(0, ext_count):\n             master_flat.write(data = image, header=None)\n@@ -172,6 +174,8 @@ class TestFromToXML(object):\n         assert FromToXML.was_now( dp.Data.ValidityRange.TimestampStart)\n         assert dp.Data.ValidityRange.TimestampEnd > dp.Data.ValidityRange.TimestampStart\n         assert dp.Data.Filter.Name == \"VIS\"\n+        assert dp.Data.CalibUnitLed[0].LedId == \"3\"\n+        assert dp.Data.CalibUnitLed[0].Fluence == 40000.0\n \n         assert dp.Data.DataStorage.format == \"vis.masterFlat\"\n         assert dp.Data.DataStorage.version == \"0.1\"\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_Common/tests/python/Modules_test.py": [
                        [
                            "@@ -3,7 +3,7 @@\n @date 02/22/16\n @author user\n \"\"\"\n-import py.test\n+import pytest\n import VIS_Tasks_Common.Modules\n \n class TestModules(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/CMakeLists.txt": [
                        [
                            "@@ -81,6 +81,8 @@ elements_add_python_program(VIS_Astrometry_calib VIS_Tasks_M.VIS_Astrometry_cali\n elements_add_python_program(VIS_PSF_calib VIS_Tasks_M.VIS_PSF_calib)\n elements_add_python_program(VIS_LargeFlat_calib VIS_Tasks_M.VIS_LargeFlat_calib)\n elements_add_python_program(VIS_CTI_Calibration VIS_Tasks_M.VIS_CTI_Calibration)\n+elements_add_python_program(VIS_CTI_Data_Visualize VIS_Tasks_M.VIS_CTI_Data_Visualize)\n+elements_add_python_program(VIS_CTI_Master_CI VIS_Tasks_M.VIS_CTI_Master_CI)\n elements_add_python_program(VIS_process_astro_field_largeflat VIS_Tasks_M.VIS_process_astro_field_largeflat)\n elements_add_python_program(VIS_gain_calib VIS_Tasks_M.VIS_gain_calib)\n elements_add_python_program(VIS_CalibZP VIS_Tasks_M.VIS_CalibZP)\n@@ -88,6 +90,7 @@ elements_add_python_program(VIS_photometry_calib VIS_Tasks_M.VIS_photometry_cali\n elements_add_python_program(VIS_persistence_calib VIS_Tasks_M.VIS_persistence_calib)\n elements_add_python_program(VIS_gather_tp_quads VIS_Tasks_M.VIS_gather_tp_quads)\n elements_add_python_program(VIS_tp_calib VIS_Tasks_M.VIS_tp_calib)\n+elements_add_python_program(VIS_tp_xml_out VIS_Tasks_M.VIS_tp_xml_out)\n elements_add_python_program(VIS_process_crossmatch VIS_Tasks_M.VIS_process_crossmatch)\n elements_add_python_program(VIS_FlagObjects_xml_out VIS_Tasks_M.VIS_FlagObjects_xml_out)\n elements_add_python_program(VIS_PTC_NL_calib VIS_Tasks_M.VIS_PTC_NL_calib)\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_CTI_Calibration.py": [
                        [
                            "@@ -65,10 +65,16 @@ def defineSpecificProgramOptions():\n     parser.add_argument(\"--input_ccd\", type=str, help=\"\", dest=\"input_ccd\")\n     # Outputs\n     parser.add_argument(\n-        \"--cti_output\",\n+        \"--cti_parallel_output\",\n         type=str,\n-        help=\"pickled list of output products\",\n-        dest=\"cti_output\",\n+        help=\"pickled list of output parallel CTI products\",\n+        dest=\"cti_parallel_output\",\n+    )\n+    parser.add_argument(\n+        \"--cti_serial_output\",\n+        type=str,\n+        help=\"pickled list of output serial CTI products\",\n+        dest=\"cti_serial_output\",\n     )\n \n     return parser\n@@ -87,7 +93,8 @@ def mainMethod(args):\n     logdir = args.logdir\n     config_filename = workdir + args.config_filename\n     input_ccd = workdir + args.input_ccd\n-    cti_output = workdir + args.cti_output\n+    cti_parallel_output = workdir + args.cti_parallel_output\n+    cti_serial_output = workdir + args.cti_serial_output\n \n     # Check that configuration file exists\n     if os.path.isfile(config_filename) == False:\n@@ -112,7 +119,7 @@ def mainMethod(args):\n     # MDB??\n     # dont thing config and section will be used at the moment\n     CalibrateCTI(\n-        config, quad_input_files, cti_output,\n+        config, quad_input_files, cti_parallel_output, cti_serial_output\n     )\n \n     # See if we can get away with the Module writing the output file.\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_CTI_Data_Visualize.py": [
                        [
                            "@@ -0,0 +1,175 @@\n+# Copyright (C) 2012-2020 Euclid Science Ground Segment\r\n+#\r\n+# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\r\n+# Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\r\n+# any later version.\r\n+#\r\n+# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\r\n+# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\r\n+# details.\r\n+#\r\n+# You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\r\n+# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\r\n+#\r\n+import argparse\r\n+import os\r\n+import sys\r\n+\r\n+if sys.version_info[0] < 3:\r\n+    from ConfigParser import RawConfigParser\r\n+else:\r\n+    from configparser import RawConfigParser\r\n+import shutil\r\n+\r\n+# Euclid specific imports\r\n+import ElementsKernel.Logging as log\r\n+from astropy.io import fits\r\n+import numpy as np\r\n+import re\r\n+\r\n+# Local imports\r\n+from VIS_PyLibrary_Common import pe_run_information\r\n+\r\n+from VIS_Tasks_Common.FromToXML import read_json, write_json\r\n+from VIS_PyLibrary_Common import pipe_tools\r\n+\r\n+# initialise global logger\r\n+import ElementsKernel.Logging\r\n+\r\n+logger = ElementsKernel.Logging.getLogger(__name__)\r\n+\r\n+\r\n+def defineSpecificProgramOptions():\r\n+    \"\"\"\r\n+    @brief Allows to define the (command line and configuration file) options\r\n+    specific to this program\r\n+\r\n+    @details\r\n+    See the Elements documentation for more details.\r\n+    @return\r\n+    An  ArgumentParser.\r\n+    \"\"\"\r\n+\r\n+    # Inputs\r\n+    parser = argparse.ArgumentParser()\r\n+\r\n+    parser.add_argument(\"--workdir\", type=str, help=\"absolute path to the workdir\")\r\n+    parser.add_argument(\r\n+        \"--logdir\", type=str, help=\"path to the logdir, relative to the workdir\"\r\n+    )\r\n+    parser.add_argument(\"--config\", type=str, help=\"configuration file path\")\r\n+    parser.add_argument(\"--input_quads\", type=str)\r\n+    # Outputs\r\n+    parser.add_argument(\"--visualize_output\", type=str, help=\"Visualize json file\")\r\n+\r\n+    return parser\r\n+\r\n+\r\n+def mainMethod(args):\r\n+\r\n+    logger.info(\"#\")\r\n+    logger.info(\"# Entering %s mainMethod()\" % __name__)\r\n+    logger.info(\"# command line: \" + pipe_tools.get_erun_commandline())\r\n+    pipe_tools.log_task_environment(logger)\r\n+    logger.info(\"#\")\r\n+\r\n+    logdir = os.path.join(args.workdir, args.logdir)\r\n+    config_filename = os.path.join(args.workdir, args.config)\r\n+    input_quads = os.path.join(args.workdir, args.input_quads)\r\n+    visualize_output_name = os.path.join(args.workdir, args.visualize_output)\r\n+\r\n+    logger.info(\"ccdlistname: \" + visualize_output_name)\r\n+\r\n+    # Check that configuration file exists\r\n+    if os.path.isfile(config_filename) == False:\r\n+        logger.error(\"%s does not exist or is not readable\", config_filename)\r\n+        exit(1)\r\n+    # Instantiate the configuration file parser\r\n+    config = RawConfigParser()\r\n+    # Make it case-sensitive for parameter names\r\n+    config.optionxform = str\r\n+    # Open the configuration file\r\n+    config.read(config_filename)\r\n+\r\n+    # Set up logger\r\n+    logger.setLevel(\"DEBUG\")\r\n+\r\n+    logger.info(input_quads)\r\n+\r\n+    # Read parameters from config file\r\n+    # initialise PERunInformation dictionary for Data Quality Control\r\n+    # To be done later.\r\n+    peri = dict()\r\n+\r\n+    # Load quad name files.\r\n+    # NOTE: This is NOT 8*144 yet but 8 files/tuplelist.  These 8 files contain the 144 quads\r\n+    # I thin because of how we defined it in IAL Pip/Pkg these 8 files are in a file as a list of list\r\n+    # Basically a list of 8x1 where 1 is the file name.  Probably could be fixed in IAL definition.\r\n+    # Just in case it is 8x? higher than 1, will load up everything below.\r\n+    quad_name_files = [read_json(input_quads)]\r\n+    logger.info(\"Names of Quad Files:\")\r\n+    [logger.info(quad_name) for quad_name in quad_name_files]\r\n+\r\n+    visualize_output = []\r\n+\r\n+    # prefix file names with workdir\r\n+    all_quads = []\r\n+    print(f\"NUM FILES (FPARef_A): {quad_name_files}\")\r\n+    for i in range(len(quad_name_files)):\r\n+\r\n+        logger.info(\r\n+            f\"Quad Name file {i}: \"\r\n+            + str(quad_name_files[i])\r\n+            + \" len: \"\r\n+            + str(len(quad_name_files[i]))\r\n+        )\r\n+\r\n+        logger.info(\"quad name files[][]: \" + str(quad_name_files[i][0]))\r\n+\r\n+        for qname_tuple_file in quad_name_files[i]:\r\n+\r\n+            logger.info(\"Print QuadName TupleList: \" + qname_tuple_file)\r\n+            quad_144_list = read_json(qname_tuple_file)\r\n+            logger.info(\"Len quad_144_list: \" + str(quad_144_list))\r\n+            all_quads.append(quad_144_list)\r\n+\r\n+    # In a perfect world this [8][144] should be the same size and we don't bother opening fits files.\r\n+    # we just make file references from these lists. We are going for now to assume were in a perfect world\r\n+    # also a big assumption that every 4 quadrants are part of the same CCD.\r\n+    num_quads = len(all_quads[0])\r\n+\r\n+    # print(\"NUM FILES (FPARef_B): \" + str(all_quads))\r\n+    logger.info(\r\n+        \"NUM Quads in index 0: \"\r\n+        + str(num_quads)\r\n+        + \" Num of indexes: \"\r\n+        + str(len(all_quads[0]))\r\n+    )\r\n+\r\n+    print(all_quads)\r\n+    dddd\r\n+\r\n+    ccd_num = int(num_quads / 4)\r\n+    logger.info(\"Number of ccd to do: \" + str(ccd_num))\r\n+    for i in range(ccd_num):\r\n+        # For now lets store these names and everything in the gater_ccd directory instead of workdir.\r\n+        # Note it has .json names to this file we should do a strip or something here.\r\n+\r\n+        # file_name = visualize_output_name + \"_cti.\" + str(i) + \".json\"\r\n+        file_name = os.path.basename(visualize_output_name) + \"fpa_quad_\" + str(i) + \".png\"\r\n+\r\n+        ccd_quads = []\r\n+        visualize_output.append(file_name)\r\n+        for j in range(len(all_quads)):\r\n+            start_range = i * 4\r\n+            end_range = i * 4 + 4\r\n+            for k in range(start_range, end_range):\r\n+                ccd_quads.append(all_quads[j][k])\r\n+\r\n+\r\n+    logger.info(\"Writing to: \" + os.path.basename(visualize_output_name))\r\n+    write_json(visualize_output, visualize_output_name)\r\n+\r\n+    logger.info(\"#\")\r\n+    logger.info(\"# Exiting %s mainMethod()\" % __name__)\r\n+    logger.info(\"#\")\r\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_CTI_Master_CI.py": [
                        [
                            "@@ -0,0 +1,115 @@\n+\"\"\"\n+@file: python/Tasks/runStacking.py\n+History\n+\n+May 26, 2023 (OH): File created, adapted from VIS_CTI_Calibration.py for master charge injection images.\n+James Nightingale\n+@date: 05/26/23\n+\"\"\"\n+\n+# Standard library imports\n+import argparse\n+import configparser\n+import os\n+import shutil\n+import sys\n+import numpy as np\n+\n+# Euclid specific imports\n+from astropy.io import fits\n+import fitsio\n+import ElementsKernel.Logging as log\n+\n+# Local imports\n+from VIS_Tasks_Common.Modules import Master_CI\n+from VIS_Tasks_Common.FromToXML import load_list_from_file, write_json\n+from VIS_PyLibrary_Common import pipe_tools\n+\n+def defineSpecificProgramOptions():\n+    \"\"\"\n+    @brief Allows to define the (command line and configuration file) options\n+    specific to this program\n+\n+    @details\n+        See the Elements documentation for more details.\n+    @return\n+        An  ArgumentParser.\n+    \"\"\"\n+\n+    parser = argparse.ArgumentParser()\n+\n+    parser.add_argument(\n+        \"--workdir\", type=str, help=\"absolute path to the workdir\", dest=\"workdir\"\n+    )\n+    parser.add_argument(\n+        \"--logdir\",\n+        type=str,\n+        help=\"path to the logdir, relative to the workdir\",\n+        dest=\"logdir\",\n+    )\n+    # Inputs\n+    parser.add_argument(\n+        \"--config\", type=str, help=\"configuration file path\", dest=\"config_filename\"\n+    )\n+    parser.add_argument('--MDB',        help='MDB XML file path')\n+    parser.add_argument(\"--quad_list_of_lists\", type=str, help=\"\", dest=\"quad_list_of_lists\")\n+    # Outputs\n+    parser.add_argument(\n+        \"--cti_master_ci\",\n+        type=str,\n+        help=\"pickled list of output master charge injection products\",\n+        dest=\"cti_master_ci\",\n+    )\n+\n+    return parser\n+\n+\n+def mainMethod(args):\n+\n+    logger = log.getLogger(__name__)\n+    logger.info(\"#\")\n+    logger.info(\"# Entering %s mainMethod()\" % __name__)\n+    logger.info(\"# command line: \" + pipe_tools.get_erun_commandline())\n+    pipe_tools.log_task_environment(logger)\n+    logger.info(\"#\")\n+\n+    workdir = args.workdir + \"/\"\n+    logdir = args.logdir\n+    config_filename = workdir + args.config_filename\n+    quad_list_of_lists = workdir + args.quad_list_of_lists\n+    cti_master_ci = workdir + args.cti_master_ci\n+\n+    # Check that configuration file exists\n+    if os.path.isfile(config_filename) == False:\n+        print(config_filename, \"does not exist or is not readable\")\n+        exit(1)\n+    # Instantiate the configuration file parser\n+    config = configparser.RawConfigParser()\n+    # Make it case-sensitive for parameter names\n+    config.optionxform = str\n+    # Open the configuration file\n+    config.read(config_filename)\n+\n+    # Set up logger\n+    logger.setLevel(\"DEBUG\")\n+\n+    # Should be receiving a file that references all the quadrants of a ccd from all the fpa's\n+    # These quad filereferences are the names of the files.\n+    quad_input_files = load_list_from_file(quad_list_of_lists)\n+\n+    logger.info(\"Quad Input Files Working on: \" + str(quad_input_files))\n+\n+    # MDB??\n+    # dont thing config and section will be used at the moment\n+    Master_CI(\n+        config, quad_input_files, cti_master_ci, \n+    )\n+\n+    # See if we can get away with the Module writing the output file.\n+    # output_product_list = []\n+    # Write output product list\n+    # write_json(output_product_list, outfile)\n+\n+    logger.info(\"#\")\n+    logger.info(\"# Exiting %s mainMethod()\", __name__)\n+    logger.info(\"#\")\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_Cosmics.py": [
                        [
                            "@@ -0,0 +1,185 @@\n+#\n+# Copyright (C) 2012-2020 Euclid Science Ground Segment\n+#\n+# This library is free software; you can redistribute it and/or modify it under\n+# the terms of the GNU Lesser General Public License as published by the Free\n+# Software Foundation; either version 3.0 of the License, or (at your option)\n+# any later version.\n+#\n+# This library is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+# FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+# details.\n+#\n+# You should have received a copy of the GNU Lesser General Public License\n+# along with this library; if not, write to the Free Software Foundation, Inc.,\n+# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+#\n+\n+\n+\"\"\"\n+File: python/VIS_Tasks_M/VIS_Cosmics.py\n+\n+Created on: 04/27/23\n+Author: tflanet\n+\"\"\"\n+\n+import argparse\n+from astropy.io import fits\n+import numpy as np\n+\n+# logger initialisation\n+import logging\n+logger = logging.getLogger( __name__)\n+\n+# VIS specific imports\n+from VIS_ImageTools_M import FlagMap, FPA_quadrant, VIS_inpainting\n+from EL_Lacosmicx import lacosmicx\n+\n+\n+\n+def Cosmics(config, quad_name, infile, flagmap):\n+    logger.info(\"entering cosmics treatement\")\n+    logger.info(f\"infile is : {infile}\")\n+    #############################################################################################\n+    # getting the data ready : removing pre/overscan and padding\n+    hdulist = fits.open(infile, memmap=False)\n+    data=hdulist[1].data\n+    \n+    \n+    hdulist_flagmap = fits.open(flagmap, memap=False)\n+    data_flagmap=hdulist_flagmap[1].data    \n+    \n+    data_flagmap_copy = data_flagmap.copy()\n+    \n+    dimy_data, dimx_data = data.shape\n+  \n+    # maybe not necessary, because the new lacosmicx version can manage the flagging\n+    if flagmap is not None:\n+      logger.info( f\"inpaint COLD pixels before CR flagging\")\n+      flagmap_data = fits.getdata( flagmap, 1)\n+      data = VIS_inpainting.inpaint_astropy_convolution( data, flagmap_data, \"COLD\")\n+  \n+    \n+    # removing pre/overscan\n+    xmin, xmax, ymin, ymax = FPA_quadrant.get_quadrant_real_pixels(hdulist[1])\n+    data = data[ymin:ymax, xmin:xmax]\n+    logger.info(f\"after removing pre/overscan, shape of data is : {data.shape}\")\n+    \n+    data_flagmap_copy = data_flagmap_copy[ymin:ymax, xmin:xmax] \n+    logger.info(f\"after removing pre/overscan, shape of data_flagmap_copy is : {data_flagmap_copy.shape}\")\n+\n+# TODO: read padding from config(\"Cosmics\"), is padding necessary ? (maybe it is already done inside of lacosmicx)\n+    pad_data=np.lib.pad(data, (5,5), 'symmetric')\n+    \n+    pad_data_flagmap_copy = np.lib.pad(data_flagmap_copy, (5,5), 'symmetric')\n+    \n+    # converting pad_data_flagmap_copy into Boolean (False for 0, True for !=0) : lacosmicx ignores the True pixels in the inmask data, so we have to convert all bad pixels to True\n+    pad_data_flagmap_copy = np.where(pad_data_flagmap_copy == 0, False, True)\n+        \n+    #############################################################################################    \n+    # lacosmicx from EL_Lacosmcic\n+    # Populate command to spawn from parameters in the corresponding section\n+    # of the config file\n+    #lacosmicx(indat, inmask=None, sigclip=4.5, sigfrac=0.3, objlim=5.0,\n+    #             gain=1.0, readnoise=6.5, satlevel=65536.0, pssl=0.0, niter=4,\n+    #             sepmed=True, cleantype='meanmask', fsmode='median',\n+    #             psfmodel='gauss', psffwhm=2.5,psfsize=7, psfk=None,\n+    #             psfbeta=4.765, verbose=False)\n+    logger.info(f\"sigclip is : {float(config.get('Cosmics', 'sigclip', fallback=4.5))}\")\n+    logger.info(f\"sigfrac is : {float(config.get('Cosmics', 'sigfrac', fallback=0.3))}\")\n+    logger.info(f\"objlim is : {float(config.get('Cosmics', 'objlim', fallback=5.0))}\")\n+    logger.info(f\"gain is : {float(config.get('GainPerQuad', quad_name, fallback=1.0))}\")\n+    logger.info(f\"readnoise is : {float(config.get( 'ReadoutNoisePerQuad', quad_name, fallback=6.5))}\")\n+    logger.info(f\"satlevel is : {float(config.get('SaturationPerQuad', quad_name, fallback=65536.0))}\")\n+    logger.info(f\"pssl is : {float(config.get('Cosmics', 'pssl', fallback=0.0))}\")\n+    logger.info(f\"niter is : {float(config.get('Cosmics', 'niter', fallback=4))}\")\n+    flag_lacosmic, _ =lacosmicx(pad_data,\n+                      None,#pad_data_flagmap_copy,\n+                      float(config.get('Cosmics', 'sigclip', fallback=4.5)), float(config.get('Cosmics', 'sigfrac', fallback=0.3)), float(config.get('Cosmics', 'objlim', fallback=5.0)),\n+                      float(config.get( \"GainPerQuad\", quad_name, fallback=1.0)), float(config.get( \"ReadoutNoisePerQuad\", quad_name, fallback=6.5)), \n+                      float(config.get('SaturationPerQuad', quad_name, fallback=65536.0)),\n+                      float(config.get('Cosmics', 'pssl', fallback=0.0)), int(config.get('Cosmics', 'niter', fallback=4)))\n+    \n+    logger.info(\"lacosmicx done\") \n+    #############################################################################################\n+    # writing the flagmap from lacosmicx to the existing flagmap\n+    \n+    \n+    # reading the input flagmap from lacosmic\n+    flagmap_cosmic = FlagMap.FlagMap(data=flag_lacosmic)\n+# TODO: read padding from config(\"Cosmics\")\n+    flagmap_cosmic.flags = flagmap_cosmic.flags[5:-5,5:-5]\n+    \n+    # adding prescan/overscan pixels to flagmap_cosmic\n+    flagmap_cosmic.flags = np.lib.pad(flagmap_cosmic.flags, ((ymin, dimy_data - ymax), (xmin, dimx_data - xmax)), 'constant')\n+    logger.info(f\"after re-adding pre/overscan, shape of flagmap_cosmic.flags is : {flagmap_cosmic.flags.shape}\")\n+\n+    #convert 8 bit unsigned integer mask from cosmic ray removal module to boolean array expected by the 'set' method of class FlagMap\n+    flagmap_cosmic.flags = flagmap_cosmic.flags.astype('bool')\n+\n+    number_non_zero = np.count_nonzero(flagmap_cosmic.flags)\n+    logger.info(f\"count number of cosmics in flagmap_cosmic is : {number_non_zero}\")\n+    \n+    ################\n+    # reading the input flagmap from previous treatment\n+    flagmap0 = FlagMap.FlagMap(filename=flagmap)\n+      \n+    #setting the right bit flag for cosmic rays\n+    flagmap0.set('COSMIC',flagmap_cosmic.flags)\n+    \n+    # counting the number of cosmics found\n+    number_cosmics = np.count_nonzero(flagmap0.flags == FlagMap.VIS_FLAGS['COSMIC'])\n+    logger.info(f\"count number of cosmics in final flagmap is : {number_cosmics}\")\n+    number_non_zero_flagmap = np.count_nonzero(flagmap0.flags)\n+    logger.info(f\"count number of non zero in final flagmap is : {number_non_zero_flagmap}\")    \n+    \n+    #writing the final mask and the lacosmix mask\n+    flagmap0.write(flagmap)\n+    \n+    return(True)\n+\n+\n+def defineSpecificProgramOptions():\n+    \"\"\"\n+    @brief Allows to define the (command line and configuration file) options\n+    specific to this program\n+\n+    @details\n+        See the Elements documentation for more details.\n+    @return\n+        An  ArgumentParser.\n+    \"\"\"\n+    parser = argparse.ArgumentParser()\n+\n+    #\n+    # !!! Write your program options here !!!\n+    # e.g. parser.add_argument('--string-value', type=str, help='A string option')\n+    #\n+\n+    parser.add_argument('--config', type=str)\n+    parser.add_argument('--quad_name', type=str)\n+    parser.add_argument('--infile', type=str)\n+    parser.add_argument('--flagmap', type=str)\n+    \n+    return parser\n+\n+\n+def mainMethod( args):\n+\n+  logger.info( '#')\n+  logger.info( '# Entering %s mainMethod()' % __name__)\n+  logger.info( '# command line: ' + pipe_tools.get_erun_commandline())\n+  pipe_tools.log_task_environment( logger)\n+  logger.info( '#')\n+\n+\n+  Cosmics(config = args.config, \n+          quad_name = args.quad_name, \n+          infile = args.infile, \n+          flagmap = args.flagmap)\n+\n+  logger.info( '#')\n+  logger.info( '# Exiting %s mainMethod()' % __name__)\n+  logger.info( '#')\n+  return\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_LargeFlat_calib.py": [
                        [
                            "@@ -58,8 +58,8 @@ def defineSpecificProgramOptions():\n   parser.add_argument('--workdir',       help='absolute path to the workdir')\n   parser.add_argument('--logdir',        help='path to the logdir, relative to the workdir')\n   # parameters\n-  parser.add_argument('--config',        help='configuration file name')\n-  parser.add_argument('--MDB',           help='MDB filename')\n+  parser.add_argument('--vis_config_in', help='input configuration file name')\n+  parser.add_argument('--MDB',           help='input MDB filename')\n   # inputs\n   parser.add_argument('--catalogues_in', help='list of input catalogues to process')\n   # outputs\n@@ -78,7 +78,7 @@ def mainMethod(args):\n   pipe_tools.log_task_environment( logger)\n   logger.info( '#')\n \n-  logger.info( \"config_filename:     \" + args.config)\n+  logger.info( \"config_filename:     \" + args.vis_config_in)\n   logger.info( \"catalogues_in:       \" + args.catalogues_in)\n   logger.info( \"largeflatcal_output: \" + args.largeflatcal_output)\n   logger.info( \"logdir:       \" + args.logdir)\n@@ -94,7 +94,17 @@ def mainMethod(args):\n \n   # Open configuration file\n   # unused for now, but who knows...\n-  config = FromToXML.read_config( args.config)\n+  config = FromToXML.read_config( args.vis_config_in)\n+\n+  ncoeff = 10\n+\n+  if config.has_section( 'LargeFlatCalibration' ):\n+    if config.has_option('LargeFlatCalibration', 'NCOEFF'):\n+      ncoeff = int(config.get('LargeFlatCalibration', 'NCOEFF'))\n+\n+  logger.info( \"NCOEFF:       \" + str(ncoeff))\n+\n+\n \n   # Open MDB\n   mdb = Mdb( args.MDB)\n@@ -120,7 +130,7 @@ def mainMethod(args):\n \n   logger.info( \"Calibrating large-scale flat\")\n   largeflat_cal_io.file_layer_entry_point( input_files          = [xmatchfile],\n-                                           ncoeff               = 10,\n+                                           ncoeff               = ncoeff,\n                                            interm_dir           = args.logdir,\n                                            mdb                  = mdb,\n                                            output_flat          = largeflat_output,\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_PSF_calib.py": [
                        [
                            "@@ -77,7 +77,7 @@ def mainMethod(args):\n     strlistcat = ','.join( tmp_catlist)\n \n     explist = []\n-    PSFCalibration (config, strlistcat, workdir)\n+    PSFCalibration (strlistcat, workdir)\n \n     psf_filename  = FileNameProvider().get_allowed_filename(processing_function='VIS',\n                                                             type_name=\"MDL-PSF-000-000000-0000000\",\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_PTC_NL_calib.py": [
                        [
                            "@@ -31,6 +31,7 @@ import argparse\n from configparser import RawConfigParser\n import time\n import re\n+from timeit import default_timer as timer\n \n # Libraries imports\n import numpy as np\n@@ -47,6 +48,7 @@ from ST_DM_DmUtils import DmUtils\n from ST_DM_FilenameProvider.FilenameProvider import FileNameProvider\n \n # VIS imports\n+from VIS_PyLibrary_Common import pairing_flats as pf\n from VIS_PyLibrary_Common import pipe_tools\n from VIS_PyLibrary_Common import ptc_compute\n from VIS_Tasks_Common import FromToXML\n@@ -61,51 +63,6 @@ from VIS_PTC_NL import VIS_mcmc_emcee as mcmc\n # Object masking\n from VIS_ImageTools_M.FlagMap import VIS_FLAGS\n \n-def createFlatsLists(list_data_filename, list_flg_filename, config):\n-    flat_list_1 = []\n-    flat_list_2 = []\n-    flag_list_1 = []\n-    flag_list_2 = []\n-\n-    dict_of_flats = {}\n-    dict_of_flags = {}\n-\n-    for counter, filename in enumerate(list_data_filename):\n-        filename_in_config = filename.split(\".fits\")[0] + \".fits\"\n-        current_ptg = config.getint(filename_in_config, \"PTGID\", fallback=300)\n-        dict_of_flats[filename] = current_ptg\n-\n-    for counter, filename in enumerate(list_flg_filename):\n-        filename_in_config = filename.split(\".flags\")[0] + \".fits\"\n-        current_ptg = config.getint(filename_in_config, \"PTGID\", fallback=300)\n-        dict_of_flags[filename] = current_ptg\n-\n-    # Sort dict by values\n-    dict_of_flats = collections.OrderedDict(sorted(dict_of_flats.items(), key=lambda kv: kv[1]))\n-    dict_of_flags = collections.OrderedDict(sorted(dict_of_flags.items(), key=lambda kv: kv[1]))\n-\n-    current_ptg_id = 0\n-    for key in dict_of_flats:\n-        ptg_id = dict_of_flats[key]\n-        if ptg_id != current_ptg_id:\n-            flat_list_1.append(key)\n-            current_ptg_id = ptg_id\n-        else:\n-            flat_list_2.append(key)\n-            current_ptg_id = 0\n-\n-    current_ptg_id = 0\n-    for key in dict_of_flags:\n-        ptg_id = dict_of_flags[key]\n-        if ptg_id != current_ptg_id:\n-            flag_list_1.append(key)\n-            current_ptg_id = ptg_id\n-        else:\n-            flag_list_2.append(key)\n-            current_ptg_id = 0\n-\n-    return flat_list_1, flat_list_2, flag_list_1, flag_list_2\n-\n def defineSpecificProgramOptions():\n     \"\"\"\n     @brief Allows to define the (command line and configuration file) options\n@@ -191,15 +148,16 @@ def mainMethod(args):\n       if list_flg_filename[-1] != item_flg[:-4]:\n         list_flg_filename.append(item_flg[:-4])\n \n-    list_of_flats_1, list_of_flats_2, list_of_flags_1, list_of_flags_2 = createFlatsLists(list_data_filename, list_flg_filename, config)\n+    list_of_flats_1, list_of_flats_2 = pf.pairing_flats(list_data_filename, config, False)\n+    list_of_flags_1, list_of_flags_2 = pf.pairing_flats(list_flg_filename,  config, True)\n \n     # parameterization for PTC calculation\n     ## if bf_corr_typ==0 : no bfe correction;\n     ## if bf_corr_typ==1: correction with covariance;\n     ## if bf_corr_typ==2: correction with rebinning\n     bf_corr_typ = 2\n-    tile_s      = 4 ## when bf_corr_typ ==2 , tile_s must be a small number.\n-    kernelsize  = 8 ## if bf_corr_typ==2:  we rebin in superpixels of size kernelsize x kernelsize original pixels\n+    tile_s      = 4  ## when bf_corr_typ ==2 , tile_s must be a small number.\n+    kernelsize  = 12 ## if bf_corr_typ==2:  we rebin in superpixels of size kernelsize x kernelsize original pixels\n \n     # Initialize JSON model file names\n     ptc_model_file = \"\"\n@@ -207,6 +165,8 @@ def mainMethod(args):\n \n     # Loop on quadrants\n     for ext in range(nquad):\n+    # for ext in range(80,81):\n+        extension_timer_start = timer() # To calculate calculation duration for one quadrant\n         logger.info (\"==>Processing quadrant %s\", ext)\n \n         # PTC\n@@ -222,12 +182,12 @@ def mainMethod(args):\n         flag_quadrant_list_1      = [filename + \".{:03}\".format(ext + 1) for filename in list_of_flags_1]\n         flag_quadrant_list_2      = [filename + \".{:03}\".format(ext + 1) for filename in list_of_flags_2]\n \n-        image3D_flag_1 = fpe.file_layer_entry_point(detrended_quadrant_list_1, \"\", in_flagmap=flag_quadrant_list_1)\n-        image3D_flag_2 = fpe.file_layer_entry_point(detrended_quadrant_list_2, \"\", in_flagmap=flag_quadrant_list_2)\n+        image3D_flag_1 = fpe.file_layer_entry_point(detrended_quadrant_list_1, None, in_flagmap=flag_quadrant_list_1)\n+        image3D_flag_2 = fpe.file_layer_entry_point(detrended_quadrant_list_2, None, in_flagmap=flag_quadrant_list_2)\n \n-        # hdu = fits.open(detrended_quadrant_list[0], memmap=False)\n         hdu = fits.open(detrended_quadrant_list_1[0], memmap=False)\n         quadname = hdu[1].header[\"EXTNAME\"]\n+        quadgain = hdu[1].header[\"GAIN\"]\n         hdu.close()\n \n         # Thomas PTC calibration processing\n@@ -242,7 +202,6 @@ def mainMethod(args):\n \n         # Clotilde's PTC computing\n         for fl in range(len(image3D_flag_1)):\n-        # for fl in range(0,2):\n             logger.info(\"Processing flats pair number %s for extension %s\" % (fl, quadname))\n \n             # Processing PTC calculation\n@@ -268,9 +227,10 @@ def mainMethod(args):\n         ##\n         ## Mcmc calculation\n         ##\n-        xx     = f_tab_3\n-        yy     = v_tab_3\n-        yy_err = err_tab_3\n+        id_keep = ~np.isnan(f_tab_3) * ~np.isnan(v_tab_3) * ~np.isnan(err_tab_3)\n+        xx     = f_tab_3[id_keep]\n+        yy     = v_tab_3[id_keep]\n+        yy_err = err_tab_3[id_keep]\n \n         ### parameterization\n         nwalkers = 32\n@@ -293,11 +253,15 @@ def mainMethod(args):\n         logger.info(f\"yy    : '{yy}'\")\n         logger.info(f\"yy_err: '{yy_err}'\")\n \n+        mcmc_start = timer()\n         sampler = mcmc.run_mcmc(xx, yy, yy_err, tab_r, p0, nwalkers, n_steps_burn_=n_steps_burn_ , n_steps_tot=n_steps_tot)\n         samples = sampler.get_chain(flat=True)\n \n         p_out  = np.mean(samples[n_steps_burn_ :,:], axis=0)\n         p_out_err = np.std(samples[n_steps_burn_ :,:], axis=0)\n+        mcmc_end = timer()\n+\n+        logger.info(f\"run_mcmc processing took {mcmc_end-mcmc_start} seconds...\")\n \n         logger.info(\"p_out    : %s\" % p_out)\n         logger.info(\"p_out_err: %s\" % p_out_err)\n@@ -306,8 +270,10 @@ def mainMethod(args):\n         # ### si on veut afficher le resultat\n         try:\n             samples = sampler.get_chain(flat=True)\n-            p_mdl = [1,-1.097760e-2, 3.952350e-2]\n-            mcmc.Make_Corner_Plot(samples, p_mdl, (tab_r), logdir=args.logdir, ext_num=quadname)\n+            # p_mdl = [1,-1.097760e-2, 3.952350e-2]\n+            thetaref =  [1/quadgain,-1.097760e-2/quadgain, 3.952350e-2/quadgain]\n+            # mcmc.Make_Corner_Plot(samples, p_mdl, (tab_r), logdir=args.logdir, ext_num=quadname)\n+            mcmc.Make_Corner_Plot(samples, thetaref, (tab_r), logdir=args.logdir, ext_num=quadname)\n         except Exception as e:\n             logger.error( f\"!!! caught exception '{e}' in VIS_PTV_NL.VIS_mcm_emcee.Make_Corner_Plot, ignoring....\")\n \n@@ -378,259 +344,25 @@ def mainMethod(args):\n             fp.write(json.dumps(nl_json, indent=2, default=np.ndarray.tolist))\n             logger.info( \"** Updating nl model JSON file to %s\", nl_model_file)\n \n+        extension_timer_end = timer() # To calculate calculation duration for one quadrant\n+        logger.info(f\"Calculation took {extension_timer_end-extension_timer_start} seconds for {quadname}\")\n+\n     # Write end data product for PTC\n     dpdcalib_ptc = os.path.abspath(os.path.join( args.workdir, dpdcalib_ptc))\n     logger.info( \"** Writing ptc model data product XML to \" + dpdcalib_ptc)\n \n-    data_product = FromToXML.create_FileContainer_dp( \"other\",\n-                                                      os.path.basename(ptc_model_file))\n+    data_product = FromToXML.create_DpdVisFileContainer( datafile_list = [os.path.basename(ptc_model_file)],\n+                                                         vis_product=\"other\")\n     DmUtils.save_product_metadata( data_product, dpdcalib_ptc)\n \n     # Write end data product\n     dpdcalib_nl = os.path.abspath(os.path.join( args.workdir, dpdcalib_nl))\n     logger.info( \"** Writing nl model data product XML to \" + dpdcalib_nl)\n \n-    data_product = FromToXML.create_FileContainer_dp( \"other\",\n-                                                      os.path.basename(nl_model_file))\n+    data_product = FromToXML.create_DpdVisFileContainer( datafile_list = [os.path.basename(nl_model_file)],\n+                                                         vis_product=\"other\")\n     DmUtils.save_product_metadata( data_product, dpdcalib_nl)\n \n-    ###\n-    ### End of To remove/adapt to the needs\n-\n-    # list1_regex         = re.compile(r'EUC_SIM_VIS-FLAT-\\d-\\d\\d-1')\n-    # list2_regex         = re.compile(r'EUC_SIM_VIS-FLAT-\\d-\\d\\d-2')\n-    # list_science_regex  = re.compile(r'EUC_SIM_VIS-SCIENCE-\\d-\\d\\d-3')\n-\n-    # list_of_flats_1 = []\n-    # list_of_flats_2 = []\n-    # list_of_science = []\n-\n-    # for entry in os.listdir(data_dir):\n-    #     if os.path.isfile(os.path.join(data_dir, entry)):\n-    #         if (list1_regex.search(entry) != None):\n-    #             list_of_flats_1.append(data_dir + entry)\n-    #         elif (list2_regex.search(entry) != None):\n-    #             list_of_flats_2.append(data_dir + entry)\n-    #         elif (list_science_regex.search(entry) != None):\n-    #             list_of_science.append(data_dir + entry)\n-\n-    # #####\n-    # ##### Clotilde's code\n-    # #####\n-    # #############\n-\n-    # # parameterization\n-    # quadid = 1\n-    # bf_corr_typ = 2 ## if bf_corr_typ==0 : no bfe correction; if bf_corr_typ==1: correction with covariance; if bf_corr_typ==2: correction with rebinning\n-    # tile_s = 4 ## when bf_corr_typ ==2 , tile_s must be a small number.\n-    # kernelsize = 8 ## if bf_corr_typ==2:  we rebin in superpixels of size kernelsize x kernelsize original pixels\n-\n-    # ##############\n-\n-    # v_tab_3 = np.array([])\n-    # f_tab_3 = np.array([])\n-    # err_tab_3 = np.array([])\n-\n-    # # list_of_flats_1 = [ '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-1-1_0E43D1A0EC01-0018238_20221222T141522.726823Z_FLAT_TF_09112022.fits',\n-    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-2-1_0E43D1A0EB9A-0060914_20221222T142737.386594Z_FLAT_TF_09112022.fits',\n-    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-3-1_07CD30ACE22D-0013209_20221222T143959.613069Z_FLAT_TF_09112022.fits',\n-    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-4-1_0BC97E1CA19B-0062114_20221222T141134.235432Z_FLAT_TF_09112022.fits',\n-    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-5-1_0BC97E1E4DF1-0022650_20221222T142805.331970Z_FLAT_TF_09112022.fits',\n-    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-6-1_07CD30AD0A15-0011461_20221222T141051.440556Z_FLAT_TF_09112022.fits',\n-    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-7-1_07CD30AD0A63-0036325_20221222T144405.099680Z_FLAT_TF_09112022.fits',\n-    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-8-1_07CD30ACE142-0027930_20221222T143545.663197Z_FLAT_TF_09112022.fits',\n-    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-9-1_0BC97E1CA256-0052431_20221222T134930.119532Z_FLAT_TF_09112022.fits']\n-    # # list_of_flats_2 = [ '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-1-2_07CD30AD0A6B-0039803_20221222T140615.104667Z_FLAT_TF_09112022.fits',\n-    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-2-2_0E43D1A0EB43-0032513_20221222T142852.347851Z_FLAT_TF_09112022.fits',\n-    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-3-2_0E43D1A0D889-0005051_20221222T135028.477404Z_FLAT_TF_09112022.fits',\n-    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-4-2_0BC97E1E91C5-0000515_20221222T141958.343722Z_FLAT_TF_09112022.fits',\n-    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-5-2_07CD30ACE19D-0031519_20221222T143938.668663Z_FLAT_TF_09112022.fits',\n-    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-6-2_0E43D1A0EBB8-0050384_20221222T134615.299234Z_FLAT_TF_09112022.fits',\n-    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-7-2_0E43D1A0EB9A-0060957_20221222T142021.565634Z_FLAT_TF_09112022.fits',\n-    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-8-2_0E43D1A0EC06-0028479_20221222T141717.205930Z_FLAT_TF_09112022.fits',\n-    # #                     '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-9-2_0E43D1A0D853-0015066_20221222T142519.887644Z_FLAT_TF_09112022.fits']\n-    # # list_of_science = ['/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/ShortSciences/EUC_SIM_VIS-SCIENCE-3-1-3_0E43D1A0EC01-0018237_20221222T140044.439812Z_FLAT_TF_09112022.fits',\n-    # #                    '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/ShortSciences/EUC_SIM_VIS-SCIENCE-3-2-3_0BC97E1E4ED5-0016873_20221222T135924.259720Z_FLAT_TF_09112022.fits',\n-    # #                    '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/ShortSciences/EUC_SIM_VIS-SCIENCE-3-3-3_0BC97E1E91C5-0000544_20221222T140118.327490Z_FLAT_TF_09112022.fits',\n-    # #                    '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/ShortSciences/EUC_SIM_VIS-SCIENCE-3-4-3_07CD30ACE175-0029180_20221222T143354.540751Z_FLAT_TF_09112022.fits',\n-    # #                    '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/ShortSciences/EUC_SIM_VIS-SCIENCE-3-5-3_0E43D1A0EB05-0055484_20221222T135231.767878Z_FLAT_TF_09112022.fits',\n-    # #                    '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/ShortSciences/EUC_SIM_VIS-SCIENCE-3-6-3_0E43D1A0D709-0042086_20221222T140918.430030Z_FLAT_TF_09112022.fits',\n-    # #                    '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/ShortSciences/EUC_SIM_VIS-SCIENCE-3-7-3_0E43D1A0D94E-0011403_20221222T140134.579868Z_FLAT_TF_09112022.fits',\n-    # #                    '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/ShortSciences/EUC_SIM_VIS-SCIENCE-3-8-3_0E43D1A0D853-0015091_20221222T140513.847513Z_FLAT_TF_09112022.fits',\n-    # #                    '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/ShortSciences/EUC_SIM_VIS-SCIENCE-3-9-3_07CD30ACE15F-0028155_20221222T140927.277939Z_FLAT_TF_09112022.fits']\n-\n-    # # Thomas simulations\n-    # # list_of_flats_1 = [ '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-1-1_0E43D1A0EC01-0018238_20221222T141522.726823Z_FLAT_TF_09112022.fits']\n-    # # list_of_flats_2 = [ '/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/EUC_SIM_VIS-FLAT-3-1-2_07CD30AD0A6B-0039803_20221222T140615.104667Z_FLAT_TF_09112022.fits']\n-    # # list_of_science = ['/sps/euclid/OU-VIS/Simus_Flat/22122022_with_NL/3k/ShortSciences/EUC_SIM_VIS-SCIENCE-3-1-3_0E43D1A0EC01-0018237_20221222T140044.439812Z_FLAT_TF_09112022.fits']\n-\n-\n-    # # # PV-022 without BFE\n-    # # list_of_flats_1 = [ '/sps/euclid/Users/nguyenki/Work/Local_PPOs/test_data/PV_022/wo_bfe/EUC_SIM_VIS-FLAT-3-36-2_0BC97E1AB9F8-0005767_20220610T103623.925050Z_PV022_VIS_3_22_6.fits']\n-    # # list_of_flats_2 = [ '/sps/euclid/Users/nguyenki/Work/Local_PPOs/test_data/PV_022/wo_bfe/EUC_SIM_VIS-FLAT-3-36-3_0E43D1A599F0-0010566_20220610T103341.173539Z_PV022_VIS_3_22_6.fits']\n-    # # list_of_science = [ '/sps/euclid/Users/nguyenki/Work/Local_PPOs/test_data/PV_022/wo_bfe/EUC_SIM_VIS-SCIENCE-3-36-4_0E43D1A599BF-0058463_20220610T110635.000550Z_PV022_VIS_3_22_6.fits']\n-\n-    # # PV-022 with BFE\n-    # list_of_flats_1 = [ '/sps/euclid/Users/nguyenki/Work/Local_PPOs/test_data/PV_022/with_bfe/EUC_SIM_VIS-FLAT-3-36-2_0BC97E124404-0064861_20230225T005431.001850Z_PV022_VIS_3_22_0.fits',\n-    #                     '/sps/euclid/Users/nguyenki/Work/Local_PPOs/test_data/PV_022/with_bfe/EUC_SIM_VIS-FLAT-3-37-1_0BC97E1CF120-0030568_20230225T031831.356808Z_PV022_VIS_3_22_0.fits']\n-    # list_of_flats_2 = [ '/sps/euclid/Users/nguyenki/Work/Local_PPOs/test_data/PV_022/with_bfe/EUC_SIM_VIS-FLAT-3-36-3_07CD30ACE19D-0006781_20230225T034154.637063Z_PV022_VIS_3_22_0.fits',\n-    #                     '/sps/euclid/Users/nguyenki/Work/Local_PPOs/test_data/PV_022/with_bfe/EUC_SIM_VIS-FLAT-3-37-2_0E43D1A0EB9A-0062566_20230225T014435.415700Z_PV022_VIS_3_22_0.fits']\n-    # list_of_science = [ '/sps/euclid/Users/nguyenki/Work/Local_PPOs/test_data/PV_022/with_bfe/EUC_SIM_VIS-SCIENCE-3-36-4_0BC97E1CF0CF-0056112_20230225T023004.597967Z_PV022_VIS_3_22_0.fits',\n-    #                     '/sps/euclid/Users/nguyenki/Work/Local_PPOs/test_data/PV_022/with_bfe/EUC_SIM_VIS-SCIENCE-3-37-3_07CD30AD0A75-0013590_20230225T030130.702969Z_PV022_VIS_3_22_0.fits']\n-\n-    # print(\"list_of_flats_1: \", list_of_flats_1)\n-    # print(\"list_of_flats_2: \", list_of_flats_2)\n-    # print(\"list_of_science: \", list_of_science)\n-\n-\n-    # ptc_model_file = \"\"\n-    # for fl in range(len(list_of_flats_1)):\n-    #     print (\"Processing flats pair number %s\" % fl)\n-    #     flat_1 = fits.open(list_of_flats_1[fl])[quadid].data\n-    #     flat_2 = fits.open(list_of_flats_2[fl])[quadid].data\n-\n-    #     ### mask from sci\n-    #     sci = fits.open(list_of_science[fl])[quadid].data\n-    #     mm = np.median(sci)\n-    #     ss = np.std(sci)\n-    #     w_mask = np.where(sci > mm+ss)\n-    #     mask = np.zeros(np.shape(sci))\n-    #     mask[w_mask] = 1 ## a value of 1 means a masked pixel\n-\n-    #     quad_name = fits.open(list_of_flats_1[fl])[quadid].header['CCDID']+'.'+fits.open(list_of_flats_1[fl])[quadid].header['QUADID']\n-\n-    #     tab_var, tab_mean, tab_err_var = ptcnl_cal.compute_ptc(flat_1, flat_2, quad_name, n_tile=tile_s, bf_corr_typ=bf_corr_typ, kernelsize=kernelsize)\n-\n-    #     v_tab_3 = np.append(v_tab_3, tab_var)\n-    #     f_tab_3 = np.append(f_tab_3, tab_mean)\n-    #     err_tab_3 = np.append(err_tab_3, tab_err_var)\n-\n-    #     if ptc_model_file == \"\":\n-    #         ptc_model_file = FileNameProvider().get_allowed_filename( processing_function = 'VIS',\n-    #                                                                   type_name           = \"MDL-PTC\",\n-    #                                                                   instance_id         = '',\n-    #                                                                   extension           = '.json')\n-\n-\n-    #     ptc_model_file = os.path.join( args.workdir, \"\", ptc_model_file)\n-    #     ptc_json_dict = dict( model_name = \"VIS_ptc_calib\",\n-    #                           date   = time.ctime(),\n-    #                           source = \"\",\n-    #                           author = __file__)\n-\n-    #     with open(ptc_model_file, 'w') as fp:\n-    #         json.dump(ptc_json_dict, fp, indent=2, default=np.ndarray.tolist)\n-\n-    #     ptc_json_dict = {}\n-    #     ptc_json_dict[quad_name] =  {\n-    #                                     \"ptc_v_tab_3\": v_tab_3,\n-    #                                     \"ptc_f_tab_3\": f_tab_3\n-    #                                 }\n-\n-    # print(\"PTC f_tab_3  : \", f_tab_3)\n-    # print(\"PTC v_tab_3  : \", v_tab_3)\n-    # print(\"PTC err_tab_3: \", err_tab_3)\n-\n-    # with open(ptc_model_file, 'r') as fp:\n-    #         ptc_json = json.load(fp)\n-    #         ptc_json.update(ptc_json_dict)\n-\n-    # with open(ptc_model_file, 'w') as fp:\n-    #         fp.write(json.dumps(ptc_json, indent=2, default=np.ndarray.tolist))\n-    #         logger.info( \"** Updating ptc model JSON file to %s\", ptc_model_file)\n-\n-    # # Write end data product\n-    # dpdcalib_ptc = os.path.abspath(os.path.join( args.workdir, dpdcalib_ptc))\n-    # logger.info( \"** Writing ptc model data product XML to \" + dpdcalib_ptc)\n-\n-    # data_product = FromToXML.create_FileContainer_dp( \"other\",\n-    #                                                   os.path.basename(ptc_model_file))\n-    # DmUtils.save_product_metadata( data_product, dpdcalib_ptc)\n-\n-    # ##\n-    # ## Mcmc calculation\n-    # ##\n-    # xx = f_tab_3\n-    # yy  = v_tab_3\n-    # yy_err = err_tab_3\n-    # #yy_err = (yy)**(1./1.5)\n-\n-    # ### parameterization\n-    # nwalkers = 32\n-    # n_steps_burn_ = 100\n-    # n_steps_tot = 5000\n-\n-    # ## initialisation\n-    # p1_r = np.array([0.5,1.5])\n-    # p2_r = np.array([-0.5,0.5])\n-    # p3_r = np.array([-0.5,0.5])\n-    # tab_r = np.array([p1_r,p2_r,p3_r ]) #range on which vary the parameters\n-\n-    # p = np.array([1,0,0]) # initial guess for the parameter\n-    # ndim = len(p)\n-    # p0 = 0.1*np.random.rand(nwalkers, ndim)+ np.expand_dims(p,axis=0) # initial position for the walkers\n-\n-    # #####\n-    # sampler = mcmc.run_mcmc(xx, yy, yy_err, tab_r, p0, nwalkers, n_steps_burn_=n_steps_burn_ , n_steps_tot=n_steps_tot)\n-    # samples = sampler.get_chain(flat=True)\n-    # p_out  = np.mean(samples[n_steps_burn_ :,:], axis=0)\n-    # p_out_err = np.std(samples[n_steps_burn_ :,:], axis=0)\n-\n-    # logger.info(\"p_out    : %s\" % p_out)\n-    # logger.info(\"p_out_err: %s\" % p_out_err)\n-\n-    # nl_model_file = \"\"\n-    # if nl_model_file == \"\":\n-    #     nl_model_file = FileNameProvider().get_allowed_filename( processing_function = 'VIS',\n-    #                                                              type_name           = \"MDL-NL\",\n-    #                                                              instance_id         = '',\n-    #                                                              extension           = '.json')\n-\n-\n-    # nl_model_file = os.path.join( args.workdir, \"\", nl_model_file)\n-    # nl_json_dict = dict( model_name = \"VIS_nl_calib\",\n-    #                       date   = time.ctime(),\n-    #                       source = \"\",\n-    #                       author = __file__)\n-\n-    # with open(nl_model_file, 'w') as fp:\n-    #     json.dump(nl_json_dict, fp, indent=2, default=np.ndarray.tolist)\n-\n-    # nl_json_dict = {}\n-    # nl_json_dict =  {\n-    #     \"p_out\"    : p_out,\n-    #     \"p_out_err\": p_out_err\n-    # }\n-\n-    # with open(nl_model_file, 'r') as fp:\n-    #     nl_json = json.load(fp)\n-    #     nl_json.update(nl_json_dict)\n-\n-    # with open(nl_model_file, 'w') as fp:\n-    #     fp.write(json.dumps(nl_json, indent=2, default=np.ndarray.tolist))\n-    #     logger.info( \"** Updating nl model JSON file to %s\", nl_model_file)\n-\n-\n-    # # Write end data product\n-    # dpdcalib_nl = os.path.abspath(os.path.join( args.workdir, dpdcalib_nl))\n-    # logger.info( \"** Writing nl model data product XML to \" + dpdcalib_nl)\n-\n-    # data_product = FromToXML.create_FileContainer_dp( \"other\",\n-    #                                                   os.path.basename(nl_model_file))\n-    # DmUtils.save_product_metadata( data_product, dpdcalib_nl)\n-\n-    # #p_out gives the value of the 3 parameters encoding the NL polynomial, and p_out_err provides the associated errors\n-\n-    # ### si on veut afficher le resultat\n-    # samples = sampler.get_chain(flat=True)\n-    # p_mdl = [1,-1.097760e-2, 3.952350e-2]\n-    # mcmc.Make_Corner_Plot(samples, p_mdl, (tab_r), args.logdir)\n-\n-    # ###############\n-    # #######\n-    # ####### End of Clotilde's code\n-    # #######\n-\n     logger.info('#')\n     logger.info('# Exiting VIS_PTC_NL_calib mainMethod()')\n     logger.info('#')\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_calib_xml_out.py": [
                        [
                            "@@ -22,22 +22,25 @@ import json\n import tarfile\n \n from types import SimpleNamespace as Namespace\n-\n+from astropy.io import fits\n \n # Euclid specific imports\n+import dateutil.parser as dtparser\n from ST_DM_FilenameProvider import FilenameProvider\n from ST_DM_DmUtils import DmUtils\n import ElementsKernel.Logging\n logger = ElementsKernel.Logging.getLogger( __name__)\n \n # Local imports\n-from VIS_Tasks_Common import FromToXML\n+from VIS_Tasks_Common import FromToXML, pipeline_profiling\n from VIS_PyLibrary_Common import pipe_tools\n import VIS_PyLibrary_Common.pe_run_information as peri\n-import VIS_PyLibrary_Common.zip_tools as zip_tools\n-#import VIS_PyLibrary_Common.pe_run_information_consolidate as peri_consolidate\n-import dateutil.parser as dtparser\n-import VIS_PyLibrary_Common.common_definitions as commdef\n+from VIS_PyLibrary_Common import pe_run_information, zip_tools\n+import VIS_PyLibrary_Common.common_definitions as visdef\n+from VIS_PyLibrary_Common.common_definitions import DATADIR\n+import VIS_Tasks_Common.VIS_diagnostics as visdiags\n+\n+\n \n def defineSpecificProgramOptions():\n \n@@ -45,9 +48,14 @@ def defineSpecificProgramOptions():\n     # inputs\n     parser.add_argument( '--workdir',     help='absolute path to the workdir')\n     parser.add_argument( '--logdir',      help='path to the logdir, relative to the workdir')\n+# config_ini: see http://euclid.roe.ac.uk/issues/22161\n+    parser.add_argument( '--config_ini',  help='configuration file path')\n     parser.add_argument( '--master_data', help='Path to the master data json file')\n+    parser.add_argument( '--master_stdev', help='Path to the master data json file')\n+    parser.add_argument( '--master_count', help='Path to the master data json file')\n     parser.add_argument( '--master_flag', help='Path to the master flag json file')\n     parser.add_argument( '--led_profile', help='Path to the calibration unit illumination profile json file')\n+    parser.add_argument( '--master_avg', help='Path to the master data json file')\n     # outputs\n     parser.add_argument( '--dpdcalib_data',  help='output master data xml filename')\n     parser.add_argument( '--dpdcalib_flag',  help='output flagmap xml filename')\n@@ -69,11 +77,19 @@ def mainMethod(args):\n     if args.master_flag is not None:\n         master_flag   = os.path.join( workdir, args.master_flag)\n         dpdcalib_flag = os.path.join( workdir, args.dpdcalib_flag)\n+    if args.master_stdev is not None:\n+        master_stdev = os.path.join( workdir, args.master_stdev)\n+    if args.master_count is not None:\n+       \tmaster_count = os.path.join( workdir, args.master_count)\n+    if args.master_avg is not None:\n+        master_avg = os.path.join( workdir, args.master_avg)\n     dpdcalib_data = os.path.join( workdir, args.dpdcalib_data)\n     dpdanalysis   = os.path.join( workdir, args.dpdanalysis)\n \n     data_dir = os.path.join( workdir, 'data') + \"/\"\n \n+    config = FromToXML.read_config( args.config_ini)\n+\n     master_data_filename = FromToXML.load_list_from_file( master_data)[0]\n     full_master_filename = os.path.join( workdir, master_data_filename)\n \n@@ -81,98 +97,93 @@ def mainMethod(args):\n         full_master_filename + \" does not exist or is not readable\"\n \n     filename_provider_obj = FilenameProvider.FileNameProvider()\n+    timestamp = FromToXML.microsec_timestamp()\n \n     # handle PE run information\n     pe_name = 'CalStats'\n     pe_runinfo_list = []\n+    analysis_data = []\n \n     if master_data_filename == \"masterBiasNormalised.fits\":\n         mynewfile = filename_provider_obj.get_allowed_filename( processing_function='VIS',\n                                                                 type_name=\"MSR-BIA-000-000000-0000000\",\n                                                                 instance_id='',\n                                                                 extension='.fits')\n-        shutil.copy2( full_master_filename, os.path.join( data_dir, mynewfile))\n-        DPOutput = FromToXML.master_bias_dp( os.path.join( data_dir, mynewfile))\n-        mynewfile = filename_provider_obj.get_allowed_filename( processing_function='VIS',\n-                                                                type_name=\"AUX-MSR-BIA-000-000000-0000000\",\n-                                                                instance_id='',\n-                                                                extension='.tar.gz')\n-        pe_runinfo_analysis_filename = os.path.join(data_dir, mynewfile)\n-        analysis_id = 'VIS_MasterBias_PIPELINE__V1.0'\n-        pe_name = \"MSRBias\"\n-\n+        eas_fitsname = os.path.join( DATADIR, mynewfile)\n+        shutil.copy2( full_master_filename, eas_fitsname)\n+        DPOutput = FromToXML.master_bias_dp( eas_fitsname)\n+\n+        if args.master_stdev is not None:\n+            master_stdev_filename = FromToXML.load_list_from_file( master_stdev)[0]\n+            eas_biasstdevname = eas_fitsname.replace( \"EUC_VIS_MSR-BIA-\", \"EUC_VIS_MSR-BIA-STDEV-\")\n+            FromToXML.failsafe_symlink( master_stdev_filename, eas_biasstdevname)\n+            analysis_data.append(eas_biasstdevname)\n+\n+        if args.master_count is not None:\n+            master_count_filename = FromToXML.load_list_from_file( master_count)[0]\n+            eas_biascountname = eas_fitsname.replace( \"EUC_VIS_MSR-BIA-\", \"EUC_VIS_MSR-BIA-COUNT-\")\n+            FromToXML.failsafe_symlink( master_count_filename, eas_biascountname)\n+       \t    analysis_data.append(eas_biascountname)\n \n     elif master_data_filename == \"masterDarkNormalised.fits\":\n-        mynewfile = filename_provider_obj.get_allowed_filename( processing_function='VIS',\n-                                                                type_name=\"MSR-DRK-000-000000-0000000\",\n-                                                                instance_id='',\n-                                                                extension='.fits')\n-        shutil.copy2( full_master_filename, os.path.join( data_dir, mynewfile))\n-        DPOutput = FromToXML.master_dark_dp( os.path.join( data_dir, mynewfile))\n-        mynewfile = filename_provider_obj.get_allowed_filename( processing_function='VIS',\n-                                                                type_name=\"AUX-MSR-DRK-000-000000-0000000\",\n-                                                                instance_id='',\n-                                                                extension='.tar.gz')\n-        pe_runinfo_analysis_filename = os.path.join(data_dir, mynewfile)\n-        analysis_id = 'VIS_MasterDark_PIPELINE__V1.0'\n-        pe_name = \"MSRDark\"\n+        # create MasterDark FITS file in workdir/data\n+        prim_hdr = fits.getheader( full_master_filename, ext=0)\n+        if \"EXPTIME\" in prim_hdr:\n+          exptime = f\"{int( float( prim_hdr['EXPTIME']))}s\"\n+        else:\n+          exptime = \"noexptime\"\n+        eas_fitsname = os.path.join( DATADIR, f\"EUC_VIS_MSR-DRK_{exptime}__{timestamp}.fits\")\n+        FromToXML.failsafe_symlink( full_master_filename, eas_fitsname)\n+        DPOutput = FromToXML.master_dark_dp( eas_fitsname)\n \n         if args.master_flag is not None:\n             # handle optional master dark flagmap\n-            master_flag_filename=\"\"\n-            master_flag_filename = FromToXML.load_list_from_file( master_flag)\n-            master_flag_filename = master_flag_filename[0]\n-            mynewfile = filename_provider_obj.get_allowed_filename( processing_function='VIS',\n-                                                                    type_name=\"MSR-DRK-000-000000-0000000\",\n-                                                                    instance_id='',\n-                                                                    extension='.flagmap.fits')\n-            shutil.copy2( os.path.join( workdir, master_flag_filename),\n-                          os.path.join( data_dir, mynewfile))\n-            DPOutput_flag = FromToXML.flagmap_dp( os.path.join( data_dir, mynewfile), \"dark\")\n+            master_flag_filename = FromToXML.load_list_from_file( master_flag)[0]\n+            eas_flagname = eas_fitsname.replace( \"EUC_VIS_MSR-DRK_\", \"EUC_VIS_MSR-DRK-FLAGMAP_\")\n+            FromToXML.failsafe_symlink( master_flag_filename, eas_flagname)\n+            DPOutput_flag = FromToXML.flagmap_dp( eas_flagname, \"dark\")\n             DmUtils.save_product_metadata( DPOutput_flag, dpdcalib_flag)\n \n     elif (master_data_filename == \"masterFlatNormalised.fits\"):\n-        mynewfile = filename_provider_obj.get_allowed_filename( processing_function='VIS',\n-                                                                type_name=\"MSR-FLA-000-000000-0000000\",\n-                                                                instance_id='',\n-                                                                extension='.fits')\n-        shutil.copy2( full_master_filename, os.path.join( data_dir, mynewfile))\n-        DPOutput = FromToXML.master_flat_dp( os.path.join( data_dir, mynewfile))\n-        mynewfile = filename_provider_obj.get_allowed_filename( processing_function='VIS',\n-                                                                type_name=\"AUX-MSR-FLA-000-000000-0000000\",\n-                                                                instance_id='',\n-                                                                extension='.tar.gz')\n-        pe_runinfo_analysis_filename = os.path.join(data_dir, mynewfile)\n-        analysis_id = 'VIS_MasterFlat_PIPELINE__V1.0'\n-        pe_name = \"MSRFlat\"\n-\n+        # create MasterFlat FITS file in workdir/data\n+        prim_hdr = fits.getheader( full_master_filename, ext=0)\n+        if \"LEDID\" in prim_hdr:\n+          ledid = prim_hdr[\"LEDID\"]\n+        else:\n+          ledid = \"na\"\n+        if \"FLUENCE\" in prim_hdr:\n+          fluence = prim_hdr[\"FLUENCE\"]\n+          if int( fluence) > 1000:\n+            fluence = f\"{int( fluence)//1000}K\"\n+        else:\n+          fluence = \"na\"\n+        eas_fitsname = os.path.join( DATADIR, f\"EUC_VIS_MSR-FLA_LED{ledid}-{fluence}ADU__{timestamp}.fits\")\n+        FromToXML.failsafe_symlink( full_master_filename, eas_fitsname)\n+        DPOutput = FromToXML.master_flat_dp( eas_fitsname)\n+\n+        # handle optional master flat flagmap\n         if args.master_flag is not None:\n-            # handle optional master flat flagmap\n-            master_flag_filename=\"\"\n-            master_flag_filename = FromToXML.load_list_from_file( master_flag)\n-            master_flag_filename = master_flag_filename[0]\n-            mynewfile = filename_provider_obj.get_allowed_filename( processing_function='VIS',\n-                                                                    type_name=\"MSR-FLA-000-000000-0000000\",\n-                                                                    instance_id='',\n-                                                                    extension='.flagmap.fits')\n-            shutil.copy2( os.path.join( workdir, master_flag_filename),\n-                          os.path.join( data_dir, mynewfile))\n-            DPOutput_flag = FromToXML.flagmap_dp( os.path.join( data_dir, mynewfile), \"flat\")\n+            master_flag_filename = FromToXML.load_list_from_file( master_flag)[0]\n+            eas_flagname = eas_fitsname.replace( \"EUC_VIS_MSR-FLA_\", \"EUC_VIS_MSR-FLA-FLAGMAP_\")\n+            FromToXML.failsafe_symlink( master_flag_filename, eas_flagname)\n+            DPOutput_flag = FromToXML.flagmap_dp( eas_flagname, \"flat\")\n             DmUtils.save_product_metadata( DPOutput_flag, dpdcalib_flag)\n \n+        if args.master_avg is not None:\n+            master_avg_filename = FromToXML.load_list_from_file( master_avg)[0]\n+            eas_flatavgname = eas_fitsname.replace( \"EUC_VIS_MSR-FLA_\", \"EUC_VIS_MSR-FLA-AVG_\")\n+            FromToXML.failsafe_symlink( master_avg_filename, eas_flatavgname)\n+            analysis_data.append(eas_flatavgname)\n+\n         # handle optional calibration unit lamp profile\n         ledprofile_filename = FromToXML.load_list_from_file( os.path.join( workdir, args.led_profile))\n         if len( ledprofile_filename) > 0:\n             ledprofile_filename = ledprofile_filename[0]\n-            mynewfile = filename_provider_obj.get_allowed_filename( processing_function='VIS',\n-                                                                    type_name=\"MSR-FLA-000-000000-0000000\",\n-                                                                    instance_id='',\n-                                                                    extension='.ledprofile.fits')\n-            shutil.copy2( os.path.join( workdir, ledprofile_filename),\n-                          os.path.join( data_dir, mynewfile))\n-            ledprofile_dp = FromToXML.create_DpdVisFileContainer( [os.path.join( data_dir, mynewfile)],\n+            eas_ledprofile = eas_fitsname.replace( \"EUC_VIS_MSR-FLA_\", \"EUC_VIS_MSR-FLA-LEDPROFILE_\")\n+            FromToXML.failsafe_symlink( ledprofile_filename, eas_ledprofile)\n+            ledprofile_dp = FromToXML.create_DpdVisFileContainer( [eas_ledprofile],\n                                                                   vis_product=\"led_profile\")\n-            DmUtils.save_product_metadata( ledprofile_dp, os.path.join( workdir, args.dpd_ledprofile))\n+            DmUtils.save_product_metadata( ledprofile_dp, args.dpd_ledprofile)\n \n     else:\n         raise Exception( master_data_filename + \" is different from masterBiasNormalised.fits or masterDarkNormalised.fits or masterFlatNormalised.fits\")\n@@ -181,7 +192,7 @@ def mainMethod(args):\n     peconverted_final_statKeys = {}\n \n     pe_runinfo_list_context_file = []\n-    ppoid = commdef.PPOID\n+    ppoid = visdef.PPOID\n     for perun_file in os.scandir(workdir):\n         if peri.is_peri_file(perun_file.name):\n             with open(perun_file,'r') as f:\n@@ -217,7 +228,16 @@ def mainMethod(args):\n                                                   aux_file=qcnewfile,\n                                                   raw_frame_id=None,\n                                                   analysis_id=str(pe_date.isoformat()),\n-                                                  obs_seq_foranalysis=None)\n+                                                  obs_seq_foranalysis=None,\n+                                                  analysis_data=analysis_data)\n+\n+    # create diagnostics HTML page\n+    try:\n+      files_to_ingest = visdiags.pipeline_diagnostic_html( config, args.logdir, dpdanalysis_dp)\n+    except Exception as e:\n+      logger.info( f\"!!! caught exception '{e}' when generating diagnostics HTML page, ignoring....\")\n+\n+    # and save DpdAnalysis output product\n     DmUtils.save_product_metadata(dpdanalysis_dp, dpdanalysis)\n \n     logger.info( \"#\")\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_gain_calib.py": [
                        [
                            "@@ -44,6 +44,7 @@ from VIS_ImageTools_M import FlagMap, FPA_quadrant\n from VIS_Bias import VIS_BiasCorrection_IO as bias_cor_io\n from VIS_Tasks_Common import FromToXML\n from VIS_PyLibrary_Common import pipe_tools\n+from VIS_PyLibrary_Common.pairing_flats import pairing_flats\n import VIS_PyLibrary_Common.common_definitions as visdef\n \n from ST_DM_FilenameProvider.FilenameProvider import FileNameProvider\n@@ -118,17 +119,27 @@ def mainMethod(args):\n     y1 = 0\n \n     quad_pair_dqc = list() # data quality control parameter list of dictionaries for all quadrants per FF pair\n-    np.random.RandomState(0)\n+    gain_json_dict = dict()\n+    gain_json_dict['model_name'] = \"VIS_gain_calib\"\n+    gain_json_dict['date'] = time.ctime()\n+    gain_json_dict['source'] = \"\"\n+    gain_json_dict['author'] = __file__\n+    gain_json_dict['units'] = \"e-/ADU\"    \n \n     for ext in range(nquad):\n-       np.random.seed(ext)\n-       logger.info (\"==>Processing quadrant %s\", ext)\n-\n        # Here we need the pile of n exposures in input\n        # so adding the extension number to the individual filename is the pile\n        detrended_quadrant_list = [filename + \".{:03}\".format(ext + 1) for filename in list_data_filename]\n        flag_quadrant_list = [filename + \".{:03}\".format(ext + 1) for filename in list_flg_filename]\n \n+       # pairing the flat based on their PTGID. This is usefull for PV but should be changed\n+       # during the survey routine operations\n+       list1, list2 = pairing_flats(detrended_quadrant_list, config, False)\n+       list1_flg, list2_flg = pairing_flats(flag_quadrant_list, config, True)\n+\n+       detrended_quadrant_list = [a for items in zip(list1, list2) for a in items]\n+       flag_quadrant_list = [a for items in zip(list1_flg, list2_flg) for a in items]\n+\n        # get the list of the bias offsets\n        bias_ron_list = []\n        for fitsfile in detrended_quadrant_list:\n@@ -137,46 +148,53 @@ def mainMethod(args):\n           bias_ron_list.append(hdu[1].header['BIAS_RON'])\n           hdu.close()\n \n+       logger.info (\"==> Processing quadrant %s\", quadname)\n+\n        gain_ref = config.getfloat( \"GainPerQuad\", quadname)\n        # Load the entire stack of quadrant\n-       image3D_flag = fpe.file_layer_entry_point(detrended_quadrant_list, \"\", in_flagmap=flag_quadrant_list)\n+       image3D_flag = fpe.file_layer_entry_point(detrended_quadrant_list, None, in_flagmap=flag_quadrant_list)\n+\n+       logger.info (\"==> Computing statistics on all available independant pairs\")\n \n        gain_tot = []\n        mean_signal_tot = []\n        nb_pts_tot = 0\n-       for i in range(len(image3D_flag)):\n-          for j in range(i+1, len(image3D_flag)):\n-             quad_pair_dqc_row = dict()\n-             quad_pair_dqc_row[\"Quadrant\"]              = quadname\n-             quad_pair_dqc_row[\"ff1_filename\"]          = detrended_quadrant_list[i].split( '.fits')[0]\n-             quad_pair_dqc_row[\"ff2_filename\"]          = detrended_quadrant_list[j].split( '.fits')[0]\n-             ## it misses LED parameters for the time being\n-             quad_pair_dqc_row[\"ff1_median\"]            = np.ma.median(image3D_flag[i])\n-             quad_pair_dqc_row[\"ff2_median\"]            = np.ma.median(image3D_flag[j])\n-             quad_pair_dqc_row[\"ff1_mean\"]              = np.mean(image3D_flag[i])\n-       \t     quad_pair_dqc_row[\"ff2_mean\"]              = np.mean(image3D_flag[j])\n-             quad_pair_dqc_row[\"ff1_std\"]               = np.std(image3D_flag[i])\n-       \t     quad_pair_dqc_row[\"ff2_std\"]               = np.std(image3D_flag[j])\n-             quad_pair_dqc_row[\"ff1_rejected_px_count\"] = image3D_flag[i].mask.sum()\n-             quad_pair_dqc_row[\"ff2_rejected_px_count\"] = image3D_flag[j].mask.sum()\n-             ## it misses ptc_rejected_px_count. Not needed?\n-             #bias_ron = np.sqrt(0.5*(bias_ron_list[i]**2 + bias_ron_list[j]**2))\n-             ptc_var_offset = bias_ron_list[i]**2 + bias_ron_list[j]**2\n-             #bias_ron = (bias_ron_list[i] + bias_ron_list[j])/2.\n-             # Compute the gain for current pair\n-             stats = gain_cal.Compute_Gain_Tiles(image3D_flag[i],image3D_flag[j], npixls=300, ptc_var_offset=ptc_var_offset)\n-             gain_tot.append(stats[\"ptc_normvar\"])\n-             mean_signal_tot.append(stats[\"ptc_mean\"])\n-             nb_pts_tot = nb_pts_tot + len(stats[\"ptc_normvar\"])\n-\n-             quad_pair_dqc_row[\"ptc_delta\"]             = np.mean(stats[\"ptc_delta\"])\n-             quad_pair_dqc_row[\"ptc_mean\"]    \t        = np.mean(stats[\"ptc_mean\"])\n-             quad_pair_dqc_row[\"ptc_var\"]               = np.mean(stats[\"ptc_var\"])\n-             quad_pair_dqc_row[\"ptc_var_offset\"]        = stats[\"ptc_var_offset\"]\n-             quad_pair_dqc_row[\"ptc_normvar\"]           = np.mean(stats[\"ptc_normvar\"])\n-             quad_pair_dqc_row[\"ptc_normvar_std\"]  \t= np.std(stats[\"ptc_normvar\"])\n-\n-             quad_pair_dqc.append(quad_pair_dqc_row)\n+\n+       for i in range(0, len(image3D_flag), 2):\n+       \t  j = i+1\n+       \t  logger.info (\"==> Computing tilling statistics over pair #%d-#%d\", i, j)\n+\n+          quad_pair_dqc_row = dict()\n+          quad_pair_dqc_row[\"Quadrant\"]              = quadname\n+          quad_pair_dqc_row[\"ff1_filename\"]          = detrended_quadrant_list[i].split( '.fits')[0]\n+          quad_pair_dqc_row[\"ff2_filename\"]          = detrended_quadrant_list[j].split( '.fits')[0]\n+          ## it misses LED parameters for the time being\n+          quad_pair_dqc_row[\"ff1_median\"]            = np.ma.median(image3D_flag[i])\n+          quad_pair_dqc_row[\"ff2_median\"]            = np.ma.median(image3D_flag[j])\n+          quad_pair_dqc_row[\"ff1_mean\"]              = np.mean(image3D_flag[i])\n+       \t  quad_pair_dqc_row[\"ff2_mean\"]              = np.mean(image3D_flag[j])\n+          quad_pair_dqc_row[\"ff1_std\"]               = np.std(image3D_flag[i])\n+       \t  quad_pair_dqc_row[\"ff2_std\"]               = np.std(image3D_flag[j])\n+          quad_pair_dqc_row[\"ff1_rejected_px_count\"] = image3D_flag[i].mask.sum()\n+          quad_pair_dqc_row[\"ff2_rejected_px_count\"] = image3D_flag[j].mask.sum()\n+          ## it misses ptc_rejected_px_count. Not needed?\n+          #bias_ron = np.sqrt(0.5*(bias_ron_list[i]**2 + bias_ron_list[j]**2))\n+          ptc_var_offset = bias_ron_list[i]**2 + bias_ron_list[j]**2\n+          #bias_ron = (bias_ron_list[i] + bias_ron_list[j])/2.\n+          # Compute the gain for current pair\n+          stats = gain_cal.Compute_Gain_Tiles(image3D_flag[i],image3D_flag[j], npixls=300, ptc_var_offset=ptc_var_offset)\n+          gain_tot.append(stats[\"ptc_normvar\"])\n+          mean_signal_tot.append(stats[\"ptc_mean\"])\n+          nb_pts_tot = nb_pts_tot + len(stats[\"ptc_normvar\"])\n+\n+          quad_pair_dqc_row[\"ptc_delta\"]             = np.mean(stats[\"ptc_delta\"])\n+          quad_pair_dqc_row[\"ptc_mean\"]    \t        = np.mean(stats[\"ptc_mean\"])\n+          quad_pair_dqc_row[\"ptc_var\"]               = np.mean(stats[\"ptc_var\"])\n+          quad_pair_dqc_row[\"ptc_var_offset\"]        = stats[\"ptc_var_offset\"]\n+          quad_pair_dqc_row[\"ptc_normvar\"]           = np.mean(stats[\"ptc_normvar\"])\n+          quad_pair_dqc_row[\"ptc_normvar_std\"]  \t= np.std(stats[\"ptc_normvar\"])\n+\n+          quad_pair_dqc.append(quad_pair_dqc_row)\n \n        del image3D_flag\n \n@@ -186,6 +204,8 @@ def mainMethod(args):\n \n        # plotting quality control information in the pdf file\n \n+       logger.info (\"==> generating diagnostic plot\")\n+\n        if ext%8 == 0:\n          fig, axs = plt.subplots(4, 2)\n          fig.tight_layout()\n@@ -227,47 +247,34 @@ def mainMethod(args):\n \n        #if ext == 3:\n        #  exit(0)\n-       #gain = np.average(gain_tot, weights=std_gain_tot)\n-       #std_gain = np.std(gain_tot)\n+       gain = np.mean(gain_tot)\n+       std_gain = np.std(gain_tot)\n        #mean_err_gain = std_gain/np.sqrt(len(gain_tot))\n \n \n        # log the results\n-       #logger.info (\"Gain calibration results for quadrant %s\",\tquadname)\n-       #logger.info (\"==> gain = %f gain_err = %f gain_mean_err = %f\", gain, std_gain, mean_err_gain)\n+       logger.info (\"==> Gain calibration results for quadrant %s\", quadname)\n+       logger.info (\"==> gain = %f gain_err = %f\", gain, std_gain)\n \n-       ### gain_model_file initialization ###\n-       if gain_model_file == \"\":\n-         gain_model_file = FileNameProvider().get_allowed_filename( processing_function = 'VIS',\n-                                                                    type_name           = \"MDL-GAIN\",\n-                                                                    instance_id         = '',\n-                                                                    extension           = '.json')\n-         gain_model_file = os.path.join( args.workdir, \"data\", gain_model_file)\n-         gain_json_dict = dict( model_name = \"VIS_gain_calib\",\n-                                date = time.ctime(),\n-                                source = \"\",\n-                                author = __file__,\n-                                units = \"e-/ADU\")\n-         with open(gain_model_file, 'w') as fp:\n-           json.dump(gain_json_dict, fp, indent=2, default=np.ndarray.tolist)\n-\n-       #### update json file with gain estimation ####\n-       gain_json_dict = {}\n+       #### update json dict with gain estimation ####\n        gain_json_dict[quadname] = np.mean(gain_tot)\n \n-       with open(gain_model_file, 'r') as fp:\n-         gain_json = json.load(fp)\n-         gain_json.update(gain_json_dict)\n-\n-       with open(gain_model_file, 'w') as fp:\n-         fp.write(json.dumps(gain_json, indent=2, default=np.ndarray.tolist))\n     # Closing quality control pdf\n     pdf.close()\n \n     # Write end data product\n \n+    gain_model_file = FileNameProvider().get_allowed_filename( processing_function = 'VIS',\n+                                                                    type_name           = \"MDL-GAIN\",\n+                                                                    instance_id         = '',\n+                                                                    extension           = '.json')\n+    logger.info (\"==> Creating Gain calibration data product %s\", gain_model_file)\n+    gain_model_file = os.path.join( args.workdir, \"data\", gain_model_file)\n+    with open(gain_model_file, 'w') as fp:\n+      fp.write(json.dumps(gain_json_dict, indent=2, default=np.ndarray.tolist))\n+\n     dpdcalib_gain = os.path.abspath( os.path.join( args.workdir, dpdcalib_gain))\n-    logger.info( \"Writing Gain model data product XML to \" + dpdcalib_gain)\n+    logger.info( \"Writing final Gain model data product XML to \" + dpdcalib_gain)\n \n     gain_model_dp = FromToXML.create_DpdVisGainModel( os.path.basename( gain_model_file))\n \n@@ -279,7 +286,7 @@ def mainMethod(args):\n                                           quad_pair_dqc_filename)\n \n     # and write metadata to the XML file to be ingested in the EAS\n-    DmUtils.save_product_metadata( data_product, dpdcalib_gain)\n+    DmUtils.save_product_metadata( gain_model_dp, dpdcalib_gain)\n \n     # save Data Quality Control parameter dictionaries\n     logger.info( \"** Writing Quadrant pairs DQC table to: \" + quad_pair_dqc_filename)\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_gather_tp_quads.py": [
                        [
                            "@@ -27,18 +27,17 @@\n \n from argparse import ArgumentParser\n from itertools import groupby\n+from logging import getLogger\n from pathlib import Path\n \n from fitsio import read_header\n \n-import ElementsKernel.Logging as log\n-\n from VIS_PyLibrary_Common import pipe_tools\n from VIS_Tasks_Common.FromToXML import load_list_from_file, write_json\n \n-from VIS_TrapPumping.VIS_TrapPumping_IO import get_tp_toi, is_stp_file\n+from VIS_TrapPumping.VIS_TrapPumping_IO import get_tp_pshcy, get_tp_toi\n \n-logger = log.getLogger(__name__)\n+logger = getLogger(__name__)\n \n \n def defineSpecificProgramOptions():\n@@ -62,14 +61,25 @@ def defineSpecificProgramOptions():\n     parser.add_argument(\n         \"--quad_chunk_list\", help=\"path of output listfile of chunked quads\"\n     )\n+    parser.add_argument(\n+        \"--metadata_json\", help=\"path to TP metadata JSON file\"\n+    )\n \n     return parser\n \n \n+def is_stp_file(filepath):\n+    return read_header(filepath)[\"SEQID\"] == \"MULTI SERIAL TRAP PUMPING\"\n+\n+\n def _get_tp_toi(filepath):\n     return get_tp_toi(read_header(filepath))\n \n \n+def _get_tp_pshcy(filepath):\n+    return get_tp_pshcy(read_header(filepath))\n+\n+\n def get_extname(filepath):\n     \"\"\"\n     Get the 'EXTNAME' extension header entry, e.g. '3-2.G'.\n@@ -107,11 +117,13 @@ def mainMethod(args):\n     workdir = Path(args.workdir)\n     quad_files = load_list_from_file(str(workdir / args.quad_list))\n \n-    sort_func = get_date_obs if is_stp_file(quad_files[0]) else _get_tp_toi\n+    serial = is_stp_file(quad_files[0])\n+    sort_funcs = [get_date_obs] if serial else [_get_tp_toi, _get_tp_pshcy]\n \n     # Sort files by EXTNAME then TP_TOI if VTP/DATE-OBS if STP\n     sorted_quad_files = sorted(\n-        quad_files, key=lambda f: (get_extname(f), sort_func(f))\n+        quad_files,\n+        key=lambda f: (get_extname(f), *[func(f) for func in sort_funcs]),\n     )\n     # Group by EXTNAME\n     quad_chunks = [\n@@ -120,6 +132,15 @@ def mainMethod(args):\n     # Write to JSON listfile\n     write_json(quad_chunks, workdir / args.quad_chunk_list)\n \n+    # Write metadata\n+    prim_hdr = read_header(sorted_quad_files[-1])  # guaranteed TP file\n+    metadata = {\n+        \"tp_type\": \"MultipleSerial\" if serial else \"Parallel\",\n+        \"shuff_mode\": prim_hdr[\"TP_SSHM1\"] if serial else prim_hdr[\"TP_PSHM\"],\n+        \"ig1_voltage\": round(prim_hdr[\"CI_IG1\"] * 100) / 100,  # 2 dec places\n+    }\n+    write_json(metadata, workdir / args.metadata_json)\n+\n     logger.info(\"#\")\n     logger.info(\"# Exiting %s mainMethod()\", __name__)\n     logger.info(\"#\")\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_persistence_calib.py": [
                        [
                            "@@ -65,6 +65,33 @@ def defineSpecificProgramOptions():\n \n     return parser\n \n+def orderInputList(inputFilesList, config, is_file_flag):\n+    # list_flats : list of dark exposures to order by OBS-DATE\n+    # config : config.cfg file produced by VIS_xml_in\n+    # is_file_flag : bool, true if list_flats is a list of flags, false otherwise\n+    splittor = \".fits\"\n+    if is_file_flag:\n+        splittor = \".flag\"\n+\n+    # dictionnary {FILENAME: DATE}\n+    dateFile_dict = {}\n+\n+    # Final ordered list\n+    fileList = list()\n+\n+    for elmt in inputFilesList:\n+        # removing _sa_bs_por_ge.00x to get the name in the config file\n+        file_in_config = elmt.split(splittor)[0] + \".fits\"\n+        dateObs = config.get(file_in_config, \"DATE-OBS\")\n+\n+        if elmt not in dateFile_dict:\n+            dateFile_dict[elmt] = dateObs\n+\n+    dateFile_list = sorted(dateFile_dict, key=dataFile_dict.get)\n+    for file_date in dateFile_list:\n+        fileList.append(file_date[0])\n+\n+    return fileList\n \n def mainMethod(args):\n     \"\"\"\n@@ -74,8 +101,6 @@ def mainMethod(args):\n     similar to a main (and it is why it is called mainMethod()).\n     \"\"\"\n \n-    logger = log.getLogger('VIS_persistence_calib')\n-\n     logger.info('#')\n     logger.info('# Entering %s mainMethod()' % __name__)\n     logger.info( \"# command line: \" + pipe_tools.get_erun_commandline())\n@@ -84,7 +109,7 @@ def mainMethod(args):\n \n     # Define variables\n     workdir              = args.workdir\n-    config_filename      = os.path.join( workdir, args.config_filename )\n+    config_filename      = os.path.join( workdir, args.config)\n     exposure_list        = os.path.join( args.workdir, args.exposure_list)\n     flag_list            = os.path.join( workdir, args.flag_list)\n     dpdcalib_persistence = os.path.join( workdir, args.dpdcalib_persistence )\n@@ -117,6 +142,10 @@ def mainMethod(args):\n       if list_flg_filename[-1] != item_flg[:-4]:\n         list_flg_filename.append(item_flg[:-4])\n \n+    # Order the input exposures and flags by OBS-DATE\n+    list_data_filename = orderInputList(list_data_filename, config, False)\n+    list_flg_filename  = orderInputList(list_flg_filename,  config, True)\n+\n     persistence_model_file = \"\"\n     for ext in range(nquad):\n         logger.info (\"==>Processing quadrant %s\", ext)\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_process_bias_quad.py": [
                        [
                            "@@ -56,8 +56,11 @@ def defineSpecificProgramOptions():\n     parser.add_argument('--quadrant_list', type=str,\n                         help='list of quadrants to process', dest='quadrant_list')\n     parser.add_argument('--output_quadrant_data', type=str,\n-                        help='output quadrant', dest='output_quadrant_data')\n-\n+                        help='output quadrant data', dest='output_quadrant_data')\n+    parser.add_argument('--output_quadrant_stdev', type=str,\n+                        help='output quadrant stdev', dest='output_quadrant_stdev')\n+    parser.add_argument('--output_quadrant_count', type=str,\n+                        help='output quadrant count', dest='output_quadrant_count')\n     return parser\n \n def mainMethod(args):\n@@ -81,6 +84,8 @@ def mainMethod(args):\n     flag_list            = os.path.join( workdir, args.flag_list )\n     quadrant_list        = os.path.join( workdir, args.quadrant_list )\n     output_quadrant_data = os.path.join( workdir, args.output_quadrant_data )\n+    output_quadrant_stdev = os.path.join( workdir, args.output_quadrant_stdev )\n+    output_quadrant_count = os.path.join( workdir, args.output_quadrant_count )\n \n     # Check that configuration file exists\n     if os.path.isfile(config_filename) == False:\n@@ -94,7 +99,7 @@ def mainMethod(args):\n     config.read (config_filename)\n \n     # Read parameters from config file\n-    masterbias_basename = config.get('MasterBias', 'masterbiasBasename')    \n+    masterbias_basename = config.get('MasterBias', 'masterbiasBasename')\n \n     # Read the list of quadrants to process\n     quadrant_list = load_list_from_file(quadrant_list)\n@@ -103,6 +108,8 @@ def mainMethod(args):\n     heap_flg_list = load_list_from_file(flag_list)\n \n     output_quadrant_data_list = []\n+    output_quadrant_stdev_list = []\n+    output_quadrant_count_list = []\n     for ext in quadrant_list:\n         logger.info (\"==>Processing quadrant %s\", ext)\n         # pickup the individual exposure filename from the input json list\n@@ -110,18 +117,27 @@ def mainMethod(args):\n         detrended_quadrant_list = [os.path.join( workdir,  filename) for filename in heap_list if (heap_list[0].split(\".fits\")[1][:-3] + ext) in filename]\n         inflag_quadrant_list = [os.path.join( workdir,  filename) for filename in heap_flg_list if (heap_flg_list[0].split(\".fits\")[1][:-3] + ext) in filename]\n         \n-        output_master_file  = os.path.join( workdir, masterbias_basename + '.' + ext)\n+        output_master_file = os.path.join( workdir, masterbias_basename + '.' + ext)\n+        output_stdev_file  = os.path.join( workdir, masterbias_basename.replace('.fits','.stdev.fits') + '.' + ext)\n+        output_count_file  = os.path.join( workdir, masterbias_basename.replace('.fits','.count.fits') + '.' + ext)\n+\n         # Create the master bias quadrant\n         # -------------------------------\n         bias_cal_io.file_layer_entry_point(detrended_quadrant_list,\n-                                       config_filename,\n-                                       output_master_file,\n-                                       in_flagmaps=inflag_quadrant_list)\n+                                           config_filename,\n+                                           output_master_file,\n+                                           in_flagmaps=inflag_quadrant_list,\n+                                           output_stdev_file=output_stdev_file,\n+                                           output_count_file=output_count_file)\n         output_quadrant_data_list.append(masterbias_basename + '.' + ext)\n+        output_quadrant_stdev_list.append(masterbias_basename.replace('.fits','.stdev.fits') + '.' + ext)\n+        output_quadrant_count_list.append(masterbias_basename.replace('.fits','.count.fits') + '.' + ext)\n \n     # Create the file specified by --output_quadrant, containing the list of\n     # master bias quadrants created (relative to workdir)\n     write_json(output_quadrant_data_list, output_quadrant_data)\n+    write_json(output_quadrant_stdev_list, output_quadrant_stdev)\n+    write_json(output_quadrant_count_list, output_quadrant_count)\n \n     logger.info( \"#\")\n     logger.info( \"# Exiting %s mainMethod()\", __name__)\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_process_dark_quad.py": [
                        [
                            "@@ -113,7 +113,7 @@ def mainMethod(args):\n         inflag_quadrant_list = [os.path.join( workdir,  filename) for filename in heap_flg_list if (heap_flg_list[0].split(\".fits\")[1][:-3] + ext) in filename]       \n \n         output_master_file  = os.path.join( workdir, masterdark_basename + '.' + ext)\n-        dark_cal_io.file_layer_entry_point(detrended_quadrant_list, output_master_file, in_flagmaps=inflag_quadrant_list)\n+        dark_cal_io.file_layer_entry_point(detrended_quadrant_list, config_filename, output_master_file, in_flagmaps=inflag_quadrant_list)\n         output_quadrant_data_list.append(masterdark_basename + '.' + ext)\n         output_quadrant_flag_list.append(masterdark_basename + '.' + ext + '.flagmap.fits')\n \n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_process_flat_quad.py": [
                        [
                            "@@ -60,6 +60,7 @@ def defineSpecificProgramOptions():\n     parser.add_argument('--output_quadrant_data', help='output quadrant')\n     parser.add_argument('--output_quadrant_flag', help='output quadrant flag')\n     parser.add_argument('--output_led_surface',   help='output calibration lamp profile')\n+    parser.add_argument('--output_avgflat', help='output quadrant average flat')\n \n     return parser\n \n@@ -87,6 +88,7 @@ def mainMethod(args):\n     output_quadrant_data = os.path.join( workdir, args.output_quadrant_data )\n     output_quadrant_flag = os.path.join( workdir, args.output_quadrant_flag )\n     output_led_surface   = os.path.join( workdir, args.output_led_surface )\n+    output_avgflat = os.path.join( workdir, args.output_avgflat )\n \n     # Check that configuration file exists\n     if ( os.path.isfile(config_filename) == False ):\n@@ -99,7 +101,6 @@ def mainMethod(args):\n     # Open the configuration file\n     config.read (config_filename)\n \n-\n     # Read parameters from config file\n     masterflat_basename = config.get('MasterFlat', 'masterflatBasename')\n \n@@ -112,6 +113,7 @@ def mainMethod(args):\n     output_quadrant_data_list = []\n     output_quadrant_flag_list = []\n     output_led_surface_list   = []\n+    output_avgflat_list = []\n \n     for ext in quadrant_list:\n         logger.info (\"==>Processing quadrant %s\", ext)\n@@ -122,21 +124,24 @@ def mainMethod(args):\n \n         output_master_file  = os.path.join( workdir, masterflat_basename + '.' + ext)\n         output_surface_file = os.path.join( workdir, 'LedProfile.fits.' + ext)\n-        tmpdir = os.path.dirname(output_quadrant_data)\n+        output_avgflat_file = os.path.join( workdir, masterflat_basename.replace('.fits','.avgflat.fits') + '.' + ext)\n         prnu_cal_io.file_layer_entry_point( detrended_quadrant_list,\n-                                            tmpdir,\n+                                            None,\n                                             output_master_file,\n                                             output_surface_file,\n-                                            in_flagmaps=inflag_quadrant_list)\n+                                            in_flagmaps=inflag_quadrant_list,\n+                                            output_avg_file=output_avgflat_file)\n         output_quadrant_data_list.append( os.path.basename( output_master_file))\n         output_quadrant_flag_list.append( masterflat_basename + '.' + ext + '.flagmap.fits')\n-        output_led_surface_list.append(   os.path.basename( output_surface_file))\n+        output_led_surface_list.append( os.path.basename( output_surface_file))\n+        output_avgflat_list.append(masterflat_basename.replace('.fits','.avgflat.fits') + '.' + ext)\n \n     # Create the file specified by --output_quadrant, containing the list of\n     # master flat quadrants created (relative to workdir)\n     write_json(output_quadrant_data_list, output_quadrant_data)\n     write_json(output_quadrant_flag_list, output_quadrant_flag)\n     write_json(output_led_surface_list,   output_led_surface)\n+    write_json(output_avgflat_list,       output_avgflat)\n \n     logger.info( \"#\")\n     logger.info( \"# Exiting %s mainMethod()\", __name__)\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_science_xml_out.py": [
                        [
                            "@@ -296,7 +296,6 @@ def mainMethod(args):\n     #loop through the pe_runinfo_dict.\n     dpdanalysis_list = []\n     perun_names_processed = []\n-    files_to_publish = list()\n \n     # we need to keep all the raw_frame_ids because the last DPD created is a DpdAnalysisResults\n     # for the whole pipeline and we give it the first raw_frame_id as a reference\n@@ -360,10 +359,12 @@ def mainMethod(args):\n         if ZIP_OUTPUTS:\n           # Background\n           zip_tools.zip_file( os.path.join( workdir, background),\n-                              os.path.join( datadir, euc_bkg_file))\n+                              os.path.join( datadir, euc_bkg_file),\n+                              options=\"\")\n           # Weightmap\n           zip_tools.zip_file( os.path.join( workdir, weightmap),\n-                              os.path.join( datadir, euc_wgt_file))\n+                              os.path.join( datadir, euc_wgt_file),\n+                              options=\"\")\n         else:\n           # Background\n           FromToXML.failsafe_symlink( os.path.join( workdir, background),\n@@ -493,46 +494,23 @@ def mainMethod(args):\n         #config.set( exp_section, \"DpdVisAnalysisResults_DATA\", peCSVFileName)\n \n \n-\n-\n-\n-    # write final config.cfg to DIAGDIR and link it in DATADIR\n-    out_config_filename = visdiags.diagdir_filename( args.logdir, visdiags.config_filename())\n-    with open( out_config_filename, 'w') as fd:\n-      config.write( fd)\n-    visdiags.link_diags_to_data( args.logdir, out_config_filename)\n-    files_to_publish.append( out_config_filename)\n-\n-    # create pipeline profiling report HTML\n-    profiling_filename = visdiags.diagdir_filename( args.logdir, visdiags.piperun_filename())\n-    write_pipeline_profiling_DQC( args.workdir, profiling_filename)\n-    visdiags.link_diags_to_data( args.logdir, profiling_filename)\n-    files_to_publish.append( profiling_filename)\n-\n     # write pipeline HTML diagnostic report\n     try:\n-      files_to_publish += visdiags.pipeline_diagnostic_html( config, args.logdir)\n+      pipeline_dp = FromToXML.create_analysis_dp( result_passed=True,\n+                                                  aux_file=None,\n+                                                  raw_frame_id=raw_frame_ids[0])\n+      visdiags.pipeline_diagnostic_html( config, args.logdir, pipeline_dp)\n+      # save the pipeline DpdAnalysisResults to XML\n+      pipeline_dqc_xml = os.path.join( science_xml_out_dir, \"DpdVisAnalysis_pipediags.xml\")\n+      DmUtils.save_product_metadata( pipeline_dp, pipeline_dqc_xml)\n+      # and add DpdAnalysisResults XML to output data products list\n+      dpdanalysis_list.append( pipeline_dqc_xml)\n     except Exception as e:\n-      logger.info( f\"!!! caught exception '{e}' in VIS_Tasks_Common.VIS_diagnostics.pipeline_diagnostic_html(), ignoring....\")\n-\n-    # create an empty DpdVisAnalysisResults to store pipeline HTML report pages\n-    pipeline_dp = FromToXML.create_analysis_dp( result_passed=True,\n-                                                aux_file=None,\n-                                                raw_frame_id=raw_frame_ids[0])\n-    # and add the diagnostic files\n-    files_to_publish = set( [os.path.basename( filename) for filename in files_to_publish])\n-    for filename in files_to_publish:\n-      FromToXML.add_generic_parameter_file( pipeline_dp, filename, filename)\n-    # save the pipeline DpdAnalysisResults to XML\n-    pipeline_dqc_xml = os.path.join( science_xml_out_dir, \"DpdVisAnalysis_pipediags.xml\")\n-    DmUtils.save_product_metadata( pipeline_dp, pipeline_dqc_xml)\n-    # and add DpdAnalysisResults XML to output data products list\n-    dpdanalysis_list.append( pipeline_dqc_xml)\n-\n+      logger.info( f\"!!! caught exception '{e}' when generating diagnostics HTML page, ignoring....\")\n \n+    # convert PERI files to ASCII table\n     comments_final_dict = {}\n     peconverted_final_statKeys = {}\n-\n     peri_files_exp = glob.glob(workdir + \"*peri*.json\")\n     for perun_file in peri_files_exp:\n         if perun_file not in perun_names_processed and  peri.is_peri_file(perun_file):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_tp_calib.py": [
                        [
                            "@@ -25,29 +25,28 @@\n \n \"\"\"\n \n-import logging\n from argparse import ArgumentParser\n+from datetime import datetime, timedelta\n+from functools import partial\n+from logging import getLogger\n from pathlib import Path\n \n-from fitsio import read_header\n-\n-import ElementsKernel.Logging as log\n-from ST_DataModelBindings.bas import ppr_stub\n-from ST_DM_DmUtils.DmUtils import save_product_metadata\n-from ST_DM_FilenameProvider.FilenameProvider import FileNameProvider\n+from fitsio import FITSHDR, read_header\n \n from VIS_PyLibrary_Common import pipe_tools\n from VIS_Tasks_Common.FromToXML import (\n-    create_DpdVisTrapPumpingModel,\n     load_list_from_file,\n+    read_config,\n+    write_json,\n )\n \n from VIS_TrapPumping.VIS_TrapPumping_IO import (\n     file_layer_entry_point,\n-    is_stp_hdr,\n+    get_tp_pshcy,\n )\n+from VIS_TrapPumping.VIS_TrapPumping_IO.metadata import Metadata\n \n-logger = logging.getLogger( __name__)\n+logger = getLogger(__name__)\n \n \n def defineSpecificProgramOptions():\n@@ -65,22 +64,65 @@ def defineSpecificProgramOptions():\n     parser.add_argument(\n         \"--logdir\", help=\"path to the logdir, relative to the workdir\"\n     )\n+    parser.add_argument(\"--config\", help=\"configuration file path\")\n     # Input\n     parser.add_argument(\n         \"--quad_chunk\",\n         help=\"path of input listfile of one chunk of TP files for single quad\",\n     )\n+    parser.add_argument(\n+        \"--metadata_json\", help=\"path to TP metadata JSON file\"\n+    )\n \n     # Output\n-    parser.add_argument(\"--tp_params\", help=\"Output XML filepath\")\n+    parser.add_argument(\"--tp_params_quad\", help=\"output for single quad\")\n \n     return parser\n \n \n-def get_ig1_str(ig1: float) -> str:\n-    int_part = str(int(ig1))\n-    frac_part = int(ig1 % 1 * 100)\n-    return int_part if frac_part == 0 else f\"{int_part}P{frac_part}\"\n+def filter_input_files(input_files: list[Path]) -> list[Path]:\n+    \"\"\"\n+    For each set of VTP frames, a reference CI frame is taken before the first\n+    TP frame (with TOI 1e-5 sec). For each shuffling mode, these all have the\n+    same DM parameters, so they are all passed into the pipeline, and we must\n+    filter for the one closest in time to the first TP frame.\n+    \"\"\"\n+    file_hdr_pairs = [(f, read_header(f)) for f in input_files]\n+    ci_pairs = filter(\n+        lambda pair: get_tp_pshcy(pair[1]) in (0, 1), file_hdr_pairs\n+    )\n+    tp_pairs = list(\n+        filter(\n+            lambda pair: get_tp_pshcy(pair[1]) not in (0, 1), file_hdr_pairs\n+        )\n+    )\n+\n+    tp1_hdr = tp_pairs[0][1]  # primary header of first TP frame\n+    tp_date_obs = get_date_obs_dt(tp1_hdr)\n+\n+    # Correct CI frame is the one with minimum timedelta from the first TP\n+    # frame.\n+    ci_file = min(ci_pairs, key=partial(get_date_obs_delta, tp_date_obs))[0]\n+\n+    logger.info(f\"Selected CI frame {ci_file}\")\n+\n+    # Join the CI file and TP files back together.\n+    return [ci_file] + [pair[0] for pair in tp_pairs]\n+\n+\n+def get_date_obs_delta(\n+    tp_date_obs: datetime, ci_pair: tuple[Path, FITSHDR]\n+) -> timedelta:\n+    \"\"\"\n+    Finds the absolute timedelta between a CI frame 'DATE-OBS' and that of the\n+    first TP frame.\n+    \"\"\"\n+    ci_date_obs = get_date_obs_dt(ci_pair[1])\n+    return abs(tp_date_obs - ci_date_obs)\n+\n+\n+def get_date_obs_dt(prim_hdr: FITSHDR) -> datetime:\n+    return datetime.fromisoformat(prim_hdr[\"DATE-OBS\"].split(\"Z\")[0])\n \n \n def mainMethod(args):\n@@ -100,47 +142,28 @@ def mainMethod(args):\n     input_files = list(\n         map(Path, load_list_from_file(str(workdir / args.quad_chunk)))\n     )\n+    metadata = Metadata.from_json(workdir / args.metadata_json)\n+    logger.info(\"Using metadata: %s\", metadata)\n \n-    ## Build metadata for filename instance ID and data product\n-    # Files are sorted so last file is always a trap pumped frame\n-    prim_hdr = read_header(input_files[-1])\n-    serial = is_stp_hdr(prim_hdr)\n-    vtp_stp = \"STP\" if serial else \"VTP\"\n-    shuff_mode = prim_hdr[\"TP_SSHM1\"] if serial else prim_hdr[\"TP_PSHM\"]\n-    ig1 = prim_hdr[\"CI_IG1\"]\n-    quad_name = read_header(input_files[-1], 1)[\"EXTNAME\"]\n-\n-    tp_param_csv = FileNameProvider().get_allowed_filename(\n-        processing_function=\"VIS\",\n-        type_name=\"TRAP-PUMPING\",\n-        instance_id=f\"{vtp_stp}_SHM-{shuff_mode}_IG1-{get_ig1_str(ig1)}_QUAD-{quad_name}\",\n-        extension=\".csv\",\n-    )\n+    serial = metadata.serial\n+    if not serial:\n+        input_files = filter_input_files(input_files)\n+\n+    config = read_config(str(workdir / args.config))[\"TrapPumping\"]\n+    config_dict = {\n+        # Default true for VTP, false for serial until included in base config.\n+        # TODO: CR masking for STP\n+        \"mask_crs\": config.getboolean(\"mask_crs\", False if serial else True),\n+    }\n \n-    file_layer_entry_point(input_files, workdir / \"data\" / tp_param_csv)\n-\n-    tp_param_xml = workdir / args.tp_params\n-    logger.info(\"Writing TP params XML file to %s\", tp_param_xml)\n-    data_product = create_DpdVisTrapPumpingModel(tp_param_csv)\n-\n-    ## Add metadata to product in Parameters section\n-    data_product.Parameters = ppr_stub.genericKeyValueParameters.Factory(\n-        Parameter=[\n-            ppr_stub.genericKVParam.Factory(\n-                Key=\"trap_pumping_type\", StringValue=vtp_stp\n-            ),\n-            ppr_stub.genericKVParam.Factory(\n-                Key=\"shuffling_mode\", StringValue=shuff_mode\n-            ),\n-            ppr_stub.genericKVParam.Factory(\n-                Key=\"CI_IG1_voltage\", DoubleValue=ig1, Unit=\"V\"\n-            ),\n-            ppr_stub.genericKVParam.Factory(\n-                Key=\"quad_name\", StringValue=quad_name\n-            ),\n-        ]\n+    ext_hdr = read_header(input_files[-1], 1)\n+    tp_params_csv = workdir / f\"tp_params_quad_{ext_hdr['EXTNAME']}.csv\"\n+\n+    file_layer_entry_point(\n+        input_files, serial, config_dict, tp_params_csv, ext_hdr\n     )\n-    save_product_metadata(data_product, tp_param_xml)\n+\n+    write_json([str(tp_params_csv)], workdir / args.tp_params_quad)\n \n     logger.info(\"#\")\n     logger.info(\"# Exiting %s mainMethod()\", __name__)\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_tp_xml_out.py": [
                        [
                            "@@ -0,0 +1,207 @@\n+#\n+# Copyright (C) 2012-2020 Euclid Science Ground Segment\n+#\n+# This library is free software; you can redistribute it and/or modify it under\n+# the terms of the GNU Lesser General Public License as published by the Free\n+# Software Foundation; either version 3.0 of the License, or (at your option)\n+# any later version.\n+#\n+# This library is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+# FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+# details.\n+#\n+# You should have received a copy of the GNU Lesser General Public License\n+# along with this library; if not, write to the Free Software Foundation, Inc.,\n+# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+#\n+\n+\n+\"\"\"\n+:file: python/VIS_Tasks_M/VIS_tp_xml_out.py\n+\n+:date: 27/03/23\n+:author: mwander\n+\n+\"\"\"\n+\n+from argparse import ArgumentParser\n+from dateutil.parser import parse\n+from logging import getLogger\n+from pathlib import Path\n+from typing import Union\n+\n+from pandas import concat, read_csv\n+\n+from ST_DataModelBindings.dpd.vis.ppovalidation_stub import (\n+    DpdVisAnalysisResults,\n+)\n+from ST_DataModelBindings.dpd.vis.vistrappumpingresults_stub import (\n+    DpdVisTrapPumpingResults,\n+)\n+from ST_DataModelBindings.pro.le1.vis_stub import voltage\n+from ST_DataModelBindings.pro.vis_stub import visTrapPumpingData\n+from ST_DM_DmUtils.DmUtils import create_data_container, save_product_metadata\n+from ST_DM_FilenameProvider.FilenameProvider import FileNameProvider\n+\n+from VIS_PyLibrary_Common import pipe_tools\n+from VIS_PyLibrary_Common.zip_tools import tar_zip_files\n+from VIS_Tasks_Common.FromToXML import (\n+    add_quality_parameter_file,\n+    create_analysis_dp,\n+    create_qualityparams_fromlist,\n+    create_validity_range,\n+    create_visFileContainerDataContainer,\n+    load_list_from_file,\n+    vis_generic_header,\n+)\n+\n+from VIS_TrapPumping.VIS_TrapPumping_IO.metadata import Metadata\n+from VIS_TrapPumping.VIS_TrapPumping_IO.plotting import write_plots\n+from VIS_TrapPumping.VIS_TrapPumping_IO.qc_stats import convert_and_save_peri\n+\n+logger = getLogger(__name__)\n+FILENAME_PROVIDER = FileNameProvider()\n+\n+\n+def defineSpecificProgramOptions():\n+    \"\"\"\n+    @brief Allows to define the (command line and configuration file) options\n+    specific to this program\n+\n+    @details See the Elements documentation for more details.\n+    @return An  ArgumentParser.\n+    \"\"\"\n+\n+    parser = ArgumentParser()\n+\n+    parser.add_argument(\"--workdir\", help=\"absolute path to the workdir\")\n+    parser.add_argument(\n+        \"--logdir\", help=\"path to the logdir, relative to the workdir\"\n+    )\n+    # Input\n+    parser.add_argument(\n+        \"--tp_params_quad_list\",\n+        help=\"path of input listfile of TP params CSVs\",\n+    )\n+    parser.add_argument(\n+        \"--metadata_json\", help=\"path to TP metadata JSON file\"\n+    )\n+\n+    # Output\n+    parser.add_argument(\n+        \"--tp_params_xml\", help=\"DpdVisTrapPumpingResults product XML\"\n+    )\n+    parser.add_argument(\n+        \"--analysis_xml\", help=\"DpdVisAnalysisResults product XML\"\n+    )\n+\n+    return parser\n+\n+\n+def get_filename(\n+    instance_id: str, extension: str, type_prefix: str = \"\"\n+) -> str:\n+    return FILENAME_PROVIDER.get_allowed_filename(\n+        processing_function=\"VIS\",\n+        type_name=f\"{type_prefix}TRAP-PUMPING\",\n+        instance_id=instance_id,\n+        extension=extension,\n+    )\n+\n+\n+def create_data_product(\n+    tp_params_csv: str, metadata: Metadata\n+) -> DpdVisTrapPumpingResults:\n+    data_product = DpdVisTrapPumpingResults()\n+    data_product.Header = vis_generic_header(\"DpdVisTrapPumpingResults\")\n+\n+    data = visTrapPumpingData.Factory()\n+    data.ValidityRange = create_validity_range()\n+    data.DataContainer = [create_visFileContainerDataContainer(tp_params_csv)]\n+    data.VisProduct = \"DpdVisTrapPumpingResults\"\n+    data.TrapPumpingStatus = metadata.tp_type\n+    if metadata.serial:\n+        data.SerialTrapPumpingShufflingMode = metadata.shuff_mode\n+    else:\n+        data.ParallelTrapPumpingShufflingMode = metadata.shuff_mode\n+    data.ChargeInjectionGate1Voltage = voltage.Factory(\n+        Value=metadata.ig1_voltage, Unit=\"V\"\n+    )\n+\n+    data_product.Data = data\n+    return data_product\n+\n+\n+def write_tar_zip(in_files: list[Union[Path, str]], out_file: Path) -> None:\n+    tar_zip_files(\" \".join(map(str, in_files)), str(out_file), False)\n+\n+\n+def create_analysis_product(\n+    data_product, qc_stats_zip: str, qc_plots_zip: str\n+) -> DpdVisAnalysisResults:\n+    pe_date = parse(str(data_product.Header.CreationDate))\n+    analysis_product = create_analysis_dp(\n+        result_passed=True,  # dummy value for now\n+        aux_file=qc_stats_zip,\n+        analysis_id=pe_date.isoformat(),\n+    )\n+    analysis_product.Data.AnalysisResults.AnalysisFiles.Figures = (\n+        create_data_container(qc_plots_zip)\n+    )\n+    return analysis_product\n+\n+\n+def mainMethod(args):\n+    \"\"\"\n+    @brief The \"main\" method.\n+\n+    @details This method is the entry point to the program. In this sense, it is\n+    similar to a main (and it is why it is called mainMethod()).\n+    \"\"\"\n+    logger.info(\"#\")\n+    logger.info(\"# Entering %s mainMethod()\", __name__)\n+    logger.info(\"# command line: %s\", pipe_tools.get_erun_commandline())\n+    pipe_tools.log_task_environment(logger)\n+    logger.info(\"#\")\n+\n+    workdir = Path(args.workdir)\n+    data_dir = workdir / \"data\"\n+    quad_files = map(\n+        Path, load_list_from_file(str(workdir / args.tp_params_quad_list))\n+    )\n+\n+    quad_results = map(read_csv, quad_files)\n+    tp_params = concat(quad_results)\n+\n+    metadata = Metadata.from_json(workdir / args.metadata_json)\n+    instance_id = metadata.instance_id\n+    tp_params_csv = get_filename(instance_id, \".csv\")\n+    tp_params.to_csv(data_dir / tp_params_csv, index=False)\n+\n+    tp_params_xml = workdir / args.tp_params_xml\n+    logger.info(\"Writing TP params XML file to %s\", tp_params_xml)\n+    data_product = create_data_product(tp_params_csv, metadata)\n+\n+    qc_stats_paths = convert_and_save_peri(workdir)\n+    qc_stats_zip = get_filename(instance_id, \".tar.gz\", \"QC-STATS-\")\n+    write_tar_zip(qc_stats_paths, data_dir / qc_stats_zip)\n+\n+    qc_plots_paths = write_plots(tp_params, metadata, data_dir)\n+    qc_plots_zip = get_filename(instance_id, \".tar.gz\", \"QC-PLOTS-\")\n+    write_tar_zip(qc_plots_paths, data_dir / qc_plots_zip)\n+\n+    create_qualityparams_fromlist(\n+        data_product, None, qc_stats_zip, False, True\n+    )\n+    add_quality_parameter_file(data_product, qc_plots_zip)\n+    save_product_metadata(data_product, tp_params_xml)\n+\n+    analysis_product = create_analysis_product(\n+        data_product, qc_stats_zip, qc_plots_zip\n+    )\n+    save_product_metadata(analysis_product, workdir / args.analysis_xml)\n+\n+    logger.info(\"#\")\n+    logger.info(\"# Exiting %s mainMethod()\", __name__)\n+    logger.info(\"#\")\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_xml_in.py": [
                        [
                            "@@ -266,8 +266,6 @@ def convert_to_astromatic_ldac(table):\n \n def merge_catalogues( cat_xml_list, refcat_filename):\n \n-  logger.info( cat_xml_list)\n-\n   master_catalogue = None\n   for cat_xml_file in cat_xml_list:\n     # getting catalogue filename from XML file\n@@ -294,7 +292,8 @@ def merge_catalogues( cat_xml_list, refcat_filename):\n   hdulist = fits.HDUList( hdus=[fits.PrimaryHDU(), tablehdu])\n   hdulist.writeto( refcat_filename, overwrite=True)\n   hdulist.close()\n-  return\n+  # return source coordinates to overplot over exposure footprint\n+  return master_catalogue[\"RA\"], master_catalogue[\"DEC\"]\n \n \n def mainMethod(args):\n@@ -374,20 +373,20 @@ def mainMethod(args):\n     config.set( raw_frame_section, \"Header.CreationDate\",    dp.Header.CreationDate)\n     config.set( raw_frame_section, \"Data.ImgType.Category\",  dp.Data.ImgType.Category)\n     config.set( raw_frame_section, \"Data.ImgType.FirstType\", dp.Data.ImgType.FirstType)\n+    if dp.Data.ImgType.FirstType == \"FLAT\":\n+      for hkey in (\"CULEDMSK\", \"CULEDDUR\"):\n+        config.set( raw_frame_section, hkey, primhdr[hkey])\n+      for i in range (1,7):\n+        try:\n+          hkey = f\"LED{i}CURN\"\n+          config.set( raw_frame_section, hkey, primhdr[hkey])\n+        except:\n+          logger.info(f\"LED{i} is not active...\")\n \n   # save list of exposure FITS to process in JSON file\n   # sort the list for reproducibility and predictability, FITS filenames are different from XML filenames\n   FromToXML.write_json( sorted( rawframe_list), args.rawexp_list)\n \n-  # plot the raw_frame_list footprint in workdir/logs/diags and link file in workdir/data\n-  try: # failsafe mode\n-    footprint_filename = visdiags.diagdir_filename( args.logdir, visdiags.footprint_filename())\n-    VIS_plot_footprint.plot_explist_footprint( dss_filenames,\n-                       filename_out=footprint_filename)\n-    #visdiags.link_diags_to_data( args.logdir, footprint_filename)\n-  except Exception as e:\n-    logger.info( f\"!!! caught exception '{e}' in VIS_plot_footprint.py, skipping...\")\n-\n \n #---------------------------------------------------------------------------\n # handle custom initialisations for calibration pipelines\n@@ -398,6 +397,118 @@ def mainMethod(args):\n # when \"args.quadlists is not None\", it contains an output JSON file name\n # which must be filled by VIS_xml_in\n \n+#\n+# WARNING: the calibration_type test below only refers to the last DpdVisRawFrame read\n+#\n+\n+  if args.pipeline_name == \"VIS_MasterBias\":\n+    if calibration_type != \"BIAS\":\n+      raise Exception(\n+          f\"calibration type '{calibration_type}' does not match BIAS\"\n+      )\n+    job_max_quad = config.getint('MasterBias', 'QuadrantsPerJob')\n+    # prevent removing pre/overscan in the case of the masterbias pipeline\n+    config.set( 'General', 'RemovePreOverscan', 'False')\n+    # prevent the gain equalisation in the case of the masterbias pipeline\n+    config.remove_section('GainEqualisation')\n+    # prevent cosmic ray detections in the case of the masterbias pipeline\n+    config.set('General', 'FlagCosmics', 'False')\n+\n+  if args.pipeline_name == \"VIS_MasterDark\":\n+    if calibration_type != \"DARK\":\n+      raise Exception(\n+          f\"calibration type '{calibration_type}' does not match DARK\"\n+      )\n+    job_max_quad = config.getint('MasterDark', 'QuadrantsPerJob')\n+    # prevent the gain equalisation in the case of the masterdark pipeline\n+    config.remove_section('GainEqualisation')\n+    # prevent cosmic ray detections in the case of the masterdark pipeline\n+    config.set('General', 'FlagCosmics', 'False')\n+\n+  if args.pipeline_name == \"VIS_MasterFlat\":\n+    if calibration_type != \"FLAT\":\n+      raise Exception(\n+          f\"calibration type '{calibration_type}' does not match FLAT\"\n+      )\n+    job_max_quad = config.getint('MasterFlat', 'QuadrantsPerJob')\n+    # prevent the gain equalisation in the case of the masterflat pipeline\n+    config.remove_section('GainEqualisation')\n+    # prevent cosmic ray detections in the case of the masterflat pipeline\n+    config.set('General', 'FlagCosmics', 'False')\n+\n+  if args.pipeline_name == \"VIS_GainCalibration\":\n+    if calibration_type != \"FLAT\":\n+      raise Exception(\n+          f\"calibration type '{calibration_type}' does not match FLAT\"\n+      )\n+    job_max_quad = config.getint('MasterFlat', 'QuadrantsPerJob')\n+    # prevent the gain equalisation in the case of the masterflat pipeline\n+    config.remove_section('GainEqualisation')\n+    # prevent cosmic ray detections in the case of the masterflat pipeline\n+    config.set('General', 'FlagCosmics', 'False')\n+\n+  if args.pipeline_name == \"VIS_PTCNLCalibration\":\n+    if calibration_type != \"FLAT\":\n+      raise Exception(\n+          f\"calibration type '{calibration_type}' does not match FLAT\"\n+      )\n+    # job_max_quad = config.getint('MasterFlat', 'QuadrantsPerJob')\n+    # prevent the gain equalisation in the case of the masterflat pipeline\n+    config.remove_section('GainEqualisation')\n+    # prevent cosmic ray detections in the case of the masterflat pipeline\n+    # config.set('General', 'FlagCosmics', 'False')\n+\n+  if args.pipeline_name == \"VIS_NonLinCalibration\":\n+    if calibration_type != \"LINEARITY\":\n+      raise Exception(\n+          f\"calibration type '{calibration_type}' does not match LINEARITY\"\n+      )\n+    job_max_quad = config.getint('NLCalib', 'QuadrantsPerJob')\n+    # prevent the gain equalisation in the case of the non-linearity calibration pipeline\n+    config.remove_section('GainEqualisation')\n+\n+  if args.pipeline_name == \"VIS_AstrometryCalibration\":\n+    # disable unused photometry to avoid the need of a PSF model (#21938)\n+    config.set('General', 'Photometry', 'False')\n+\n+  if args.pipeline_name == \"VIS_XTalkCalibration\":\n+    # disable useless photometry to spare walltime\n+    config.set('General', 'Photometry', 'False')\n+\n+  if args.pipeline_name == \"VIS_CTICalibration\":\n+    if calibration_type != \"CHARGE_INJECTION\":\n+      raise Exception(\n+          f\"calibration type '{calibration_type}' does not match CHARGE_INJECTION\"\n+      )\n+    job_max_quad = 4\n+    # prevent the gain equalisation in the case of the CTI calibration pipeline\n+    config.set('General', 'RemovePreOverscan', 'False')\n+    config.set('General', 'FlagCosmics', 'False')\n+    config.remove_section('GainEqualisation')\n+\n+  if args.pipeline_name == \"VIS_CTIMasterCI\":\n+    if calibration_type != \"CHARGE_INJECTION\":\n+      raise Exception(\n+          f\"calibration type '{calibration_type}' does not match CHARGE_INJECTION\"\n+      )\n+    job_max_quad = 4\n+    # prevent the gain equalisation in the case of the CTI calibration pipeline\n+    config.set('General', 'RemovePreOverscan', 'False')\n+    config.set('General', 'FlagCosmics', 'False')\n+    config.remove_section('GainEqualisation')\n+\n+  if args.pipeline_name == \"VIS_TrapPumpingCalibration\":\n+    # https://euclid.roe.ac.uk/issues/21872#note-9\n+    if calibration_type not in (\"TRAP_PUMPING\", \"CHARGE_INJECTION\"):\n+      raise Exception(\n+          f\"calibration type '{calibration_type}' does not match TRAP_PUMPING \"\n+          \"or CHARGE_INJECTION\"\n+      )\n+    job_max_quad = config.getint('TrapPumping', 'QuadrantsPerJob')\n+    config.set( 'General', 'RemovePreOverscan', 'False')\n+    config.set('General', 'FlagCosmics', 'False')\n+    config.remove_section('GainEqualisation')\n+\n   if args.quadlists is not None:\n     # create the output list of quadrants to process by calibration pipelines\n     first_quad = config.get('General', 'FirstQuadrant')\n@@ -406,49 +517,6 @@ def mainMethod(args):\n     last_quad_num  = int( FPA_quadrant.quad_name_index( last_quad))\n     quad_list = [f\"{q:03d}\" for q in range( first_quad_num, last_quad_num+1)]\n \n-#\n-# WARNING: the calibration_category test below only refers to the last DpdVisRawFrame read\n-#\n-\n-    # get the number of quadrants to process per calibration job\n-    if calibration_category == \"CALIB\":\n-      if calibration_type == \"BIAS\":\n-        job_max_quad = config.getint('MasterBias', 'QuadrantsPerJob')\n-        # prevent removing pre/overscan in the case of the masterbias pipeline\n-        config.set( 'General', 'RemovePreOverscan', 'False')\n-        # prevent the gain equalisation in the case of the masterbias pipeline\n-        config.remove_section('GainEqualisation')\n-        # prevent cosmic ray detections in the case of the masterbias pipeline\n-        config.set('General', 'FlagCosmics', 'False')\n-      elif calibration_type == \"DARK\":\n-        job_max_quad = config.getint('MasterDark', 'QuadrantsPerJob')\n-        # prevent the gain equalisation in the case of the masterdark pipeline\n-        config.remove_section('GainEqualisation')\n-        # prevent cosmic ray detections in the case of the masterdark pipeline\n-        config.set('General', 'FlagCosmics', 'False')\n-      elif calibration_type == \"FLAT\":\n-        job_max_quad = config.getint('MasterFlat', 'QuadrantsPerJob')\n-        # prevent the gain equalisation in the case of the masterflat pipeline\n-        config.remove_section('GainEqualisation')\n-        # prevent cosmic ray detections in the case of the masterflat pipeline\n-        config.set('General', 'FlagCosmics', 'False')\n-      elif calibration_type == \"LINEARITY\":\n-        job_max_quad = config.getint('NLCalib', 'QuadrantsPerJob')\n-        # prevent the gain equalisation in the case of the masterbias/masterdark/masterflat pipeline\n-        config.remove_section('GainEqualisation')\n-      elif calibration_type == \"CHARGE_INJECTION\":\n-        job_max_quad = 4\n-        # prevent the gain equalisation in the case of the masterbias/masterdark/masterflat pipeline\n-        config.remove_section('GainEqualisation')\n-      elif calibration_type == \"TRAP_PUMPING\":\n-        job_max_quad = config.getint('TrapPumping', 'QuadrantsPerJob')\n-        # prevent the gain equalisation in the case of the masterbias/masterdark/masterflat pipeline\n-        config.remove_section('GainEqualisation')\n-      else:\n-        raise Exception(\n-          f\"calibration type '{calibration_type}' does not match BIAS, DARK, FLAT, LINEARITY or TRAP_PUMPING\"\n-        )\n-\n     # create a list of quadrants per calibration job\n     sliced_list = SliceList.slice_list( quad_list, job_max_quad)\n \n@@ -472,7 +540,8 @@ def mainMethod(args):\n       flagmap_filename = FromToXML.get_xml_data_file_list( xml_file)[0]\n       dp = DmUtils.read_product_metadata( xml_file)\n       pointing_id = int( dp.Data.ObservationSequence.PointingId)\n-      objmask_cfg_section = f\"object_mask_PointingId-{pointing_id}\"\n+      obs_id      = int( dp.Data.ObservationSequence.ObservationId)\n+      objmask_cfg_section = f\"object_mask_ObsId-{obs_id}-PointingId-{pointing_id}\"\n       config.add_section( objmask_cfg_section)\n       config.set( objmask_cfg_section, \"flagmap_XML\",  os.path.basename( xml_file))\n       config.set( objmask_cfg_section, \"flagmap_FITS\", flagmap_filename)\n@@ -519,7 +588,7 @@ def mainMethod(args):\n \n   # Retrieve the two cti model filenames from a pair of DpdVisFileContainer XML files\n   cti_xml_list = FromToXML.load_list_from_file( args.cti_model)\n-  if len( cti_xml_list) == 2:\n+  if len( cti_xml_list) > 0:\n     cti_datafiles = sorted( FromToXML.get_xml_data_file_list( cti_xml_list[0]))\n     assert cti_datafiles[0].startswith( \"cti_clocker\")\n     assert cti_datafiles[1].startswith( \"cti_model\")\n@@ -549,8 +618,10 @@ def mainMethod(args):\n   cat_xml_list = FromToXML.load_list_from_file( args.ref_catalogues)\n   if len( cat_xml_list) > 0:\n     refcat_filename = os.path.join( science_xml_in_dir, 'Master_Ref_Cat.fits')\n-    merge_catalogues( cat_xml_list, refcat_filename)\n+    cat_ra, cat_dec = merge_catalogues( cat_xml_list, refcat_filename)\n     config.set( \"General\", \"star_catalogue\", refcat_filename)\n+  else:\n+    cat_ra = cat_dec = None\n \n   # put other \"standard\" model file names in config CalibDataProducts section\n   put_model_filename_in_config( config, args.zero_point,     \"zero_point\")\n@@ -569,6 +640,17 @@ def mainMethod(args):\n   with open( args.piperun_config, 'w') as fd:\n     config.write( fd)\n \n+  # plot the raw_frame_list footprint in workdir/logs/diags and link file in workdir/data\n+  try: # failsafe mode\n+    footprint_filename = visdiags.diagdir_filename( args.logdir, visdiags.footprint_filename())\n+    VIS_plot_footprint.plot_explist_footprint( dss_filenames,\n+                       cat_ra=cat_ra,\n+                       cat_dec=cat_dec,\n+                       filename_out=footprint_filename)\n+    #visdiags.link_diags_to_data( args.logdir, footprint_filename)\n+  except Exception as e:\n+    logger.info( f\"!!! caught exception '{e}' in VIS_plot_footprint.py, skipping...\")\n+\n   # create empty diagnostics HTML page which will get filled as pipeline runs\n   try:\n     visdiags.pipeline_diagnostic_html( config, args.logdir)\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ],
                        [
                            "@@ -436,6 +436,17 @@ def mainMethod(args):\n     # prevent cosmic ray detections in the case of the masterflat pipeline\n     config.set('General', 'FlagCosmics', 'False')\n \n+  if args.pipeline_name == \"VIS_GainCalibration\":\n+    if calibration_type != \"FLAT\":\n+      raise Exception(\n+          f\"calibration type '{calibration_type}' does not match FLAT\"\n+      )\n+    job_max_quad = config.getint('MasterFlat', 'QuadrantsPerJob')\n+    # prevent the gain equalisation in the case of the masterflat pipeline\n+    config.remove_section('GainEqualisation')\n+    # prevent cosmic ray detections in the case of the masterflat pipeline\n+    config.set('General', 'FlagCosmics', 'False')\n+\n   if args.pipeline_name == \"VIS_PTCNLCalibration\":\n     if calibration_type != \"FLAT\":\n       raise Exception(\n@@ -609,6 +620,8 @@ def mainMethod(args):\n     refcat_filename = os.path.join( science_xml_in_dir, 'Master_Ref_Cat.fits')\n     cat_ra, cat_dec = merge_catalogues( cat_xml_list, refcat_filename)\n     config.set( \"General\", \"star_catalogue\", refcat_filename)\n+  else:\n+    cat_ra = cat_dec = None\n \n   # put other \"standard\" model file names in config CalibDataProducts section\n   put_model_filename_in_config( config, args.zero_point,     \"zero_point\")\n",
                            "Merge branch 'release-13.0' into develop",
                            "Olivier Herent",
                            "2023-07-25T13:26:50.000+00:00",
                            "f89261c60895e301a2a54a1af1a99bbfd3032f2f"
                        ],
                        [
                            "@@ -436,6 +436,17 @@ def mainMethod(args):\n     # prevent cosmic ray detections in the case of the masterflat pipeline\n     config.set('General', 'FlagCosmics', 'False')\n \n+  if args.pipeline_name == \"VIS_GainCalibration\":\n+    if calibration_type != \"FLAT\":\n+      raise Exception(\n+          f\"calibration type '{calibration_type}' does not match FLAT\"\n+      )\n+    job_max_quad = config.getint('MasterFlat', 'QuadrantsPerJob')\n+    # prevent the gain equalisation in the case of the masterflat pipeline\n+    config.remove_section('GainEqualisation')\n+    # prevent cosmic ray detections in the case of the masterflat pipeline\n+    config.set('General', 'FlagCosmics', 'False')\n+\n   if args.pipeline_name == \"VIS_PTCNLCalibration\":\n     if calibration_type != \"FLAT\":\n       raise Exception(\n",
                            "Merge branch 'feature-gain_update' into 'release-13.0'",
                            "Olivier Herent",
                            "2023-07-25T13:21:22.000+00:00",
                            "6410b14e9f212e66175eecf051557b34e220dbfc"
                        ],
                        [
                            "@@ -436,6 +436,17 @@ def mainMethod(args):\n     # prevent cosmic ray detections in the case of the masterflat pipeline\n     config.set('General', 'FlagCosmics', 'False')\n \n+  if args.pipeline_name == \"VIS_GainCalibration\":\n+    if calibration_type != \"FLAT\":\n+      raise Exception(\n+          f\"calibration type '{calibration_type}' does not match FLAT\"\n+      )\n+    job_max_quad = config.getint('MasterFlat', 'QuadrantsPerJob')\n+    # prevent the gain equalisation in the case of the masterflat pipeline\n+    config.remove_section('GainEqualisation')\n+    # prevent cosmic ray detections in the case of the masterflat pipeline\n+    config.set('General', 'FlagCosmics', 'False')\n+\n   if args.pipeline_name == \"VIS_PTCNLCalibration\":\n     if calibration_type != \"FLAT\":\n       raise Exception(\n",
                            "add Gain calibration section to setup the activation of specific PE correction for the gain calibration pipeline",
                            "Olivier Herent",
                            "2023-07-25T12:32:22.000+00:00",
                            "66f7a8dfe2ff9b974ad8d54baac165b75b2e603c"
                        ],
                        [
                            "@@ -609,6 +609,8 @@ def mainMethod(args):\n     refcat_filename = os.path.join( science_xml_in_dir, 'Master_Ref_Cat.fits')\n     cat_ra, cat_dec = merge_catalogues( cat_xml_list, refcat_filename)\n     config.set( \"General\", \"star_catalogue\", refcat_filename)\n+  else:\n+    cat_ra = cat_dec = None\n \n   # put other \"standard\" model file names in config CalibDataProducts section\n   put_model_filename_in_config( config, args.zero_point,     \"zero_point\")\n",
                            "Merge branch 'hotfix_22894_nl-sextractor' into 'release-13.0'",
                            "Catherine Grenet",
                            "2023-07-25T09:50:39.000+00:00",
                            "d4fe51539cd5b6809fa36057f36fa6e1d419d3ce"
                        ]
                    ],
                    "VIS_Tasks_M/tests/python/ScienceXMLIn_test.py": [
                        [
                            "@@ -3,7 +3,7 @@\n @date 02/17/16\n @author user\n \"\"\"\n-import py.test\n+import pytest\n import VIS_Tasks_M.VIS_xml_in\n import ElementsKernel.Logging as elog\n import glob,os;\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/tests/python/ScienceXMLOut_test.py": [
                        [
                            "@@ -3,7 +3,7 @@\n @date 02/17/16\n @author user\n \"\"\"\n-import py.test\n+import pytest\n import VIS_Tasks_M.VIS_science_xml_out\n \n \n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/tests/python/VIS_FlagObjects_xml_out_test.py": [
                        [
                            "@@ -1,6 +1,6 @@\n # just test syntax with import\n \n-import py.test\n+import pytest\n import VIS_Tasks_M.VIS_FlagObjects_xml_out\n \n class TestVIS_FlagObjects_xml_out(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/tests/python/VIS_LargeFlat_calib_test.py": [
                        [
                            "@@ -3,7 +3,7 @@\n @date 01/03/21\n @author user\n \"\"\"\n-import py.test\n+import pytest\n import VIS_Tasks_M.VIS_LargeFlat_calib\n \n class TestVIS_LargeFlat_calib(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/tests/python/VIS_PSF_calib_test.py": [
                        [
                            "@@ -3,7 +3,7 @@\n @date 01/03/21\n @author user\n \"\"\"\n-import py.test\n+import pytest\n import VIS_Tasks_M.VIS_PSF_calib\n \n class TestVIS_PSF_calib(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/tests/python/VIS_gather_ccd_test.py": [
                        [
                            "@@ -3,7 +3,7 @@\n @date 01/03/21\n @author user\n \"\"\"\n-import py.test\n+import pytest\n import VIS_Tasks_M.VIS_gather_ccd\n \n class TestVIS_gather_ccd(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/tests/python/VIS_process_astro_field_test.py": [
                        [
                            "@@ -3,7 +3,7 @@\n @date 08/02/21\n @author user\n \"\"\"\n-import py.test\n+import pytest\n import VIS_Tasks_M.VIS_process_astro_field\n \n class TestVIS_process_astro_field(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/tests/python/VIS_process_bias_quad_test.py": [
                        [
                            "@@ -3,7 +3,7 @@\n @date 02/17/16\n @author user\n \"\"\"\n-import py.test\n+import pytest\n import VIS_Tasks_M.VIS_process_bias_quad\n \n class TestVIS_process_bias_quad(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/tests/python/VIS_process_dark_quad_test.py": [
                        [
                            "@@ -3,7 +3,7 @@\n @date 01/03/21\n @author user\n \"\"\"\n-import py.test\n+import pytest\n import VIS_Tasks_M.VIS_process_dark_quad\n \n class TestVIS_process_dark_quad(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/tests/python/VIS_process_extract_exp_test.py": [
                        [
                            "@@ -3,7 +3,7 @@\n @date 01/03/21\n @author user\n \"\"\"\n-import py.test\n+import pytest\n import VIS_Tasks_M.VIS_process_extract_exp\n \n class TestVIS_process_extract_exp(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/tests/python/VIS_process_flat_quad_test.py": [
                        [
                            "@@ -3,7 +3,7 @@\n @date 02/17/16\n @author user\n \"\"\"\n-import py.test\n+import pytest\n import VIS_Tasks_M.VIS_process_flat_quad\n \n class TestVIS_process_flat_quad(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/tests/python/VIS_process_photo_exp_test.py": [
                        [
                            "@@ -3,7 +3,7 @@\n @date 01/03/21\n @author user\n \"\"\"\n-import py.test\n+import pytest\n import VIS_Tasks_M.VIS_process_photo_exp\n \n class TestVIS_process_photo_exp(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/tests/python/VIS_process_quad_test.py": [
                        [
                            "@@ -3,7 +3,7 @@\n @date 02/17/16\n @author user\n \"\"\"\n-import py.test\n+import pytest\n import VIS_Tasks_M.VIS_process_quad\n \n class TestVIS_process_quad(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/tests/python/VIS_quad_to_fpa_test.py": [
                        [
                            "@@ -3,7 +3,7 @@\n @date 02/17/16\n @author user\n \"\"\"\n-import py.test\n+import pytest\n import VIS_Tasks_M.VIS_quad_to_fpa\n \n class TestVIS_quad_to_fpa(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/python/VIS_TrapPumping/VIS_TrapPumping_Analysis/config.py": [
                        [
                            "@@ -0,0 +1,11 @@\n+from dataclasses import dataclass\n+\n+\n+@dataclass(frozen=True)\n+class AnalysisConfig:\n+    sigma: float = 20\n+    nsigma: int = 5\n+    mask_crs: bool = False\n+    nsigma_cr_adjust: int = 2\n+    cr_mask_limit: float = 0.1\n+    processes: int = 1\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/python/VIS_TrapPumping/VIS_TrapPumping_Analysis/data.py": [
                        [
                            "@@ -1,74 +1,79 @@\n from __future__ import annotations\n+from collections.abc import Iterable\n from dataclasses import dataclass\n from typing import Optional\n \n import numpy as np\n+from astropy.stats import sigma_clip\n from numpy import ndarray\n \n \n @dataclass(frozen=True)\n class Data:\n-    im_stack: ndarray\n+    im_cube: ndarray\n+    im_region: tuple[slice, slice]\n     clock: Clock\n \n     def __post_init__(self) -> None:\n-        nimages = self.im_stack.shape[0]\n+        nimages = self.im_cube.shape[0]\n         ntimes = self.clock.t_var.shape[0]\n         if nimages != ntimes:\n             raise ValueError(\n-                f\"Number of images in stack does not match number of tph \"\n+                f\"Number of images in cube does not match number of tph \"\n                 f\"values provided. Images: {nimages}, tphs: {ntimes}.\"\n             )\n \n     @classmethod\n     def pre_process(\n         cls,\n-        frame_stack: ndarray,\n+        frame_cube: ndarray,\n         background: ndarray,\n         gain: float,\n         im_region: tuple[slice, slice],\n         bias_region: Optional[tuple[slice, slice]] = None,\n         serial: bool = False,\n     ) -> ndarray:\n-        # Cut out im_region in axes 1 and 2 of frame stack.\n-        stacked_im_region = ..., *im_region\n-        raw_im_stack = frame_stack[stacked_im_region]\n+        # Cut out im_region in axes 1 and 2 of frame cube.\n+        cubed_im_region = ..., *im_region\n+        raw_im_cube = frame_cube[cubed_im_region]\n \n         if bias_region:\n             # Bias per frame, repeated across all pixels in the im_region of\n-            # that frame by broadcasting to the shape of the image stack.\n-            stacked_bias_region = ..., *bias_region\n+            # that frame by broadcasting to the shape of the image cube.\n+            cubed_bias_region = ..., *bias_region\n             bias_axes = 2 if serial else (1, 2)\n-            bias = np.median(frame_stack[stacked_bias_region], axis=bias_axes)\n+            bias = np.median(frame_cube[cubed_bias_region], axis=bias_axes)\n             bias_broadcast = np.broadcast_to(\n-                np.expand_dims(bias, bias_axes), raw_im_stack.shape\n+                np.expand_dims(bias, bias_axes), raw_im_cube.shape\n             )\n-            im_stack = raw_im_stack - bias_broadcast\n+            im_cube = raw_im_cube - bias_broadcast\n         else:\n-            im_stack = raw_im_stack\n+            im_cube = raw_im_cube\n \n-        flat_frame_stack = cls._flat_frame_stack(\n-            background, gain, im_region, bias_region, im_stack.shape\n+        flat_frame_cube = cls._flat_frame_cube(\n+            background, gain, im_region, bias_region, im_cube.shape\n         )\n-        return im_stack * gain - flat_frame_stack\n+        cube = im_cube * gain - flat_frame_cube\n+        # Reduce by median along row axis if serial, else return full images.\n+        return np.median(cube, axis=1, keepdims=True) if serial else cube\n \n     @classmethod\n-    def _flat_frame_stack(\n+    def _flat_frame_cube(\n         cls,\n         background: ndarray,\n         gain: float,\n         im_region: tuple[slice, slice],\n         bias_region: Optional[tuple[slice, slice]],\n-        stack_shape: tuple[int, int, int],\n+        cube_shape: tuple[int, int, int],\n     ) -> ndarray:\n         \"\"\"\n-        Creates a flat frame 'stack' by creating the flat frame and\n-        broadcasting it to the shape of the image stack.\n+        Creates a flat frame 'cube' by creating the flat frame and\n+        broadcasting it to the shape of the image cube.\n         \"\"\"\n         flat_row = cls._flat_row(background, gain, im_region, bias_region)\n         nrows = im_region[0].stop - im_region[0].start\n         flat_frame = np.tile(flat_row, (nrows, 1))\n-        return np.broadcast_to(flat_frame, stack_shape)\n+        return np.broadcast_to(flat_frame, cube_shape)\n \n     @staticmethod\n     def _flat_row(\n@@ -78,12 +83,12 @@ class Data:\n         bias_region: Optional[tuple[slice, slice]],\n     ) -> ndarray:\n         bg_data = background.astype(int)\n-        mean_background = np.mean(bg_data[im_region], axis=0)\n+        median_background = np.median(bg_data[im_region], axis=0)\n         median_bias = np.median(bg_data[bias_region]) if bias_region else 0\n-        return (mean_background - median_bias) * gain\n+        return (median_background - median_bias) * gain\n \n     @classmethod\n-    def pre_process_ragged_stack(\n+    def pre_process_ragged_cube(\n         cls,\n         frames: list[ndarray],\n         background: ndarray,\n@@ -96,14 +101,22 @@ class Data:\n         \"\"\"\n         flat_row = cls._flat_row(background, gain, im_region, bias_region)\n \n-        im_stack = []\n+        im_cube = []\n         for frame in frames:\n             raw_image = frame[im_region]\n             bias = np.median(frame[bias_region]) if bias_region else 0\n             image = (raw_image - bias) * gain - flat_row\n-            im_stack.append(np.median(image, axis=0, keepdims=True))\n+            im_cube.append(np.median(image, axis=0, keepdims=True))\n \n-        return np.array(im_stack)\n+        return np.array(im_cube)\n+\n+    @property\n+    def im_stats(self) -> ImageStats:\n+        clipped_cube = sigma_clip(self.im_cube, sigma=3, axis=(1, 2))\n+        col_means = np.mean(clipped_cube, axis=1)\n+        return ImageStats(\n+            np.mean(col_means, axis=1), np.std(col_means, axis=1)\n+        )\n \n \n @dataclass(frozen=True)\n@@ -119,3 +132,19 @@ class Clock:\n                 \"Clock.t_var must be strictly monotonically increasing. t_var \"\n                 f\"provided: {self.t_var}\"\n             )\n+\n+\n+@dataclass(frozen=True)\n+class ImageStats:\n+    mean_col_means: ndarray  # mean per frame of column means\n+    std_col_means: ndarray  # stdev per frame of column means\n+\n+    def to_stats_dict(self, frame_filenames: Iterable[str]) -> dict:\n+        stats_dict = {}\n+        for i, filename in enumerate(frame_filenames):\n+            for stat in self.__dict__.items():  # tuple (name, values)\n+                stat_name = stat[0]\n+                stat_value = stat[1][i]\n+                stats_dict[f\"{stat_name}[{filename}]\"] = stat_value\n+\n+        return stats_dict\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/python/VIS_TrapPumping/VIS_TrapPumping_Analysis/fitting/fitting.py": [
                        [
                            "@@ -1,18 +1,15 @@\n from multiprocessing import Pool\n-from os import sched_getaffinity\n from typing import Union\n \n from pandas import DataFrame\n \n from ..traps.abstract import Trap, TrapCollection\n \n-PROCESSES = len(sched_getaffinity(0))\n \n-\n-def fit_models(traps: TrapCollection) -> DataFrame:\n-    with Pool(PROCESSES) as p:\n+def fit_models(traps: TrapCollection, processes: int) -> DataFrame:\n+    with Pool(processes) as p:\n         fit_iterator = p.imap(\n-            trap_fit_models, traps, max(len(traps) // (4 * PROCESSES), 1)\n+            trap_fit_models, traps, max(len(traps) // (4 * processes), 1)\n         )\n         return DataFrame(fit_iterator)\n \n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/python/VIS_TrapPumping/VIS_TrapPumping_Analysis/fitting/models.py": [
                        [
                            "@@ -14,7 +14,7 @@ from .parameters import (\n     DwellPhase2ModelParams,\n     LinearLogModelParams,\n     ModelParams,\n-    TphModelParams,\n+    TphOriginalModelParams,\n )\n \n LOGGER = getLogger(__name__)\n@@ -91,7 +91,7 @@ class Model(ABC):\n         return\n \n \n-class TphModel(Model):\n+class TphOriginalModel(Model):\n     @staticmethod\n     def model(clock: Clock, *params: float) -> ndarray:\n         t_ph = clock.t_var\n@@ -100,7 +100,7 @@ class TphModel(Model):\n \n     @property\n     def params_type(self) -> type[ModelParams]:\n-        return TphModelParams\n+        return TphOriginalModelParams\n \n \n class DwellPhase2Model(Model):\n@@ -211,5 +211,5 @@ class ConstantModel(Model):\n         phase_options: tuple[int, int],\n         is_low_high: bool,\n         params: ModelParams,\n-    ) -> None:\n-        return\n+    ) -> int:\n+        return 0\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/python/VIS_TrapPumping/VIS_TrapPumping_Analysis/fitting/parameters.py": [
                        [
                            "@@ -82,7 +82,7 @@ class BasicModelParams(ModelParams):\n \n \n @dataclass\n-class TphModelParams(BasicModelParams):\n+class TphOriginalModelParams(BasicModelParams):\n     @classmethod\n     def get_bounds(cls, t_rphi: Optional[float]) -> tuple[list, list]:\n         return (\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/python/VIS_TrapPumping/VIS_TrapPumping_Analysis/fitting/results.py": [
                        [
                            "@@ -1,5 +1,5 @@\n from dataclasses import dataclass\n-from typing import Union\n+from typing import Optional, Union\n \n from .comparison import ModelFit\n \n@@ -10,18 +10,23 @@ class Result:\n     Class to encapsulate creation of DataFrame rows\n     \"\"\"\n \n-    row: int\n+    row: Optional[int]\n     col: int\n     phase: int\n     model_fit: ModelFit\n     fitted_points: dict[float, float]\n+    cr_flags: int\n \n     def asdict(self) -> dict[Union[str, float], Union[str, float]]:\n-        return {\n-            \"row\": self.row,\n-            \"column\": self.col,\n-            \"phase\": self.phase,\n-            \"model_name\": self.model_fit.name,\n-            **self.model_fit.corrected_params,\n-            **self.fitted_points,\n-        }\n+        result = {\"row\": self.row} if self.row is not None else {}\n+        result.update(\n+            {\n+                \"column\": self.col,\n+                \"phase\": self.phase,\n+                \"model_name\": self.model_fit.name,\n+                **self.model_fit.corrected_params,\n+                **self.fitted_points,\n+                \"cr_flags\": self.cr_flags,\n+            }\n+        )\n+        return result\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/python/VIS_TrapPumping/VIS_TrapPumping_Analysis/traps/abstract.py": [
                        [
                            "@@ -5,7 +5,9 @@ from typing import Union\n \n import numpy as np\n from numpy import ndarray\n+from numpy.lib.stride_tricks import sliding_window_view\n \n+from ..config import AnalysisConfig\n from ..data import Clock, Data\n from ..fitting.comparison import ModelComparator, ModelFit\n from ..fitting.models import Model\n@@ -48,6 +50,21 @@ class Trap(ABC):\n     def phase_options(self) -> tuple[int, int]:\n         return self.schemes[self.clock.scheme][\"phase\"]\n \n+    @property\n+    def fitted_points(self) -> dict[float, float]:\n+        if np.ma.is_masked(self.dipole_intensities):\n+            dipole_intensities = self.dipole_intensities.data\n+        else:\n+            dipole_intensities = self.dipole_intensities\n+        return dict(zip(self.clock.t_var, dipole_intensities))\n+\n+    @property\n+    def cr_flags(self) -> int:\n+        if np.ma.is_masked(self.dipole_intensities):\n+            bool_mask = self.dipole_intensities.mask.astype(int)\n+            return bool_mask.dot(2 ** np.arange(bool_mask.size)[::-1])\n+        return 0\n+\n     def run_model_fitting(self) -> Result:\n         model_fits = map(ModelFit.fit, self.models)\n         model_comparator = ModelComparator(\n@@ -55,8 +72,13 @@ class Trap(ABC):\n         )\n         best_fit = model_comparator.get_best_model()\n         phase = best_fit.get_phase(self.phase_options, self.is_low_high)\n-        fitted_points = dict(zip(self.clock.t_var, self.dipole_intensities))\n-        return Result(*self.adjusted_row_col, phase, best_fit, fitted_points)\n+        return Result(\n+            *self.adjusted_row_col,\n+            phase,\n+            best_fit,\n+            self.fitted_points,\n+            self.cr_flags,\n+        )\n \n     @property\n     @abstractmethod\n@@ -80,43 +102,42 @@ class TrapLocator(ABC):\n     def __init__(self, data: Data) -> None:\n         self.data = data\n \n-    def get_traps(self, nsigma: int = 3) -> TrapCollection:\n-        analysis_data = self._get_analysis_stack(self.data.im_stack)\n-        trap_pos = self.find_trap_positions(analysis_data, nsigma)\n-        trap_indices = self._get_trap_indices(trap_pos)\n-        dipole_intensities_all = self.get_dipole_intensities(\n-            analysis_data, trap_indices\n-        )\n+    def get_traps(self, config: AnalysisConfig) -> TrapCollection:\n+        cube = self.data.im_cube\n+        trap_pos = self.find_trap_positions(cube, config)\n+        trap_indices = self.get_trap_indices(trap_pos)\n+        dipoles = self.extract_dipoles(cube, trap_indices)\n+        dipole_intensities_all = self.get_dipole_intensities(dipoles, config)\n \n         return TrapCollection(\n             map(self._make_trap, zip(dipole_intensities_all, trap_indices)),\n             trap_indices.shape[0],\n         )\n \n-    @staticmethod\n-    @abstractmethod\n-    def _get_analysis_stack(im_stack: ndarray) -> ndarray:\n-        pass\n-\n     @classmethod\n-    def find_trap_positions(cls, stack: ndarray, nsigma: int = 3) -> ndarray:\n-        mean = cls._get_mean(stack)\n-        sigma_adu = 20  # constant taken from original code\n-        low_adu = mean - nsigma * sigma_adu\n-        high_adu = mean + nsigma * sigma_adu\n-\n-        low = stack < low_adu\n-        high = stack > high_adu\n-        normal = ~low & ~high\n-\n-        low_high = np.all(cls._get_dipole_pattern(low, high, normal), axis=0)\n-        high_low = np.all(cls._get_dipole_pattern(high, low, normal), axis=0)\n+    def find_trap_positions(\n+        cls, cube: ndarray, config: AnalysisConfig\n+    ) -> ndarray:\n+        mean = cls._get_mean(cube)\n+        low = mean - config.nsigma * config.sigma\n+        high = mean + config.nsigma * config.sigma\n+\n+        is_low = cube < low\n+        is_high = cube > high\n+        is_normal = ~is_low & ~is_high\n+\n+        low_high = np.all(\n+            cls._get_dipole_pattern(is_low, is_high, is_normal), axis=0\n+        )\n+        high_low = np.all(\n+            cls._get_dipole_pattern(is_high, is_low, is_normal), axis=0\n+        )\n         possible_traps = np.any([low_high, high_low], axis=0)\n         return cls._find_contiguous(possible_traps)\n \n     @staticmethod\n     @abstractmethod\n-    def _get_mean(stack: ndarray) -> Union[ndarray, int]:\n+    def _get_mean(cube: ndarray) -> Union[ndarray, int]:\n         pass\n \n     @staticmethod\n@@ -127,29 +148,42 @@ class TrapLocator(ABC):\n         pass\n \n     @staticmethod\n-    @abstractmethod\n     def _find_contiguous(possible_traps: ndarray) -> ndarray:\n-        pass\n+        pairs = sliding_window_view(possible_traps, window_shape=2, axis=0)\n+        return np.any(np.sum(pairs, axis=-1) > 1, axis=0)\n \n     @staticmethod\n     @abstractmethod\n-    def _get_trap_indices(trap_pos: ndarray) -> ndarray:\n+    def get_trap_indices(trap_pos: ndarray) -> ndarray:\n         pass\n \n+    @staticmethod\n     @abstractmethod\n-    def get_dipole_intensities(\n-        self, stack: ndarray, trap_indices: ndarray\n-    ) -> ndarray:\n+    def extract_dipoles(cube: ndarray, trap_indices: ndarray) -> ndarray:\n         pass\n \n-    @staticmethod\n     @abstractmethod\n-    def extract_dipoles(stack: ndarray, trap_indices: ndarray) -> ndarray:\n+    def get_dipole_intensities(\n+        self, dipoles: ndarray, config: AnalysisConfig\n+    ) -> ndarray:\n         pass\n \n     def _make_trap(self, trap_data: tuple[ndarray, ndarray]) -> Trap:\n         dipole_intensities, (row, col) = trap_data\n-        return self.trap_type(self.data.clock, dipole_intensities, row, col)\n+        im_row, im_col = self._get_image_row_col(row, col)\n+        return self.trap_type(\n+            self.data.clock, dipole_intensities, im_row, im_col\n+        )\n+\n+    @abstractmethod\n+    def _get_image_row_col(\n+        self, region_row: int, region_col: int\n+    ) -> tuple[int, int]:\n+        \"\"\"\n+        Adjusts the row and column from being indices with respect to the\n+        chosen `im_region` to being with respect to the original image.\n+        \"\"\"\n+        pass\n \n     @property\n     @abstractmethod\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/python/VIS_TrapPumping/VIS_TrapPumping_Analysis/traps/parallel.py": [
                        [
                            "@@ -5,9 +5,10 @@ from typing import Union\n import numpy as np\n from astropy.stats import sigma_clip\n from numpy import ndarray\n-from numpy.lib.stride_tricks import sliding_window_view\n \n-from ..fitting.models import ConstantModel, Model, TphModel\n+from ..config import AnalysisConfig\n+from ..data import Clock\n+from ..fitting.models import ConstantModel, Model, TphOriginalModel\n from .abstract import Trap, TrapLocator\n \n \n@@ -32,42 +33,45 @@ class ParallelTrap(Trap):\n \n     @property\n     def models(self) -> list[Model]:\n+        if np.ma.is_masked(self.dipole_intensities):\n+            # Some values are masked by CR flagging. Mask corresponding t_ph\n+            # values and override Clock object.\n+            t_var = self.clock.t_var[~self.dipole_intensities.mask]\n+            clock = Clock(self.clock.scheme, self.clock.cycles, t_var)\n+            # Remove masked dipole intensities\n+            dipole_intensities = self.dipole_intensities.compressed()\n+        else:\n+            clock = self.clock\n+            dipole_intensities = self.dipole_intensities\n         return [\n-            TphModel(self.clock, self.dipole_intensities),\n-            ConstantModel(\n-                self.clock, self.dipole_intensities, chi_sq_adjust_factor=0.8\n-            ),\n+            TphOriginalModel(clock, dipole_intensities),\n+            ConstantModel(clock, dipole_intensities, chi_sq_adjust_factor=0.8),\n         ]\n \n \n class ParallelTrapLocator(TrapLocator):\n-    @staticmethod\n-    def _get_analysis_stack(im_stack: ndarray) -> ndarray:\n-        return im_stack\n-\n     @classmethod\n-    def _get_mean(cls, stack: ndarray) -> Union[ndarray, int]:\n-        clip_roi = cls._get_sigma_clip_roi(stack)\n+    def _get_mean(cls, cube: ndarray) -> Union[ndarray, int]:\n+        clip_roi = cls._get_sigma_clip_roi(cube)\n         axes = 1, 2\n-        # TODO: should this be sigma=3 or nsigma?\n-        clipped = sigma_clip(stack[clip_roi], sigma=3, axis=axes)\n+        clipped = sigma_clip(cube[clip_roi], sigma=3, axis=axes)\n         mean_adu = np.mean(clipped, axis=axes)\n-        return np.broadcast_to(np.expand_dims(mean_adu, axes), stack.shape)\n+        return np.broadcast_to(np.expand_dims(mean_adu, axes), cube.shape)\n \n     @staticmethod\n     def _get_sigma_clip_roi(\n-        stack: ndarray,\n+        cube: ndarray,\n     ) -> Union[tuple[\"builtins.ellipsis\", slice, slice], \"builtins.ellipsis\"]:\n-        stack_shape = stack.shape\n+        cube_shape = cube.shape\n         roi_height = (\n-            slice(stack_shape[1] // 2 - 250, stack_shape[1] // 2 + 250)\n-            if stack_shape[1] > 500\n-            else slice(stack_shape[1])\n+            slice(cube_shape[1] // 2 - 250, cube_shape[1] // 2 + 250)\n+            if cube_shape[1] > 500\n+            else slice(cube_shape[1])\n         )\n         roi_width = (\n-            slice(stack_shape[2] // 2 - 250, stack_shape[2] // 2 + 250)\n-            if stack_shape[2] > 500\n-            else slice(stack_shape[2])\n+            slice(cube_shape[2] // 2 - 250, cube_shape[2] // 2 + 250)\n+            if cube_shape[2] > 500\n+            else slice(cube_shape[2])\n         )\n         return ..., roi_height, roi_width\n \n@@ -78,38 +82,63 @@ class ParallelTrapLocator(TrapLocator):\n         \"\"\"\n         Finds pixel seq [normal, low, high, normal] or [normal, high, low,\n         normal] in order to weed out traps pumping with or against each other.\n-\n-        Since the pattern begins with a 'normal' pixel, the resulting trap\n-        position is offset one pixel lower (by index) than the actual start of\n-        the dipole. This is corrected for in `extract_dipoles` but not in the\n-        trap indices passed to model fitting. TODO: fix and check serial.\n         \"\"\"\n         return [normal[:, :-3], first[:, 1:-2], second[:, 2:-1], normal[:, 3:]]\n \n     @staticmethod\n-    def _find_contiguous(possible_traps: ndarray) -> ndarray:\n-        pairs = sliding_window_view(possible_traps, window_shape=2, axis=0)\n-        return np.any(np.sum(pairs, axis=-1) > 1, axis=0)\n+    def get_trap_indices(trap_pos: ndarray) -> ndarray:\n+        trap_indices = np.argwhere(trap_pos)\n+        # Actual dipole starts one row higher, due to offset introduced by\n+        # `_get_dipole_pattern`.\n+        trap_indices[:, 0] += 1\n+        # Only keep rows > 5\n+        return trap_indices[trap_indices[:, 0] > 5]\n \n     @staticmethod\n-    def _get_trap_indices(trap_pos: ndarray) -> ndarray:\n-        trap_indices = np.argwhere(trap_pos)\n-        return trap_indices[trap_indices[:, 0] > 4]  # throw away rows < 5\n+    def extract_dipoles(cube: ndarray, trap_indices: ndarray) -> ndarray:\n+        dipole_rows = np.column_stack(\n+            [trap_indices[:, 0], trap_indices[:, 0] + 1]\n+        )\n+        dipole_cols = np.row_stack(trap_indices[:, 1])\n+        return cube[:, dipole_rows, dipole_cols]\n \n     def get_dipole_intensities(\n-        self, stack: ndarray, trap_indices: ndarray\n+        self, dipoles: ndarray, config: AnalysisConfig\n     ) -> ndarray:\n-        dipoles = self.extract_dipoles(stack, trap_indices)\n         cycles = self.data.clock.cycles\n-        return np.diff(-dipoles).squeeze().T / (cycles * 2)\n-\n-    @staticmethod\n-    def extract_dipoles(stack: ndarray, trap_indices: ndarray) -> ndarray:\n-        dipole_rows = np.column_stack(\n-            [trap_indices[:, 0] + 1, trap_indices[:, 0] + 2]\n+        dipole_intensities = np.diff(-dipoles).squeeze().T / (cycles * 2)\n+\n+        if config.mask_crs:\n+            # Sum low side + high side of dipoles\n+            dipole_sums = np.sum(dipoles, axis=-1).T\n+            sigma_threshold = (\n+                config.sigma * config.nsigma * config.nsigma_cr_adjust\n+            )\n+            # Only retain where magnitude greater than threshold\n+            dipole_sums = np.where(\n+                dipole_sums > sigma_threshold, dipole_sums, 0\n+            )\n+            # Mask dipole intensities where relative size of sum greater than\n+            # threshold\n+            return np.ma.masked_where(\n+                abs(dipole_sums / cycles) / abs(dipole_intensities)\n+                > config.cr_mask_limit,\n+                dipole_intensities,\n+            )\n+\n+        return dipole_intensities\n+\n+    def _get_image_row_col(\n+        self, region_row: int, region_col: int\n+    ) -> tuple[int, int]:\n+        \"\"\"\n+        Adjusts the row and column from being indices with respect to the\n+        chosen `im_region` to being with respect to the original image.\n+        \"\"\"\n+        return (\n+            region_row + self.data.im_region[0].start,\n+            region_col + self.data.im_region[1].start,\n         )\n-        dipole_cols = np.row_stack(trap_indices[:, 1])\n-        return stack[:, dipole_rows, dipole_cols]\n \n     @property\n     def trap_type(self) -> type[Trap]:\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/python/VIS_TrapPumping/VIS_TrapPumping_Analysis/traps/serial.py": [
                        [
                            "@@ -5,6 +5,7 @@ import numpy as np\n from astropy.stats import sigma_clip\n from numpy import ndarray\n \n+from ..config import AnalysisConfig\n from ..fitting.models import (\n     ConstantModel,\n     DwellPhase1Model,\n@@ -27,7 +28,7 @@ class SerialTrap(Trap):\n     @property\n     def adjusted_row_col(self) -> tuple[int, int]:\n         return (\n-            self.row,\n+            None,  # always zero so not relevant for results\n             self.col\n             + self.schemes[self.clock.scheme][\"offset\"][self.is_low_high],\n         )\n@@ -44,13 +45,8 @@ class SerialTrap(Trap):\n \n class SerialTrapLocator(TrapLocator):\n     @staticmethod\n-    def _get_analysis_stack(im_stack: ndarray) -> ndarray:\n-        return np.median(im_stack, axis=1, keepdims=True)\n-\n-    @staticmethod\n-    def _get_mean(stack: ndarray) -> Union[ndarray, int]:\n-        # TODO: should this be sigma=3 or nsigma?\n-        clipped = sigma_clip(stack, sigma=3)\n+    def _get_mean(cube: ndarray) -> Union[ndarray, int]:\n+        clipped = sigma_clip(cube, sigma=3)\n         return np.mean(clipped)\n \n     @staticmethod\n@@ -60,35 +56,36 @@ class SerialTrapLocator(TrapLocator):\n         return [first[..., 1:-2], second[..., 2:-1]]\n \n     @staticmethod\n-    def _find_contiguous(possible_traps: ndarray) -> ndarray:\n-        \"\"\"\n-        Aligned with the original code, but unlike parallel, this will include\n-        traps where dipoles are separated by >1 dwell time. TODO: check this is\n-        desirable.\n-        \"\"\"\n-        return np.sum(possible_traps, axis=0) > 1\n+    def get_trap_indices(trap_pos: ndarray) -> ndarray:\n+        trap_indices = np.argwhere(trap_pos)\n+        # Actual dipole starts one col higher, due to offset introduced by\n+        # `_get_dipole_pattern`.\n+        trap_indices[:, 1] += 1\n+        # Only keep cols > 5\n+        return trap_indices[trap_indices[:, 1] > 5]\n \n     @staticmethod\n-    def _get_trap_indices(trap_pos: ndarray) -> ndarray:\n-        trap_indices = np.argwhere(trap_pos)\n-        return trap_indices[trap_indices[:, 1] > 4]  # throw away cols < 5\n+    def extract_dipoles(cube: ndarray, trap_indices: ndarray) -> ndarray:\n+        dipole_rows = np.column_stack(trap_indices[:, 0])\n+        dipole_cols = np.row_stack(\n+            [trap_indices[:, 1], trap_indices[:, 1] + 1]\n+        )\n+        return cube[:, dipole_rows, dipole_cols]\n \n     def get_dipole_intensities(\n-        self, stack: ndarray, trap_indices: ndarray\n+        self, dipoles: ndarray, config: AnalysisConfig\n     ) -> ndarray:\n-        dipoles = self.extract_dipoles(stack, trap_indices)\n         cycles = self.data.clock.cycles\n         return np.diff(-dipoles, axis=1).squeeze().T / (cycles * 2)\n \n-    @staticmethod\n-    def extract_dipoles(stack: ndarray, trap_indices: ndarray) -> ndarray:\n-        dipole_rows = np.column_stack(trap_indices[:, 0])\n-        # TODO: should this be + 1 -> + 2 or + 0 -> + 1? See comment in\n-        # `ParallelTrapLocator._get_dipole_pattern` re erroneous pixel offset.\n-        dipole_cols = np.row_stack(\n-            [trap_indices[:, 1] + 1, trap_indices[:, 1] + 2]\n-        )\n-        return stack[:, dipole_rows, dipole_cols]\n+    def _get_image_row_col(\n+        self, region_row: int, region_col: int\n+    ) -> tuple[int, int]:\n+        \"\"\"\n+        Adjusts the column index from being with respect to the chosen\n+        `im_region` to being with respect to the original image.\n+        \"\"\"\n+        return region_row, region_col + self.data.im_region[1].start\n \n     @property\n     def trap_type(self) -> type[Trap]:\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/python/VIS_TrapPumping/VIS_TrapPumping_IO/file_entry_point.py": [
                        [
                            "@@ -21,12 +21,14 @@ writes the output files.\n \n from pathlib import Path\n \n+from fitsio import FITSHDR, read_header\n from pandas import DataFrame\n \n import ElementsKernel.Logging as log\n \n-import VIS_PyLibrary_Common.pe_run_information as peri  # TODO something with this :)\n+from VIS_PyLibrary_Common.pe_run_information import save_peri\n \n+from ..VIS_TrapPumping_Analysis.config import AnalysisConfig\n from ..VIS_TrapPumping_Analysis.data import Data\n from ..VIS_TrapPumping_Analysis.fitting import fit_models\n from ..VIS_TrapPumping_Analysis.traps.parallel import ParallelTrapLocator\n@@ -34,41 +36,81 @@ from ..VIS_TrapPumping_Analysis.traps.serial import SerialTrapLocator\n \n from .file_validation import input_fits_files_valid\n from .pre_processing import prepare_tp_data\n+from .qc_stats import get_frame_stats, get_output_stats\n \n __all__ = [\"file_layer_entry_point\"]\n logger = log.getLogger(__name__)\n \n \n-def run_tp_analysis(data: Data, serial: bool) -> DataFrame:\n-    # TODO: logging\n+def run_tp_analysis(data: Data, serial: bool, config: dict) -> DataFrame:\n     if serial:\n         trap_locator = SerialTrapLocator(data)\n     else:\n         trap_locator = ParallelTrapLocator(data)\n-    traps = trap_locator.get_traps(nsigma=5)  # TODO: make nsigma configurable\n-    return fit_models(traps)\n \n+    analysis_config = AnalysisConfig(**config)\n+    traps = trap_locator.get_traps(analysis_config)\n+    return fit_models(traps, analysis_config.processes)\n \n-def file_layer_entry_point(input_files: list[Path], tp_param_csv: Path):\n+\n+def file_layer_entry_point(\n+    input_files: list[Path],\n+    serial: bool,\n+    config: dict,\n+    tp_params_csv: Path,\n+    ext_hdr: FITSHDR,\n+):\n     \"\"\"\n     This layer handles the I/O to/from files. It is a wrapper around the\n     algorithm.\n \n     Parameters\n     ----------\n-    input_files : array_like of string\n-        Array of file paths of input FITS files. TODO more details...\n-    tp_param_csv : string\n+    input_files : array_like of Path\n+        Array of file paths of input FITS files.\n+    serial : bool\n+        True if serial trap pumping, else false.\n+    config : dict\n+        Trap pumping config.\n+    tp_params_csv : Path\n         File path of TP params output CSV.\n+    ext_hdr : FITSHDR\n+        The extension header of the latest TP input file.\n     \"\"\"\n     logger.info(\"Running %s\", __name__)\n-    logger.info(\"argument 'input_files': %s\", str(input_files))\n-    logger.info(\"argument 'tp_param_csv': %s\", tp_param_csv)\n+    logger.info(\"argument 'input_files': %s\", input_files)\n+    logger.info(\"argument 'serial': %s\", serial)\n+    logger.info(\"argument 'config': %s\", config)\n+    logger.info(\"argument 'tp_params_csv': %s\", tp_params_csv)\n+\n+    if input_fits_files_valid(input_files, serial):\n+        data = prepare_tp_data(input_files, serial)\n+        tp_params = run_tp_analysis(data, serial, config)\n+\n+        tp_params.insert(0, \"ccd\", ext_hdr[\"CCDID\"])\n+        tp_params.insert(1, \"quad\", ext_hdr[\"QUADID\"])\n+        tp_params.to_csv(tp_params_csv, index=False)\n+\n+        obs_id = read_header(input_files[-1])[\"OBS_ID\"]\n+        output_stats = get_output_stats(tp_params, config[\"mask_crs\"])\n+        save_peri(\n+            output_stats,\n+            str(tp_params_csv),\n+            \"VIS_TrapPumping_Output\",\n+            context_name=ext_hdr[\"EXTNAME\"],\n+            obs_id=obs_id,\n+        )\n+\n+        if not serial:\n+            frame_stats = get_frame_stats(data, input_files[1:])  # pumped only\n+            save_peri(\n+                frame_stats,\n+                str(tp_params_csv),\n+                \"VIS_TrapPumping_Frames\",\n+                context_name=ext_hdr[\"EXTNAME\"],\n+                obs_id=obs_id,\n+            )\n \n-    if input_fits_files_valid(input_files):\n-        data, serial = prepare_tp_data(input_files)\n-        tp_params = run_tp_analysis(data, serial)\n-        tp_params.to_csv(tp_param_csv, index=False)\n     else:\n         logger.error(\"%s: input files failed validity tests\", __name__)\n \n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/python/VIS_TrapPumping/VIS_TrapPumping_IO/file_validation.py": [
                        [
                            "@@ -21,12 +21,10 @@ import ElementsKernel.Logging as elog\n \n import VIS_PyLibrary_M.fits_validation as plfv\n \n-from .headers import is_stp_file\n-\n __all__ = [\"input_fits_files_valid\"]\n \n \n-def input_fits_files_valid(input_files):\n+def input_fits_files_valid(input_files, serial):\n     \"\"\"\n     Checks the validity of the input FITS files, for the purpose of flat-field calibration.\n \n@@ -35,6 +33,8 @@ def input_fits_files_valid(input_files):\n     input_files : array_like of string\n         Array of file names of input FITS files.  Each file should contain a single quadrant of a single\n         flat field exposure.  All files must contain the same quadrant.\n+    serial : bool\n+        True if serial trap pumping, else false.\n \n     Returns\n     -------\n@@ -44,7 +44,7 @@ def input_fits_files_valid(input_files):\n     log = elog.getLogger(__name__)\n     valid = True\n \n-    if is_stp_file(input_files[0]) and len(input_files) > 2:\n+    if serial and len(input_files) > 2:\n         valid = False\n         log.error(\n             \"STP processing requires a maximum of 2 files: the main one being\"\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/python/VIS_TrapPumping/VIS_TrapPumping_IO/headers.py": [
                        [
                            "@@ -19,19 +19,17 @@ Helper module for reading FITS trap pumping headers.\n # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n #\n \n-from pathlib import Path\n-from typing import Union\n+from fitsio import FITSHDR\n \n-from fitsio import FITSHDR, read_header\n+__all__ = [\"get_tp_pshcy\", \"get_tp_toi\"]\n \n-__all__ = [\"get_tp_toi\", \"is_stp_file\", \"is_stp_hdr\"]\n \n-\n-def get_tp_toi(prim_hdr: FITSHDR) -> float:\n+def get_tp_pshcy(prim_hdr: FITSHDR) -> float:\n     \"\"\"\n-    Get the 'TP_TOI' primary header entry, the parallel trap pumping phase time\n-    in seconds. If none, this is interpreted as the blank charge injection\n-    frame, which forms part of the dataset passed to the TP algorithm.\n+    Get the 'TP_PSHCY' primary header entry, the parallel trap pumping number\n+    of shuffle cycles. If not present, this is interpreted as the reference\n+    charge injection frame, whose early versions did not have TP parameters in\n+    the header (only CI ones).\n \n     Parameters\n     ----------\n@@ -41,18 +39,28 @@ def get_tp_toi(prim_hdr: FITSHDR) -> float:\n     Returns\n     -------\n     float\n-        The 'TP_TOI' entry in the primary header, if present, 0 (plain CI) if\n+        The 'TP_PSHCY' entry in the primary header, if present, 0 (plain CI) if\n         not.\n     \"\"\"\n-    try:\n-        return prim_hdr[\"TP_TOI\"]\n-    except KeyError:  # blank CI frame has no TOI?\n-        return 0\n+    return prim_hdr.get(\"TP_PSHCY\", 0)\n \n \n-def is_stp_file(filepath: Union[Path, str]) -> bool:\n-    return read_header(filepath)[\"SEQID\"] == \"MULTI SERIAL TRAP PUMPING\"\n+def get_tp_toi(prim_hdr: FITSHDR) -> float:\n+    \"\"\"\n+    Get the 'TP_TOI' primary header entry, the parallel trap pumping phase time\n+    in seconds. If not present, this is interpreted as the reference charge\n+    injection frame, whose early versions did not have TP parameters in the\n+    header (only CI ones).\n \n+    Parameters\n+    ----------\n+    prim_hdr :\n+        The FITS primary header.\n \n-def is_stp_hdr(prim_hdr: FITSHDR) -> bool:\n-    return prim_hdr[\"SEQID\"] == \"MULTI SERIAL TRAP PUMPING\"\n+    Returns\n+    -------\n+    float\n+        The 'TP_TOI' entry in the primary header, if present, 0 (plain CI) if\n+        not.\n+    \"\"\"\n+    return prim_hdr.get(\"TP_TOI\", 0)\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/python/VIS_TrapPumping/VIS_TrapPumping_IO/metadata.py": [
                        [
                            "@@ -0,0 +1,32 @@\n+from __future__ import annotations\n+from dataclasses import dataclass\n+from json import load\n+from pathlib import Path\n+\n+\n+@dataclass(frozen=True)\n+class Metadata:\n+    tp_type: str\n+    shuff_mode: str\n+    ig1_voltage: float\n+\n+    @property\n+    def serial(self) -> bool:\n+        tp_type = self.tp_type.lower()\n+        return \"stp\" in tp_type or \"serial\" in tp_type\n+\n+    @property\n+    def ig1_str(self) -> str:\n+        int_part = str(int(self.ig1_voltage))\n+        frac_part = int(self.ig1_voltage % 1 * 100)\n+        return int_part if frac_part == 0 else f\"{int_part}P{frac_part}\"\n+\n+    @property\n+    def instance_id(self) -> str:\n+        return f\"{self.tp_type}-SHM{self.shuff_mode}-IG1V{self.ig1_str}\"\n+\n+    @classmethod\n+    def from_json(cls, filepath: Path) -> Metadata:\n+        with open(filepath) as f:\n+            attr_dict = load(f)\n+        return cls(**attr_dict)\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/python/VIS_TrapPumping/VIS_TrapPumping_IO/plotting.py": [
                        [
                            "@@ -0,0 +1,207 @@\n+from collections.abc import Iterable\n+from pathlib import Path\n+from typing import Optional\n+\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.axes import Axes\n+from matplotlib.cm import inferno_r\n+from matplotlib.figure import Figure\n+from numpy import ndarray\n+from pandas import DataFrame, Series, notnull\n+\n+from VIS_TrapPumping.VIS_TrapPumping_IO.metadata import Metadata\n+\n+\n+def write_plots(\n+    results: DataFrame, metadata: Metadata, data_dir: Path\n+) -> list[Path]:\n+    serial = metadata.serial\n+    t_var = get_t_var(results.columns)\n+    if serial:\n+        t_var += 4.75  # phase time\n+\n+    fpa_data = results.loc[\n+        notnull(results.tau_e) & (results.tau_e < 1e6) & notnull(results.P_c)\n+    ]\n+    plot_filepaths = []\n+    for quad_id in (\"E\", \"F\", \"G\", \"H\"):\n+        quad_data = fpa_data.loc[fpa_data.quad == quad_id]\n+        hist_fig, hist_axs = plt.subplots(\n+            6, 6, sharex=True, sharey=True, figsize=(20, 15)\n+        )\n+        hmap_fig, hmap_axs = plt.subplots(\n+            6, 6, sharex=True, sharey=True, figsize=(20, 15)\n+        )\n+\n+        for ccd_id, data in quad_data.groupby(quad_data.ccd):\n+            row, col = get_subplot_index(ccd_id)\n+            quad_name = get_quad_name(ccd_id, quad_id)\n+            log_tau_e = np.log10(data.tau_e)\n+            P_c = data.P_c\n+\n+            phase = data.phase\n+            if serial:\n+                ph_even = phase == int(metadata.shuff_mode[0])\n+            else:\n+                ph_even = np.logical_not(phase < 3)\n+\n+            make_tau_e_hist(\n+                hist_axs[row, col], log_tau_e, ph_even, serial, quad_name\n+            )\n+            make_heatmap(\n+                hmap_axs[row, col], log_tau_e, P_c, t_var, serial, quad_name\n+            )\n+\n+        hist_filepath = save_fig(\n+            hist_fig, hist_axs, \"tau_e_histogram\", quad_id, data_dir\n+        )\n+        hmap_filepath = save_fig(\n+            hmap_fig,\n+            hmap_axs,\n+            \"tau_e_P_c_heatmap\",\n+            quad_id,\n+            data_dir,\n+            r\"$P_c$\",\n+        )\n+        plot_filepaths.extend([hist_filepath, hmap_filepath])\n+\n+    return plot_filepaths\n+\n+\n+def get_t_var(col_names: Iterable) -> ndarray:\n+    t_var = []\n+    for col_name in col_names:\n+        try:\n+            t_var.append(float(col_name))\n+        except ValueError:\n+            continue\n+\n+    return np.array(sorted(t_var))\n+\n+\n+def get_subplot_index(ccd_id: str) -> tuple[int, int]:\n+    row = -int(ccd_id[0])\n+    col = int(ccd_id[2]) - 1\n+    return row, col\n+\n+\n+def get_quad_name(ccd_id: str, quad_id: str) -> str:\n+    return f\"{ccd_id}.{quad_id}\"\n+\n+\n+def make_tau_e_hist(\n+    ax: Axes,\n+    log_tau_e: ndarray,\n+    ph_even: Series,\n+    serial: bool,\n+    quad_name: str,\n+) -> None:\n+    nbins = 51 if serial else 201\n+    hmin = -2 if serial else 0\n+    hmax = 6\n+    ax.hist(\n+        [log_tau_e[ph_even], log_tau_e[np.logical_not(ph_even)]],\n+        bins=np.linspace(hmin, hmax, nbins),\n+        lw=0,\n+        histtype=\"barstacked\",\n+    )\n+    ax.set_xlim(lim_pad(*get_xlim(serial)))\n+    add_quad_name(ax, quad_name)\n+    set_xticks(ax)\n+    if serial:\n+        ax.axvline(np.log10(4.75e-6) + 6, color=\"C1\", ls=\"--\")\n+\n+\n+def make_heatmap(\n+    ax: Axes,\n+    log_tau_e: ndarray,\n+    P_c: ndarray,\n+    t_var: ndarray,\n+    serial: bool,\n+    quad_name: str,\n+) -> None:\n+    xlim = get_xlim(serial)\n+    if serial:\n+        ax.plot(log_tau_e, np.abs(P_c), \"C0.\", ms=5, alpha=0.7)\n+        ax.set_ylim(lim_pad(0, 3))\n+    else:\n+        heatmap, xedges, yedges = np.histogram2d(\n+            log_tau_e,\n+            np.abs(P_c),\n+            bins=(100, 50),\n+            range=[lim_pad(*xlim), lim_pad(0, 3)],\n+        )\n+        extent = [xedges[0], xedges[-1], yedges[0], yedges[-1]]\n+        if np.max(heatmap) > 2:\n+            ax.imshow(\n+                heatmap.T,\n+                extent=extent,\n+                origin=\"lower\",\n+                cmap=inferno_r,\n+                vmin=1,\n+                vmax=np.max(heatmap) / 2.0,\n+                aspect=\"auto\",\n+            )\n+    ax.set_xlim(lim_pad(*xlim))\n+    add_quad_name(ax, quad_name)\n+    set_xticks(ax)\n+    ax.plot(np.log10(t_var), np.zeros(len(t_var)) + 2.7, \"k+\")\n+\n+\n+def lim_pad(low: float, high: float) -> tuple[float, float]:\n+    pad = 0.05 * (high - low)\n+    return low - pad, high + pad\n+\n+\n+def get_xlim(serial: bool) -> tuple[float, float]:\n+    return (0.5, 5) if serial else (1, 5)\n+\n+\n+def add_quad_name(ax: Axes, quad_name: str) -> None:\n+    ax.text(\n+        0.985, 0.97, quad_name, va=\"top\", ha=\"right\", transform=ax.transAxes\n+    )\n+\n+\n+def set_xticks(ax: Axes) -> None:\n+    ax.set_xticks(\n+        list(range(1, 6)),\n+        [\n+            r\"$10^{{ {:d} }}$\".format(int(exp - 6)) if exp % 2 else \"\"\n+            for exp in range(1, 6)\n+        ],\n+    )\n+\n+\n+def save_fig(\n+    fig: Figure,\n+    axs: ndarray,\n+    plot_name: str,\n+    quad_id: str,\n+    data_dir: Path,\n+    ylabel: Optional[str] = None,\n+) -> Path:\n+    set_axis_labels(axs, ylabel)\n+    adjust_fig(fig)\n+    filepath = data_dir / f\"{plot_name}_quad_{quad_id}.png\"\n+    fig.savefig(filepath, bbox_inches=\"tight\")\n+    return filepath\n+\n+\n+def set_axis_labels(axs: ndarray, ylabel: Optional[str]) -> None:\n+    for i in range(6):\n+        axs[-1, i].set_xlabel(r\"$\\tau_e \\; (\\mathrm{s})$\")\n+        if ylabel:\n+            axs[i, 0].set_ylabel(ylabel)\n+\n+\n+def adjust_fig(fig: Figure) -> None:\n+    fig.subplots_adjust(\n+        top=0.978,\n+        bottom=0.053,\n+        left=0.061,\n+        right=0.973,\n+        hspace=0.12,\n+        wspace=0.15,\n+    )\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/python/VIS_TrapPumping/VIS_TrapPumping_IO/pre_processing.py": [
                        [
                            "@@ -31,17 +31,17 @@ from VIS_ImageTools_M.FPA_quadrant import align_quadrant_readout\n \n from ..VIS_TrapPumping_Analysis.data import Clock, Data\n \n-from .headers import get_tp_toi, is_stp_file\n+from .headers import get_tp_pshcy, get_tp_toi\n \n __all__ = [\"prepare_tp_data\"]\n logger = log.getLogger(__name__)\n \n \n-def prepare_tp_data(input_files: list[Path]) -> tuple[Data, bool]:\n-    if is_stp_file(input_files[0]):\n-        return _prepare_stp_data(input_files), True\n+def prepare_tp_data(input_files: list[Path], serial: bool) -> Data:\n+    if serial:\n+        return _prepare_stp_data(input_files)\n     else:\n-        return _prepare_vtp_data(input_files), False\n+        return _prepare_vtp_data(input_files)\n \n \n def _prepare_stp_data(input_files: list[Path]) -> Data:\n@@ -127,13 +127,13 @@ def _prepare_stp_data(input_files: list[Path]) -> Data:\n         scheme = _get_unique_scheme(schemes)\n         shuffles = np.array(shuffles)\n \n-        processed_data = Data.pre_process_ragged_stack(\n+        processed_data = Data.pre_process_ragged_cube(\n             row_blocks, background, gain, roi\n         )\n         # TODO: Should 4.75 microsec clock phase time be in MDB?\n         clock = Clock(scheme, shuffles, dwells, 4.75)\n \n-        return Data(processed_data, clock)\n+        return Data(processed_data, roi, clock)\n \n \n def _get_row_block(\n@@ -167,28 +167,26 @@ def _prepare_vtp_data(input_files: list[Path]) -> Data:\n     for filepath in input_files:\n         prim_hdr, ext_hdr, data = _get_hdus(filepath)\n \n-        toi = get_tp_toi(prim_hdr)\n-        if toi == 0:  # background CI frame\n+        nshuff = get_tp_pshcy(prim_hdr)\n+        if nshuff in (0, 1):  # background CI frame\n             background = data\n             roi = _get_vtp_roi(ext_hdr)  # region of interest\n             gain = ext_hdr[\"GAIN\"]\n         else:\n             tp_frames.append(data)\n-            tois.append(toi)\n+            tois.append(get_tp_toi(prim_hdr))\n             schemes.add(prim_hdr[\"TP_PSHM\"])\n-            shuffles.append(prim_hdr[\"TP_PSHCY\"])\n+            shuffles.append(nshuff)\n \n     tp_frames = np.array(tp_frames)\n     tois = np.array(tois) * 1e6  # microseconds\n     scheme = _get_unique_scheme(schemes)\n     shuffles = np.array(shuffles)\n \n-    # TODO: assess if we want bias correction using prescan/overscan by passing\n-    # bias_region argument to Data.pre_process\n     processed_data = Data.pre_process(tp_frames, background, gain, roi)\n     clock = Clock(scheme, shuffles, tois)\n \n-    return Data(processed_data, clock)\n+    return Data(processed_data, roi, clock)\n \n \n def _get_hdus(filepath: Path) -> tuple[FITSHDR, FITSHDR, ndarray]:\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/python/VIS_TrapPumping/VIS_TrapPumping_IO/qc_stats.py": [
                        [
                            "@@ -0,0 +1,69 @@\n+import json\n+import os\n+from pathlib import Path\n+from types import SimpleNamespace as Namespace\n+\n+from numpy import count_nonzero\n+from pandas import DataFrame, notnull\n+\n+from ST_DM_FilenameProvider.FilenameProvider import FileNameProvider\n+\n+import VIS_PyLibrary_Common.common_definitions as commdef\n+import VIS_PyLibrary_Common.pe_run_information as peri\n+import VIS_PyLibrary_Common.zip_tools as zip_tools\n+\n+from ..VIS_TrapPumping_Analysis.data import Data\n+\n+\n+def get_output_stats(tp_params: DataFrame, mask_crs: bool) -> dict:\n+    valid = tp_params.loc[notnull(tp_params.tau_e)]\n+    stats = {\"num_traps\": valid.shape[0]}\n+    if mask_crs:\n+        stats[\"num_cr_affected\"] = count_nonzero(valid.cr_flags)\n+\n+    return stats\n+\n+\n+def get_frame_stats(data: Data, frame_filepaths: list[Path]):\n+    frame_filenames = map(lambda f: f.name, frame_filepaths)\n+    return data.im_stats.to_stats_dict(frame_filenames)\n+\n+\n+def convert_and_save_peri(workdir: Path) -> list[str]:\n+    \"\"\"\n+    TODO: This function is almost identical to code used elsewhere, e.g. master\n+    bias, astrometry. The intention is to move it to a shared library. Once\n+    that is available, replace this with the shared code.\n+    \"\"\"\n+    datadir = workdir / \"data\"\n+\n+    comments_final_dict = {}\n+    peconverted_final_statKeys = {}\n+    pe_runinfo_list_context_file = []\n+    ppoid = commdef.PPOID\n+    for perun_file in os.scandir(workdir):\n+        if peri.is_peri_file(perun_file.name):\n+            with open(perun_file, \"r\") as f:\n+                peinfo_class = json.load(\n+                    f, object_hook=lambda d: Namespace(**d)\n+                )\n+                (\n+                    peconverted_dict,\n+                    comments_dict,\n+                    peconverted_statKeys,\n+                ) = peri.convert_jsonperi_for_dp(peinfo_class)\n+                if len(peconverted_dict) > 0:\n+                    peri.save_peri_statdata_to_ascii(\n+                        peconverted_dict,\n+                        peconverted_statKeys,\n+                        datadir,\n+                        ppoid + \"_qc\",\n+                    )\n+                    peconverted_final_statKeys |= peconverted_statKeys\n+                comments_final_dict |= comments_dict\n+                pe_runinfo_list_context_file.append(str(perun_file.name))\n+\n+    qc_list_filenames = peri.save_peri_headerinfo_to_ascii(\n+        peconverted_final_statKeys, comments_final_dict, datadir, ppoid + \"_qc\"\n+    )\n+    return qc_list_filenames\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/expected/parallel/dipole_intensities.npy": [
                        [
                            "Binary files a/VIS_TrapPumping/tests/python/resources/expected/parallel/dipole_intensities.npy and b/VIS_TrapPumping/tests/python/resources/expected/parallel/dipole_intensities.npy differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/expected/parallel/model_fit_data.csv": [
                        [
                            "@@ -1,45 +1,21 @@\n-row,column,phase,model_name,tau_e,P_c,k,50,200,1000,2000,4000,8000\n-23,106,3,TphModel,1452.6496678832923,0.5820764677360261,0.006344940439362704,0.03255,0.06825,0.1526,0.11585,0.04165,0.00385\n-26,120,1,TphModel,921.8908297431107,0.586271755494149,0.000997987984876985,0.0329,0.0924,0.1316,0.0616,0.0063,0.0007\n-27,41,1,TphModel,1459.0066924913963,0.18555120371595518,-0.0006181357613463862,0.0063,0.01785,0.0469,0.03465,0.0091,0.00175\n-32,47,1,TphModel,1616.7737994724316,1.0185041255801661,-0.0010339853465302837,0.0364,0.0938,0.25725,0.20685,0.0763,0.00665\n-35,58,1,TphModel,8028.599816013223,0.7633649846538237,-0.004732899642337236,0.0014,0.0161,0.0686,0.12495,0.1827,0.1708\n-36,41,1,TphModel,1367.713605017534,0.4221946561893116,0.0030239660498058182,0.01855,0.0525,0.10745,0.08015,0.02205,0.0049\n-41,103,3,TphModel,1338.8694230724784,0.14272883189564464,0.001962395295083792,0.01085,0.0196,0.0357,0.02835,0.00875,-0.00175\n-46,78,3,TphModel,973.4272376684303,0.4001518020375076,0.0027681470870812605,0.02625,0.0637,0.0924,0.0497,0.01015,-0.0028\n-45,185,1,TphModel,1701.3081143942547,0.5435196191312373,0.0017845379860348609,0.01925,0.05915,0.12845,0.12705,0.04235,0.00525\n-47,138,3,TphModel,77.95699452109268,0.43768681649133984,0.00043730439115165833,0.10955,0.0315,-0.0021,-0.0007,0.0021,0.00245\n-47,95,1,TphModel,7793.6227353632885,0.5283213044443349,0.0012346621818080073,0.00455,0.0154,0.0532,0.09835,0.126,0.1232\n-56,161,3,TphModel,1787.755932970296,0.10000177517822607,0.0009347356826699178,0.00525,0.00875,0.02485,0.02415,0.00875,0.00315\n-62,23,3,TphModel,1244.9985747044614,0.26426731169879175,0.00424954232997804,0.01715,0.0364,0.0707,0.04445,0.01785,0.0007\n-64,47,3,TphModel,1449.380504672325,0.378027227550353,0.0019014322749074,0.01645,0.04235,0.09765,0.0721,0.02485,0.00245\n-66,87,3,TphModel,1240.2320876447118,0.7016428977687366,0.00482532351086636,0.03675,0.0966,0.17395,0.1197,0.0329,-0.0021\n-78,155,3,TphModel,1604.3911097889643,0.6854986169686391,0.008519891558099315,0.0287,0.0833,0.1771,0.1484,0.06335,0.0091\n-80,172,3,TphModel,116.01682524499972,0.5011540143705047,-0.0002863521774428385,0.11375,0.07315,0.0014,-0.0056,0.0014,0.00175\n-81,23,1,TphModel,1496.4478740161605,0.16605551198313745,0.0012717111391990247,0.00875,0.0161,0.04305,0.03605,0.00735,0.0049\n-90,41,1,TphModel,948.791371426087,0.11369674406666959,0.002388654712029013,0.0056,0.02345,0.0245,0.01855,0.00245,0.00245\n-92,119,3,TphModel,1241.639868059077,0.7031363467537418,0.0036512161869552027,0.03255,0.0875,0.1813,0.1141,0.0287,0.0077\n-102,60,1,TphModel,1454.9078494962025,0.9429437407644756,0.0021350960145482697,0.0364,0.10955,0.2359,0.1806,0.0609,-0.0\n-102,91,1,TphModel,1408.1862837433787,0.6755091480993005,0.008258815919114081,0.02765,0.09275,0.1729,0.13335,0.04795,0.00735\n-107,104,3,TphModel,1509.6248652075221,0.4562869065182071,0.0016375440063309263,0.0175,0.04585,0.12005,0.0875,0.0322,0.00595\n-106,121,1,TphModel,1342.1149474049282,0.4644892895537592,0.004490951586738274,0.01925,0.0616,0.1204,0.08365,0.03045,0.00385\n-112,118,1,TphModel,9605.273693012794,0.1640822934432692,0.0024669373771665924,0.00455,0.0028,0.02135,0.02415,0.04025,0.0427\n-116,6,1,TphModel,1147.8461127574194,0.6053706251601183,-0.0009155525326199262,0.0308,0.0819,0.1421,0.09065,0.0161,-0.0077\n-118,61,3,TphModel,1072.4158366568886,0.13759882873391627,0.0026639746770304243,0.00875,0.02345,0.0343,0.021,0.00805,0.0\n-123,125,3,TphModel,8516.518778940905,0.15338391014107924,0.00016238389431204238,-0.0021,0.0063,0.0168,0.02485,0.03535,0.0371\n-131,88,1,TphModel,1088.4355632439313,0.31770339880602416,0.0044966709850728015,0.0189,0.05075,0.07945,0.04585,0.0189,-0.0021\n-136,174,3,TphModel,9665.91921950624,0.38796764922204163,0.003634186036976428,0.00525,0.01015,0.03955,0.06475,0.0875,0.1001\n-137,134,3,TphModel,1261.102733301201,0.1520421789235971,-0.0010595812031091798,-0.00035,0.0196,0.0364,0.02415,0.00385,0.0035\n-137,89,1,TphModel,9156.509499430087,0.396841160240351,-0.00228022606997416,0.00245,0.00595,0.02835,0.0644,0.08855,0.0938\n-138,92,3,TphModel,5716.999158211981,0.10000000000000002,0.003942260554497571,0.00455,0.01155,0.0196,0.021,0.0266,0.0224\n-146,86,3,TphModel,1058.772181344596,0.3522084580566917,0.007932877602250116,0.0273,0.06125,0.08645,0.0581,0.01505,0.0021\n-156,131,1,TphModel,1458.1569034995757,0.31287074975915885,0.0009190613364105658,0.0154,0.0315,0.0819,0.0581,0.02065,0.0007\n-160,98,3,TphModel,700.1059887912304,0.1594628957285111,0.0006106685861882431,0.0147,0.02765,0.0322,0.0056,0.0014,0.00035\n-163,26,3,TphModel,8694.03850886932,0.12242270693127605,-0.000933950879335843,-0.0007,0.0035,0.0098,0.0175,0.02975,0.02765\n-166,139,1,TphModel,9583.460137226824,0.27318694236791485,-0.0002928944458448922,0.0021,0.007,0.0224,0.03605,0.06755,0.06475\n-167,149,1,TphModel,9467.10193414433,0.8697692946815532,0.004764643384870839,0.0084,0.02135,0.08575,0.1407,0.19775,0.2191\n-169,100,3,TphModel,891.7606787684989,0.47799383025706554,0.0032874623634872075,0.0364,0.07665,0.1085,0.0497,0.0049,0.0007\n-170,121,3,TphModel,1495.7201253005867,0.6535474977002256,0.000778602238669073,0.0224,0.07385,0.16415,0.12495,0.0469,-0.00035\n-171,22,1,TphModel,1273.6256784900888,0.22664351562618026,0.0049168910786986895,0.0119,0.0343,0.0616,0.0399,0.01855,0.00315\n-171,85,1,TphModel,8702.650708019606,0.2357507031869678,0.001159973546042268,0.00245,0.00525,0.02695,0.03745,0.05635,0.05775\n-196,52,3,TphModel,870.5012910508807,0.17631062764441424,0.0007916589548706827,0.0091,0.0294,0.0399,0.01505,0.00525,0.0\n+row,column,phase,model_name,tau_e,P_c,k,10,20,50,100,200,500,1000,2000,4000,8000,16000,cr_flags\n+101,50,4,TphOriginalModel,102.35083269325779,1.0082680149985603,0.0010293994867545194,0.083125,0.15225,0.24325,0.230125,0.1295,0.007,0.000875,0.000875,0.000875,0.000875,0.000875,0\n+100,150,2,TphOriginalModel,1026.347951928741,1.0696067761666173,-0.012830675477954447,-0.0,0.007,0.034125,0.072625,0.144375,0.238,0.245,0.112,0.0105,-0.011375,-0.011375,0\n+101,250,4,TphOriginalModel,9727.213535222782,1.0141813495030898,0.0025359513705520416,0.002625,0.00525,0.007875,0.011375,0.025375,0.049875,0.091875,0.15925,0.223125,0.25725,0.158375,0\n+100,350,2,TphOriginalModel,95.6884565024663,1.0076471742322706,-0.0007693898973793946,0.0875,0.161,0.2415,0.22225,0.1155,0.0035,-0.00175,-0.000875,-0.00175,-0.00175,-0.00175,0\n+101,450,4,TphOriginalModel,999.985062130307,1.0291238845915716,-9.295251462452546e-05,0.0105,0.0245,0.048125,0.084875,0.151375,0.244125,0.244125,0.11725,0.014875,0.00175,0.000875,0\n+200,50,2,TphOriginalModel,1023.6134699956426,1.02152907415423,0.0005022713384306127,0.011375,0.021,0.0455,0.0945,0.14525,0.240625,0.242375,0.126,0.014,0.000875,0.00175,0\n+201,150,4,TphOriginalModel,10091.978088620555,0.9956934906463822,-0.0015228528666759579,0.0,-0.000875,0.0035,0.007875,0.01925,0.04375,0.084,0.1435,0.219625,0.244125,0.161,0\n+200,250,2,TphOriginalModel,100.00336932028941,0.9770264473307969,-0.013935662915323327,0.074375,0.14,0.21525,0.205625,0.109375,-0.00875,-0.01575,-0.016625,-0.014875,-0.01575,-0.01575,0\n+201,350,4,TphOriginalModel,1020.1217222643145,1.0075485861733156,-0.004200514948953611,0.004375,0.014875,0.042,0.077875,0.149625,0.231875,0.231,0.12075,0.011375,-0.002625,-0.002625,0\n+200,450,2,TphOriginalModel,10107.869022340725,0.9943374491733239,-0.005445588563393681,-0.00525,-0.004375,-0.0035,0.004375,0.014,0.04375,0.077875,0.146125,0.21,0.23975,0.158375,0\n+301,50,4,TphOriginalModel,10198.066517127643,1.0471383148691575,-0.0017699350544820363,0.0,0.000875,0.00525,0.007875,0.01925,0.039375,0.084875,0.1575,0.2275,0.2555,0.172375,0\n+300,150,2,TphOriginalModel,103.65413067101268,1.0106503203096389,0.001470606406268881,0.090125,0.14175,0.24675,0.233625,0.130375,0.009625,0.00175,0.00175,-0.0,0.000875,0.000875,0\n+301,250,4,TphOriginalModel,1014.4223748807696,1.0126043155196625,0.00662142768558179,0.018375,0.027125,0.05425,0.0945,0.154875,0.23975,0.25375,0.121625,0.025375,0.006125,0.006125,0\n+300,350,2,TphOriginalModel,10253.655596123479,0.9927502401130136,0.001772543188241305,0.00175,0.0035,0.00525,0.01225,0.020125,0.042875,0.0875,0.154,0.216125,0.244125,0.16975,0\n+301,450,4,TphOriginalModel,98.95322730045002,1.054580618385449,0.010054157670848976,0.093625,0.1715,0.26425,0.252875,0.13125,0.018375,0.0105,0.009625,0.011375,0.0105,0.0105,0\n+400,50,2,TphOriginalModel,100.9679128534108,1.0208937538698677,0.008691833771766957,0.091,0.14875,0.266,0.240625,0.130375,0.0175,0.009625,0.0105,0.009625,0.009625,0.009625,0\n+401,150,4,TphOriginalModel,992.5941578105773,1.047302215265469,-0.006660494998165398,0.002625,0.014,0.041125,0.090125,0.139125,0.25025,0.2345,0.11375,0.011375,-0.00525,-0.00525,0\n+400,250,2,TphOriginalModel,9770.308952361358,0.9914866917529445,-0.0028554312080889413,-0.000875,-0.000875,0.004375,0.007875,0.014,0.044625,0.084,0.1435,0.2205,0.242375,0.151375,0\n+401,350,4,TphOriginalModel,98.87704494135951,0.9620022834894342,-0.001341626460293765,0.081375,0.1435,0.231875,0.216125,0.112875,0.004375,-0.000875,-0.000875,-0.002625,-0.00175,-0.00175,0\n+400,450,2,TphOriginalModel,1046.7665011651598,1.020977320023995,0.0028229219826405296,0.014875,0.021875,0.048125,0.083125,0.15225,0.2415,0.24675,0.130375,0.023625,0.0035,0.0035,0\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/expected/parallel/trap_locations.npy": [
                        [
                            "Binary files a/VIS_TrapPumping/tests/python/resources/expected/parallel/trap_locations.npy and b/VIS_TrapPumping/tests/python/resources/expected/parallel/trap_locations.npy differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/expected/serial/dipole_intensities.npy": [
                        [
                            "Binary files a/VIS_TrapPumping/tests/python/resources/expected/serial/dipole_intensities.npy and b/VIS_TrapPumping/tests/python/resources/expected/serial/dipole_intensities.npy differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/expected/serial/model_fit_data.csv": [
                        [
                            "@@ -1,226 +1,137 @@\n-row,column,phase,model_name,c,0.0,4.75,14.3,28.6,a,b,tau_e,P_c,k,tau_c\n-0,7,,ConstantModel,0.19159374997764927,0.19155,0.1912,0.192075,0.19155,,,,,,\n-0,7,2.0,LinearLogModel,,0.1603946428571431,0.16021964285714313,0.16126964285714313,0.16074464285714313,10000.0,1.0007705201664754,,,,\n-0,9,2.0,LinearLogModel,,0.20298214285714275,0.20306964285714274,0.20306964285714274,0.20315714285714276,10000.0,1.000183005575871,,,,\n-0,9,2.0,LinearLogModel,,0.2936589285714286,0.29409642857142865,0.29374642857142863,0.2941839285714286,10000.0,1.0004183482468554,,,,\n-0,13,2.0,LinearLogModel,,0.37401071428571414,0.37427321428571414,0.37348571428571414,0.37374821428571414,10000.0,0.9994314750757572,,,,\n-0,13,,ConstantModel,0.25639330334465,0.2561964285714286,0.2564589285714286,0.25663392857142864,0.2562839285714286,,,,,,\n-0,15,,ConstantModel,0.3210424107142855,0.3210642857142855,0.3211517857142855,0.3212392857142855,0.3207142857142855,,,,,,\n-0,15,,ConstantModel,0.328037946428571,0.328103571428571,0.327928571428571,0.327666071428571,0.328453571428571,,,,,,\n-0,19,,ConstantModel,0.3272678571428576,0.3267428571428576,0.3278803571428576,0.32683035714285763,0.3276178571428576,,,,,,\n-0,19,2.0,LinearLogModel,,0.242025,0.242375,0.2422875,0.242725,10000.0,1.000696229289503,,,,\n-0,22,3.0,DwellPhase2Model,,0.043610714285714496,0.0433482142857145,0.04369821428571449,0.044485714285714496,,,28577.31947969851,0.871706633278782,0.04320304652154393,\n-0,22,3.0,DwellPhase2Model,,0.10343750000000036,0.10177500000000037,0.09871250000000037,0.09477500000000036,,,-2452.1680962888167,-0.03205517807745144,0.10520809432446139,\n-0,24,1.0,DwellPhase2Model,,0.11793750000000036,0.11496250000000037,0.10831250000000037,0.09965000000000036,,,-1341.6546093960285,-0.12053368610863772,0.12143662582884732,\n-0,24,3.0,DwellPhase2Model,,0.0704125,0.068925,0.065775,0.06175,,,-2662.120759364763,-0.0421501160638509,0.07212848073991218,\n-0,26,2.0,LinearLogModel,,0.08591249999999964,0.08573749999999963,0.08564999999999964,0.08687499999999963,10000.0,1.0009238491976944,,,,\n-0,29,2.0,LinearLogModel,,0.2764374999999996,0.27687499999999965,0.27687499999999965,0.2769624999999996,10000.0,1.0005615203036973,,,,\n-0,31,3.0,DwellPhase2Model,,0.16279285714285688,0.16261785714285687,0.1631428571428569,0.16349285714285688,,,34650.11409614582,1.3367104175310691,0.16253090750613974,\n-0,31,,ConstantModel,0.2515531248050918,0.25174999999999964,0.2511374999999996,0.2508749999999996,0.2524499999999996,,,,,,\n-0,33,,ConstantModel,0.35703258928571446,0.3573607142857145,0.3572732142857145,0.3561357142857145,0.3573607142857145,,,,,,\n-0,33,2.0,LinearLogModel,,0.19981071428571448,0.19954821428571448,0.1994607142857145,0.19928571428571448,10000.0,0.9994151902581798,,,,\n-0,35,2.0,LinearLogModel,,0.18200535714285687,0.1813053571428569,0.18165535714285688,0.1807803571428569,10000.0,0.9988558812355935,,,,\n-0,35,,ConstantModel,0.21559151779997887,0.21556964285714275,0.21565714285714274,0.21556964285714275,0.21556964285714275,,,,,,\n-0,39,,ConstantModel,0.2517410712325033,0.2518285714285714,0.2513035714285714,0.2520910714285714,0.2517410714285714,,,,,,\n-0,40,3.0,DwellPhase2Model,,0.07514285714285725,0.07461785714285725,0.07444285714285724,0.07470535714285724,,,-16.47449253373578,-0.10958099595188399,0.08246428373174028,\n-0,42,,ConstantModel,0.1987401785415142,0.19904642857142862,0.19852142857142863,0.19843392857142864,0.19895892857142863,,,,,,\n-0,42,,ConstantModel,0.42499553571428583,0.4249517857142859,0.42486428571428586,0.42477678571428584,0.42538928571428586,,,,,,\n-0,44,2.0,LinearLogModel,,0.39028392857142863,0.39089642857142864,0.3908089285714286,0.3907214285714286,10000.0,1.000449845053606,,,,\n-0,44,2.0,LinearLogModel,,0.3150464285714286,0.3152214285714286,0.31539642857142863,0.31539642857142863,10000.0,1.000437597179606,,,,\n-0,46,2.0,LinearLogModel,,0.38411428571428585,0.38463928571428585,0.3842892857142859,0.38463928571428585,10000.0,1.0004245897625916,,,,\n-0,46,,ConstantModel,0.2568013390560523,0.2563857142857145,0.2572607142857145,0.2569982142857145,0.2565607142857145,,,,,,\n-0,49,,ConstantModel,0.04357410714285672,0.04388035714285688,0.043092857142856884,0.04361785714285688,0.043705357142856886,,,,,,\n-0,49,2.0,LinearLogModel,,0.02973571428571413,0.02956071428571413,0.03008571428571413,0.03008571428571413,10000.0,1.0005557615330178,,,,\n-0,51,,ConstantModel,0.11249419642825084,0.11234107142857173,0.11277857142857174,0.11260357142857175,0.11225357142857174,,,,,,\n-0,52,2.0,LinearLogModel,,0.2670982142857145,0.2675357142857145,0.26771071428571447,0.2675357142857145,10000.0,1.0005447294380576,,,,\n-0,54,2.0,LinearLogModel,,0.2595375,0.259625,0.2598,0.26015,10000.0,1.0006964760737815,,,,\n-0,56,2.0,LinearLogModel,,0.0532,0.0532,0.0536375,0.0536375,10000.0,1.0006208493357343,,,,\n-0,58,2.0,LinearLogModel,,0.038037499999999634,0.03794999999999964,0.038212499999999636,0.03812499999999964,10000.0,1.0001895037594806,,,,\n-0,58,2.0,LinearLogModel,,0.0739589285714279,0.0738714285714279,0.0739589285714279,0.07413392857142789,10000.0,1.0002062949327515,,,,\n-0,60,,ConstantModel,0.11659553571385815,0.11707678571428515,0.11646428571428515,0.11611428571428514,0.11672678571428514,,,,,,\n-0,61,2.0,LinearLogModel,,0.10345892857142862,0.10459642857142862,0.10555892857142862,0.10660892857142862,10000.0,1.0036565645615203,,,,\n-0,63,2.0,LinearLogModel,,0.10032142857142899,0.10128392857142898,0.10145892857142899,0.10172142857142899,10000.0,1.0015543859767424,,,,\n-0,65,,ConstantModel,0.14717098214012278,0.14719285714285688,0.14745535714285687,0.14736785714285688,0.14666785714285688,,,,,,\n-0,67,3.0,DwellPhase2Model,,0.118525,0.1193125,0.11905,0.119225,,,0.8511033430614455,1.453053116732248,0.08799510576459302,\n-0,68,2.0,LinearLogModel,,0.6229857142857145,0.6226357142857145,0.6228107142857144,0.6224607142857145,10000.0,0.9995163175089486,,,,\n-0,72,,ConstantModel,0.24744285697186882,0.24805535714285726,0.24691785714285724,0.24761785714285725,0.24718035714285724,,,,,,\n-0,72,2.0,LinearLogModel,,0.31837678571428585,0.31811428571428585,0.3177642857142859,0.31758928571428585,10000.0,0.9990426805342099,,,,\n-0,74,,ConstantModel,0.2608482140256721,0.2609357142857141,0.2612857142857141,0.2602357142857141,0.2609357142857141,,,,,,\n-0,74,,ConstantModel,0.17769107141630172,0.177778571428571,0.177603571428571,0.17742857142857102,0.17795357142857102,,,,,,\n-0,78,2.0,LinearLogModel,,0.3437321428571431,0.34390714285714313,0.34443214285714313,0.34443214285714313,10000.0,1.0009342516464852,,,,\n-0,78,2.0,LinearLogModel,,0.4353357142857141,0.4351607142857141,0.4353357142857141,0.4355982142857141,10000.0,1.000324210110859,,,,\n-0,80,,ConstantModel,0.39587633928571375,0.3960732142857138,0.39581071428571374,0.39554821428571374,0.3960732142857138,,,,,,\n-0,80,,ConstantModel,0.4143151785714286,0.4147089285714286,0.4142714285714286,0.41383392857142864,0.4144464285714286,,,,,,\n-0,84,,ConstantModel,0.15812410713801286,0.15816785714285725,0.15808035714285726,0.15773035714285724,0.15851785714285724,,,,,,\n-0,85,1.0,DwellPhase2Model,,0.028592857142857246,0.028417857142857248,0.028592857142857246,0.029205357142857248,,,41534.61337896183,0.30321277376694444,0.028301600519420583,\n-0,87,2.0,LinearLogModel,,0.11777142857142898,0.11777142857142898,0.11829642857142898,0.11855892857142898,10000.0,1.0010101501202422,,,,\n-0,87,2.0,LinearLogModel,,0.2473857142857145,0.2472982142857145,0.2475607142857145,0.2475607142857145,10000.0,1.000277881041806,,,,\n-0,91,2.0,LinearLogModel,,0.3438410714285714,0.3432285714285714,0.3432285714285714,0.3430535714285714,10000.0,0.9991608215797237,,,,\n-0,94,,ConstantModel,0.07844374999998194,0.07805,0.078575,0.078925,0.078225,,,,,,\n-0,94,2.0,LinearLogModel,,0.15378214285714312,0.15430714285714311,0.1548321428571431,0.15421964285714312,10000.0,1.0006941532817297,,,,\n-0,97,,ConstantModel,0.08066071428569156,0.08022321428571413,0.08101071428571413,0.08048571428571413,0.08092321428571413,,,,,,\n-0,97,2.0,LinearLogModel,,0.10810178571428551,0.1079267857142855,0.10801428571428551,0.10862678571428551,10000.0,1.0005535507860366,,,,\n-0,100,,ConstantModel,0.09032366071423019,0.09065178571428587,0.09012678571428587,0.09021428571428587,0.09030178571428588,,,,,,\n-0,100,,ConstantModel,0.10865401785689988,0.10889464285714312,0.10828214285714312,0.10863214285714312,0.10880714285714312,,,,,,\n-0,104,,ConstantModel,0.3284053571428569,0.3283178571428569,0.3291928571428569,0.32796785714285687,0.3281428571428569,,,,,,\n-0,106,,ConstantModel,0.1613919642800123,0.16161071428571414,0.16161071428571414,0.16091071428571413,0.16143571428571413,,,,,,\n-0,106,,ConstantModel,0.06861473214285105,0.06859285714285725,0.06868035714285725,0.06841785714285725,0.06876785714285724,,,,,,\n-0,112,2.0,LinearLogModel,,0.29105357142857174,0.2912285714285717,0.2914910714285717,0.29166607142857176,10000.0,1.0007385208759803,,,,\n-0,114,2.0,LinearLogModel,,0.27023928571428624,0.27023928571428624,0.27076428571428623,0.27076428571428623,10000.0,1.0007450194473915,,,,\n-0,115,,ConstantModel,0.2533294640795967,0.25337321428571413,0.25258571428571414,0.25372321428571415,0.25363571428571413,,,,,,\n-0,117,,ConstantModel,0.2937821428571424,0.29395714285714236,0.2935196428571424,0.2938696428571424,0.2937821428571424,,,,,,\n-0,117,,ConstantModel,0.19899374996978011,0.19921249999999963,0.19921249999999963,0.19824999999999965,0.19929999999999964,,,,,,\n-0,120,2.0,LinearLogModel,,0.21827500000000072,0.21880000000000072,0.21862500000000074,0.21897500000000072,10000.0,1.0006729398516403,,,,\n-0,122,2.0,LinearLogModel,,0.3663071428571435,0.3665696428571435,0.3673571428571435,0.36718214285714346,10000.0,1.0012246457506102,,,,\n-0,122,2.0,LinearLogModel,,0.31644107142857175,0.31670357142857175,0.31705357142857177,0.3167910714285717,10000.0,1.000515434994595,,,,\n-0,126,2.0,LinearLogModel,,0.14017857142857137,0.14009107142857138,0.1395660714285714,0.13939107142857138,10000.0,0.9989835980792503,,,,\n-0,126,2.0,LinearLogModel,,0.14934107142857136,0.14916607142857138,0.14934107142857136,0.14899107142857138,10000.0,0.9997055748744305,,,,\n-0,129,2.0,LinearLogModel,,0.25846428571428587,0.25863928571428585,0.25863928571428585,0.2588142857142859,10000.0,1.000366011151807,,,,\n-0,135,2.0,LinearLogModel,,0.24719285714285688,0.2471053571428569,0.24666785714285688,0.2465803571428569,10000.0,0.9991961448840448,,,,\n-0,135,2.0,LinearLogModel,,0.3782696428571431,0.37818214285714313,0.3783571428571431,0.3786196428571431,10000.0,1.0004188300455312,,,,\n-0,137,,ConstantModel,0.403849553571429,0.403783928571429,0.404046428571429,0.403871428571429,0.403696428571429,,,,,,\n-0,137,,ConstantModel,0.21211874994976426,0.21198750000000036,0.21242500000000036,0.21207500000000037,0.21198750000000036,,,,,,\n-0,140,3.0,DwellPhase1Model,,0.037853571428571375,0.053866071428571374,0.08274107142857137,0.11931607142857138,,,18.914868909971585,,0.03786118345848715,0.4387328555387605\n-0,140,1.0,DwellPhase2Model,,0.035967857142856885,0.06659285714285688,0.12486785714285688,0.1989803571428569,,,131.05508097803747,0.6152089508252571,0.002554158991956793,\n-0,143,2.0,LinearLogModel,,0.19055000000000036,0.18985000000000035,0.19002500000000036,0.18941250000000037,10000.0,0.9988726721030293,,,,\n-0,143,2.0,LinearLogModel,,0.412375,0.412025,0.4115,0.4115,10000.0,0.9988764607584373,,,,\n-0,145,2.0,LinearLogModel,,0.38958571428571376,0.38844821428571374,0.38871071428571374,0.38853571428571376,10000.0,0.9989655743347565,,,,\n-0,147,,ConstantModel,0.4155982142857145,0.4155107142857145,0.4156857142857145,0.4153357142857145,0.4158607142857145,,,,,,\n-0,150,2.0,LinearLogModel,,0.2787803571428576,0.2790428571428576,0.27921785714285763,0.2797428571428576,10000.0,1.001062487225061,,,,\n-0,153,2.0,LinearLogModel,,0.23839285714285688,0.23821785714285687,0.2383053571428569,0.23821785714285687,10000.0,0.9998465356500378,,,,\n-0,153,,ConstantModel,0.1316232142845914,0.13179821428571414,0.13136071428571414,0.13171071428571413,0.13162321428571414,,,,,,\n-0,155,,ConstantModel,0.12543348214209254,0.12536785714285725,0.12501785714285724,0.12589285714285725,0.12545535714285724,,,,,,\n-0,160,2.0,LinearLogModel,,0.3798303571428576,0.3800928571428576,0.3799178571428576,0.3800928571428576,10000.0,1.0002122887662337,,,,\n-0,161,,ConstantModel,0.22175491064275524,0.22177678571428625,0.22151428571428625,0.22195178571428623,0.22177678571428625,,,,,,\n-0,163,2.0,LinearLogModel,,0.13006964285714312,0.13050714285714313,0.13033214285714312,0.13085714285714312,10000.0,1.0007550649523416,,,,\n-0,163,,ConstantModel,0.14778705356860197,0.14780892857142863,0.14789642857142862,0.14745892857142862,0.1479839285714286,,,,,,\n-0,165,,ConstantModel,0.15457946428167071,0.1545357142857145,0.1548857142857145,0.15444821428571448,0.15444821428571448,,,,,,\n-0,165,,ConstantModel,0.2667879461175963,0.2669410714285714,0.26685357142857136,0.2665035714285714,0.26685357142857136,,,,,,\n-0,167,,ConstantModel,0.2429343748522621,0.24326249999999963,0.24264999999999964,0.24264999999999964,0.24317499999999964,,,,,,\n-0,168,,ConstantModel,0.33037589285714275,0.33041964285714276,0.33041964285714276,0.3305071428571428,0.33015714285714276,,,,,,\n-0,170,,ConstantModel,0.4467745535714282,0.44670892857142824,0.44697142857142824,0.44679642857142826,0.4466214285714283,,,,,,\n-0,171,,ConstantModel,0.3936075892857145,0.3933232142857145,0.3939357142857145,0.3937607142857145,0.3934107142857145,,,,,,\n-0,175,2.0,LinearLogModel,,0.20499999999999963,0.20517499999999964,0.20569999999999963,0.20534999999999964,10000.0,1.0005807692363928,,,,\n-0,178,2.0,LinearLogModel,,0.1867928571428565,0.18688035714285653,0.1865303571428565,0.18644285714285652,10000.0,0.9995095721552872,,,,\n-0,180,2.0,LinearLogModel,,0.26928035714285686,0.2698928571428569,0.2698928571428569,0.27006785714285686,10000.0,1.000839154561518,,,,\n-0,182,2.0,LinearLogModel,,0.32682678571428586,0.32708928571428586,0.32735178571428586,0.3277017857142859,10000.0,1.0010099033451603,,,,\n-0,187,,ConstantModel,0.12445982142785313,0.12450357142857174,0.12476607142857174,0.12397857142857174,0.12459107142857175,,,,,,\n-0,188,,ConstantModel,0.21562589279990635,0.21549464285714276,0.21601964285714276,0.21558214285714275,0.21540714285714274,,,,,,\n-0,190,2.0,LinearLogModel,,0.1093375,0.1096875,0.1096875,0.110125,10000.0,1.000820399183,,,,\n-0,190,2.0,LinearLogModel,,0.3161392857142855,0.3167517857142855,0.31648928571428553,0.3171892857142855,10000.0,1.0009969062006001,,,,\n-0,192,2.0,LinearLogModel,,0.4024410714285714,0.4019160714285714,0.40200357142857135,0.40182857142857137,10000.0,0.9993796374858329,,,,\n-0,193,,ConstantModel,0.14698749999729296,0.1471625,0.14655,0.1469875,0.14725,,,,,,\n-0,196,2.0,LinearLogModel,,0.23745357142857138,0.23762857142857138,0.23797857142857137,0.23797857142857137,10000.0,1.0006859369961665,,,,\n-0,197,2.0,LinearLogModel,,0.06394642857142863,0.06359642857142862,0.06298392857142862,0.06350892857142862,10000.0,0.9992825571533451,,,,\n-0,200,,ConstantModel,0.3360357142857145,0.3358607142857145,0.3362982142857145,0.3355107142857145,0.3364732142857145,,,,,,\n-0,200,2.0,LinearLogModel,,0.267175,0.2669125,0.267875,0.2684875,10000.0,1.0017006212008495,,,,\n-0,202,2.0,LinearLogModel,,0.202933928571429,0.20232142857142899,0.202933928571429,0.203721428571429,10000.0,1.0010021806272018,,,,\n-0,203,2.0,LinearLogModel,,0.08094464285714276,0.08138214285714275,0.08120714285714276,0.08181964285714276,10000.0,1.0008434417925538,,,,\n-0,206,,ConstantModel,0.18275446427036893,0.18288571428571448,0.18262321428571449,0.18262321428571449,0.18288571428571448,,,,,,\n-0,208,2.0,LinearLogModel,,0.08381071428571377,0.08354821428571377,0.08381071428571377,0.08416071428571377,10000.0,1.0004421312025256,,,,\n-0,210,,ConstantModel,0.03764732142857096,0.037603571428571014,0.037603571428571014,0.03742857142857101,0.03795357142857101,,,,,,\n-0,211,,ConstantModel,0.05890937499999817,0.0588,0.05915,0.05845,0.0592375,,,,,,\n-0,213,,ConstantModel,0.04979419642857126,0.04972857142857174,0.05007857142857174,0.04955357142857174,0.04981607142857174,,,,,,\n-0,213,,ConstantModel,0.0554549107142851,0.055214285714286236,0.05582678571428623,0.05530178571428623,0.055476785714286235,,,,,,\n-0,216,1.0,DwellPhase2Model,,0.18858571428571413,0.18744821428571412,0.18753571428571414,0.18753571428571414,,,-13.390859805722844,-0.1448639414600329,0.19999999999999998,\n-0,218,,ConstantModel,0.40514151785714275,0.40529464285714273,0.40468214285714277,0.40590714285714274,0.40468214285714277,,,,,,\n-0,220,,ConstantModel,0.33464285714285724,0.3345553571428572,0.3342928571428572,0.3353428571428572,0.33438035714285724,,,,,,\n-0,220,2.0,LinearLogModel,,0.22781428571428586,0.22728928571428586,0.22755178571428586,0.22685178571428588,10000.0,0.999097722479816,,,,\n-0,222,,ConstantModel,0.3042098214285714,0.3042535714285714,0.3041660714285714,0.30434107142857136,0.30407857142857136,,,,,,\n-0,222,2.0,LinearLogModel,,0.431178571428571,0.431616071428571,0.431878571428571,0.431703571428571,10000.0,1.0006688959696612,,,,\n-0,224,2.0,LinearLogModel,,0.3747374999999996,0.3744749999999996,0.37412499999999965,0.37429999999999963,10000.0,0.9993961757960537,,,,\n-0,224,2.0,LinearLogModel,,0.27565535714285727,0.27548035714285724,0.27521785714285724,0.2753928571428573,10000.0,0.9996149866980251,,,,\n-0,227,,ConstantModel,0.373371875,0.372825,0.37335,0.37405,0.3732625,,,,,,\n-0,227,,ConstantModel,0.3307174107142855,0.33056428571428553,0.3303892857142855,0.3317892857142855,0.3301267857142855,,,,,,\n-0,229,,ConstantModel,0.23493839274391862,0.23463214285714312,0.23480714285714313,0.2355071428571431,0.23480714285714313,,,,,,\n-0,229,2.0,LinearLogModel,,0.2993035714285721,0.29965357142857213,0.3000035714285721,0.3000035714285721,10000.0,1.0008751943599992,,,,\n-0,233,,ConstantModel,0.12126160714227335,0.12156785714285724,0.12104285714285724,0.12121785714285725,0.12121785714285725,,,,,,\n-0,233,,ConstantModel,0.1255901785706563,0.12589642857142863,0.12537142857142863,0.12554642857142861,0.12554642857142861,,,,,,\n-0,238,3.0,DwellPhase2Model,,0.04432142857142862,0.04432142857142862,0.04432142857142862,0.044496428571428624,,,163172.19881639877,0.07128399675050323,0.04426321648789183,\n-0,240,2.0,LinearLogModel,,0.34752142857142826,0.34717142857142824,0.34795892857142824,0.3478714285714283,10000.0,1.0006506144268905,,,,\n-0,245,,ConstantModel,0.26462857113703864,0.2655035714285717,0.2641035714285717,0.2638410714285717,0.26506607142857175,,,,,,\n-0,245,2.0,LinearLogModel,,0.27735357142857103,0.276653571428571,0.277003571428571,0.276653571428571,10000.0,0.9993861426026006,,,,\n-0,248,,ConstantModel,0.2329660713226879,0.23305357142857175,0.23270357142857173,0.23287857142857174,0.23322857142857173,,,,,,\n-0,248,2.0,LinearLogModel,,0.22000178571428586,0.21947678571428586,0.21973928571428586,0.21921428571428586,10000.0,0.9992744762680357,,,,\n-0,250,2.0,LinearLogModel,,0.1575928571428569,0.1571553571428569,0.15750535714285688,0.15706785714285687,10000.0,0.9995816517508712,,,,\n-0,250,2.0,LinearLogModel,,0.2881642857142855,0.2883392857142855,0.2886017857142855,0.2888642857142855,10000.0,1.0008268977699646,,,,\n-0,252,,ConstantModel,0.32473660714285724,0.32478035714285725,0.3249553571428572,0.32443035714285723,0.32478035714285725,,,,,,\n-0,252,2.0,LinearLogModel,,0.22333928571428552,0.22307678571428552,0.2229017857142855,0.2226392857142855,10000.0,0.9992026434562223,,,,\n-0,254,,ConstantModel,0.21434866065969121,0.2143267857142855,0.2144142857142855,0.2140642857142855,0.2145892857142855,,,,,,\n-0,255,2.0,LinearLogModel,,0.25260892857142864,0.2525214285714286,0.2533089285714286,0.25287142857142864,10000.0,1.0005810160215312,,,,\n-0,257,,ConstantModel,0.3999370535714286,0.3998714285714286,0.4004839285714286,0.40004642857142864,0.3993464285714286,,,,,,\n-0,257,,ConstantModel,0.3013361607142855,0.3011392857142855,0.3020142857142855,0.3010517857142855,0.3011392857142855,,,,,,\n-0,259,2.0,LinearLogModel,,0.1596392857142855,0.1601642857142855,0.1599017857142855,0.1609517857142855,10000.0,1.0012557850919712,,,,\n-0,259,,ConstantModel,0.2264379463441065,0.2265035714285714,0.22580357142857138,0.22632857142857138,0.22711607142857138,,,,,,\n-0,261,,ConstantModel,0.1838852678410247,0.18408214285714275,0.18355714285714275,0.18416964285714274,0.18373214285714276,,,,,,\n-0,263,,ConstantModel,0.3421607142857149,0.34224821428571484,0.3421607142857149,0.34181071428571486,0.34242321428571487,,,,,,\n-0,266,2.0,LinearLogModel,,0.2537767857142855,0.2543892857142855,0.2543892857142855,0.2542142857142855,10000.0,1.0004856469824046,,,,\n-0,267,,ConstantModel,0.3079941964285714,0.3080160714285714,0.30810357142857137,0.3077535714285714,0.30810357142857137,,,,,,\n-0,269,2.0,LinearLogModel,,0.23563214285714276,0.23545714285714275,0.23510714285714276,0.23475714285714275,10000.0,0.9989605554276956,,,,\n-0,269,2.0,LinearLogModel,,0.237925,0.2373125,0.23705,0.2366125,10000.0,0.998523205032069,,,,\n-0,271,2.0,LinearLogModel,,0.2299946428571431,0.22981964285714312,0.2292071428571431,0.2294696428571431,10000.0,0.9992066839618436,,,,\n-0,275,,ConstantModel,0.17767723213059555,0.17739285714285724,0.17818035714285724,0.17756785714285725,0.17756785714285725,,,,,,\n-0,276,,ConstantModel,0.07093392857142017,0.07093392857142826,0.07093392857142826,0.07119642857142826,0.07067142857142826,,,,,,\n-0,280,2.0,LinearLogModel,,0.18778214285714312,0.18673214285714312,0.1871696428571431,0.18620714285714313,10000.0,0.9985131595231698,,,,\n-0,280,,ConstantModel,0.21220312494960472,0.2126625,0.2117875,0.212575,0.2117875,,,,,,\n-0,282,2.0,LinearLogModel,,0.056660714285714495,0.056398214285714496,0.05648571428571449,0.056398214285714496,10000.0,0.9997519067932145,,,,\n-0,283,2.0,LinearLogModel,,0.03942142857142935,0.03854642857142935,0.03854642857142935,0.03880892857142935,10000.0,0.9993188434945113,,,,\n-0,286,,ConstantModel,0.17802633927325925,0.17804821428571413,0.17787321428571412,0.17857321428571413,0.17761071428571412,,,,,,\n-0,286,2.0,LinearLogModel,,0.4043267857142855,0.4042392857142855,0.4041517857142855,0.4035392857142855,10000.0,0.9991625569746961,,,,\n-0,288,,ConstantModel,0.37103883928571413,0.3707107142857141,0.37132321428571413,0.37088571428571415,0.3712357142857141,,,,,,\n-0,292,,ConstantModel,0.2072013392440301,0.20713571428571412,0.20731071428571413,0.20704821428571413,0.20731071428571413,,,,,,\n-0,296,3.0,DwellPhase2Model,,0.036562500000000366,0.03691250000000036,0.03708750000000036,0.036825000000000364,,,50.32570217111415,0.04067492709934583,0.03295933939617139,\n-0,296,3.0,DwellPhase2Model,,0.0737732142857145,0.0711482142857145,0.0672107142857145,0.06161071428571449,,,-1751.523096930389,-0.04364587035537629,0.07613878623342006,\n-0,298,1.0,DwellPhase2Model,,0.150383928571429,0.145221428571429,0.13787142857142898,0.12597142857142898,,,-1033.4797686433528,-0.16180695705429177,0.15447711461365074,\n-0,298,2.0,LinearLogModel,,0.21423035714285724,0.21169285714285724,0.20784285714285725,0.20206785714285724,10000.0,0.9859594172632307,,,,\n-0,300,,ConstantModel,0.14574419642604117,0.145853571428571,0.146028571428571,0.145328571428571,0.145766071428571,,,,,,\n-0,300,2.0,LinearLogModel,,0.06745357142857102,0.06727857142857101,0.06666607142857102,0.06701607142857101,10000.0,0.9992950607480191,,,,\n-0,302,2.0,LinearLogModel,,0.082825,0.082825,0.0820375,0.0823,10000.0,0.9991476014567577,,,,\n-0,303,,ConstantModel,0.1017397321427133,0.10084285714285725,0.10241785714285724,0.10145535714285725,0.10224285714285725,,,,,,\n-0,306,,ConstantModel,0.3460638392857145,0.3462607142857145,0.3458232142857145,0.3461732142857145,0.3459982142857145,,,,,,\n-0,308,,ConstantModel,0.08127857142854776,0.08057857142857174,0.08145357142857174,0.08206607142857174,0.08101607142857174,,,,,,\n-0,311,,ConstantModel,0.33110312500000033,0.33095000000000036,0.33156250000000037,0.33130000000000037,0.33060000000000034,,,,,,\n-0,316,,ConstantModel,0.2538267855049313,0.25382678571428624,0.25356428571428624,0.2542642857142862,0.25365178571428626,,,,,,\n-0,317,,ConstantModel,0.13347187499874483,0.13309999999999964,0.13379999999999964,0.13388749999999963,0.13309999999999964,,,,,,\n-0,320,,ConstantModel,0.2593687497514476,0.25967499999999966,0.25941249999999966,0.25879999999999964,0.25958749999999964,,,,,,\n-0,322,2.0,LinearLogModel,,0.2999517857142862,0.3002142857142862,0.30012678571428625,0.3007392857142862,10000.0,1.0007783543932631,,,,\n-0,326,,ConstantModel,0.2720343746370017,0.2721875,0.2716625,0.272275,0.2720125,,,,,,\n-0,326,,ConstantModel,0.28454776733833703,0.2843946428571428,0.28430714285714276,0.2851821428571428,0.28430714285714276,,,,,,\n-0,328,,ConstantModel,0.18748392855262105,0.18704642857142825,0.18748392857142826,0.18818392857142827,0.18722142857142826,,,,,,\n-0,328,2.0,LinearLogModel,,0.36643749999999964,0.36643749999999964,0.36669999999999964,0.3668749999999996,10000.0,1.0005492481783596,,,,\n-0,330,,ConstantModel,0.3574013392857141,0.3575107142857141,0.3571607142857141,0.35698571428571413,0.3579482142857141,,,,,,\n-0,331,2.0,LinearLogModel,,0.23099642857142863,0.2311714285714286,0.23038392857142861,0.23047142857142863,10000.0,0.9991601050858264,,,,\n-0,334,2.0,LinearLogModel,,0.1523357142857145,0.15216071428571448,0.15216071428571448,0.1518107142857145,10000.0,0.9994572350584637,,,,\n-0,338,2.0,LinearLogModel,,0.1623446428571424,0.16278214285714238,0.1628696428571424,0.16295714285714238,10000.0,1.000685690210668,,,,\n-0,339,,ConstantModel,0.31201205357142897,0.312471428571429,0.311508928571429,0.312296428571429,0.311771428571429,,,,,,\n-0,341,2.0,LinearLogModel,,0.21198392857142898,0.21198392857142898,0.212333928571429,0.212771428571429,10000.0,1.000938564102451,,,,\n-0,343,,ConstantModel,0.18383973212677096,0.18408035714285725,0.18329285714285726,0.18434285714285725,0.18364285714285725,,,,,,\n-0,345,,ConstantModel,0.22231428564130712,0.22231428571428588,0.22161428571428587,0.22283928571428588,0.22248928571428586,,,,,,\n-0,345,,ConstantModel,0.13617232142709967,0.13612857142857174,0.13586607142857174,0.13656607142857174,0.13612857142857174,,,,,,\n-0,348,2.0,LinearLogModel,,0.13085357142857137,0.13120357142857136,0.13129107142857138,0.13164107142857137,10000.0,1.0008561922067445,,,,\n-0,349,,ConstantModel,0.31310401785714315,0.3127321428571431,0.3137821428571431,0.31334464285714314,0.31255714285714314,,,,,,\n-0,351,2.0,LinearLogModel,,0.2569517857142859,0.2569517857142859,0.2569517857142859,0.2569517857142859,10000.0,0.9999999999999822,,,,\n-0,352,,ConstantModel,0.24301339270902245,0.2430571428571424,0.2430571428571424,0.24288214285714238,0.2430571428571424,,,,,,\n-0,355,,ConstantModel,0.3065950892857145,0.3064857142857145,0.3070982142857145,0.3063982142857145,0.3063982142857145,,,,,,\n-0,358,2.0,LinearLogModel,,0.3542589285714286,0.35495892857142863,0.3547839285714286,0.3550464285714286,10000.0,1.0007738003447608,,,,\n-0,358,2.0,LinearLogModel,,0.42887142857142824,0.42930892857142827,0.42957142857142827,0.42957142857142827,10000.0,1.0008456495312725,,,,\n-0,360,2.0,LinearLogModel,,0.30824821428571375,0.3081607142857138,0.30859821428571377,0.30851071428571375,10000.0,1.0004378439633577,,,,\n-0,361,2.0,LinearLogModel,,0.5150553571428569,0.5161928571428569,0.5156678571428569,0.5162803571428569,10000.0,1.001103791353242,,,,\n-0,363,,ConstantModel,0.5650598214285678,0.564491071428571,0.565541071428571,0.565278571428571,0.564928571428571,,,,,,\n-0,363,,ConstantModel,0.22491562491994654,0.22484999999999963,0.22511249999999963,0.22519999999999962,0.22449999999999964,,,,,,\n-0,366,,ConstantModel,0.15321116071051868,0.15318928571428586,0.15327678571428588,0.15362678571428587,0.15275178571428588,,,,,,\n-0,368,2.0,LinearLogModel,,0.09729285714285761,0.09711785714285762,0.0972053571428576,0.09703035714285761,10000.0,0.9997581587294848,,,,\n-0,370,,ConstantModel,0.20273124996495714,0.2026,0.20295,0.2028625,0.2025125,,,,,,\n-0,370,,ConstantModel,0.20075982139614998,0.200453571428571,0.20132857142857102,0.20062857142857102,0.20062857142857102,,,,,,\n-0,373,,ConstantModel,0.4018022321428572,0.4016053571428572,0.4018678571428572,0.40204285714285726,0.40169285714285724,,,,,,\n-0,374,,ConstantModel,0.14035848214098295,0.1400303571428569,0.1404678571428569,0.14108035714285688,0.13985535714285688,,,,,,\n-0,377,2.0,LinearLogModel,,0.044680357142857244,0.04494285714285725,0.04476785714285725,0.045117857142857244,10000.0,1.0003890535120514,,,,\n-0,378,,ConstantModel,0.2371709820207905,0.23675535714285725,0.23754285714285725,0.23728035714285725,0.23710535714285724,,,,,,\n-0,383,3.0,DwellPhase2Model,,0.18480714285714275,0.18340714285714274,0.18401964285714276,0.18349464285714276,,,-7.570193609352153,-0.23538999424142998,0.19999999999999965,\n-0,386,2.0,LinearLogModel,,0.14897857142857138,0.14854107142857137,0.14801607142857137,0.14792857142857138,10000.0,0.9986934602455738,,,,\n-0,387,2.0,LinearLogModel,,0.1306642857142855,0.1303142857142855,0.1294392857142855,0.1295267857142855,10000.0,0.9984681630805194,,,,\n-0,389,,ConstantModel,0.13658303571277766,0.1365392857142855,0.1370642857142855,0.1367142857142855,0.1360142857142855,,,,,,\n-0,389,,ConstantModel,0.291225446428571,0.290853571428571,0.291203571428571,0.291728571428571,0.291116071428571,,,,,,\n-0,391,,ConstantModel,0.4122508928571427,0.41211964285714275,0.4114196428571428,0.41316964285714275,0.41229464285714273,,,,,,\n-0,392,2.0,LinearLogModel,,0.3037089285714283,0.30353392857142825,0.30309642857142827,0.30309642857142827,10000.0,0.9991898930966886,,,,\n-0,394,2.0,LinearLogModel,,0.45256428571428586,0.4529142857142859,0.4526517857142859,0.4518642857142859,10000.0,0.9992106111211327,,,,\n+column,phase,model_name,tau_e,P_c,k,0.0,4.75,14.3,28.6,57.0,114.0,228.0,342.0,cr_flags\n+9,3,DwellPhase2Model,96.32163159082843,1.0677753404901233,-0.0447683491153809,-0.0,0.0441875,0.1203125,0.2506875,0.4134375,0.6566875,0.854,0.9498125,0\n+19,2,DwellPhase2Model,1005.6150408736715,1.191809837814383,-0.0035119408635046145,0.0,0.0083125,0.014,0.030625,0.051625,0.112875,0.203875,0.2953125,0\n+39,2,DwellPhase2Model,96.64318005208109,1.041119301013108,-0.041994924186710345,0.0,0.0485625,0.1360625,0.230125,0.4221875,0.6391875,0.8553125,0.9191875,0\n+49,3,DwellPhase2Model,1051.6711261573432,1.7248590938846549,-0.005195817300403239,-0.0,0.0021875,0.0083125,0.0275625,0.056,0.1085,0.195125,0.296625,0\n+69,3,DwellPhase2Model,94.65298535079543,1.0605700430261142,-0.04541474907049649,-0.0,0.0503125,0.1220625,0.25375,0.40425,0.6615,0.872375,0.92925,0\n+79,2,DwellPhase2Model,970.2645343210801,1.2119737029180249,-0.003937441258570119,0.0,0.0056875,0.016625,0.02625,0.0599375,0.1168125,0.207375,0.30625,0\n+99,2,DwellPhase2Model,92.79525413105434,1.0352829197164246,-0.047081031780742764,0.0,0.04375,0.137375,0.240625,0.412125,0.655375,0.8570625,0.9065,0\n+109,3,DwellPhase2Model,1025.085837346529,1.9999020378507144,-0.0024362940764075403,-0.0,0.0056875,0.0144375,0.0315,0.0595,0.1159375,0.202125,0.3119375,0\n+129,3,DwellPhase2Model,100.42169232168027,1.065480066888981,-0.0400672914455041,-0.0,0.049,0.121625,0.2401875,0.4108125,0.6374375,0.861,0.942375,0\n+139,2,DwellPhase2Model,929.3033937758914,0.8684659453642597,-0.0067043276289810265,0.0,0.004375,0.0135625,0.027125,0.056,0.1071875,0.21525,0.2926875,0\n+159,2,DwellPhase2Model,94.06369856628301,1.0631050894969052,-0.04445115279487552,0.0,0.0459375,0.1290625,0.25025,0.426125,0.658875,0.8579375,0.9471875,0\n+169,3,DwellPhase2Model,1083.1423325701624,1.9999999999999962,-0.001446248937134724,-0.0,0.00175,0.0153125,0.0301875,0.063875,0.1141875,0.1841875,0.301,0\n+189,3,DwellPhase2Model,99.47885104358318,1.048137230800977,-0.037159997028328035,-0.0,0.0455,0.1369375,0.2410625,0.420875,0.6383125,0.8378125,0.94325,0\n+199,2,DwellPhase2Model,1047.7192312803363,1.9999999999999987,-0.004927879065792619,0.0,0.0035,0.013125,0.025375,0.056,0.10675,0.1973125,0.303625,0\n+219,2,DwellPhase2Model,91.90987707477188,1.0351986937758098,-0.04976916827265443,0.0,0.0433125,0.1238125,0.24325,0.420875,0.6628125,0.8264375,0.9235625,0\n+229,3,DwellPhase2Model,1026.372917479893,1.0356729326678784,-0.004136006107898113,-0.0,0.004375,0.0144375,0.0284375,0.0546875,0.1045625,0.1981875,0.2830625,0\n+249,3,DwellPhase2Model,95.98744602258473,1.0784377577411453,-0.04389330223629068,-0.0,0.0450625,0.12425,0.2498125,0.4204375,0.6628125,0.8570625,0.9638125,0\n+259,2,DwellPhase2Model,885.1887146387097,0.6889696336266559,-0.004855290980332201,0.0,0.007,0.0153125,0.0315,0.063,0.112,0.21525,0.2905,0\n+279,2,DwellPhase2Model,95.73431734245382,1.0949850261129885,-0.048964183799173965,0.0,0.042,0.125125,0.2366875,0.4090625,0.6593125,0.9008125,0.947625,0\n+289,3,DwellPhase2Model,1060.9322365606756,1.9999753824502828,-0.004324496080943784,-0.0,0.004375,0.011375,0.0328125,0.0441875,0.11375,0.1964375,0.2988125,0\n+309,3,DwellPhase2Model,98.27125825078852,1.0577152264041954,-0.04369287519499911,-0.0,0.0455,0.1246875,0.240625,0.40075,0.644875,0.865375,0.926625,0\n+319,2,DwellPhase2Model,929.4213652486102,0.9168974186290015,-0.004282470821970137,0.0,0.007,0.01925,0.030625,0.0538125,0.114625,0.2165625,0.29925,0\n+339,2,DwellPhase2Model,102.17658073942407,1.095184392824082,-0.04259711702803101,0.0,0.042875,0.12775,0.2226875,0.39725,0.655375,0.8645,0.965125,0\n+349,3,DwellPhase2Model,992.5875545619273,1.0909456977375944,-0.003558342043828834,-0.0,0.00525,0.014875,0.02975,0.060375,0.1085,0.20475,0.294875,0\n+369,3,DwellPhase2Model,97.73603969923711,1.0795557312201625,-0.0436000739279384,-0.0,0.0406875,0.125125,0.2485,0.412125,0.6540625,0.86275,0.9585625,0\n+379,2,DwellPhase2Model,959.1729419723098,1.131485684747675,-0.005302095665971709,0.0,0.0030625,0.01225,0.0275625,0.0616875,0.114625,0.2065,0.3049375,0\n+399,2,DwellPhase2Model,91.2220633922413,1.0532074706562053,-0.04951039542649103,0.0,0.048125,0.12775,0.2415,0.426125,0.6615,0.86975,0.921375,0\n+409,3,DwellPhase2Model,1029.082428066283,1.15606457158126,-0.002582382612708763,-0.0,0.006125,0.0126875,0.03325,0.0555625,0.1133125,0.19425,0.291375,0\n+429,3,DwellPhase2Model,88.10718938435119,1.0427899597085852,-0.054410840509658095,-0.0,0.04375,0.12425,0.2375625,0.44625,0.662375,0.8448125,0.9218125,0\n+439,2,DwellPhase2Model,1035.4979734996111,1.3583298502842132,-0.004090003520904306,0.0,0.00525,0.013125,0.0284375,0.060375,0.0949375,0.209125,0.289625,0\n+459,2,DwellPhase2Model,93.16354475598007,1.0481759891256928,-0.05299089064026306,0.0,0.0398125,0.116375,0.2345,0.4178125,0.64925,0.8561875,0.914375,0\n+469,3,DwellPhase2Model,1028.9020744966838,1.022591515893388,-0.001791945947685388,-0.0,0.007,0.0153125,0.02975,0.06125,0.111125,0.1925,0.287,0\n+489,3,DwellPhase2Model,92.07881452183945,1.0467080708828564,-0.04710681302589043,-0.0,0.0406875,0.1360625,0.24675,0.429625,0.6505625,0.861,0.9235625,0\n+499,2,DwellPhase2Model,1072.961034769149,1.9999999999999978,-0.0030759578048161124,0.0,0.0056875,0.01575,0.028,0.0555625,0.1045625,0.196,0.298375,0\n+519,2,DwellPhase2Model,97.27876029706583,1.0641704079412557,-0.04453544246688543,0.0,0.0424375,0.132125,0.235375,0.4095,0.6453125,0.874125,0.9305625,0\n+529,3,DwellPhase2Model,1029.261657711729,1.0676874633672786,-0.0036520389164724264,-0.0,0.0030625,0.014,0.0293125,0.056875,0.1098125,0.1925,0.2865625,0\n+549,3,DwellPhase2Model,88.22749308568253,1.0382037465460636,-0.05298527286630386,-0.0,0.0441875,0.1351875,0.233625,0.4375,0.6671875,0.8491875,0.9130625,0\n+559,2,DwellPhase2Model,1003.245585015737,0.8709884400812803,-0.005372861194309581,0.0,0.0013125,0.0126875,0.027125,0.0538125,0.1124375,0.189,0.2813125,0\n+579,2,DwellPhase2Model,93.88394117145192,1.0791445319454198,-0.04608719826756003,0.0,0.046375,0.1299375,0.242375,0.4318125,0.651875,0.8925,0.944125,0\n+589,3,DwellPhase2Model,926.778923953025,0.8235560832574539,-0.005441105922744861,-0.0,0.0083125,0.016625,0.0258125,0.055125,0.1098125,0.2156875,0.2909375,0\n+609,3,DwellPhase2Model,96.54283861652982,1.0675187662684014,-0.0417231081334353,-0.0,0.04025,0.140875,0.24325,0.426125,0.6383125,0.881125,0.93975,0\n+619,2,DwellPhase2Model,916.5998649247169,0.7779941414428737,-0.007985023607088077,0.0,-0.0004375,0.0105,0.028,0.0581875,0.109375,0.207375,0.289625,0\n+639,2,DwellPhase2Model,96.91853629770111,1.0597389489841385,-0.04283793359724312,0.0,0.0450625,0.123375,0.245,0.4274375,0.6391875,0.856625,0.942375,0\n+649,3,DwellPhase2Model,1053.159636143454,1.9999999999999993,-0.006606480187948238,-0.0,0.0048125,0.00875,0.0275625,0.046375,0.1019375,0.20125,0.2979375,0\n+669,3,DwellPhase2Model,92.63544078792025,1.0486565360042157,-0.04835652510445683,-0.0,0.0424375,0.1334375,0.2366875,0.42525,0.6558125,0.856625,0.924,0\n+679,2,DwellPhase2Model,954.3720001551038,0.9960974129690433,-0.005344518353578337,0.0,0.0021875,0.014,0.0319375,0.0581875,0.107625,0.21175,0.2970625,0\n+699,2,DwellPhase2Model,88.03997838348391,1.0512973615703138,-0.05372729960426659,0.0,0.044625,0.1281875,0.23975,0.4431875,0.6663125,0.861,0.9235625,0\n+709,3,DwellPhase2Model,927.9357716392045,0.8104942655404361,-0.008397200816199995,-0.0,0.00175,0.014875,0.0214375,0.0529375,0.1063125,0.2121875,0.2865625,0\n+729,3,DwellPhase2Model,93.67245234421513,1.046277241285027,-0.04814897889852123,-0.0,0.0441875,0.12425,0.23625,0.4283125,0.648375,0.84875,0.9253125,0\n+739,2,DwellPhase2Model,866.415741804328,0.7088287759122447,-0.007454828932318671,0.0,0.0035,0.013125,0.027125,0.0625625,0.112875,0.2174375,0.294875,0\n+759,2,DwellPhase2Model,97.54663027285517,1.054567048124813,-0.04013437589321729,0.0,0.04375,0.1365,0.2419375,0.4186875,0.6558125,0.83125,0.952875,0\n+769,3,DwellPhase2Model,917.643678508147,0.7086858236862038,-0.006138871569403008,-0.0,0.0048125,0.0135625,0.023625,0.0651875,0.1063125,0.2078125,0.2839375,0\n+789,3,DwellPhase2Model,92.72070777585782,1.0457625211372232,-0.05030771791637466,-0.0,0.046375,0.119,0.238,0.4230625,0.6505625,0.85925,0.9148125,0\n+799,2,DwellPhase2Model,1087.0426746551516,1.772513049163389,-0.003688824282412077,0.0,0.0035,0.0153125,0.028,0.049875,0.105,0.195125,0.2883125,0\n+819,2,DwellPhase2Model,97.92452882290259,1.0587539673456852,-0.043765788326882195,0.0,0.04725,0.1203125,0.2358125,0.413875,0.655375,0.8343125,0.9480625,0\n+829,3,DwellPhase2Model,1044.941282256352,1.2513350539944266,-0.0052133275764806196,-0.0,0.0065625,0.0135625,0.02625,0.0455,0.10325,0.202125,0.2835,0\n+849,3,DwellPhase2Model,92.54561924871089,1.0328996622902376,-0.05048813910008618,-0.0,0.0406875,0.130375,0.2331875,0.4165,0.6496875,0.8518125,0.9016875,0\n+859,2,DwellPhase2Model,973.7402876871133,1.0538958990488314,-0.005471041956606988,0.0,0.0039375,0.0161875,0.0266875,0.0538125,0.1085,0.2095625,0.2944375,0\n+879,2,DwellPhase2Model,95.77040281624082,1.0804872818678188,-0.04242577162122405,0.0,0.0459375,0.12775,0.252,0.4248125,0.66675,0.853125,0.972125,0\n+889,3,DwellPhase2Model,924.7058253152037,0.725152517924478,-0.0069877286759043224,-0.0,0.0030625,0.0175,0.027125,0.0511875,0.10325,0.2148125,0.2795625,0\n+909,3,DwellPhase2Model,90.03316386956,1.0638966346743413,-0.054828233924298087,-0.0,0.0459375,0.1141875,0.2454375,0.420875,0.669375,0.875875,0.9235625,0\n+919,2,DwellPhase2Model,1014.6463644096657,1.318782719737578,-0.0036675196401749497,0.0,0.0048125,0.014875,0.0245,0.062125,0.1115625,0.1995,0.2988125,0\n+939,2,DwellPhase2Model,97.12341320621212,1.0754148318097032,-0.04498794522634518,0.0,0.04375,0.1316875,0.2296875,0.41825,0.646625,0.8806875,0.940625,0\n+949,3,DwellPhase2Model,866.5915590257858,0.6817494832257671,-0.006968764586416393,-0.0,0.007875,0.01225,0.02625,0.0608125,0.1133125,0.217875,0.291375,0\n+969,3,DwellPhase2Model,96.7885889162178,1.0613285278506344,-0.04556734549767391,-0.0,0.0385,0.1295,0.2349375,0.41825,0.651,0.84525,0.945,0\n+979,2,DwellPhase2Model,1086.2784953124344,1.8180260298969269,-0.0026267238832529995,0.0,0.00525,0.018375,0.028875,0.0538125,0.097125,0.203875,0.287875,0\n+999,2,DwellPhase2Model,93.05504944700425,1.0670890015755707,-0.0505829304335074,0.0,0.044625,0.12425,0.23975,0.4095,0.667625,0.8745625,0.9296875,0\n+1009,3,DwellPhase2Model,995.2119425321129,0.8369430091215438,-0.00421822029448085,-0.0,0.0048125,0.0144375,0.025375,0.0599375,0.1085,0.19425,0.280875,0\n+1029,3,DwellPhase2Model,95.83440548527172,1.0509016009551786,-0.04472983922911552,-0.0,0.0503125,0.123375,0.2296875,0.431375,0.6444375,0.84875,0.9331875,0\n+1039,2,DwellPhase2Model,1034.8480581705098,1.999999858100237,-0.004598519918210623,0.0,0.0056875,0.018375,0.021875,0.0573125,0.100625,0.209125,0.3040625,0\n+1059,2,DwellPhase2Model,91.08868125766921,1.0574951339075453,-0.05132316185461754,0.0,0.04375,0.126,0.238875,0.4300625,0.662375,0.86275,0.92925,0\n+1069,3,DwellPhase2Model,1077.5396338294124,1.555260737024174,-0.0032771233450965176,-0.0,0.0013125,0.013125,0.0275625,0.0581875,0.111125,0.1859375,0.2909375,0\n+1089,3,DwellPhase2Model,97.81362876283842,1.073463453703732,-0.04015077957478252,-0.0,0.044625,0.1325625,0.2498125,0.4195625,0.6444375,0.8736875,0.951125,0\n+1099,2,DwellPhase2Model,910.841997863352,0.6173528405210814,-0.005443528019814801,0.0,0.0065625,0.013125,0.034125,0.0520625,0.1106875,0.205625,0.27475,0\n+1119,2,DwellPhase2Model,93.46711224594443,1.090082273350657,-0.04801477727630267,0.0,0.042875,0.121625,0.2524375,0.426125,0.67025,0.8719375,0.96775,0\n+1129,3,DwellPhase2Model,1085.0563050111389,1.613678051865755,-0.0039085652643787005,-0.0,0.00525,0.0126875,0.027125,0.0525,0.1010625,0.1964375,0.28525,0\n+1149,3,DwellPhase2Model,89.8407364770187,1.0537666167518154,-0.050532898209417684,-0.0,0.0450625,0.133,0.23625,0.4414375,0.66675,0.853125,0.9345,0\n+1159,2,DwellPhase2Model,943.2346970588939,0.7447436050023187,-0.005335580700783229,0.0,0.006125,0.009625,0.030625,0.0595,0.1085,0.203,0.2830625,0\n+1179,2,DwellPhase2Model,91.23358947017087,1.0697648053265905,-0.05242717001658939,0.0,0.042,0.125125,0.245875,0.41475,0.6689375,0.88375,0.928375,0\n+1189,3,DwellPhase2Model,877.022224650802,0.5360842666974293,-0.006299866506021468,-0.0,0.0030625,0.014875,0.0310625,0.058625,0.1106875,0.2025625,0.2699375,0\n+1209,3,DwellPhase2Model,95.92561733977861,1.0558166548370396,-0.044987520841694974,-0.0,0.0459375,0.1360625,0.22925,0.4143125,0.646625,0.875875,0.9200625,0\n+1219,2,DwellPhase2Model,842.3717084962274,0.5462117129200935,-0.0054344356742633895,0.0,0.009625,0.0179375,0.0293125,0.05775,0.1176875,0.2135,0.2786875,0\n+1239,2,DwellPhase2Model,85.59747919967408,1.0630932227033463,-0.06077632316717089,0.0,0.0415625,0.121625,0.245,0.4274375,0.679875,0.8925,0.907375,0\n+1249,3,DwellPhase2Model,890.3197371025915,0.6455148612390501,-0.008897376256074133,-0.0,0.0030625,0.0118125,0.025375,0.0529375,0.1054375,0.2135,0.277375,0\n+1269,3,DwellPhase2Model,90.90911748805195,1.0539714703369754,-0.0469208598448759,-0.0,0.0485625,0.133875,0.2485,0.433125,0.658875,0.874125,0.9261875,0\n+1279,2,DwellPhase2Model,832.5248208211423,0.570558320765513,-0.00802818856069934,0.0,0.0030625,0.016625,0.027125,0.05775,0.1159375,0.21525,0.282625,0\n+1299,2,DwellPhase2Model,92.33873466731737,1.051515903375144,-0.04766447877777706,0.0,0.041125,0.1308125,0.252,0.42,0.660625,0.854875,0.931,0\n+1309,3,DwellPhase2Model,1064.1662015470856,1.999999999999987,-0.0021462769403877108,-0.0,0.0074375,0.016625,0.0328125,0.05425,0.1019375,0.205625,0.298375,0\n+1329,3,DwellPhase2Model,97.02643804860371,1.0898036403827027,-0.04928653066191483,-0.0,0.0441875,0.11725,0.2288125,0.4064375,0.6645625,0.872375,0.9541875,0\n+1339,2,DwellPhase2Model,936.5015194972264,0.8309571091116719,-0.006516653650166342,0.0,0.0065625,0.0100625,0.0310625,0.0511875,0.1085,0.2121875,0.2883125,0\n+1359,2,DwellPhase2Model,89.89465401158219,1.0408925606485748,-0.05049817080755526,0.0,0.0455,0.1290625,0.252,0.41825,0.6610625,0.8701875,0.90475,0\n+1369,3,DwellPhase2Model,935.6468711464196,0.8097636192554589,-0.005088319147282762,-0.0,0.0065625,0.0153125,0.0258125,0.0581875,0.1141875,0.2060625,0.2909375,0\n+1389,3,DwellPhase2Model,94.43685409348817,1.0600728241462034,-0.048308452056740434,-0.0,0.0455,0.12425,0.23275,0.42175,0.6545,0.861875,0.931875,0\n+1399,2,DwellPhase2Model,849.8628336652304,0.6254059119173616,-0.00662510504080055,0.0,0.0074375,0.014875,0.028,0.056875,0.121625,0.2130625,0.2900625,0\n+1419,2,DwellPhase2Model,92.15738886581282,1.0687584135177322,-0.04890855248477658,0.0,0.0424375,0.13125,0.2454375,0.4235,0.664125,0.875875,0.938,0\n+1429,3,DwellPhase2Model,964.0833155685353,1.2616987827236514,-0.005362160256906474,-0.0,0.007,0.0118125,0.028875,0.056,0.1098125,0.216125,0.305375,0\n+1449,3,DwellPhase2Model,94.71331574321285,1.0816846669262294,-0.045284015712589595,-0.0,0.0485625,0.126875,0.2428125,0.4274375,0.655375,0.8876875,0.949375,0\n+1459,2,DwellPhase2Model,1024.5721098600636,1.9999999999999996,-0.005161187063170311,0.0,0.0039375,0.0144375,0.0293125,0.0525,0.105,0.2060625,0.3084375,0\n+1479,2,DwellPhase2Model,96.3977497088978,1.072702896997567,-0.04552461317524356,0.0,0.0459375,0.121625,0.2393125,0.417375,0.65975,0.854875,0.9533125,0\n+1489,3,DwellPhase2Model,934.7531090304802,0.9598087447661333,-0.0068291193919607345,-0.0,0.0035,0.0126875,0.0258125,0.055125,0.1150625,0.2095625,0.2996875,0\n+1509,3,DwellPhase2Model,90.34094097787325,1.0546700051668076,-0.05546436411322808,-0.0,0.04375,0.1159375,0.238,0.424375,0.653625,0.88375,0.905625,0\n+1519,2,DwellPhase2Model,972.0255160200411,0.9846558207343017,-0.0048852318312222285,0.0,0.004375,0.014875,0.0275625,0.05775,0.109375,0.2060625,0.293125,0\n+1539,2,DwellPhase2Model,97.97982323100548,1.0628174996472473,-0.04006635421801979,0.0,0.0450625,0.137375,0.23975,0.42175,0.6374375,0.8728125,0.938,0\n+1549,3,DwellPhase2Model,1005.8312956141971,0.8492510054071002,-0.0022520283113772795,-0.0,0.006125,0.0196875,0.0301875,0.0581875,0.1054375,0.1995,0.2795625,0\n+1569,3,DwellPhase2Model,95.51724208964708,1.0818818496129678,-0.04452260967586679,-0.0,0.0450625,0.13125,0.249375,0.4055625,0.67375,0.86975,0.9576875,0\n+1579,2,DwellPhase2Model,1003.4926327039152,1.9999999999999998,-0.007042217386107446,0.0,0.004375,0.014875,0.0240625,0.0529375,0.1028125,0.203875,0.31675,0\n+1599,2,DwellPhase2Model,96.38241672535646,1.0659148943552903,-0.04646851299120542,0.0,0.0441875,0.1299375,0.2253125,0.415625,0.6593125,0.8535625,0.9428125,0\n+1609,3,DwellPhase2Model,939.867274660476,1.0004386301374006,-0.004233133456344227,-0.0,0.0083125,0.0188125,0.028875,0.053375,0.114625,0.217,0.3014375,0\n+1629,3,DwellPhase2Model,95.1245257523491,1.069795814089277,-0.04434853487519808,-0.0,0.04375,0.130375,0.2471875,0.42,0.66325,0.8553125,0.954625,0\n+1639,2,DwellPhase2Model,1018.2359823573154,1.0441585712683532,-0.0029986282160500716,0.0,0.0048125,0.013125,0.03325,0.062125,0.1001875,0.203,0.286125,0\n+1659,2,DwellPhase2Model,94.44995342390612,1.0733013097464283,-0.047083547051778085,0.0,0.049,0.12075,0.2436875,0.419125,0.6584375,0.8785,0.940625,0\n+1669,3,DwellPhase2Model,1037.438146337729,1.393606768518723,-0.004232808403948637,-0.0,0.0030625,0.01225,0.028875,0.056875,0.1071875,0.1981875,0.2935625,0\n+1689,3,DwellPhase2Model,92.47012688605459,1.0639745884934437,-0.04784424998039823,-0.0,0.044625,0.12425,0.2533125,0.4265625,0.6549375,0.875875,0.9345,0\n+1699,2,DwellPhase2Model,977.2793185457836,0.9387588055263443,-0.006255640904107884,0.0,0.004375,0.011375,0.0258125,0.05425,0.107625,0.2034375,0.2874375,0\n+1719,2,DwellPhase2Model,92.6433151908154,1.0676122868304103,-0.05068312268715278,0.0,0.0406875,0.132125,0.244125,0.4011875,0.6680625,0.889,0.921375,0\n+1729,3,DwellPhase2Model,965.661012668745,0.949736762442414,-0.005238436146490006,-0.0,0.0039375,0.011375,0.0301875,0.0590625,0.1085,0.205625,0.2926875,0\n+1749,3,DwellPhase2Model,87.27357750780115,1.0817873166455754,-0.062158561148972204,-0.0,0.042875,0.1155,0.233625,0.419125,0.6881875,0.898625,0.9218125,0\n+1759,2,DwellPhase2Model,912.9551794327105,0.8454455112293818,-0.003055893267499378,0.0,0.006125,0.0170625,0.0328125,0.0669375,0.1168125,0.21175,0.30275,0\n+1779,2,DwellPhase2Model,96.986299190095,1.0463501821902306,-0.04095866968873333,0.0,0.0424375,0.1290625,0.2471875,0.433125,0.63175,0.8430625,0.9384375,0\n+1789,3,DwellPhase2Model,1087.80729197671,1.9999527960988666,-0.005455060184559424,-0.0,0.0048125,0.013125,0.0205625,0.051625,0.0984375,0.198625,0.2883125,0\n+1809,3,DwellPhase2Model,95.42519097697313,1.0699226098968677,-0.04857849484916108,-0.0,0.0424375,0.1225,0.244125,0.4011875,0.6545,0.8850625,0.926625,0\n+1819,2,DwellPhase2Model,909.1251531068341,0.9007572755366675,-0.0051538674890305005,0.0,0.0035,0.0144375,0.0336875,0.0590625,0.1176875,0.2139375,0.3049375,0\n+1839,2,DwellPhase2Model,96.1504885749226,1.0449156197642895,-0.04519667175300648,0.0,0.0468125,0.12075,0.2410625,0.4169375,0.63875,0.8570625,0.91875,0\n+1849,3,DwellPhase2Model,1028.1828738899155,1.5320813219337126,-0.0051253861280536744,-0.0,0.000875,0.01575,0.028,0.05075,0.109375,0.202125,0.2975,0\n+1869,3,DwellPhase2Model,96.36979962425117,1.065322765445163,-0.04868896429284596,-0.0,0.0468125,0.12425,0.2235625,0.401625,0.660625,0.8675625,0.9275,0\n+1879,2,DwellPhase2Model,876.7687911516086,0.6902176637598177,-0.008492932774924961,0.0,0.002625,0.0144375,0.0266875,0.0520625,0.112,0.2165625,0.2874375,0\n+1899,2,DwellPhase2Model,96.92281687953815,1.0358773623904176,-0.04579520498602485,0.0,0.0424375,0.121625,0.23625,0.412125,0.639625,0.8351875,0.917875,0\n+1909,3,DwellPhase2Model,1030.929780005987,1.9999999999999796,-0.005811210313742087,-0.0,0.0021875,0.0091875,0.02625,0.0564375,0.11025,0.1990625,0.3066875,0\n+1929,3,DwellPhase2Model,95.21598205281114,1.0582923329655387,-0.044153553361924926,-0.0,0.0450625,0.1281875,0.2515625,0.4160625,0.6461875,0.8745625,0.9288125,0\n+1939,2,DwellPhase2Model,916.7942601006214,0.8282478605022066,-0.0064111565754331945,0.0,0.0035,0.0118125,0.0301875,0.05425,0.119875,0.205625,0.2970625,0\n+1959,2,DwellPhase2Model,87.30495776406748,1.042108130143416,-0.052028659696116406,0.0,0.044625,0.14175,0.2419375,0.4309375,0.6829375,0.847,0.921375,0\n+1969,3,DwellPhase2Model,954.0598172053648,1.205867218031636,-0.006018426313597591,-0.0,0.0039375,0.0144375,0.0293125,0.051625,0.1133125,0.21525,0.3058125,0\n+1989,3,DwellPhase2Model,94.16459792103909,1.0765663474918512,-0.04574902222450965,-0.0,0.049875,0.1229375,0.2524375,0.4099375,0.679875,0.8588125,0.958125,0\n+1999,2,DwellPhase2Model,930.295664537444,0.7811351172991676,-0.005589618974210201,0.0,0.0030625,0.0170625,0.0275625,0.0581875,0.1098125,0.2086875,0.2883125,0\n+2019,2,DwellPhase2Model,90.17755181127926,1.0579451766352634,-0.05416608532260284,0.0,0.042,0.1229375,0.2419375,0.4186875,0.672,0.863625,0.924,0\n+2029,3,DwellPhase2Model,1003.1375828903182,1.4530092369647545,-0.005735730307762342,-0.0,0.004375,0.009625,0.025375,0.062125,0.1010625,0.210875,0.300125,0\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/expected/serial/trap_locations.npy": [
                        [
                            "Binary files a/VIS_TrapPumping/tests/python/resources/expected/serial/trap_locations.npy and b/VIS_TrapPumping/tests/python/resources/expected/serial/trap_locations.npy differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/parallel/background.npy": [
                        [
                            "Binary files a/VIS_TrapPumping/tests/python/resources/input/parallel/background.npy and /dev/null differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/parallel/pumped_frames/toi_0050.npy": [
                        [
                            "Binary files a/VIS_TrapPumping/tests/python/resources/input/parallel/pumped_frames/toi_0050.npy and /dev/null differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/parallel/pumped_frames/toi_0200.npy": [
                        [
                            "Binary files a/VIS_TrapPumping/tests/python/resources/input/parallel/pumped_frames/toi_0200.npy and /dev/null differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/parallel/pumped_frames/toi_1000.npy": [
                        [
                            "Binary files a/VIS_TrapPumping/tests/python/resources/input/parallel/pumped_frames/toi_1000.npy and /dev/null differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/parallel/pumped_frames/toi_2000.npy": [
                        [
                            "Binary files a/VIS_TrapPumping/tests/python/resources/input/parallel/pumped_frames/toi_2000.npy and /dev/null differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/parallel/pumped_frames/toi_4000.npy": [
                        [
                            "Binary files a/VIS_TrapPumping/tests/python/resources/input/parallel/pumped_frames/toi_4000.npy and /dev/null differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/parallel/pumped_frames/toi_8000.npy": [
                        [
                            "Binary files a/VIS_TrapPumping/tests/python/resources/input/parallel/pumped_frames/toi_8000.npy and /dev/null differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/parallel/toi_00.npy": [
                        [
                            "Binary files /dev/null and b/VIS_TrapPumping/tests/python/resources/input/parallel/toi_00.npy differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/parallel/toi_01.npy": [
                        [
                            "Binary files /dev/null and b/VIS_TrapPumping/tests/python/resources/input/parallel/toi_01.npy differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/parallel/toi_02.npy": [
                        [
                            "Binary files /dev/null and b/VIS_TrapPumping/tests/python/resources/input/parallel/toi_02.npy differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/parallel/toi_03.npy": [
                        [
                            "Binary files /dev/null and b/VIS_TrapPumping/tests/python/resources/input/parallel/toi_03.npy differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/parallel/toi_04.npy": [
                        [
                            "Binary files /dev/null and b/VIS_TrapPumping/tests/python/resources/input/parallel/toi_04.npy differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/parallel/toi_05.npy": [
                        [
                            "Binary files /dev/null and b/VIS_TrapPumping/tests/python/resources/input/parallel/toi_05.npy differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/parallel/toi_06.npy": [
                        [
                            "Binary files /dev/null and b/VIS_TrapPumping/tests/python/resources/input/parallel/toi_06.npy differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/parallel/toi_07.npy": [
                        [
                            "Binary files /dev/null and b/VIS_TrapPumping/tests/python/resources/input/parallel/toi_07.npy differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/parallel/toi_08.npy": [
                        [
                            "Binary files /dev/null and b/VIS_TrapPumping/tests/python/resources/input/parallel/toi_08.npy differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/parallel/toi_09.npy": [
                        [
                            "Binary files /dev/null and b/VIS_TrapPumping/tests/python/resources/input/parallel/toi_09.npy differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/parallel/toi_10.npy": [
                        [
                            "Binary files /dev/null and b/VIS_TrapPumping/tests/python/resources/input/parallel/toi_10.npy differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/parallel/toi_11.npy": [
                        [
                            "Binary files /dev/null and b/VIS_TrapPumping/tests/python/resources/input/parallel/toi_11.npy differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/serial/background.npy": [
                        [
                            "Binary files a/VIS_TrapPumping/tests/python/resources/input/serial/background.npy and /dev/null differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/serial/mstp.npy": [
                        [
                            "Binary files /dev/null and b/VIS_TrapPumping/tests/python/resources/input/serial/mstp.npy differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/serial/pumped_frames/dwell_0000.npy": [
                        [
                            "Binary files a/VIS_TrapPumping/tests/python/resources/input/serial/pumped_frames/dwell_0000.npy and /dev/null differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/serial/pumped_frames/dwell_0475.npy": [
                        [
                            "Binary files a/VIS_TrapPumping/tests/python/resources/input/serial/pumped_frames/dwell_0475.npy and /dev/null differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/serial/pumped_frames/dwell_1430.npy": [
                        [
                            "Binary files a/VIS_TrapPumping/tests/python/resources/input/serial/pumped_frames/dwell_1430.npy and /dev/null differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/resources/input/serial/pumped_frames/dwell_2860.npy": [
                        [
                            "Binary files a/VIS_TrapPumping/tests/python/resources/input/serial/pumped_frames/dwell_2860.npy and /dev/null differ\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/test_integration.py": [
                        [
                            "@@ -5,6 +5,7 @@ from pandas import read_csv\n from pandas.testing import assert_frame_equal\n from pytest import mark\n \n+from VIS_TrapPumping.VIS_TrapPumping_Analysis.config import AnalysisConfig\n from VIS_TrapPumping.VIS_TrapPumping_Analysis.data import Clock, Data\n from VIS_TrapPumping.VIS_TrapPumping_Analysis.fitting import fit_models\n from VIS_TrapPumping.VIS_TrapPumping_Analysis.traps.parallel import (\n@@ -17,39 +18,52 @@ from VIS_TrapPumping.VIS_TrapPumping_Analysis.traps.serial import (\n RESOURCES_DIR = Path(__file__).parent / \"resources\"\n \n \n-def _runner(\n-    serial,\n-    dir_id,\n-    im_region,\n-    bias_region,\n-    scheme,\n-    t_var,\n-    t_rphi,\n-    trap_locator,\n-):\n-    input_dir = RESOURCES_DIR / \"input\" / dir_id\n-    files = sorted((input_dir / \"pumped_frames\").glob(\"*.npy\"))\n-    frame_stack = np.array([np.load(f) for f in files])\n-    background = np.load(input_dir / \"background.npy\")\n-\n-    im_stack = Data.pre_process(\n-        frame_stack=frame_stack,\n+def _to_float(name):\n+    try:\n+        return float(name)\n+    except ValueError:\n+        return name\n+\n+\n+def test_full_analysis_parallel():\n+    input_dir = RESOURCES_DIR / \"input\" / \"parallel\"\n+    files = sorted(input_dir.glob(\"*.npy\"))\n+    frame_cube = np.array([np.load(f) for f in files[1:]])\n+    background = np.load(files[0])\n+\n+    im_region = (slice(0, 500), slice(0, 500))\n+    im_cube = Data.pre_process(\n+        frame_cube=frame_cube,\n         background=background,\n         gain=3.5,\n         im_region=im_region,\n-        bias_region=bias_region,\n-        serial=serial,\n     )\n-    cycles = np.array([5000] * t_var.shape[0])\n-    clock = Clock(scheme, cycles, t_var, t_rphi)\n-    data = Data(im_stack=im_stack, clock=clock)\n \n-    expected_dir = RESOURCES_DIR / \"expected\" / dir_id\n+    t_var = np.array(\n+        [\n+            10,\n+            20,\n+            50,\n+            100,\n+            200,\n+            500,\n+            1000,\n+            2000,\n+            4000,\n+            8000,\n+            16000,\n+        ]\n+    )\n+    cycles = np.array([2000] * t_var.shape[0])\n+    clock = Clock(\"234\", cycles, t_var)\n+    data = Data(im_cube, im_region, clock)\n+\n+    expected_dir = RESOURCES_DIR / \"expected\" / \"parallel\"\n     expected_trap_locations = np.load(expected_dir / \"trap_locations.npy\")\n     expected_dipoles = np.load(expected_dir / \"dipole_intensities.npy\")\n \n-    trap_locator = trap_locator(data)\n-    traps = list(trap_locator.get_traps(nsigma=5))\n+    trap_locator = ParallelTrapLocator(data)\n+    traps = list(trap_locator.get_traps(AnalysisConfig()))\n     actual_trap_locations = np.array([[trap.row, trap.col] for trap in traps])\n     actual_dipoles = np.array([trap.raw_dipole_intensities for trap in traps])\n \n@@ -60,46 +74,51 @@ def _runner(\n     # Some column names are numeric but converted to strings in CSV. Pandas\n     # does not cast them when reading the CSV, so we have to handle \"manually\".\n     expected_model_fits.rename(columns=_to_float, inplace=True)\n-    actual_model_fits = fit_models(traps)\n+    actual_model_fits = fit_models(traps, 2)\n     assert_frame_equal(\n-        actual_model_fits, expected_model_fits, check_column_type=False\n+        actual_model_fits,\n+        expected_model_fits,\n+        check_column_type=False,\n+        rtol=0.01,\n     )\n \n \n-def _to_float(name):\n-    try:\n-        return float(name)\n-    except ValueError:\n-        return name\n-\n-\n-@mark.skip(reason=\"Test fails on some systems.\")\n-def test_full_analysis_parallel():\n-    _runner(\n-        serial=False,\n-        dir_id=\"parallel\",\n-        im_region=(slice(5, 205), slice(52, 252)),\n-        bias_region=(slice(5, 200), slice(5, 45)),\n-        scheme=\"123\",\n-        t_var=np.array([50, 200, 1000, 2000, 4000, 8000]),\n-        t_rphi=None,\n-        trap_locator=ParallelTrapLocator,\n+def test_full_analysis_serial():\n+    input_dir = RESOURCES_DIR / \"input\" / \"serial\"\n+    blocks = np.load(input_dir / \"mstp.npy\")\n+    frames = blocks[1:]\n+    background = blocks[0]\n+\n+    im_region = (slice(0, 50), slice(0, 2048))\n+    im_cube = Data.pre_process_ragged_cube(\n+        frames=frames,\n+        background=background,\n+        gain=3.5,\n+        im_region=im_region,\n     )\n+    t_var = np.array([0.0, 4.75, 14.3, 28.6, 57.0, 114.0, 228.0, 342.0])\n+    cycles = np.array([2000] * t_var.shape[0])\n+    clock = Clock(\"23\", cycles, t_var, 4.75)\n+    data = Data(im_cube, im_region, clock)\n \n+    expected_dir = RESOURCES_DIR / \"expected\" / \"serial\"\n+    expected_trap_locations = np.load(expected_dir / \"trap_locations.npy\")\n+    expected_dipoles = np.load(expected_dir / \"dipole_intensities.npy\")\n \n-@mark.skip(reason=\"Test fails on some systems.\")\n-def test_full_analysis_serial():\n-    _runner(\n-        serial=True,\n-        dir_id=\"serial\",\n-        im_region=(slice(2, 100), slice(52, 452)),\n-        bias_region=(slice(2, 100), slice(5, 45)),\n-        scheme=\"31\",\n-        t_var=np.array([0, 4.75, 14.3, 28.6]),\n-        t_rphi=4.75,\n-        trap_locator=SerialTrapLocator,\n-    )\n+    trap_locator = SerialTrapLocator(data)\n+    traps = list(trap_locator.get_traps(AnalysisConfig()))\n+    actual_trap_locations = np.array([[trap.row, trap.col] for trap in traps])\n+    actual_dipoles = np.array([trap.raw_dipole_intensities for trap in traps])\n \n+    assert (actual_trap_locations == expected_trap_locations).all()\n+    assert (actual_dipoles == expected_dipoles).all()\n \n-# TODO: Write a test for STP data with variable nrows - what I've called a\n-# \"ragged\" image stack.\n+    expected_model_fits = read_csv(expected_dir / \"model_fit_data.csv\")\n+    expected_model_fits.rename(columns=_to_float, inplace=True)\n+    actual_model_fits = fit_models(traps, 2)\n+    assert_frame_equal(\n+        actual_model_fits,\n+        expected_model_fits,\n+        check_column_type=False,\n+        rtol=0.01,\n+    )\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/test_traps_parallel.py": [
                        [
                            "@@ -3,13 +3,16 @@ from unittest.mock import MagicMock, patch\n import numpy as np\n from pytest import fixture\n \n+from VIS_TrapPumping.VIS_TrapPumping_Analysis.config import AnalysisConfig\n from VIS_TrapPumping.VIS_TrapPumping_Analysis.traps.parallel import (\n     ParallelTrapLocator,\n )\n \n+CONFIG = AnalysisConfig()\n+\n \n @fixture(scope=\"module\")\n-def stack():\n+def cube():\n     data = np.zeros((10, 10, 10))\n \n     # Present in trap_pos but not in indices, since row < 5\n@@ -32,11 +35,8 @@ def stack():\n @fixture(scope=\"module\")\n def trap_pos():\n     positions = np.zeros((7, 10), dtype=bool)\n-    # TODO: These indices are currently one too low. Expected row index is 6\n-    # based on stack setup. See branch trap_pos_offset_demo for example of\n-    # situation with real data. This is corrected for in extract_dipoles but\n-    # not in model fitting results, in which the row is only corrected based on\n-    # scheme and dipole direction (low -> high/high -> low).\n+    # These have row one index lower that `trap_indices`, due to offset\n+    # introduced by algorithm for finding the dipole pattern.\n     positions[2, 1] = True\n     positions[5, 3] = True\n     positions[5, 5] = True\n@@ -45,7 +45,7 @@ def trap_pos():\n \n @fixture(scope=\"module\")\n def trap_indices():\n-    return np.array([[5, 3], [5, 5]])\n+    return np.array([[6, 3], [6, 5]])\n \n \n @fixture(scope=\"module\")\n@@ -56,32 +56,30 @@ def dipoles():\n     return dipole_vals\n \n \n-def test_find_trap_positions(stack, trap_pos):\n+def test_find_trap_positions(cube, trap_pos):\n     expected = trap_pos\n-    actual = ParallelTrapLocator.find_trap_positions(stack, 5)\n+    actual = ParallelTrapLocator.find_trap_positions(cube, CONFIG)\n     assert (actual == expected).all()\n \n \n-@patch(\n-    \"VIS_TrapPumping.VIS_TrapPumping_Analysis.traps.parallel.ParallelTrapLocator.extract_dipoles\",\n-    autospec=True,\n-)\n-def test_get_dipole_intensities(\n-    mock_extract_dipoles, dipoles, stack, trap_indices\n-):\n+def test_get_trap_indices(trap_pos, trap_indices):\n+    expected = trap_indices\n+    actual = ParallelTrapLocator.get_trap_indices(trap_pos)\n+    assert (actual == expected).all()\n+\n+\n+def test_get_dipole_intensities(dipoles, cube):\n     expected = np.zeros((2, 10))\n     expected[0, 3:7] = -0.1\n     expected[1, 4:6] = 0.1\n-    mock_extract_dipoles.return_value = dipoles\n     mock_data = MagicMock()\n-    mock_data.clock.cycles = np.array([2000] * stack.shape[0])\n+    mock_data.clock.cycles = np.array([2000] * cube.shape[0])\n     trap_locator = ParallelTrapLocator(mock_data)\n-    actual = trap_locator.get_dipole_intensities(stack, trap_indices)\n-    mock_extract_dipoles.assert_called_once_with(stack, trap_indices)\n+    actual = trap_locator.get_dipole_intensities(dipoles, CONFIG)\n     assert (actual == expected).all()\n \n \n-def test_extract_dipoles(stack, trap_indices, dipoles):\n+def test_extract_dipoles(cube, trap_indices, dipoles):\n     expected = dipoles\n-    actual = ParallelTrapLocator.extract_dipoles(stack, trap_indices)\n+    actual = ParallelTrapLocator.extract_dipoles(cube, trap_indices)\n     assert (actual == expected).all()\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_TrapPumping/tests/python/test_traps_serial.py": [
                        [
                            "@@ -3,13 +3,16 @@ from unittest.mock import MagicMock, patch\n import numpy as np\n from pytest import fixture\n \n+from VIS_TrapPumping.VIS_TrapPumping_Analysis.config import AnalysisConfig\n from VIS_TrapPumping.VIS_TrapPumping_Analysis.traps.serial import (\n     SerialTrapLocator,\n )\n \n+CONFIG = AnalysisConfig()\n+\n \n @fixture(scope=\"module\")\n-def stack():\n+def cube():\n     data = np.zeros((10, 1, 12))\n \n     # Present in trap_pos but not in indices, since col < 5\n@@ -32,11 +35,8 @@ def stack():\n @fixture(scope=\"module\")\n def trap_pos():\n     positions = np.zeros((1, 9), dtype=bool)\n-    # TODO: These indices are currently one too low. Expected col index is 6\n-    # based on stack setup. See branch trap_pos_offset_demo for example of\n-    # situation with real data. This is corrected for in extract_dipoles but\n-    # not in model fitting results, in which the col is only corrected based on\n-    # scheme and dipole direction (low -> high/high -> low).\n+    # These have column one index lower that `trap_indices`, due to offset\n+    # introduced by algorithm for finding the dipole pattern.\n     positions[0, 2] = True\n     positions[0, 6] = True\n     positions[0, 8] = True\n@@ -45,7 +45,7 @@ def trap_pos():\n \n @fixture(scope=\"module\")\n def trap_indices():\n-    return np.array([[0, 6], [0, 8]])\n+    return np.array([[0, 7], [0, 9]])\n \n \n @fixture(scope=\"module\")\n@@ -56,32 +56,30 @@ def dipoles():\n     return dipole_vals\n \n \n-def test_find_trap_positions(stack, trap_pos):\n+def test_find_trap_positions(cube, trap_pos):\n     expected = trap_pos\n-    actual = SerialTrapLocator.find_trap_positions(stack, 5)\n+    actual = SerialTrapLocator.find_trap_positions(cube, CONFIG)\n     assert (actual == expected).all()\n \n \n-@patch(\n-    \"VIS_TrapPumping.VIS_TrapPumping_Analysis.traps.serial.SerialTrapLocator.extract_dipoles\",\n-    autospec=True,\n-)\n-def test_get_dipole_intensities(\n-    mock_extract_dipoles, dipoles, stack, trap_indices\n-):\n+def test_get_trap_indices(trap_pos, trap_indices):\n+    expected = trap_indices\n+    actual = SerialTrapLocator.get_trap_indices(trap_pos)\n+    assert (actual == expected).all()\n+\n+\n+def test_get_dipole_intensities(dipoles, cube):\n     expected = np.zeros((2, 10))\n     expected[0, 3:7] = -0.1\n     expected[1, 7:9] = 0.1\n-    mock_extract_dipoles.return_value = dipoles\n     mock_data = MagicMock()\n-    mock_data.clock.cycles = np.array([2000] * stack.shape[0])\n+    mock_data.clock.cycles = np.array([2000] * cube.shape[0])\n     trap_locator = SerialTrapLocator(mock_data)\n-    actual = trap_locator.get_dipole_intensities(stack, trap_indices)\n-    mock_extract_dipoles.assert_called_once_with(stack, trap_indices)\n+    actual = trap_locator.get_dipole_intensities(dipoles, CONFIG)\n     assert (actual == expected).all()\n \n \n-def test_extract_dipoles(stack, trap_indices, dipoles):\n+def test_extract_dipoles(cube, trap_indices, dipoles):\n     expected = dipoles\n-    actual = SerialTrapLocator.extract_dipoles(stack, trap_indices)\n+    actual = SerialTrapLocator.extract_dipoles(cube, trap_indices)\n     assert (actual == expected).all()\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_XTalk/tests/python/VIS_XTalkCoeff_test.py": [
                        [
                            "@@ -3,7 +3,7 @@\n @date 01/03/21\n @author user\n \"\"\"\n-import py.test\n+import pytest\n import VIS_XTalk.VIS_XTalkCoeff\n \n class TestVIS_XTalkCoeff(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_XTalk/tests/python/VIS_XTalk_calibration_test.py": [
                        [
                            "@@ -3,7 +3,7 @@\n @date 01/03/21\n @author user\n \"\"\"\n-import py.test\n+import pytest\n import VIS_XTalk.VIS_XTalk_calibration\n \n class TestVIS_XTalk_calibration(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_XTalk/tests/python/VIS_XTalk_correction.py": [
                        [
                            "@@ -3,7 +3,7 @@\n @date 01/03/21\n @author user\n \"\"\"\n-import py.test\n+import pytest\n import VIS_XTalk.VIS_XTalk_correction\n \n class TestVIS_XTalk_correction(object):\n",
                            "Merge branch 'develop' into wcsfit-multi-obs",
                            "Leigh Smith",
                            "2023-07-31T10:40:03.000+01:00",
                            "721f9a15f198a5889864bf8f0448362aa5af88f5"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_process_astro_field.py": [
                        [
                            "@@ -129,11 +129,15 @@ def mainMethod(args):\n         else:\n             # run wcsfit in 'use-fpa-model' mode to copy distmodel to headers and reconstruct pointing\n             for catalogue, exposure in zip( catalog_list, exposure_list):\n+                # Open the catalog to find exposure duration (EXPTIME in #HDU 0)\n+                with fits.open(catalogue, mode='readonly',  memmap=False) as hdul:\n+                    exptime = hdul[0].header[\"EXPTIME\"]\n                 logger.info (\"==> Performing Wcsfit run on %s...\", catalogue)\n                 Modules.Wcsfit( config,\n                                 catalogue,\n                                 reference_starcat,\n                                 headers_to_update( exposure),\n+                                exptime,\n                                 os.path.join( visdef.logdir_name( args.logdir), visdiags.DIAGDIR))\n \n     # write output lists to JSON files\n",
                            "[ENH]Feature #23191 Astrometric calibration (use-fpa-model): adapt magnitude range selection to exposure duration",
                            "Catherine Grenet",
                            "2023-07-29T12:41:51.000+02:00",
                            "f72b6bb6fa2a29935463bd8c402c3f1ae1927344"
                        ]
                    ],
                    "VIS_NonLinearity/python/VIS_NonLinearity/VIS_NonLin_Removal/non_lin_flat_removal_old.py": [
                        [
                            "@@ -1,92 +0,0 @@\n-\"\"\"Corrects the non-linearity effect in image pixel data, using a model from flat images.\n-\n-standalone test with:\n-\n-$ cd /sps/euclid/Users/smottet/wrk_pattynlcorr\n-$ E-Run VIS_Tasks VIS_remove_non_lin_flat --in_image EUC_VIS_EXP_000024-01-1.fits_sa_bs.010 --in_model Patty_FlatfieldNL.json --extname  1-3.F --out_file_name outfilename.fits\n-\n-\"\"\"\n-#\n-# Copyright (C) 2012-2023 Euclid Science Ground Segment\n-#\n-# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n-# Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n-# any later version.\n-#\n-# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n-# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n-# details.\n-#\n-# You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n-# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n-#\n-\n-import numpy as np\n-\n-import logging\n-logger = logging.getLogger( __name__)\n-\n-__all__ = ['remove_non_lin']\n-\n-#flux values above this should not occur.  If they do exist they will receive the same correction as 65535.0\n-_EXTRAPOLATION_LIMIT = 100_000\n-\n-\n-def remove_non_lin(image, points_model, linear_up_to_adu=0.0):\n-  \"\"\"Correct the non-linearity effect in an image by applying a model defined by several fixed points.\n-\n-  Parameters\n-  ----------\n-  image : array_like of number\n-      A 2-D array which is to be corrected for the non-linearity effect.\n-  points_model : 2-D ndarray of floats\n-      A set of pairs of numbers.  In each pair, index [1] is a non-linear (i.e. observed) flux and [0] is the\n-      corresponding linear (i.e. corrected) flux.\n-  linear_up_to_adu: ADU value under which signal is supposed to be linear and non-linearity is not corrected\n-\n-  Returns\n-  -------\n-  array_like of number\n-      A copy of `image` with the non-linearity effect corrected.\n-  \"\"\"\n-\n-  assert np.count_nonzero( np.isnan( image)) == 0, \\\n-    \"Error: some pixels are NotANumber in source image\"\n-\n-  # prepend two additional linear points at -1000 ADU and 'linear_up_to_adu'\n-  # to take into account negative readout noise values in overscans and not correct pixels up to 'linear_up_to_adu'\n-  ext_model = np.array( [[-1000.0, -1000.0], [linear_up_to_adu, linear_up_to_adu]], dtype=np.float32)\n-  for pair_i in range( len( points_model)-1):\n-    linear_val, nonlin_val = points_model[pair_i]\n-    if nonlin_val <= linear_up_to_adu:\n-      continue\n-    ext_model = np.concatenate((ext_model, [points_model[pair_i]]))\n-\n-  if ext_model[-1,1] < _EXTRAPOLATION_LIMIT:\n-    #append a new last point at _EXTRAPOLATION_LIMIT\n-    last_linear_diff = ext_model[-1,0] - ext_model[-2,0]\n-    last_nl_diff = ext_model[-1,1] - ext_model[-2,1]\n-    #gradient means the slope steepness of linear over non-linear (i.e. linear per non-linear flux)\n-    gradient = last_linear_diff / last_nl_diff\n-    new_last_point = np.zeros_like(points_model, shape=(1,2))\n-    new_last_point[0,1] = _EXTRAPOLATION_LIMIT\n-    new_last_point[0,0] = ext_model[-1,0] + (_EXTRAPOLATION_LIMIT - ext_model[-1,1]) * gradient\n-    ext_model = np.concatenate((ext_model, new_last_point))\n-\n-  corrected_img = image.copy() * np.nan\n-\n-  for pair_i in range( len( ext_model)-1):\n-    linear_beg, nonlin_beg = ext_model[pair_i]\n-    linear_end, nonlin_end = ext_model[pair_i+1]\n-    logger.debug( f\"linear_beg, nonlin_beg, linear_end, nonlin_end = {linear_beg:.2f}, {nonlin_beg:.2f}, {linear_end:.2f}, {nonlin_end:.2f}\")\n-    nl_pixels_mask = np.logical_and( image >= nonlin_beg, image < nonlin_end)\n-    logger.debug( f\"pixel count = {np.count_nonzero( nl_pixels_mask)}\")\n-    linear_diff = linear_end - linear_beg\n-    nl_diff     = nonlin_end - nonlin_beg\n-    corrected_img[nl_pixels_mask] = linear_beg + (image[nl_pixels_mask] - nonlin_beg) / nl_diff * linear_diff\n-\n-  uncorrected_pixel_count = np.count_nonzero( np.isnan( corrected_img))\n-  logger.debug( f\"uncorrected pixels = {uncorrected_pixel_count}\")\n-  assert uncorrected_pixel_count == 0, \\\n-    \"Error: some pixels are not in the range of NL correction model, this should not happen\"\n-  return corrected_img\n",
                            "Issue 22702: Delete old code",
                            "Chris Dolding",
                            "2023-07-27T13:31:11.000+01:00",
                            "3c5a43d8d51247eff58969e04287bc5e23b9ba15"
                        ],
                        [
                            "@@ -0,0 +1,92 @@\n+\"\"\"Corrects the non-linearity effect in image pixel data, using a model from flat images.\n+\n+standalone test with:\n+\n+$ cd /sps/euclid/Users/smottet/wrk_pattynlcorr\n+$ E-Run VIS_Tasks VIS_remove_non_lin_flat --in_image EUC_VIS_EXP_000024-01-1.fits_sa_bs.010 --in_model Patty_FlatfieldNL.json --extname  1-3.F --out_file_name outfilename.fits\n+\n+\"\"\"\n+#\n+# Copyright (C) 2012-2023 Euclid Science Ground Segment\n+#\n+# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n+# Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n+# any later version.\n+#\n+# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n+# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+# details.\n+#\n+# You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n+# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+#\n+\n+import numpy as np\n+\n+import logging\n+logger = logging.getLogger( __name__)\n+\n+__all__ = ['remove_non_lin']\n+\n+#flux values above this should not occur.  If they do exist they will receive the same correction as 65535.0\n+_EXTRAPOLATION_LIMIT = 100_000\n+\n+\n+def remove_non_lin(image, points_model, linear_up_to_adu=0.0):\n+  \"\"\"Correct the non-linearity effect in an image by applying a model defined by several fixed points.\n+\n+  Parameters\n+  ----------\n+  image : array_like of number\n+      A 2-D array which is to be corrected for the non-linearity effect.\n+  points_model : 2-D ndarray of floats\n+      A set of pairs of numbers.  In each pair, index [1] is a non-linear (i.e. observed) flux and [0] is the\n+      corresponding linear (i.e. corrected) flux.\n+  linear_up_to_adu: ADU value under which signal is supposed to be linear and non-linearity is not corrected\n+\n+  Returns\n+  -------\n+  array_like of number\n+      A copy of `image` with the non-linearity effect corrected.\n+  \"\"\"\n+\n+  assert np.count_nonzero( np.isnan( image)) == 0, \\\n+    \"Error: some pixels are NotANumber in source image\"\n+\n+  # prepend two additional linear points at -1000 ADU and 'linear_up_to_adu'\n+  # to take into account negative readout noise values in overscans and not correct pixels up to 'linear_up_to_adu'\n+  ext_model = np.array( [[-1000.0, -1000.0], [linear_up_to_adu, linear_up_to_adu]], dtype=np.float32)\n+  for pair_i in range( len( points_model)-1):\n+    linear_val, nonlin_val = points_model[pair_i]\n+    if nonlin_val <= linear_up_to_adu:\n+      continue\n+    ext_model = np.concatenate((ext_model, [points_model[pair_i]]))\n+\n+  if ext_model[-1,1] < _EXTRAPOLATION_LIMIT:\n+    #append a new last point at _EXTRAPOLATION_LIMIT\n+    last_linear_diff = ext_model[-1,0] - ext_model[-2,0]\n+    last_nl_diff = ext_model[-1,1] - ext_model[-2,1]\n+    #gradient means the slope steepness of linear over non-linear (i.e. linear per non-linear flux)\n+    gradient = last_linear_diff / last_nl_diff\n+    new_last_point = np.zeros_like(points_model, shape=(1,2))\n+    new_last_point[0,1] = _EXTRAPOLATION_LIMIT\n+    new_last_point[0,0] = ext_model[-1,0] + (_EXTRAPOLATION_LIMIT - ext_model[-1,1]) * gradient\n+    ext_model = np.concatenate((ext_model, new_last_point))\n+\n+  corrected_img = image.copy() * np.nan\n+\n+  for pair_i in range( len( ext_model)-1):\n+    linear_beg, nonlin_beg = ext_model[pair_i]\n+    linear_end, nonlin_end = ext_model[pair_i+1]\n+    logger.debug( f\"linear_beg, nonlin_beg, linear_end, nonlin_end = {linear_beg:.2f}, {nonlin_beg:.2f}, {linear_end:.2f}, {nonlin_end:.2f}\")\n+    nl_pixels_mask = np.logical_and( image >= nonlin_beg, image < nonlin_end)\n+    logger.debug( f\"pixel count = {np.count_nonzero( nl_pixels_mask)}\")\n+    linear_diff = linear_end - linear_beg\n+    nl_diff     = nonlin_end - nonlin_beg\n+    corrected_img[nl_pixels_mask] = linear_beg + (image[nl_pixels_mask] - nonlin_beg) / nl_diff * linear_diff\n+\n+  uncorrected_pixel_count = np.count_nonzero( np.isnan( corrected_img))\n+  logger.debug( f\"uncorrected pixels = {uncorrected_pixel_count}\")\n+  assert uncorrected_pixel_count == 0, \\\n+    \"Error: some pixels are not in the range of NL correction model, this should not happen\"\n+  return corrected_img\n",
                            "Issue 22702: Merge VIS_NonLinearity_Flat into VIS_NonLinearity",
                            "Chris Dolding",
                            "2023-07-25T18:00:13.000+01:00",
                            "409a404d40f5c79a4d142196961c619ba50b006d"
                        ]
                    ],
                    "VIS_NonLinearity_Flat/auxdir/VIS_NonLinearity_Flat/Patty_FlatfieldNL.json": [
                        [
                            "@@ -1,8934 +0,0 @@\n-{\n-  \"date\": \"2023-06-20 21:15:52.647976\",\n-  \"reference\": \"https://euclid.roe.ac.uk/dmsf/files/19066\",\n-  \"author\": \"Patricia Liebing <liebing@strw.leidenuniv.nl>\",\n-  \"description\": \"Non-linearity correction model. Contains a dictionary in which each key is a quadrant id and its associated value is a list of pair of values. The first value in the pair is the linear signal in ADU and the second one is the correcponding non-linear signal in ADU.\",\n-  \"1-1.E\": [\n-    [\n-      5.7205759826688904,\n-      5.807249847988931\n-    ],\n-    [\n-      12.088025578334763,\n-      12.13829002398899\n-    ],\n-    [\n-      31.357132187303225,\n-      31.468369922215974\n-    ],\n-    [\n-      63.12610021814389,\n-      62.992331362068676\n-    ],\n-    [\n-      127.18233644061723,\n-      127.07687630976658\n-    ],\n-    [\n-      319.2614419237922,\n-      319.15183262424875\n-    ],\n-    [\n-      639.6414209206326,\n-      639.7731134066603\n-    ],\n-    [\n-      1281.0531955783497,\n-      1282.3205548366452\n-    ],\n-    [\n-      3209.5279760698586,\n-      3218.461708954091\n-    ],\n-    [\n-      6438.379363052668,\n-      6474.959727033666\n-    ],\n-    [\n-      12949.723502523604,\n-      13089.290747508476\n-    ],\n-    [\n-      32698.444425748825,\n-      33398.46232320779\n-    ],\n-    [\n-      39328.831991792795,\n-      40263.488795679245\n-    ],\n-    [\n-      52608.14872305627,\n-      54032.42242146698\n-    ],\n-    [\n-      59221.55010694724,\n-      60863.18786984436\n-    ]\n-  ],\n-  \"1-1.F\": [\n-    [\n-      5.613295160128764,\n-      5.543665164636964\n-    ],\n-    [\n-      12.118198732294374,\n-      12.094645651132844\n-    ],\n-    [\n-      31.353153313243382,\n-      31.19135661959049\n-    ],\n-    [\n-      63.936735082900825,\n-      64.06796216005118\n-    ],\n-    [\n-      128.32357083119004,\n-      128.26141997101877\n-    ],\n-    [\n-      322.01553827528215,\n-      321.90542533186215\n-    ],\n-    [\n-      645.0070887501087,\n-      644.9886020361411\n-    ],\n-    [\n-      1290.927192851657,\n-      1291.0290435258132\n-    ],\n-    [\n-      3234.163591010039,\n-      3240.113483186127\n-    ],\n-    [\n-      6486.505565576988,\n-      6515.920471522566\n-    ],\n-    [\n-      13041.794902208221,\n-      13162.866015848904\n-    ],\n-    [\n-      32921.16652986023,\n-      33565.4873676327\n-    ],\n-    [\n-      39593.83975429667,\n-      40458.966687376786\n-    ],\n-    [\n-      52957.395470631855,\n-      54284.0040242403\n-    ],\n-    [\n-      59628.55302751577,\n-      61174.99387159953\n-    ]\n-  ],\n-  \"1-1.G\": [\n-    [\n-      5.599769799418902,\n-      5.496858766520009\n-    ],\n-    [\n-      12.081437495484893,\n-      11.97752892457931\n-    ],\n-    [\n-      31.42573532358569,\n-      31.221639602058612\n-    ],\n-    [\n-      63.905099284189184,\n-      63.771117145253996\n-    ],\n-    [\n-      128.75358973407248,\n-      128.65150215997795\n-    ],\n-    [\n-      323.20963820592107,\n-      323.1143479268144\n-    ],\n-    [\n-      647.2334975362834,\n-      647.0800857877216\n-    ],\n-    [\n-      1296.4457524404575,\n-      1297.3411991392816\n-    ],\n-    [\n-      3248.409188124175,\n-      3256.7971698388997\n-    ],\n-    [\n-      6517.470855608609,\n-      6554.285846275476\n-    ],\n-    [\n-      13113.449663144489,\n-      13258.782935451602\n-    ],\n-    [\n-      33140.84774768238,\n-      33890.87259264311\n-    ],\n-    [\n-      39872.29845950147,\n-      40880.395166266906\n-    ],\n-    [\n-      53363.97748018454,\n-      54919.68285362805\n-    ],\n-    [\n-      60110.893273293885,\n-      61941.93302119293\n-    ]\n-  ],\n-  \"1-1.H\": [\n-    [\n-      5.80178605396546,\n-      5.872122455661349\n-    ],\n-    [\n-      12.316158867184534,\n-      12.387339020001251\n-    ],\n-    [\n-      31.659931899091898,\n-      31.535681131316952\n-    ],\n-    [\n-      64.24763833252675,\n-      64.14529208745206\n-    ],\n-    [\n-      129.42323938813095,\n-      129.3654054379309\n-    ],\n-    [\n-      324.7689587077651,\n-      324.66398607513395\n-    ],\n-    [\n-      650.5744034563088,\n-      650.6200761133314\n-    ],\n-    [\n-      1302.9134207379386,\n-      1303.989457954935\n-    ],\n-    [\n-      3264.6248774426763,\n-      3273.507019895484\n-    ],\n-    [\n-      6549.021546340749,\n-      6585.935520421089\n-    ],\n-    [\n-      13173.218013224034,\n-      13314.848906257115\n-    ],\n-    [\n-      33274.21353406791,\n-      33999.190425819965\n-    ],\n-    [\n-      40024.65127889565,\n-      40994.454258884136\n-    ],\n-    [\n-      53548.919731754104,\n-      55033.928818992834\n-    ],\n-    [\n-      60297.4386044385,\n-      62025.971053909285\n-    ]\n-  ],\n-  \"1-2.E\": [\n-    [\n-      5.704003225805044,\n-      5.693403359563271\n-    ],\n-    [\n-      12.205038296993122,\n-      12.20243481447973\n-    ],\n-    [\n-      31.95070125067607,\n-      32.216903488318806\n-    ],\n-    [\n-      64.31118069147715,\n-      64.47096351758879\n-    ],\n-    [\n-      129.13835724108927,\n-      129.19475468745958\n-    ],\n-    [\n-      323.878342072837,\n-      323.8841160971512\n-    ],\n-    [\n-      648.644986965484,\n-      648.7664636920285\n-    ],\n-    [\n-      1299.1429195834846,\n-      1300.461713901567\n-    ],\n-    [\n-      3255.0759001982465,\n-      3264.447501188085\n-    ],\n-    [\n-      6530.464316185204,\n-      6568.912872697433\n-    ],\n-    [\n-      13139.485274080751,\n-      13289.050392397534\n-    ],\n-    [\n-      33208.27593806766,\n-      33969.28296073798\n-    ],\n-    [\n-      39951.35486373432,\n-      40970.7358469784\n-    ],\n-    [\n-      53457.01517926583,\n-      55014.762916946136\n-    ],\n-    [\n-      60201.35832541849,\n-      62019.62974072058\n-    ]\n-  ],\n-  \"1-2.F\": [\n-    [\n-      5.710810136029215,\n-      5.747673681612526\n-    ],\n-    [\n-      12.156132505333645,\n-      12.191111010310296\n-    ],\n-    [\n-      31.439173052460696,\n-      31.41589722191518\n-    ],\n-    [\n-      63.886738140026004,\n-      64.07621600390165\n-    ],\n-    [\n-      128.29012289128153,\n-      128.4118316675704\n-    ],\n-    [\n-      321.57976002667033,\n-      321.5788518912974\n-    ],\n-    [\n-      644.0026881247459,\n-      644.0711588797042\n-    ],\n-    [\n-      1289.4547797658527,\n-      1290.2687353916658\n-    ],\n-    [\n-      3229.9151009407606,\n-      3237.083447308682\n-    ],\n-    [\n-      6477.39786705945,\n-      6508.647627289575\n-    ],\n-    [\n-      13019.581517714241,\n-      13140.761958312372\n-    ],\n-    [\n-      32848.83370758021,\n-      33474.790105337386\n-    ],\n-    [\n-      39504.13825234455,\n-      40344.11162360062\n-    ],\n-    [\n-      52824.79909737566,\n-      54104.04975988274\n-    ],\n-    [\n-      59476.947116115756,\n-      60967.46777380574\n-    ]\n-  ],\n-  \"1-2.G\": [\n-    [\n-      5.817950254915522,\n-      5.838836172212225\n-    ],\n-    [\n-      12.439541056645531,\n-      12.49541755325667\n-    ],\n-    [\n-      32.19442234864351,\n-      32.244684784749325\n-    ],\n-    [\n-      65.16780047141113,\n-      65.25761169436339\n-    ],\n-    [\n-      130.88087226871684,\n-      130.81591475869988\n-    ],\n-    [\n-      328.4241482029299,\n-      328.2992220945545\n-    ],\n-    [\n-      658.030470797949,\n-      658.1730924730828\n-    ],\n-    [\n-      1317.9659941526077,\n-      1319.3680819126291\n-    ],\n-    [\n-      3302.1259644316087,\n-      3311.6816046509844\n-    ],\n-    [\n-      6622.436202610635,\n-      6659.088716451719\n-    ],\n-    [\n-      13314.384993131389,\n-      13450.023873687907\n-    ],\n-    [\n-      33580.03323601273,\n-      34239.68961540917\n-    ],\n-    [\n-      40374.626986789524,\n-      41247.88076496593\n-    ],\n-    [\n-      53971.6690162953,\n-      55280.9356495109\n-    ],\n-    [\n-      60758.350180587884,\n-      62273.372752595824\n-    ]\n-  ],\n-  \"1-2.H\": [\n-    [\n-      6.110027143971594,\n-      6.339510570247705\n-    ],\n-    [\n-      12.746781178245568,\n-      12.915947970848139\n-    ],\n-    [\n-      32.80434217530778,\n-      32.956622426787455\n-    ],\n-    [\n-      66.2220520486799,\n-      66.33664242270629\n-    ],\n-    [\n-      133.384131170467,\n-      133.75182541269643\n-    ],\n-    [\n-      333.74984357267977,\n-      333.75286257230346\n-    ],\n-    [\n-      668.5461020407669,\n-      668.7965201342898\n-    ],\n-    [\n-      1338.6241605609678,\n-      1339.8557692950885\n-    ],\n-    [\n-      3351.927623577267,\n-      3359.1835674762433\n-    ],\n-    [\n-      6721.955790080625,\n-      6753.885699120209\n-    ],\n-    [\n-      13516.508110106693,\n-      13645.030433330623\n-    ],\n-    [\n-      34142.56548068248,\n-      34845.206791608754\n-    ],\n-    [\n-      41067.867987461184,\n-      42011.87622436477\n-    ],\n-    [\n-      54919.33664953573,\n-      56347.85943030654\n-    ],\n-    [\n-      61826.70513097341,\n-      63478.37732268197\n-    ]\n-  ],\n-  \"1-3.E\": [\n-    [\n-      5.727795066003439,\n-      5.805719990006721\n-    ],\n-    [\n-      12.129965984161958,\n-      12.18866343008562\n-    ],\n-    [\n-      31.362254677280053,\n-      31.391081402206748\n-    ],\n-    [\n-      63.33562443085981,\n-      63.23478173614205\n-    ],\n-    [\n-      127.58635727431188,\n-      127.52976468181913\n-    ],\n-    [\n-      320.1853899676095,\n-      320.1087702226322\n-    ],\n-    [\n-      641.3916240413969,\n-      641.4894878142408\n-    ],\n-    [\n-      1284.5108799670525,\n-      1285.6655274238917\n-    ],\n-    [\n-      3219.1090962448734,\n-      3228.6989717874594\n-    ],\n-    [\n-      6461.69408073116,\n-      6503.795571937185\n-    ],\n-    [\n-      13010.686145804,\n-      13176.889936427353\n-    ],\n-    [\n-      32955.0182552914,\n-      33830.27672041135\n-    ],\n-    [\n-      39661.117105457764,\n-      40832.81682870894\n-    ],\n-    [\n-      53097.498385291554,\n-      54889.17083535798\n-    ],\n-    [\n-      59776.206264031636,\n-      61836.08728808219\n-    ]\n-  ],\n-  \"1-3.F\": [\n-    [\n-      5.6732546149737795,\n-      5.586809689433802\n-    ],\n-    [\n-      12.32092616069726,\n-      12.335075504498212\n-    ],\n-    [\n-      32.256109057911914,\n-      32.57120784447557\n-    ],\n-    [\n-      64.93893170298516,\n-      65.20612224977884\n-    ],\n-    [\n-      130.1038885451256,\n-      130.07739164456697\n-    ],\n-    [\n-      326.638527772388,\n-      326.7740441922094\n-    ],\n-    [\n-      653.8520785742296,\n-      653.9133089418734\n-    ],\n-    [\n-      1309.2557868744077,\n-      1310.1457515751954\n-    ],\n-    [\n-      3279.997383726206,\n-      3287.920765309277\n-    ],\n-    [\n-      6577.778939544158,\n-      6610.751424779628\n-    ],\n-    [\n-      13224.422038711029,\n-      13353.01437530105\n-    ],\n-    [\n-      33376.66622778412,\n-      34038.19579676565\n-    ],\n-    [\n-      40140.03286270874,\n-      41025.42478586539\n-    ],\n-    [\n-      53680.60489187508,\n-      55028.98913882992\n-    ],\n-    [\n-      60440.48665797711,\n-      62009.66607611136\n-    ]\n-  ],\n-  \"1-3.G\": [\n-    [\n-      5.957401358518357,\n-      6.078955922588866\n-    ],\n-    [\n-      12.54328753420721,\n-      12.615190261048713\n-    ],\n-    [\n-      32.284799046971,\n-      32.19749082029188\n-    ],\n-    [\n-      65.66405033490639,\n-      65.78840785155153\n-    ],\n-    [\n-      131.90814152226082,\n-      131.9411957100729\n-    ],\n-    [\n-      331.06233985918004,\n-      331.24416837256365\n-    ],\n-    [\n-      662.5493965552258,\n-      662.5423310319959\n-    ],\n-    [\n-      1326.791404066331,\n-      1327.6752323446876\n-    ],\n-    [\n-      3323.9361648950085,\n-      3331.928279327289\n-    ],\n-    [\n-      6668.101302387866,\n-      6703.66964205771\n-    ],\n-    [\n-      13412.477828146652,\n-      13553.026587664039\n-    ],\n-    [\n-      33880.190051541234,\n-      34608.93562149102\n-    ],\n-    [\n-      40753.609640155555,\n-      41729.74666914575\n-    ],\n-    [\n-      54526.707884867894,\n-      56026.20869133941\n-    ],\n-    [\n-      61389.595938605955,\n-      63126.10363938782\n-    ]\n-  ],\n-  \"1-3.H\": [\n-    [\n-      6.07421885266647,\n-      6.339026742786293\n-    ],\n-    [\n-      12.693307582671999,\n-      12.958272128429048\n-    ],\n-    [\n-      32.553223599503816,\n-      32.835247524604895\n-    ],\n-    [\n-      65.32052715407761,\n-      65.30100146212969\n-    ],\n-    [\n-      131.60840450520084,\n-      131.7440165406522\n-    ],\n-    [\n-      330.0613397792238,\n-      330.25122421779963\n-    ],\n-    [\n-      660.763519173578,\n-      660.9911730226419\n-    ],\n-    [\n-      1323.4336607070145,\n-      1325.0044814978578\n-    ],\n-    [\n-      3314.0162758701535,\n-      3322.2017917296125\n-    ],\n-    [\n-      6648.563238157313,\n-      6684.828545194445\n-    ],\n-    [\n-      13376.83709123608,\n-      13522.146450235112\n-    ],\n-    [\n-      33793.23188083309,\n-      34536.829216163045\n-    ],\n-    [\n-      40649.809919106796,\n-      41644.44351254646\n-    ],\n-    [\n-      54385.82527799057,\n-      55907.5634072974\n-    ],\n-    [\n-      61226.10265121599,\n-      62982.3852074855\n-    ]\n-  ],\n-  \"1-4.E\": [\n-    [\n-      5.644369568481149,\n-      5.563014876425497\n-    ],\n-    [\n-      12.078471454119875,\n-      11.925018662377381\n-    ],\n-    [\n-      31.546426419309633,\n-      31.339369555430107\n-    ],\n-    [\n-      63.95199289456012,\n-      63.6159870340307\n-    ],\n-    [\n-      129.32276200448143,\n-      129.28591669851522\n-    ],\n-    [\n-      324.0494603623695,\n-      323.530589907936\n-    ],\n-    [\n-      649.8984915985808,\n-      649.8785869891551\n-    ],\n-    [\n-      1301.0344775775225,\n-      1301.4522247299492\n-    ],\n-    [\n-      3259.237203248968,\n-      3265.7752765735995\n-    ],\n-    [\n-      6536.25809173451,\n-      6566.450498404998\n-    ],\n-    [\n-      13149.713075864758,\n-      13272.651868681622\n-    ],\n-    [\n-      33164.23332093163,\n-      33806.52680904054\n-    ],\n-    [\n-      39884.621379031254,\n-      40746.33926099582\n-    ],\n-    [\n-      53347.10998582783,\n-      54671.19132230105\n-    ],\n-    [\n-      60075.71806087801,\n-      61628.47750114802\n-    ]\n-  ],\n-  \"1-4.F\": [\n-    [\n-      5.554400332993697,\n-      5.49037505048099\n-    ],\n-    [\n-      11.897708359430325,\n-      11.792613613465578\n-    ],\n-    [\n-      30.92655485574346,\n-      30.697380772321555\n-    ],\n-    [\n-      62.848750432864456,\n-      62.61807569065622\n-    ],\n-    [\n-      126.98120066729489,\n-      127.0364802783576\n-    ],\n-    [\n-      318.01751675835806,\n-      317.57268908484076\n-    ],\n-    [\n-      637.7170989590797,\n-      637.7428687204742\n-    ],\n-    [\n-      1276.6041567118914,\n-      1277.0604207334698\n-    ],\n-    [\n-      3198.794483693146,\n-      3206.087371996695\n-    ],\n-    [\n-      6414.709592444012,\n-      6445.7670640181595\n-    ],\n-    [\n-      12902.593501827667,\n-      13023.448785116183\n-    ],\n-    [\n-      32535.204042257832,\n-      33160.114263632175\n-    ],\n-    [\n-      39128.573771200834,\n-      39968.14606604363\n-    ],\n-    [\n-      52344.10891553086,\n-      53643.941878277255\n-    ],\n-    [\n-      58939.8337679149,\n-      60457.42267816878\n-    ]\n-  ],\n-  \"1-4.G\": [\n-    [\n-      5.882019529624445,\n-      5.878176114920667\n-    ],\n-    [\n-      12.680680512891895,\n-      12.788822683073287\n-    ],\n-    [\n-      32.76214450174328,\n-      32.888562472246505\n-    ],\n-    [\n-      66.03860376609822,\n-      66.00307985415178\n-    ],\n-    [\n-      132.82614550297004,\n-      132.70239094355324\n-    ],\n-    [\n-      333.4614368840268,\n-      333.3452802900193\n-    ],\n-    [\n-      668.1203026234044,\n-      668.2836553915739\n-    ],\n-    [\n-      1337.8126883219534,\n-      1338.910575448885\n-    ],\n-    [\n-      3351.1652138657205,\n-      3359.35862469666\n-    ],\n-    [\n-      6718.325988051148,\n-      6750.01545434336\n-    ],\n-    [\n-      13512.168474213622,\n-      13632.729797638447\n-    ],\n-    [\n-      34044.24063328262,\n-      34662.370954952494\n-    ],\n-    [\n-      40938.30904075562,\n-      41768.39442737214\n-    ],\n-    [\n-      54748.33332102256,\n-      56025.90499045691\n-    ],\n-    [\n-      61613.08964536806,\n-      63072.46499443297\n-    ]\n-  ],\n-  \"1-4.H\": [\n-    [\n-      5.674262914494702,\n-      5.582592459716469\n-    ],\n-    [\n-      12.228926448770473,\n-      12.138064919232345\n-    ],\n-    [\n-      32.06577839111303,\n-      32.152235005894795\n-    ],\n-    [\n-      64.81070155112472,\n-      64.87677107358839\n-    ],\n-    [\n-      129.81867842851378,\n-      129.36396574006267\n-    ],\n-    [\n-      326.90556480597286,\n-      326.94526245960816\n-    ],\n-    [\n-      654.4635300253802,\n-      654.40972972841\n-    ],\n-    [\n-      1311.536928419943,\n-      1313.255846437038\n-    ],\n-    [\n-      3284.5234947573845,\n-      3293.3416124432324\n-    ],\n-    [\n-      6584.925150011596,\n-      6617.769743721053\n-    ],\n-    [\n-      13238.959117684846,\n-      13357.439563876505\n-    ],\n-    [\n-      33325.96786721327,\n-      33897.20194645024\n-    ],\n-    [\n-      40060.2703026942,\n-      40817.18758565684\n-    ],\n-    [\n-      53541.54595658852,\n-      54683.49127616696\n-    ],\n-    [\n-      60274.014879098286,\n-      61600.09998814385\n-    ]\n-  ],\n-  \"1-5.E\": [\n-    [\n-      5.89294016146893,\n-      5.9478166954725635\n-    ],\n-    [\n-      12.452175660992845,\n-      12.431964617534497\n-    ],\n-    [\n-      32.39270691690984,\n-      32.41145856048488\n-    ],\n-    [\n-      65.71826895715026,\n-      65.89379353469192\n-    ],\n-    [\n-      131.95491614242488,\n-      132.02816937266562\n-    ],\n-    [\n-      330.9303715073364,\n-      330.96355556366433\n-    ],\n-    [\n-      662.6349442197552,\n-      662.6802302888707\n-    ],\n-    [\n-      1326.9670375332157,\n-      1327.9602156821566\n-    ],\n-    [\n-      3325.3090392261456,\n-      3334.514113914046\n-    ],\n-    [\n-      6671.8401234149915,\n-      6710.853013664394\n-    ],\n-    [\n-      13435.529080350698,\n-      13590.117340938117\n-    ],\n-    [\n-      33937.165479377676,\n-      34723.69545696076\n-    ],\n-    [\n-      40826.39086106543,\n-      41876.83039209784\n-    ],\n-    [\n-      54630.34338625707,\n-      56236.56422180105\n-    ],\n-    [\n-      61479.59097001604,\n-      63308.14846730759\n-    ]\n-  ],\n-  \"1-5.F\": [\n-    [\n-      6.054200989598048,\n-      6.2318934886681\n-    ],\n-    [\n-      12.42330315046008,\n-      12.283900595986932\n-    ],\n-    [\n-      32.41688249587125,\n-      32.222514291868244\n-    ],\n-    [\n-      65.8969947688006,\n-      65.76825776692961\n-    ],\n-    [\n-      132.93963656978045,\n-      133.0262244878084\n-    ],\n-    [\n-      333.12392800521604,\n-      332.9135078045358\n-    ],\n-    [\n-      667.4927877404155,\n-      667.5154763622875\n-    ],\n-    [\n-      1335.95461668175,\n-      1336.1679301556867\n-    ],\n-    [\n-      3347.071698520443,\n-      3353.601110118055\n-    ],\n-    [\n-      6712.901046194605,\n-      6744.034683242057\n-    ],\n-    [\n-      13505.291103070653,\n-      13631.780192765133\n-    ],\n-    [\n-      34060.54117165222,\n-      34720.88078947021\n-    ],\n-    [\n-      40960.56467271593,\n-      41844.32189939277\n-    ],\n-    [\n-      54778.96542777946,\n-      56129.53052793031\n-    ],\n-    [\n-      61672.56870512013,\n-      63240.39699428091\n-    ]\n-  ],\n-  \"1-5.G\": [\n-    [\n-      5.6429803705655885,\n-      5.801713482801365\n-    ],\n-    [\n-      11.712552369883912,\n-      11.700328756548334\n-    ],\n-    [\n-      30.262926835669248,\n-      30.09342599028585\n-    ],\n-    [\n-      61.376303362882005,\n-      61.13915335401607\n-    ],\n-    [\n-      124.11699869764651,\n-      124.25780200422302\n-    ],\n-    [\n-      310.7627339118107,\n-      310.46344468090774\n-    ],\n-    [\n-      622.9760355962464,\n-      623.0798567141932\n-    ],\n-    [\n-      1247.5236315319792,\n-      1248.5560447388596\n-    ],\n-    [\n-      3129.5935694263876,\n-      3141.8836677434765\n-    ],\n-    [\n-      6286.031973327612,\n-      6337.023555259321\n-    ],\n-    [\n-      12680.991486888592,\n-      12879.141730299207\n-    ],\n-    [\n-      32166.128871102366,\n-      33183.186398006976\n-    ],\n-    [\n-      38738.29900916857,\n-      40106.85463286967\n-    ],\n-    [\n-      51931.86676673585,\n-      54058.559933019926\n-    ],\n-    [\n-      58534.86482665865,\n-      61048.16268553196\n-    ]\n-  ],\n-  \"1-5.H\": [\n-    [\n-      5.466295588223951,\n-      5.2626492252029395\n-    ],\n-    [\n-      12.125301841835926,\n-      12.121576063952547\n-    ],\n-    [\n-      31.605041182154903,\n-      31.727912484149908\n-    ],\n-    [\n-      63.88397112646666,\n-      64.02959798547445\n-    ],\n-    [\n-      127.77692212497544,\n-      127.30485972405614\n-    ],\n-    [\n-      321.9161291591869,\n-      322.04538463914844\n-    ],\n-    [\n-      644.2551779882774,\n-      644.1631339752479\n-    ],\n-    [\n-      1290.4067731255045,\n-      1291.3463755730984\n-    ],\n-    [\n-      3233.593972496941,\n-      3242.3821004093516\n-    ],\n-    [\n-      6487.067799428508,\n-      6523.910955254987\n-    ],\n-    [\n-      13056.324213107848,\n-      13196.098487181\n-    ],\n-    [\n-      32943.60848507963,\n-      33646.64981039496\n-    ],\n-    [\n-      39623.609480022584,\n-      40562.487471094406\n-    ],\n-    [\n-      53004.58785336645,\n-      54438.04602775697\n-    ],\n-    [\n-      59684.778443081734,\n-      61354.939350891436\n-    ]\n-  ],\n-  \"1-6.E\": [\n-    [\n-      5.544189166902309,\n-      5.616515802108241\n-    ],\n-    [\n-      11.66380817546489,\n-      11.63663513747275\n-    ],\n-    [\n-      30.30731575480514,\n-      30.268885561359294\n-    ],\n-    [\n-      61.42790660984813,\n-      61.41876826752437\n-    ],\n-    [\n-      123.5809214297299,\n-      123.54230547474829\n-    ],\n-    [\n-      310.2102078720746,\n-      310.25335127672247\n-    ],\n-    [\n-      621.063322416929,\n-      621.0470474952535\n-    ],\n-    [\n-      1243.9755155695493,\n-      1245.047301413124\n-    ],\n-    [\n-      3116.7820719126867,\n-      3125.2070863770687\n-    ],\n-    [\n-      6251.253058831765,\n-      6285.184302661082\n-    ],\n-    [\n-      12570.699552799817,\n-      12700.443609348296\n-    ],\n-    [\n-      31742.335683592166,\n-      32407.8304936377\n-    ],\n-    [\n-      38179.77293804096,\n-      39071.123471754916\n-    ],\n-    [\n-      51079.29770174812,\n-      52449.1127336794\n-    ],\n-    [\n-      57523.93956420565,\n-      59127.88001343294\n-    ]\n-  ],\n-  \"1-6.F\": [\n-    [\n-      5.657307836902729,\n-      5.732689231757147\n-    ],\n-    [\n-      11.973972887159583,\n-      12.021844136215803\n-    ],\n-    [\n-      30.885642541345906,\n-      30.815033028049736\n-    ],\n-    [\n-      62.934870058514136,\n-      63.197547283635636\n-    ],\n-    [\n-      126.29548357421373,\n-      126.48422257025084\n-    ],\n-    [\n-      316.47159876851333,\n-      316.5349474578582\n-    ],\n-    [\n-      633.637309061151,\n-      633.6976414129389\n-    ],\n-    [\n-      1267.714363678978,\n-      1267.5143370784356\n-    ],\n-    [\n-      3175.403209529995,\n-      3179.886045966589\n-    ],\n-    [\n-      6364.7414814091135,\n-      6386.946317616799\n-    ],\n-    [\n-      12785.844637066844,\n-      12879.816741295956\n-    ],\n-    [\n-      32201.889941387846,\n-      32695.10926126829\n-    ],\n-    [\n-      38705.63457580183,\n-      39362.75371444117\n-    ],\n-    [\n-      51721.62244248143,\n-      52715.75879576334\n-    ],\n-    [\n-      58221.962208373225,\n-      59376.77605496755\n-    ]\n-  ],\n-  \"1-6.G\": [\n-    [\n-      5.901174091853887,\n-      6.100644842200541\n-    ],\n-    [\n-      12.458613293996104,\n-      12.728993809095057\n-    ],\n-    [\n-      31.80635414273457,\n-      31.9622429120198\n-    ],\n-    [\n-      64.1534938090024,\n-      64.22709531407513\n-    ],\n-    [\n-      128.82926610283704,\n-      128.72114445295725\n-    ],\n-    [\n-      323.65478051923725,\n-      323.79962941321736\n-    ],\n-    [\n-      648.004688737918,\n-      648.2119256111039\n-    ],\n-    [\n-      1297.8755602376507,\n-      1299.3803015197004\n-    ],\n-    [\n-      3250.8448481570617,\n-      3259.615652965229\n-    ],\n-    [\n-      6518.021344405962,\n-      6551.238297767658\n-    ],\n-    [\n-      13100.852465423513,\n-      13224.48201810136\n-    ],\n-    [\n-      33053.43750287104,\n-      33690.96463824871\n-    ],\n-    [\n-      39750.47735113277,\n-      40605.22270753952\n-    ],\n-    [\n-      53162.927585525984,\n-      54472.09412761617\n-    ],\n-    [\n-      59855.42355446081,\n-      61377.622997630984\n-    ]\n-  ],\n-  \"1-6.H\": [\n-    [\n-      5.693335025518265,\n-      5.737910738594165\n-    ],\n-    [\n-      12.295184376047137,\n-      12.526973908464164\n-    ],\n-    [\n-      31.389908272006384,\n-      31.456541949888244\n-    ],\n-    [\n-      63.32550083436108,\n-      63.23482771027103\n-    ],\n-    [\n-      127.64850784323828,\n-      127.69495213736029\n-    ],\n-    [\n-      320.09466720868977,\n-      320.02992571988784\n-    ],\n-    [\n-      641.2488988928767,\n-      641.4095219299356\n-    ],\n-    [\n-      1283.7125352794055,\n-      1284.479423774745\n-    ],\n-    [\n-      3214.802276173368,\n-      3221.097432760007\n-    ],\n-    [\n-      6444.549607631346,\n-      6471.402321502308\n-    ],\n-    [\n-      12946.260204605309,\n-      13049.262342589025\n-    ],\n-    [\n-      32611.78554276909,\n-      33139.866534037916\n-    ],\n-    [\n-      39202.42123150557,\n-      39906.56984797582\n-    ],\n-    [\n-      52391.743861222465,\n-      53456.8569585505\n-    ],\n-    [\n-      58971.065998096805,\n-      60200.82228632644\n-    ]\n-  ],\n-  \"2-1.E\": [\n-    [\n-      6.051535816168524,\n-      6.066725119236875\n-    ],\n-    [\n-      12.932859314750743,\n-      12.970836446737046\n-    ],\n-    [\n-      33.37308769550512,\n-      33.275643268779945\n-    ],\n-    [\n-      67.70437525082365,\n-      67.64494347015223\n-    ],\n-    [\n-      136.28096221825916,\n-      136.2120165495698\n-    ],\n-    [\n-      342.08260546979636,\n-      342.05700668300017\n-    ],\n-    [\n-      685.0296984091865,\n-      685.020760300151\n-    ],\n-    [\n-      1371.6494346355232,\n-      1372.3997819569013\n-    ],\n-    [\n-      3434.890981474871,\n-      3441.3119141396614\n-    ],\n-    [\n-      6885.959022382593,\n-      6914.247499538414\n-    ],\n-    [\n-      13837.47395940118,\n-      13951.386262725291\n-    ],\n-    [\n-      34873.83684033229,\n-      35465.31793328213\n-    ],\n-    [\n-      41924.1439337554,\n-      42711.991351419216\n-    ],\n-    [\n-      56033.67971906724,\n-      57224.07669606013\n-    ],\n-    [\n-      62889.33165159709,\n-      64073.90904185438\n-    ]\n-  ],\n-  \"2-1.F\": [\n-    [\n-      5.950793804488347,\n-      5.893197288761936\n-    ],\n-    [\n-      12.749336607719624,\n-      12.662869348879983\n-    ],\n-    [\n-      33.37291978414609,\n-      33.42721263439968\n-    ],\n-    [\n-      67.69313458217256,\n-      67.93118529612329\n-    ],\n-    [\n-      135.6890995278814,\n-      135.64788760811297\n-    ],\n-    [\n-      340.6119824240101,\n-      340.67042048377914\n-    ],\n-    [\n-      681.9117336005366,\n-      681.8978708721081\n-    ],\n-    [\n-      1365.3649771516525,\n-      1366.0606274999407\n-    ],\n-    [\n-      3418.6592906036285,\n-      3424.426410165998\n-    ],\n-    [\n-      6852.208866300289,\n-      6877.891377963252\n-    ],\n-    [\n-      13765.025412059973,\n-      13869.210025747749\n-    ],\n-    [\n-      34673.09558177167,\n-      35218.2443827579\n-    ],\n-    [\n-      41674.4045722686,\n-      42397.30922088637\n-    ],\n-    [\n-      55677.58235766004,\n-      56756.98532073525\n-    ],\n-    [\n-      62625.97865497117,\n-      63828.463095015824\n-    ]\n-  ],\n-  \"2-1.G\": [\n-    [\n-      5.963477437084493,\n-      6.014824407732636\n-    ],\n-    [\n-      12.658742113365992,\n-      12.68705061042687\n-    ],\n-    [\n-      32.69408845116289,\n-      32.60414664483951\n-    ],\n-    [\n-      66.20029246755662,\n-      66.0271231872848\n-    ],\n-    [\n-      133.43368418738035,\n-      133.31428429822623\n-    ],\n-    [\n-      334.888124419174,\n-      334.68534288695275\n-    ],\n-    [\n-      671.0325028874828,\n-      671.0775919994369\n-    ],\n-    [\n-      1344.3620667945263,\n-      1345.9458043427705\n-    ],\n-    [\n-      3370.37429262468,\n-      3382.6345515152143\n-    ],\n-    [\n-      6764.189479077322,\n-      6811.586459458276\n-    ],\n-    [\n-      13618.810505040547,\n-      13796.83209240521\n-    ],\n-    [\n-      34450.97288475824,\n-      35335.24177062085\n-    ],\n-    [\n-      41453.10815353899,\n-      42632.05849460436\n-    ],\n-    [\n-      55487.950794355806,\n-      57289.96683049888\n-    ],\n-    [\n-      62494.520556802694,\n-      64596.92335664038\n-    ]\n-  ],\n-  \"2-1.H\": [\n-    [\n-      5.98148683082943,\n-      6.052739823387687\n-    ],\n-    [\n-      12.688742672073431,\n-      12.750483667871535\n-    ],\n-    [\n-      32.78914477718706,\n-      32.802312510497885\n-    ],\n-    [\n-      66.28643068488864,\n-      66.21581663351807\n-    ],\n-    [\n-      133.51559105002013,\n-      133.51178674589596\n-    ],\n-    [\n-      334.9550495570464,\n-      334.90387269639564\n-    ],\n-    [\n-      670.8919499380563,\n-      670.9662842540896\n-    ],\n-    [\n-      1343.7387402040156,\n-      1345.0383329950123\n-    ],\n-    [\n-      3366.5659716476393,\n-      3375.8487781032195\n-    ],\n-    [\n-      6752.151934764039,\n-      6789.082220732715\n-    ],\n-    [\n-      13577.213905759803,\n-      13715.606664820549\n-    ],\n-    [\n-      34257.78332654247,\n-      34948.900231243424\n-    ],\n-    [\n-      41198.56841157761,\n-      42120.766564391495\n-    ],\n-    [\n-      55095.69421311097,\n-      56497.13553627852\n-    ],\n-    [\n-      61999.89680794569,\n-      63594.53523594269\n-    ]\n-  ],\n-  \"2-2.E\": [\n-    [\n-      5.8821842813759355,\n-      5.8941743069649695\n-    ],\n-    [\n-      12.53840951895106,\n-      12.53679135110103\n-    ],\n-    [\n-      32.43305547081551,\n-      32.31707386892156\n-    ],\n-    [\n-      65.71701699514604,\n-      65.5360365418138\n-    ],\n-    [\n-      132.29122726100996,\n-      131.98657266280242\n-    ],\n-    [\n-      332.6387501896577,\n-      332.58664753713623\n-    ],\n-    [\n-      666.1486238581161,\n-      666.1159367077088\n-    ],\n-    [\n-      1334.5415936511092,\n-      1335.9223986692402\n-    ],\n-    [\n-      3345.293190047582,\n-      3356.5190491351836\n-    ],\n-    [\n-      6714.3181281403,\n-      6759.934738854872\n-    ],\n-    [\n-      13530.289765005273,\n-      13706.510289145634\n-    ],\n-    [\n-      34221.96883592846,\n-      35118.5841544157\n-    ],\n-    [\n-      41188.65957804617,\n-      42393.507629845626\n-    ],\n-    [\n-      55149.02943459164,\n-      57000.52758856936\n-    ],\n-    [\n-      62100.99637634058,\n-      64246.136923591825\n-    ]\n-  ],\n-  \"2-2.F\": [\n-    [\n-      5.893215799177373,\n-      5.847617839945878\n-    ],\n-    [\n-      12.539797846496862,\n-      12.393989931433973\n-    ],\n-    [\n-      33.00404454693888,\n-      33.07647358475644\n-    ],\n-    [\n-      66.67185776780167,\n-      66.67118485209522\n-    ],\n-    [\n-      134.09418118974332,\n-      134.0343452411695\n-    ],\n-    [\n-      336.29129963049905,\n-      335.98428390559513\n-    ],\n-    [\n-      674.1026093096665,\n-      674.1990581466994\n-    ],\n-    [\n-      1349.6417877040337,\n-      1350.4627434623767\n-    ],\n-    [\n-      3381.686772510401,\n-      3390.1278113094077\n-    ],\n-    [\n-      6782.100793845597,\n-      6817.038157524792\n-    ],\n-    [\n-      13646.726440325257,\n-      13781.720412371986\n-    ],\n-    [\n-      34410.31454412426,\n-      35093.999987222334\n-    ],\n-    [\n-      41379.44950874661,\n-      42290.4223541759\n-    ],\n-    [\n-      55337.7597207988,\n-      56725.04454606489\n-    ],\n-    [\n-      62277.627656804674,\n-      63862.008710593065\n-    ]\n-  ],\n-  \"2-2.G\": [\n-    [\n-      5.823384703109111,\n-      5.729347652686551\n-    ],\n-    [\n-      12.689333273714754,\n-      12.734667081545942\n-    ],\n-    [\n-      33.42356664027331,\n-      34.038497016114306\n-    ],\n-    [\n-      66.8399027060052,\n-      67.23642254303874\n-    ],\n-    [\n-      133.86073939770003,\n-      134.02400463478895\n-    ],\n-    [\n-      335.32215925738956,\n-      335.19082916745117\n-    ],\n-    [\n-      672.0639063695675,\n-      672.4146836821119\n-    ],\n-    [\n-      1345.4047719651514,\n-      1346.577711088827\n-    ],\n-    [\n-      3371.46559180944,\n-      3381.1675908715233\n-    ],\n-    [\n-      6763.499272675812,\n-      6802.836922523398\n-    ],\n-    [\n-      13617.303276168046,\n-      13767.578218242366\n-    ],\n-    [\n-      34362.33973200721,\n-      35115.67013831134\n-    ],\n-    [\n-      41330.486289880704,\n-      42334.41423852208\n-    ],\n-    [\n-      55286.24590714539,\n-      56812.751212457595\n-    ],\n-    [\n-      62192.333836900754,\n-      63904.59431026613\n-    ]\n-  ],\n-  \"2-2.H\": [\n-    [\n-      6.2982684665609066,\n-      6.670148948096735\n-    ],\n-    [\n-      13.078519410108907,\n-      13.463752891713007\n-    ],\n-    [\n-      32.61311965888856,\n-      32.25436240437934\n-    ],\n-    [\n-      66.47330553036171,\n-      66.18605752047202\n-    ],\n-    [\n-      134.42838210860725,\n-      134.52316496537657\n-    ],\n-    [\n-      337.14510622533766,\n-      337.24096357028225\n-    ],\n-    [\n-      674.9772226960267,\n-      675.0458344754437\n-    ],\n-    [\n-      1352.3325734339371,\n-      1354.039998489212\n-    ],\n-    [\n-      3388.5518104637654,\n-      3399.3546497131347\n-    ],\n-    [\n-      6797.268039013059,\n-      6838.406894419133\n-    ],\n-    [\n-      13687.099406459925,\n-      13842.679063610305\n-    ],\n-    [\n-      34556.025052782315,\n-      35344.516756244004\n-    ],\n-    [\n-      41565.990651155786,\n-      42615.51855936164\n-    ],\n-    [\n-      55601.62384421025,\n-      57190.718263857256\n-    ],\n-    [\n-      62581.76837083092,\n-      64401.0601082412\n-    ]\n-  ],\n-  \"2-3.E\": [\n-    [\n-      6.065616921169328,\n-      6.1504365954696425\n-    ],\n-    [\n-      12.809920354419988,\n-      12.841170799018668\n-    ],\n-    [\n-      33.072813807858154,\n-      32.976826483119254\n-    ],\n-    [\n-      67.10007243712865,\n-      67.04721349301681\n-    ],\n-    [\n-      135.15235004510205,\n-      135.1839493689823\n-    ],\n-    [\n-      338.9787311171726,\n-      338.933342385472\n-    ],\n-    [\n-      678.8866178713379,\n-      678.9101727067566\n-    ],\n-    [\n-      1359.5934608568407,\n-      1360.6467974427733\n-    ],\n-    [\n-      3406.968532957657,\n-      3416.388522982937\n-    ],\n-    [\n-      6832.748286738263,\n-      6869.731830992229\n-    ],\n-    [\n-      13746.520105983662,\n-      13885.280883993039\n-    ],\n-    [\n-      34650.75211651519,\n-      35331.543702013936\n-    ],\n-    [\n-      41661.30525309757,\n-      42561.805692389724\n-    ],\n-    [\n-      55692.745638805,\n-      57044.08943958408\n-    ],\n-    [\n-      62628.123756505986,\n-      64120.80273550121\n-    ]\n-  ],\n-  \"2-3.F\": [\n-    [\n-      6.1451298590004715,\n-      6.323312806894363\n-    ],\n-    [\n-      12.78564029538659,\n-      12.813957398284169\n-    ],\n-    [\n-      33.28113864696189,\n-      33.44948751659414\n-    ],\n-    [\n-      67.17006591953013,\n-      67.29965724063204\n-    ],\n-    [\n-      134.9194931730008,\n-      134.94409254727404\n-    ],\n-    [\n-      338.4768013088135,\n-      338.49617036825975\n-    ],\n-    [\n-      677.9086195544581,\n-      678.0889703537814\n-    ],\n-    [\n-      1357.2801082801245,\n-      1358.2908852802257\n-    ],\n-    [\n-      3399.9426140757814,\n-      3408.0089872584695\n-    ],\n-    [\n-      6816.484309287156,\n-      6848.514304306536\n-    ],\n-    [\n-      13707.37277119591,\n-      13829.259963648792\n-    ],\n-    [\n-      34549.93710022152,\n-      35185.06453803699\n-    ],\n-    [\n-      41543.606678006625,\n-      42392.521000040055\n-    ],\n-    [\n-      55544.70299925062,\n-      56836.22700089273\n-    ],\n-    [\n-      62447.65392471744,\n-      63858.535002677265\n-    ]\n-  ],\n-  \"2-3.G\": [\n-    [\n-      5.970742910908296,\n-      5.9870542660435815\n-    ],\n-    [\n-      12.77061949454395,\n-      12.8214208720344\n-    ],\n-    [\n-      33.09432545329419,\n-      33.172186393298986\n-    ],\n-    [\n-      66.88498727860929,\n-      66.92563730097423\n-    ],\n-    [\n-      134.401005371727,\n-      134.30229199171958\n-    ],\n-    [\n-      337.3992790220211,\n-      337.3324792824542\n-    ],\n-    [\n-      675.8538126752738,\n-      675.9643920474012\n-    ],\n-    [\n-      1353.2442664450662,\n-      1354.191625440407\n-    ],\n-    [\n-      3388.828029278635,\n-      3395.7095278934294\n-    ],\n-    [\n-      6794.162511450613,\n-      6823.721042705818\n-    ],\n-    [\n-      13662.32565258008,\n-      13777.176271257164\n-    ],\n-    [\n-      34408.65089313019,\n-      35000.4021466603\n-    ],\n-    [\n-      41367.87513084821,\n-      42158.115612358946\n-    ],\n-    [\n-      55298.34680609415,\n-      56498.66064473822\n-    ],\n-    [\n-      62207.281423079534,\n-      63554.0243118608\n-    ]\n-  ],\n-  \"2-3.H\": [\n-    [\n-      6.065388568902858,\n-      6.219963712678541\n-    ],\n-    [\n-      12.806623117726035,\n-      12.980625700082598\n-    ],\n-    [\n-      32.35444382556914,\n-      31.918983357718126\n-    ],\n-    [\n-      65.8739969599558,\n-      65.35478520154038\n-    ],\n-    [\n-      133.22116884278714,\n-      132.84310312203772\n-    ],\n-    [\n-      334.9972222990592,\n-      334.78532491350074\n-    ],\n-    [\n-      671.1908572361175,\n-      671.1575652005902\n-    ],\n-    [\n-      1344.4169715776081,\n-      1345.5810049702911\n-    ],\n-    [\n-      3368.0330110608315,\n-      3376.7452223428727\n-    ],\n-    [\n-      6753.973349124207,\n-      6788.631439696683\n-    ],\n-    [\n-      13591.468561446933,\n-      13727.20086355682\n-    ],\n-    [\n-      34294.97143334254,\n-      35003.605305535944\n-    ],\n-    [\n-      41251.50979859803,\n-      42203.512938945525\n-    ],\n-    [\n-      55175.389647639946,\n-      56626.382395602806\n-    ],\n-    [\n-      62114.272495946105,\n-      63790.72824222294\n-    ]\n-  ],\n-  \"2-4.E\": [\n-    [\n-      6.052624466125057,\n-      6.115316919424936\n-    ],\n-    [\n-      12.85709818303311,\n-      12.917343438372907\n-    ],\n-    [\n-      33.17635339867449,\n-      33.135946976378776\n-    ],\n-    [\n-      67.1457116978678,\n-      67.04198123559686\n-    ],\n-    [\n-      135.2258888943598,\n-      135.13664693865405\n-    ],\n-    [\n-      339.43746654495413,\n-      339.3629855926359\n-    ],\n-    [\n-      679.9010374589117,\n-      679.9621682555419\n-    ],\n-    [\n-      1361.7482341683904,\n-      1363.0018124894868\n-    ],\n-    [\n-      3411.983983368343,\n-      3421.531158473553\n-    ],\n-    [\n-      6843.062966530888,\n-      6880.587701723636\n-    ],\n-    [\n-      13775.6666028444,\n-      13921.601713593282\n-    ],\n-    [\n-      34762.13902031095,\n-      35507.96539656417\n-    ],\n-    [\n-      41812.90039335824,\n-      42810.51083053823\n-    ],\n-    [\n-      55935.88070976594,\n-      57460.56303606704\n-    ],\n-    [\n-      62653.224208723856,\n-      64080.00266888265\n-    ]\n-  ],\n-  \"2-4.F\": [\n-    [\n-      5.762425829433539,\n-      5.688950432977634\n-    ],\n-    [\n-      12.456752636508572,\n-      12.444770979837953\n-    ],\n-    [\n-      32.175650937926406,\n-      31.987972596514286\n-    ],\n-    [\n-      65.31912842738289,\n-      65.11499056002593\n-    ],\n-    [\n-      131.6541435816358,\n-      131.46569929199583\n-    ],\n-    [\n-      330.5248501344549,\n-      330.2502031876015\n-    ],\n-    [\n-      662.3598678889399,\n-      662.3252411741872\n-    ],\n-    [\n-      1325.911466487402,\n-      1326.2389755833124\n-    ],\n-    [\n-      3322.779368629642,\n-      3330.423668751964\n-    ],\n-    [\n-      6664.569541746268,\n-      6698.207739225536\n-    ],\n-    [\n-      13410.047147074898,\n-      13542.048717086327\n-    ],\n-    [\n-      33830.08189850396,\n-      34515.07682609032\n-    ],\n-    [\n-      40684.963542610334,\n-      41599.45365334137\n-    ],\n-    [\n-      54413.307667070156,\n-      55807.05585799116\n-    ],\n-    [\n-      61221.158244615515,\n-      62795.525117033576\n-    ]\n-  ],\n-  \"2-4.G\": [\n-    [\n-      6.070341051267456,\n-      6.170847331687273\n-    ],\n-    [\n-      12.857875395749131,\n-      12.960233281619693\n-    ],\n-    [\n-      33.13234060438814,\n-      33.153809047028126\n-    ],\n-    [\n-      67.09800895099406,\n-      67.16092228143188\n-    ],\n-    [\n-      134.95959907587152,\n-      135.03554933176787\n-    ],\n-    [\n-      338.29315397566046,\n-      338.1570476087306\n-    ],\n-    [\n-      677.8721772441622,\n-      678.0724009337299\n-    ],\n-    [\n-      1357.6856676563941,\n-      1359.2156497328988\n-    ],\n-    [\n-      3401.4482509589343,\n-      3411.3114772090444\n-    ],\n-    [\n-      6821.304926416684,\n-      6858.774077469289\n-    ],\n-    [\n-      13724.998948638151,\n-      13863.817545855754\n-    ],\n-    [\n-      34614.354246940034,\n-      35319.32373335975\n-    ],\n-    [\n-      41633.00762390816,\n-      42578.710239999054\n-    ],\n-    [\n-      55697.09547180788,\n-      57153.27478069034\n-    ],\n-    [\n-      62491.47971436501,\n-      63953.5114522588\n-    ]\n-  ],\n-  \"2-4.H\": [\n-    [\n-      5.845344418287414,\n-      5.821799769935096\n-    ],\n-    [\n-      12.202817809459749,\n-      11.877173008838636\n-    ],\n-    [\n-      32.37126406322409,\n-      32.20082131828209\n-    ],\n-    [\n-      65.91095319657803,\n-      65.9372764687776\n-    ],\n-    [\n-      132.4657541931543,\n-      132.36288499794608\n-    ],\n-    [\n-      332.63494816170845,\n-      332.64899245156784\n-    ],\n-    [\n-      665.8292225383996,\n-      665.6172811625219\n-    ],\n-    [\n-      1333.860445592804,\n-      1334.8397243460022\n-    ],\n-    [\n-      3341.4347372452544,\n-      3349.485025689769\n-    ],\n-    [\n-      6701.266042910816,\n-      6735.094984507908\n-    ],\n-    [\n-      13485.64300214163,\n-      13619.393186420923\n-    ],\n-    [\n-      34002.62130961265,\n-      34677.12977972808\n-    ],\n-    [\n-      40888.55644281394,\n-      41786.78140678472\n-    ],\n-    [\n-      54676.60173991174,\n-      56039.91756871576\n-    ],\n-    [\n-      61551.47580254186,\n-      63127.43654118778\n-    ]\n-  ],\n-  \"2-5.E\": [\n-    [\n-      5.696042151034911,\n-      5.70939493955685\n-    ],\n-    [\n-      12.030248115065678,\n-      11.921986912250322\n-    ],\n-    [\n-      31.453645965508752,\n-      31.39758638685498\n-    ],\n-    [\n-      63.73165887629873,\n-      63.66971550823379\n-    ],\n-    [\n-      128.1679683352037,\n-      127.97485183650035\n-    ],\n-    [\n-      322.1574885572915,\n-      322.2504744421248\n-    ],\n-    [\n-      644.778606322712,\n-      644.6541264405663\n-    ],\n-    [\n-      1292.0666440372745,\n-      1293.55472822548\n-    ],\n-    [\n-      3237.980973283173,\n-      3248.383551602284\n-    ],\n-    [\n-      6499.485325620529,\n-      6543.266119895344\n-    ],\n-    [\n-      13089.122649965324,\n-      13259.909282504013\n-    ],\n-    [\n-      33141.6041766934,\n-      34022.95589247983\n-    ],\n-    [\n-      39889.494226474715,\n-      41073.24994322254\n-    ],\n-    [\n-      53420.739584125935,\n-      55248.55136056926\n-    ],\n-    [\n-      60142.922862366875,\n-      62246.78389952029\n-    ]\n-  ],\n-  \"2-5.F\": [\n-    [\n-      5.773045460034582,\n-      5.810802634227362\n-    ],\n-    [\n-      12.374393002066348,\n-      12.497690189059188\n-    ],\n-    [\n-      31.829549320994822,\n-      31.856475683148666\n-    ],\n-    [\n-      64.35485889276606,\n-      64.32319696429028\n-    ],\n-    [\n-      129.36907001794253,\n-      129.18408713626118\n-    ],\n-    [\n-      324.954196727375,\n-      324.8507523451113\n-    ],\n-    [\n-      651.0226971236018,\n-      651.148825608133\n-    ],\n-    [\n-      1303.7547114348943,\n-      1304.936061226977\n-    ],\n-    [\n-      3267.3313699883274,\n-      3277.0838664147195\n-    ],\n-    [\n-      6556.986079650796,\n-      6598.23296355802\n-    ],\n-    [\n-      13197.826748281885,\n-      13357.275814968103\n-    ],\n-    [\n-      33384.97570412209,\n-      34206.57502914552\n-    ],\n-    [\n-      40173.028698623566,\n-      41275.62247870922\n-    ],\n-    [\n-      53773.59043658015,\n-      55465.33568333768\n-    ],\n-    [\n-      60544.030550980926,\n-      62498.98855993343\n-    ]\n-  ],\n-  \"2-5.G\": [\n-    [\n-      5.745002916187254,\n-      5.823629405709374\n-    ],\n-    [\n-      12.47544567348861,\n-      12.855268057889994\n-    ],\n-    [\n-      31.65864140297344,\n-      31.89395296496214\n-    ],\n-    [\n-      63.56174051926736,\n-      63.50143682685012\n-    ],\n-    [\n-      127.82361044322467,\n-      127.63133801211292\n-    ],\n-    [\n-      321.0786966879253,\n-      320.95904032062623\n-    ],\n-    [\n-      643.43206342643,\n-      643.6954697437482\n-    ],\n-    [\n-      1289.0915398650718,\n-      1291.076632541901\n-    ],\n-    [\n-      3232.9698719571716,\n-      3247.069311782438\n-    ],\n-    [\n-      6492.967916144307,\n-      6547.75904090262\n-    ],\n-    [\n-      13088.444609229433,\n-      13293.611581720794\n-    ],\n-    [\n-      33191.345534708555,\n-      34217.18150370796\n-    ],\n-    [\n-      39962.578122133,\n-      41335.056108168574\n-    ],\n-    [\n-      53548.51252312325,\n-      55662.851655337625\n-    ],\n-    [\n-      60331.67935044003,\n-      62807.02344464752\n-    ]\n-  ],\n-  \"2-5.H\": [\n-    [\n-      5.876303526653597,\n-      5.921637475933955\n-    ],\n-    [\n-      12.182244770600427,\n-      11.913621367461461\n-    ],\n-    [\n-      32.165399469613384,\n-      31.99792775340271\n-    ],\n-    [\n-      65.82087786394463,\n-      66.18193840503727\n-    ],\n-    [\n-      131.85889158192,\n-      132.00006821629933\n-    ],\n-    [\n-      330.4118907514908,\n-      330.33768342440135\n-    ],\n-    [\n-      661.7286474956638,\n-      661.6907759546093\n-    ],\n-    [\n-      1325.6432037663412,\n-      1326.960380882982\n-    ],\n-    [\n-      3321.401142389283,\n-      3330.81919127219\n-    ],\n-    [\n-      6662.540789225758,\n-      6700.482688130227\n-    ],\n-    [\n-      13405.499436440674,\n-      13553.03895212415\n-    ],\n-    [\n-      33856.37203436314,\n-      34601.54617639873\n-    ],\n-    [\n-      40724.85833479373,\n-      41720.629440924844\n-    ],\n-    [\n-      54480.668457092186,\n-      55998.40235390854\n-    ],\n-    [\n-      61292.5042940376,\n-      63001.69998878779\n-    ]\n-  ],\n-  \"2-6.E\": [\n-    [\n-      5.991504188537272,\n-      6.027575513444424\n-    ],\n-    [\n-      12.659035401554508,\n-      12.595863023542542\n-    ],\n-    [\n-      33.17856457975541,\n-      33.33471068671438\n-    ],\n-    [\n-      66.94107648858846,\n-      67.02473045146326\n-    ],\n-    [\n-      134.4242241204919,\n-      134.322244642735\n-    ],\n-    [\n-      337.4426687975004,\n-      337.3528056419475\n-    ],\n-    [\n-      675.9896374892475,\n-      676.1029550366679\n-    ],\n-    [\n-      1353.2185379057805,\n-      1353.8734876282151\n-    ],\n-    [\n-      3390.9559390816376,\n-      3399.3058355930984\n-    ],\n-    [\n-      6802.46936530173,\n-      6839.070276194474\n-    ],\n-    [\n-      13687.262320115524,\n-      13832.133290678757\n-    ],\n-    [\n-      34562.22417142481,\n-      35306.57452552986\n-    ],\n-    [\n-      41574.8491734476,\n-      42572.64189707494\n-    ],\n-    [\n-      55620.711999975516,\n-      57148.05038131916\n-    ],\n-    [\n-      62478.598870763555,\n-      64096.99193993519\n-    ]\n-  ],\n-  \"2-6.F\": [\n-    [\n-      5.8035823458873885,\n-      5.901130749805753\n-    ],\n-    [\n-      12.346879997477686,\n-      12.50296929640466\n-    ],\n-    [\n-      31.705534222535512,\n-      31.763157251570966\n-    ],\n-    [\n-      64.0220685911309,\n-      63.97070054884283\n-    ],\n-    [\n-      128.85580479530648,\n-      128.7872439049653\n-    ],\n-    [\n-      323.4376697424319,\n-      323.398157139617\n-    ],\n-    [\n-      647.8864747532044,\n-      648.0411656648655\n-    ],\n-    [\n-      1297.0690742303677,\n-      1297.897589389273\n-    ],\n-    [\n-      3250.167867276896,\n-      3258.5886541986206\n-    ],\n-    [\n-      6519.665234326425,\n-      6555.208055622283\n-    ],\n-    [\n-      13115.243239481164,\n-      13253.439122728827\n-    ],\n-    [\n-      33106.92500277185,\n-      33803.51940534205\n-    ],\n-    [\n-      39817.60322669727,\n-      40746.609412985934\n-    ],\n-    [\n-      53255.94125049834,\n-      54668.41350622625\n-    ],\n-    [\n-      59960.01469706806,\n-      61598.55957396365\n-    ]\n-  ],\n-  \"2-6.G\": [\n-    [\n-      5.890048257791807,\n-      6.142255700812149\n-    ],\n-    [\n-      12.245709200200986,\n-      12.428360585315595\n-    ],\n-    [\n-      31.43569828506577,\n-      31.55345997597878\n-    ],\n-    [\n-      63.61591714203449,\n-      63.82642770220231\n-    ],\n-    [\n-      127.63031309702336,\n-      127.67909437831835\n-    ],\n-    [\n-      320.2271188759124,\n-      320.3463710242269\n-    ],\n-    [\n-      641.2053061577791,\n-      641.4255169871436\n-    ],\n-    [\n-      1284.5835848576485,\n-      1286.4301297008233\n-    ],\n-    [\n-      3219.4983231895694,\n-      3231.0346348390667\n-    ],\n-    [\n-      6462.972298503154,\n-      6509.501429751068\n-    ],\n-    [\n-      13018.203119382359,\n-      13194.516857407769\n-    ],\n-    [\n-      32962.09092604797,\n-      33861.093990905865\n-    ],\n-    [\n-      39677.39903454693,\n-      40886.02482429969\n-    ],\n-    [\n-      53148.58379915067,\n-      55021.317461907434\n-    ],\n-    [\n-      59884.20206139703,\n-      62089.60260745165\n-    ]\n-  ],\n-  \"2-6.H\": [\n-    [\n-      5.854897031343982,\n-      5.909532829829914\n-    ],\n-    [\n-      12.450403601143579,\n-      12.509422517668586\n-    ],\n-    [\n-      32.182214470133644,\n-      32.200087712243935\n-    ],\n-    [\n-      65.1450686550309,\n-      65.17131517095389\n-    ],\n-    [\n-      131.14616199761906,\n-      131.26463509290124\n-    ],\n-    [\n-      328.6141913192491,\n-      328.47374521933887\n-    ],\n-    [\n-      658.4308986360137,\n-      658.5622981379762\n-    ],\n-    [\n-      1318.7327470446617,\n-      1320.0776832375052\n-    ],\n-    [\n-      3304.2351028595517,\n-      3313.8399451207333\n-    ],\n-    [\n-      6626.243827204666,\n-      6662.579488938191\n-    ],\n-    [\n-      13329.870269489662,\n-      13468.984780776042\n-    ],\n-    [\n-      33656.98557877869,\n-      34375.28858739975\n-    ],\n-    [\n-      40488.67082332526,\n-      41455.29191211384\n-    ],\n-    [\n-      54171.0808118227,\n-      55655.36474031973\n-    ],\n-    [\n-      60972.82446051684,\n-      62674.57725251054\n-    ]\n-  ],\n-  \"3-1.E\": [\n-    [\n-      5.875767299641436,\n-      5.948876891592257\n-    ],\n-    [\n-      12.422841921190994,\n-      12.448112326099604\n-    ],\n-    [\n-      32.19104469132736,\n-      32.20227292996578\n-    ],\n-    [\n-      65.11364747253776,\n-      65.07716424336105\n-    ],\n-    [\n-      131.22145800104158,\n-      131.3522334745256\n-    ],\n-    [\n-      328.99879222783954,\n-      329.0847971993794\n-    ],\n-    [\n-      658.6159345516869,\n-      658.6157392174449\n-    ],\n-    [\n-      1318.8789677718446,\n-      1319.735721544863\n-    ],\n-    [\n-      3303.985948197625,\n-      3311.747444459513\n-    ],\n-    [\n-      6625.667244581537,\n-      6658.217827529421\n-    ],\n-    [\n-      13322.670136322758,\n-      13452.18889077766\n-    ],\n-    [\n-      33623.05959379889,\n-      34289.532146765\n-    ],\n-    [\n-      40433.96649059294,\n-      41323.472680521845\n-    ],\n-    [\n-      54067.80248348747,\n-      55416.69847074918\n-    ],\n-    [\n-      60856.261958071555,\n-      62405.16145296517\n-    ]\n-  ],\n-  \"3-1.F\": [\n-    [\n-      6.010462863349459,\n-      6.09054349437436\n-    ],\n-    [\n-      12.720338429507946,\n-      12.770071230953617\n-    ],\n-    [\n-      32.76661404633487,\n-      32.64479328232782\n-    ],\n-    [\n-      66.48598352179651,\n-      66.38640859012523\n-    ],\n-    [\n-      133.8886726789493,\n-      133.7980621137307\n-    ],\n-    [\n-      336.0396028165138,\n-      335.9189813897377\n-    ],\n-    [\n-      673.1728032084718,\n-      673.2171452361054\n-    ],\n-    [\n-      1348.1986833098583,\n-      1349.3334637699406\n-    ],\n-    [\n-      3377.11860018481,\n-      3385.383391082721\n-    ],\n-    [\n-      6772.567671052296,\n-      6806.751109505735\n-    ],\n-    [\n-      13615.971450464604,\n-      13747.87938054281\n-    ],\n-    [\n-      34350.511437719404,\n-      35017.72444840318\n-    ],\n-    [\n-      41303.92508624008,\n-      42191.13153406622\n-    ],\n-    [\n-      55222.56533224779,\n-      56562.78354478259\n-    ],\n-    [\n-      62154.38170485206,\n-      63692.43812670288\n-    ]\n-  ],\n-  \"3-1.G\": [\n-    [\n-      5.881563663779411,\n-      5.888670026682248\n-    ],\n-    [\n-      12.477891122635997,\n-      12.407085446254959\n-    ],\n-    [\n-      32.192698151575726,\n-      31.816832999490668\n-    ],\n-    [\n-      65.55632680621052,\n-      65.16878203118921\n-    ],\n-    [\n-      132.37372050724636,\n-      132.0556853730922\n-    ],\n-    [\n-      332.491219974968,\n-      332.05145231088875\n-    ],\n-    [\n-      666.6603320896476,\n-      666.6573549366559\n-    ],\n-    [\n-      1334.8691090784432,\n-      1335.611843555426\n-    ],\n-    [\n-      3344.5627491002742,\n-      3352.627726009655\n-    ],\n-    [\n-      6707.531411498724,\n-      6741.398446969162\n-    ],\n-    [\n-      13485.848470697083,\n-      13616.501957782595\n-    ],\n-    [\n-      34018.73605004567,\n-      34677.61773137724\n-    ],\n-    [\n-      40907.039556565,\n-      41785.54083033894\n-    ],\n-    [\n-      54702.135526916005,\n-      56039.929789054026\n-    ],\n-    [\n-      61585.20366530897,\n-      63137.66821335536\n-    ]\n-  ],\n-  \"3-1.H\": [\n-    [\n-      5.950022779780963,\n-      6.021377474770303\n-    ],\n-    [\n-      12.721495818915063,\n-      12.88518714818824\n-    ],\n-    [\n-      32.34316211601187,\n-      32.08737063428206\n-    ],\n-    [\n-      65.8693745164178,\n-      65.73617684392276\n-    ],\n-    [\n-      132.69127092106817,\n-      132.57610104135023\n-    ],\n-    [\n-      333.093438036338,\n-      332.96927277267076\n-    ],\n-    [\n-      667.2740420520065,\n-      667.3119303626003\n-    ],\n-    [\n-      1336.0288888992343,\n-      1336.785037036595\n-    ],\n-    [\n-      3346.8051587980995,\n-      3354.2426525949036\n-    ],\n-    [\n-      6711.17322948036,\n-      6742.926822462917\n-    ],\n-    [\n-      13488.177120675406,\n-      13609.149942623671\n-    ],\n-    [\n-      34000.50461834885,\n-      34610.71850753338\n-    ],\n-    [\n-      40875.40417606428,\n-      41685.11733606746\n-    ],\n-    [\n-      54629.63972968628,\n-      55843.50582195104\n-    ],\n-    [\n-      61455.27935568248,\n-      62817.57270769288\n-    ]\n-  ],\n-  \"3-2.E\": [\n-    [\n-      6.00893388605824,\n-      6.147160293996579\n-    ],\n-    [\n-      12.613930168677756,\n-      12.68049789802732\n-    ],\n-    [\n-      32.61227232845152,\n-      32.65520285300064\n-    ],\n-    [\n-      65.96372189018072,\n-      65.98857609679183\n-    ],\n-    [\n-      132.77630646053376,\n-      132.87485135730904\n-    ],\n-    [\n-      332.9230003450891,\n-      332.9512832026978\n-    ],\n-    [\n-      666.6878457761859,\n-      666.7861857171249\n-    ],\n-    [\n-      1335.0112432989674,\n-      1336.0441639318192\n-    ],\n-    [\n-      3344.564262963388,\n-      3353.001884474053\n-    ],\n-    [\n-      6706.892511470226,\n-      6740.860361265535\n-    ],\n-    [\n-      13487.007772175672,\n-      13620.32760716288\n-    ],\n-    [\n-      34034.937364728474,\n-      34714.49814380569\n-    ],\n-    [\n-      40928.35238966514,\n-      41833.72356992527\n-    ],\n-    [\n-      54725.65317302172,\n-      56094.33447495861\n-    ],\n-    [\n-      61589.24556070696,\n-      63152.94607201975\n-    ]\n-  ],\n-  \"3-2.F\": [\n-    [\n-      6.159781962760703,\n-      6.387529983460927\n-    ],\n-    [\n-      12.796182973782768,\n-      12.90383883366059\n-    ],\n-    [\n-      32.976541798117445,\n-      33.01589470317617\n-    ],\n-    [\n-      66.6495986186588,\n-      66.61562632530384\n-    ],\n-    [\n-      134.053223386543,\n-      133.93026654309196\n-    ],\n-    [\n-      336.61277210550816,\n-      336.5711290529532\n-    ],\n-    [\n-      674.2968384677074,\n-      674.4757671432602\n-    ],\n-    [\n-      1350.5842852473559,\n-      1352.1252956193055\n-    ],\n-    [\n-      3382.9528812964713,\n-      3392.1042489897222\n-    ],\n-    [\n-      6782.256587296354,\n-      6816.220892354833\n-    ],\n-    [\n-      13628.159495035325,\n-      13751.918341056957\n-    ],\n-    [\n-      34326.401753854945,\n-      34917.257660288014\n-    ],\n-    [\n-      41258.86273299557,\n-      42037.326656544836\n-    ],\n-    [\n-      55123.27715960142,\n-      56276.844235107215\n-    ],\n-    [\n-      62031.06724052516,\n-      63346.83757584659\n-    ]\n-  ],\n-  \"3-2.G\": [\n-    [\n-      5.706042007289974,\n-      5.653588430415627\n-    ],\n-    [\n-      12.28096910920733,\n-      12.259572134653615\n-    ],\n-    [\n-      31.909499078084263,\n-      31.88635026673295\n-    ],\n-    [\n-      64.5100894428699,\n-      64.37071233930108\n-    ],\n-    [\n-      129.81179344061968,\n-      129.54018078566048\n-    ],\n-    [\n-      325.94766849672624,\n-      325.5093177116412\n-    ],\n-    [\n-      653.6671279982723,\n-      653.7766162095911\n-    ],\n-    [\n-      1309.072116101648,\n-      1310.2455278860875\n-    ],\n-    [\n-      3282.385553200612,\n-      3293.885256866002\n-    ],\n-    [\n-      6588.922865843417,\n-      6635.536754760914\n-    ],\n-    [\n-      13268.45834499501,\n-      13445.152982850866\n-    ],\n-    [\n-      33574.368342069574,\n-      34454.92072751799\n-    ],\n-    [\n-      40402.00117568242,\n-      41577.49556536349\n-    ],\n-    [\n-      54081.855862602904,\n-      55874.65296273367\n-    ],\n-    [\n-      60912.5970077598,\n-      63004.65713718416\n-    ]\n-  ],\n-  \"3-2.H\": [\n-    [\n-      6.077721135699653,\n-      6.261338308577567\n-    ],\n-    [\n-      12.736682010028472,\n-      12.872236734106528\n-    ],\n-    [\n-      32.712016420766446,\n-      32.71228196243721\n-    ],\n-    [\n-      66.29194279435,\n-      66.35686984481313\n-    ],\n-    [\n-      133.30408157098208,\n-      133.35044320712734\n-    ],\n-    [\n-      334.52461948008073,\n-      334.6996115690805\n-    ],\n-    [\n-      669.5745214830009,\n-      669.6460353282607\n-    ],\n-    [\n-      1340.9854324200062,\n-      1342.1622886906734\n-    ],\n-    [\n-      3359.6038658439784,\n-      3368.501899733304\n-    ],\n-    [\n-      6739.832835350599,\n-      6777.614028071497\n-    ],\n-    [\n-      13562.0792291804,\n-      13711.554211619896\n-    ],\n-    [\n-      34267.5672209918,\n-      35037.52905774022\n-    ],\n-    [\n-      41223.333769040124,\n-      42254.22727442485\n-    ],\n-    [\n-      55157.66293002278,\n-      56735.4821164198\n-    ],\n-    [\n-      62088.88422516337,\n-      63902.448916499015\n-    ]\n-  ],\n-  \"3-3.E\": [\n-    [\n-      5.733198682824208,\n-      5.7118888502500065\n-    ],\n-    [\n-      12.225106680708022,\n-      12.157572080906787\n-    ],\n-    [\n-      31.88377871861457,\n-      31.859276892667513\n-    ],\n-    [\n-      64.54562492488458,\n-      64.49085718862126\n-    ],\n-    [\n-      129.78458378745813,\n-      129.58475697981413\n-    ],\n-    [\n-      325.9578397226096,\n-      325.7782088721554\n-    ],\n-    [\n-      653.0970938390733,\n-      653.1352102675279\n-    ],\n-    [\n-      1308.213023118257,\n-      1309.5255621301658\n-    ],\n-    [\n-      3280.148063756251,\n-      3291.907926873368\n-    ],\n-    [\n-      6588.83791012061,\n-      6640.432434506216\n-    ],\n-    [\n-      13291.031253077039,\n-      13494.868986224415\n-    ],\n-    [\n-      33711.64609097063,\n-      34763.77849644713\n-    ],\n-    [\n-      40596.46465236536,\n-      42010.756664734436\n-    ],\n-    [\n-      54403.28931989061,\n-      56583.97926579318\n-    ],\n-    [\n-      61275.42805022303,\n-      63806.16321960635\n-    ]\n-  ],\n-  \"3-3.F\": [\n-    [\n-      5.7001096359688725,\n-      5.68812612217175\n-    ],\n-    [\n-      12.179785485646505,\n-      12.157320142697758\n-    ],\n-    [\n-      31.71012453281466,\n-      31.747481109456444\n-    ],\n-    [\n-      64.02857572379398,\n-      63.93361312311932\n-    ],\n-    [\n-      128.94710531751363,\n-      128.8688438623581\n-    ],\n-    [\n-      323.53595975051786,\n-      323.3414053996259\n-    ],\n-    [\n-      648.3384816547477,\n-      648.4376605999645\n-    ],\n-    [\n-      1299.0647361433148,\n-      1300.8753009320915\n-    ],\n-    [\n-      3257.066517561419,\n-      3269.874439827021\n-    ],\n-    [\n-      6539.020117895371,\n-      6589.024133567973\n-    ],\n-    [\n-      13178.460356645664,\n-      13365.888309707661\n-    ],\n-    [\n-      33356.84505978911,\n-      34288.937497717874\n-    ],\n-    [\n-      40144.6694938805,\n-      41386.32697240174\n-    ],\n-    [\n-      53738.54922410375,\n-      55620.140337048295\n-    ],\n-    [\n-      60399.71881996477,\n-      62456.377762297576\n-    ]\n-  ],\n-  \"3-3.G\": [\n-    [\n-      5.656784458403973,\n-      5.638741205508585\n-    ],\n-    [\n-      12.08071063716275,\n-      12.0388121995709\n-    ],\n-    [\n-      31.375000736980247,\n-      31.283905753549046\n-    ],\n-    [\n-      63.61082909953065,\n-      63.516093544681866\n-    ],\n-    [\n-      127.84108327632765,\n-      127.49869013009895\n-    ],\n-    [\n-      321.4387276103958,\n-      321.25708015415455\n-    ],\n-    [\n-      644.0392867029718,\n-      644.0646348552657\n-    ],\n-    [\n-      1290.5948580388037,\n-      1292.3913502016756\n-    ],\n-    [\n-      3237.2061775818916,\n-      3251.3119673203855\n-    ],\n-    [\n-      6505.518930418752,\n-      6564.471125295459\n-    ],\n-    [\n-      13133.295769865552,\n-      13360.075657801648\n-    ],\n-    [\n-      33394.5652192239,\n-      34592.00865098833\n-    ],\n-    [\n-      40239.916137248816,\n-      41855.770993738304\n-    ],\n-    [\n-      53977.12251020205,\n-      56483.26121690951\n-    ],\n-    [\n-      60765.64807377203,\n-      63630.20594064851\n-    ]\n-  ],\n-  \"3-3.H\": [\n-    [\n-      5.814360112503609,\n-      5.925756816303308\n-    ],\n-    [\n-      12.332816052194493,\n-      12.480162923920798\n-    ],\n-    [\n-      31.771394693722907,\n-      31.909728610308523\n-    ],\n-    [\n-      64.14222337781496,\n-      64.24018139551657\n-    ],\n-    [\n-      128.78887651914252,\n-      128.71187585750297\n-    ],\n-    [\n-      323.4525825868258,\n-      323.57475044270535\n-    ],\n-    [\n-      647.5663194835516,\n-      647.6946489021288\n-    ],\n-    [\n-      1297.2565283779163,\n-      1298.8619162473565\n-    ],\n-    [\n-      3252.9322924651856,\n-      3265.615440047727\n-    ],\n-    [\n-      6533.674586679652,\n-      6586.397305251021\n-    ],\n-    [\n-      13179.69291915942,\n-      13383.856385032665\n-    ],\n-    [\n-      33410.15549764052,\n-      34441.19876528948\n-    ],\n-    [\n-      40223.51894197849,\n-      41600.48633358407\n-    ],\n-    [\n-      53875.75795553595,\n-      55973.71909909499\n-    ],\n-    [\n-      60685.40607026818,\n-      63126.63749771441\n-    ]\n-  ],\n-  \"3-4.E\": [\n-    [\n-      5.850407432934452,\n-      5.989697972166232\n-    ],\n-    [\n-      12.223806946610244,\n-      12.240564288262778\n-    ],\n-    [\n-      31.565220546082138,\n-      31.44567593366538\n-    ],\n-    [\n-      63.96243640735597,\n-      63.776614637219645\n-    ],\n-    [\n-      128.81620383502698,\n-      128.55697087024885\n-    ],\n-    [\n-      323.64325906706256,\n-      323.42920833079916\n-    ],\n-    [\n-      648.5788655580694,\n-      648.6644791344544\n-    ],\n-    [\n-      1299.3405217328743,\n-      1300.918069553596\n-    ],\n-    [\n-      3259.035749864791,\n-      3272.54757848889\n-    ],\n-    [\n-      6548.28064476144,\n-      6605.112504288106\n-    ],\n-    [\n-      13213.891763157235,\n-      13432.820879923107\n-    ],\n-    [\n-      33549.98283773581,\n-      34673.573054808425\n-    ],\n-    [\n-      40402.22191597311,\n-      41902.652039131346\n-    ],\n-    [\n-      54142.5760611875,\n-      56437.52183710134\n-    ],\n-    [\n-      60992.42507909283,\n-      63663.229002317894\n-    ]\n-  ],\n-  \"3-4.F\": [\n-    [\n-      5.690634980847967,\n-      5.732580988905519\n-    ],\n-    [\n-      12.041491583520463,\n-      12.01558966298259\n-    ],\n-    [\n-      31.271989203347694,\n-      31.221253424247315\n-    ],\n-    [\n-      63.2652317471192,\n-      63.11574513912051\n-    ],\n-    [\n-      127.33748863474761,\n-      127.07591334001107\n-    ],\n-    [\n-      319.84131702968847,\n-      319.5297337167922\n-    ],\n-    [\n-      641.2288990850984,\n-      641.3819688002761\n-    ],\n-    [\n-      1284.4542899900978,\n-      1285.9892226985687\n-    ],\n-    [\n-      3221.8009796822544,\n-      3235.200344202242\n-    ],\n-    [\n-      6471.7239454824075,\n-      6526.219257058557\n-    ],\n-    [\n-      13050.669388257234,\n-      13254.478547873487\n-    ],\n-    [\n-      33081.99491464224,\n-      34103.06516912632\n-    ],\n-    [\n-      39832.73768241704,\n-      41200.962790341015\n-    ],\n-    [\n-      53366.19967673887,\n-      55464.95947437851\n-    ],\n-    [\n-      59931.572014825186,\n-      62179.07251398405\n-    ]\n-  ],\n-  \"3-4.G\": [\n-    [\n-      5.639216358243525,\n-      5.506884234781158\n-    ],\n-    [\n-      12.247797668899867,\n-      12.160185883437336\n-    ],\n-    [\n-      32.135238304686006,\n-      32.25091648636056\n-    ],\n-    [\n-      64.8606235819058,\n-      64.89473125741642\n-    ],\n-    [\n-      130.25491257917443,\n-      130.07043538064062\n-    ],\n-    [\n-      327.0771767658334,\n-      326.8754616102512\n-    ],\n-    [\n-      655.4060793755158,\n-      655.4675479618151\n-    ],\n-    [\n-      1312.674732458013,\n-      1313.8747440712866\n-    ],\n-    [\n-      3290.992369089375,\n-      3302.153090641894\n-    ],\n-    [\n-      6606.065672513775,\n-      6651.9221450504465\n-    ],\n-    [\n-      13314.400240260837,\n-      13492.7163623375\n-    ],\n-    [\n-      33690.10143838216,\n-      34598.268326407\n-    ],\n-    [\n-      40547.17160911063,\n-      41762.633221241085\n-    ],\n-    [\n-      54284.64051881768,\n-      56140.95165627172\n-    ],\n-    [\n-      61018.123600092025,\n-      63050.75462063732\n-    ]\n-  ],\n-  \"3-4.H\": [\n-    [\n-      5.893579608898566,\n-      6.114683091177086\n-    ],\n-    [\n-      12.350129412988544,\n-      12.569396810621406\n-    ],\n-    [\n-      31.377608541713464,\n-      31.258339588599096\n-    ],\n-    [\n-      63.98051415009293,\n-      64.19332381311052\n-    ],\n-    [\n-      128.03866029166747,\n-      127.76733199079753\n-    ],\n-    [\n-      322.0253557633404,\n-      322.11369451739256\n-    ],\n-    [\n-      644.8173301759939,\n-      644.9868776208061\n-    ],\n-    [\n-      1292.1032931598438,\n-      1294.140393481467\n-    ],\n-    [\n-      3239.936891626172,\n-      3253.5970675600834\n-    ],\n-    [\n-      6507.863107778478,\n-      6562.743264026186\n-    ],\n-    [\n-      13130.76869677533,\n-      13342.067614187015\n-    ],\n-    [\n-      33346.61290428811,\n-      34458.81944805141\n-    ],\n-    [\n-      40170.111642996315,\n-      41669.66741404503\n-    ],\n-    [\n-      53849.314003260886,\n-      56160.814907578504\n-    ],\n-    [\n-      60669.410978334556,\n-      63366.44780748459\n-    ]\n-  ],\n-  \"3-5.E\": [\n-    [\n-      6.024922721296829,\n-      6.146779778253719\n-    ],\n-    [\n-      12.660720563793234,\n-      12.706247609860885\n-    ],\n-    [\n-      32.62664731279842,\n-      32.50874229458734\n-    ],\n-    [\n-      66.08513271422518,\n-      65.8765720074719\n-    ],\n-    [\n-      133.37718581727302,\n-      133.36127231847527\n-    ],\n-    [\n-      334.50834541108884,\n-      334.3274324902811\n-    ],\n-    [\n-      670.2773626425302,\n-      670.37163228951\n-    ],\n-    [\n-      1342.2503960681865,\n-      1343.3310551865413\n-    ],\n-    [\n-      3362.8604978859125,\n-      3371.610648092576\n-    ],\n-    [\n-      6747.125805950754,\n-      6785.396963098746\n-    ],\n-    [\n-      13577.944008273675,\n-      13730.555075365863\n-    ],\n-    [\n-      34332.166324785234,\n-      35134.06505063054\n-    ],\n-    [\n-      41306.80362173145,\n-      42382.46224009114\n-    ],\n-    [\n-      55281.365310202156,\n-      56932.41662412665\n-    ],\n-    [\n-      62246.825697532695,\n-      64162.79453852545\n-    ]\n-  ],\n-  \"3-5.F\": [\n-    [\n-      5.850644167982907,\n-      5.774266678073709\n-    ],\n-    [\n-      12.642620089137122,\n-      12.6217454333091\n-    ],\n-    [\n-      32.88789085471955,\n-      32.90577246275172\n-    ],\n-    [\n-      66.33802098670436,\n-      66.12919803781391\n-    ],\n-    [\n-      133.7383865760084,\n-      133.57450208036062\n-    ],\n-    [\n-      335.70382667770656,\n-      335.44046907021897\n-    ],\n-    [\n-      672.8057074678912,\n-      672.8691733928356\n-    ],\n-    [\n-      1347.156068927457,\n-      1348.020731989367\n-    ],\n-    [\n-      3375.778862161453,\n-      3384.639873332771\n-    ],\n-    [\n-      6771.339656077919,\n-      6808.189197687645\n-    ],\n-    [\n-      13620.115729564763,\n-      13763.299676715069\n-    ],\n-    [\n-      34381.56627930375,\n-      35101.208944277\n-    ],\n-    [\n-      41347.76811530963,\n-      42305.02170176909\n-    ],\n-    [\n-      55291.91595007334,\n-      56737.494087896994\n-    ],\n-    [\n-      62223.10562080348,\n-      63870.01135967822\n-    ]\n-  ],\n-  \"3-5.G\": [\n-    [\n-      5.944925955545215,\n-      5.9727729549291695\n-    ],\n-    [\n-      12.836103875403365,\n-      13.034828673588759\n-    ],\n-    [\n-      32.953684984646266,\n-      33.09799277949767\n-    ],\n-    [\n-      66.18061552673724,\n-      65.9361336140036\n-    ],\n-    [\n-      133.8372402714274,\n-      134.01672182931847\n-    ],\n-    [\n-      335.14382481391584,\n-      334.93378432053544\n-    ],\n-    [\n-      671.7236778901556,\n-      671.9334360132167\n-    ],\n-    [\n-      1345.260334343148,\n-      1346.6882209764976\n-    ],\n-    [\n-      3371.282335152499,\n-      3381.803562271204\n-    ],\n-    [\n-      6764.6197808711595,\n-      6807.111128166439\n-    ],\n-    [\n-      13615.588244001172,\n-      13778.255887237392\n-    ],\n-    [\n-      34416.94532540615,\n-      35237.82086093293\n-    ],\n-    [\n-      41408.99355333635,\n-      42508.00942543139\n-    ],\n-    [\n-      55418.82669355118,\n-      57102.50568153383\n-    ],\n-    [\n-      62329.71910052943,\n-      64206.29440470043\n-    ]\n-  ],\n-  \"3-5.H\": [\n-    [\n-      6.16080565179032,\n-      6.505590415580628\n-    ],\n-    [\n-      12.652333274145882,\n-      12.8442491325706\n-    ],\n-    [\n-      32.40056494371644,\n-      32.450952132345364\n-    ],\n-    [\n-      66.06900875919713,\n-      66.64783531678007\n-    ],\n-    [\n-      131.77575286423883,\n-      131.76639070500428\n-    ],\n-    [\n-      331.09480830726085,\n-      331.53535458615096\n-    ],\n-    [\n-      662.2760625028263,\n-      662.4477774182811\n-    ],\n-    [\n-      1326.9917454799142,\n-      1328.9829930584688\n-    ],\n-    [\n-      3325.472538294072,\n-      3337.286195686491\n-    ],\n-    [\n-      6673.932933650874,\n-      6719.9853698665165\n-    ],\n-    [\n-      13438.816997915179,\n-      13613.759321932164\n-    ],\n-    [\n-      34027.6439400402,\n-      34934.67861038394\n-    ],\n-    [\n-      40954.26138978766,\n-      42170.44722421509\n-    ],\n-    [\n-      54839.158676338426,\n-      56708.82800756187\n-    ],\n-    [\n-      61764.47099122606,\n-      63943.04469885754\n-    ]\n-  ],\n-  \"3-6.E\": [\n-    [\n-      6.092581371335289,\n-      6.40718145819617\n-    ],\n-    [\n-      12.577729468545254,\n-      12.782759589159298\n-    ],\n-    [\n-      32.123292666974955,\n-      32.12292140336504\n-    ],\n-    [\n-      65.02083724759478,\n-      65.0052194640777\n-    ],\n-    [\n-      131.01780735677022,\n-      131.17375162562493\n-    ],\n-    [\n-      328.1686579569146,\n-      327.9985742786005\n-    ],\n-    [\n-      657.7659707087814,\n-      658.0652869815628\n-    ],\n-    [\n-      1316.792646745941,\n-      1317.8634514844723\n-    ],\n-    [\n-      3299.7613468418804,\n-      3309.0583868937233\n-    ],\n-    [\n-      6619.724224095067,\n-      6657.897328053008\n-    ],\n-    [\n-      13319.864953558961,\n-      13468.230011998838\n-    ],\n-    [\n-      33658.51843940589,\n-      34421.962852555655\n-    ],\n-    [\n-      40492.953911049284,\n-      41516.58064282892\n-    ],\n-    [\n-      54190.858126416795,\n-      55766.55407625231\n-    ],\n-    [\n-      61027.51417396746,\n-      62866.5847653667\n-    ]\n-  ],\n-  \"3-6.F\": [\n-    [\n-      5.762984987720595,\n-      5.677760592873547\n-    ],\n-    [\n-      12.454094173919533,\n-      12.412582997381556\n-    ],\n-    [\n-      32.59490043128487,\n-      32.75608549234144\n-    ],\n-    [\n-      65.69737838608528,\n-      65.72898798701205\n-    ],\n-    [\n-      132.12027245245756,\n-      132.11221048615428\n-    ],\n-    [\n-      331.46453912392644,\n-      331.41308617296164\n-    ],\n-    [\n-      663.8612364305137,\n-      663.8937073851321\n-    ],\n-    [\n-      1329.3743337131323,\n-      1330.2950035370416\n-    ],\n-    [\n-      3329.9235873484186,\n-      3337.5336733008844\n-    ],\n-    [\n-      6678.261014699166,\n-      6711.22547144786\n-    ],\n-    [\n-      13431.914560259655,\n-      13565.01188654615\n-    ],\n-    [\n-      33903.48320795926,\n-      34590.11705738468\n-    ],\n-    [\n-      40774.91657115692,\n-      41693.32907446954\n-    ],\n-    [\n-      54538.49257128282,\n-      55943.00169103168\n-    ],\n-    [\n-      61405.88760889055,\n-      63038.56036814553\n-    ]\n-  ],\n-  \"3-6.G\": [\n-    [\n-      5.978692200237094,\n-      6.078620382237521\n-    ],\n-    [\n-      12.719526908667794,\n-      12.879242579731038\n-    ],\n-    [\n-      32.567738769203956,\n-      32.52957744300358\n-    ],\n-    [\n-      66.00605996263982,\n-      65.99925255902504\n-    ],\n-    [\n-      132.53478885547233,\n-      132.24350482482282\n-    ],\n-    [\n-      333.0835797614572,\n-      332.89899571737504\n-    ],\n-    [\n-      667.4879287174348,\n-      667.638380692312\n-    ],\n-    [\n-      1336.6601224213844,\n-      1337.8452951305323\n-    ],\n-    [\n-      3349.114706439466,\n-      3358.3634666691783\n-    ],\n-    [\n-      6718.714664112099,\n-      6757.063156187087\n-    ],\n-    [\n-      13517.770950473501,\n-      13665.488144140705\n-    ],\n-    [\n-      34155.09629106938,\n-      34920.86177092974\n-    ],\n-    [\n-      41090.611805706365,\n-      42118.81637852119\n-    ],\n-    [\n-      54988.5614570361,\n-      56571.11695867222\n-    ],\n-    [\n-      61928.68887749895,\n-      63779.419526172875\n-    ]\n-  ],\n-  \"3-6.H\": [\n-    [\n-      5.635966776394523,\n-      5.4282264920642955\n-    ],\n-    [\n-      12.303008865134531,\n-      12.10875690752958\n-    ],\n-    [\n-      32.52030100959645,\n-      32.59423587007157\n-    ],\n-    [\n-      66.08638242973868,\n-      66.48502504876731\n-    ],\n-    [\n-      132.11569211550335,\n-      132.05409049774735\n-    ],\n-    [\n-      331.7659057178902,\n-      331.89294798922424\n-    ],\n-    [\n-      663.9450309787702,\n-      663.8152008530926\n-    ],\n-    [\n-      1329.5805616143678,\n-      1330.2145900909516\n-    ],\n-    [\n-      3330.0289896118584,\n-      3336.5079279067036\n-    ],\n-    [\n-      6676.934954193352,\n-      6706.074197266708\n-    ],\n-    [\n-      13419.284021606894,\n-      13532.915607431603\n-    ],\n-    [\n-      33819.3562011709,\n-      34405.9121927051\n-    ],\n-    [\n-      40660.75284207991,\n-      41444.81964550363\n-    ],\n-    [\n-      54356.1029454322,\n-      55548.858928628535\n-    ],\n-    [\n-      61173.79537159323,\n-      62539.74753294483\n-    ]\n-  ],\n-  \"4-1.E\": [\n-    [\n-      6.147124045581604,\n-      6.189667358948234\n-    ],\n-    [\n-      12.861798263202228,\n-      12.684767686545296\n-    ],\n-    [\n-      33.60186308021694,\n-      33.35497738201745\n-    ],\n-    [\n-      68.29335318799596,\n-      68.05483676681955\n-    ],\n-    [\n-      137.66400050405147,\n-      137.4314302531795\n-    ],\n-    [\n-      345.75958193672176,\n-      345.52956343738566\n-    ],\n-    [\n-      692.7387750816806,\n-      692.6664973699562\n-    ],\n-    [\n-      1387.3672988868734,\n-      1388.2815259329327\n-    ],\n-    [\n-      3474.843337403278,\n-      3482.321270044616\n-    ],\n-    [\n-      6967.972419798925,\n-      7000.50151294841\n-    ],\n-    [\n-      14008.91138255391,\n-      14138.863695183374\n-    ],\n-    [\n-      35356.621979303614,\n-      36045.09542537523\n-    ],\n-    [\n-      42524.30536207184,\n-      43450.634607694534\n-    ],\n-    [\n-      56868.33698641796,\n-      58280.30530021701\n-    ],\n-    [\n-      62983.78972513063,\n-      63545.54270205432\n-    ]\n-  ],\n-  \"4-1.F\": [\n-    [\n-      6.215456084815327,\n-      6.282159601991496\n-    ],\n-    [\n-      13.268862450785898,\n-      13.402509392156118\n-    ],\n-    [\n-      34.076459177839446,\n-      34.05512379283034\n-    ],\n-    [\n-      69.08628406493973,\n-      69.13936645920246\n-    ],\n-    [\n-      138.9879520404912,\n-      139.07184326924104\n-    ],\n-    [\n-      348.5637175850412,\n-      348.61071009853896\n-    ],\n-    [\n-      697.9415412111014,\n-      698.0120001558454\n-    ],\n-    [\n-      1397.7518935836836,\n-      1398.9249655259791\n-    ],\n-    [\n-      3501.0141906180343,\n-      3509.3422435151692\n-    ],\n-    [\n-      7021.351451762201,\n-      7056.629842924499\n-    ],\n-    [\n-      14116.760235206342,\n-      14252.944787226581\n-    ],\n-    [\n-      35608.14267867905,\n-      36294.67377080859\n-    ],\n-    [\n-      42816.8216015605,\n-      43731.07199629741\n-    ],\n-    [\n-      57245.51148499612,\n-      58627.752656232115\n-    ],\n-    [\n-      62792.01302797781,\n-      62701.21167933214\n-    ]\n-  ],\n-  \"4-1.G\": [\n-    [\n-      6.044500377597188,\n-      6.002578033372702\n-    ],\n-    [\n-      13.103122811049893,\n-      13.204513183870754\n-    ],\n-    [\n-      33.78895362019288,\n-      33.82805754582004\n-    ],\n-    [\n-      68.32383375099677,\n-      68.31879813795265\n-    ],\n-    [\n-      137.3783021580907,\n-      137.26987055675647\n-    ],\n-    [\n-      344.8939650847487,\n-      344.8272617515999\n-    ],\n-    [\n-      690.8093968100336,\n-      690.8683560689152\n-    ],\n-    [\n-      1383.4516380923296,\n-      1384.5742212446714\n-    ],\n-    [\n-      3466.5546852855523,\n-      3476.066919587302\n-    ],\n-    [\n-      6956.036481189972,\n-      6997.350852059828\n-    ],\n-    [\n-      14000.417040324071,\n-      14162.536558473837\n-    ],\n-    [\n-      35400.962716857815,\n-      36243.358508467434\n-    ],\n-    [\n-      42595.73088271285,\n-      43726.77593753089\n-    ],\n-    [\n-      57015.02456161472,\n-      58756.10977916714\n-    ],\n-    [\n-      62904.48928730596,\n-      63574.71734566591\n-    ]\n-  ],\n-  \"4-1.H\": [\n-    [\n-      6.07019039591168,\n-      6.179835400301214\n-    ],\n-    [\n-      12.884855992545681,\n-      13.03428444665887\n-    ],\n-    [\n-      33.068427601685244,\n-      33.07576896265962\n-    ],\n-    [\n-      66.67738552721178,\n-      66.42142258297568\n-    ],\n-    [\n-      134.64796215142553,\n-      134.6151034974101\n-    ],\n-    [\n-      337.6724982410732,\n-      337.424854876451\n-    ],\n-    [\n-      676.8179281308927,\n-      676.9830907281704\n-    ],\n-    [\n-      1355.1584337536058,\n-      1356.1998965034438\n-    ],\n-    [\n-      3396.15152048335,\n-      3405.817860699939\n-    ],\n-    [\n-      6814.326076305549,\n-      6855.056772857952\n-    ],\n-    [\n-      13712.503897863447,\n-      13869.601849219454\n-    ],\n-    [\n-      34641.5361664854,\n-      35428.09978995869\n-    ],\n-    [\n-      41668.24809120285,\n-      42715.06538196222\n-    ],\n-    [\n-      55741.235186135425,\n-      57330.121636202275\n-    ],\n-    [\n-      62711.741566220066,\n-      64502.14612791354\n-    ]\n-  ],\n-  \"4-2.E\": [\n-    [\n-      5.9769396977964355,\n-      5.948645768898522\n-    ],\n-    [\n-      12.733254184722725,\n-      12.638483103532101\n-    ],\n-    [\n-      33.25230101811568,\n-      33.20583039249348\n-    ],\n-    [\n-      67.39905873007291,\n-      67.38244868684372\n-    ],\n-    [\n-      135.53239279946695,\n-      135.41554118443528\n-    ],\n-    [\n-      340.1483801946396,\n-      339.94650517680407\n-    ],\n-    [\n-      681.5457392001198,\n-      681.5727297681967\n-    ],\n-    [\n-      1365.1305054398422,\n-      1366.4067039119807\n-    ],\n-    [\n-      3420.94612261246,\n-      3431.0563410711184\n-    ],\n-    [\n-      6863.30638211843,\n-      6904.3068500757845\n-    ],\n-    [\n-      13811.107526540733,\n-      13970.179497181593\n-    ],\n-    [\n-      34901.840964808136,\n-      35705.76345442\n-    ],\n-    [\n-      41985.23746932051,\n-      43057.806254803734\n-    ],\n-    [\n-      56179.01626833152,\n-      57818.394197738555\n-    ],\n-    [\n-      62915.608435328,\n-      64458.66722780355\n-    ]\n-  ],\n-  \"4-2.F\": [\n-    [\n-      6.200625010135603,\n-      6.318499832022014\n-    ],\n-    [\n-      13.188320774613667,\n-      13.380668809991503\n-    ],\n-    [\n-      33.77413263602937,\n-      33.8081985990836\n-    ],\n-    [\n-      68.36072957412351,\n-      68.41245691275765\n-    ],\n-    [\n-      137.53841050323348,\n-      137.62995985991014\n-    ],\n-    [\n-      344.88099287992384,\n-      344.90140995648534\n-    ],\n-    [\n-      690.7015796804179,\n-      690.8531992626671\n-    ],\n-    [\n-      1383.029987410995,\n-      1384.1320261624562\n-    ],\n-    [\n-      3466.0968981025935,\n-      3476.1576413913535\n-    ],\n-    [\n-      6953.692087881546,\n-      6994.66479709982\n-    ],\n-    [\n-      13989.158997720819,\n-      14144.730462025345\n-    ],\n-    [\n-      35337.93291117617,\n-      36124.89719595644\n-    ],\n-    [\n-      42508.77278566678,\n-      43561.06498750852\n-    ],\n-    [\n-      56871.464638259684,\n-      58477.56421148682\n-    ],\n-    [\n-      62762.79902662954,\n-      63307.01113729676\n-    ]\n-  ],\n-  \"4-2.G\": [\n-    [\n-      6.218422165069559,\n-      6.353341209752499\n-    ],\n-    [\n-      13.12717447882606,\n-      13.253789382775365\n-    ],\n-    [\n-      33.74016572339709,\n-      33.732363853882596\n-    ],\n-    [\n-      68.2186161741166,\n-      68.1124264668774\n-    ],\n-    [\n-      137.6735433189436,\n-      137.86838649101063\n-    ],\n-    [\n-      344.69890543858384,\n-      344.45698017450405\n-    ],\n-    [\n-      690.9305409074778,\n-      691.1501177018696\n-    ],\n-    [\n-      1383.1299879391795,\n-      1384.0094343239382\n-    ],\n-    [\n-      3467.1194865955517,\n-      3477.398106713817\n-    ],\n-    [\n-      6955.961398599813,\n-      6997.599022996085\n-    ],\n-    [\n-      13994.995695918053,\n-      14152.098537371883\n-    ],\n-    [\n-      35344.14230549866,\n-      36129.168118530884\n-    ],\n-    [\n-      42512.38944368302,\n-      43558.31960989956\n-    ],\n-    [\n-      56866.860398571356,\n-      58454.46411998819\n-    ],\n-    [\n-      62709.610832815044,\n-      63185.02269679501\n-    ]\n-  ],\n-  \"4-2.H\": [\n-    [\n-      5.970530397337869,\n-      5.954103478194059\n-    ],\n-    [\n-      12.630564307915554,\n-      12.473600608863352\n-    ],\n-    [\n-      33.25377004510312,\n-      33.31063470434332\n-    ],\n-    [\n-      67.08497156262654,\n-      66.96067103521355\n-    ],\n-    [\n-      134.72389429175342,\n-      134.2152129314683\n-    ],\n-    [\n-      338.9231814365258,\n-      338.5372842761537\n-    ],\n-    [\n-      679.598489501624,\n-      679.7624836959934\n-    ],\n-    [\n-      1361.8063279875523,\n-      1363.9313992843927\n-    ],\n-    [\n-      3412.7738730514066,\n-      3425.1579066091485\n-    ],\n-    [\n-      6847.045951015674,\n-      6892.709692713295\n-    ],\n-    [\n-      13778.052533775433,\n-      13945.108225477856\n-    ],\n-    [\n-      34803.87787059493,\n-      35614.52166324006\n-    ],\n-    [\n-      41862.42605404749,\n-      42937.588442960834\n-    ],\n-    [\n-      55993.97895559686,\n-      57614.343242784365\n-    ],\n-    [\n-      62977.33845068407,\n-      64783.337122199664\n-    ]\n-  ],\n-  \"4-3.E\": [\n-    [\n-      6.198059569985509,\n-      6.312408902519351\n-    ],\n-    [\n-      13.14194376558541,\n-      13.284909974074191\n-    ],\n-    [\n-      33.775921400974745,\n-      33.80715472185553\n-    ],\n-    [\n-      68.37274439224599,\n-      68.42714542131203\n-    ],\n-    [\n-      137.508177844509,\n-      137.55064283053662\n-    ],\n-    [\n-      344.9505754792527,\n-      344.9933993604464\n-    ],\n-    [\n-      690.7687230339303,\n-      690.8930018536936\n-    ],\n-    [\n-      1383.402297192892,\n-      1384.68790211641\n-    ],\n-    [\n-      3466.930749436418,\n-      3477.3546538288174\n-    ],\n-    [\n-      6955.281655265671,\n-      6996.9057924774315\n-    ],\n-    [\n-      14003.589052238656,\n-      14163.506304666442\n-    ],\n-    [\n-      35357.26102498384,\n-      36159.47816362252\n-    ],\n-    [\n-      42529.08268737593,\n-      43596.735856611354\n-    ],\n-    [\n-      56895.14106968163,\n-      58518.25869295274\n-    ],\n-    [\n-      62832.66786869598,\n-      63439.35987989889\n-    ]\n-  ],\n-  \"4-3.F\": [\n-    [\n-      6.345103208621868,\n-      6.6297527922008905\n-    ],\n-    [\n-      13.228562592434054,\n-      13.489661181918743\n-    ],\n-    [\n-      33.738899579461396,\n-      33.80588888191734\n-    ],\n-    [\n-      68.16333265666907,\n-      68.15541271168452\n-    ],\n-    [\n-      137.20070029416598,\n-      137.2317330841972\n-    ],\n-    [\n-      344.26682333107294,\n-      344.36872644373517\n-    ],\n-    [\n-      689.3862503610445,\n-      689.6155087141589\n-    ],\n-    [\n-      1380.3952300309904,\n-      1381.6502962168393\n-    ],\n-    [\n-      3458.880183321669,\n-      3468.6941737859797\n-    ],\n-    [\n-      6938.484191115935,\n-      6978.179097339208\n-    ],\n-    [\n-      13963.20173858723,\n-      14111.94782712466\n-    ],\n-    [\n-      35227.8499267875,\n-      35972.740251861884\n-    ],\n-    [\n-      42368.748765948745,\n-      43362.02368868517\n-    ],\n-    [\n-      56666.48057417683,\n-      58174.12235860891\n-    ],\n-    [\n-      63027.46980920939,\n-      63971.10605364272\n-    ]\n-  ],\n-  \"4-3.G\": [\n-    [\n-      6.111238671250507,\n-      6.126644595491863\n-    ],\n-    [\n-      13.07249030614372,\n-      13.123105772919873\n-    ],\n-    [\n-      33.774323705776915,\n-      33.74800456782311\n-    ],\n-    [\n-      68.2631310547612,\n-      68.09502329338869\n-    ],\n-    [\n-      137.76268753173662,\n-      137.8317749487861\n-    ],\n-    [\n-      345.23934275175804,\n-      344.9992621769477\n-    ],\n-    [\n-      691.8991983680017,\n-      692.0089062483837\n-    ],\n-    [\n-      1385.2594447599772,\n-      1386.1100686788666\n-    ],\n-    [\n-      3469.9818599598857,\n-      3477.712106532385\n-    ],\n-    [\n-      6957.305106351443,\n-      6989.3895755782105\n-    ],\n-    [\n-      13994.275768830863,\n-      14118.925480066971\n-    ],\n-    [\n-      35254.399072744665,\n-      35889.889665196\n-    ],\n-    [\n-      42389.520118607565,\n-      43239.385079944324\n-    ],\n-    [\n-      56676.09355776329,\n-      57972.418683448814\n-    ],\n-    [\n-      62970.72879080524,\n-      63612.98816971763\n-    ]\n-  ],\n-  \"4-3.H\": [\n-    [\n-      6.045344582014462,\n-      6.112163150271487\n-    ],\n-    [\n-      12.658234101395447,\n-      12.544542832488851\n-    ],\n-    [\n-      33.225374772301805,\n-      33.29685177033182\n-    ],\n-    [\n-      67.1658114147288,\n-      67.209105498609\n-    ],\n-    [\n-      134.86064743857415,\n-      134.66205451543783\n-    ],\n-    [\n-      338.59071734160165,\n-      338.3111557550978\n-    ],\n-    [\n-      678.7061947647368,\n-      678.8569603304747\n-    ],\n-    [\n-      1359.5258251616056,\n-      1361.128168467315\n-    ],\n-    [\n-      3406.135532707633,\n-      3416.266072368535\n-    ],\n-    [\n-      6832.453826937564,\n-      6872.25363882666\n-    ],\n-    [\n-      13752.458344735576,\n-      13902.501439784655\n-    ],\n-    [\n-      34715.04662858173,\n-      35478.856692404275\n-    ],\n-    [\n-      41758.98000518286,\n-      42780.996176685876\n-    ],\n-    [\n-      55861.76810185714,\n-      57416.87848473968\n-    ],\n-    [\n-      62811.378529118236,\n-      64525.83411476494\n-    ]\n-  ],\n-  \"4-4.E\": [\n-    [\n-      6.099461887573657,\n-      6.1051199754718235\n-    ],\n-    [\n-      12.909609693089827,\n-      12.80245205712305\n-    ],\n-    [\n-      33.5758560234271,\n-      33.363831997079906\n-    ],\n-    [\n-      68.23187654061385,\n-      68.05570806353488\n-    ],\n-    [\n-      137.44954334195347,\n-      137.25232182382257\n-    ],\n-    [\n-      345.2353293856602,\n-      345.1080029776523\n-    ],\n-    [\n-      691.4698187102215,\n-      691.3841963226231\n-    ],\n-    [\n-      1383.918835804422,\n-      1383.8967223984132\n-    ],\n-    [\n-      3465.914246599339,\n-      3470.7378053155703\n-    ],\n-    [\n-      6947.443435091617,\n-      6971.948169187164\n-    ],\n-    [\n-      13957.66413988553,\n-      14059.030151750914\n-    ],\n-    [\n-      35215.59042727886,\n-      35823.036912961514\n-    ],\n-    [\n-      42350.20016480559,\n-      43173.81291493031\n-    ],\n-    [\n-      56615.912409042256,\n-      57868.94781640926\n-    ],\n-    [\n-      62789.385225069826,\n-      63268.535353789826\n-    ]\n-  ],\n-  \"4-4.F\": [\n-    [\n-      5.862936846496147,\n-      5.663166454365042\n-    ],\n-    [\n-      12.708094649931677,\n-      12.455052172449996\n-    ],\n-    [\n-      33.37604768544052,\n-      33.098574343776136\n-    ],\n-    [\n-      67.94344851325374,\n-      67.74899124369321\n-    ],\n-    [\n-      136.7584248137225,\n-      136.41402166732962\n-    ],\n-    [\n-      343.644072895717,\n-      343.2891018882556\n-    ],\n-    [\n-      688.6549046732458,\n-      688.4842601148225\n-    ],\n-    [\n-      1378.8203377162781,\n-      1379.1628078005199\n-    ],\n-    [\n-      3452.1174013471236,\n-      3456.806177772894\n-    ],\n-    [\n-      6918.72096829282,\n-      6941.8220737314105\n-    ],\n-    [\n-      13893.269422561838,\n-      13985.017708135256\n-    ],\n-    [\n-      34955.48774843561,\n-      35435.692181534985\n-    ],\n-    [\n-      42010.10410891291,\n-      42651.540495091846\n-    ],\n-    [\n-      56122.361224074615,\n-      57089.753726402465\n-    ],\n-    [\n-      62868.64630176435,\n-      63679.73872479233\n-    ]\n-  ],\n-  \"4-4.G\": [\n-    [\n-      5.978303815619427,\n-      5.960335611719047\n-    ],\n-    [\n-      12.70694690317341,\n-      12.605293317064339\n-    ],\n-    [\n-      33.019248695918215,\n-      32.79138075069077\n-    ],\n-    [\n-      67.46561457055816,\n-      67.61740178632806\n-    ],\n-    [\n-      135.3910986006651,\n-      135.33711467661024\n-    ],\n-    [\n-      339.9052387077687,\n-      339.9725660841452\n-    ],\n-    [\n-      680.3537789203467,\n-      680.2149689517389\n-    ],\n-    [\n-      1362.543803457158,\n-      1363.2860086711278\n-    ],\n-    [\n-      3411.2773972837713,\n-      3416.8337231939254\n-    ],\n-    [\n-      6836.537911793607,\n-      6860.8852437411915\n-    ],\n-    [\n-      13734.476629683295,\n-      13833.206689262115\n-    ],\n-    [\n-      34632.18383777244,\n-      35209.17102256333\n-    ],\n-    [\n-      41645.01863854289,\n-      42426.693215886175\n-    ],\n-    [\n-      55669.98848171354,\n-      56860.99028094126\n-    ],\n-    [\n-      62541.12114640081,\n-      63789.652353501086\n-    ]\n-  ],\n-  \"4-4.H\": [\n-    [\n-      6.298144554892471,\n-      6.419498672644536\n-    ],\n-    [\n-      13.333161255172985,\n-      13.467838595095824\n-    ],\n-    [\n-      34.58336799323907,\n-      34.90768235169189\n-    ],\n-    [\n-      69.44983742854109,\n-      69.53398159166804\n-    ],\n-    [\n-      139.64529821664982,\n-      139.71738179314144\n-    ],\n-    [\n-      349.8960130768139,\n-      349.5966473780195\n-    ],\n-    [\n-      701.6535951795422,\n-      702.0745108051798\n-    ],\n-    [\n-      1403.4845489495015,\n-      1403.661594767426\n-    ],\n-    [\n-      3515.2931036790983,\n-      3521.0644131776085\n-    ],\n-    [\n-      7043.378404476961,\n-      7066.931136413314\n-    ],\n-    [\n-      14141.466210376306,\n-      14230.842983018088\n-    ],\n-    [\n-      35529.08053389992,\n-      35960.44809227362\n-    ],\n-    [\n-      42679.80345598855,\n-      43243.316857999744\n-    ],\n-    [\n-      56976.646588213196,\n-      57799.89374635452\n-    ],\n-    [\n-      62762.95556833808,\n-      62342.87097330261\n-    ]\n-  ],\n-  \"4-5.E\": [\n-    [\n-      5.911836036480531,\n-      5.993305676350496\n-    ],\n-    [\n-      12.478617913867708,\n-      12.500011623359653\n-    ],\n-    [\n-      32.27368712567962,\n-      32.212869657298306\n-    ],\n-    [\n-      65.45927738810562,\n-      65.45500310097044\n-    ],\n-    [\n-      131.5717518005076,\n-      131.42225662465168\n-    ],\n-    [\n-      330.5142138985442,\n-      330.53340431360635\n-    ],\n-    [\n-      661.8003353379977,\n-      661.8163087451151\n-    ],\n-    [\n-      1325.9595742336667,\n-      1327.5580353584419\n-    ],\n-    [\n-      3322.688075692575,\n-      3333.310990809263\n-    ],\n-    [\n-      6665.796913815999,\n-      6706.852808123229\n-    ],\n-    [\n-      13410.453375245657,\n-      13563.827799039169\n-    ],\n-    [\n-      33879.75195762543,\n-      34648.41758601773\n-    ],\n-    [\n-      40758.04523677584,\n-      41787.52728400954\n-    ],\n-    [\n-      54543.43602414197,\n-      56125.99585440909\n-    ],\n-    [\n-      61373.623568033465,\n-      63166.87008756519\n-    ]\n-  ],\n-  \"4-5.F\": [\n-    [\n-      5.981930512700408,\n-      5.992914004135687\n-    ],\n-    [\n-      12.714326680006057,\n-      12.673536644381933\n-    ],\n-    [\n-      32.89923071470429,\n-      32.6916908019622\n-    ],\n-    [\n-      66.93165142023308,\n-      66.83395560500544\n-    ],\n-    [\n-      134.79255759980265,\n-      134.7128685543193\n-    ],\n-    [\n-      338.34496597883975,\n-      338.28922349812467\n-    ],\n-    [\n-      677.5303615167313,\n-      677.4459845566618\n-    ],\n-    [\n-      1357.0848847826028,\n-      1358.127758694289\n-    ],\n-    [\n-      3399.593095055278,\n-      3407.879389150031\n-    ],\n-    [\n-      6818.207381433972,\n-      6853.125465653196\n-    ],\n-    [\n-      13710.342132204227,\n-      13845.692404031568\n-    ],\n-    [\n-      34593.8721438582,\n-      35280.51882569216\n-    ],\n-    [\n-      41599.71951939689,\n-      42514.24143756077\n-    ],\n-    [\n-      55629.11348031345,\n-      57018.65932804761\n-    ],\n-    [\n-      62572.18311238456,\n-      64124.21966901576\n-    ]\n-  ],\n-  \"4-5.G\": [\n-    [\n-      5.834753049289876,\n-      5.968068519848959\n-    ],\n-    [\n-      12.517299789662816,\n-      12.85777802209292\n-    ],\n-    [\n-      32.17250147991723,\n-      32.72420308693848\n-    ],\n-    [\n-      64.02943806041466,\n-      64.021668558545\n-    ],\n-    [\n-      128.93961423439762,\n-      129.0278654789842\n-    ],\n-    [\n-      323.04952996355655,\n-      322.8051649512773\n-    ],\n-    [\n-      647.9345839892003,\n-      648.5045025708346\n-    ],\n-    [\n-      1296.9010655808356,\n-      1298.2962916870144\n-    ],\n-    [\n-      3252.70621753347,\n-      3265.528977841037\n-    ],\n-    [\n-      6533.982946506087,\n-      6587.7602658434425\n-    ],\n-    [\n-      13172.373169670876,\n-      13377.670916400299\n-    ],\n-    [\n-      33485.202596304225,\n-      34599.99183611609\n-    ],\n-    [\n-      40332.84748760874,\n-      41831.64288413963\n-    ],\n-    [\n-      54065.01332159866,\n-      56374.003180426276\n-    ],\n-    [\n-      60903.24654195793,\n-      63587.813146583365\n-    ]\n-  ],\n-  \"4-5.H\": [\n-    [\n-      6.079131699624906,\n-      6.286412660248979\n-    ],\n-    [\n-      12.709665516336809,\n-      12.86304530647185\n-    ],\n-    [\n-      32.95389697173806,\n-      33.31531468221153\n-    ],\n-    [\n-      65.85073900344504,\n-      65.7082430294128\n-    ],\n-    [\n-      132.892463971012,\n-      132.99717852573508\n-    ],\n-    [\n-      332.9211415668301,\n-      332.67176217254286\n-    ],\n-    [\n-      667.4763581234936,\n-      667.8107239861935\n-    ],\n-    [\n-      1336.3271511503985,\n-      1337.5703946513368\n-    ],\n-    [\n-      3349.783784525495,\n-      3360.689233187261\n-    ],\n-    [\n-      6723.057321677115,\n-      6767.78201314545\n-    ],\n-    [\n-      13533.077277252538,\n-      13701.05006862665\n-    ],\n-    [\n-      34227.05149540294,\n-      35078.42224663117\n-    ],\n-    [\n-      41186.14469495561,\n-      42327.281379447144\n-    ],\n-    [\n-      55129.1725166104,\n-      56877.45232042102\n-    ],\n-    [\n-      62053.19029585953,\n-      64054.872461401996\n-    ]\n-  ],\n-  \"4-6.E\": [\n-    [\n-      6.049357741723875,\n-      6.093806686135572\n-    ],\n-    [\n-      12.787490278069736,\n-      12.74666419382334\n-    ],\n-    [\n-      33.24522422454736,\n-      33.19244530061151\n-    ],\n-    [\n-      67.2714515621088,\n-      67.1290499618211\n-    ],\n-    [\n-      135.4906125042144,\n-      135.33511210060234\n-    ],\n-    [\n-      340.0959951396842,\n-      339.84945582750987\n-    ],\n-    [\n-      681.6183166900146,\n-      681.7332450566274\n-    ],\n-    [\n-      1364.187797251602,\n-      1364.5508946269922\n-    ],\n-    [\n-      3418.0390926059954,\n-      3425.3046845936133\n-    ],\n-    [\n-      6854.110481439201,\n-      6885.972586943037\n-    ],\n-    [\n-      13774.408117752688,\n-      13895.370398486759\n-    ],\n-    [\n-      34716.03232035227,\n-      35327.39365813657\n-    ],\n-    [\n-      41738.79550364813,\n-      42554.772420133806\n-    ],\n-    [\n-      55797.60404612278,\n-      57037.258581633156\n-    ],\n-    [\n-      62591.72761166252,\n-      63798.16305234769\n-    ]\n-  ],\n-  \"4-6.F\": [\n-    [\n-      6.047961591460838,\n-      6.111755536287617\n-    ],\n-    [\n-      12.767213122811533,\n-      12.749581131447602\n-    ],\n-    [\n-      33.08021378502459,\n-      32.9757832374291\n-    ],\n-    [\n-      67.11990711615704,\n-      67.05472503522266\n-    ],\n-    [\n-      135.13922163094782,\n-      135.0929515377115\n-    ],\n-    [\n-      339.16122121050125,\n-      339.13585904032664\n-    ],\n-    [\n-      679.1674672662871,\n-      679.1465621670083\n-    ],\n-    [\n-      1360.0387974607045,\n-      1360.8861740810319\n-    ],\n-    [\n-      3405.859831727515,\n-      3412.530077141534\n-    ],\n-    [\n-      6826.599691847084,\n-      6854.089184135097\n-    ],\n-    [\n-      13715.708061947798,\n-      13824.603758742402\n-    ],\n-    [\n-      34535.67384892309,\n-      35080.44447631393\n-    ],\n-    [\n-      41507.38311539468,\n-      42227.65303534703\n-    ],\n-    [\n-      55452.433656281726,\n-      56525.77859763094\n-    ],\n-    [\n-      62360.78608232053,\n-      63544.102158457805\n-    ]\n-  ],\n-  \"4-6.G\": [\n-    [\n-      5.910798116666799,\n-      6.059531531430117\n-    ],\n-    [\n-      12.501433532799075,\n-      12.688848278153953\n-    ],\n-    [\n-      31.941030164381292,\n-      31.9120874800776\n-    ],\n-    [\n-      64.84057640858839,\n-      64.95600366146088\n-    ],\n-    [\n-      130.14357194295363,\n-      130.0511449578938\n-    ],\n-    [\n-      326.75996245925,\n-      326.75171727393143\n-    ],\n-    [\n-      654.4914998753661,\n-      654.6612719979969\n-    ],\n-    [\n-      1310.8251767995437,\n-      1312.2229428517119\n-    ],\n-    [\n-      3284.3855753271464,\n-      3294.0492664608287\n-    ],\n-    [\n-      6590.889342827469,\n-      6631.744551457847\n-    ],\n-    [\n-      13268.694005525618,\n-      13429.606856958824\n-    ],\n-    [\n-      33616.01656311303,\n-      34500.11862917764\n-    ],\n-    [\n-      40469.90915844967,\n-      41668.66320533341\n-    ],\n-    [\n-      54207.618183898645,\n-      56069.26375772921\n-    ],\n-    [\n-      61060.065134622346,\n-      63236.159132202556\n-    ]\n-  ],\n-  \"4-6.H\": [\n-    [\n-      6.012508269434097,\n-      6.079892704010277\n-    ],\n-    [\n-      12.747946114586933,\n-      12.79442446637603\n-    ],\n-    [\n-      33.66793119622407,\n-      34.38175034147509\n-    ],\n-    [\n-      67.08490918958164,\n-      67.42376197211219\n-    ],\n-    [\n-      134.5173683079584,\n-      134.72965707100812\n-    ],\n-    [\n-      337.25972675862613,\n-      337.5412978083021\n-    ],\n-    [\n-      675.0137249844483,\n-      675.2608639682189\n-    ],\n-    [\n-      1351.409207773605,\n-      1352.476008842332\n-    ],\n-    [\n-      3384.252411430325,\n-      3391.447173135795\n-    ],\n-    [\n-      6785.360017891651,\n-      6815.901165334042\n-    ],\n-    [\n-      13638.338133638337,\n-      13757.369851777907\n-    ],\n-    [\n-      34372.03631418384,\n-      34976.50080675114\n-    ],\n-    [\n-      41322.71538322749,\n-      42127.00237660268\n-    ],\n-    [\n-      55236.92951058514,\n-      56454.81721522914\n-    ],\n-    [\n-      62126.94084016793,\n-      63481.71342787284\n-    ]\n-  ],\n-  \"5-1.E\": [\n-    [\n-      5.9890221746015015,\n-      6.176429211408633\n-    ],\n-    [\n-      12.521611737262258,\n-      12.638684356334226\n-    ],\n-    [\n-      32.227630752939106,\n-      32.254696748990014\n-    ],\n-    [\n-      65.27879013682266,\n-      65.36549978772167\n-    ],\n-    [\n-      131.14658328143372,\n-      131.1177613081427\n-    ],\n-    [\n-      329.2210596271462,\n-      329.31707512503436\n-    ],\n-    [\n-      659.1518851706584,\n-      659.2626241240105\n-    ],\n-    [\n-      1320.2496742445712,\n-      1321.6274345577033\n-    ],\n-    [\n-      3307.726611674396,\n-      3317.1099091984324\n-    ],\n-    [\n-      6636.4141627032695,\n-      6675.52675506844\n-    ],\n-    [\n-      13352.294199717655,\n-      13503.20417190326\n-    ],\n-    [\n-      33751.82250613009,\n-      34530.38147962919\n-    ],\n-    [\n-      40602.70497035943,\n-      41642.21984094285\n-    ],\n-    [\n-      54325.554345695535,\n-      55910.241089383395\n-    ],\n-    [\n-      61154.963069999234,\n-      62978.62907879056\n-    ]\n-  ],\n-  \"5-1.F\": [\n-    [\n-      5.931684704343836,\n-      5.960543926863978\n-    ],\n-    [\n-      12.613326076204666,\n-      12.616671561689802\n-    ],\n-    [\n-      32.65648589781076,\n-      32.58211361907965\n-    ],\n-    [\n-      65.9386055260013,\n-      65.61272269748572\n-    ],\n-    [\n-      133.28278888935853,\n-      133.22933429323706\n-    ],\n-    [\n-      334.2400704408109,\n-      333.933670606081\n-    ],\n-    [\n-      669.9522889855326,\n-      670.0070285614876\n-    ],\n-    [\n-      1341.2342407466515,\n-      1341.8696235287796\n-    ],\n-    [\n-      3360.402835482117,\n-      3368.1194265292374\n-    ],\n-    [\n-      6739.539766578327,\n-      6773.033264297739\n-    ],\n-    [\n-      13548.029225863509,\n-      13676.88208528268\n-    ],\n-    [\n-      34171.46607746431,\n-      34820.76381970327\n-    ],\n-    [\n-      41085.30184973424,\n-      41947.01410049268\n-    ],\n-    [\n-      54918.78026503255,\n-      56211.98842071224\n-    ],\n-    [\n-      61807.78952453595,\n-      63287.85262348972\n-    ]\n-  ],\n-  \"5-1.G\": [\n-    [\n-      5.932940360787982,\n-      6.062381338606027\n-    ],\n-    [\n-      12.451789457331222,\n-      12.500362232609316\n-    ],\n-    [\n-      32.175574510930645,\n-      32.156330584179116\n-    ],\n-    [\n-      64.90306288325453,\n-      64.62676794933067\n-    ],\n-    [\n-      131.26237065249225,\n-      131.37287703469488\n-    ],\n-    [\n-      328.93006384690784,\n-      328.79395998063427\n-    ],\n-    [\n-      658.9964645469894,\n-      659.0696099695322\n-    ],\n-    [\n-      1318.911856849396,\n-      1319.1862371471486\n-    ],\n-    [\n-      3305.0028245262133,\n-      3312.241364484264\n-    ],\n-    [\n-      6630.926359072113,\n-      6665.682860707814\n-    ],\n-    [\n-      13340.386587405554,\n-      13481.131979670414\n-    ],\n-    [\n-      33724.05465746217,\n-      34479.753135783016\n-    ],\n-    [\n-      40580.13332316909,\n-      41603.3723993145\n-    ],\n-    [\n-      54320.12374375083,\n-      55909.060246973306\n-    ],\n-    [\n-      61184.00486634302,\n-      63049.732340195\n-    ]\n-  ],\n-  \"5-1.H\": [\n-    [\n-      5.860429794090266,\n-      5.847649277108062\n-    ],\n-    [\n-      12.613940674079968,\n-      12.681765697148228\n-    ],\n-    [\n-      32.538803098588225,\n-      32.51143272204062\n-    ],\n-    [\n-      65.66488921406416,\n-      65.3984688299943\n-    ],\n-    [\n-      132.54776345295707,\n-      132.43083834988198\n-    ],\n-    [\n-      332.7599396256996,\n-      332.6579157736604\n-    ],\n-    [\n-      666.5183413095475,\n-      666.5126912244338\n-    ],\n-    [\n-      1335.243823478094,\n-      1336.6411228744043\n-    ],\n-    [\n-      3345.4829875843106,\n-      3355.174051656827\n-    ],\n-    [\n-      6711.854482081893,\n-      6751.501957586823\n-    ],\n-    [\n-      13502.058428380673,\n-      13651.819063655948\n-    ],\n-    [\n-      34107.30973546487,\n-      34865.71737146797\n-    ],\n-    [\n-      41027.41012258836,\n-      42040.59936364504\n-    ],\n-    [\n-      54891.3541233418,\n-      56440.08728515161\n-    ],\n-    [\n-      61758.43791747515,\n-      63506.64168941497\n-    ]\n-  ],\n-  \"5-2.E\": [\n-    [\n-      5.910788396379201,\n-      5.967205311931021\n-    ],\n-    [\n-      12.464261126167912,\n-      12.421356010621935\n-    ],\n-    [\n-      32.49366889417769,\n-      32.522823100945686\n-    ],\n-    [\n-      65.69222021901152,\n-      65.65787206959874\n-    ],\n-    [\n-      132.16489151199423,\n-      132.07916130197643\n-    ],\n-    [\n-      331.6711802077233,\n-      331.5194669928401\n-    ],\n-    [\n-      664.5346908741337,\n-      664.625963887131\n-    ],\n-    [\n-      1330.3135944099415,\n-      1330.9431210968205\n-    ],\n-    [\n-      3333.9134493737142,\n-      3342.4415365855093\n-    ],\n-    [\n-      6688.322531127686,\n-      6725.235924977629\n-    ],\n-    [\n-      13453.778097827162,\n-      13598.420935093536\n-    ],\n-    [\n-      33992.88715061047,\n-      34740.61919250963\n-    ],\n-    [\n-      40887.33542454868,\n-      41884.76530698523\n-    ],\n-    [\n-      54692.839458831986,\n-      56208.04811165474\n-    ],\n-    [\n-      61551.40063005539,\n-      63279.08584206924\n-    ]\n-  ],\n-  \"5-2.F\": [\n-    [\n-      6.203760480019327,\n-      6.438461786339764\n-    ],\n-    [\n-      12.905381937834147,\n-      13.042762252510727\n-    ],\n-    [\n-      33.22980598047411,\n-      33.314881176628404\n-    ],\n-    [\n-      67.08446042697517,\n-      67.06481135998318\n-    ],\n-    [\n-      135.07091699260866,\n-      135.11940170681007\n-    ],\n-    [\n-      338.6007179661507,\n-      338.4240625428159\n-    ],\n-    [\n-      678.6360904974455,\n-      678.9031356569823\n-    ],\n-    [\n-      1358.8215247334729,\n-      1360.0917157661218\n-    ],\n-    [\n-      3403.925643031686,\n-      3412.7716371211113\n-    ],\n-    [\n-      6826.022852146832,\n-      6861.206750266549\n-    ],\n-    [\n-      13717.15546217339,\n-      13845.445221020982\n-    ],\n-    [\n-      34563.84786006928,\n-      35180.13822464402\n-    ],\n-    [\n-      41544.076406374385,\n-      42353.43189393091\n-    ],\n-    [\n-      55500.44143849444,\n-      56692.07580065344\n-    ],\n-    [\n-      62443.10320946183,\n-      63788.91195705049\n-    ]\n-  ],\n-  \"5-2.G\": [\n-    [\n-      5.961715800958227,\n-      6.134092736861522\n-    ],\n-    [\n-      12.409389400210232,\n-      12.441260961625781\n-    ],\n-    [\n-      32.2134226519999,\n-      32.29922632171816\n-    ],\n-    [\n-      65.0444729292051,\n-      65.04401834762865\n-    ],\n-    [\n-      131.014438087522,\n-      131.1499274491236\n-    ],\n-    [\n-      327.9850038835249,\n-      327.58890219657826\n-    ],\n-    [\n-      657.8463379081974,\n-      658.1404045114382\n-    ],\n-    [\n-      1316.3254253618977,\n-      1316.7569530774265\n-    ],\n-    [\n-      3299.062314112414,\n-      3307.2258800727554\n-    ],\n-    [\n-      6619.406507028822,\n-      6656.391482133373\n-    ],\n-    [\n-      13320.788311126178,\n-      13469.746894231619\n-    ],\n-    [\n-      33718.038575630235,\n-      34539.31330212549\n-    ],\n-    [\n-      40580.76157982035,\n-      41691.401754060425\n-    ],\n-    [\n-      54328.17474309902,\n-      56042.23328478875\n-    ],\n-    [\n-      61183.824950729104,\n-      63180.81253135498\n-    ]\n-  ],\n-  \"5-2.H\": [\n-    [\n-      5.526865212869443,\n-      5.273212738874953\n-    ],\n-    [\n-      12.227917503870735,\n-      12.083098646961606\n-    ],\n-    [\n-      32.02095105679648,\n-      31.92247667815898\n-    ],\n-    [\n-      65.21823054328641,\n-      65.40852202374914\n-    ],\n-    [\n-      130.71781419546468,\n-      130.58973440682382\n-    ],\n-    [\n-      328.6250136969033,\n-      328.9517392601367\n-    ],\n-    [\n-      657.0963203833314,\n-      656.8065090921764\n-    ],\n-    [\n-      1316.3310515691578,\n-      1317.1009998743305\n-    ],\n-    [\n-      3297.3585057491996,\n-      3304.6456949906133\n-    ],\n-    [\n-      6613.802468387306,\n-      6646.804994230705\n-    ],\n-    [\n-      13304.75425853117,\n-      13440.576392117466\n-    ],\n-    [\n-      33599.764342431976,\n-      34306.096263341824\n-    ],\n-    [\n-      40413.88754604765,\n-      41359.67475764965\n-    ],\n-    [\n-      54065.85759185456,\n-      55516.380524526125\n-    ],\n-    [\n-      60850.572851047276,\n-      62510.22298610153\n-    ]\n-  ],\n-  \"5-3.E\": [\n-    [\n-      5.685400430174756,\n-      5.766339080664648\n-    ],\n-    [\n-      12.124088361075701,\n-      12.275297362684292\n-    ],\n-    [\n-      31.164816276641492,\n-      31.247680220235658\n-    ],\n-    [\n-      63.02307077764311,\n-      63.11839512707726\n-    ],\n-    [\n-      126.53622695832371,\n-      126.45318143104443\n-    ],\n-    [\n-      317.60918484118514,\n-      317.52474335331055\n-    ],\n-    [\n-      636.3580208456003,\n-      636.5652653517693\n-    ],\n-    [\n-      1274.8817953903258,\n-      1276.7009490038297\n-    ],\n-    [\n-      3198.800825329855,\n-      3213.863893228653\n-    ],\n-    [\n-      6430.096125074416,\n-      6492.4100781871175\n-    ],\n-    [\n-      12978.071353973686,\n-      13217.009600712878\n-    ],\n-    [\n-      33021.576016626765,\n-      34241.67081168129\n-    ],\n-    [\n-      39790.12951618164,\n-      41431.1585628329\n-    ],\n-    [\n-      53387.69495384901,\n-      55939.4004083146\n-    ],\n-    [\n-      60181.121788149205,\n-      63183.368887388926\n-    ]\n-  ],\n-  \"5-3.F\": [\n-    [\n-      5.853610322543006,\n-      6.10885761759841\n-    ],\n-    [\n-      12.117511805907412,\n-      12.254485017252474\n-    ],\n-    [\n-      31.10607026156521,\n-      31.11094930954157\n-    ],\n-    [\n-      62.89651492743931,\n-      62.8267099828771\n-    ],\n-    [\n-      126.59446154939327,\n-      126.49219744213943\n-    ],\n-    [\n-      317.74579144345626,\n-      317.60359363885\n-    ],\n-    [\n-      636.8078198773496,\n-      637.0756330389407\n-    ],\n-    [\n-      1275.722028074919,\n-      1277.6025721124035\n-    ],\n-    [\n-      3199.238365964505,\n-      3212.7771823295966\n-    ],\n-    [\n-      6425.707276424613,\n-      6479.5853321308\n-    ],\n-    [\n-      12950.099339156925,\n-      13152.115189033004\n-    ],\n-    [\n-      32857.553970365334,\n-      33881.617880643775\n-    ],\n-    [\n-      39565.06983881137,\n-      40938.74943780981\n-    ],\n-    [\n-      53019.04299746303,\n-      55135.78490603558\n-    ],\n-    [\n-      59703.602866387155,\n-      62146.63622233621\n-    ]\n-  ],\n-  \"5-3.G\": [\n-    [\n-      5.700338585848197,\n-      5.633050950573837\n-    ],\n-    [\n-      12.182221344354295,\n-      12.043455763247133\n-    ],\n-    [\n-      31.770067633945526,\n-      31.556529314073554\n-    ],\n-    [\n-      64.35399047230462,\n-      63.95464681395257\n-    ],\n-    [\n-      129.87265814107593,\n-      129.4493194992046\n-    ],\n-    [\n-      326.6031412334503,\n-      326.28453954289256\n-    ],\n-    [\n-      654.488628558591,\n-      654.3474536993101\n-    ],\n-    [\n-      1311.0823066648768,\n-      1312.1200404749338\n-    ],\n-    [\n-      3286.9796920796575,\n-      3297.7022247860727\n-    ],\n-    [\n-      6597.808094111372,\n-      6642.547750376725\n-    ],\n-    [\n-      13285.778406673453,\n-      13459.003372000334\n-    ],\n-    [\n-      33651.432214457134,\n-      34556.581460086265\n-    ],\n-    [\n-      40507.80356159129,\n-      41727.08789075914\n-    ],\n-    [\n-      54254.72705081886,\n-      56140.32804342512\n-    ],\n-    [\n-      61080.40199886308,\n-      63248.5113143851\n-    ]\n-  ],\n-  \"5-3.H\": [\n-    [\n-      5.620172435402193,\n-      5.326229321620088\n-    ],\n-    [\n-      12.366682436311681,\n-      12.072098555325855\n-    ],\n-    [\n-      32.655723649348666,\n-      32.43021165212521\n-    ],\n-    [\n-      66.5216553005789,\n-      66.46996369884047\n-    ],\n-    [\n-      133.49995997625433,\n-      133.0469089838178\n-    ],\n-    [\n-      336.07193480690046,\n-      336.0458056114443\n-    ],\n-    [\n-      672.6434843554667,\n-      672.2832501753837\n-    ],\n-    [\n-      1348.3551885261818,\n-      1349.8965343809705\n-    ],\n-    [\n-      3378.5466852282275,\n-      3388.8742178386883\n-    ],\n-    [\n-      6780.572374016925,\n-      6824.113531087059\n-    ],\n-    [\n-      13650.731100247072,\n-      13820.552653572277\n-    ],\n-    [\n-      34513.66739143753,\n-      35357.7069557844\n-    ],\n-    [\n-      41518.37250918586,\n-      42638.26592046105\n-    ],\n-    [\n-      55535.74749389164,\n-      57216.75571831663\n-    ],\n-    [\n-      62487.13757405453,\n-      64388.15809031896\n-    ]\n-  ],\n-  \"5-4.E\": [\n-    [\n-      5.720495121869298,\n-      5.7083104938586775\n-    ],\n-    [\n-      12.226912061501144,\n-      12.207583426851981\n-    ],\n-    [\n-      31.94116806881255,\n-      32.09611854347413\n-    ],\n-    [\n-      64.45707571680153,\n-      64.55952292309043\n-    ],\n-    [\n-      129.46391293793462,\n-      129.43738936745916\n-    ],\n-    [\n-      324.7451081818708,\n-      324.5928810896447\n-    ],\n-    [\n-      650.7139362916329,\n-      650.8522288540879\n-    ],\n-    [\n-      1303.732620140123,\n-      1305.535524024596\n-    ],\n-    [\n-      3270.1146359757595,\n-      3284.288686934218\n-    ],\n-    [\n-      6569.257835637694,\n-      6626.220990184272\n-    ],\n-    [\n-      13258.558184107504,\n-      13479.625120347946\n-    ],\n-    [\n-      33665.700997502296,\n-      34801.420061971025\n-    ],\n-    [\n-      40545.003438740685,\n-      42064.26873799147\n-    ],\n-    [\n-      54341.75075279493,\n-      56671.53897800371\n-    ],\n-    [\n-      61202.15088635427,\n-      63896.61906525119\n-    ]\n-  ],\n-  \"5-4.F\": [\n-    [\n-      5.817964694789643,\n-      5.773508521995369\n-    ],\n-    [\n-      12.526824805942805,\n-      12.52954875712179\n-    ],\n-    [\n-      32.38162555913495,\n-      32.25562936429026\n-    ],\n-    [\n-      65.66052755118346,\n-      65.5066138175289\n-    ],\n-    [\n-      132.1930451819691,\n-      131.9583269417709\n-    ],\n-    [\n-      332.09673587053356,\n-      331.92523301453804\n-    ],\n-    [\n-      665.3309096215121,\n-      665.3265895056679\n-    ],\n-    [\n-      1332.7075470609716,\n-      1333.947211552447\n-    ],\n-    [\n-      3340.736894430952,\n-      3351.638850381663\n-    ],\n-    [\n-      6705.279573931899,\n-      6750.320302748485\n-    ],\n-    [\n-      13505.84696255593,\n-      13677.167908495432\n-    ],\n-    [\n-      34141.827811893476,\n-      34998.74542761637\n-    ],\n-    [\n-      41076.6784647737,\n-      42216.92498668099\n-    ],\n-    [\n-      54961.77960156747,\n-      56686.10623167006\n-    ],\n-    [\n-      61853.90635002106,\n-      63816.954267271554\n-    ]\n-  ],\n-  \"5-4.G\": [\n-    [\n-      5.639383523957998,\n-      5.63464802255318\n-    ],\n-    [\n-      12.041997481909675,\n-      12.02697391677754\n-    ],\n-    [\n-      31.336347083634028,\n-      31.376958731521622\n-    ],\n-    [\n-      63.30690290296258,\n-      63.25348112079269\n-    ],\n-    [\n-      127.42917872632295,\n-      127.36885261489428\n-    ],\n-    [\n-      319.7537308527897,\n-      319.63047306136514\n-    ],\n-    [\n-      640.5807876247025,\n-      640.6387143325084\n-    ],\n-    [\n-      1283.354587632653,\n-      1284.8964994900994\n-    ],\n-    [\n-      3217.498211857914,\n-      3229.350465250394\n-    ],\n-    [\n-      6459.895323276283,\n-      6507.998485623248\n-    ],\n-    [\n-      13019.769365632314,\n-      13202.486834463873\n-    ],\n-    [\n-      32953.76392275646,\n-      33868.41521556179\n-    ],\n-    [\n-      39661.08870243775,\n-      40881.90310472531\n-    ],\n-    [\n-      53105.52827512948,\n-      54971.85628478939\n-    ],\n-    [\n-      59818.03248117468,\n-      61997.180407931985\n-    ]\n-  ],\n-  \"5-4.H\": [\n-    [\n-      5.883633923483181,\n-      5.9954128282164065\n-    ],\n-    [\n-      12.43337658938094,\n-      12.533193857296544\n-    ],\n-    [\n-      31.93474741129548,\n-      31.854101229020976\n-    ],\n-    [\n-      64.93815339600141,\n-      65.05885897957964\n-    ],\n-    [\n-      130.65047832005672,\n-      130.87953778356265\n-    ],\n-    [\n-      327.3171663026959,\n-      327.40007768088\n-    ],\n-    [\n-      655.307894787285,\n-      655.3607657735222\n-    ],\n-    [\n-      1312.363602210688,\n-      1313.43154039443\n-    ],\n-    [\n-      3287.8735587248825,\n-      3296.347907205369\n-    ],\n-    [\n-      6597.2942392023515,\n-      6635.176288537115\n-    ],\n-    [\n-      13286.553626224362,\n-      13438.466467427546\n-    ],\n-    [\n-      33558.55709115871,\n-      34333.30866379277\n-    ],\n-    [\n-      40368.893568959786,\n-      41401.85601021161\n-    ],\n-    [\n-      54008.16080861544,\n-      55578.13738158627\n-    ],\n-    [\n-      60782.07993703067,\n-      62572.43861854628\n-    ]\n-  ],\n-  \"5-5.E\": [\n-    [\n-      5.952929090788472,\n-      6.307567270248719\n-    ],\n-    [\n-      12.269655212469067,\n-      12.54356442771533\n-    ],\n-    [\n-      31.151152956993414,\n-      31.150089691472008\n-    ],\n-    [\n-      63.04460672175763,\n-      63.019524004189385\n-    ],\n-    [\n-      127.14844369689327,\n-      127.39268992959985\n-    ],\n-    [\n-      318.533438615753,\n-      318.6573487907353\n-    ],\n-    [\n-      637.7740714768818,\n-      637.9637792143982\n-    ],\n-    [\n-      1276.5227676657344,\n-      1277.111699705373\n-    ],\n-    [\n-      3198.7982969625614,\n-      3206.6326135966165\n-    ],\n-    [\n-      6418.7231350012735,\n-      6454.917714879907\n-    ],\n-    [\n-      12918.920283584686,\n-      13065.879196788195\n-    ],\n-    [\n-      32668.04407274774,\n-      33437.055875594444\n-    ],\n-    [\n-      39304.60057390407,\n-      40335.324768125916\n-    ],\n-    [\n-      52604.544479602366,\n-      54188.1602211464\n-    ],\n-    [\n-      59214.69875909029,\n-      61032.85426467795\n-    ]\n-  ],\n-  \"5-5.F\": [\n-    [\n-      5.743001745948683,\n-      5.79995396257083\n-    ],\n-    [\n-      12.294724224904032,\n-      12.443427113719512\n-    ],\n-    [\n-      31.885076133390026,\n-      32.24275514048116\n-    ],\n-    [\n-      64.02850555473539,\n-      64.2202729522878\n-    ],\n-    [\n-      128.54688603030885,\n-      128.64464391651057\n-    ],\n-    [\n-      322.3881229518029,\n-      322.49138958707283\n-    ],\n-    [\n-      645.5518571799871,\n-      645.7594214606437\n-    ],\n-    [\n-      1292.6969631753743,\n-      1293.9318047206152\n-    ],\n-    [\n-      3239.1875802637173,\n-      3248.5822559491944\n-    ],\n-    [\n-      6497.189643364284,\n-      6534.173894761488\n-    ],\n-    [\n-      13062.644657248271,\n-      13198.577032993324\n-    ],\n-    [\n-      32962.10288769881,\n-      33632.392611702395\n-    ],\n-    [\n-      39636.06775991092,\n-      40525.28573817864\n-    ],\n-    [\n-      52992.538973649935,\n-      54329.22514779325\n-    ],\n-    [\n-      59643.42677733675,\n-      61175.28270501811\n-    ]\n-  ],\n-  \"5-5.G\": [\n-    [\n-      5.927365321401817,\n-      6.098158571052978\n-    ],\n-    [\n-      12.430360278148532,\n-      12.554474267353875\n-    ],\n-    [\n-      31.99117392174985,\n-      32.036587983056656\n-    ],\n-    [\n-      64.45122375486515,\n-      64.22682086890245\n-    ],\n-    [\n-      130.1218889062282,\n-      130.10619612666218\n-    ],\n-    [\n-      326.40811813065886,\n-      326.2951609121153\n-    ],\n-    [\n-      653.9720193289924,\n-      654.1170797127384\n-    ],\n-    [\n-      1309.462151794635,\n-      1310.4863596186676\n-    ],\n-    [\n-      3280.494393794143,\n-      3288.7354829137466\n-    ],\n-    [\n-      6578.579224742487,\n-      6611.994649493848\n-    ],\n-    [\n-      13223.956633314534,\n-      13350.310877454844\n-    ],\n-    [\n-      33349.52969958934,\n-      33980.99130081909\n-    ],\n-    [\n-      40101.68152195013,\n-      40944.80452528178\n-    ],\n-    [\n-      53622.91592319455,\n-      54907.74168573288\n-    ],\n-    [\n-      60366.2835447857,\n-      61854.081455418505\n-    ]\n-  ],\n-  \"5-5.H\": [\n-    [\n-      5.8624852143163695,\n-      6.006863111131283\n-    ],\n-    [\n-      12.336121035528462,\n-      12.45079930622533\n-    ],\n-    [\n-      31.707599085195017,\n-      31.689946763666693\n-    ],\n-    [\n-      64.49615579846154,\n-      64.76354913249862\n-    ],\n-    [\n-      129.5838280817255,\n-      129.92949887797687\n-    ],\n-    [\n-      324.405860624415,\n-      324.5450605482088\n-    ],\n-    [\n-      649.4056043049437,\n-      649.4984370805378\n-    ],\n-    [\n-      1299.56169804436,\n-      1299.7185014214456\n-    ],\n-    [\n-      3254.179770964936,\n-      3258.6845177012847\n-    ],\n-    [\n-      6524.68945017408,\n-      6549.329756674886\n-    ],\n-    [\n-      13114.690890551168,\n-      13221.734840956547\n-    ],\n-    [\n-      33063.00154730521,\n-      33631.79616972929\n-    ],\n-    [\n-      39752.00485628164,\n-      40513.57793969097\n-    ],\n-    [\n-      53137.78757403275,\n-      54293.589683039514\n-    ],\n-    [\n-      59792.781808752894,\n-      61106.28656747502\n-    ]\n-  ],\n-  \"5-6.E\": [\n-    [\n-      5.803731113497014,\n-      5.90742883792178\n-    ],\n-    [\n-      12.267599240633121,\n-      12.355458514895467\n-    ],\n-    [\n-      31.91809731850127,\n-      32.223187611145896\n-    ],\n-    [\n-      64.25588846486943,\n-      64.5042848256651\n-    ],\n-    [\n-      128.92215081911024,\n-      129.05087537659065\n-    ],\n-    [\n-      323.4465258940094,\n-      323.7444411488735\n-    ],\n-    [\n-      647.1807623801795,\n-      647.2871152848479\n-    ],\n-    [\n-      1295.9226953042999,\n-      1296.9206472328697\n-    ],\n-    [\n-      3247.385404131129,\n-      3256.316588059094\n-    ],\n-    [\n-      6515.957956870714,\n-      6554.407376094833\n-    ],\n-    [\n-      13120.479477119772,\n-      13271.609232065644\n-    ],\n-    [\n-      33152.674509828816,\n-      33931.4457667647\n-    ],\n-    [\n-      39889.200844399966,\n-      40934.82279440194\n-    ],\n-    [\n-      53389.93167986372,\n-      54999.667981411665\n-    ],\n-    [\n-      60133.268579011485,\n-      62017.99384812554\n-    ]\n-  ],\n-  \"5-6.F\": [\n-    [\n-      5.6618806012065255,\n-      5.682588469459333\n-    ],\n-    [\n-      12.079033576274567,\n-      12.107234228570709\n-    ],\n-    [\n-      31.344255384244388,\n-      31.408795770563586\n-    ],\n-    [\n-      63.39730596339476,\n-      63.46659010271509\n-    ],\n-    [\n-      127.29040256873164,\n-      127.15634932220507\n-    ],\n-    [\n-      319.86092915567974,\n-      320.00781761560427\n-    ],\n-    [\n-      640.1850810993362,\n-      640.1735439455549\n-    ],\n-    [\n-      1282.5221238485512,\n-      1283.884053272629\n-    ],\n-    [\n-      3214.593397606816,\n-      3225.1647925318857\n-    ],\n-    [\n-      6451.355725102653,\n-      6494.111232037398\n-    ],\n-    [\n-      12994.258605889308,\n-      13157.071788421035\n-    ],\n-    [\n-      32851.656423684726,\n-      33676.01000858785\n-    ],\n-    [\n-      39530.749300039686,\n-      40634.3387600419\n-    ],\n-    [\n-      52913.30307815875,\n-      54602.42662709803\n-    ],\n-    [\n-      59530.32002351877,\n-      61433.51814510349\n-    ]\n-  ],\n-  \"5-6.G\": [\n-    [\n-      5.686477340921611,\n-      5.7518462848062715\n-    ],\n-    [\n-      12.02745072200096,\n-      12.045465629959018\n-    ],\n-    [\n-      31.079982830373844,\n-      30.987944151320406\n-    ],\n-    [\n-      63.22024425748455,\n-      63.33032997482286\n-    ],\n-    [\n-      126.88781922162902,\n-      126.78925512161791\n-    ],\n-    [\n-      318.64042086840794,\n-      318.66604182239354\n-    ],\n-    [\n-      638.0116970060056,\n-      638.0280303369393\n-    ],\n-    [\n-      1277.6541040165407,\n-      1278.552350765316\n-    ],\n-    [\n-      3201.4100811864214,\n-      3209.80229082714\n-    ],\n-    [\n-      6423.65115033886,\n-      6460.669015867995\n-    ],\n-    [\n-      12938.19008868991,\n-      13087.080696636893\n-    ],\n-    [\n-      32695.2833692107,\n-      33471.26682953219\n-    ],\n-    [\n-      39341.21542077144,\n-      40384.480727438415\n-    ],\n-    [\n-      52663.251576790644,\n-      54274.195073579795\n-    ],\n-    [\n-      59252.22686681782,\n-      61070.87738396827\n-    ]\n-  ],\n-  \"5-6.H\": [\n-    [\n-      5.678293036427221,\n-      5.731520176392591\n-    ],\n-    [\n-      12.050625427722359,\n-      12.08395705063758\n-    ],\n-    [\n-      31.25269568502624,\n-      31.3126460122998\n-    ],\n-    [\n-      63.20744227608665,\n-      63.262947638771415\n-    ],\n-    [\n-      126.80266610003932,\n-      126.53565905703391\n-    ],\n-    [\n-      318.9695734271518,\n-      319.1142110891393\n-    ],\n-    [\n-      638.4137626357203,\n-      638.4112572992155\n-    ],\n-    [\n-      1279.3386022720647,\n-      1281.0807724574688\n-    ],\n-    [\n-      3206.856842802615,\n-      3218.610251924753\n-    ],\n-    [\n-      6436.571846351156,\n-      6482.408832514532\n-    ],\n-    [\n-      12966.222849619724,\n-      13135.716820637772\n-    ],\n-    [\n-      32778.72334983194,\n-      33620.145307346924\n-    ],\n-    [\n-      39441.45959189654,\n-      40563.78680183367\n-    ],\n-    [\n-      52788.308311331275,\n-      54496.31265844021\n-    ],\n-    [\n-      59455.46611497782,\n-      61450.01025804439\n-    ]\n-  ],\n-  \"6-1.E\": [\n-    [\n-      5.792784606263703,\n-      5.768625832587099\n-    ],\n-    [\n-      12.41185109026993,\n-      12.397282501806576\n-    ],\n-    [\n-      32.180964316676224,\n-      32.10748557158744\n-    ],\n-    [\n-      65.06515348181766,\n-      64.82959275592401\n-    ],\n-    [\n-      131.361872485915,\n-      131.32826563206135\n-    ],\n-    [\n-      329.4162426713833,\n-      329.15543829861844\n-    ],\n-    [\n-      660.1399780098359,\n-      660.1331010223129\n-    ],\n-    [\n-      1321.956320450803,\n-      1322.8271563601688\n-    ],\n-    [\n-      3312.4057441237624,\n-      3320.9297504164324\n-    ],\n-    [\n-      6646.097562506747,\n-      6683.808311638276\n-    ],\n-    [\n-      13385.01615968172,\n-      13537.104032721694\n-    ],\n-    [\n-      33822.10851938449,\n-      34616.26924515868\n-    ],\n-    [\n-      40690.03834596278,\n-      41751.50351880464\n-    ],\n-    [\n-      54447.1898267948,\n-      56066.823852071524\n-    ],\n-    [\n-      61307.50581624527,\n-      63187.1934155796\n-    ]\n-  ],\n-  \"6-1.F\": [\n-    [\n-      5.880538038420829,\n-      5.812191353800385\n-    ],\n-    [\n-      12.474238554353752,\n-      12.24305053721556\n-    ],\n-    [\n-      32.77335727042202,\n-      32.558037606298114\n-    ],\n-    [\n-      66.51249621602781,\n-      66.23553339197152\n-    ],\n-    [\n-      134.29655338205572,\n-      134.20152445126845\n-    ],\n-    [\n-      336.8388495779449,\n-      336.48331528156643\n-    ],\n-    [\n-      675.103433465467,\n-      675.0069463545711\n-    ],\n-    [\n-      1352.3599728281104,\n-      1353.510639849815\n-    ],\n-    [\n-      3388.614243550271,\n-      3398.013202125849\n-    ],\n-    [\n-      6797.417883587241,\n-      6835.757825096048\n-    ],\n-    [\n-      13681.262571234412,\n-      13828.396947824085\n-    ],\n-    [\n-      34532.98869442543,\n-      35282.17932629032\n-    ],\n-    [\n-      41540.051689550746,\n-      42543.98371380538\n-    ],\n-    [\n-      55577.5385070765,\n-      57116.52791619577\n-    ],\n-    [\n-      62509.589338569596,\n-      64224.86921130757\n-    ]\n-  ],\n-  \"6-1.G\": [\n-    [\n-      5.6840744808921295,\n-      5.628672846019914\n-    ],\n-    [\n-      12.178691641509184,\n-      12.096048816753376\n-    ],\n-    [\n-      31.768285693887464,\n-      31.709151804668508\n-    ],\n-    [\n-      64.43617905712334,\n-      64.4354421415488\n-    ],\n-    [\n-      129.71791648457747,\n-      129.78017461413862\n-    ],\n-    [\n-      324.89185432123696,\n-      324.4722342210103\n-    ],\n-    [\n-      651.561980977446,\n-      651.7181089172748\n-    ],\n-    [\n-      1305.13424415995,\n-      1306.6766718933775\n-    ],\n-    [\n-      3271.600257437328,\n-      3283.083853640566\n-    ],\n-    [\n-      6566.266772845656,\n-      6611.750930894736\n-    ],\n-    [\n-      13226.977702925797,\n-      13396.33601579929\n-    ],\n-    [\n-      33438.82522736828,\n-      34290.18300027188\n-    ],\n-    [\n-      40240.54809459364,\n-      41382.10451759747\n-    ],\n-    [\n-      53878.41142155643,\n-      55638.24942227408\n-    ],\n-    [\n-      60687.05652392722,\n-      62745.530307511755\n-    ]\n-  ],\n-  \"6-1.H\": [\n-    [\n-      5.61954644012802,\n-      5.5955622164711825\n-    ],\n-    [\n-      11.963894274640078,\n-      11.872498073210881\n-    ],\n-    [\n-      31.198651109504333,\n-      31.104513537974114\n-    ],\n-    [\n-      63.49395438114552,\n-      63.63333978037342\n-    ],\n-    [\n-      127.44424637986758,\n-      127.41002623167098\n-    ],\n-    [\n-      319.57377507956886,\n-      319.29849556256534\n-    ],\n-    [\n-      640.5570392805985,\n-      640.6467801579274\n-    ],\n-    [\n-      1282.9053769691222,\n-      1284.108532172757\n-    ],\n-    [\n-      3216.265810704566,\n-      3227.15696175856\n-    ],\n-    [\n-      6456.679573982388,\n-      6502.084660579263\n-    ],\n-    [\n-      13013.038137689942,\n-      13187.24868838573\n-    ],\n-    [\n-      32920.41111240087,\n-      33802.82469225769\n-    ],\n-    [\n-      39618.11959360921,\n-      40796.906078185435\n-    ],\n-    [\n-      53041.53706266305,\n-      54844.21275817656\n-    ],\n-    [\n-      59743.34255282893,\n-      61847.81967272945\n-    ]\n-  ],\n-  \"6-2.E\": [\n-    [\n-      5.680988563151796,\n-      5.671707525509424\n-    ],\n-    [\n-      12.186049981389793,\n-      12.21652484435231\n-    ],\n-    [\n-      31.61451716884052,\n-      31.677411274010208\n-    ],\n-    [\n-      64.16582454721888,\n-      64.45436333987266\n-    ],\n-    [\n-      128.85832698823415,\n-      129.18524483923676\n-    ],\n-    [\n-      322.6414371566138,\n-      322.78971694074727\n-    ],\n-    [\n-      645.8024629191517,\n-      645.843395893459\n-    ],\n-    [\n-      1293.1470888410072,\n-      1293.9965887308613\n-    ],\n-    [\n-      3241.399268220038,\n-      3250.9184693800635\n-    ],\n-    [\n-      6506.160878023245,\n-      6547.998104162743\n-    ],\n-    [\n-      13099.239565786685,\n-      13264.173614297948\n-    ],\n-    [\n-      33158.58105395684,\n-      34012.547856098914\n-    ],\n-    [\n-      39907.53150919645,\n-      41055.75466024211\n-    ],\n-    [\n-      53435.7934947786,\n-      55206.20943956747\n-    ],\n-    [\n-      60168.681550443725,\n-      62217.298173007206\n-    ]\n-  ],\n-  \"6-2.F\": [\n-    [\n-      5.598664461370182,\n-      5.497045414551138\n-    ],\n-    [\n-      11.991219214930108,\n-      11.80437247068219\n-    ],\n-    [\n-      31.38726457168833,\n-      31.15860170951853\n-    ],\n-    [\n-      63.94300358103677,\n-      63.87417092336909\n-    ],\n-    [\n-      128.73313166496126,\n-      128.66577837609103\n-    ],\n-    [\n-      323.12254951810087,\n-      323.0787433060595\n-    ],\n-    [\n-      646.8982175191214,\n-      646.6870812502483\n-    ],\n-    [\n-      1295.5663584752567,\n-      1296.1374237307868\n-    ],\n-    [\n-      3245.970249167525,\n-      3253.3031637901204\n-    ],\n-    [\n-      6510.136219126665,\n-      6542.346596671329\n-    ],\n-    [\n-      13093.574717614298,\n-      13225.20166566445\n-    ],\n-    [\n-      33060.86076099853,\n-      33741.9401527135\n-    ],\n-    [\n-      39761.78032902288,\n-      40671.519631236704\n-    ],\n-    [\n-      53175.837407910614,\n-      54556.503135714935\n-    ],\n-    [\n-      59871.612474459405,\n-      61476.12914407048\n-    ]\n-  ],\n-  \"6-2.G\": [\n-    [\n-      5.642807748578484,\n-      5.5557751875757075\n-    ],\n-    [\n-      11.990474149069602,\n-      11.74309691106047\n-    ],\n-    [\n-      31.54566027167101,\n-      31.31439160701391\n-    ],\n-    [\n-      64.23020245637804,\n-      64.12265621773845\n-    ],\n-    [\n-      129.34116486614394,\n-      129.22591918323113\n-    ],\n-    [\n-      324.795395487845,\n-      324.77851362942613\n-    ],\n-    [\n-      650.164458473546,\n-      649.92379443167\n-    ],\n-    [\n-      1302.4807061952145,\n-      1303.3709419949703\n-    ],\n-    [\n-      3262.338195623749,\n-      3269.5436402767655\n-    ],\n-    [\n-      6544.136172143638,\n-      6577.362272787408\n-    ],\n-    [\n-      13164.73228500853,\n-      13300.723795835696\n-    ],\n-    [\n-      33266.99506338404,\n-      33990.89472308069\n-    ],\n-    [\n-      40022.71448493681,\n-      40998.27165975539\n-    ],\n-    [\n-      53564.51467786368,\n-      55076.4462450491\n-    ],\n-    [\n-      60327.02889042911,\n-      62098.65436906748\n-    ]\n-  ],\n-  \"6-2.H\": [\n-    [\n-      5.866901970721279,\n-      6.036270916083334\n-    ],\n-    [\n-      12.846292032720445,\n-      13.547601575781764\n-    ],\n-    [\n-      32.22948118677029,\n-      32.85248817976673\n-    ],\n-    [\n-      64.47195599831049,\n-      64.93390468799845\n-    ],\n-    [\n-      129.21911975269356,\n-      129.63627837088896\n-    ],\n-    [\n-      323.35548153682663,\n-      323.53772061685174\n-    ],\n-    [\n-      647.6978128827651,\n-      648.2727292470288\n-    ],\n-    [\n-      1295.8269172572868,\n-      1296.630803984656\n-    ],\n-    [\n-      3246.4006067535497,\n-      3254.0955614663258\n-    ],\n-    [\n-      6510.842257592107,\n-      6543.624333214674\n-    ],\n-    [\n-      13092.500741569092,\n-      13221.61901150222\n-    ],\n-    [\n-      33042.842644813274,\n-      33704.443234747625\n-    ],\n-    [\n-      39740.20550782422,\n-      40626.51679515193\n-    ],\n-    [\n-      53159.115738122455,\n-      54521.018695434446\n-    ],\n-    [\n-      59829.06999904069,\n-      61387.4684687576\n-    ]\n-  ],\n-  \"6-3.E\": [\n-    [\n-      5.867046844628958,\n-      6.0607167518255345\n-    ],\n-    [\n-      12.246661599135466,\n-      12.361639840590666\n-    ],\n-    [\n-      31.3524056440584,\n-      31.213120853933596\n-    ],\n-    [\n-      63.59629841595614,\n-      63.43476273350347\n-    ],\n-    [\n-      128.18595629312176,\n-      128.0818847600893\n-    ],\n-    [\n-      321.775130532146,\n-      321.6645738293655\n-    ],\n-    [\n-      644.632188740786,\n-      644.7193172942675\n-    ],\n-    [\n-      1290.276480208452,\n-      1290.6893270532041\n-    ],\n-    [\n-      3235.076557352644,\n-      3244.3598800406753\n-    ],\n-    [\n-      6492.924499670951,\n-      6533.690131299059\n-    ],\n-    [\n-      13069.430345376859,\n-      13228.54213253857\n-    ],\n-    [\n-      33057.399895676666,\n-      33869.0918792386\n-    ],\n-    [\n-      39774.57860719323,\n-      40859.62364739877\n-    ],\n-    [\n-      53235.179895196525,\n-      54895.877766859994\n-    ],\n-    [\n-      59957.40525223926,\n-      61897.72622789448\n-    ]\n-  ],\n-  \"6-3.F\": [\n-    [\n-      5.735846046869243,\n-      5.713623420640419\n-    ],\n-    [\n-      12.116226454209954,\n-      11.934581081297747\n-    ],\n-    [\n-      31.71944167151208,\n-      31.51216835690763\n-    ],\n-    [\n-      64.50704906262476,\n-      64.37389061269552\n-    ],\n-    [\n-      129.91434204731596,\n-      129.763567103496\n-    ],\n-    [\n-      326.16102002668737,\n-      325.9824058748164\n-    ],\n-    [\n-      653.3569488422477,\n-      653.2501247877765\n-    ],\n-    [\n-      1308.6904029212938,\n-      1309.6696309982\n-    ],\n-    [\n-      3278.964596919214,\n-      3287.4951210082295\n-    ],\n-    [\n-      6575.717946925761,\n-      6609.916084273674\n-    ],\n-    [\n-      13217.653597380355,\n-      13345.578590860845\n-    ],\n-    [\n-      33345.07299342768,\n-      33990.79160025802\n-    ],\n-    [\n-      40096.28869969242,\n-      40956.544208319385\n-    ],\n-    [\n-      53611.82266207358,\n-      54915.53148138103\n-    ],\n-    [\n-      60331.71807057046,\n-      61817.606640307895\n-    ]\n-  ],\n-  \"6-3.G\": [\n-    [\n-      5.800579140727081,\n-      5.806514706623483\n-    ],\n-    [\n-      12.429673356882978,\n-      12.480960938500349\n-    ],\n-    [\n-      32.013043622398285,\n-      31.896081251910392\n-    ],\n-    [\n-      64.89131087285162,\n-      64.73284265272846\n-    ],\n-    [\n-      130.96420572193594,\n-      131.03882263052535\n-    ],\n-    [\n-      328.0822056744439,\n-      327.75669823618404\n-    ],\n-    [\n-      657.7368864451091,\n-      657.868429175018\n-    ],\n-    [\n-      1316.6256883027293,\n-      1317.251636771618\n-    ],\n-    [\n-      3297.3803245426316,\n-      3303.5883249532712\n-    ],\n-    [\n-      6608.901426593542,\n-      6634.746251199042\n-    ],\n-    [\n-      13279.681632416137,\n-      13385.040250087795\n-    ],\n-    [\n-      33455.899245393164,\n-      34001.61344048994\n-    ],\n-    [\n-      40217.93503388009,\n-      40945.92300091279\n-    ],\n-    [\n-      53754.02416103754,\n-      54859.543233079996\n-    ],\n-    [\n-      60487.17276895151,\n-      61745.24932267538\n-    ]\n-  ],\n-  \"6-3.H\": [\n-    [\n-      5.991015378410717,\n-      6.161331980163222\n-    ],\n-    [\n-      12.830417273750978,\n-      13.228514497150638\n-    ],\n-    [\n-      32.6257357708342,\n-      32.95375806837274\n-    ],\n-    [\n-      65.84221877998968,\n-      66.29204593164367\n-    ],\n-    [\n-      131.9869817812105,\n-      132.39082079928676\n-    ],\n-    [\n-      330.0966100800775,\n-      330.0420502304721\n-    ],\n-    [\n-      661.5930372618564,\n-      662.090603829936\n-    ],\n-    [\n-      1322.946214012484,\n-      1322.9072532130278\n-    ],\n-    [\n-      3314.9561603950906,\n-      3321.271207521288\n-    ],\n-    [\n-      6647.244042112303,\n-      6676.516699817827\n-    ],\n-    [\n-      13357.957857485744,\n-      13471.788378032623\n-    ],\n-    [\n-      33654.50940827709,\n-      34224.850703086966\n-    ],\n-    [\n-      40456.421455446914,\n-      41214.21026142277\n-    ],\n-    [\n-      54067.6623322584,\n-      55208.54889305485\n-    ],\n-    [\n-      60853.824492946456,\n-      62166.104802531685\n-    ]\n-  ],\n-  \"6-4.E\": [\n-    [\n-      5.897291147124707,\n-      5.929661384818709\n-    ],\n-    [\n-      12.598359838481503,\n-      12.668014368518445\n-    ],\n-    [\n-      32.475699206958055,\n-      32.430403661311175\n-    ],\n-    [\n-      65.70393996520036,\n-      65.56715618847481\n-    ],\n-    [\n-      132.34793734602255,\n-      132.21509690902042\n-    ],\n-    [\n-      332.31702494320024,\n-      332.2334407805856\n-    ],\n-    [\n-      665.657096628858,\n-      665.7140447996484\n-    ],\n-    [\n-      1333.4435139640193,\n-      1334.8893943070696\n-    ],\n-    [\n-      3341.0641868607995,\n-      3350.9613158399015\n-    ],\n-    [\n-      6699.415896342788,\n-      6735.837255137897\n-    ],\n-    [\n-      13466.285710056623,\n-      13599.290839104155\n-    ],\n-    [\n-      33962.34636031946,\n-      34617.956006326225\n-    ],\n-    [\n-      40836.26508935071,\n-      41707.5899751269\n-    ],\n-    [\n-      54592.96244903124,\n-      55905.622016710644\n-    ],\n-    [\n-      61457.647587540545,\n-      62976.827731126\n-    ]\n-  ],\n-  \"6-4.F\": [\n-    [\n-      6.3821022628130155,\n-      6.760127443331578\n-    ],\n-    [\n-      13.213146158372206,\n-      13.56424479290873\n-    ],\n-    [\n-      33.622820991917656,\n-      33.838121192066964\n-    ],\n-    [\n-      67.83782882190069,\n-      68.03776077559823\n-    ],\n-    [\n-      136.3045357458741,\n-      136.51171413115492\n-    ],\n-    [\n-      341.66028892859924,\n-      341.84543136152024\n-    ],\n-    [\n-      684.0918276680908,\n-      684.4126091157859\n-    ],\n-    [\n-      1369.3469751672792,\n-      1370.331561590575\n-    ],\n-    [\n-      3430.4315630313745,\n-      3438.7444779582884\n-    ],\n-    [\n-      6878.520848297852,\n-      6912.106698897729\n-    ],\n-    [\n-      13825.790985712234,\n-      13952.771409774952\n-    ],\n-    [\n-      34843.451761761076,\n-      35469.16810218839\n-    ],\n-    [\n-      41887.373781636794,\n-      42716.13416080971\n-    ],\n-    [\n-      55980.395420814835,\n-      57221.16493003338\n-    ],\n-    [\n-      62793.167941822045,\n-      63996.51340291959\n-    ]\n-  ],\n-  \"6-4.G\": [\n-    [\n-      6.024988920561752,\n-      6.139891143995883\n-    ],\n-    [\n-      12.718679296138657,\n-      12.8081962848389\n-    ],\n-    [\n-      32.83067958977502,\n-      32.87899168306227\n-    ],\n-    [\n-      66.19848102065266,\n-      66.02721533044418\n-    ],\n-    [\n-      133.2956466787658,\n-      133.04606566516878\n-    ],\n-    [\n-      334.9876009992156,\n-      334.90300018536584\n-    ],\n-    [\n-      671.058407698387,\n-      671.1670726421934\n-    ],\n-    [\n-      1344.0831723282565,\n-      1345.4629248974943\n-    ],\n-    [\n-      3366.8900221532285,\n-      3375.8337315684203\n-    ],\n-    [\n-      6753.036829290873,\n-      6789.524417361738\n-    ],\n-    [\n-      13580.772926240457,\n-      13719.923193897497\n-    ],\n-    [\n-      34271.226883172865,\n-      34969.446926495686\n-    ],\n-    [\n-      41215.16604805919,\n-      42146.409797658474\n-    ],\n-    [\n-      55121.95919395623,\n-      56539.87738860509\n-    ],\n-    [\n-      62016.87220619833,\n-      63616.83288161934\n-    ]\n-  ],\n-  \"6-4.H\": [\n-    [\n-      5.622117560859253,\n-      5.409390057717058\n-    ],\n-    [\n-      12.24825088500627,\n-      12.018558322504603\n-    ],\n-    [\n-      32.37251613975156,\n-      32.34535664570571\n-    ],\n-    [\n-      65.56832830679093,\n-      65.54135901947028\n-    ],\n-    [\n-      131.7095433684957,\n-      131.43313882016568\n-    ],\n-    [\n-      330.9384095987,\n-      330.716764663356\n-    ],\n-    [\n-      663.008292718461,\n-      662.90028506196\n-    ],\n-    [\n-      1328.6868421363213,\n-      1330.3472087670987\n-    ],\n-    [\n-      3329.7441337854093,\n-      3340.7593998280513\n-    ],\n-    [\n-      6680.659806292384,\n-      6723.263292132732\n-    ],\n-    [\n-      13444.14148187978,\n-      13604.599975126534\n-    ],\n-    [\n-      33972.101798090895,\n-      34767.58938703929\n-    ],\n-    [\n-      40869.280745619915,\n-      41931.53433083485\n-    ],\n-    [\n-      54692.14338080142,\n-      56319.1052031424\n-    ],\n-    [\n-      61585.647941592615,\n-      63476.305723653626\n-    ]\n-  ],\n-  \"6-5.E\": [\n-    [\n-      5.551065870542002,\n-      5.446594179394074\n-    ],\n-    [\n-      11.970007440073799,\n-      11.85541801698511\n-    ],\n-    [\n-      31.247506207690456,\n-      31.125301055498184\n-    ],\n-    [\n-      63.40652065314496,\n-      63.30220931487535\n-    ],\n-    [\n-      127.85925643211746,\n-      127.92591829628515\n-    ],\n-    [\n-      320.2856757486276,\n-      319.93422002225145\n-    ],\n-    [\n-      642.0395881347806,\n-      642.0335196635903\n-    ],\n-    [\n-      1285.6615197010524,\n-      1286.461602119023\n-    ],\n-    [\n-      3221.819039725369,\n-      3230.3498864639523\n-    ],\n-    [\n-      6463.259634267826,\n-      6499.327359987938\n-    ],\n-    [\n-      13004.292772437442,\n-      13147.548131736863\n-    ],\n-    [\n-      32861.45846125517,\n-      33599.06701377399\n-    ],\n-    [\n-      39534.46002652617,\n-      40524.92226364003\n-    ],\n-    [\n-      52909.987343205576,\n-      54438.35292903673\n-    ],\n-    [\n-      59555.98843074359,\n-      61309.431592317094\n-    ]\n-  ],\n-  \"6-5.F\": [\n-    [\n-      5.974880395880237,\n-      6.182099128604023\n-    ],\n-    [\n-      12.546822656245709,\n-      12.761473600071557\n-    ],\n-    [\n-      32.01971234771029,\n-      32.020120607210956\n-    ],\n-    [\n-      64.7854634440142,\n-      64.74577575733969\n-    ],\n-    [\n-      130.66641658761623,\n-      130.89631878005724\n-    ],\n-    [\n-      327.00668201508955,\n-      326.7414207805824\n-    ],\n-    [\n-      655.6473366731923,\n-      655.9639416885184\n-    ],\n-    [\n-      1312.135622391513,\n-      1312.8232687567709\n-    ],\n-    [\n-      3287.912050041053,\n-      3296.0435181841767\n-    ],\n-    [\n-      6593.8396326616485,\n-      6627.461985433507\n-    ],\n-    [\n-      13255.755267315373,\n-      13384.18570997929\n-    ],\n-    [\n-      33432.390767026875,\n-      34071.69145606152\n-    ],\n-    [\n-      40197.838190666385,\n-      41046.982802848775\n-    ],\n-    [\n-      53738.77510034491,\n-      55018.717696415675\n-    ],\n-    [\n-      60493.775399861945,\n-      61973.07870119257\n-    ]\n-  ],\n-  \"6-5.G\": [\n-    [\n-      6.257169684183113,\n-      6.708260692322852\n-    ],\n-    [\n-      12.860191546576626,\n-      13.2649224716497\n-    ],\n-    [\n-      32.490310995610095,\n-      32.6191306462836\n-    ],\n-    [\n-      65.4697681918507,\n-      65.42058745723246\n-    ],\n-    [\n-      132.21216137560629,\n-      132.592455956102\n-    ],\n-    [\n-      330.69794088733,\n-      330.6210148746433\n-    ],\n-    [\n-      662.7857909830268,\n-      663.2271203033068\n-    ],\n-    [\n-      1326.0511484754509,\n-      1326.6180427890715\n-    ],\n-    [\n-      3323.281348734389,\n-      3331.680199958163\n-    ],\n-    [\n-      6665.52031269277,\n-      6700.622183823049\n-    ],\n-    [\n-      13402.148230992643,\n-      13535.792824442928\n-    ],\n-    [\n-      33814.82044453947,\n-      34486.53260279497\n-    ],\n-    [\n-      40664.66528426033,\n-      41561.07592817547\n-    ],\n-    [\n-      54378.09161743807,\n-      55739.02868050562\n-    ],\n-    [\n-      61209.928571592216,\n-      62777.2044360189\n-    ]\n-  ],\n-  \"6-5.H\": [\n-    [\n-      5.441364543029212,\n-      5.105079098198803\n-    ],\n-    [\n-      11.962604988631314,\n-      11.550323030704018\n-    ],\n-    [\n-      32.001932535117014,\n-      31.845628187031465\n-    ],\n-    [\n-      64.99906649721221,\n-      64.8903081103284\n-    ],\n-    [\n-      130.4676938694763,\n-      129.9315863670092\n-    ],\n-    [\n-      328.5299226375376,\n-      328.3598889819665\n-    ],\n-    [\n-      657.8311772874572,\n-      657.4724625481045\n-    ],\n-    [\n-      1318.5631811869146,\n-      1319.9576610444974\n-    ],\n-    [\n-      3303.027106146092,\n-      3311.967962836354\n-    ],\n-    [\n-      6625.682991390836,\n-      6662.559317313087\n-    ],\n-    [\n-      13327.311383925611,\n-      13469.350944222811\n-    ],\n-    [\n-      33662.530690631014,\n-      34392.33391104337\n-    ],\n-    [\n-      40487.6846426443,\n-      41460.164944817254\n-    ],\n-    [\n-      54153.43600591282,\n-      55628.361919623225\n-    ],\n-    [\n-      60955.32906600982,\n-      62649.02998542767\n-    ]\n-  ],\n-  \"6-6.E\": [\n-    [\n-      5.325821972147624,\n-      5.313536522630862\n-    ],\n-    [\n-      11.36321398077039,\n-      11.32318296346978\n-    ],\n-    [\n-      29.548070699500915,\n-      29.497093017705748\n-    ],\n-    [\n-      59.90067628259596,\n-      59.875974924387464\n-    ],\n-    [\n-      120.65138404350871,\n-      120.72492235327616\n-    ],\n-    [\n-      302.40901389960453,\n-      302.28267068684994\n-    ],\n-    [\n-      605.8106813608495,\n-      605.823428284889\n-    ],\n-    [\n-      1213.891724418333,\n-      1215.46249450236\n-    ],\n-    [\n-      3046.243171633022,\n-      3060.6561276106954\n-    ],\n-    [\n-      6125.952442464274,\n-      6188.00382650169\n-    ],\n-    [\n-      12373.194235638335,\n-      12613.936689572996\n-    ],\n-    [\n-      31513.108159297,\n-      32747.198564490027\n-    ],\n-    [\n-      37985.683583055616,\n-      39650.492321113765\n-    ],\n-    [\n-      50993.96443227153,\n-      53592.66317871493\n-    ],\n-    [\n-      57471.72548166009,\n-      60509.42310522245\n-    ]\n-  ],\n-  \"6-6.F\": [\n-    [\n-      5.635806654920515,\n-      5.729768455109077\n-    ],\n-    [\n-      11.981680825306627,\n-      12.123169264307307\n-    ],\n-    [\n-      30.744218034423856,\n-      30.751222292132308\n-    ],\n-    [\n-      62.20205906178548,\n-      62.174627243607105\n-    ],\n-    [\n-      125.04970326659675,\n-      124.88554411163487\n-    ],\n-    [\n-      314.1551364866943,\n-      314.1424578825758\n-    ],\n-    [\n-      629.1938254316659,\n-      629.2969643234243\n-    ],\n-    [\n-      1260.435966902349,\n-      1261.937240680439\n-    ],\n-    [\n-      3160.575342585872,\n-      3172.7234399908907\n-    ],\n-    [\n-      6347.405551474998,\n-      6397.500779756026\n-    ],\n-    [\n-      12792.936864289253,\n-      12984.92033342643\n-    ],\n-    [\n-      32435.78286942631,\n-      33408.34510173788\n-    ],\n-    [\n-      39052.07894821274,\n-      40356.31747006813\n-    ],\n-    [\n-      52319.27111884197,\n-      54325.74323630549\n-    ],\n-    [\n-      58848.722024234834,\n-      61094.64323682961\n-    ]\n-  ],\n-  \"6-6.G\": [\n-    [\n-      5.683461150857522,\n-      5.740976645353619\n-    ],\n-    [\n-      12.179897604975302,\n-      12.342497221905449\n-    ],\n-    [\n-      31.289195414625603,\n-      31.38046384465567\n-    ],\n-    [\n-      63.26899145706084,\n-      63.37538031354067\n-    ],\n-    [\n-      127.14808933179314,\n-      127.20424473221085\n-    ],\n-    [\n-      318.7938608871233,\n-      318.7082415707806\n-    ],\n-    [\n-      638.7156549193479,\n-      638.90596378757\n-    ],\n-    [\n-      1279.4399427203612,\n-      1281.064744407141\n-    ],\n-    [\n-      3207.0458288654877,\n-      3218.43944093658\n-    ],\n-    [\n-      6436.512298379841,\n-      6481.180956553299\n-    ],\n-    [\n-      12960.270214117834,\n-      13128.436330280421\n-    ],\n-    [\n-      32796.2721623204,\n-      33650.40111222381\n-    ],\n-    [\n-      39470.814321035126,\n-      40617.24597867153\n-    ],\n-    [\n-      52853.94933907506,\n-      54622.58918769335\n-    ],\n-    [\n-      59447.48108889104,\n-      61423.005547402914\n-    ]\n-  ],\n-  \"6-6.H\": [\n-    [\n-      5.543240468043179,\n-      5.63923563489194\n-    ],\n-    [\n-      11.779172773018319,\n-      11.920052357016111\n-    ],\n-    [\n-      30.20657471819067,\n-      30.199958437012903\n-    ],\n-    [\n-      60.9515046656793,\n-      60.7351954200743\n-    ],\n-    [\n-      122.59170281061752,\n-      122.10596984744463\n-    ],\n-    [\n-      308.8740365814826,\n-      308.93635509596874\n-    ],\n-    [\n-      618.3859524728339,\n-      618.4062449339037\n-    ],\n-    [\n-      1239.2478316745767,\n-      1241.024686629599\n-    ],\n-    [\n-      3106.220360971844,\n-      3117.6858320117503\n-    ],\n-    [\n-      6236.206203348094,\n-      6282.415989783846\n-    ],\n-    [\n-      12561.601134220216,\n-      12735.620064353776\n-    ],\n-    [\n-      31808.24173133547,\n-      32685.371368050382\n-    ],\n-    [\n-      38284.755739661254,\n-      39458.70944924723\n-    ],\n-    [\n-      51268.86322399042,\n-      53071.03846984919\n-    ],\n-    [\n-      57730.66344299372,\n-      59814.99367055382\n-    ]\n-  ]\n-}\n\\ No newline at end of file\n",
                            "Issue 22702: Delete the now disused VIS_NonLinearity_Flat",
                            "Chris Dolding",
                            "2023-07-27T13:24:40.000+01:00",
                            "76293695634970a815f8ef32a5b24c3dec6ae957"
                        ]
                    ],
                    "VIS_NonLinearity_Flat/auxdir/VIS_NonLinearity_Flat/Patty_FlatfieldNL.readme.txt": [
                        [
                            "@@ -1,4 +0,0 @@\n-An example json file containing measured NL points for each quadrant.\n-Downloaded from:\n-https://euclid.roe.ac.uk/issues/22517#note-28\n-https://euclid.roe.ac.uk/attachments/87505\n\\ No newline at end of file\n",
                            "Issue 22702: Delete the now disused VIS_NonLinearity_Flat",
                            "Chris Dolding",
                            "2023-07-27T13:24:40.000+01:00",
                            "76293695634970a815f8ef32a5b24c3dec6ae957"
                        ]
                    ],
                    "VIS_NonLinearity_Flat/python/VIS_NonLinearity_Flat/VIS_NonLinFlat_Removal/non_lin_flat_removal.py": [
                        [
                            "@@ -1,88 +0,0 @@\n-\"\"\"Corrects the non-linearity effect in image pixel data, using a model from flat images.\n-\"\"\"\n-#\n-# Copyright (C) 2012-2023 Euclid Science Ground Segment\n-#\n-# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n-# Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n-# any later version.\n-#\n-# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n-# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n-# details.\n-#\n-# You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n-# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n-#\n-\n-import numpy as np\n-\n-__all__ = ['remove_non_lin']\n-\n-#flux values above this should not occur.  If they do exist they will receive the same correction as 65535.0\n-_EXTRAPOLATION_LIMIT = 65535.0\n-\n-\n-def _interpolate_nl_to_linear(nl_flux_value, points_model):\n-    \"\"\"Correct the non-linearity effect of a flux value by applying a model defined by several fixed points.\n-\n-    Parameters\n-    ----------\n-    nl_flux_value : number\n-        A value in which is to be corrected for the non-linearity effect.\n-    points_model : 2-D array_like of float\n-        A set of pairs of numbers.  In each pair, index [1] is a non-linear (i.e. observed) flux and [0] is the\n-        corresponding linear (i.e. corrected) flux.\n-\n-    Returns\n-    -------\n-    number\n-        The flux value with the non-linearity effect corrected.\n-    \"\"\"\n-    if nl_flux_value >= _EXTRAPOLATION_LIMIT:\n-        #use the correction defined by the last point\n-        result = nl_flux_value + (points_model[-1,0] - points_model[-1,1])\n-    elif (len(points_model) < 2) or (nl_flux_value <= 0.0) or (nl_flux_value <= points_model[0,1]):\n-        #don't apply any correction\n-        result = nl_flux_value\n-    else:\n-        for pair_i in range(len(points_model)-2):\n-            if (nl_flux_value > points_model[pair_i,1]) and (nl_flux_value <= points_model[pair_i+1,1]):\n-                linear_diff = points_model[pair_i+1,0] - points_model[pair_i,0]\n-                nl_diff     = points_model[pair_i+1,1] - points_model[pair_i,1]\n-                result = points_model[pair_i,0] + (nl_flux_value - points_model[pair_i,1]) / nl_diff * linear_diff\n-    return result\n-\n-def remove_non_lin(image, points_model):\n-    \"\"\"Correct the non-linearity effect in an image by applying a model defined by several fixed points.\n-\n-    Parameters\n-    ----------\n-    image : array_like of number\n-        A 2-D array which is to be corrected for the non-linearity effect.\n-    points_model : 2-D ndarray of floats\n-        A set of pairs of numbers.  In each pair, index [1] is a non-linear (i.e. observed) flux and [0] is the\n-        corresponding linear (i.e. corrected) flux.\n-\n-    Returns\n-    -------\n-    array_like of number\n-        A copy of `image` with the non-linearity effect corrected.\n-    \"\"\"\n-    if points_model[0,1] > 0.0:\n-        #prepend another point at zero,zero\n-        ext_model = np.concatenate((np.zeros_like(points_model, shape=(1,2)), points_model))\n-    if ext_model[-1,1] < _EXTRAPOLATION_LIMIT:\n-        #append a new last point at _EXTRAPOLATION_LIMIT\n-        last_linear_diff = ext_model[-1,0] - ext_model[-2,0]\n-        last_nl_diff = ext_model[-1,1] - ext_model[-2,1]\n-        #gradient means the slope steepness of linear over non-linear (i.e. linear per non-linear flux)\n-        gradient = last_linear_diff / last_nl_diff\n-        new_last_point = np.zeros_like(points_model, shape=(1,2))\n-        new_last_point[0,1] = _EXTRAPOLATION_LIMIT\n-        new_last_point[0,0] = ext_model[-1,0] + (_EXTRAPOLATION_LIMIT - ext_model[-1,1]) * gradient\n-        ext_model = np.concatenate((ext_model, new_last_point))\n-    #apply the non-linearity correction function to each flux value individually\n-    nl_correction = np.vectorize(_interpolate_nl_to_linear, otypes=[float], excluded=[\"points_model\"])\n-    corrected_img = nl_correction(nl_flux_value=image, points_model=ext_model)\n-    return corrected_img\n",
                            "Issue 22702: Delete the now disused VIS_NonLinearity_Flat",
                            "Chris Dolding",
                            "2023-07-27T13:24:40.000+01:00",
                            "76293695634970a815f8ef32a5b24c3dec6ae957"
                        ]
                    ],
                    "VIS_NonLinearity_Flat/tests/python/VIS_remove_non_lin_flat_test.py": [
                        [
                            "@@ -1,51 +0,0 @@\n-\"\"\"Tests for the VIS_remove_non_lin_flat Elements program.\n-\n-To run these tests in Eclipse in LODEEN, it would be necessary to set up the Elements environment.  There was a\n-method described at https://euclid.roe.ac.uk/projects/codeen-users/wiki/EclipseIntegration but this seems to be\n-out-of-date.  Some of the ingredients might be:\n-   - Open Window -> Preferences -> PyDev -> PyUnit -> Test Runner\n-   - Choose py.test from the dropdown box, and delete any text in the arguments window.\n-   - Right click on the \"python\" directory (under tests) and Run As -> Python unit-test.\n-\n-To run them at the command line, use \"make purge install ; make CTEST_OUTPUT_ON_FAILURE=1 test\"\n-\"\"\"\n-#\n-# Copyright (C) 2012-2023 Euclid Science Ground Segment\n-#\n-# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n-# Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n-# any later version.\n-#\n-# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n-# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n-# details.\n-#\n-# You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n-# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n-#\n-\n-import pytest\n-\n-import VIS_NonLinearity_Flat.VIS_NonLinCorrectionFlat_Programs.VIS_remove_non_lin_flat as prog\n-\n-\n-def test_main_method_badargs():\n-    \"\"\"Call the command line entry point with an argument that is not recognised.\n-\n-    Assert that the expected exception is thrown due to the invalid argument.\n-    \"\"\"\n-    arg_string = ['argv_item_zero_which_is_not_used', '--unrecognised_argument']\n-    #Python's argparse.py calls sys.exit() which throws a SystemExit Exception\n-    with pytest.raises(SystemExit):\n-        prog.cmd_line_entry_point(arg_string)\n-\n-def test_main_method_callable():\n-    \"\"\"Call the command line entry point with input files that do not exist.\n-\n-    Assert that the expected file-not-found exception is thrown.\n-    \"\"\"\n-    arg_string = ['argv_item_zero_which_is_not_used',\n-                  '--in_image', 'non/existent/input/file.fits']\n-    #An IOError Exception \"No such file or directory\" is expected\n-    with pytest.raises(IOError):\n-        prog.cmd_line_entry_point(arg_string)\n",
                            "Issue 22702: Delete the now disused VIS_NonLinearity_Flat",
                            "Chris Dolding",
                            "2023-07-27T13:24:40.000+01:00",
                            "76293695634970a815f8ef32a5b24c3dec6ae957"
                        ]
                    ]
                },
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": [
                    {
                        "name": "13.0.4",
                        "created_at": "2023-07-25T09:50:39.000+00:00",
                        "author_name": "Catherine Grenet"
                    },
                    {
                        "name": "13.0.6",
                        "created_at": "2023-08-02T19:25:05.000+02:00",
                        "author_name": "Catherine Grenet"
                    }
                ]
            },
            "PF-VIS/VIS_SatPixels": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_Photometry": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_NonLinCalibration": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_RemovePRNU": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_PyLibrary": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_MeasurePRNU": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_RemoveLamp": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_MeasureLamp": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_MasterBias": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_ImageTools": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_Ghosts": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_CTICalibrate": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_CTICorrect": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_CTIAdd": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_CTI_from_Git": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_Background": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_Astrometry": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            }
        },
        "PF-EXT": {
            "PF-EXT/ext_pf1_gen_p2": {
                "start date": "2023-07-04T12:48:58",
                "end date": "2023-08-01T17:08:52",
                "start tag": "0.9.0",
                "end tag": "0.9.1",
                "count_files_modified": "14",
                "modifications_by_file": {
                    ".jenkinsFile": [
                        [
                            "@@ -1,4 +1,4 @@\n #!groovy\n @Library('integration-library@release-10') _\n-pipelineElements(name:\"EXT_PF1_GEN_P2\", component:'eden.3.1')\n+pipelineElements(name:\"EXT_PF1_GEN_P2\", component:'eden.3.1', skipQuality:true)\n \n",
                            "Merge branch 'release-0.9' into 'develop'",
                            "Michael",
                            "2023-08-01T14:57:06.000+00:00",
                            "960e520cd384cc94e0d10fa6989123a10d993561"
                        ]
                    ],
                    "CMakeLists.txt": [
                        [
                            "@@ -6,14 +6,14 @@ find_package(ElementsProject)\n #---------------------------------------------------------------\n \n # Declare project name and version\n-elements_project(EXT_PF1_GEN_P2 0.91 USE Elements 6.2.1 \n-                                         ST_DataModel 9.2.0 \n-                                         ST_DataModelTools 9.2.1 \n-                                         EL_PSFExModel 10.2 \n-                                         EXT_PF1_GEN_P2_LIBS 0.91 \n-                                         CT_Swarp_cpp 10.1 \n-                                         EL_Background 10.1 \n-                                         EXT_STACK_PSF 1.11 \n-                                         EXT_WCS_TOOLS 0.3 \n-                                         SourceXtractorPlusPlus 0.2)\n+elements_project(EXT_PF1_GEN_P2 0.9.0 USE Elements 6.2.1 \n+                                        ST_DataModel 9.2.0 \n+                                        ST_DataModelTools 9.2.1 \n+                                        EL_PSFExModel 10.2.0 \n+                                        EXT_PF1_GEN_P2_LIBS 0.9.0 \n+                                        CT_Swarp_cpp 10.1.0 \n+                                        EL_Background 10.1.0 \n+                                        EXT_STACK_PSF 1.10.0 \n+                                        EXT_WCS_TOOLS 0.3.0 \n+                                        SourceXtractorPlusPlus 0.19.4)\n \n",
                            "Merge branch 'release-0.9' into 'develop'",
                            "Michael",
                            "2023-08-01T14:57:06.000+00:00",
                            "960e520cd384cc94e0d10fa6989123a10d993561"
                        ],
                        [
                            "@@ -13,7 +13,7 @@ elements_project(EXT_PF1_GEN_P2 0.91 USE Elements 6.2.1\n                                          EXT_PF1_GEN_P2_LIBS 0.91 \n                                          CT_Swarp_cpp 10.1 \n                                          EL_Background 10.1 \n-                                         EXT_STACK_PSF 1.10 \n+                                         EXT_STACK_PSF 1.11 \n                                          EXT_WCS_TOOLS 0.3 \n                                          SourceXtractorPlusPlus 0.2)\n \n",
                            "remove too wordy logs",
                            "Michael",
                            "2023-07-20T15:48:03.000+02:00",
                            "311b2b47bd1c7b5cdce40ad24c53dbad4d825360"
                        ],
                        [
                            "@@ -10,7 +10,7 @@ elements_project(EXT_PF1_GEN_P2 0.91 USE Elements 6.2.1\n                                          ST_DataModel 9.2.0 \n                                          ST_DataModelTools 9.2.1 \n                                          EL_PSFExModel 10.2 \n-                                         EXT_PF1_GEN_P2_LIBS 0.9 \n+                                         EXT_PF1_GEN_P2_LIBS 0.91 \n                                          CT_Swarp_cpp 10.1 \n                                          EL_Background 10.1 \n                                          EXT_STACK_PSF 1.10 \n",
                            "remove too wordy logs",
                            "Michael",
                            "2023-07-20T15:32:05.000+02:00",
                            "c2ce8b7f75850b9101b2b818a4e30020f0e8171d"
                        ],
                        [
                            "@@ -6,14 +6,14 @@ find_package(ElementsProject)\n #---------------------------------------------------------------\n \n # Declare project name and version\n-elements_project(EXT_PF1_GEN_P2 0.9 USE Elements 6.2.1 \n-                                        ST_DataModel 9.2.0 \n-                                        ST_DataModelTools 9.2.1 \n-                                        EL_PSFExModel 10.2 \n-                                        EXT_PF1_GEN_P2_LIBS 0.9 \n-                                        CT_Swarp_cpp 10.1 \n-                                        EL_Background 10.1 \n-                                        EXT_STACK_PSF 1.10 \n-                                        EXT_WCS_TOOLS 0.3 \n-                                        SourceXtractorPlusPlus 0.2)\n+elements_project(EXT_PF1_GEN_P2 0.91 USE Elements 6.2.1 \n+                                         ST_DataModel 9.2.0 \n+                                         ST_DataModelTools 9.2.1 \n+                                         EL_PSFExModel 10.2 \n+                                         EXT_PF1_GEN_P2_LIBS 0.9 \n+                                         CT_Swarp_cpp 10.1 \n+                                         EL_Background 10.1 \n+                                         EXT_STACK_PSF 1.10 \n+                                         EXT_WCS_TOOLS 0.3 \n+                                         SourceXtractorPlusPlus 0.2)\n \n",
                            "add option to swarp coadds in chunks and then combine to full product",
                            "Michael",
                            "2023-07-10T12:15:03.000+02:00",
                            "7b8b6a1cddb18e2a9c64452eaaba612cfdbbccea"
                        ],
                        [
                            "@@ -6,14 +6,14 @@ find_package(ElementsProject)\n #---------------------------------------------------------------\n \n # Declare project name and version\n-elements_project(EXT_PF1_GEN_P2 0.9 USE Elements 6.2.1 \n+elements_project(EXT_PF1_GEN_P2 0.9.0 USE Elements 6.2.1 \n                                         ST_DataModel 9.2.0 \n                                         ST_DataModelTools 9.2.1 \n-                                        EL_PSFExModel 10.2 \n-                                        EXT_PF1_GEN_P2_LIBS 0.9 \n-                                        CT_Swarp_cpp 10.1 \n-                                        EL_Background 10.1 \n-                                        EXT_STACK_PSF 1.10 \n-                                        EXT_WCS_TOOLS 0.3 \n-                                        SourceXtractorPlusPlus 0.2)\n+                                        EL_PSFExModel 10.2.0 \n+                                        EXT_PF1_GEN_P2_LIBS 0.9.0 \n+                                        CT_Swarp_cpp 10.1.0 \n+                                        EL_Background 10.1.0 \n+                                        EXT_STACK_PSF 1.10.0 \n+                                        EXT_WCS_TOOLS 0.3.0 \n+                                        SourceXtractorPlusPlus 0.19.4)\n \n",
                            "git checkout -b release-1.0",
                            "Michael",
                            "2023-07-04T12:48:58.000+02:00",
                            "54920cde02ff106bf71c488bbb654236896be915"
                        ]
                    ],
                    "EXT_PF1_GEN_P2/python/EXT_PF1_GEN_P2/psf/Filter.py": [
                        [
                            "@@ -133,13 +133,18 @@ class PsfStampFilter(object):\n                 #\n             #\n             temp_layer_objects[str(i)] = temp\n-        print(\"  \", [len(temp_layer_objects[x]) for x in temp_layer_objects])\n+        #\n+        total_object_number = 0\n+        for x in temp_layer_objects:\n+            total_object_number = total_object_number +len(temp_layer_objects[x])\n+        #\n+            \n         #print(zero_fraction)\n         print(\"stamps filtered out:\")\n         print(\"bad shape \", counter_badshape)\n         print(\"incomplete coverage (too many zeroes) \", counter_zeroes)\n         print(\"stamp completely empty \", counter_stampEmpty)\n         \n-        return temp_layer_objects\n+        return temp_layer_objects, total_object_number\n     #\n #\n",
                            "adressed empty lines at the end of the stackpsf info table",
                            "Michael",
                            "2023-07-28T11:09:16.000+02:00",
                            "3b271f9e572a62c8da3eb7e3587db28bcc02653a"
                        ]
                    ],
                    "EXT_PF1_GEN_P2/python/EXT_PF1_GEN_P2/psf/stackPSF.py": [
                        [
                            "@@ -972,18 +972,19 @@ class StackPSF(Pipeline):\n         X, Y  = self.project_positions_onto_coadd_pixel_space(self.ra, self.dec)\n         \n         self.logger.write(\"produce_output_FITS_file: PsfStampFilter \")\n+        self.logger.write(\"total_object_number before filter \" +str(total_object_number))\n+\n         psf = PsfStampFilter(self.get_stamp_size(), filtertype = self.getInstrumentFilter(), execfilter = self._args.execfilter)\n-        self.layer_objects = psf.filter(self.layer_objects, self.layer_coadds, X, Y)\n-        #self.layer_objects = filtered_layer_objects\n+        self.layer_objects, total_object_number = psf.filter(self.layer_objects, self.layer_coadds, X, Y)\n+        self.logger.write(\"total_object_number after filter \" +str(total_object_number))\n         \n         \n         # Initialize the FITS image and the FITS table in the output\n         # file extensions\n         self.logger.write(\"produce_output_FITS_file: OutputStackedPSF \")\n-        \n         output_obj = OutputStackedPSF(total_object_number, self.get_stamp_size(), self.tmpdir, self.tilename, self.band, self.logger)\n-        self.logger.write(\"produce_output_FITS_file: populate \")\n         \n+        self.logger.write(\"produce_output_FITS_file: populate \")\n         output_obj.populate(self.layer_objects, self.ra, self.dec, self.mag, self._args.coadd, self._args.bandpass_value)\n         self.logger.write(\"write this file \" + self._args.outdir +os.sep +self.tilename +\"_\" +self.band +\"_\" +\"_stackedPSF.fits\" )\n         output_obj.write_to_fits(\"%s/%s_%s_stackedPSF.fits\" % (self._args.outdir, self.tilename, self.band))\n",
                            "adressed empty lines at the end of the stackpsf info table",
                            "Michael",
                            "2023-07-28T11:09:16.000+02:00",
                            "3b271f9e572a62c8da3eb7e3587db28bcc02653a"
                        ],
                        [
                            "@@ -1442,10 +1442,8 @@ class StackPSF(Pipeline):\n         xlist = cat_data[xvalue].read()\n         ylist = cat_data[yvalue].read()\n         \n-        self.logger.write(\"use astropy WCS\")\n         WCSU = WcsUtils(se_image_header)\n         ralist, declist = WCSU.py_pix2world(xlist, ylist)\n-        self.logger.write(\"end use astropy WCS\")\n         #indexes of matching objects:\n         #detected_objects_idx: indexes in overlapping positions\n         #seIdx: indexes in catalog ra/dec. Apply to select from catalog\n",
                            "remove too wordy logs",
                            "Michael",
                            "2023-07-20T15:32:05.000+02:00",
                            "c2ce8b7f75850b9101b2b818a4e30020f0e8171d"
                        ],
                        [
                            "@@ -21,7 +21,10 @@ import numpy as np\n from astropy.coordinates import SkyCoord\n from astropy import units as u\n from astropy.wcs import WCS\n+from astropy.wcs import FITSFixedWarning\n from astropy.io import fits\n+from astropy.utils.exceptions import AstropyWarning\n+import warnings\n from scipy import ndimage\n import matplotlib.pyplot as plt\n #from db import DBConnection\n@@ -138,6 +141,11 @@ class StackPSF(Pipeline):\n         \n         #start a memory measuring daemon thread\n         self.memthread, self.memlog = self.measure_memory(self.outdir)\n+        \n+        #suppress astropy warnings\n+        warnings.simplefilter('ignore', category=AstropyWarning)\n+        warnings.simplefilter('ignore', category=FITSFixedWarning)\n+\n     #\n     \n     \n@@ -216,6 +224,7 @@ class StackPSF(Pipeline):\n \n         self.writeLog(\"read_input_list\")\n         inputdata = self.read_input_list()\n+        \n \n         #get ra, dec from reference catalog, mags matches from EXT coadd\n         #sorted by coadd magnitudes\n@@ -226,7 +235,7 @@ class StackPSF(Pipeline):\n         \n         #find out the instrument for later use\n         self.writeLog(\"setInstrumentFilter\")\n-        self.setInstrumentFilter(self.inputdata.__iter__().__next__())\n+        self.setInstrumentFilter(inputdata.__iter__().__next__())\n         \n         self.writeLog(\"divide_input_positions_into_layers_bf\")\n         layer_objects = self.divide_input_positions_into_layers_bf(math.sqrt(2.0)*self.get_stamp_size(), ra, dec, self._args.coadd, self._args.max_layer_num)\n@@ -245,7 +254,8 @@ class StackPSF(Pipeline):\n         \n         for _layer in range(len(layers)):\n             layer = layers[_layer]\n-            \n+            layerdir = self.tmpdir + os.sep + \"layer%s\" % layer\n+\n             outputs = mp_queue.get(block = True)\n             #check, this should return instantly as the queue blocks\n             pm2.block_until_all_processes_finished()\n@@ -262,29 +272,20 @@ class StackPSF(Pipeline):\n             self.writeLog(\"size of all_stamps_for_layer \" +str(TotalSizeOf.total_size(all_stamps_for_layer)))\n             self.writeLog(\"size of se_matches \" +str(TotalSizeOf.total_size(se_matches)))\n             \n-            # Loop over the list of SE images\n-            start = time.time()\n-              \n-            pm = ProcessManager.ProcessManager(self._args.multiprocesses, \"Image Simulator Process\")\n-            self.writeLog(\"Looping over the list of SE images\")\n-            for seimage in self.inputdata:\n-                if seimage not in all_stamps_for_layer:\n-                    continue\n-                ##### This part can be parallelized! (TBD) ###################\n-                #self.writeLog(\"simulate_single_image\")\n-                pm.add_process_and_start(self.simulate_single_image, args = (seimage, all_stamps_for_layer[seimage], layer))\n-                ##### End of the parallel part ##############################\n-            \n             #while the images are simulated and swarp runs, prepare the next layer:\n-            \n             if len(layers) > _layer +1:\n                 pm2 = ProcessManager.ProcessManager(1, \"Prepare Next Layer Process\")\n                 pm2.add_process_and_start(self.prepare_layer_processing, args = (layers[_layer +1], se_matches, mp_queue))\n             #\n             \n-            #wait with the swarp call until pm is ready\n-            pm.block_until_all_processes_finished()\n-            print(\"time for simulate_single_image for all images \",  time.time() - start)\n+            # Loop over the list of SE images\n+            self.writeLog(\"Preparing the input lists for LoopSwarp \" +list(inputdata.keys())[0])\n+            swarp_lists = self.prepare_swarp_inputlists_for_layer(inputdata, all_stamps_for_layer, layer, layerdir)\n+            \n+            self.writeLog(\"execute LoopSwarp\")\n+            start = time.time()\n+            self.execute_LoopSwarp(layer, swarp_lists, layerdir, all_stamps_for_layer)\n+            print(\"time for LoopSwarp \",  time.time() - start)\n             \n             self.writeLog(\"sizes of objects before cleanup\")\n             _keys = list(all_stamps_for_layer.keys())\n@@ -299,12 +300,6 @@ class StackPSF(Pipeline):\n             del all_stamps_for_layer\n             #del se_matches\n                 \n-            # Produce the stacked PSF image for the current layer\n-            start = time.time()\n-            self.writeLog(\"create_stacked_PSF_image_for_layer\")\n-            self.create_stacked_PSF_image_for_layer(layer)\n-            print(\"time for create_stacked_PSF_image \",  time.time() - start)\n-            \n             \n             # remove the temporary PSF images for the layer\n             start = time.time()\n@@ -312,11 +307,8 @@ class StackPSF(Pipeline):\n             self.clean_up_layer_directory(layer)\n             print(\"time for clean_up_layer_directory \",  time.time() - start)\n             \n-            #wait with the next layer until pm2 is ready\n-            #no don't as the queue needs to be empty to close the process\n-            #pm2._block_until_all_processes_finished()\n             \n-            self.writeLog(\"compute_total_object_number_for_layer\")\n+            self.writeLog(\"layer done\")\n         #\n         \n         total_object_number = self.compute_total_object_number(se_matches)\n@@ -584,6 +576,9 @@ class StackPSF(Pipeline):\n                 #single_epoch_image    = self.init_image(se_image_name)\n                 \n                 se_image_header = FitsServices.read_image_header(se_image_name)\n+                #we go on using this header for astropy WCS -> convert it to avoid trouble\n+                se_image_header = FitsServices.convert_fitsio_to_astropy_header(se_image_header)\n+                \n                 overlapping_positions = self.project_input_coordinates_into_the_single_image_pixel_space(\n                     se_image_header, layer_positions)\n                 if overlapping_positions._length == 0:\n@@ -695,7 +690,7 @@ class StackPSF(Pipeline):\n     #\n     \n     \n-    def simulate_single_image(self, seimage, stamplist, layer):\n+    def simulate_single_image(self, seimage, stamplist, layer, layerdir):\n         \"\"\"\n         stamplist: list osf tuples [(stamp, x, y, mag)]\n         \"\"\"\n@@ -772,7 +767,7 @@ class StackPSF(Pipeline):\n         #print(\"added \", counter, \" psfstamps to image \")\n         #self.writeLog(\"size of stamplist after insert \" +str(TotalSizeOf.total_size(stamplist)))\n         \n-        self.write_simulated_image_to_fits(layer, seimage, data, weight)\n+        self.write_simulated_image_to_fits(layer, seimage, data, weight, layerdir)\n         \n         #MW; is this necessary?\n         del data\n@@ -864,20 +859,81 @@ class StackPSF(Pipeline):\n             exec_info =  sys.exc_info()\n             traceback.print_tb(exec_info[2])\n         #\n+    #\n     \n     \n-    def create_stacked_PSF_image_for_layer(self, layer):\n-        \"\"\"\n-        Produce the stacked PSF image for the current layer\n+    def new_lists(self, img_list, scale_list, layerdir):\n+        #collect back the simulated data in lists    \n+        new_img_list = list()\n+        new_wgt_list = list()\n+        new_scale_list = list()\n+        \n+        simfiles = [layerdir + os.sep +ff for ff in os.listdir(layerdir) if ff.endswith(self.out_name[2:])]\n+        for seimage, scale in zip(img_list, scale_list):\n+            f = layerdir +os.sep +seimage[:-1].rsplit(os.sep, 1)[-1].replace(\".fits\", self.out_name[2:])\n+            if f in simfiles:\n+                new_img_list.append(f +\"[0]\\n\")\n+                new_wgt_list.append(f +\"[1]\\n\")\n+                new_scale_list.append(scale)\n+            #\n+        #\n+        return new_img_list, new_wgt_list, new_scale_list, True\n+    #\n+    \n+    \n+    def execute_LoopSwarp(self, layer, swarp_lists, layerdir, all_stamps_for_layer):\n         \"\"\"\n-        layerdir = self.tmpdir + os.sep + \"layer%s\" % layer\n-        swarp_lists, _, _ = self.get_swarp_lists(layerdir)\n-        IMAGEOUT_PATH, WEIGHTOUT_PATH = self.run_swarp(layerdir, swarp_lists)\n+        defines the swarp call and executes the program\n \n-        #MW: store the output image in the layer_objects list\n-        print(\"Layer \", layer, \", IMAGEOUT_PATH \", IMAGEOUT_PATH, \", exists \", self.exists(IMAGEOUT_PATH))\n-        self.layer_coadds[layer] = self.exists(IMAGEOUT_PATH) #if self.exists(IMAGEOUT_PATH) is not None else IMAGEOUT_PATH\n+        returns the path to the output image\n+        Use a closure here, because I need access to layer and all_stamps_for_layer\n+        \"\"\"\n+        \n+        def simulate_loopswarp_images(img_list, wgt_list, scale_list):\n+            \"\"\"\n+            callback function from LoopSwarp:\n+            these are the chunked python lists for images, weights and fluxscale\n+            pointing to the bgsub directory.\n+            From them, the psf images must be simulated on-the-fly\n+            \"\"\"\n+            self.writeLog(\"callback function: simulate_loopswarp_images\")\n+            \n+            multiprocesses = self._args.multiprocesses\n+            if multiprocesses > 1:\n+                #we use already one process to prepare the next layer\n+                #leave him alone, if possible\n+                multiprocesses = multiprocesses -1 \n+            #\n+            \n+            pm = ProcessManager.ProcessManager(multiprocesses, \"Image Simulator Process\")\n+            for seimage in img_list:\n+                ##### This part can be parallelized! (TBD) ###################\n+                #self.writeLog(\"simulate_single_image\")\n+                pm.add_process_and_start(self.simulate_single_image, args = (seimage[:-1], all_stamps_for_layer[seimage[:-1]], layer, layerdir))\n+                ##### End of the parallel part ##############################\n+            \n+            #wait with the swarp call until pm is ready\n+            pm.block_until_all_processes_finished()\n+            \n+            return self.new_lists(img_list, scale_list, layerdir)\n+        #\n+        \n+        \n+        pwd = os.getcwd()\n+        os.chdir(layerdir)\n \n+        swarp_args  = self.swarp_call(self.coadd_wcs.get_header(), self.band, swarp_lists)\n+        \n+        self.writeLog(\"Running LoopSwarp:\")\n+        ls = LoopSwarp.LoopSwarp(self, self._args.loopswarp_chunks, keep_shallow_coadds = False)\n+        ls.image(swarp_args, data_production_callback_command = simulate_loopswarp_images)\n+        \n+        os.chdir(pwd)\n+        image_out = (layerdir + os.sep +swarp_args[swarp_args.index(\"-IMAGEOUT_NAME\") +1]).split()[0]\n+        weight_out = (layerdir + os.sep +swarp_args[swarp_args.index(\"-WEIGHTOUT_NAME\") +1]).split()[0]\n+        \n+        self.layer_coadds[layer] = self.exists(image_out) \n+        \n         #set an extname, so ExtractImage will later work\n         if self.layer_coadds[layer] is not None:\n             fits.setval(self.layer_coadds[layer], 'extname', value='IMAGE', ext=0)\n@@ -885,14 +941,17 @@ class StackPSF(Pipeline):\n         #\n \n         #do the same for the weight image\n-        weight_image = self.exists(WEIGHTOUT_PATH)\n+        weight_image = self.exists(weight_out)\n         if weight_image is not None:\n             fits.setval(weight_image, 'extname', value='WEIGHT', ext=0)\n             fits.setval(weight_image, 'DES_EXT', value='WEIGHT', ext=0)\n         #\n         print(\"stored coadd image in layer_objects \", self.layer_coadds[layer])\n         print(\"stored coadd weight \", weight_image)\n-\n+        \n+        return self.layer_coadds[layer], weight_image\n+  #\n+    \n \n     def clean_up_layer_directory(self, layer):\n         \"\"\"\n@@ -902,7 +961,7 @@ class StackPSF(Pipeline):\n         if self._args.clean_up:\n             layerdir = self.tmpdir + os.sep + \"layer%s\" % layer\n             for fname in os.listdir(layerdir):\n-                if fname.endswith(\"_psfstamps.fits\"):\n+                if fname.endswith(self.out_name[2:]):\n                     os.remove(os.path.join(layerdir, fname))\n \n     def produce_output_FITS_file(self, total_object_number):\n@@ -1382,10 +1441,11 @@ class StackPSF(Pipeline):\n         #from catalog X/Y and se-image WCS, get se-image ra/dec\n         xlist = cat_data[xvalue].read()\n         ylist = cat_data[yvalue].read()\n-\n+        \n+        self.logger.write(\"use astropy WCS\")\n         WCSU = WcsUtils(se_image_header)\n         ralist, declist = WCSU.py_pix2world(xlist, ylist)\n-\n+        self.logger.write(\"end use astropy WCS\")\n         #indexes of matching objects:\n         #detected_objects_idx: indexes in overlapping positions\n         #seIdx: indexes in catalog ra/dec. Apply to select from catalog\n@@ -1423,7 +1483,7 @@ class StackPSF(Pipeline):\n         elif \"MAG_PSF\" in cat_data._colnames:\n             semag_psf    = cat_data[\"MAG_PSF\"].read()[seIdx]\n             semag        = semag_psf\n-            self.logger.write(\"\\n%s\" % \"The is no MAG_AUTO in the catalog. Work with MAG_PSF only!\")\n+            #self.logger.write(\"\\n%s\" % \"The is no MAG_AUTO in the catalog. Work with MAG_PSF only!\")\n         #\n         star_idxs    = np.where((np.abs(sespread) < 0.002) &\n                                   (semag_psf < 90.))[0]\n@@ -1745,7 +1805,7 @@ class StackPSF(Pipeline):\n                       missing_obj)\n     #\n     \n-    def write_simulated_image_to_fits(self, layer, seimage, psfimage, psfweight):\n+    def write_simulated_image_to_fits(self, layer, seimage, psfimage, psfweight, layerdir):\n         \"\"\"\n         Write the PSF single image to a FITS file\n         \"\"\"\n@@ -1753,21 +1813,21 @@ class StackPSF(Pipeline):\n         wheader = FitsServices.read_weight_header(seimage)\n         \n         seimage = seimage.rsplit(os.sep, 1)[-1]\n-        \n-        layerdir = self.tmpdir + os.sep + \"layer%s\" % layer\n         tmp_out_name   = layerdir + os.sep + self.out_name % (\n             os.path.basename(seimage.split(\".fits\")[0]))\n+        \n         f = fitsio.FITS(tmp_out_name, 'rw', clobber = True)\n         f.write(np.array(psfimage,       dtype = 'float32'),\n                 header = header,\n                 extver = 1)\n-        f.write(np.zeros(psfimage.shape, dtype = 'float32'),\n-                header = wheader,\n-                extver = 2)\n+        #f.write(np.zeros(psfimage.shape, dtype = 'float32'),\n+        #        header = wheader,\n+        #        extver = 2)\n         f.write(np.array(psfweight,      dtype = 'float32'),\n                 header = wheader,\n-                extver = 3)\n+                extver = 2)\n         f.close()\n+\n     #\n     \n     \n@@ -1777,6 +1837,7 @@ class StackPSF(Pipeline):\n         \"\"\"\n         print(\"\\n%s\" % datetime.datetime.now(), message)\n         self.logger.write(\"\\n%s\" % message)\n+        self.logger.flush()\n     #\n     \n     \n@@ -1926,80 +1987,55 @@ class StackPSF(Pipeline):\n         \n         return [startx, starty], [endx, endy], [interpolate_x, interpolate_y]\n     #\n-        \n-    def old_get_indexes_of_stamp_on_image(self, pixel, stamp_dim):\n+    \n+    \n+    def prepare_swarp_inputlists_for_layer(self, inputdata, all_stamps_for_layer, layer, layerdir):\n         \"\"\"\n-        Get the indexes of the image on which the stamp should be added\n-\n-        Parameters:\n-        pixel a set of (x,y) values in single image reference frame\n-        stamp_dim ndarray of stamp.shape\n+        Prepare the lists to be used for LoopSwarp, pointing to bgsubdir\n+        for on demand psf-image simulation\n         \"\"\"\n-        #psf is centered in the central pixel of the stamp\n-        #which is coordinate (stampsize - 1)/2.0\n-        #\n-        #the center of a pixel are coordinates 1,1 in image space,\n-        #and 0.5,0.5 in pixel space\n+        imagelist = list(inputdata.keys())\n+        \n+        def write_list(_path, _data):\n+            self.writeLog(\"prepare_swarp_inputlists_for_layer \" +_path)\n+            f = open(_path, \"w+\")\n+            f.writelines(_data)\n+            f.close()\n         #\n-        #We must distinguish between image pixel coordinate space, where the center of the first\n-        #pixel has coordinate 0.5, 0.5\n-        #and grid pixel space, where the first pixel is 0,0\n-\n-        #Center of the stamp falls into image pixel\n-        ix = int(pixel[0] +0.5)\n-        iy = int(pixel[1] +0.5)\n-\n-        #this is also the coordinate of the pixel after projection\n-        #so the necessary shift is\n-        shiftx = pixel[0] - ix\n-        shifty = pixel[1] - iy\n-\n-        #should the stamp have an even number of pixels,\n-        #the center is betwen pixels and it does not fall\n-        #into the center pixel of the image, but also between pixels\n-        #in this case, it must be shifted by another 0.5 pixel\n-        if (stamp_dim[0] & 1) == 0:\n-            shiftx+=0.5\n-        if (stamp_dim[1] & 1) == 0:\n-            shifty+=0.5\n-\n-        #first pixel for the stamp addition is\n-        startx = ix - stamp_dim[1]//2\n-        starty = iy - stamp_dim[0]//2\n-\n-        endx = startx + stamp_dim[1] #end coordinate is exclusive\n-        endy = starty + stamp_dim[0]\n-\n-        #return in col/row notation to avoid numpy chaos\n-        return [startx, starty], [endx, endy], [shiftx, shifty]\n-    #\n-\n-    def get_swarp_lists(self, layerdir):\n-        \"\"\"\n-        gets the input lists for swarp that are relevant for the current layer,\n-        stores them in the dictionary swarp_list ands returns it.\n-        \"\"\"\n-        #psflist: this is the list of the psfstamps\n-        psflist = [layerdir + os.sep + x for x in os.listdir(\n-            layerdir) if '_psfstamps' in x]\n-        names = [x.rsplit(os.sep, 1)[-1].split('_psfstamps')[0] for x in psflist]\n-\n-        #single_epoch_list_for_layer: the list of the real single epoch images\n-        #from the data directory\n-        #must be perfectly matched to the psflist\n-        single_epoch_srcpath = list(self.inputdata.keys())[0].rsplit(os.sep, 1)[0]\n-        single_epoch_list_for_layer = [self.exists(single_epoch_srcpath +os.sep +x +\".fits\") for x in names]\n+        img_list = list()\n+        wgt_list = list()\n+        fsc_list = list()\n+        wgt_hdu = FitsServices.get_weight_hdu(imagelist[0])\n+        wgt_hdu_str = \"[\" +str(wgt_hdu) +\"]\"\n+                \n+        for seimage in imagelist:\n+            if seimage not in all_stamps_for_layer:\n+                continue\n+            img_list.append(seimage +\"\\n\")\n+            wgt_list.append(seimage +wgt_hdu_str +\"\\n\")\n \n-        flux_scales    = self.write_flux_scales_list(layerdir, single_epoch_list_for_layer)\n-        imlist, wtlist = self.write_swarp_lists(psflist, 'psfSwarpList')\n-        swarp_lists    = {'images'       : imlist,\n-                          'weights'      : wtlist,\n-                          'flux_scales'  : flux_scales}\n-        return swarp_lists, single_epoch_list_for_layer, psflist\n+            zp = float(inputdata[seimage][\"zp\"])\n+            #fluxscale for swarp: sets the coadd to default_zp\n+            #-> adapt that to coadd_zp?\n+            fsc_list.append( str( pow(10, ((self._args.coadd_zp - zp) / 2.5))) +\"\\n\" )       \n+        #\n+        \n+        #write them\n+        iname = self.auxdir + os.sep + 'psfSwarpList' + '_img.list'\n+        write_list(iname, img_list)\n+        \n+        wname = self.auxdir + os.sep + 'psfSwarpList' + '_wht.list'\n+        write_list(wname, wgt_list)\n+        \n+        fscaleList = \"%s/%s_%s_fluxscale.list\" % (\n+            layerdir, self.tilename, self.band)\n+        write_list(fscaleList, fsc_list)\n+        \n+        return {'images': iname,'weights': wname,'flux_scales': fscaleList}\n     #\n \n \n-    def swarp_call(self, coadd_header, band, swarp_lists, bg_sub):\n+    def swarp_call(self, coadd_header, band, swarp_lists):\n         \"\"\"\n         Define and return the swarp call\n         \"\"\"\n@@ -2012,7 +2048,7 @@ class StackPSF(Pipeline):\n             \"-CENTER_TYPE\",      \"MANUAL \",\n             \"-CENTER\",           \"%s,%s \" % (coadd_header[\"CRVAL1\"], coadd_header[\"CRVAL2\"]),\n             \"-IMAGE_SIZE\",       \"%s,%s \" % (coadd_header[\"NAXIS1\"], coadd_header[\"NAXIS2\"]),\n-            \"-SUBTRACT_BACK\",    \"%s\" % bg_sub,\n+            \"-SUBTRACT_BACK\",    \"%s\" % 'N',\n             \"-BLANK_BADPIXELS\",  \"N \",\n             \"-COPY_KEYWORDS\",    \"PSF_FWHM,PSF_BETA,FWHMHOMO \",\n             \"-DELETE_TMPFILES\",  \"Y\",\n@@ -2108,68 +2144,8 @@ class StackPSF(Pipeline):\n         if os.path.isdir(layerdir):\n             shutil.rmtree(layerdir)\n         os.makedirs(layerdir)\n-\n-    def write_flux_scales_list(self, outdir, single_epoch_list_for_layer):\n-        \"\"\"\n-        Compute the scale corrections to be applied by swarp.\n-        Returns the filename containing the list of corrections.\n-        \"\"\"\n-        fscaleList = \"%s/%s_%s_fluxscale.list\" % (\n-            outdir, self.tilename, self.band)\n-        f = open(fscaleList, \"w+\")\n-        for sename in single_epoch_list_for_layer:\n-            zp = self.inputdata[sename.split(\" \")[0]][\"zp\"]\n-            #fluxscale for swarp: sets the coadd to default_zp\n-            #-> adapt that to coadd_zp?\n-            fluxscale = pow(10, ((self._args.coadd_zp - zp) / 2.5))\n-            f.write(\"%s\\n\" % fluxscale)\n-        f.close()\n-        return fscaleList\n-\n-    def write_swarp_lists(self, inlist, label):\n-        \"\"\"\n-        Defines two files containing the lists of images and weights\n-        for swarp. Returns the file names.\n-        \"\"\"\n-        iname = self.auxdir + os.sep + label + '_img.list'\n-        wname = self.auxdir + os.sep + label + '_wht.list'\n-        f = open(iname, 'w+')\n-        g = open(wname, 'w+')\n-        for sename in inlist:\n-            f.write(\"%s[0]\\n\" % sename)\n-            g.write(\"%s[2]\\n\" % sename)\n-        f.close()\n-        g.close()\n-        return iname, wname\n-\n-    def run_swarp(self, workdir, swarp_lists, bg_sub = 'N'):\n-        \"\"\"\n-        defines the swarp call and executes the program\n-\n-        returns the path to the output image\n-        \"\"\"\n-        pwd = os.getcwd()\n-        os.chdir(workdir)\n-\n-        swarp_args  = self.swarp_call(self.coadd_wcs.get_header(), self.band, swarp_lists, bg_sub)\n-        \n-        self.writeLog(\"Running Swarp:\")\n-        self.writeLog(\"CT_SWarp \" + \" \".join(swarp_args))\n-        #self.execute(\"CT_SWarp\", swarp_args, wait = True)\n-        \n-        ls = LoopSwarp.LoopSwarp(self, self._args.loopswarp_chunks, keep_shallow_coadds = False)\n-        ls.image(swarp_args)\n-    \n-\n-        #self.writeLog(\"%s/bin/swarp %s\" % (\n-        #    os.environ['EUCLID_PREREQ'], \" \".join(swarp_args)))\n-        #self.execute(\"%s/bin/swarp\" % os.environ['EUCLID_PREREQ'],\n-        #             swarp_args, wait = True)\n-        os.chdir(pwd)\n-        image_out = (workdir + os.sep +swarp_args[swarp_args.index(\"-IMAGEOUT_NAME\") +1]).split()[0]\n-        weight_out = (workdir + os.sep +swarp_args[swarp_args.index(\"-WEIGHTOUT_NAME\") +1]).split()[0]\n-        return image_out, weight_out\n     #\n+    \n \n     def getCoaddMetadata(self, coaddname):\n         \"\"\"\n",
                            "loopswarp with input file generation on demand",
                            "Michael",
                            "2023-07-15T22:35:56.000+02:00",
                            "9d73cee49a5e1faa2f94e94e1605cbe516ecb7cc"
                        ],
                        [
                            "@@ -60,6 +60,7 @@ from EXT_PF1_GEN_P2.psf.ObjectList import ObjectList\n from EXT_PF1_GEN_P2.psf.Filter import FilterTypes, PsfStampFilter\n from EXT_PF1_GEN_P2.psf.OutputStackedPSF import OutputStackedPSF\n from EXT_PF1_GEN_P2.psf import TotalSizeOf\n+from EXT_PF1_GEN_P2.Pipeline import LoopSwarp\n \n __author__='Thomas Vassallo'\n __email__ ='thomas.vassallo@physik.lmu.de'\n@@ -2154,7 +2155,11 @@ class StackPSF(Pipeline):\n         \n         self.writeLog(\"Running Swarp:\")\n         self.writeLog(\"CT_SWarp \" + \" \".join(swarp_args))\n-        self.execute(\"CT_SWarp\", swarp_args, wait = True)\n+        #self.execute(\"CT_SWarp\", swarp_args, wait = True)\n+        \n+        ls = LoopSwarp.LoopSwarp(self, self._args.loopswarp_chunks, keep_shallow_coadds = False)\n+        ls.image(swarp_args)\n+    \n \n         #self.writeLog(\"%s/bin/swarp %s\" % (\n         #    os.environ['EUCLID_PREREQ'], \" \".join(swarp_args)))\n@@ -2305,6 +2310,9 @@ if __name__ == \"__main__\":\n                            help = 'The effective wavelength of the coadd. Default = 0.0')\n     argparser.add_argument(\"--swarp_resampling\", type = str, default = \"LANCZOS3\",\n                            help = 'One of swarps possible resampling types. Default = LANCZOS3')\n+    argparser.add_argument(\"--loopswarp_chunks\", type = int, default = 1000000,\n+                           help = \"It defines the chunks of the inputdata. \\\n+                           Default = 1000000 (don't use LoopSwarp\")\n     argparser.add_argument(\"--debug\", type = bool, default = False,\n                            help = 'debug mode. Default = False.')\n \n",
                            "add option to swarp coadds in chunks and then combine to full product",
                            "Michael",
                            "2023-07-10T12:15:03.000+02:00",
                            "7b8b6a1cddb18e2a9c64452eaaba612cfdbbccea"
                        ]
                    ],
                    "EXT_PF1_GEN_P2/tests/python/TestLoopSwarp_test.py": [
                        [
                            "@@ -70,7 +70,7 @@ class TestLoopSwarp(unittest.TestCase):\n         self.assertTrue(\"2\" in l[1])\n         self.assertTrue(\"3\" in l[2])\n         os.remove(lname)\n-    def test_read_list(self):\n+    def local_test_read_list(self):\n         lname = \"/data/euclid/u/drwstein/sim_archive/sim_workdir/WISHES/RDC1_WISHES_z_TEST2.0/analysis/PPO_WIDE_RDC1_WISHES_z_TEST2.0_SDC-DE_TEST_HSC_TILE_101135280_0/rd/aux/nhcoadd_HSC_z/101135280_HSC_z_image.list\"\n         l = self.ls.read_list(lname)\n         \n",
                            "adressed empty lines at the end of the stackpsf info table",
                            "Michael",
                            "2023-07-28T11:09:16.000+02:00",
                            "3b271f9e572a62c8da3eb7e3587db28bcc02653a"
                        ],
                        [
                            "@@ -0,0 +1,131 @@\n+import unittest\n+import os\n+import numpy as np\n+from astropy.io import fits\n+from EXT_PF1_GEN_P2.Pipeline import LoopSwarp\n+\n+class TestLoopSwarp(unittest.TestCase):\n+    def setUp(self):\n+        tilename = \"12345678\"\n+        band = \"band_z\"\n+        xmlfile = tilename +'_' +band +'_swarp.xml'\n+        imageout_name = tilename +'_' +band +'.image.fits'\n+        weightout_name = tilename +'_' +band +'.weight.fits'\n+        tileinfo = [\"tilemname\", \"c1\", \"c2\", \"w1\", \"w2\", \"pixelsize\"]\n+                \n+        class Executor():\n+            def __init__(self):\n+                self.commands = []\n+            #\n+            def execute(self, _exec, command, wait):\n+                self.commands.append(command)\n+            #\n+            def get_cmds(self):\n+                return self.commands\n+            #\n+        #\n+        self.e = Executor()\n+        self.ls = LoopSwarp.LoopSwarp(self.e, 3)\n+        self.ls.combine_and_write = False\n+        \n+        self.ls.write_list([\"1.fits\\n\",\"2.fits\\n\",\"3.fits\\n\", \"4.fits\\n\",\"5.fits\\n\",\"6.fits\\n\", \"7.fits\\n\"], \"images.list\")\n+        self.ls.write_list([\"1w.fits\\n\",\"2w.fits\\n\",\"3w.fits\\n\", \"4w.fits\\n\",\"5w.fits\\n\",\"6w.fits\\n\", \"7w.fits\\n\"], \"weights.list\")\n+        self.ls.write_list([\"1\\n\",\"2\\n\",\"3\\n\", \"4\\n\",\"5\\n\",\"6\\n\", \"7\\n\"], \"fscales.list\")\n+        \n+        \n+        nh_list = [\"images.list\", \"weights.list\", 'c', \"fscales.list\"]\n+        args0 = ['-c',  \"swarp_default\", '-PIXELSCALE_TYPE', 'MANUAL', '-PIXEL_SCALE', tileinfo[3] +\",\" +tileinfo[3]]\n+        args1 = ['-CENTER_TYPE', 'MANUAL', '-CENTER', tileinfo[1] +',' +tileinfo[2], '-IMAGE_SIZE', tileinfo[4] +',' +tileinfo[5]]\n+        args2 = ['-SUBTRACT_BACK', 'N', '-BLANK_BADPIXELS', 'Y', '-COPY_KEYWORDS', 'PSF_FWHM,PSF_BETA,FWHMHOMO', '-DELETE_TMPFILES','Y']\n+        args3 = ['-FSCALASTRO_TYPE', 'VARIABLE', '-FSCALE_DEFAULT', '@'+ nh_list[3], '-FSCALE_KEYWORD', 'nokey', '-RESAMPLE', 'Y', '-COMBINE', 'Y', '-WEIGHT_TYPE', 'MAP_WEIGHT']\n+        args4 = ['-WEIGHT_IMAGE', '@'+ nh_list[1], '-HEADER_ONLY', 'N', '-NTHREADS',  str(  3 )]\n+        args5 = ['@'+ nh_list[0], '-COMBINE_TYPE', \"WEIGHTED_MEAN\", '-WRITE_XML', 'Y', '-XML_NAME', xmlfile, '-TILE_COMPRESS', 'N']\n+        args6 = ['-IMAGEOUT_NAME', imageout_name, '-WEIGHTOUT_NAME', weightout_name, '-RESAMPLE_DIR',os.getcwd()]\n+        args7 = ['-RESAMPLING_TYPE', 'LANCZOS3'] #default\n+        self.coadd_nonhomog_args = args0+args1+args2+args3+args4+args5+args6 +args7\n+    \n+    def tearDown(self):\n+        if os.path.exists(\"images.list\"):\n+            os.remove(\"images.list\")\n+        if os.path.exists(\"weights.list\"):\n+            os.remove(\"weights.list\")\n+        if os.path.exists(\"fscales.list\"):\n+            os.remove(\"fscales.list\")\n+        #    \n+    def test_get_input_lists(self):\n+        l1, l2, l3 = self.ls.get_input_lists(self.coadd_nonhomog_args)\n+        print(l1, l2, l3)\n+        \n+        self.assertTrue(l1 == \"images.list\")\n+        self.assertTrue(l2 == \"weights.list\")\n+        self.assertTrue(l3 == \"fscales.list\")\n+    def test_write_list(self):\n+        lname = \"./list.list\"\n+        self.ls.write_list([\"1\\n\",\"2\\n\",\"3\\n\"], lname)\n+        l = self.ls.read_list(lname)\n+\n+        self.assertTrue(os.path.exists(lname))\n+        self.assertTrue(len(l) == 3)\n+        self.assertTrue(\"1\" in l[0])\n+        self.assertTrue(\"2\" in l[1])\n+        self.assertTrue(\"3\" in l[2])\n+        os.remove(lname)\n+    def test_read_list(self):\n+        lname = \"/data/euclid/u/drwstein/sim_archive/sim_workdir/WISHES/RDC1_WISHES_z_TEST2.0/analysis/PPO_WIDE_RDC1_WISHES_z_TEST2.0_SDC-DE_TEST_HSC_TILE_101135280_0/rd/aux/nhcoadd_HSC_z/101135280_HSC_z_image.list\"\n+        l = self.ls.read_list(lname)\n+        \n+        print(\"list \", l[0:2])\n+\n+    def test_replace_in_command(self):\n+        self.ls.replace_in_command(self.coadd_nonhomog_args, \"@images.list\", \"@aaaa\")\n+        self.ls.replace_in_command(self.coadd_nonhomog_args, \"-WEIGHTOUT_NAME\", \"weightfiles\", 1)\n+        \n+        self.assertTrue(\"@aaaa\" in self.coadd_nonhomog_args)\n+        self.assertTrue(\"weightfiles\" in self.coadd_nonhomog_args)\n+    def test_image(self):\n+        self.ls.image(self.coadd_nonhomog_args)\n+        cmds = self.e.get_cmds() \n+        counter = 0\n+        for cmd in cmds:\n+            #print(cmd)\n+            images = \"@\"+\"images_\" +str(counter) +\".list\"\n+            weights = \"@\"+\"weights_\" +str(counter) +\".list\"\n+            fscales = \"@\"+\"fscales_\" +str(counter) +\".list\"\n+            \n+            self.assertTrue(images in cmd)\n+            self.assertTrue(weights in cmd)\n+            self.assertTrue(fscales in cmd)\n+            \n+            os.remove(images[1:])\n+            os.remove(weights[1:])\n+            os.remove(fscales[1:])\n+            counter = counter +1\n+        #\n+    def test_write_fits_file(self):\n+        _data = np.ones((2,2))\n+        _filename = \"./testcoadd.fits\"\n+        self.ls.write_fits_file(_filename, _data, fits.Header())\n+        \n+        self.assertTrue(os.path.exists(_filename))\n+        os.remove(_filename)\n+    def test_delete_shallow_coadds(self):\n+        shallow_coadds = [(\"./testcoadd.fits\", \"./testweight.fits\"), (\"./testcoadd1.fits\", 0)]\n+        \n+        f = open(shallow_coadds[0][0], 'w')\n+        f.write(\"a\")\n+        f.close()\n+        \n+        f = open(shallow_coadds[0][1], 'w')\n+        f.write(\"a\")\n+        f.close()\n+        \n+        f = open(shallow_coadds[1][0], 'w')\n+        f.write(\"a\")\n+        f.close()\n+        \n+        self.ls.delete_shallow_coadds(shallow_coadds)\n+        self.assertFalse(os.path.exists(shallow_coadds[0][0]))\n+        self.assertFalse(os.path.exists(shallow_coadds[0][1]))\n+        self.assertFalse(os.path.exists(shallow_coadds[1][0]))\n+         \n+    #\n\\ No newline at end of file\n",
                            "add option to swarp coadds in chunks and then combine to full product",
                            "Michael",
                            "2023-07-10T12:15:03.000+02:00",
                            "7b8b6a1cddb18e2a9c64452eaaba612cfdbbccea"
                        ]
                    ],
                    "EXT_PF1_GEN_P2/python/EXT_PF1_GEN_P2/pybin/IAL_Pipeline_Assembler_coadd_stage2.py": [
                        [
                            "@@ -135,8 +135,11 @@ class IPA_coadd_stage2(IAL_Pipeline_Assembler_coadd.IPA_coadd):\n             logging.debug(\"copy %s to %s.\", fitsfile, target_filename)\n             fitsfile = shutil.copyfile(fitsfile, target_filename, follow_symlinks=True) #dereference links\n             print(\"copy_from_xml_to_header \", fitsfile)\n-            os.chmod(fitsfile, stat.S_IWUSR | stat.S_IRUSR | stat.S_IWGRP | stat.S_IRGRP)\n-            \n+            try:\n+                os.chmod(fitsfile, stat.S_IWUSR | stat.S_IRUSR | stat.S_IWGRP | stat.S_IRGRP)\n+            except:\n+                #try but don't insist\n+                pass\n             #and funpack, if necessary\n             print(\"FitsServices.get_comptype(fitsfile).lower() \", FitsServices.get_comptype(fitsfile))\n             comptype = FitsServices.get_comptype(fitsfile)\n",
                            "make permission change of files optional",
                            "Michael",
                            "2023-07-24T16:45:11.000+02:00",
                            "3a1d09ee73250a906c0ecdf688e8147e30f7a808"
                        ],
                        [
                            "@@ -374,7 +374,6 @@ class IPA_coadd_stage2(IAL_Pipeline_Assembler_coadd.IPA_coadd):\n         confpath = workdir + os.sep +\"data\" +os.sep\n         properties = [confpath +f for f in os.listdir(confpath) if f.startswith(\"coadd_template\") and f.endswith(\".properties\")]\n \n-\n         #2nd way:\n         #find the stage2 conf folder\n         #and in it the conf file\n@@ -967,7 +966,7 @@ class IPA_coadd_stage2(IAL_Pipeline_Assembler_coadd.IPA_coadd):\n \n             if band in pipeline_outputs['psfs']:\n                 dce = ExtStackedFrameTExporter(fitsfile)\n-                new_fitsname, new_psf_fitsname = dce.set_all_values(pipeline_outputs['se_image'][band], pipeline_outputs['psfs'][band], tileindex, run)\n+                new_fitsname, new_psf_fitsname = dce.set_all_values(pipeline_outputs['se_image'][band], pipeline_outputs['psfs'][band], run, tileindex)\n \n                 path = fitsfile.rsplit(os.sep, 1)[0]\n                 xml_file = path +os.sep +dce.product_type +\"_\" +band +'.xml'\n@@ -981,7 +980,7 @@ class IPA_coadd_stage2(IAL_Pipeline_Assembler_coadd.IPA_coadd):\n             #catalogs\n             if band in pipeline_outputs['coadd_catalogs']:\n                 dcce = ExtCoaddSourceCatalogTExporter(pipeline_outputs['coadd_catalogs'][band])\n-                new_cat_fitsname = dcce.set_all_values(pipeline_outputs['se_image'][band], new_fitsname, run)\n+                new_cat_fitsname = dcce.set_all_values(pipeline_outputs['se_image'][band], new_fitsname, run, tileindex)\n \n                 path = pipeline_outputs['coadd_catalogs'][band].rsplit(os.sep, 1)[0]\n                 xml_file = path +os.sep +dcce.product_type +\"_\" +band +'.xml'\n",
                            "added tileindex to coadd catalog",
                            "Michael",
                            "2023-07-24T12:19:26.000+02:00",
                            "b12f13c4bd0934369bb99d6e6093b8e69c2ffbdc"
                        ],
                        [
                            "@@ -44,6 +44,9 @@ from EXT_PF1_GEN_P2_LIBS.file import CatalogDuplicates\n \n from EXT_WCS_TOOLS import Sip_2_tpv\n \n+import warnings\n+from astropy.utils.exceptions import AstropyWarning\n+from astropy.wcs import FITSFixedWarning\n \n \n class IPA_coadd_stage2(IAL_Pipeline_Assembler_coadd.IPA_coadd):\n@@ -67,6 +70,9 @@ class IPA_coadd_stage2(IAL_Pipeline_Assembler_coadd.IPA_coadd):\n         self.mer_star_cat_type = (\"DpdMerTrueUniverseStarCatalog\")\n         self.mer_galaxy_cat_type = (\"DpdMerTrueUniverseGalaxyCatalog\")\n \n+        #suppress astropy warnings\n+        warnings.simplefilter('ignore', category=AstropyWarning)\n+        warnings.simplefilter('ignore', category=FITSFixedWarning)\n     #\n \n \n",
                            "loopswarp with input file generation on demand",
                            "Michael",
                            "2023-07-15T22:35:56.000+02:00",
                            "9d73cee49a5e1faa2f94e94e1605cbe516ecb7cc"
                        ],
                        [
                            "@@ -516,7 +516,7 @@ class IPA_coadd_stage2(IAL_Pipeline_Assembler_coadd.IPA_coadd):\n         coadd_files, input_dir = super(IPA_coadd_stage2, self).prepare_coadd_input_files(workdir, pixelscale, check_available_fits_files)\n         logging.info(\"se_frames_prepare_coadd_input_files\")\n         #change the pipeline script\n-        coadd_files[\"scriptname\"] = \"rdisk_coadd_stage2_pipeline.pscript\"\n+        #coadd_files[\"scriptname\"] = \"rdisk_coadd_stage2_pipeline.pscript\"\n \n         #add the mer position catalogs\n         catalog_filename = workdir +os.sep +\"data\" +os.sep +\"merged_mer_catalog.fits\"\n",
                            "add option to swarp coadds in chunks and then combine to full product",
                            "Michael",
                            "2023-07-10T12:15:03.000+02:00",
                            "7b8b6a1cddb18e2a9c64452eaaba612cfdbbccea"
                        ]
                    ],
                    "EXT_PF1_GEN_P2/conf/EXT_PF1_GEN_P2/coadd_template_HSC_DeepFields.properties_GVKannotated": [
                        [
                            "@@ -1,87 +0,0 @@\n-_badpixels = ${badpixels} @Michael: ensure it is conform ICD (see https://euclid.roe.ac.uk/issues/23004#note-9 for pointer to that.) \n-_combinetype = ${combinetype}\n-_extraweightmap = ${extraweightmap}\n-_keepnorm = ${keepnorm}\n-_project = ${project}\n-_zeropoint = \n-allocated_memory = ${max_memory}\n-archive_node = ${target_node}\n-archive_root = /home/user/host/euclid-ial/workspace/coadd/data\n-args = --ramdisk ${ramdisk} --xml ${xml_props} --scriptname ${scriptname} --pipeline_class ${pipeline_class} --binpath ${euclid_home}/bin ${fscaleastrovar} --verbose ${verbose}\n-badpixels = -usebadpixels\n-band = all\n-Bandpass_HSC_g = 4730.214843845347 @Michael: add missing filters: see row \"filters\" in Table 10.8 at https://docs.google.com/document/d/1SO9ujkAOv8yqH9XRQDQ3rY7dlLYalsNgD4epgGw9EkM/edit#bookmark=id.dhn6r9otwong\n-Bandpass_HSC_r = 6226.0\n-Bandpass_HSC_i = 7767.0\n-Bandpass_HSC_z = 8908.526460077348\n-Bandpass_HSC_y = 10051.0 \n-binpath = ${euclid_home}/bin\n-block = rdisk_coadd_decam\n-ccd_end = 63\n-ccd_start = 1\n-coaddheadfile = ${euclid_home}/conf/etc/desremap.head\n-coaddswarp = ${archive_root}/20160908112655_PYD345.000200+0.000140/aux/coaddswarp_0001.list\n-coadd_zeropoint = 30.0\n-combinetype = WEIGHTED\n-debug = 1\n-detect_bands = HSC_g, HSC_z\n-dummy = ${detect_bands}\n-euclid_conf = ${euclid_home}/conf\n-euclid_home = /home/user/euclid_local_home\n-euclid_prereq = /usr/local/\n-exclude_list = \n-exec = ${euclid_home}/python/pybin/PipelineExec.py\n-extraweightmap = -extraweightmap\n-fscaleastrovar = -fscaleastrovariable\n-ingestion = \n-installpaths = -etcpath ${euclid_home}/etc -binpath ${euclid_home}/bin -terapixpath ${euclid_prereq}/bin -outxmlpath ${outxmlpath}\n-installpaths_nonhomog = -etcpath ${euclid_home}/etc -binpath ${euclid_home}/bin -terapixpath ${euclid_prereq}/bin\n-job_id = 0001\n-keepnorm = 1\n-log = ${block}_${module}_${job_id}.log\n-log_dir = ${archive_root}/${run_dir}/log\n-logger = ${log_dir}/${log}\n-mask_indices = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 @Michael: see _badpixels\n-move_mask_indices_to_weight = 0, 1, 3, 4, 6, 8, 9, 12 @Michael: see _badpixels\n-move_mask_indices_to_new_indices = \n-max_memory = 62000 @Michael: side question: how do you determine the value for this variable? (gijsToSelf: see https://gitlab.euclid-sgs.uk/PF-EXT/ext_pf1_gen_p2/-/blob/gvk/StackedFrameProductionTour/EXT_PF1_GEN_P2/conf/EXT_PF1_GEN_P2/README.md)\n-mkdirs = ${outpath}\n-module = rdisk_coadd_decam\n-multiprocesses = 1 @Michael: side question: how do you determine the value for this variable? (gijsToSelf: see https://gitlab.euclid-sgs.uk/PF-EXT/ext_pf1_gen_p2/-/blob/gvk/StackedFrameProductionTour/EXT_PF1_GEN_P2/conf/EXT_PF1_GEN_P2/README.md)\n-nite = 20131228\n-outauxpath = ${archive_root}/${run_dir}/aux\n-outpath = ${archive_root}/${run_dir}/coadd\n-outpath_nonhomog = ${archive_root}/${run_dir}/nhcoadd\n-outputlist = ${archive_root}/${run_dir}/aux/coaddswarp_${job_id}.list\n-outxmlpath = ${archive_root}/${run_dir}/xml\n-pipeline_class = EXT_PF1_GEN_P2.Pipeline.RDisk_coadd_stage2.py\n-pipeline_cleanup = 1\n-project = PYD\n-pybinpath = ${euclid_home}/python/pybin\n-qa-args = -project ${project} -campaign  -nite ${nite} -qa_execution \n-ramdisk = ${archive_root}/EuclidPipeline\n-Reference_Catalog_Calibration_HSC_g = TU_FNU_G_GAIA, TU_FNU_G_GAIA_MAG\n-Reference_Catalog_Calibration_HSC_r = TU_FNU_G_GAIA, TU_FNU_G_GAIA_MAG\n-Reference_Catalog_Calibration_HSC_i = TU_FNU_G_GAIA, TU_FNU_G_GAIA_MAG\n-Reference_Catalog_Calibration_HSC_z = TU_FNU_G_GAIA, TU_FNU_G_GAIA_MAG\n-Reference_Catalog_Calibration_HSC_y = TU_FNU_G_GAIA, TU_FNU_G_GAIA_MAG\n-run_dir = rd\n-runtime_dir = ${archive_root}/${run_dir}/runtime/${block}_${job_id}\n-save_backgrounds_for_validation = 0\n-savefpacked = 0\n-scriptname = rdisk_coadd_stage2_pipeline.pscript\n-se_catalog_x = XWIN_IMAGE\n-se_catalog_y = YWIN_IMAGE\n-stackpsf_version = 2\n-subtract_delivered_background = 0\n-subtract_bg_with_swarp = 1 @Michael: background is already subtracted, therefore I guess this value must be 0? See https://euclid.roe.ac.uk/issues/23004#note-4\n-stopcondition = \n-swarp_default = ${euclid_home}/conf/etc/default.swarp\n-swarp_flag_default = ${euclid_home}/conf/etc/default_flag.swarp\n-target_node = alexandria\n-tile = ${tilename}\n-tilename = PYD345.000200+0.000140\n-verbose = 3\n-vis_position_cat = \n-wall_mod = 3000\n-xml_props = ${archive_root}/../${block}_${module}_${job_id}.properties\n",
                            "added tileindex to coadd catalog",
                            "Michael",
                            "2023-07-24T12:19:26.000+02:00",
                            "b12f13c4bd0934369bb99d6e6093b8e69c2ffbdc"
                        ],
                        [
                            "@@ -0,0 +1,87 @@\n+_badpixels = ${badpixels} @Michael: ensure it is conform ICD (see https://euclid.roe.ac.uk/issues/23004#note-9 for pointer to that.) \n+_combinetype = ${combinetype}\n+_extraweightmap = ${extraweightmap}\n+_keepnorm = ${keepnorm}\n+_project = ${project}\n+_zeropoint = \n+allocated_memory = ${max_memory}\n+archive_node = ${target_node}\n+archive_root = /home/user/host/euclid-ial/workspace/coadd/data\n+args = --ramdisk ${ramdisk} --xml ${xml_props} --scriptname ${scriptname} --pipeline_class ${pipeline_class} --binpath ${euclid_home}/bin ${fscaleastrovar} --verbose ${verbose}\n+badpixels = -usebadpixels\n+band = all\n+Bandpass_HSC_g = 4730.214843845347 @Michael: add missing filters: see row \"filters\" in Table 10.8 at https://docs.google.com/document/d/1SO9ujkAOv8yqH9XRQDQ3rY7dlLYalsNgD4epgGw9EkM/edit#bookmark=id.dhn6r9otwong\n+Bandpass_HSC_r = 6226.0\n+Bandpass_HSC_i = 7767.0\n+Bandpass_HSC_z = 8908.526460077348\n+Bandpass_HSC_y = 10051.0 \n+binpath = ${euclid_home}/bin\n+block = rdisk_coadd_decam\n+ccd_end = 63\n+ccd_start = 1\n+coaddheadfile = ${euclid_home}/conf/etc/desremap.head\n+coaddswarp = ${archive_root}/20160908112655_PYD345.000200+0.000140/aux/coaddswarp_0001.list\n+coadd_zeropoint = 30.0\n+combinetype = WEIGHTED\n+debug = 1\n+detect_bands = HSC_g, HSC_z\n+dummy = ${detect_bands}\n+euclid_conf = ${euclid_home}/conf\n+euclid_home = /home/user/euclid_local_home\n+euclid_prereq = /usr/local/\n+exclude_list = \n+exec = ${euclid_home}/python/pybin/PipelineExec.py\n+extraweightmap = -extraweightmap\n+fscaleastrovar = -fscaleastrovariable\n+ingestion = \n+installpaths = -etcpath ${euclid_home}/etc -binpath ${euclid_home}/bin -terapixpath ${euclid_prereq}/bin -outxmlpath ${outxmlpath}\n+installpaths_nonhomog = -etcpath ${euclid_home}/etc -binpath ${euclid_home}/bin -terapixpath ${euclid_prereq}/bin\n+job_id = 0001\n+keepnorm = 1\n+log = ${block}_${module}_${job_id}.log\n+log_dir = ${archive_root}/${run_dir}/log\n+logger = ${log_dir}/${log}\n+mask_indices = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 @Michael: see _badpixels\n+move_mask_indices_to_weight = 0, 1, 3, 4, 6, 8, 9, 12 @Michael: see _badpixels\n+move_mask_indices_to_new_indices = \n+max_memory = 62000 @Michael: side question: how do you determine the value for this variable? (gijsToSelf: see https://gitlab.euclid-sgs.uk/PF-EXT/ext_pf1_gen_p2/-/blob/gvk/StackedFrameProductionTour/EXT_PF1_GEN_P2/conf/EXT_PF1_GEN_P2/README.md)\n+mkdirs = ${outpath}\n+module = rdisk_coadd_decam\n+multiprocesses = 1 @Michael: side question: how do you determine the value for this variable? (gijsToSelf: see https://gitlab.euclid-sgs.uk/PF-EXT/ext_pf1_gen_p2/-/blob/gvk/StackedFrameProductionTour/EXT_PF1_GEN_P2/conf/EXT_PF1_GEN_P2/README.md)\n+nite = 20131228\n+outauxpath = ${archive_root}/${run_dir}/aux\n+outpath = ${archive_root}/${run_dir}/coadd\n+outpath_nonhomog = ${archive_root}/${run_dir}/nhcoadd\n+outputlist = ${archive_root}/${run_dir}/aux/coaddswarp_${job_id}.list\n+outxmlpath = ${archive_root}/${run_dir}/xml\n+pipeline_class = EXT_PF1_GEN_P2.Pipeline.RDisk_coadd_stage2.py\n+pipeline_cleanup = 1\n+project = PYD\n+pybinpath = ${euclid_home}/python/pybin\n+qa-args = -project ${project} -campaign  -nite ${nite} -qa_execution \n+ramdisk = ${archive_root}/EuclidPipeline\n+Reference_Catalog_Calibration_HSC_g = TU_FNU_G_GAIA, TU_FNU_G_GAIA_MAG\n+Reference_Catalog_Calibration_HSC_r = TU_FNU_G_GAIA, TU_FNU_G_GAIA_MAG\n+Reference_Catalog_Calibration_HSC_i = TU_FNU_G_GAIA, TU_FNU_G_GAIA_MAG\n+Reference_Catalog_Calibration_HSC_z = TU_FNU_G_GAIA, TU_FNU_G_GAIA_MAG\n+Reference_Catalog_Calibration_HSC_y = TU_FNU_G_GAIA, TU_FNU_G_GAIA_MAG\n+run_dir = rd\n+runtime_dir = ${archive_root}/${run_dir}/runtime/${block}_${job_id}\n+save_backgrounds_for_validation = 0\n+savefpacked = 0\n+scriptname = rdisk_coadd_stage2_pipeline.pscript\n+se_catalog_x = XWIN_IMAGE\n+se_catalog_y = YWIN_IMAGE\n+stackpsf_version = 2\n+subtract_delivered_background = 0\n+subtract_bg_with_swarp = 1 @Michael: background is already subtracted, therefore I guess this value must be 0? See https://euclid.roe.ac.uk/issues/23004#note-4\n+stopcondition = \n+swarp_default = ${euclid_home}/conf/etc/default.swarp\n+swarp_flag_default = ${euclid_home}/conf/etc/default_flag.swarp\n+target_node = alexandria\n+tile = ${tilename}\n+tilename = PYD345.000200+0.000140\n+verbose = 3\n+vis_position_cat = \n+wall_mod = 3000\n+xml_props = ${archive_root}/../${block}_${module}_${job_id}.properties\n",
                            "Merge branch 'gvk/StackedFrameProductionTour' into 'develop'",
                            "Michael",
                            "2023-07-24T08:32:50.000+00:00",
                            "ffc3e22ed960659b8ca450eae6dc0962b2a5e17b"
                        ],
                        [
                            "@@ -0,0 +1,87 @@\n+_badpixels = ${badpixels} @Michael: ensure it is conform ICD (see https://euclid.roe.ac.uk/issues/23004#note-9 for pointer to that.) \n+_combinetype = ${combinetype}\n+_extraweightmap = ${extraweightmap}\n+_keepnorm = ${keepnorm}\n+_project = ${project}\n+_zeropoint = \n+allocated_memory = ${max_memory}\n+archive_node = ${target_node}\n+archive_root = /home/user/host/euclid-ial/workspace/coadd/data\n+args = --ramdisk ${ramdisk} --xml ${xml_props} --scriptname ${scriptname} --pipeline_class ${pipeline_class} --binpath ${euclid_home}/bin ${fscaleastrovar} --verbose ${verbose}\n+badpixels = -usebadpixels\n+band = all\n+Bandpass_HSC_g = 4730.214843845347 @Michael: add missing filters: see row \"filters\" in Table 10.8 at https://docs.google.com/document/d/1SO9ujkAOv8yqH9XRQDQ3rY7dlLYalsNgD4epgGw9EkM/edit#bookmark=id.dhn6r9otwong\n+Bandpass_HSC_r = 6226.0\n+Bandpass_HSC_i = 7767.0\n+Bandpass_HSC_z = 8908.526460077348\n+Bandpass_HSC_y = 10051.0 \n+binpath = ${euclid_home}/bin\n+block = rdisk_coadd_decam\n+ccd_end = 63\n+ccd_start = 1\n+coaddheadfile = ${euclid_home}/conf/etc/desremap.head\n+coaddswarp = ${archive_root}/20160908112655_PYD345.000200+0.000140/aux/coaddswarp_0001.list\n+coadd_zeropoint = 30.0\n+combinetype = WEIGHTED\n+debug = 1\n+detect_bands = HSC_g, HSC_z\n+dummy = ${detect_bands}\n+euclid_conf = ${euclid_home}/conf\n+euclid_home = /home/user/euclid_local_home\n+euclid_prereq = /usr/local/\n+exclude_list = \n+exec = ${euclid_home}/python/pybin/PipelineExec.py\n+extraweightmap = -extraweightmap\n+fscaleastrovar = -fscaleastrovariable\n+ingestion = \n+installpaths = -etcpath ${euclid_home}/etc -binpath ${euclid_home}/bin -terapixpath ${euclid_prereq}/bin -outxmlpath ${outxmlpath}\n+installpaths_nonhomog = -etcpath ${euclid_home}/etc -binpath ${euclid_home}/bin -terapixpath ${euclid_prereq}/bin\n+job_id = 0001\n+keepnorm = 1\n+log = ${block}_${module}_${job_id}.log\n+log_dir = ${archive_root}/${run_dir}/log\n+logger = ${log_dir}/${log}\n+mask_indices = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 @Michael: see _badpixels\n+move_mask_indices_to_weight = 0, 1, 3, 4, 6, 8, 9, 12 @Michael: see _badpixels\n+move_mask_indices_to_new_indices = \n+max_memory = 62000 @Michael: side question: how do you determine the value for this variable? (gijsToSelf: see https://gitlab.euclid-sgs.uk/PF-EXT/ext_pf1_gen_p2/-/blob/gvk/StackedFrameProductionTour/EXT_PF1_GEN_P2/conf/EXT_PF1_GEN_P2/README.md)\n+mkdirs = ${outpath}\n+module = rdisk_coadd_decam\n+multiprocesses = 1 @Michael: side question: how do you determine the value for this variable? (gijsToSelf: see https://gitlab.euclid-sgs.uk/PF-EXT/ext_pf1_gen_p2/-/blob/gvk/StackedFrameProductionTour/EXT_PF1_GEN_P2/conf/EXT_PF1_GEN_P2/README.md)\n+nite = 20131228\n+outauxpath = ${archive_root}/${run_dir}/aux\n+outpath = ${archive_root}/${run_dir}/coadd\n+outpath_nonhomog = ${archive_root}/${run_dir}/nhcoadd\n+outputlist = ${archive_root}/${run_dir}/aux/coaddswarp_${job_id}.list\n+outxmlpath = ${archive_root}/${run_dir}/xml\n+pipeline_class = EXT_PF1_GEN_P2.Pipeline.RDisk_coadd_stage2.py\n+pipeline_cleanup = 1\n+project = PYD\n+pybinpath = ${euclid_home}/python/pybin\n+qa-args = -project ${project} -campaign  -nite ${nite} -qa_execution \n+ramdisk = ${archive_root}/EuclidPipeline\n+Reference_Catalog_Calibration_HSC_g = TU_FNU_G_GAIA, TU_FNU_G_GAIA_MAG\n+Reference_Catalog_Calibration_HSC_r = TU_FNU_G_GAIA, TU_FNU_G_GAIA_MAG\n+Reference_Catalog_Calibration_HSC_i = TU_FNU_G_GAIA, TU_FNU_G_GAIA_MAG\n+Reference_Catalog_Calibration_HSC_z = TU_FNU_G_GAIA, TU_FNU_G_GAIA_MAG\n+Reference_Catalog_Calibration_HSC_y = TU_FNU_G_GAIA, TU_FNU_G_GAIA_MAG\n+run_dir = rd\n+runtime_dir = ${archive_root}/${run_dir}/runtime/${block}_${job_id}\n+save_backgrounds_for_validation = 0\n+savefpacked = 0\n+scriptname = rdisk_coadd_stage2_pipeline.pscript\n+se_catalog_x = XWIN_IMAGE\n+se_catalog_y = YWIN_IMAGE\n+stackpsf_version = 2\n+subtract_delivered_background = 0\n+subtract_bg_with_swarp = 1 @Michael: background is already subtracted, therefore I guess this value must be 0? See https://euclid.roe.ac.uk/issues/23004#note-4\n+stopcondition = \n+swarp_default = ${euclid_home}/conf/etc/default.swarp\n+swarp_flag_default = ${euclid_home}/conf/etc/default_flag.swarp\n+target_node = alexandria\n+tile = ${tilename}\n+tilename = PYD345.000200+0.000140\n+verbose = 3\n+vis_position_cat = \n+wall_mod = 3000\n+xml_props = ${archive_root}/../${block}_${module}_${job_id}.properties\n",
                            "Annotated in support of https://euclid.roe.ac.uk/issues/23009?tab=notes#note-6.",
                            "gverdoes",
                            "2023-07-17T22:54:51.000+02:00",
                            "2b226e919928a8c4e000f55383e9911a4aeb04a4"
                        ]
                    ],
                    "EXT_PF1_GEN_P2/conf/EXT_PF1_GEN_P2/README.md": [
                        [
                            "@@ -0,0 +1,210 @@\n+This file provides a human an explanation of what is inside the *.properties files in this directory first, followed below it what is inside the *.xml files. \n+\n+_badpixels = ${badpixels}  #: That's for SExtractor (something in still from the stage1 pipeline). Has no relevance for the coadd part.\n+\n+_combinetype = ${combinetype}\n+\n+_extraweightmap = ${extraweightmap}\n+\n+_keepnorm = ${keepnorm}\n+\n+_project = ${project}\n+\n+_zeropoint = \n+\n+allocated_memory = ${max_memory} EXPLAINED IN\n+\n+archive_node = ${target_node}\n+\n+archive_root = /home/user/host/euclid-ial/workspace/coadd/data\n+\n+args = --ramdisk ${ramdisk} --xml ${xml_props} --scriptname ${scriptname} --pipeline_class ${pipeline_class} --binpath ${euclid_home}/bin ${fscaleastrovar} --verbose ${verbose}\n+\n+badpixels = -usebadpixels\n+\n+band = all\n+\n+Bandpass_PANSTARRS_i = 7535.640665609784 \n+\n+binpath = ${euclid_home}/bin\n+\n+block = rdisk_coadd_decam EXPLAINED IN \n+\n+ccd_end = 63\n+\n+ccd_start = 1\n+\n+coaddheadfile = ${euclid_home}/conf/etc/desremap.head\n+\n+coaddswarp = ${archive_root}/20160908112655_PYD345.000200+0.000140/aux/coaddswarp_0001.list\n+\n+coadd_zeropoint = 30.0\n+\n+combinetype = WEIGHTED\n+\n+debug = 1\n+\n+detect_bands = PANSTARRS_i\n+\n+dummy = ${detect_bands}\n+\n+euclid_conf = ${euclid_home}/conf\n+\n+euclid_home = /home/user/euclid_local_home\n+\n+euclid_prereq = /usr/local/\n+\n+exclude_list = \n+\n+exec = ${euclid_home}/python/pybin/PipelineExec.py\n+\n+extraweightmap = -extraweightmap\n+\n+fscaleastrovar = -fscaleastrovariable\n+\n+ingestion = \n+\n+installpaths = -etcpath ${euclid_home}/etc -binpath ${euclid_home}/bin -terapixpath ${euclid_prereq}/bin -outxmlpath ${outxmlpath}\n+\n+installpaths_nonhomog = -etcpath ${euclid_home}/etc -binpath ${euclid_home}/bin -terapixpath ${euclid_prereq}/bin\n+\n+job_id = 0001\n+\n+keepnorm = 1\n+\n+log = ${block}_${module}_${job_id}.log\n+\n+log_dir = ${archive_root}/${run_dir}/log\n+\n+logger = ${log_dir}/${log}\n+\n+mask_indices =  1, 2, 4, 6, 10, 11, 12, 15\n+\n+move_mask_indices_to_weight = 0, 3, 5, 7, 8, 9, 13, 14 #These are the bit index values (so n, corresponding to integer value 2**n) of flags in the SEF Flagmap extension which if they are raised for a pixel the corresponding SEF science pixel will be masked (i.e., not be used) in the coaddition of the science pixels. This configuration is determined by the tables in https://docs.google.com/document/d/1O7HsEyINampIqL1G6Z79OQ4BJjtxoqnGX2uFleTZKJo/edit#bookmark=id.yd2ez1gfblrp  science important mask values.\n+\n+move_mask_indices_to_new_indices = \n+\n+max_memory = 62000 # This configuration parameter is not used in the StackedFrame Production Pipeline. \n+\n+mkdirs = ${outpath}\n+\n+module = rdisk_coadd_decam EXPLAINED IN \n+\n+multiprocesses = 4 #EXPLAINED in https://euclid.roe.ac.uk/projects/sgu/wiki/EXT_PF1_GEN_P2_User_Manual#Number-of-processes-used-internally. The value is set by hand. The value should not be larger than in the PackageDef. This needs to be manually checked. Unfortunately there is no way this is automatically ensured.\n+\n+nite = 20131228\n+\n+outauxpath = ${archive_root}/${run_dir}/aux\n+\n+outpath = ${archive_root}/${run_dir}/coadd\n+\n+outpath_nonhomog = ${archive_root}/${run_dir}/nhcoadd\n+\n+outputlist = ${archive_root}/${run_dir}/aux/coaddswarp_${job_id}.list\n+\n+outxmlpath = ${archive_root}/${run_dir}/xml\n+\n+pipeline_class = EXT_PF1_GEN_P2.Pipeline.RDisk_coadd_stage2.py\n+\n+pipeline_cleanup = 1\n+\n+project = PYD\n+\n+pybinpath = ${euclid_home}/python/pybin\n+\n+qa-args = -project ${project} -campaign  -nite ${nite} -qa_execution \n+\n+ramdisk = ${archive_root}/EuclidPipeline EXPLAINED IN https://euclid.roe.ac.uk/projects/sgu/wiki/EXT_PF1_GEN_P2_User_Manual#Location-of-temporal-storage\n+\n+Reference_Catalog_Calibration_PANSTARRS_i = TU_FNU_G_GAIA, TU_FNU_G_GAIA_MAG\n+\n+run_dir = rd\n+\n+runtime_dir = ${archive_root}/${run_dir}/runtime/${block}_${job_id}\n+\n+save_backgrounds_for_validation = 0\n+\n+savefpacked = 0\n+\n+scriptname = rdisk_coadd_stage2_pipeline.pscript\n+\n+se_catalog_x = XWIN_IMAGE\n+\n+se_catalog_y = YWIN_IMAGE\n+\n+stopcondition = \n+\n+stackpsf_version = 1\n+\n+subtract_delivered_background = 0\n+\n+subtract_bg_with_swarp = 1 #0=do not subtract a background. 1==subtract a background.\n+\n+swarp_default = ${euclid_home}/conf/etc/default.swarp EXPLAINED IN\n+\n+swarp_flag_default = ${euclid_home}/conf/etc/default_flag.swarp EXPLAINED IN\n+\n+target_node = alexandria EXPLAINED IN\n+\n+tile = ${tilename}\n+\n+tilename = PYD345.000200+0.000140\n+\n+verbose = 3\n+\n+vis_position_cat = \n+\n+wall_mod = 3000 EXPLAINED IN \n+\n+xml_props = ${archive_root}/../${block}_${module}_${job_id}.properties\n+\n+EXPLANATION WHAT IS INSIDE THE *XML files\n+\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<co:DpdExtConfigurationSet xmlns:sys=\"http://ecdm.euclid-ec.org/schema/sys\"\n+ xmlns:ext=\"http://ecdm.euclid-ec.org/schema/pro/ext\"\n+ xmlns:dqc=\"http://ecdm.euclid-ec.org/schema/bas/dqc\"\n+ xmlns:ppr=\"http://ecdm.euclid-ec.org/schema/bas/ppr\"\n+ xmlns:utd=\"http://ecdm.euclid-ec.org/schema/bas/utd\"\n+ xmlns:dtd=\"http://ecdm.euclid-ec.org/schema/bas/dtd\"\n+ xmlns:img=\"http://ecdm.euclid-ec.org/schema/bas/img\"\n+ xmlns:dss=\"http://ecdm.euclid-ec.org/schema/sys/dss\"\n+ xmlns:cot=\"http://ecdm.euclid-ec.org/schema/bas/cot\"\n+ xmlns:fit=\"http://ecdm.euclid-ec.org/schema/bas/fit\"\n+ xmlns:ins=\"http://ecdm.euclid-ec.org/schema/ins\"\n+ xmlns:par=\"http://ecdm.euclid-ec.org/schema/bas/ppr/par\"\n+ xmlns:stc=\"http://ecdm.euclid-ec.org/schema/bas/imp/stc\"\n+ xmlns:impfits=\"http://ecdm.euclid-ec.org/schema/bas/imp/fits\"\n+ xmlns:eso=\"http://ecdm.euclid-ec.org/schema/bas/imp/eso\"\n+ xmlns:imp=\"http://ecdm.euclid-ec.org/schema/bas/imp\"\n+ xmlns:co=\"http://ecdm.euclid-ec.org/schema/dpd/ext/configurationset\"\n+ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+ xsi:schemaLocation=\"http://ecdm.euclid-ec.org/schema/dpd/ext/configurationset file:/Users/michael/Euclid/eucgu94/Work/Projects/EDEN-3.0/release/ST_DataModel/ST_DM_Schema/auxdir/ST_DM_Schema/dpd/ext/euc-ext-ExtConfigurationSet.xsd\">\n+    <Header>\n+        <ProductId>DpdExtConfigurationSet_GPC_v1_2021-03-19T09:00:00</ProductId>\n+        <ProductType>DpdExtConfigurationSet</ProductType>\n+        <SoftwareName>EXT_PF1_GEN_P2</SoftwareName>\n+        <SoftwareRelease>0.80</SoftwareRelease>\n+        <ProdSDC>SDC-DE</ProdSDC>\n+        <DataSetRelease>DataSetRelease0</DataSetRelease>\n+        <Purpose>DATA_RELEASE</Purpose>\n+        <PlanId>PlanId0</PlanId>\n+        <PPOId>PPOId0</PPOId>\n+        <PipelineDefinitionId>PipelineDefinitionId0</PipelineDefinitionId>\n+        <PpoStatus>COMPLETED</PpoStatus>\n+        <ManualValidationStatus>VALID</ManualValidationStatus>\n+        <Curator>Curator0</Curator>\n+        <CreationDate>2021-01-16T09:00:00.0</CreationDate>\n+    </Header>\n+    <Data>\n+        <ConfigurationFile>\n+            <FileContainer filestatus=\"PROPOSED\">\n+                <FileName>coadd_template_GPC.properties</FileName>\n+            </FileContainer>\n+        </ConfigurationFile>\n+        <Survey>Panstarrs</Survey>\n+        <Pipeline>EXT_PF1_GEN_P2</Pipeline>\n+        <DataType>Real</DataType>\n+    </Data>\n+</co:DpdExtConfigurationSet>\n+\n",
                            "Merge branch 'gvk/StackedFrameProductionTour' into 'develop'",
                            "Michael",
                            "2023-07-24T08:32:50.000+00:00",
                            "ffc3e22ed960659b8ca450eae6dc0962b2a5e17b"
                        ],
                        [
                            "@@ -80,7 +80,7 @@ logger = ${log_dir}/${log}\n \n mask_indices =  1, 2, 4, 6, 10, 11, 12, 15\n \n-move_mask_indices_to_weight = 0, 3, 5, 7, 8, 9, 13, 14 #These are the bit index values of flags in the SEF Flagmap extension which if they are raised for a pixel the corresponding SEF science pixel will be masked (i.e., not be used) in the coaddition of the science pixels. This configuration is determined by the tables in https://docs.google.com/document/d/1O7HsEyINampIqL1G6Z79OQ4BJjtxoqnGX2uFleTZKJo/edit#bookmark=id.yd2ez1gfblrp  science important mask values.\n+move_mask_indices_to_weight = 0, 3, 5, 7, 8, 9, 13, 14 #These are the bit index values (so n, corresponding to integer value 2**n) of flags in the SEF Flagmap extension which if they are raised for a pixel the corresponding SEF science pixel will be masked (i.e., not be used) in the coaddition of the science pixels. This configuration is determined by the tables in https://docs.google.com/document/d/1O7HsEyINampIqL1G6Z79OQ4BJjtxoqnGX2uFleTZKJo/edit#bookmark=id.yd2ez1gfblrp  science important mask values.\n \n move_mask_indices_to_new_indices = \n \n",
                            "Makes explanation of  move_mask_indices_to_weight less ambiguous. ",
                            "Gijs Verdoes Kleijn",
                            "2023-07-21T07:18:42.000+00:00",
                            "8e5914ce98c82a0d48a6134e3f1d12ec00065d55"
                        ],
                        [
                            "@@ -1,6 +1,6 @@\n This file provides a human an explanation of what is inside the *.properties files in this directory first, followed below it what is inside the *.xml files. \n \n-_badpixels = ${badpixels} \n+_badpixels = ${badpixels}  #: That's for SExtractor (something in still from the stage1 pipeline). Has no relevance for the coadd part.\n \n _combinetype = ${combinetype}\n \n@@ -80,17 +80,17 @@ logger = ${log_dir}/${log}\n \n mask_indices =  1, 2, 4, 6, 10, 11, 12, 15\n \n-move_mask_indices_to_weight = 0, 3, 5, 7, 8, 9, 13, 14\n+move_mask_indices_to_weight = 0, 3, 5, 7, 8, 9, 13, 14 #These are the bit index values of flags in the SEF Flagmap extension which if they are raised for a pixel the corresponding SEF science pixel will be masked (i.e., not be used) in the coaddition of the science pixels. This configuration is determined by the tables in https://docs.google.com/document/d/1O7HsEyINampIqL1G6Z79OQ4BJjtxoqnGX2uFleTZKJo/edit#bookmark=id.yd2ez1gfblrp  science important mask values.\n \n move_mask_indices_to_new_indices = \n \n-max_memory = 62000 EXPLAINED IN \n+max_memory = 62000 # This configuration parameter is not used in the StackedFrame Production Pipeline. \n \n mkdirs = ${outpath}\n \n module = rdisk_coadd_decam EXPLAINED IN \n \n-multiprocesses = 4 EXPLAINED in https://euclid.roe.ac.uk/projects/sgu/wiki/EXT_PF1_GEN_P2_User_Manual#Number-of-processes-used-internally\n+multiprocesses = 4 #EXPLAINED in https://euclid.roe.ac.uk/projects/sgu/wiki/EXT_PF1_GEN_P2_User_Manual#Number-of-processes-used-internally. The value is set by hand. The value should not be larger than in the PackageDef. This needs to be manually checked. Unfortunately there is no way this is automatically ensured.\n \n nite = 20131228\n \n@@ -138,7 +138,7 @@ stackpsf_version = 1\n \n subtract_delivered_background = 0\n \n-subtract_bg_with_swarp = 1\n+subtract_bg_with_swarp = 1 #0=do not subtract a background. 1==subtract a background.\n \n swarp_default = ${euclid_home}/conf/etc/default.swarp EXPLAINED IN\n \n",
                            "Update README.md based on https://mail.google.com/mail/u/0/#search/from%3Awetzstein/FMfcgzGtwDFhfCQQGqBRSbkBRpcvPmXr",
                            "Gijs Verdoes Kleijn",
                            "2023-07-20T13:49:31.000+00:00",
                            "1f323aa01db2ef1c782d61065f0d6db4bae26a6e"
                        ]
                    ],
                    "EXT_PF1_GEN_P2/conf/README.md": [
                        [
                            "@@ -0,0 +1 @@\n+Note: the configuration files are all in https://gitlab.euclid-sgs.uk/PF-EXT/ext_pf1_gen_p2/-/tree/develop/EXT_PF1_GEN_P2/conf/EXT_PF1_GEN_P2. The files in this directory have 0 bytes. \n",
                            "Merge branch 'gvk/StackedFrameProductionTour' into 'develop'",
                            "Michael",
                            "2023-07-24T08:32:50.000+00:00",
                            "ffc3e22ed960659b8ca450eae6dc0962b2a5e17b"
                        ]
                    ],
                    "EXT_PF1_GEN_P2/python/EXT_PF1_GEN_P2/Pipeline/rdisk_coadd_stage2_loopswarp_pipeline.pscript": [
                        [
                            "@@ -119,8 +119,10 @@ nhcoadd_out = swarp_temp +os.sep +'nhcoadd'\n #resampledirs\n resampledir_coadd = swarp_temp + os.sep + 'coadd_resample'\n resampledir_nhcoadd = swarp_temp + os.sep + 'nhcoadd_resample'\n+vmemdir_nhcoadd = resampledir_nhcoadd + os.sep + 'nhcoadd_vmem'\n Pipeline.mkdir(resampledir_coadd)\n Pipeline.mkdir(resampledir_nhcoadd)\n+Pipeline.mkdir(vmemdir_nhcoadd)\n \n #directory for validation plots\n valdir = archive_root +os.sep +run_dir +os.sep +'validation_plots'\n@@ -257,7 +259,7 @@ for band in bands:\n     args4 = ['-WEIGHT_IMAGE', '@'+ nh_list[1], '-HEADER_ONLY', 'N', '-NTHREADS',  str(  int( multiprocesses/len(bands)) )]\n     args5 = ['@'+ nh_list[0], '-COMBINE_TYPE', combinetype, '-WRITE_XML', 'Y', '-XML_NAME', xmlfile, '-TILE_COMPRESS', Pipeline.evaluate_arg(savefpack, 'Y','N')]\n     args6 = ['-RESAMPLING_TYPE', 'LANCZOS3'] #default\n-    args7 = ['-IMAGEOUT_NAME', imageout_swarp_name, '-WEIGHTOUT_NAME', weightout_swarp_name, '-RESAMPLE_DIR', resampledir_nhcoadd]\n+    args7 = ['-IMAGEOUT_NAME', imageout_swarp_name, '-WEIGHTOUT_NAME', weightout_swarp_name, '-RESAMPLE_DIR', resampledir_nhcoadd, '-VMEM_DIR', vmemdir_nhcoadd ]\n     \n     coadd_nonhomog_args = args0+args1+args2+args3+args4+args5+args6\n     \n@@ -297,13 +299,13 @@ for band in bands:\n     args4 = ['-HEADER_ONLY', 'N', '-NTHREADS',  str(  int( multiprocesses/len(bands)) )]\n     args5 = ['@'+ nh_list[7], '-COMBINE_TYPE', 'SUM', '-WRITE_XML', 'N', '-TILE_COMPRESS', 'N']\n     args6 = ['-RESAMPLING_TYPE', 'LANCZOS3'] #default\n-    args7 = ['-IMAGEOUT_NAME', coverageout_swarp_name, '-RESAMPLE_DIR', resampledir_nhcoadd]\n+    args7 = ['-IMAGEOUT_NAME', coverageout_swarp_name, '-RESAMPLE_DIR', resampledir_nhcoadd, '-VMEM_DIR', vmemdir_nhcoadd]\n     #args_paused = ['-WEIGHTOUT_NAME', coverage_swarp_weightout_name]\n     \n     coadd_nonhomog_args = args0+args1+args2+args3+args4+args5+args6 \n     #retval = Pipeline.execute('CT_SWarp', coadd_nonhomog_args +args7, wait = True)\n     \n-    args7 = ['-IMAGEOUT_NAME', coverageout_name, '-WEIGHTOUT_NAME', coverage_weightout_name, '-RESAMPLE_DIR', resampledir_nhcoadd]\n+    args7 = ['-IMAGEOUT_NAME', coverageout_name, '-WEIGHTOUT_NAME', coverage_weightout_name, '-RESAMPLE_DIR', resampledir_nhcoadd, '-VMEM_DIR', vmemdir_nhcoadd]\n     ls = LoopSwarp.LoopSwarp(Pipeline, loopswarp_chunks, keep_shallow_coadds = False)\n     retval = ls.coverage(coadd_nonhomog_args +args7)\n     Qa_log_reporter.output_file_exists('Swarp nonhomog coverage output', coverageout_name)\n@@ -325,14 +327,14 @@ for band in bands:\n     args4 = ['-HEADER_ONLY', 'N', '-NTHREADS',  str(  int( multiprocesses/len(bands)) )]\n     args5 = ['@'+ nh_list[9], '-COMBINE_TYPE', 'SUM', '-WRITE_XML', 'N', '-TILE_COMPRESS', 'N']\n     args6 = ['-RESAMPLING_TYPE', 'LANCZOS3', '-RESAMPLE_SUFFIX', '.resamp_psfid.fits']\n-    args7 = ['-IMAGEOUT_NAME', psfid_swarp_out_name, '-RESAMPLE_DIR', resampledir_nhcoadd]\n+    args7 = ['-IMAGEOUT_NAME', psfid_swarp_out_name, '-RESAMPLE_DIR', resampledir_nhcoadd, '-VMEM_DIR', resampledir_nhcoadd, '-VMEM_DIR', vmemdir_nhcoadd]\n     #args_paused = ['-WEIGHTOUT_NAME', psfid_swarp_weightout_name]\n     \n     coadd_nonhomog_args = args0+args1+args2+args3+args4 +args5+args6\n     \n     #retval = Pipeline.execute('CT_SWarp', coadd_nonhomog_args +args7, wait = True)\n     \n-    args7 = ['-IMAGEOUT_NAME', psfid_out_name, '-RESAMPLE_DIR', resampledir_nhcoadd]\n+    args7 = ['-IMAGEOUT_NAME', psfid_out_name, '-RESAMPLE_DIR', resampledir_nhcoadd, '-VMEM_DIR', vmemdir_nhcoadd]\n     #args7_paused = ['-WEIGHTOUT_NAME', psfid_weightout_name]\n     \n     ls = LoopSwarp.LoopSwarp(Pipeline, loopswarp_chunks, keep_shallow_coadds = False)\n@@ -356,7 +358,7 @@ for band in bands:\n     args2 = ['@'+ nh_list[6], '-COMBINE_TYPE', 'OR', '-WRITE_XML', 'Y', '-XML_NAME', xml_flag_file, '-RESAMPLE', 'Y', '-COMBINE', 'N']\n     args3 = ['-RESAMPLING_TYPE', 'BILINEAR_FLAGS', '-RESAMPLE_SUFFIX', '.resamp_mask.fits']\n     args4 = [ '-NTHREADS',  str(  int( multiprocesses/len(bands)) )]\n-    args5 = ['-IMAGEOUT_NAME', maskout_swarp_name, '-RESAMPLE_DIR', resampledir_nhcoadd]\n+    args5 = ['-IMAGEOUT_NAME', maskout_swarp_name, '-RESAMPLE_DIR', resampledir_nhcoadd, '-VMEM_DIR', vmemdir_nhcoadd]\n     \n     coadd_nonhomog_args1 = args0+args1+args2+args3+args4\n     \n@@ -370,7 +372,7 @@ for band in bands:\n     resampled_mask_list = Pipeline.resampled_input_list(nh_list[6], resampledir_nhcoadd, postfix = \".resamp_mask.fits\")\n     #update inputs to resampled masks and now don't resample but combine. Rest remains as it is\n     args2 = ['@'+ resampled_mask_list, '-COMBINE_TYPE', 'OR', '-WRITE_XML', 'Y', '-XML_NAME', xml_flag_file, '-RESAMPLE', 'N', '-COMBINE', 'Y']\n-    args52 = ['-IMAGEOUT_NAME', maskout_name, '-RESAMPLE_DIR', resampledir_nhcoadd]\n+    args52 = ['-IMAGEOUT_NAME', maskout_name, '-RESAMPLE_DIR', resampledir_nhcoadd, '-VMEM_DIR', vmemdir_nhcoadd]\n     \n     coadd_nonhomog_args2 = args0+args1+args2+args3\n     \n",
                            "put swarp vmem on disk",
                            "Michael",
                            "2023-07-17T15:34:35.000+02:00",
                            "78365c2738d3d9c8f98b7f3c6ab20d14459983ec"
                        ],
                        [
                            "@@ -0,0 +1,753 @@\n+\"\"\"\n+This is the ramdisk based coadd pipeline script.\n+\n+It is a plain, linear script to keep it as simple as possible.\n+It is called by the rdisk executable.\n+\n+\n+Copyright (C) 2012-2020 Euclid Science Ground Segment\n+\n+This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n+Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n+any later version.\n+\n+This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n+warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+details.\n+\n+You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n+the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+\n+\"\"\"\n+from builtins import str\n+\n+import os\n+import time\n+\n+\n+#parameters, globally set by the calling python class\n+Pipeline = _Pipeline\n+ramdisk = _ramdisk #the location of the project directory on ramdisk (ramdisk including a top-level project folder)\n+swarp_temp = _swarp_temp #this can be specially set by ial\n+project = _project\n+coaddswarp = _coaddswarp #the src list for the swarp input\n+ccds = _ccds #ccd is a loop parameter. _ccds is a list of values\n+job_id = _job_id\n+exclude_list = _exclude_list #exclude list for bad ccds\n+verbose = _verbose\n+run_dir = _run_dir\n+run = _run\n+euclid_home = _euclid_home\n+etcpath = _etcpath\n+euclid_prereq = _euclid_prereq\n+archive_root = _archive_root\n+multiprocesses = _multiprocesses\n+process = _process\n+swarp_default = _swarp_default\n+swarp_flag_default = _swarp_flag_default\n+coaddheadfile = _coaddheadfile\n+fscaleastrovar = _fscaleastrovar\n+combinetype = _combinetype.upper()\n+detect_bands = _detect_bands\n+zeropoint = _zeropoint\n+badpixels = _badpixels\n+extraweightmap = _extraweightmap\n+tilename = _tilename\n+Metadata_Collector = _Metadata_Collector\n+Postprocessing = _Postprocessing\n+vis_position_cat = _vis_position_cat\n+allocated_memory = _allocated_memory #the whole allocated memory on the node\n+norm_images_memory = float(allocated_memory)/2.0\n+red_images_memory = 0.0 #float(norm_images_memory/3.0) #space reserved for red images in the ramdisk\n+savefpack = _savefpack\n+keepnorm = _keepnorm\n+se_catalog_x = _se_catalog_x #the name of the SE-catalog x/y columns\n+se_catalog_y = _se_catalog_y\n+clean_up = _cleanup\n+output = _output #multiprocessing.Queue() to return an output dictionary\n+Qa = _Qa\n+bandpasses = _bandpasses\n+stackpsf_version = _stackpsf_version\n+mask_indices = _mask_indices\n+move_mask_indices_to_weight = _move_mask_indices_to_weight\n+move_mask_indices_to_new_indices = _move_mask_indices_to_new_indices\n+timestamp = time.time()\n+coadd_zp = _coadd_zp\n+subtract_delivered_background = _subtract_delivered_background\n+subtract_bg_with_swarp = _subtract_bg_with_swarp\n+save_backgrounds_for_validation = _save_backgrounds_for_validation\n+use_stackregions = _use_stackregions #base the reference catalog on locations of unique stacksets\n+cut_catalog_to_percent = _cut_catalog_to_percent\n+loopswarp_chunks = 200\n+\n+Pipeline.log(\"Pipeline script. Making directories\")\n+\n+\n+#decide location of norm and coadds\n+coadd_to_disk = True\n+norm_to_disk = False\n+\n+temp_value_norm_to_disk = norm_to_disk\n+\n+\n+swarp_temp = swarp_temp + os.sep + 'swarptemp'\n+Pipeline.mkdir(swarp_temp)\n+\n+xml_dir = archive_root +os.sep +run_dir +os.sep +'xml'\n+auxdir = archive_root + os.sep + run_dir + os.sep +'aux' +os.sep\n+\n+#leave the remaps in ramdisk\n+remap = swarp_temp + os.sep + 'remap'\n+out_xml_dir = swarp_temp + os.sep + 'xml' +os.sep\n+Pipeline.mkdir(out_xml_dir)\n+\n+\n+#norm location on hd\n+normoutdir_archive = archive_root +os.sep +run_dir +os.sep +'norm'\n+norm_list_dir = swarp_temp +os.sep +'norm'\n+bgsub_dir = archive_root +os.sep +run_dir +os.sep +'bgsub'\n+Pipeline.mkdir(normoutdir_archive)\n+Pipeline.mkdir(norm_list_dir)\n+Pipeline.mkdir(bgsub_dir)\n+\n+\n+#coadd location\n+coadd_out = swarp_temp +os.sep +'coadd'\n+nhcoadd_out = swarp_temp +os.sep +'nhcoadd'\n+\n+\n+#resampledirs\n+resampledir_coadd = swarp_temp + os.sep + 'coadd_resample'\n+resampledir_nhcoadd = swarp_temp + os.sep + 'nhcoadd_resample'\n+Pipeline.mkdir(resampledir_coadd)\n+Pipeline.mkdir(resampledir_nhcoadd)\n+\n+#directory for validation plots\n+valdir = archive_root +os.sep +run_dir +os.sep +'validation_plots'\n+Pipeline.mkdir(valdir)\n+\n+if coadd_to_disk:\n+    coadd_out = archive_root +os.sep +run_dir +os.sep +'coadd'\n+    nhcoadd_out = archive_root +os.sep +run_dir +os.sep +'nhcoadd'\n+#\n+\n+prereq_bin = euclid_prereq +os.sep +'bin'\n+euclid_bin = euclid_home +os.sep +'bin'\n+\n+\n+#split the complete input data (incl. fwhm) by band\n+cats_by_band = Pipeline.file_by_band(coaddswarp, -1, 5)\n+\n+#map image and catalog files\n+catlist = Pipeline.match_src_and_cat(coaddswarp)\n+\n+\n+#get the tile parameters from the tile configuration file\n+#[tilename, tile_ra, tile_dec, pixelsize, tile_npixra, tile_npixdec]\n+tileinfo = Pipeline.list_to_pylist(auxdir +os.sep +tilename +'.list')[0].split(' ')\n+\n+#put tileinfo into a file in the xml dir\n+tileheadfile, fitsheadfile = Pipeline.mk_desremap(coaddheadfile, tileinfo, xml_dir)\n+\n+images_by_band = Pipeline.separate_band_from_src(coaddswarp, bandindex = 1, maxsplit=3)\n+\n+#the first section is i/o intense\n+#use more processes\n+multiprocesses = multiprocesses *4\n+skip_astrometric_validation = 0\n+\n+for band in images_by_band.keys():\n+    for imagecounter in range(len(images_by_band[band])):\n+        image = images_by_band[band][imagecounter]\n+        #<start name = \"parallel1\">\n+        pipelinehash = str(hash(Pipeline))\n+        \n+        #swarpcall image\n+        (infile, fileid, unused, zp, zperr) = Pipeline.resolve_image_params(image)\n+        print('process image ', (infile, fileid, unused, zp, zperr))\n+        \n+        #get the hdu sequence and extnames to a standard\n+        temp_infile = Pipeline.rename_hdus(infile, swarp_temp + os.sep +infile.rsplit(os.sep, 1)[-1], False)\n+        \n+        #move selected mask bits to the weight hdu\n+        Pipeline.add_mask_2_weight(temp_infile, move_mask_indices_to_weight)\n+        \n+        #leave only the selected mask bits in the mask hdu\n+        #move them to standard values, if those are defined\n+        Pipeline.set_maskbits_in_mask(temp_infile, mask_indices, move_mask_indices_to_new_indices)\n+        \n+        \n+        #make a background file if requested by subtract_bg_with_swarp\n+        #if not requested, bg_fitsfile will be None and ignored in the next step\n+        bg_fitsfile = Pipeline.make_background(temp_infile, swarp_default, bgsub_dir, subtract_bg_with_swarp, _which = Pipeline.Swarp_bg)\n+        \n+        #subtract background from infile\n+        #bg is supposed to be a hdu with the name \"background\"\n+        #the file is put into the bgsub_dir and gets the same name as the original file\n+        infile  = Pipeline.subtract_background(temp_infile, bgsub_dir + os.sep +temp_infile.rsplit(os.sep, 1)[-1], bg_fitsfile = bg_fitsfile, write_compressed = savefpack, subtract_delivered_background = _subtract_delivered_background, imagenumber = imagecounter)\n+        Pipeline.delete_file(temp_infile)\n+        Qa_log_reporter.output_file_exists('Background subtracted image', infile)\n+        \n+        #move wcs header values into all hdus\n+        wcs_header = Pipeline.homogenize_headers(infile)\n+        Qa_log_reporter.output_file_exists('Transferred header values within image', infile)\n+        \n+        skip_astrometric_validation = Pipeline.astrometric_validation(catlist[image.split()[0]], vis_position_cat, valdir, infile, band = band, se_catalog_x = se_catalog_x, se_catalog_y = se_catalog_y)\n+        \n+        #edit the image for the log\n+        image = (infile.split()[0]).rsplit(os.sep, 1)[-1]\n+        Pipeline.saveLog(ramdisk, 'bgsub log, band, image ' +image)\n+        \n+        #clean up ramdisk\n+        Pipeline.move(infile, _to = bgsub_dir)\n+        Pipeline.delete_dir(remap, cleanup = clean_up)\n+        #<end name = \"parallel1\">\n+    #\n+#\n+Pipeline.log(\"End first parallel section\")\n+Pipeline.merge_logs(ramdisk, archive_root +os.sep +run_dir + os.sep +'log' +os.sep +'Bgsub_headers_astrom_validation.log')\n+\n+\n+#now the images are in the bgsub directory\n+#update the inputlist\n+bgsublist = Pipeline.coadd_list_2_bgsublist(coaddswarp, bgsub_dir)\n+bandlists = Pipeline.separate_band_from_src(bgsublist, bandindex = 1, maxsplit=3)\n+bands = list(bandlists.keys())\n+Pipeline.clean_up_header_updated_data(coaddswarp)\n+\n+\n+#return to defined processes\n+multiprocesses = multiprocesses //4\n+\n+print(\"bands \", bands)\n+Pipeline.log(\"Start loop over bands\")\n+\n+for band in bands:\n+    #<start name = \"parallel2\">\n+    \n+    bgsub_bandlist = bandlists[band]\n+    Pipeline.compose_validation_data(tilename, band, valdir, reference_files = cats_by_band[band], skip_astrometric_validation = skip_astrometric_validation)\n+    \n+    #coadds from bg subtracted images\n+    Pipeline.log(\"First swarp call (image, weights)\")\n+    \n+    outauxpath_nhcoadd = auxdir + 'nhcoadd_' +band\n+    #resampledir_nhcoadd = outauxpath_nhcoadd + os.sep + 'resample'\n+    resampledir_nhcoadd = remap +os.sep +'nhcoadd_' +band + os.sep + 'resample'\n+    Pipeline.mkdir(outauxpath_nhcoadd)\n+    Pipeline.mkdir(resampledir_nhcoadd)\n+    Pipeline.mkdir(nhcoadd_out)\n+    \n+    \n+    nh_list = Pipeline.assemble_swarp_input_lists_from_pylist(bgsub_bandlist, outauxpath_nhcoadd, tilename, band, mag_base = coadd_zp)\n+    #returns lists of: image, weight, weight2, fluxscale, imageid, mag_base, mask, coverage, background, psfid\n+    #print(\"nh_list \", nh_list)\n+    \n+    xmlfile = out_xml_dir + str(Pipeline.get_random_int()) +os.sep +tilename +'_' +band +'_swarp.xml'\n+    imageout_name = tilename +'_' +band +'.image.fits'\n+    weightout_name = tilename +'_' +band +'.weight.fits'\n+    \n+    imageout_swarp_name = tilename +'_' +band +'_swarp.image.fits'\n+    weightout_swarp_name = tilename +'_' +band +'_swarp.weight.fits'\n+    \n+    args0 = ['-c',  swarp_default, '-PIXELSCALE_TYPE', 'MANUAL', '-PIXEL_SCALE', tileinfo[3] +\",\" +tileinfo[3]]\n+    args1 = ['-CENTER_TYPE', 'MANUAL', '-CENTER', tileinfo[1] +',' +tileinfo[2], '-IMAGE_SIZE', tileinfo[4] +',' +tileinfo[5]]\n+    args2 = ['-SUBTRACT_BACK', 'N', '-BLANK_BADPIXELS', 'Y', '-COPY_KEYWORDS', 'PSF_FWHM,PSF_BETA,FWHMHOMO', '-DELETE_TMPFILES','Y']\n+    args3 = ['-FSCALASTRO_TYPE', 'VARIABLE', '-FSCALE_DEFAULT', '@'+ nh_list[3], '-FSCALE_KEYWORD', 'nokey', '-RESAMPLE', 'Y', '-COMBINE', 'Y', '-WEIGHT_TYPE', 'MAP_WEIGHT']\n+    args4 = ['-WEIGHT_IMAGE', '@'+ nh_list[1], '-HEADER_ONLY', 'N', '-NTHREADS',  str(  int( multiprocesses/len(bands)) )]\n+    args5 = ['@'+ nh_list[0], '-COMBINE_TYPE', combinetype, '-WRITE_XML', 'Y', '-XML_NAME', xmlfile, '-TILE_COMPRESS', Pipeline.evaluate_arg(savefpack, 'Y','N')]\n+    args6 = ['-RESAMPLING_TYPE', 'LANCZOS3'] #default\n+    args7 = ['-IMAGEOUT_NAME', imageout_swarp_name, '-WEIGHTOUT_NAME', weightout_swarp_name, '-RESAMPLE_DIR', resampledir_nhcoadd]\n+    \n+    coadd_nonhomog_args = args0+args1+args2+args3+args4+args5+args6\n+    \n+    #set the workdir\n+    cwd = os.getcwd()\n+    os.chdir(resampledir_nhcoadd)\n+    \n+    #first swarp call\n+    timestamp = time.time()\n+    #retval = Pipeline.execute('CT_SWarp', coadd_nonhomog_args +args7, wait = True)\n+    \n+    from EXT_PF1_GEN_P2.Pipeline import LoopSwarp\n+    import sys\n+    import time\n+    args7 = ['-IMAGEOUT_NAME', imageout_name, '-WEIGHTOUT_NAME', weightout_name, '-RESAMPLE_DIR', resampledir_nhcoadd]\n+    \n+    ls = LoopSwarp.LoopSwarp(Pipeline, loopswarp_chunks, keep_shallow_coadds = False)\n+    retval = ls.image(coadd_nonhomog_args +args7)\n+    \n+    Qa_log_reporter.output_file_exists('Swarp nonhomog image output', imageout_name)\n+    Qa_log_reporter.output_file_exists('Swarp nonhomog weight output', weightout_name)\n+    \n+    \n+    #swarp call to combine the coverage\n+    Pipeline.log(\"Second swarp call (coverage)\")\n+    \n+    coverageout_name = tilename +'_' +band +'.coverage.fits'\n+    coverage_weightout_name = tilename +'_' +band +'.coverage_weight.fits'\n+    \n+    coverageout_swarp_name = tilename +'_' +band +'_swarp.coverage.fits'\n+    coverage_swarp_weightout_name = tilename +'_' +band +'_swarp.coverage_weight.fits'\n+    \n+    args0 = ['-c',  swarp_default, '-PIXELSCALE_TYPE', 'MANUAL', '-PIXEL_SCALE', tileinfo[3] +\",\" +tileinfo[3]]\n+    args1 = ['-CENTER_TYPE', 'MANUAL', '-CENTER', tileinfo[1] +',' +tileinfo[2], '-IMAGE_SIZE', tileinfo[4] +',' +tileinfo[5]]\n+    args2 = ['-SUBTRACT_BACK', 'N', '-BLANK_BADPIXELS', 'Y', '-DELETE_TMPFILES','Y']\n+    args3 = ['-FSCALASTRO_TYPE', 'NONE', '-FSCALE_DEFAULT', '1.0', '-FSCALE_KEYWORD', 'nokey', '-RESAMPLE', 'Y', '-COMBINE', 'Y', '-WEIGHT_TYPE', 'NONE']\n+    args4 = ['-HEADER_ONLY', 'N', '-NTHREADS',  str(  int( multiprocesses/len(bands)) )]\n+    args5 = ['@'+ nh_list[7], '-COMBINE_TYPE', 'SUM', '-WRITE_XML', 'N', '-TILE_COMPRESS', 'N']\n+    args6 = ['-RESAMPLING_TYPE', 'LANCZOS3'] #default\n+    args7 = ['-IMAGEOUT_NAME', coverageout_swarp_name, '-RESAMPLE_DIR', resampledir_nhcoadd]\n+    #args_paused = ['-WEIGHTOUT_NAME', coverage_swarp_weightout_name]\n+    \n+    coadd_nonhomog_args = args0+args1+args2+args3+args4+args5+args6 \n+    #retval = Pipeline.execute('CT_SWarp', coadd_nonhomog_args +args7, wait = True)\n+    \n+    args7 = ['-IMAGEOUT_NAME', coverageout_name, '-WEIGHTOUT_NAME', coverage_weightout_name, '-RESAMPLE_DIR', resampledir_nhcoadd]\n+    ls = LoopSwarp.LoopSwarp(Pipeline, loopswarp_chunks, keep_shallow_coadds = False)\n+    retval = ls.coverage(coadd_nonhomog_args +args7)\n+    Qa_log_reporter.output_file_exists('Swarp nonhomog coverage output', coverageout_name)\n+    \n+    \n+    ####\n+    Pipeline.log(\"Third swarp call (resample psfids)\")\n+    xml_flag_file = out_xml_dir + str(Pipeline.get_random_int()) +os.sep +tilename +'_' +band +'_swarp_psfid.xml'\n+    psfid_out_name = tilename +'_' +band +'.psfid.fits'\n+    psfid_weightout_name = tilename +'_' +band +'.psfid_weight.fits'\n+    \n+    psfid_swarp_out_name = tilename +'_' +band +'_swarp.psfid.fits'\n+    psfid_swarp_weightout_name = tilename +'_' +band +'_swarp.psfid_weight.fits'\n+    \n+    args0 = ['-c',  swarp_flag_default, '-PIXELSCALE_TYPE', 'MANUAL', '-PIXEL_SCALE', tileinfo[3] +\",\" +tileinfo[3]]\n+    args1 = ['-CENTER_TYPE', 'MANUAL', '-CENTER', tileinfo[1] +',' +tileinfo[2], '-IMAGE_SIZE', tileinfo[4] +',' +tileinfo[5]]\n+    args2 = ['-SUBTRACT_BACK', 'N', '-BLANK_BADPIXELS', 'Y', '-DELETE_TMPFILES','Y']\n+    args3 = ['-FSCALASTRO_TYPE', 'NONE', '-FSCALE_DEFAULT', '1.0', '-FSCALE_KEYWORD', 'nokey', '-RESAMPLE', 'Y', '-COMBINE', 'Y', '-WEIGHT_TYPE', 'NONE']\n+    args4 = ['-HEADER_ONLY', 'N', '-NTHREADS',  str(  int( multiprocesses/len(bands)) )]\n+    args5 = ['@'+ nh_list[9], '-COMBINE_TYPE', 'SUM', '-WRITE_XML', 'N', '-TILE_COMPRESS', 'N']\n+    args6 = ['-RESAMPLING_TYPE', 'LANCZOS3', '-RESAMPLE_SUFFIX', '.resamp_psfid.fits']\n+    args7 = ['-IMAGEOUT_NAME', psfid_swarp_out_name, '-RESAMPLE_DIR', resampledir_nhcoadd]\n+    #args_paused = ['-WEIGHTOUT_NAME', psfid_swarp_weightout_name]\n+    \n+    coadd_nonhomog_args = args0+args1+args2+args3+args4 +args5+args6\n+    \n+    #retval = Pipeline.execute('CT_SWarp', coadd_nonhomog_args +args7, wait = True)\n+    \n+    args7 = ['-IMAGEOUT_NAME', psfid_out_name, '-RESAMPLE_DIR', resampledir_nhcoadd]\n+    #args7_paused = ['-WEIGHTOUT_NAME', psfid_weightout_name]\n+    \n+    ls = LoopSwarp.LoopSwarp(Pipeline, loopswarp_chunks, keep_shallow_coadds = False)\n+    retval = ls.psfid(coadd_nonhomog_args  +args7)\n+    \n+    Qa_log_reporter.output_file_exists('Swarp nonhomog psfid output', psfid_out_name)\n+    \n+    ####\n+    \n+    \n+    #further swarp calls to combine the masks\n+    Pipeline.log(\"Fourth swarp call (resample masks)\")\n+    #first: resample\n+    xml_flag_file = out_xml_dir + str(Pipeline.get_random_int()) +os.sep +tilename +'_' +band +'_swarp_flag.xml'\n+    maskout_swarp_name = tilename +'_' +band +'_swarp.mask.fits'\n+    \n+    maskout_name = tilename +'_' +band +'.mask.fits'\n+    \n+    args0 = ['-c',  swarp_flag_default, '-PIXELSCALE_TYPE', 'MANUAL', '-PIXEL_SCALE', tileinfo[3] +\",\" +tileinfo[3]]\n+    args1 = ['-CENTER_TYPE', 'MANUAL', '-CENTER', tileinfo[1] +',' +tileinfo[2], '-IMAGE_SIZE', tileinfo[4] +',' +tileinfo[5]]\n+    args2 = ['@'+ nh_list[6], '-COMBINE_TYPE', 'OR', '-WRITE_XML', 'Y', '-XML_NAME', xml_flag_file, '-RESAMPLE', 'Y', '-COMBINE', 'N']\n+    args3 = ['-RESAMPLING_TYPE', 'BILINEAR_FLAGS', '-RESAMPLE_SUFFIX', '.resamp_mask.fits']\n+    args4 = [ '-NTHREADS',  str(  int( multiprocesses/len(bands)) )]\n+    args5 = ['-IMAGEOUT_NAME', maskout_swarp_name, '-RESAMPLE_DIR', resampledir_nhcoadd]\n+    \n+    coadd_nonhomog_args1 = args0+args1+args2+args3+args4\n+    \n+    #retval = Pipeline.execute('CT_SWarp', coadd_nonhomog_args1  +args5, wait = True)\n+    \n+    \n+    #second: combine without resampling\n+    Pipeline.log(\"Fifth swarp call (combine masks)\")\n+    \n+    #collect resampled input list and and change mask to int\n+    resampled_mask_list = Pipeline.resampled_input_list(nh_list[6], resampledir_nhcoadd, postfix = \".resamp_mask.fits\")\n+    #update inputs to resampled masks and now don't resample but combine. Rest remains as it is\n+    args2 = ['@'+ resampled_mask_list, '-COMBINE_TYPE', 'OR', '-WRITE_XML', 'Y', '-XML_NAME', xml_flag_file, '-RESAMPLE', 'N', '-COMBINE', 'Y']\n+    args52 = ['-IMAGEOUT_NAME', maskout_name, '-RESAMPLE_DIR', resampledir_nhcoadd]\n+    \n+    coadd_nonhomog_args2 = args0+args1+args2+args3\n+    \n+    #retval = Pipeline.execute('CT_SWarp', coadd_nonhomog_args2 +args5, wait = True)\n+    #Pipeline.delete_list(resampled_mask_list, clean_up, _from = resampledir_nhcoadd)\n+    \n+    ls = LoopSwarp.LoopSwarp(Pipeline, loopswarp_chunks, keep_shallow_coadds = False)\n+    retval = ls.mask(coadd_nonhomog_args1 +args52, coadd_nonhomog_args2 +args52, resampledir_nhcoadd, postfix = \".resamp_mask.fits\")\n+    Qa_log_reporter.output_file_exists('Swarp nonhomog mask output', maskout_name)\n+    \n+    \n+    #bandpasses\n+    Pipeline.log(\"Fill bandpasses\")\n+    bandpassout_name = Pipeline.fill_bandpasses(bandpasses[\"Bandpass_\" +band], resampledir_nhcoadd, int(tileinfo[4]), int(tileinfo[5]))\n+    \n+    \n+    #update fits header\n+    Pipeline.log(\"Update fits headers\")\n+    \n+    #extname must be written in small letters, never capitals\n+    Pipeline.update_fits_header(imageout_name, {1:[{'name':'SEXMGZPT', 'value': coadd_zp, 'comment':'Mag ZP'}, \\\n+                                                   {'name':'Filter', 'value':band, 'comment':'Filter'}, \\\n+                                                   {'name':'extname', 'value':'IMAGE', 'comment':'image extension'}]})\n+    Pipeline.update_fits_header(weightout_name, {1:[{'name':'extname', 'value':'WEIGHT', 'comment':'weight extension'}]})\n+    Pipeline.update_fits_header(maskout_name, {1:[{'name':'extname', 'value':'MASK', 'comment':'mask extension'}]})\n+    Pipeline.update_fits_header(bandpassout_name, {1:[{'name':'extname', 'value':'BANDPASS', 'comment':'bandpass extension'}]})\n+    Pipeline.update_fits_header(coverageout_name, {1:[{'name':'extname', 'value':'COVERAGE', 'comment':'coverage extension'}]})\n+    Pipeline.update_fits_header(psfid_out_name, {1:[{'name':'extname', 'value':'PSFID', 'comment':'psfid extension'}]})\n+    \n+    \n+    #fitscombine to output image\n+    Pipeline.log(\"Fitscombine image, weight, mask, bandpass, coverage psfid to output coadd\")\n+    outimage = nhcoadd_out +os.sep +tilename +'_' +str(band) +'.fits' +Pipeline.evaluate_arg(savefpack, '.fz','')\n+    args = ['-cleanup', imageout_name +Pipeline.evaluate_arg(savefpack, '.fz',''), weightout_name +Pipeline.evaluate_arg(savefpack, '.fz','')]\n+    args = args +[maskout_name +Pipeline.evaluate_arg(savefpack, '.fz',''), bandpassout_name] #bandpassout_name is not compressed\n+    args = args +[coverageout_name] #coverageout_name is not compressed\n+    args = args +[psfid_out_name]\n+    args = args +[outimage, '-verbose', verbose] +[Pipeline.evaluate_arg(savefpack, '-no0exthead', '')]\n+    retval = Pipeline.execute('EXT_PF1_DES_fitscombine', args, wait = True) #qa_file = qafile,\n+    Qa_log_reporter.output_file_exists('Fitscombinend coadd nonhomog', outimage)\n+    Pipeline.log_coverage_histogram(outimage)\n+    \n+    \n+    Pipeline.saveLog(ramdisk, 'coadd nonhomogeneous, band ' +band)\n+    \n+    Metadata_Collector.collect_metadata(outauxpath_nhcoadd, globals(), filetype = 'aux', newer = timestamp, file_endings = ('.list', '.dat'), BAND = band)\n+    Metadata_Collector.collect_metadata(nhcoadd_out, globals(), filetype = 'nhcoadd', BAND = band, newer = timestamp)\n+    \n+    #switch back the workdir\n+    os.chdir(cwd)\n+    \n+    #remove red from ramdisk\n+    Pipeline.delete_list(nh_list[0], clean_up, _from = ramdisk)\n+    #remove norm from ramdisk (and disk)\n+    Pipeline.copy_dir(norm_list_dir, normoutdir_archive)\n+    Pipeline.empty_dir(norm_list_dir, clean_up)\n+    Pipeline.empty_dir(resampledir_nhcoadd, clean_up)\n+    Pipeline.empty_dir(normoutdir_archive, clean_up and not keepnorm)\n+    \n+    if not norm_to_disk:\n+        temp_value_norm_to_disk = norm_to_disk\n+    #\n+    Pipeline.merge_logs(ramdisk, archive_root +os.sep +run_dir + os.sep +'log' +os.sep +'coadd_log_band_' +band +'_' +job_id +'.log')\n+    #<end name = \"parallel2\">\n+#\n+\n+\n+#<start stopcondition = \"coadd_swarp\">\n+#<end stopcondition = \"coadd_swarp\">\n+\n+\n+#coadd_detection\n+Pipeline.log(\"Construct detection image\")\n+\n+#uses the output of coadd_homog. Use detect_bands!\n+coadd_detector_list, _ = Pipeline.determine_detbands(ramdisk,  nhcoadd_out, tilename, detect_bands, bands)\n+(fitslist, idlist) = Pipeline.get_coaddlist(coadd_detector_list)\n+\n+## set up the output imageid file\n+Pipeline.mk_imageid(idlist, auxdir, tilename)\n+\n+##construct swarp call and run swarp to make the det image\n+swarpargs = Pipeline.construct_swarp_call(fitslist, nhcoadd_out, etcpath, extraweightmap=0, savefpack=savefpack, verbose=verbose)\n+Pipeline.execute(\"CT_SWarp\", swarpargs, wait=True )\n+\n+#<start stopcondition = \"fitscombine2\">\n+#<end stopcondition = \"fitscombine2\">\n+\n+##run fitscombine\n+outimage = nhcoadd_out + os.sep + tilename +\"_det.fits\" +Pipeline.evaluate_arg(savefpack, '.fz','')\n+\n+#for the temp files, spell out the paths, so they can easily be deleted later\n+detimage = nhcoadd_out+os.sep+\"tmp.fits\" +Pipeline.evaluate_arg(savefpack, '.fz','')\n+detweight = nhcoadd_out+os.sep+\"coadd_weight.fits\" +Pipeline.evaluate_arg(savefpack, '.fz','')\n+Qa_log_reporter.output_file_exists('detimage image hdu', detimage)\n+Qa_log_reporter.output_file_exists('detimage weight hdu', detweight)\n+\n+fitscombineargs = [detimage, detweight, outimage, \"-verbose\", str(verbose)] +[Pipeline.evaluate_arg(savefpack, '-no0exthead', '')]\n+Pipeline.execute(\"EXT_PF1_DES_fitscombine\", fitscombineargs, wait=True )\n+Qa_log_reporter.output_file_exists('Fitscombined detimage', outimage)\n+\n+\n+##creating extra psfcat and psf files for detection image - only if required via createpsf\n+#--- start to inline mk_detpsf here\n+(outimage, detimagename, detweightname, detpsffile, wd) = Pipeline.get_detnames(nhcoadd_out, tilename, createpsf = 1, savefpack = savefpack, use_relative_paths = True)\n+\n+#switch to coadd workdir in order to use\n+#relative (=short) paths for SExtractor\n+#the rest of this processing until psfstacks is done in the coadd outdir\n+cwd = os.getcwd()\n+print(\"for SExtractor change to directory \", wd)\n+os.chdir(wd)\n+#print(\"process files \", outimage, detimagename, detweightname, detpsffile)\n+\n+Pipeline.log(\"SExtractor catalog for detection image.\")\n+\n+args = [detimagename, \"-c\", etcpath +\"default.sex\", \"-CATALOG_NAME\", detpsffile]\n+args += [\"-CATALOG_TYPE\", \"FITS_LDAC\"]\n+\n+#leave out the weight image as this seems to require proper image units\n+#drop the weight\n+#args += [\"-WEIGHT_IMAGE\", detweightname, \"-WEIGHT_TYPE\", \"MAP_WEIGHT\"]\n+args += [\"-PARAMETERS_NAME\", etcpath +\"sex.param_psfex\", \"-FILTER_NAME\", etcpath +\"sex.conv\"]\n+args += [\"-STARNNW_NAME\", etcpath +\"sex.nnw\", \"-SATUR_LEVEL\", \"65000\", \"-DETECT_MINAREA\", \"3\"]\n+args += [\"-DETECT_THRESH\", \"1.6\",\"-THRESH TYPE\", \"RELATIVE\", \"-MAG_ZEROPOINT\", str(coadd_zp)]\n+args += [\"-NTHREADS\", str(int(multiprocesses))]\n+\n+Pipeline.execute(\"sex\", args, wait=True )\n+Qa_log_reporter.output_file_exists('Detimage SExtractor catalog', detpsffile)\n+\n+\n+args = [detpsffile, \"-c\", etcpath +\"default.psfex\", \"-WRITE_XML\", \"Y\"]\n+Pipeline.execute( \"psfex\", args, wait=True)\n+#--- end mk_detpsf\n+\n+\n+det_image = Pipeline.find_det_image(nhcoadd_out, tilename, '_det.')\n+\n+#Create convolution kernel based on detection image\n+Pipeline.log(\"Convolution kernel.\")\n+\n+#---- inline mk_convkern\n+psffile = det_image.rsplit(\".fits\", 1)[0]+\"_psfcat.psf\"\n+Qa_log_reporter.output_file_exists('Detimage psf image', psffile)\n+\n+kernelfile = nhcoadd_out +os.sep +\"double_detect_conv_kern.txt\"\n+kernelfile = \"double_detect_conv_kern.txt\"\n+\n+kerndim = 11 #11*11 pixels\n+h = Pipeline.get_fits_header(det_image, hdu_number = Pipeline.evaluate_arg(savefpack, 1, 0))\n+psfkernargs = [psffile, str(h['CRPIX1']), str(h['CRPIX2']), str(kerndim), str(kerndim), kernelfile]\n+Pipeline.execute( 'psfToKernel', psfkernargs, wait=True )\n+Qa_log_reporter.output_file_exists('Ascii psf kernel', kernelfile)\n+\n+#---- end inline mk_convkern\n+\n+Pipeline.saveLog(ramdisk, 'coadd detection, bands ' +detect_bands)\n+Metadata_Collector.collect_metadata(nhcoadd_out, globals(), filetype = 'coadd', newer = timestamp)\n+\n+\n+#<start stopcondition = \"coadd_detection\">\n+#Pipeline.move(det_image, _from = coadd_out, _to = archive_root +os.sep +run_dir +os.sep +'coadd')\n+#<end stopcondition = \"coadd_detection\">\n+\n+Pipeline.log(\"Parallel section: make coadd catalogs\")\n+for band in bands:\n+    #<start name = \"parallel3\">\n+    #coadd_catalog\n+    coadd_catalog = Pipeline.find_coadd(ramdisk, nhcoadd_out, tilename, band)\n+    #uses the output of coadd_homog like coadd_detection\n+    print('excute catalogs for band ', band)\n+    \n+    print(\"*** Pythonised coadd catalog begins here! ***\")\n+    (detection_image, detection_weight_image, wd) = Pipeline.prepare_detimage(det_image, use_relative_paths = True)\n+    (coadd_cat_fitslist, coadd_cat_idlist) = Pipeline.get_coaddlist(coadd_catalog)\n+    \n+    # Loop over image list and construct SExtractor calls\n+    for imagename in coadd_cat_fitslist:\n+        #Get the band and ZP information from the image and define the coadd catalog name\n+        (cc_image_ext, cc_weightname, cc_outcat, hdr_band, hdr_magzp, wd) = Pipeline.get_coaddcatinfo(nhcoadd_out, imagename, tilename, use_relative_paths = True)\n+        \n+        #Run SExtractor and PSFex to make psf catalogs (switch off if no model fitting)\n+        #---- inline coaddpsf start\n+        psffile = cc_image_ext.split(\".fits\")[0] +\"_psfcat.fits\"\n+        args = [cc_image_ext, \"-c\", etcpath +\"default.sex\"]\n+        args += [\"-CATALOG_NAME\", psffile, \"-CATALOG_TYPE\", \"FITS_LDAC\"]\n+        #drop the weight\n+        #args += [\"-WEIGHT_TYPE\", \"MAP_WEIGHT\", \"-WEIGHT_IMAGE\", cc_weightname]\n+        args += [\"-PARAMETERS_NAME\", etcpath +\"sex.param_psfex\"]\n+        args += [\"-FILTER_NAME\", etcpath +\"sex.conv\"]\n+        args += [\"-STARNNW_NAME\", etcpath +\"sex.nnw\"]\n+        args += [\"-SATUR_LEVEL\", \"65000\", \"-DETECT_MINAREA\", \"3\"]\n+        args += [\"-DETECT_THRESH\", \"1.6\",\"-THRESH TYPE\", \"RELATIVE\", \"-MAG_ZEROPOINT\", str(coadd_zp)]\n+        \n+        Pipeline.execute(\"sex\", args, wait=True )\n+        Qa_log_reporter.output_file_exists('Sextractor catalog for psf', psffile)\n+        \n+        psfexargs = [psffile, \"-c\", etcpath +\"default.psfex\", \"-WRITE_XML\", \"Y\"]\n+        Pipeline.execute( \"psfex\", psfexargs, wait=True)\n+        #---- inline coaddpsf end\n+        \n+        \n+        #Run SExtactor in double detection mode compiling the coadd catalog\n+        #---- start inline constuct_coadd_catalog_sexcall\n+        psfoutfile = cc_image_ext.split(\".fits\")[0] +\"_psfcat.psf\"\n+        detpsffile = detection_image.split(\".fits\")[0] + \"_psfcat.psf\"\n+        minus_objectimage = cc_image_ext.split(\".fits\")[0] +\"_mobjects.fits\"\n+        catalog_name = Pipeline.get_catalog_name(nhcoadd_out, tilename, band, use_relative_paths = True)\n+        Qa_log_reporter.output_file_exists('Psf from coadd', psfoutfile)\n+        Qa_log_reporter.output_file_exists('Psf from detimage', detpsffile)\n+        \n+        args = [detection_image+\",\"+cc_image_ext, \"-c\", etcpath +\"sex.config \", \"-FILTER_NAME\", kernelfile]\n+        args += [\"-STARNNW_NAME\", etcpath +\"sex.nnw\", \"-PARAMETERS_NAME\", etcpath +'sex.param_coadd_sersic']\n+        args += [\"-CATALOG_TYPE\", \"FITS_1.0\", \"-CATALOG_NAME\", catalog_name, \"-MEMORY_BUFSIZE\", \"2048 \"]\n+        #drop the weight\n+        #args += [\"-WEIGHT_TYPE\", \"MAP_WEIGHT\", \"-WEIGHT_IMAGE\", detection_weight_image+\",\"+cc_weightname]\n+        args += [\"-MAG_ZEROPOINT\", str(hdr_magzp), \"-PSF_NAME\", detpsffile+\",\"+psfoutfile, \"-VERBOSE_TYPE\", Pipeline.evaluate_arg(verbose, \"NORMAL\", \"QUIET\")]\n+        args += ['-BACK_TYPE','MANUAL', '-BACK_VALUE', '0.0,0.0'] #don't subtract backgrounds\n+        #args += ['-BACK_TYPE','AUTO'] #subtract background\n+        args += ['-CHECKIMAGE_TYPE', '-OBJECTS', '-CHECKIMAGE_NAME', minus_objectimage]\n+        #---- end inline construct_coadd_catalog_sexcall\n+        \n+        retval = Pipeline.execute(\"sex\", args, wait=True )\n+        Qa_log_reporter.output_file_exists('Coadd double detection catalog from detimage', cc_outcat)\n+        #\n+    #\n+    #retval = Pipeline.execute(euclid_bin + os.sep +'coadd_catalog', args, wait = True)\n+    qafile = nhcoadd_out + os.sep + tilename +'_' +band +'_cat.fits'\n+    #Qa.qa_check(coadd_catalog, qa_file = qafile)\n+    print(\"*** Pythonised coadd catalog completed here! ***\")\n+    Pipeline.saveLog(ramdisk, 'coadd_catalog, band ' +band)\n+    \n+    print('catalog ', band, ' done')\n+    Metadata_Collector.collect_metadata(qafile, globals(), filetype = 'red_cat', BAND = band)\n+    Metadata_Collector.collect_metadata(nhcoadd_out + os.sep + tilename +'_' +band +'_psfcat.psf', globals(), filetype = 'red_psfcat', BAND = band)\n+    #<end name = \"parallel3\">\n+#\n+Pipeline.log(\"End parallel section: make coadd catalogs\")\n+print(\"switch back to \", cwd)\n+os.chdir(cwd)\n+\n+Pipeline.merge_logs(ramdisk, archive_root +os.sep +run_dir + os.sep +'log' +os.sep +'Coadd_detection_catalog_' +job_id +'.log')\n+\n+if stackpsf_version == 1:\n+    Pipeline.log(\"Parallel section: stack psf\")\n+    for band in bands:\n+        #<start name = \"parallel4\">\n+        #stackPSF\n+        Pipeline.log(\"excute stackpsf for band \" + str(band))\n+        \n+        #duplicate the coadd name from the fitscombine coadd section\n+        coaddname = nhcoadd_out +os.sep +tilename +'_' +str(band) +'.fits' +Pipeline.evaluate_arg(savefpack, '.fz','')\n+        catalog_name = Pipeline.get_catalog_name(nhcoadd_out, tilename, band)\n+        reference_catalog, ra_column, dec_column, mag_column = Pipeline.select_reference_catalog(catalog_name, vis_position_cat, band)\n+        \n+        Pipeline.log(\"got input parameters ...\")\n+        \n+        #as default, use this catalog for stackpsf\n+        stackpsf_catalog = reference_catalog\n+        stackpsf_ra_column = ra_column\n+        stackpsf_dec_column = dec_column\n+        \n+        if use_stackregions:\n+            #in this case, overwrite the catalog for stackpsf\n+            catalog_outputfile = nhcoadd_out +os.sep +tilename +'_' +str(band) +'_psfid_catalog.fits'\n+            stackpsf_catalog, stackpsf_ra_column, stackpsf_dec_column, mag_column = Pipeline.psfid_2_catalog(coaddname, catalog_outputfile)\n+        #\n+        \n+        #psfargs0 = [os.getenv(\"EUCLID_HOME\") +os.sep +\"python\" +os.sep +\"pybin\" +os.sep +\"StackPsfExec.py\"]\n+        psfargs1 = [\"--position_cat\", stackpsf_catalog, \"--ra\", stackpsf_ra_column, \"--dec\", stackpsf_dec_column, \"--mag_entry\", mag_column]\n+        psfargs2 = [\"--coadd_zp\", str(coadd_zp), \"--tilename\", tilename, \"--band\", band, \"--SElist\", bgsublist, \"--outdir\", nhcoadd_out]\n+        psfargs3 = [\"--ramdisk\", ramdisk, \"--resampledir\", resampledir_nhcoadd, \"--coadd\", coaddname, \"--max_layer_num\", \"1000\", \"--clean_up\", str(clean_up)]\n+        psfargs4 = [\"--keep_edge_obj\", \"--coadd_cat\", catalog_name, \"--multiprocesses\", str(  int( multiprocesses/len(bands) )  ) ]\n+        #psfargs4 = [\"--keep_edge_obj\", \"--multiproceses\", str(  int( multiprocesses/len(bands) )  ) ]\n+        psfargs5 = [\"--bandpass_value\", str( bandpasses[\"Bandpass_\" +band] ), \"--swarp_resampling\", \"LANCZOS3\", \"--max_separation_for_match\", str(2*float(tileinfo[3]))]\n+        psfargs6 = [\"--loopswarp_chunks\", str(loopswarp_chunks)]\n+        \n+        psfargs = psfargs1 +psfargs2 +psfargs3 +psfargs4 +psfargs5 +psfargs6\n+        \n+        Pipeline.log(\"psfargs \" +str(psfargs))\n+        Pipeline.execute(\"EXT_PF1_StackPsfExec\", psfargs, wait=True )\n+        \n+        output_stackpsf = nhcoadd_out +os.sep +tilename +'_' +str(band) +'_stackedPSF.fits' \n+        \n+        #update stackpsf with the real reference catalog\n+        Pipeline.update_stackpsf_with_reference_catalog_positions(bgsublist, band, output_stackpsf, reference_catalog, nhcoadd_out, ra_ref = ra_column, dec_ref = dec_column)\n+        \n+        Pipeline.saveLog(ramdisk, 'stackpsf, band ' +band)\n+        \n+        print('stackpsf ', band, ' done')\n+        #<end name = \"parallel4\">\n+    Pipeline.log(\"End parallel section: stack psfs\")\n+    #\n+else:\n+    Pipeline.log(\"Parallel section: stack psf version 2\")\n+    (infile, fileid, unused, zp, zperr) = Pipeline.resolve_image_params(list(bandlists.values())[0][0])\n+    naxis1, naxis2 = Pipeline.image_dim( infile )\n+    for band in bands:\n+        #stackPSF\n+        print('excute stackpsf for band ', band)\n+        \n+        #duplicate the coadd name from the fitscombine coadd section\n+        coaddname = nhcoadd_out +os.sep +tilename +'_' +str(band) +'.fits' +Pipeline.evaluate_arg(savefpack, '.fz','')\n+        catalog_name = Pipeline.get_catalog_name(nhcoadd_out, tilename, band)\n+        reference_catalog, ra_column, dec_column, mag_column = Pipeline.select_reference_catalog(catalog_name, vis_position_cat, band)\n+        \n+        #optionally: cut the reference catalog\n+        stackpsf_catalog = Pipeline.randomly_cut_catalog(reference_catalog, cut_catalog_to_percent)\n+        stackpsf_ra_column = ra_column\n+        stackpsf_dec_column = dec_column\n+        \n+        if use_stackregions:\n+            catalog_outputfile = nhcoadd_out +os.sep +tilename +'_' +str(band) +'_psfid_catalog.fits'\n+            stackpsf_catalog, stackpsf_ra_column, stackpsf_dec_column, mag_column = Pipeline.psfid_2_catalog(coaddname, catalog_outputfile)\n+        #\n+        \n+        psfargs0 = [\"--position_cat\", stackpsf_catalog, \"--ra\", stackpsf_ra_column, \"--dec\", stackpsf_dec_column, \"--mag\", mag_column]\n+        psfargs1 = [\"--tilename\", tilename, \"--band\", band, \"--SElist\", bgsublist, \"--outdir\", nhcoadd_out]\n+        psfargs2 = [\"--ramdisk\", ramdisk, \"--coadd\", coaddname, \"--swarp_resampling\", \"LANCZOS3\" ]\n+        psfargs3 = [\"--multiprocesses\", str(  int( multiprocesses ) ), \"--naxis1\", str(naxis1), \"--naxis2\", str(naxis2) ]\n+        #[\"--max_zp\", \"33.5\", \"--min_zp\", \"27.0\", \"--default_zp\", str(coadd_zp) ]\n+        psfargs4 = [\"--swarp_defaults\", etcpath +\"default.swarp\", \"--default_zp\", str(coadd_zp)]\n+        #2*tileinfo[3]: 2 pixels of the input science images\n+        #the coadd is produced with the same pixelsize than the input images\n+        psfargs5 = [\"--log-level\", \"DEBUG\", \"--clean_up\", str(clean_up), \"--max_separation_for_match\", str(2*float(tileinfo[3]))]\n+        psfargs6 = [\"--loopswarp_chunks\", str(loopswarp_chunks)]\n+        #psfargs5 = [\"--bandpass_value\", str( bandpasses[\"Bandpass_\" +band] )]\n+        \n+        psfargs = psfargs0 +psfargs1 +psfargs2 +psfargs3 +psfargs4 +psfargs5 +psfargs6\n+        \n+        print(psfargs)\n+        Pipeline.execute(\"EXT_StackPSF\", psfargs, wait=True )\n+        \n+        output_stackpsf = nhcoadd_out +os.sep +tilename +os.sep +band +os.sep +tilename +'_' +str(band) +'_stackedPSF.fits' \n+        Pipeline.update_stackpsf_with_reference_catalog_positions(bgsublist, band, output_stackpsf, reference_catalog, nhcoadd_out, ra_ref = ra_column, dec_ref = dec_column)\n+        \n+        Pipeline.saveLog(ramdisk, 'stackpsf, band ' +band)\n+        \n+        print('stackpsf ', band, ' done')\n+    #\n+    Pipeline.log(\"End section: stack psfs\")\n+#\n+Pipeline.merge_logs(ramdisk, archive_root +os.sep +run_dir + os.sep +'log' +os.sep +'StackPSF_' +job_id +'.log')\n+\n+Pipeline.log(\"Get outputs\")\n+\n+#browse the coadd - outdir for products\n+coadds, catalogs, psfs = Pipeline.get_outputs(nhcoadd_out, tilename, bands, stage = 2, modprefix = Pipeline.evaluate_arg(use_stackregions, \"mod_\", \"\"))\n+validation_images = Pipeline.get_validation_data(valdir)\n+validation_images = Pipeline.add_config_file_to_validation(validation_images, archive_root)\n+\n+#check coadds, catalogs and psfs, don't crash, if not all validation images are there\n+outputs = Pipeline.test_output_integrity({'coadds':coadds, 'coadd_catalogs': catalogs, 'psfs':psfs})\n+\n+#get an se_image: the bandlist contains more than just the filename. Extract it\n+outputs['se_image'] = Pipeline.get_se_images( bandlists)\n+outputs['validation_images'] = validation_images\n+outputs = Pipeline.put_background_data_to_outputs(bgsub_dir, outputs, tar = True, gzip = True, save_backgrounds_for_validation = save_backgrounds_for_validation)\n+\n+\n+Pipeline.log(\"Put outputs into output queue\")\n+\n+output.put(outputs)\n+\n+\n+#collect the log metadata\n+Metadata_Collector.collect_logs()\n+\n+Pipeline.log(\"cleanup\")\n+#remove the list files but not the data\n+\n+#outauxpath_nhcoadd is per band in ramdisk\n+#-> fix that\n+#copy_success = Pipeline.copy_dir(outauxpath_nhcoadd, auxdir, filtertuple = ('.list', '.dat'))\n+#...and clean up\n+#Pipeline.delete_dir(outauxpath_nhcoadd, cleanup = copy_success)\n+\n+\n+Pipeline.log(\"Pipeline script done\")\n+\n",
                            "add option to swarp coadds in chunks and then combine to full product",
                            "Michael",
                            "2023-07-10T12:15:03.000+02:00",
                            "7b8b6a1cddb18e2a9c64452eaaba612cfdbbccea"
                        ]
                    ],
                    "EXT_PF1_GEN_P2/python/EXT_PF1_GEN_P2/Pipeline/LoopSwarp.py": [
                        [
                            "@@ -22,7 +22,7 @@ from EXT_PF1_GEN_P2_LIBS.file import FitsServices\n import copy\n \n class LoopSwarp():\n-    def __init__(self,executor, chunksize = 100, keep_shallow_coadds = False):\n+    def __init__(self, executor, chunksize = 100, keep_shallow_coadds = False):\n         self.executor = executor\n         self.chunksize = chunksize\n         \n@@ -147,76 +147,107 @@ class LoopSwarp():\n     #\n     \n     \n+    def delete_list(self, listfile, execute_delete):\n+        if not execute_delete:\n+            return\n+        #\n+        f = open(listfile, 'r')\n+        files = f.readlines()\n+        f.close()\n+        for f in files:\n+            if f.endswith(\"\\n\"):\n+                f = f[:-1]\n+            f = f.rsplit(\"[\", 1)[0]\n+            if os.path.exists(f) and os.path.isfile(f):\n+                os.remove(f)\n+            #\n+        #\n+    #\n+    \n     def write_fits_file(self, _filename, _data, _header):\n         print(\"LoopSwarp writes fits file \", _filename)\n         hdu0 = fits.PrimaryHDU(data = _data, header = _header)\n         fits.HDUList([hdu0]).writeto(_filename, overwrite=True)    \n     #\n     \n-    def image(self, command):\n+    def default_dataProduction_callback(img_list, wgt_list, scale_list):\n+        \"\"\"\n+        this function allows modifying the lists, in case of stackpsf \n+        generating the input images on demand\n+        The last boolean value gives instruction, if the lists should be kept\n+        (for coadding the StackedFrames, or deleted (in case of the simulated psf images that are \n+        only used once for coadding and obsolete afterwards))\n+        \"\"\"\n+        return img_list, wgt_list, scale_list, False\n+    #\n+    \n+    def image(self, command, data_production_callback_command = default_dataProduction_callback):\n         imagelist, weightlist, fscalelist = self.get_input_lists(command)\n         f = open(imagelist, 'r')\n         inputs = f.readlines()\n         f.close()\n         retval = -1\n+          \n+        #chunk the lists and process in small parts\n+        images = self.read_list(imagelist)\n+        weights = self.read_list(weightlist)\n+        fscale = self.read_list(fscalelist)\n+        shallow_coadds = []\n         \n-        if len(inputs) < 2*self.chunksize:\n-            #process the data with the provided command\n-            retval = self.executor.execute('CT_SWarp', command, wait = True)\n-        else:\n+        for cid in range( (len(inputs)//self.chunksize) +1):\n+            #copy command\n+            cmd = copy.deepcopy(command)\n+    \n+            #get the chunks\n+            _start = cid*self.chunksize\n+            end = min( (cid+1)*self.chunksize, len(inputs) )\n             \n-            #chunk the lists and process in small parts\n-            images = self.read_list(imagelist)\n-            weights = self.read_list(weightlist)\n-            fscale = self.read_list(fscalelist)\n-            shallow_coadds = []\n+            #chop them up\n+            img_chunk = images[_start: end]\n+            wgt_chunk = weights[_start: end]\n+            fsc_chunk = fscale[_start: end]\n             \n-            for cid in range( (len(inputs)//self.chunksize) +1):\n-                #copy command\n-                cmd = copy.deepcopy(command)\n-        \n-                #get the chunks\n-                _start = cid*self.chunksize\n-                end = min( (cid+1)*self.chunksize, len(inputs) )\n-                        \n-                img = self.write_list(\n-                        images[_start: end], \n-                        imagelist.rsplit(\".\",1)[0] +\"_\" +str(cid) +\".list\") \n-                wgt = self.write_list(\n-                        weights[_start: end], \n-                        weightlist.rsplit(\".\",1)[0] +\"_\" +str(cid) +\".list\")\n-                fsc = self.write_list(\n-                        fscale[_start: end], \n-                        fscalelist.rsplit(\".\",1)[0] +\"_\" +str(cid) +\".list\")\n-                        \n-                cmd = self.replace_in_command(cmd, \"@\" +imagelist, \"@\"+img)\n-                cmd = self.replace_in_command(cmd, \"@\" +weightlist, \"@\"+wgt)\n-                cmd = self.replace_in_command(cmd, \"@\" +fscalelist, \"@\"+fsc)\n-                \n-                image_out = cmd[cmd.index('-IMAGEOUT_NAME') +1].rsplit(\".fits\")[0] +\"_\" +str(cid) +\".fits\"\n-                weight_out = cmd[cmd.index('-WEIGHTOUT_NAME') +1].rsplit(\".fits\")[0] +\"_\" +str(cid) +\".fits\"\n-                \n-                cmd = self.replace_in_command(cmd, \"-IMAGEOUT_NAME\", image_out ,offset = 1)\n-                cmd = self.replace_in_command(cmd, \"-WEIGHTOUT_NAME\", weight_out ,offset = 1)\n-                \n-                print(\"LoopSwarp cmd \", cmd)\n-                retval = self.executor.execute('CT_SWarp', cmd, wait = True)\n-                print(\"LoopSwarp returns \", retval)\n-                shallow_coadds.append((image_out, weight_out))\n-                print(\"shallow coadds appended \", shallow_coadds[-1])\n-            #\n+            #see, if the data needs to be made\n+            img_chunk, wgt_chunk, fsc_chunk, delete_lists = data_production_callback_command(img_chunk, wgt_chunk, fsc_chunk)\n             \n-            if self.combine_and_write:\n-                coadd, coadd_header, weight, weight_header = self.combine_shallow_coadds(shallow_coadds, weighted = True)\n-                self.write_fits_file(command[command.index('-IMAGEOUT_NAME') +1], coadd, coadd_header)\n-                self.write_fits_file(command[command.index('-WEIGHTOUT_NAME') +1], weight, weight_header)\n-                del coadd\n-                del weight\n-                del coadd_header\n-                del weight_header\n-                if not self.keep_shallow_coadds:\n-                    self.delete_shallow_coadds(shallow_coadds)\n-                #\n+            img = self.write_list(\n+                    img_chunk, \n+                    imagelist.rsplit(\".\",1)[0] +\"_\" +str(cid) +\".list\") \n+            wgt = self.write_list(\n+                    wgt_chunk, \n+                    weightlist.rsplit(\".\",1)[0] +\"_\" +str(cid) +\".list\")\n+            fsc = self.write_list(\n+                    fsc_chunk, \n+                    fscalelist.rsplit(\".\",1)[0] +\"_\" +str(cid) +\".list\")\n+                    \n+            cmd = self.replace_in_command(cmd, \"@\" +imagelist, \"@\"+img)\n+            cmd = self.replace_in_command(cmd, \"@\" +weightlist, \"@\"+wgt)\n+            cmd = self.replace_in_command(cmd, \"@\" +fscalelist, \"@\"+fsc)\n+            \n+            image_out = cmd[cmd.index('-IMAGEOUT_NAME') +1].rsplit(\".fits\")[0] +\"_\" +str(cid) +\".fits\"\n+            weight_out = cmd[cmd.index('-WEIGHTOUT_NAME') +1].rsplit(\".fits\")[0] +\"_\" +str(cid) +\".fits\"\n+            \n+            cmd = self.replace_in_command(cmd, \"-IMAGEOUT_NAME\", image_out ,offset = 1)\n+            cmd = self.replace_in_command(cmd, \"-WEIGHTOUT_NAME\", weight_out ,offset = 1)\n+            \n+            print(\"LoopSwarp cmd \", cmd)\n+            retval = self.executor.execute('CT_SWarp', cmd, wait = True)\n+            print(\"LoopSwarp returns \", retval)\n+            shallow_coadds.append((image_out, weight_out))\n+            print(\"shallow coadds appended \", shallow_coadds[-1])\n+            self.delete_list(img, delete_lists)\n+        #\n+        \n+        if self.combine_and_write:\n+            coadd, coadd_header, weight, weight_header = self.combine_shallow_coadds(shallow_coadds, weighted = True)\n+            self.write_fits_file(command[command.index('-IMAGEOUT_NAME') +1], coadd, coadd_header)\n+            self.write_fits_file(command[command.index('-WEIGHTOUT_NAME') +1], weight, weight_header)\n+            del coadd\n+            del weight\n+            del coadd_header\n+            del weight_header\n+            if not self.keep_shallow_coadds:\n+                self.delete_shallow_coadds(shallow_coadds)\n             #\n         #\n            \n@@ -355,7 +386,6 @@ class LoopSwarp():\n                 \n                 #clean up the remaining mask resamples\n                 self.executor.delete_list(resampled_mask_list, cleanup = True, _from = resampledir_nhcoadd)\n-\n             #\n             \n             if self.combine_and_write:\n",
                            "loopswarp with input file generation on demand",
                            "Michael",
                            "2023-07-15T22:35:56.000+02:00",
                            "9d73cee49a5e1faa2f94e94e1605cbe516ecb7cc"
                        ],
                        [
                            "@@ -0,0 +1,372 @@\n+\"\"\"\n+Copyright (C) 2012-2020 Euclid Science Ground Segment\n+\n+This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n+Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n+any later version.\n+\n+This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n+warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n+details.\n+\n+You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n+the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n+\n+\"\"\"\n+import os\n+import numpy\n+from astropy.io import fits\n+\n+from EXT_PF1_GEN_P2_LIBS.file import ExtractImage\n+from EXT_PF1_GEN_P2_LIBS.file import FitsServices\n+import copy\n+\n+class LoopSwarp():\n+    def __init__(self,executor, chunksize = 100, keep_shallow_coadds = False):\n+        self.executor = executor\n+        self.chunksize = chunksize\n+        \n+        #parameter for testing\n+        self.combine_and_write = True \n+        self.keep_shallow_coadds = keep_shallow_coadds\n+    #\n+    \n+    def get_input_lists(self, command):\n+        input_lists = {\"IMAGES\":\"\",\"WEIGHT_IMAGE\":\"\", \"FSCALE_DEFAULT\":\"\"}\n+        for i in range(len(command)):\n+            if command[i].startswith('@'):\n+                if i > 0 and (\"FSCALE_DEFAULT\" in command[i-1]):\n+                    input_lists[\"FSCALE_DEFAULT\"] = command[i][1:]\n+                elif i > 0 and (\"WEIGHT_IMAGE\" in command[i-1]):\n+                    input_lists[\"WEIGHT_IMAGE\"] = command[i][1:]\n+                else:\n+                    input_lists[\"IMAGES\"] = command[i][1:]\n+                #\n+            #\n+        #\n+        return input_lists[\"IMAGES\"], input_lists[\"WEIGHT_IMAGE\"], input_lists[\"FSCALE_DEFAULT\"]\n+    #\n+    \n+    def read_list(self, listname):\n+        f = open(listname, \"r\")\n+        ll = f.readlines()\n+        f.close()\n+        return ll   \n+    #\n+    \n+    def write_list(self, listarray, listname):\n+        f = open(listname, \"w\")\n+        f.writelines(listarray)\n+        f.close()\n+        return listname\n+    #\n+    \n+    \n+    def replace_in_command(self, command, _value, replace, offset = 0):\n+        if _value in command:\n+            command[ command.index(_value) +offset] = replace\n+        return command\n+    #\n+    \n+    \n+    def delete_shallow_coadds(self, shallow_coadds):\n+        for t in shallow_coadds:\n+            for tt in t:\n+                if type(tt) == type(\"abc\") and os.path.exists(tt):\n+                    os.remove(tt)\n+                #\n+            #\n+        #\n+    #\n+    \n+    def combine_shallow_coadds(self, shallow_tuples, weighted = True):\n+        \n+        def weight_image(img, wgt, weighted):\n+            if weighted:\n+                return img*wgt\n+            else:\n+                return img\n+            #\n+        #\n+        def read_weight(weight, weighted):\n+            if weighted:\n+                return FitsServices.read_data(weight, hdu = 0)\n+            else:\n+                return weight\n+            #\n+        #\n+        (img, weight) = shallow_tuples[0]\n+        coadd = FitsServices.read_data(img, hdu = 0)\n+        coadd_weight = read_weight(weight, weighted)\n+        \n+        coadd_header = FitsServices._read_astropy_header(img, hdu = 0)\n+        weight_header = fits.Header()\n+        if weighted:\n+            weight_header = FitsServices._read_astropy_header(coadd_weight, hdu = 0)\n+        #\n+        \n+        coadd = weight_image(coadd, coadd_weight, weighted)\n+        weight_sum = coadd_weight\n+        \n+        for t in shallow_tuples[1:]:\n+            temp_coadd = FitsServices.read_data(t[0], hdu = 0)\n+            temp_coadd_weight = read_weight(t[1], weighted)\n+            \n+            coadd = coadd +weight_image(temp_coadd, temp_coadd_weight, weighted)\n+            weight_sum = weight_sum +temp_coadd_weight\n+            \n+            del temp_coadd\n+            del temp_coadd_weight\n+        #\n+        \n+        if weighted:\n+            #divison by zero. \n+            #set chunk_image to 0.0 where weight_sum == 0.0\n+            weight_sum = numpy.where(weight_sum == 0.0, 1.0e24, weight_sum) \n+            coadd = coadd/weight_sum\n+            coadd[weight_sum == 1.0e24] = 0.0\n+        #\n+        return coadd, coadd_header, weight_sum, weight_header\n+    #\n+    \n+    \n+    def combine_shallow_masks(self, shallow_tuples):\n+        (img, weight) = shallow_tuples[0]\n+        mask = FitsServices.read_data(img, hdu = 0)\n+        mask_header = FitsServices._read_astropy_header(img, hdu = 0)\n+        \n+        for t in shallow_tuples[1:]:\n+            temp_mask = FitsServices.read_data(t[0], hdu = 0)\n+            \n+            mask = numpy.bitwise_or(mask, temp_mask)\n+            \n+            del temp_mask\n+        #\n+        \n+        return mask, mask_header\n+    #\n+    \n+    \n+    def write_fits_file(self, _filename, _data, _header):\n+        print(\"LoopSwarp writes fits file \", _filename)\n+        hdu0 = fits.PrimaryHDU(data = _data, header = _header)\n+        fits.HDUList([hdu0]).writeto(_filename, overwrite=True)    \n+    #\n+    \n+    def image(self, command):\n+        imagelist, weightlist, fscalelist = self.get_input_lists(command)\n+        f = open(imagelist, 'r')\n+        inputs = f.readlines()\n+        f.close()\n+        retval = -1\n+        \n+        if len(inputs) < 2*self.chunksize:\n+            #process the data with the provided command\n+            retval = self.executor.execute('CT_SWarp', command, wait = True)\n+        else:\n+            \n+            #chunk the lists and process in small parts\n+            images = self.read_list(imagelist)\n+            weights = self.read_list(weightlist)\n+            fscale = self.read_list(fscalelist)\n+            shallow_coadds = []\n+            \n+            for cid in range( (len(inputs)//self.chunksize) +1):\n+                #copy command\n+                cmd = copy.deepcopy(command)\n+        \n+                #get the chunks\n+                _start = cid*self.chunksize\n+                end = min( (cid+1)*self.chunksize, len(inputs) )\n+                        \n+                img = self.write_list(\n+                        images[_start: end], \n+                        imagelist.rsplit(\".\",1)[0] +\"_\" +str(cid) +\".list\") \n+                wgt = self.write_list(\n+                        weights[_start: end], \n+                        weightlist.rsplit(\".\",1)[0] +\"_\" +str(cid) +\".list\")\n+                fsc = self.write_list(\n+                        fscale[_start: end], \n+                        fscalelist.rsplit(\".\",1)[0] +\"_\" +str(cid) +\".list\")\n+                        \n+                cmd = self.replace_in_command(cmd, \"@\" +imagelist, \"@\"+img)\n+                cmd = self.replace_in_command(cmd, \"@\" +weightlist, \"@\"+wgt)\n+                cmd = self.replace_in_command(cmd, \"@\" +fscalelist, \"@\"+fsc)\n+                \n+                image_out = cmd[cmd.index('-IMAGEOUT_NAME') +1].rsplit(\".fits\")[0] +\"_\" +str(cid) +\".fits\"\n+                weight_out = cmd[cmd.index('-WEIGHTOUT_NAME') +1].rsplit(\".fits\")[0] +\"_\" +str(cid) +\".fits\"\n+                \n+                cmd = self.replace_in_command(cmd, \"-IMAGEOUT_NAME\", image_out ,offset = 1)\n+                cmd = self.replace_in_command(cmd, \"-WEIGHTOUT_NAME\", weight_out ,offset = 1)\n+                \n+                print(\"LoopSwarp cmd \", cmd)\n+                retval = self.executor.execute('CT_SWarp', cmd, wait = True)\n+                print(\"LoopSwarp returns \", retval)\n+                shallow_coadds.append((image_out, weight_out))\n+                print(\"shallow coadds appended \", shallow_coadds[-1])\n+            #\n+            \n+            if self.combine_and_write:\n+                coadd, coadd_header, weight, weight_header = self.combine_shallow_coadds(shallow_coadds, weighted = True)\n+                self.write_fits_file(command[command.index('-IMAGEOUT_NAME') +1], coadd, coadd_header)\n+                self.write_fits_file(command[command.index('-WEIGHTOUT_NAME') +1], weight, weight_header)\n+                del coadd\n+                del weight\n+                del coadd_header\n+                del weight_header\n+                if not self.keep_shallow_coadds:\n+                    self.delete_shallow_coadds(shallow_coadds)\n+                #\n+            #\n+        #\n+           \n+        return retval\n+    #\n+    \n+    \n+    def coverage(self, command):\n+        imagelist, _, _ = self.get_input_lists(command)\n+        f = open(imagelist, 'r')\n+        inputs = f.readlines()\n+        f.close()\n+        retval = -1\n+        \n+        if len(inputs) < 2*self.chunksize:\n+            #process the data with the provided command\n+            retval = self.executor.execute('CT_SWarp', command, wait = True)\n+        else:\n+            \n+            #chunk the lists and process in small parts\n+            images = self.read_list(imagelist)\n+            \n+            shallow_coadds = []\n+            \n+            for cid in range( (len(inputs)//self.chunksize) +1):\n+                #copy command\n+                cmd = copy.deepcopy(command)\n+                \n+                #get the chunks\n+                _start = cid*self.chunksize\n+                end = min( (cid+1)*self.chunksize, len(inputs) )\n+                        \n+                img = self.write_list(\n+                        images[_start: end], \n+                        imagelist.rsplit(\".\",1)[0] +\"_\" +str(cid) +\".list\") \n+                        \n+                cmd = self.replace_in_command(cmd, \"@\" +imagelist, \"@\"+img)\n+                \n+                image_out = cmd[cmd.index('-IMAGEOUT_NAME') +1].rsplit(\".fits\")[0] +\"_\" +str(cid) +\".fits\"\n+                #weight_out = cmd[cmd.index('-WEIGHTOUT_NAME') +1].rsplit(\".fits\")[0] +\"_\" +str(cid) +\".fits\"\n+                \n+                cmd = self.replace_in_command(cmd, \"-IMAGEOUT_NAME\", image_out ,offset = 1)     \n+                #cmd = self.replace_in_command(cmd, \"-WEIGHTOUT_NAME\", weight_out ,offset = 1)\n+                \n+                print(\"LoopSwarp cmd \", cmd)\n+                retval = self.executor.execute('CT_SWarp', cmd, wait = True)\n+                shallow_coadds.append((image_out, 0))\n+            #\n+            \n+            if self.combine_and_write:\n+                coadd, coadd_header, weight, weight_header = self.combine_shallow_coadds(shallow_coadds, weighted = False)\n+                self.write_fits_file(command[command.index('-IMAGEOUT_NAME') +1], coadd, coadd_header)\n+                del coadd\n+                del weight\n+                del coadd_header\n+                del weight_header\n+                if not self.keep_shallow_coadds:\n+                    self.delete_shallow_coadds(shallow_coadds)\n+                #\n+            #\n+        #\n+           \n+        return retval\n+    #\n+    \n+    \n+    def psfid(self, command):\n+        return self.coverage(command)\n+    #\n+    \n+    \n+    def mask(self, command1, command2, resampledir_nhcoadd, postfix = \".resamp_mask.fits\"):\n+        imagelist, weightlist, fscalelist = self.get_input_lists(command1)\n+        f = open(imagelist, 'r')\n+        inputs = f.readlines()\n+        f.close()\n+        retval = -1\n+        \n+        if len(inputs) < 2*self.chunksize:\n+            #process the data with the provided command\n+            retval = self.executor.execute('CT_SWarp', command1, wait = True)\n+            \n+            #get the resampled mask list and change the command settings\n+            resampled_mask_list = self.executor.resampled_input_list(imagelist, resampledir_nhcoadd, postfix = \".resamp_mask.fits\")\n+            \n+            imagelist, _, _ = self.get_input_lists(command2)\n+            command2 = self.replace_in_command(command2, \"@\" +imagelist, \"@\"+resampled_mask_list)\n+            \n+            retval = self.executor.execute('CT_SWarp', command2, wait = True)\n+        else:\n+            \n+            #chunk the lists and process in small parts\n+            images = self.read_list(imagelist)\n+            \n+            shallow_masks = []\n+            \n+            for cid in range( (len(inputs)//self.chunksize) +1):\n+                #copy command\n+                cmd1 = copy.deepcopy(command1)\n+                cmd2 = copy.deepcopy(command2)\n+                \n+                #get the chunks\n+                _start = cid*self.chunksize\n+                end = min( (cid+1)*self.chunksize, len(inputs) )\n+                \n+                mask_list_name = imagelist.rsplit(\".\",1)[0] +\"_\" +str(cid) +\".list\"\n+                img = self.write_list(\n+                        images[_start: end], \n+                        mask_list_name) \n+                        \n+                cmd1 = self.replace_in_command(cmd1, \"@\" +imagelist, \"@\"+img)\n+                print(\"replace \", imagelist, \" with \", img)\n+                \n+                image_out = cmd1[cmd1.index('-IMAGEOUT_NAME') +1].rsplit(\".fits\")[0] +\"_\" +str(cid) +\".fits\"\n+                #weight_out = cmd1[cmd1.index('-WEIGHTOUT_NAME') +1].rsplit(\".fits\")[0] +\"_\" +str(cid) +\".fits\"\n+                \n+                cmd1 = self.replace_in_command(cmd1, \"-IMAGEOUT_NAME\", image_out ,offset = 1)\n+                #cmd1 = self.replace_in_command(cmd1, \"-WEIGHTOUT_NAME\", weight_out ,offset = 1)\n+                print(\"replace IMAGEOUT_NAME \", image_out)\n+                \n+                print(\"LoopSwarp cmd1 \", cmd1)\n+                retval = self.executor.execute('CT_SWarp', cmd1, wait = True)\n+                \n+                #command2\n+                #collect resampled input list and and change mask to int\n+                resampled_mask_list = self.executor.resampled_input_list(mask_list_name, resampledir_nhcoadd, postfix = \".resamp_mask.fits\")\n+                masklist, _, _ = self.get_input_lists(command2)\n+                cmd2 = self.replace_in_command(cmd2, \"-IMAGEOUT_NAME\", image_out ,offset = 1)\n+                cmd2 = self.replace_in_command(cmd2, \"@\" +masklist, \"@\" +resampled_mask_list, offset = 0)\n+                print(\"replace \", masklist, \" with \", resampled_mask_list)\n+                \n+                print(\"LoopSwarp mask cmd2 \", cmd2)\n+                retval = self.executor.execute('CT_SWarp', cmd2, wait = True)\n+                \n+                shallow_masks.append((image_out, 0))\n+                \n+                #clean up the remaining mask resamples\n+                self.executor.delete_list(resampled_mask_list, cleanup = True, _from = resampledir_nhcoadd)\n+\n+            #\n+            \n+            if self.combine_and_write:\n+                mask, mask_header = self.combine_shallow_masks(shallow_masks)\n+                self.write_fits_file(command1[command1.index('-IMAGEOUT_NAME') +1], mask, mask_header)\n+                del mask\n+                del mask_header\n+                if not self.keep_shallow_coadds:\n+                    self.delete_shallow_coadds(shallow_masks)\n+                #\n+            #\n+        #\n+        return retval\n+    #\n",
                            "add option to swarp coadds in chunks and then combine to full product",
                            "Michael",
                            "2023-07-10T12:15:03.000+02:00",
                            "7b8b6a1cddb18e2a9c64452eaaba612cfdbbccea"
                        ]
                    ],
                    "EXT_PF1_GEN_P2/python/EXT_PF1_GEN_P2/Pipeline/stackPSF.original": [
                        [
                            "@@ -1,2736 +0,0 @@\n-#from __future__ import division, print_function\n-#from future_builtins import *\n-import datetime\n-import argparse\n-import sys\n-import numpy as np\n-from astropy.coordinates import SkyCoord \n-from astropy import units as u \n-from astropy.wcs import WCS\n-from astropy.io import fits\n-from scipy import ndimage\n-import matplotlib.pyplot as plt\n-#from db import DBConnection\n-#import _getWcsLibCorners\n-#from queries import ImageQ_django as IQ\n-import fitsio\n-import os \n-import copy\n-import json\n-from collections import OrderedDict\n-import  scipy.ndimage.measurements\n-import file\n-from EXT_PF1_GEN_P2_LIBS.file import FitsServices\n-from EXT_PF1_GEN_P2_LIBS.file import ExtractImage\n-from EXT_PF1_GEN_P2.file import PSFUtils\n-from EXT_PF1_GEN_P2.Pipeline import SigmaClip\n-from EXT_PF1_GEN_P2_LIBS.Pipeline.Pipeline import Pipeline\n-import matplotlib.pyplot as plt\n-import math\n-import subprocess\n-import shutil\n-import time\n-from EXT_PF1_GEN_P2_LIBS.astronomy.ArrayUtils import ArrayUtils\n-from enum import Enum\n-import multiprocessing as mp\n-from EXT_PF1_GEN_P2_LIBS.Pipeline import ProcessManager\n-import traceback\n-import operator\n-import logging\n-\n-__author__='Thomas Vassallo'\n-__email__ ='thomas.vassallo@physik.lmu.de'\n-\"\"\"\n-class Stamp():\n-    def __init__(self, image, x, y, stampSize, data_dim):\n-        self.stampShift = (stampSize - 1) // 2\n-        self.image      = np.zeros((int(stampSize), int(stampSize)))\n-        start = np.array((np.floor(y - self.stampShift), \n-                          np.floor(x - self.stampShift)), \n-                         dtype = 'int')\n-        end   = np.array((stampSize, stampSize)) + start\n-        stamp_dim   = np.array((stampSize, stampSize))\n-        delta_start = 0 - start\n-        delta_start[delta_start < 0] = 0\n-        delta_end   = data_dim - end\n-        delta_end[delta_end > 0]     = 0\n-        if np.all((end + delta_end) - (start + delta_start) > 0):\n-            data_start  = start + delta_start\n-            data_end    = end   + delta_end\n-            stamp_start = delta_start\n-            stamp_end   = stamp_dim + delta_end\n-\n-            self.image[int(stamp_start[0]):int(stamp_end[0]),\n-                       int(stamp_start[1]):int(stamp_end[1])] = image[\n-                           int(data_start[0]):int(data_end[0]),\n-                           int(data_start[1]):int(data_end[1])]\n-\"\"\"                           \n-\n-                           \n-class Stamp():\n-    def __init__(self, image, stampSize, data_dim):\n-        self.image = image\n-        self.stampSize = stampSize\n-        self.data_dim = data_dim               \n-        self.stamp = np.zeros((int(stampSize), int(stampSize)))\n-    #\n-                           \n-    def get_stamp_at(self, x, y):\n-        #print(\"get stamp at x,y \", x, y)\n-        stampShift = (self.stampSize - 1) // 2\n-        start = np.array((np.floor(y - stampShift), \n-                          np.floor(x - stampShift)), \n-                         dtype = 'int')\n-        end   = np.array((self.stampSize, self.stampSize)) + start\n-        stamp_dim   = np.array((self.stampSize, self.stampSize))\n-        delta_start = 0 - start\n-        delta_start[delta_start < 0] = 0\n-        delta_end   = self.data_dim - end\n-        delta_end[delta_end > 0]     = 0\n-        if np.all((end + delta_end) - (start + delta_start) > 0):\n-            data_start  = start + delta_start\n-            data_end    = end   + delta_end\n-            stamp_start = delta_start\n-            stamp_end   = stamp_dim + delta_end\n-            \n-            self.stamp[int(stamp_start[0]):int(stamp_end[0]),\n-                       int(stamp_start[1]):int(stamp_end[1])] = self.image[\n-                           int(data_start[0]):int(data_end[0]),\n-                           int(data_start[1]):int(data_end[1])]\n-        #\n-        return self.stamp\n-    #\n-#\n-\n-class WcsUtils():\n-    def __init__(self, image_header):\n-        self.image_header = image_header\n-        if \"PV1_0\" in self.image_header:\n-            self.image_header[\"CTYPE1\"] = \"RA---TPV\"\n-            self.image_header[\"CTYPE2\"] = \"DEC--TPV\"\n-        if \"ZNAXIS1\" in self.image_header:\n-            self.image_header[\"NAXIS\"]  = self.image_header[\"ZNAXIS\"]\n-            self.image_header[\"NAXIS1\"] = self.image_header[\"ZNAXIS1\"]\n-            self.image_header[\"NAXIS2\"] = self.image_header[\"ZNAXIS2\"]\n-            \n-            hits = []\n-            m = self.image_header._record_map\n-            for k in m:\n-                if type(m[k][\"value\"]) == type( () ):\n-                    hits.append(k)\n-                #\n-            #\n-            for h in hits:\n-                self.image_header.delete(h)\n-                #print(\"delete key \", h)\n-            #\n-        if \"ERRORS\" in self.image_header:\n-            self.image_header.delete(\"ERRORS\")\n-    #\n-\n-    def py_pix2world(self, x, y):\n-        \"\"\"\n-        For historical reasons, skycoords is a linear array\n-        of the format [ra1, dec1, ra2, dec2, ..., ran, decn]\n-        The output is a ndarray of ra and an ndarray of dec\n-        \"\"\"\n-        wcs = WCS(self.image_header)\n-        #print(\"wcs = \", wcs)\n-        radec = wcs.all_pix2world(x, y, 1)\n-        \n-        return radec[0], radec[1] #ra, dec\n-    #\n-    \n-    \n-    def py_world2pix(self, coords):\n-        \"\"\"\n-        For historical reasons, skycoords is a linear array\n-        of the format [ra1, dec1, ra2, dec2, ..., ran, decn]\n-        The output is a ndarray of ra and an ndarray of dec\n-        \"\"\"\n-        wcs = WCS(self.image_header)\n-        \n-        pix = wcs.all_world2pix(coords[0::2], coords[1::2], 1)\n-        \n-        return pix[0], pix[1] #x, y\n-    #\n-\n-class OutputStackedPSF():\n-    def __init__(self, totobj, stamp_size, tmpdir, tilename, band):\n-        self.tmpdir     = tmpdir\n-        self.tilename   = tilename\n-        self.band       = band\n-        self.totobj     = totobj\n-        self.nobj       = np.ceil(np.sqrt(self.totobj))\n-        self.stamp_size = stamp_size\n-        npixside        = self.nobj * self.stamp_size\n-        self.grid_image = np.zeros((int(npixside), int(npixside)))\n-        self.info_table = np.zeros(\n-            self.totobj, dtype = [('RA',      'f8'),\n-                                  ('DEC',     'f8'),   \n-                                  ('X',       'f8'), \n-                                  ('Y',       'f8'), \n-                                  ('GRIDX',   'f8'),\n-                                  ('GRIDY',   'f8'),\n-                                  ('BANDPASS','f8')])\n-                                  #('num_obj', 'i4')])\n-                                  #('MAG', 'f8')])\n-        self.grididx  = 0\n-        self.firstidx = 0\n-        self.lastidx  = 0\n-        #initialize a header, in case there are no layer coadds\n-        self.header = fitsio.FITSHDR() \n-        \n-    def get_stamp_size(self):\n-        return self.stamp_size\n-    def set_stamp_size(self, stamp_size):\n-        self.stamp_size = stamp_size\n-    #\n-    def populate(self, layer_objects, ra, dec, mag, coadd, bandpass_value, normalize = False):\n-        first = 1\n-        for layer_index in layer_objects.keys():\n-            self.lastidx   += len(layer_objects[layer_index])\n-            self.add_layer_objects_to_info_table(layer_index, layer_objects, ra, dec, mag, coadd, bandpass_value)\n-            self.add_layer_objects_stamps_to_grid_image(layer_index, normalize, first)\n-            first = 0\n-            self.firstidx = copy.deepcopy(self.lastidx)\n-        #\n-\n-    def add_layer_objects_to_info_table(self, layer_index, layer_objects, ra, dec, mag, coadd, bandpass_value):\n-        \"\"\"\n-        Add the objects contained in the layer to the oputput info table\n-        \"\"\"\n-        self.info_table['RA'][int(self.firstidx):int(self.lastidx)]      = ra[layer_objects[layer_index]]\n-        self.info_table['DEC'][int(self.firstidx):int(self.lastidx)]     = dec[layer_objects[layer_index]]\n-        #self.info_table['num_obj'][int(self.firstidx):int(self.lastidx)] = counts[layer_objects[str(layer_index)]]\n-        #MW: mag is wrong, as it is taken from the single epoch catalogs\n-        #self.info_table['MAG'][int(self.firstidx):int(self.lastidx)] = mag[layer_objects[str(layer_index)]]\n-        \n-        # compute the output positions in the coadd pixel space\n-        skycoords  = StackPSF.prepare_sky_coordinates(self.info_table['RA'][int(self.firstidx):int(self.lastidx)],\n-                                                  self.info_table['DEC'][int(self.firstidx):int(self.lastidx)]) \n-        #MW: due to the filtering, also other layers \n-        #than layer 0 may have no objects\n-        if len(skycoords) == 0: # and layer_index == 0: \n-            print(\"No objects for layer \", str(layer_index), \" made it to the stacked PSF file\")\n-            return\n-        X, Y       = StackPSF.getPixels(coadd, skycoords)\n-        \n-        self.info_table['X'][int(self.firstidx):int(self.lastidx)] = X\n-        self.info_table['Y'][int(self.firstidx):int(self.lastidx)] = Y\n-        #MW: finally, one bandpass value for all objects\n-        self.info_table['BANDPASS'][int(self.firstidx):int(self.lastidx)] = [bandpass_value]*(int(self.lastidx) - int(self.firstidx) )\n-    #\n-    \"\"\"\n-    #MW retired duplicated code. Replaced with a class method in StackPSF\n-    def getPixels(self, obj, skycoords):\n-        ###\n-        Reads the WCS of obj, and projects skycoords\n-        into the obj pixels reference frame.\n-        Returns two lists X, Y containing the ordered list of pixels positions\n-        ###\n-        # Project the sky positions into the obj pixels reference frame\n-        WCSU       = WcsUtils(obj.returnHeader())\n-        X, Y       = WCSU.py_world2pix(skycoords)\n-        #check: swap X and Y?\n-        #check: -1\n-        X = X - 1\n-        Y = Y - 1\n-        return X, Y\n-    \"\"\"\n-    \n-    \n-    def add_layer_objects_stamps_to_grid_image(self, layer_index, normalize, first = 0):\n-        \"\"\"\n-        For each object in the layer, add the corresponding\n-        stacked PSF stamp to the output FITS grid image extension\n-        \"\"\"\n-        #read the layer coadd image\n-        psfstack  = ExtractImage.ExtractImage(\n-            \"%s/layer%s/%s_%s.image.fits\" % (\n-                self.tmpdir, layer_index, self.tilename, self.band),\n-            verbose = 0)\n-        \n-        psfstack.getImage()\n-        \n-        if first:\n-            #save a fitsio header object\n-            self.header = copy.deepcopy(psfstack.header)\n-        \n-        self.add_stamps_to_output_image(psfstack, normalize) \n-    \n-    def add_stamps_to_output_image(self, psfstack, normalize):\n-        \"\"\"\n-        Add the PSF stamp extracted from the coadd\n-        to the image extension\n-        \"\"\"\n-        for objidx in range(self.firstidx, self.lastidx):\n-            data_dim = (psfstack.naxis2, psfstack.naxis1)\n-            stamp  = Stamp(psfstack.image, self.get_stamp_size(), data_dim)\n-\n-            gridstart = np.array((\n-                np.floor(self.grididx %  self.nobj)     * self.get_stamp_size(),\n-                np.floor(self.grididx // self.nobj)     * self.get_stamp_size())) \n-\n-            gridend   = np.array((\n-                np.floor(self.grididx %  self.nobj + 1) * self.get_stamp_size(),\n-                np.floor(self.grididx // self.nobj + 1) * self.get_stamp_size()))\n-\n-            self.info_table['GRIDX'][objidx] = (\n-                self.grididx % self.nobj  + 0.5)        * self.get_stamp_size() + 0.5\n-\n-            self.info_table['GRIDY'][objidx] = (\n-                self.grididx // self.nobj + 0.5)        * self.get_stamp_size() + 0.5\n-            \n-            norm = 1.0\n-            stamp_image = stamp.get_stamp_at(self.info_table['X'][objidx],self.info_table['Y'][objidx])\n-            if normalize:\n-                norm = stamp_image.max() if stamp_image.max() != 0.0 else norm\n-            #\n-            self.grid_image[int(gridstart[1]):int(gridend[1]),\n-                            int(gridstart[0]):int(gridend[0])] += stamp_image/norm\n-            self.grididx += 1\n-    \n-    \n-    def write_to_fits(self, outname):\n-        \"\"\"\n-        Creates the output FITS file and writes the extensions\n-        \"\"\"\n-        print('Writing output file: %s' % outname)\n-        #fitsio.write(outname, None, clobber = True)\n-        #output_fits_file = fitsio.FITS(outname, 'rw')            \n-        self.header['STMPSIZE'] = int(np.floor(self.get_stamp_size()))\n-        \n-        hdu0 = fits.PrimaryHDU()\n-        \n-        #make an astropy header from the fitsio\n-        #self.header\n-        ah = fits.Header()\n-        for r in self.header.records(): \n-            try:\n-                c = \"\"\n-                if \"comment\" in r:\n-                    c = r[\"comment\"]\n-                ah.append((r[\"name\"], r[\"value\"], c)) \n-            except Exception as e:\n-                print(e)\n-        #\n-        \n-        hdu1 = fits.ImageHDU(data = self.grid_image, header  = ah)\n-        hdu2 = fits.BinTableHDU(data = self.info_table)\n-        fits.HDUList([hdu0, hdu1, hdu2]).writeto(outname, overwrite=True)\n-        \n-        fits.setval(outname, 'extname', value='IMAGE', ext=1)\n-        fits.setval(outname, 'extname', value='INFO', ext=2)\n-    #\n-    \n-    \"\"\"\n-    def write_to_fits(self, outname):\n-        #Creates the output FITS file and writes the extensions\n-        print('Writing output file: %s' % outname)\n-        fitsio.write(outname, None, clobber = True)\n-        output_fits_file = fitsio.FITS(outname, 'rw')            \n-        self.header['STMPSIZE'] = int(np.floor(self.get_stamp_size()))\n-        print(\"self.header \", self.header, \", type \", type(self.header))\n-        print(\"self.grid_image \", self.grid_image, \", type \", type(self.grid_image))\n-        \n-        output_fits_file.write(self.grid_image, header  = self.header, extname = 'IMAGE')\n-        output_fits_file.write(self.info_table, extname = \"INFO\")\n-        output_fits_file.close()\n-    \"\"\"\n-class ObjectList():\n-    def __init__(self, mag, zp = None, ra = None, dec = None, X = None, Y = None):\n-        self._length = 0\n-        self.mag = mag\n-        self.zp = zp\n-        self.ra = ra\n-        self.dec = dec\n-        self.X = X\n-        self.Y = Y\n-        \n-        self._add_attribute('mag', mag)\n-        self._add_attribute('ra',  ra)\n-        self._add_attribute('zp',  zp)\n-        self._add_attribute('dec', dec)\n-        self._add_attribute('X', X)\n-        self._add_attribute('Y', Y)\n-        \n-    \n-    def _add_attribute(self, name, lista):\n-        if lista is None:\n-            return\n-        if self._length == 0:\n-            setattr(self, name, lista)\n-            self._length = len(lista)\n-        else:\n-            if len(lista) == self._length:\n-                setattr(self, name, lista)\n-            else:\n-                print(\"attribute %s could not be set: wrong length\" % name)\n-    \n-    def _add_x_list(self, lista):\n-        self.X = lista\n-    \n-    def _add_y_list(self, lista):\n-        self.Y = lista\n-    \n-    def _filter(self, idx):\n-        for a in [\"mag\",\"zp\",\"ra\",\"dec\",\"X\",\"Y\"]:\n-            lista = getattr(self, a)\n-            try:\n-                #overwrite\n-                setattr(self, a, [lista[i] for i in idx])\n-            except:\n-                #a list may be None, so looping \n-                #them all is not a good idea\n-                logging.debug(\"ObjectList._filter(self, idx)\")\n-            #\n-        #\n-        self._length = len(self.mag)\n-    #\n-    \n-class StackPSF(Pipeline):\n-    def __init__(self, args):\n-        \"\"\"\n-        Computes the stacked PSF of a coadd image for a grid of points in the \n-        sky.\n-        The PSF is computed as follows: we project each point on all the single\n-        images contributing to the coadd using the WCS, and there we compute a\n-        PSF stamp using the single image PSF model. We generate mock single \n-        images of the same size of the 'oringinal' ones, containing all the PSF\n-        stamp.\n-        Those images are then swarped to obtain a 'coadd' image containing the \n-        stacked PSFs.\n-        In case the PSF overlap on the single images, we repeat the procedure \n-        multiple times, each time taking into account only one of the \n-        overlapping PSFs.\n-        \"\"\"\n-        Pipeline.__init__(self)\n-        self.starttime  = time.time()\n-        self._args      = args\n-        self.tilename   = self._args.tilename\n-        self.band       = self._args.band\n-        self.outdir     = os.path.abspath(\"%s/%s/%s/\"    % (\n-            self._args.outdir,  self.tilename, self.band))\n-        #\n-        self.tmpdir     = os.path.abspath(\"%s/%s/%s/\"    % (\n-            self._args.ramdisk, self.tilename, self.band))\n-        self.auxdir     = os.path.abspath(\"%s/aux/\"      % self.outdir)\n-        self.xmldir     = os.path.abspath(\"%s/xml/\"      % self.tmpdir)\n-        self.resdir     = os.path.abspath(\"%s/resample/\" % self.tmpdir)\n-        self.out_name   = \"%s_psfstamps.fits\"\n-        \n-        #MW: remove existing dirs and recreate them\n-        for _dir in [self.tmpdir, self.outdir, self.xmldir, self.auxdir, self.resdir]:\n-            if os.path.isdir(_dir):\n-                print(\"removing \", _dir)\n-                shutil.rmtree(_dir)\n-            os.makedirs(_dir)\n-        #    \n-        self.logfile    = self.outdir + os.sep + \"StackPSF.log\"\n-        self.logger     = open(self.logfile, 'w')\n-        self.stamp_size = -1 #define a negative default value\n-        \n-        #name of the catalogue field containing X (ra) and Y (dec)\n-        #positions in the single epoch catalogues.'\n-        self.possible_xy_catalog_values = [('XMODEL_IMAGE', 'YMODEL_IMAGE'), ('XWIN_IMAGE', 'YWIN_IMAGE')]        \n-        self.coadd_x    = self._args.coadd_x\n-        self.coadd_y    = self._args.coadd_y\n-        self.epsilon    = np.finfo(np.float32).eps\n-        self.G = {}\n-        #MW: store the coadd psf images per layer\n-        self.layer_coadds = dict()\n-    \n-    \n-    ################################################################################\n-    #\n-    # One class method, that is called from StackPSF but also from OutputStackedPSF\n-    #\n-    ################################################################################\n-    @staticmethod\n-    def getPixels(obj, skycoords):\n-        \"\"\"\n-        Reads the WCS of obj, and projects skycoords\n-        into the obj pixels reference frame.\n-        Returns two lists X, Y containing the ordered list of pixels positions\n-        \"\"\"\n-        # Project the sky positions into the obj pixels reference frame\n-        #MW: do this consistently with astropy\n-        #MW: no, as this crashes KIDS processing.\n-        #investigate why\n-        #image_hdu = FitsServices.get_image_hdu(obj.name)\n-        #hdul = fits.open(obj.name)  # open a FITS file\n-        #h = hdul[image_hdu].header \n-        #WCSU = WcsUtils(h)\n-        WCSU       = WcsUtils(obj.returnHeader())\n-        X, Y       = WCSU.py_world2pix(skycoords)\n-        #check: swap X and Y?\n-        #check: -1\n-        X = X - 1\n-        Y = Y - 1\n-        return X, Y\n-    #\n-    \n-    \n-    @staticmethod\n-    def prepare_sky_coordinates(ra, dec):\n-        \"\"\"\n-        Stores the input sky coordinates in a format [ra0, dec0, r1, dec1, ...] that can be used for\n-        projection into pixel space from the class  _getWcsLibCorners.py_world2pix\n-        \"\"\"\n-        #iters      = [iter(ra), iter(dec)]\n-        #skycoords  = list(it.__next__() for it in itertools.cycle(iters))\n-        skycoords = (len(ra) + len(dec))*[0]\n-        for i in range(len(ra)):\n-            skycoords[2*i] = ra[i]\n-            skycoords[2*i+1] = dec[i]\n-        #\n-        return skycoords\n-    #\n-    \n-    \n-    def get_stamp_size(self):\n-        if self.stamp_size < 0:\n-            min_separation, max_sep = self.compute_minimum_separation_for_objects_in_layer()\n-            self.set_stamp_size(max_sep)\n-            #print(\"get stamp size \", self.stamp_size, \" == max_sep in pixel \", max_sep)\n-        return self.stamp_size\n-    #\n-    def set_stamp_size(self, stampsize):\n-        self.stamp_size = stampsize\n-    #\n-    ######################################################################################\n-    #\n-    # Instance methods of StackPSF\n-    #\n-    #######################################################################################\n-    \n-    def run(self):\n-        \"\"\"\n-        RUN!\n-        \"\"\"\n-        self.writeLog(\"init_run\")\n-        self.init_run()\n-        \n-        self.writeLog(\"read_input_list\")\n-        inputdata = self.read_input_list()\n-        \n-        #get ra, dec from reference catalog, mags matches from EXT coadd\n-        #sorted by coadd magnitudes\n-        #se_matches is empty (contains only keys with ra:dec, dummy values)\n-        self.writeLog(\"read_input_positions\")\n-        ra, dec, se_matches = self.read_input_positions()\n-        \n-        self.writeLog(\"measure_gains_of_single_images\")\n-        G = self.measure_gains_of_single_images()\n-        \n-        print(\"gain done\")\n-        #find out the instrument for later use\n-        self.writeLog(\"setInstrumentFilter\")\n-        self.setInstrumentFilter(self.inputdata.__iter__().__next__())\n-        print(\"instrument filter done\")\n-        \n-        # Divide the data into different layers of non overlapping PSF\n-        #MW: done in the getter function of get_stamp_size to guarantee initialization\n-        #min_separation, max_sep = self.compute_minimum_separation_for_objects_in_layer()\n-        \n-        #rewrote the following for more transparent processing logic and better performance\n-        #self.divide_input_positions_into_layers(min_separation, ra, dec)\n-        #from here it counts: object numbers refer to their position in self.ra, self.dec list\n-        #sorting or any change will be fatal!\n-        self.writeLog(\"divide_input_positions_into_layers_bf\")\n-        layer_objects = self.divide_input_positions_into_layers_bf(math.sqrt(2.0)*self.get_stamp_size(), ra, dec, self._args.coadd, self._args.max_layer_num)\n-        \n-        \n-        #Loop over the list of layers\n-        self.writeLog(\"Loop over the list of layers\")\n-        for layer in self.layer_objects:\n-            start = time.time()\n-            self.writeLog(\"init_layer\")\n-            self.init_layer(layer)\n-            print(\"time for init layer \",  time.time() - start)\n-            \n-            # Define the subset of input objects that belong to \n-            # the current layer\n-            start = time.time()\n-            self.writeLog(\"define_object_subset_for_layer\")\n-            layer_positions = self.define_object_subset_for_layer(layer)\n-            print(\"time for define_object_subset_for_laye \",  time.time() - start)\n-            \n-            # For each object, append to self.se_matches the list of single \n-            # images containing the objects subset for the current layer:  \n-            #data values ra, dec, mag are taken from single epoch catalogs\n-            start = time.time()\n-            self.writeLog(\"match_layer_positions_with_single_epoch_catalogue_objects\")\n-            self.match_layer_positions_with_single_epoch_catalogue_objects(layer_positions)\n-            print(\"time for match_layer_positions \",  time.time() - start)\n-            \n-            # For each object, propagate the flux information\n-            # to the single images on which he object is not detected\n-            # (only in case the coadd catalogue is not given as an\n-            # input, otherwise we use the coadd flux)\n-            if self._args.coadd_cat is None:\n-                start = time.time()\n-                self.writeLog(\"extend_flux_measurements_to_undetected_objects\")\n-                self.extend_flux_measurements_to_undetected_objects(layer_positions)\n-                print(\"time for extend_flux_measurements \",  time.time() - start)\n-            \n-            # Loop over the list of SE images\n-            pm = ProcessManager.ProcessManager(self._args.multiprocesses)\n-            self.writeLog(\"Looping over the list of SE images\")\n-            start = time.time()\n-            for seimage in self.inputdata:\n-                ##### This part can be parallelized! (TBD) ###################\n-                self.writeLog(\"create_PSF_stamp_single_image\")\n-                #self.create_PSF_stamp_single_image(layer_positions, seimage, layer)\n-                pm.add_process_and_start(self.create_PSF_stamp_single_image, args = (layer_positions, seimage, layer))\n-                ##### End of the parallel part ##############################\n-            print(\"time for create_PSF_stamp_single \",  time.time() - start)\n-            # Produce the stacked PSF image for the current layer\n-            start = time.time()\n-            self.writeLog(\"create_stacked_PSF_image_for_layer\")\n-            self.create_stacked_PSF_image_for_layer(layer)\n-            print(\"time for create_stacked_PSF_image \",  time.time() - start)\n-            \n-            # remove the temporary PSF images for the layer\n-            start = time.time()\n-            self.writeLog(\"clean_up_layer_directory\")\n-            self.clean_up_layer_directory(layer)\n-            print(\"time for clean_up_layer_directory \",  time.time() - start)\n-        #\n-        # Produce the output FITS file\n-        self.writeLog(\"produce_output_FITS_file\")\n-        self.produce_output_FITS_file()\n-    #\n-    \n-    def init_run(self):\n-        \"\"\"\n-        Creates the working directories. If the output directory\n-        already exists, removes it.\n-        Creates the logger file\n-        \"\"\"\n-        if os.path.isdir(self.outdir):\n-            print(\"\\nRemoving directory %s\" % self.outdir)\n-            shutil.rmtree(self.outdir, ignore_errors=True)\n-        if not os.path.isdir(self.xmldir):\n-            os.makedirs(self.xmldir)\n-        if not os.path.isdir(self.auxdir):\n-            os.makedirs(self.auxdir)\n-        if not os.path.isdir(self.resdir):\n-            os.makedirs(self.resdir)\n-        self.logfile    = self.outdir + os.sep + \"StackPSF.log\"\n-        self.logger     = open(self.logfile, 'w')\n-        \n-    \n-    \n-    def divide_input_positions_into_layers_bf(self, min_separation : int, ra : list, dec : list, coadd : str, max_layers : int):\n-        \"\"\"\n-        bf: brute force :o)\n-        does the direct distribution of ra/dec object indices from the VIS catalog into layers.\n-        Tries to put the low indices onto low layer numbers and thus allows to sort by mag, if not all\n-        layers are used (max_layers set).\n-        Does the calculation wether two coordinates are closer than min_separation in euclidian \n-        coadd space using the coadds WCS.\n-        \n-        parameters:\n-        min_separation: the minimum distance between tow objects on a layer in pixel\n-        ra: a list of ra from the VIS reference catalog\n-        dec: dito\n-        coadd: the path to the coadd, using its WCS to transform ra/dec into pixel space\n-        \n-        \"\"\"\n-        self.writeLog(\"Distribute to different layer, if objects are less than %s pixels apart\" %min_separation )\n-        hdul = fits.open(coadd)\n-        wcs = WCS(hdul[\"IMAGE\"].header)\n-        \n-        #transform: pix[0] = x (ra)\n-        #pix[1] = y (dec)\n-        pix = wcs.all_world2pix(ra, dec, 1)\n-        hdul.close()\n-                \n-        #lists contains the indexes of the layer\n-        #lists[layer] = []\n-        lists = OrderedDict()\n-        \n-        #make the first layer and add the first object in the list\n-        lists[0] = []\n-        lists[0].append(0)\n-        \n-        \n-        def layer_contains_too_close_objects(layer : list, obj_index : int ) -> bool:\n-            #save the sqrt and compare the squares\n-            sep_comparator = min_separation*min_separation\n-            for obj in layer:\n-                ra_diff = pix[0][obj] - pix[0][obj_index]\n-                dec_diff = pix[1][obj] - pix[1][obj_index]\n-                \n-                d_sq = ra_diff*ra_diff + dec_diff*dec_diff\n-                \n-                if d_sq < sep_comparator:\n-                    #there is an object too close on this layer\n-                    return True\n-                #\n-            #no close object found\n-            return False\n-        #\n-        \n-        def layers_sorted_for_fewest_objects(lists:OrderedDict):\n-            layers = []\n-            for i in lists:\n-                layers.append( (i,len(lists[i]) ) )\n-            #\n-            #print(\"layers \", layers)\n-            slayers = sorted( layers, key=operator.itemgetter(1) )\n-            returnvalue = list(zip(*slayers))[0]\n-            #print(\"return \", returnvalue)\n-            return returnvalue\n-        #\n-        \n-        #now start the brute force\n-        import time\n-        start = time.time()\n-        objects_in_layers = 0\n-        totobj      = len(ra)\n-        self.writeLog(\"Total number of objects in the input catalog: %s\" %totobj )\n-        \n-        for obj_index in range(1,len(ra)):\n-            #check, if existing layers already contains too close objects\n-            object_has_found_a_layer = False\n-            #distribute from reverse, as the latest layer has fewest objects\n-            #and thus processes fastest\n-            #-> this should start with the layer with the fewest objects\n-            #k = list(lists.keys())\n-            #k.reverse()\n-            for layer in layers_sorted_for_fewest_objects(lists):\n-                #for layer in lists:\n-                if not layer_contains_too_close_objects(lists[layer], obj_index):\n-                    lists[layer].append(obj_index)\n-                    object_has_found_a_layer = True\n-                    objects_in_layers = objects_in_layers +1\n-                    break\n-                #\n-            #\n-            if not object_has_found_a_layer and len(lists) < max_layers:\n-                #add a layer and put the object there\n-                #if max_layers is too small, the object will be dropped\n-                print(\"add layer number \", len(lists))\n-                lists[len(lists)] = []\n-                lists[len(lists)-1].append(obj_index)\n-                objects_in_layers = objects_in_layers +1\n-            #\n-            #if objects_in_layers > 0.85*totobj:\n-            #    self.writeLog(\"Distributed 85 percent of objects (= %s) to layers: \" %objects_in_layers )\n-            #    break\n-            #next obj_index\n-            \n-        #Here we should have all layers nicely filled\n-        print(\"bf took seconds: \", time.time() - start)\n-        \n-        #report\n-        #layer_objects is used in the class, so it must remain global for the moment\n-        self.layer_objects = OrderedDict() \n-        \n-        layeridx    = 0\n-        for k in lists:\n-            self.layer_objects[str(k)] = lists[k]\n-            numb = len(lists[k])\n-            #objects_in_layers += numb\n-            self.writeLog(\"Layer %2d contains %5d objects (%2.2f %%)\" % (\n-                k, numb, 100 * float(numb) / float(totobj)))\n-        \n-        #report missing objects\n-        self.writeLog('The total number of layers is set to %s.' %len(lists))\n-        self.writeLog('You are missing the PSF for %s objects (%2.2f %%).' % \n-                      (totobj - objects_in_layers, 100 * float(totobj - objects_in_layers) / float(totobj)))\n-        \n-        json_dump = json.dumps(self.layer_objects, indent = 4)\n-        f         = open(\"%s/layer_obj.json\" % self.tmpdir,\"w\")\n-        f.write(json_dump)\n-        f.close()\n-        \n-        return self.layer_objects\n-    #\n-        \n-        \n-    def take_out_already_assigned_indices(self, cluster_objects, already_assigned_indexes):\n-        #loop over all cluster objects, starting with the many neighbours\n-        #indexes\n-        for idx in range(len(cluster_objects) - 1, -1, -1):\n-            # Check if the group of overlapping objects contains objects \n-            # that have already been assigned to a layer, and remove them\n-            #if len(list(set(already_assigned_indexes).intersection(\n-            #        set(cluster_objects[idx])))) > 0:\n-            cluster_objects[idx] = [\n-                    x for x in cluster_objects[idx] if (\n-                        x not in already_assigned_indexes)]\n-            #\n-        #\n-        return cluster_objects, already_assigned_indexes\n-    #\n-    \n-    \n-    def init_layer(self, layer):\n-        \"\"\"\n-        perform operations to prepare the processing \n-        of the current layer\n-        \"\"\"\n-        self.writeLog(\"Layer %s\" % layer)\n-        self.create_working_directory_for_layer(layer)\n-\n-    def define_object_subset_for_layer(self, layer):\n-        \"\"\"\n-        Define the subset of input objects that belong to \n-        the current layer\n-        \"\"\"\n-        layer_positions = ObjectList(self.mag, ra = self.ra, dec = self.dec)\n-        layer_positions._filter(self.layer_objects[layer])\n-        return layer_positions \n-    \n-    \n-    def match_layer_positions_with_single_epoch_catalogue_objects(self, layer_positions:ObjectList):\n-        \"\"\"\n-        For each object defined by the input ra,dec, checks if the object\n-        is included in any single epoch image in the input list.\n-        If so, matches the input positions with the positions of the objects\n-        in the single epoch catalogue, and filters out the flagged objects.\n-        Fills an entry in the self.se_matches dictionary for each single image \n-        included in the input list containing the object.\n-        This entry is a list containing magnitude, ra and dec of that object.\n-        The magnitudes, ra and dec positions are taken from the single epoch \n-        catalogue when available, otherwise we use the magnitude value already\n-        defined in self.getSkyPosition.\n-        \n-        layer_positions: an ObjectList object which contains ra, dec, mag of the layer objects\n-        \"\"\"\n-        remove_items = []\n-        for se_image_name in self.inputdata:\n-            try:\n-                #create an ExtractImage object\n-                single_epoch_image    = self.init_image(se_image_name)\n-                overlapping_positions = self.project_input_coordinates_into_the_single_image_pixel_space(\n-                    single_epoch_image, layer_positions)\n-                if overlapping_positions._length == 0:\n-                    continue\n-                \n-                #get the catalog hdu of the single epoch catalog\n-                cat                   = self.get_object_positions_from_single_epoch_catalogue(se_image_name)\n-                \n-                #se_matched_objects contains values ra, dec, mag from the single epoch catalogs!\n-                se_matched_objects, indexes = self.match_single_epoch_catalogue_objects_with_input_positions(overlapping_positions, cat, se_image_name)\n-                \n-                \n-                self.fill_se_matches(overlapping_positions, se_matched_objects, single_epoch_image, indexes)\n-            except Exception as e:\n-                #MW: take out this image from self.inputdata (OrderedDict)\n-                self.writeLog(\"Found a problem with an se-image/catalog. It will be taken out: %s.\" % se_image_name)\n-                exec_info =  sys.exc_info()\n-                traceback.print_tb(exec_info[2])\n-                remove_items.append(se_image_name)\n-            #\n-        #MW:\n-        for img in remove_items:\n-            self.writeLog(\"remove image without overlapping objects in the catalog %s.\" % img)\n-            del self.inputdata[img]\n-        #\n-    #\n-    \n-    def extend_flux_measurements_to_undetected_objects(self, objects):\n-        \"\"\"\n-        For each object, propagate the flux information\n-        to the single images on which he object is not detected\n-        (only in case the coadd catalogue is not given as an\n-        input, otherwise we use the coadd flux)\n-        \"\"\"\n-        for i in range(objects._length):\n-            sedict =  self.se_matches['%.10f:%.10f' % (objects.ra[i], objects.dec[i])]\n-            #sedict =  copy.deepcopy(self.se_matches['%.10f:%.10f' % (objects.ra[i], objects.dec[i])])\n-            #del sedict['bad']\n-            maglist = [\n-                sedict[img][0] + self.inputdata[img][\"zp\"] \n-                for img in sedict if (\n-                        sedict[img][0] != self._args.default_zp) and (\n-                            sedict[img][0] > -90)]\n-            if len(maglist) == 0:\n-                continue\n-            mm = np.mean(maglist) \n-            objects.mag[i] = mm\n-            \n-            for img in sedict:\n-                if sedict[img][0] == self._args.default_zp:\n-                    self.writeLog(\"remaining sedict with default zp \" +str(sedict[img]))\n-                    self.se_matches[\n-                        '%.10f:%.10f' % (objects.ra[i], objects.dec[i])][img][0] = mm - self.inputdata[img][\"zp\"]\n-                else:\n-                    self.writeLog(\"extend_flux_measurements_to_undetected_objects \" +str( sedict[img][0]) )\n-                #\n-            #\n-        #\n-    #\n-    \n-    def create_PSF_stamp_single_image(self, layer_positions, seimage, layer):\n-        \"\"\"\n-        creates the single image containing the PSF stamps\n-        \"\"\"\n-        s = time.time()\n-        self.writeLog(\"%s\" % seimage)\n-        single_epoch_image = self.init_image(seimage)\n-        zp                 = self.inputdata[single_epoch_image.name][\"zp\"] \n-        psf_file_name, catname = self.get_auxiliary_file_names(single_epoch_image.name)\n-        # Get the list of objects contained in the SE image (ObjectList with mag, ra, dec)\n-        #from single epoch catalogs (detected) and coadd catalog (undetected)\n-        se_overlapping_objects = self.get_PSF_info(single_epoch_image.name, layer_positions)\n-        if se_overlapping_objects._length == 0:\n-            return\n-        print(\"time for init_image etc. \", time.time() - s)\n-        \n-        s = time.time()\n-        psfimage, psfweight, _, _ = self.get_PSF_image(\n-            single_epoch_image, se_overlapping_objects)\n-        print(\"time for adding psfstamps to image \", time.time() - s)\n-        \n-        s = time.time()\n-        if psfimage is None:\n-            self.writeLog('  Warning: PSF image could not be created')\n-            return\n-        self.write_to_fits(layer, single_epoch_image, psfimage, psfweight)\n-        print(\"time for writing psfstamps to fitsimage \", time.time() - s)\n-        \n-    def create_stacked_PSF_image_for_layer(self, layer):\n-        \"\"\"\n-        Produce the stacked PSF image for the current layer\n-        \"\"\"\n-        layerdir = self.tmpdir + os.sep + \"layer%s\" % layer\n-        swarp_lists, _, _ = self.get_swarp_lists(layerdir)\n-        IMAGEOUT_PATH, WEIGHTOUT_PATH = self.run_swarp(layerdir, swarp_lists)\n-        \n-        #MW: store the output image in the layer_objects list\n-        print(\"Layer \", layer, \", IMAGEOUT_PATH \", IMAGEOUT_PATH, \", exists \", self.exists(IMAGEOUT_PATH))\n-        self.layer_coadds[layer] = self.exists(IMAGEOUT_PATH) #if self.exists(IMAGEOUT_PATH) is not None else IMAGEOUT_PATH\n-        \n-        #set an extname, so ExtractImage will later work\n-        if self.layer_coadds[layer] is not None:\n-            fits.setval(self.layer_coadds[layer], 'extname', value='IMAGE', ext=0)\n-            fits.setval(self.layer_coadds[layer], 'DES_EXT', value='IMAGE', ext=0)\n-        #\n-        \n-        #do the same for the weight image\n-        weight_image = self.exists(WEIGHTOUT_PATH)\n-        if weight_image is not None:\n-            fits.setval(weight_image, 'extname', value='WEIGHT', ext=0)\n-            fits.setval(weight_image, 'DES_EXT', value='WEIGHT', ext=0)\n-        #\n-        print(\"stored coadd image in layer_objects \", self.layer_coadds[layer])\n-        print(\"stored coadd weight \", weight_image)\n-        \n-        \n-    def clean_up_layer_directory(self, layer):\n-        \"\"\"\n-        remove the temporary PSF images for the layer\n-        if the option clean_up is given\n-        \"\"\"\n-        if self._args.clean_up:\n-            layerdir = self.tmpdir + os.sep + \"layer%s\" % layer\n-            for fname in os.listdir(layerdir):\n-                if fname.endswith(\"_psfstamps.fits\"):\n-                    os.remove(os.path.join(layerdir, fname))\n-    \n-    def produce_output_FITS_file(self):\n-        \"\"\"\n-        Creates the output fits file containing all layers of non-overlapping \n-        stacked PSFs, plus a table per extension containing the PSFs positions.\n-        \"\"\"\n-        X, Y  = self.project_positions_onto_coadd_pixel_space(self.ra, self.dec)\n-        \n-        print(\"produce_output_FITS_file: PsfStampFilter \")\n-        psf = PsfStampFilter(self.get_stamp_size(), filtertype = self.getInstrumentFilter(), execfilter = self._args.execfilter)\n-        self.layer_objects = psf.filter(self.layer_objects, self.layer_coadds, X, Y)\n-        #self.layer_objects = filtered_layer_objects\n-        \n-        print(\"produce_output_FITS_file: compute_total_object_number \")\n-        self.compute_total_object_number()\n-        #which data are we dealing with?\n-        \n-        \n-        # Initialize the FITS image and the FITS table in the output\n-        # file extensions \n-        print(\"produce_output_FITS_file: OutputStackedPSF \")\n-\n-        output_obj = OutputStackedPSF(self.totobj, self.get_stamp_size(), self.tmpdir, self.tilename, self.band)\n-        print(\"produce_output_FITS_file: populate \")\n-        output_obj.populate(self.layer_objects, self.ra, self.dec, self.mag, self.coadd, self._args.bandpass_value)\n-        print(\"write this file \", self._args.outdir +os.sep +self.tilename +\"_\" +self.band +\"_\" +\"_stackedPSF.fits\" )\n-        output_obj.write_to_fits(\"%s/%s_%s_stackedPSF.fits\" % (self._args.outdir, self.tilename, self.band))\n-        \n-        #write a second normalized image for quality control\n-        output_obj = OutputStackedPSF(self.totobj, self.get_stamp_size(), self.tmpdir, self.tilename, self.band)\n-        output_obj.populate(self.layer_objects, self.ra, self.dec, self.mag, self.coadd, self._args.bandpass_value, normalize = True)\n-        output_obj.write_to_fits(\"%s/Normalized_%s_%s_stackedPSF.fits\" % (self._args.outdir, self.tilename, self.band))\n-    \n-    \n-    \n-    def setInstrumentFilter(self, se_image):\n-        \"\"\"\n-        extracts the instrument keyword from the image header of \n-        the single image and stores it for later use for the psf filters\n-        \"\"\"\n-        imghdu       = FitsServices.get_image_hdu(se_image)\n-        instrument   = FitsServices.read_key(se_image, imghdu, \"INSTRUME\").lower()\n-                \n-        if \"decam\" in instrument:\n-            self.FilterType = FilterTypes.DES\n-        elif \"omegacam\" in instrument:\n-            self.FilterType = FilterTypes.KIDS\n-        elif \"LSST\" in instrument:\n-            self.FilterType = FilterTypes.LSST\n-        else: #add condition here. #LSST = ?\n-            self.FilterType = FilterTypes.NOS\n-        #\n-    #\n-    \n-    def getInstrumentFilter(self):\n-        \"\"\"\n-        returns the instrument filter type that has been set \n-        with setInstrument.\n-        \"\"\"\n-        return self.FilterType\n-    #\n-    \n-    def filter_bad_PSFs(self):\n-        \"\"\"\n-        Identifies the PSFs that cannot be fit with a gaussian shape\n-        and removes them from the output file\n-        \"\"\"\n-        temp_layer_objects = OrderedDict()\n-        X, Y  = self.project_positions_onto_coadd_pixel_space(self.ra, self.dec)\n-        \n-        for i in range(len(self.layer_objects)):\n-            psfstack  = ExtractImage.ExtractImage(\n-                \"%s/layer%s/%s_%s.image.fits\" % (\n-                    self.tmpdir, i, self.tilename, self.band),\n-                verbose = 0)\n-            psfstack.getImage()\n-            data_dim = (psfstack.naxis2, psfstack.naxis1)\n-            temp = []\n-            for obj in self.layer_objects[str(i)]:\n-                x = X[obj]\n-                y = Y[obj]\n-                stamp  = Stamp(psfstack.image, self.get_stamp_size(), data_dim)\n-                stamp_image = stamp.get_stamp_at(x,y)\n-                \n-                _max = abs(np.amax(stamp_image))\n-                _min = abs(np.amin(stamp_image))\n-                _sum = np.sum(stamp_image)\n-                #print(\" min, max \", _min, _max, \", same order of magnitude? \", (_max - _min)/_max < 0.9, \", sum \", _sum )\n-                if abs(_sum) < 0.0001 or _sum < 0:\n-                    print(\"sum of the values is too low. Reject.\", _sum)\n-                    continue\n-                try:\n-                    amplitude, center, sigma = ArrayUtils.fit_simple_gauss_2d(stamp_image)\n-                    #print(\"sigma \", sigma)\n-                    if amplitude < 0:\n-                        print(\"Negative fit amplitude. Reject.\")\n-                        continue\n-                    psf_dim = np.array(stamp_image.shape)\n-                    idxs = ArrayUtils.get_array_indices(psf_dim)\n-                    shape = stamp_image.shape\n-                    gauss = ArrayUtils.simple_gauss_2d(idxs, amplitude, center[1], center[0], sigma)\n-                    print(np.sqrt(np.mean((stamp_image.flatten() - gauss) ** 2.))/amplitude)\n-                    if np.sqrt(np.mean((stamp_image.flatten() - gauss) ** 2.))/amplitude < 0.05:\n-                        temp.append(obj)\n-                    else:\n-                        print('PSF centered at %.3f, %.3f skipped: bad PSF shape' % (x, y))\n-                        continue\n-                except:\n-                    print('PSF centered at %.3f, %.3f skipped: could not fit a gaussian' % (x, y))\n-            temp_layer_objects[str(i)] = temp\n-        self.layer_objects = temp_layer_objects\n-        print(\"  \", [len(self.layer_objects[x]) for x in self.layer_objects])\n-    \n-    def compute_total_object_number(self):\n-        \"\"\"\n-        Computes the total number of objects contained in the layers\n-        included in the processing\n-        \"\"\"                                                              \n-        # Get the total number of objects\n-        self.totobj   = 0\n-        temp_layer_objects = OrderedDict()   \n-        print(\"len(self.layer_objects) \", len(self.layer_objects))\n-        for i in self.layer_objects.keys():\n-            temp = []\n-            print(\"handle index \", i)\n-            for x in self.layer_objects[i]:\n-                sematch = self.se_matches[\"%.10f:%.10f\" % (self.ra[x], self.dec[x])]\n-                if len(sematch) > 0 and any(\n-                    x <  90 for x in [sematch[key][0] for key in sematch]) and any(\n-                    x > -90 for x in [sematch[key][0] for key in sematch]):\n-                    temp.append(x)\n-            temp_layer_objects[i] = temp\n-            self.totobj += len(temp_layer_objects[i])\n-        self.layer_objects = temp_layer_objects\n-\n-    def read_input_list(self):\n-        \"\"\"\n-        reads the input image list, stores the list with all \n-        auxinfo in self.inputdata, if it belongs to the requested band\n-        \"\"\"\n-        #store data in a dict: imagename:{img, zp, fwhm, psf, cat}\n-        self.inputdata = OrderedDict()\n-        for line in open(self._args.SElist, 'r'):\n-            \n-            linesplit = line.split(\" \")\n-            if (self.band == linesplit[5]):\n-                self.inputdata[linesplit[0]] = {\"img\":linesplit[0],\"dummy\":linesplit[1], \"fwhm\": linesplit[2], \"zp\": float(linesplit[3]),\n-                \"zperr\": float(linesplit[4]), \"band\": linesplit[5], \"psf\":linesplit[6], \"cat\":linesplit[7]} \n-        #\n-        return self.inputdata\n-\n-\n-    def read_input_positions(self):\n-        \"\"\"\n-        Extract the positions on the sky on which we want to compute the \n-        stacked PSF, excluding the sources located at the edges of the coadd.\n-        Defines self.mag, containing the value self._args.default_zp for\n-        each input position. \n-        If the coadd catalogue is given as an input, matches the input \n-        positions with the coadd detections, and assigns to each position \n-        the value of magnitude corresponding to the detected object.\n-        Initializes  self.se_matches, a dictionary containing, for each object,\n-        a dictionary containing magnitude and position of the object in\n-        each single image in which the object is contained.\n-        \"\"\"\n-        #read the data from the VIS input catalog: ra, dec, mag\n-        ra, dec, mag = self.read_raw_positions_from_the_input_catalogue()\n-        X, Y        = self.project_positions_onto_coadd_pixel_space(ra, dec)\n-        idx_subset  = self.exclude_edge_sources(X, Y)\n-        self.ra     = ra[idx_subset]\n-        self.dec    = dec[idx_subset]\n-        \n-        #MW: here we always put only the default value of 25 which is wrong\n-        #if an object is not found in the single epoch catalog, it will keep its \n-        #low magnitude and will dominate the coadd, even if the object is bright\n-        #in reality\n-        self.mag    = np.ones(len(self.ra)) * self._args.default_zp\n-        \n-        #here we use the reference catalog magnitude, which can also be wrong.\n-        #best is to have a coadd catalog and initialize from there\n-        self.mag    = mag[idx_subset] #these are still reference (VIS) values\n-        \n-        #now replace VIS with DECam magnitudes\n-        if self._args.coadd_cat is not None:\n-            self.read_magnitudes_from_coadd_catalogue()\n-        \n-        #optionally, sort ra,dec,mag by magnitude\n-        if True: #self._args.sort_catalog_by_mag:\n-            #convert the lists to one list of tuples\n-            def sort_table(table, col=0):\n-                #invert the table to get columns instead of rows\n-                sorted_table = sorted( list(zip(*table)), key=operator.itemgetter(col))\n-                return list( zip(*sorted_table) )\n-            #\n-            table = [self.ra,self.dec,self.mag]\n-            sorted_table = sort_table(table, 2)\n-            \n-            self.ra = np.array(sorted_table[0])\n-            self.dec = np.array(sorted_table[1])\n-            self.mag = np.array(sorted_table[2])\n-        #\n-        \n-        #we have assigned self._args.default_zp as an default value\n-        #is it still in the maglist after coadd catalog matches hav been assigned?\n-        self.writeLog(\"read_input_positions: number of default mags remaining in list \" + str( sorted_table[2].count(self._args.default_zp) ))\n-        \n-        # Initialize the counter of single images in which we \n-        # find the given object\n-        self.se_matches = {}\n-        for radec in zip(self.ra, self.dec):\n-            self.se_matches['%.10f:%.10f' % (radec[0], radec[1])] = {}\n-        return self.ra, self.dec, self.se_matches\n-            \n-    def read_raw_positions_from_the_input_catalogue(self):\n-        \"\"\"\n-        Reads the fields self._args.ra, self._args.dec\n-        from the input positions catalogue\n-        \n-        MW: make sure, we read only objects to a depths, that the\n-        project under investigation can provide\n-        DES griz = [25.5, 25.2, 24.4, 23.8] for example.\n-        Uses mag_entry and ref_mag arguments\n-        \n-        Optionally, sort the coordinates by mag.\n-        \"\"\"\n-        self.writeLog(\"Reading the position catalogue to extract the points\")\n-        self.writeLog(\"on which we want to measure the PSF\")\n-        cat_data = fitsio.FITS(self._args.position_cat)[-1]\n-        \n-        ra     = cat_data[self._args.ra].read()\n-        dec    = cat_data[self._args.dec].read()\n-        mag    = cat_data[self._args.mag_entry].read()\n-        \n-        idx = np.where( np.logical_and((mag >= self._args.min_mag), (mag <= self._args.ref_mag)) )\n-        print(\"positions from refcat \", len(ra), \", filtered by magnitude \", str(self._args.ref_mag), \" \", len(ra[idx]))\n-        return ra[idx], dec[idx], mag[idx]\n-    \n-    def exclude_edge_sources(self, X, Y):\n-        \"\"\"\n-        Filter out the positions that do not overlap the coadd\n-        and the edge sources\n-        \"\"\"\n-        \"\"\"\n-        wo = np.where((X > (self.get_stamp_size() // 2)) & \n-                      (Y > (self.get_stamp_size() // 2)) & \n-                      (Y < self.coadd.naxis2 - \n-                       (self.get_stamp_size() // 2)) & \n-                      (X < self.coadd.naxis1 - \n-                          (self.get_stamp_size() // 2)))[0]\n-        \"\"\"                  \n-        wo = np.where(self.stamp_inside_image(X,Y,self.coadd.naxis1,self.coadd.naxis2 ))[0]\n-        return wo\n-\n-    def read_magnitudes_from_coadd_catalogue(self):\n-        \"\"\"\n-        Read the values of the magnitudes from the (optional)\n-        input coadd catalogue, ra/dec matching the coordinates\n-        of the objects with the input positions\n-        \"\"\"\n-        flagcat_data = fitsio.FITS(self._args.coadd_cat)[-1]\n-        flags = flagcat_data[\"flags\"].read()\n-        fields    = [self.coadd_x, self.coadd_y, 'flags', \n-                     'mag_auto', 'mag_psf', 'spread_model']\n-        \n-        # Get the indexes of the objects that are detected in the coadd \n-        good_idx  = np.where((flags & 4  == 0) & \n-                                 (flags & 8  == 0) &\n-                                 (flags & 16 == 0) &\n-                                 (flags & 32 == 0))[0]\n-        \n-        # Read the positions and magnitudes of the detected objects\n-        cox       = flagcat_data[self.coadd_x].read()[good_idx]\n-        coy       = flagcat_data[self.coadd_y].read()[good_idx]\n-        mag       = flagcat_data[\"mag_auto\"].read()[good_idx]\n-        mag_psf   = flagcat_data[\"mag_psf\"].read()[good_idx]\n-        spread    = flagcat_data[\"spread_model\"].read()[good_idx]\n-        star_idxs = np.where(np.abs(spread) < 0.002)[0]\n-        \n-        #replace mag_auto for stars with mag_psf\n-        mag[star_idxs] = mag_psf[star_idxs]\n-        \n-        #good      = np.where(mag < 90)[0]\n-        #for consistency...\n-        good = np.where( np.logical_and((mag >= self._args.min_mag), (mag <= self._args.ref_mag)) )\n-        mag       = mag[good]\n-        cox       = cox[good]\n-        coy       = coy[good]\n-        \n-        # Project the detected object position to the sky to \n-        # compute the ra/dec positions\n-        #MW: retired\n-        #ite       = [iter(cox), iter(coy)]\n-        #pixcoo    = list(it.__next__() for it in itertools.cycle(ite))\n-        pixcoo    = StackPSF.prepare_sky_coordinates(cox, coy)\n-        \n-        #MW: do this consistently with astropy\n-        #MW: no, as this crashes KIDS processing\n-        #investigate why\n-        #image_hdu = FitsServices.get_image_hdu(self.coadd.name)\n-        #hdul = fits.open(self.coadd.name)  # open a FITS file\n-        #h = hdul[image_hdu].header \n-        #WCSU = WcsUtils(h)\n-        WCSU      = WcsUtils(self.coadd.returnHeader())        \n-        cora, codec = WCSU.py_pix2world(pixcoo[0::2], pixcoo[1::2])\n-        #skycoo    = _getWcsLibCorners.py_pix2world(\n-        #    self.coadd.wcs_params + pixcoo)\n-        #codec     = np.array(skycoo[1::2])\n-        #cora      = np.array(skycoo[0::2])\n-        if len(cora) > 0:\n-            self.writeLog(\"The provided coadd catalog is empty, it will not be used.\")\n-            idx, cidx = self.matchCoordinates(self.ra, self.dec, cora, codec)\n-            self.mag[idx]  = mag[cidx]\n-        #\n-        \n-    def project_positions_onto_coadd_pixel_space(self, ra, dec):\n-        \"\"\"\n-        Project the input positions onto the coadd pixel space, \n-        and filter out the edge sources\n-        \"\"\"\n-        #get a extract image object of the coadd\n-        self.coadd = self.getCoaddMetadata(self._args.coadd)\n-        skycoords  = StackPSF.prepare_sky_coordinates(ra, dec)\n-        X, Y       = StackPSF.getPixels(self.coadd, skycoords)\n-        \n-        #MW: getPixels subtracts 1, here it is added again\n-        #but at other places, nothing is added\n-        #-> inconsistent?\n-        #write a test\n-        #also: check, if X and Y must be swapped\n-        return X + 1, Y + 1\n-    \n-    \n-    def measure_gains_of_single_images(self):\n-        \"\"\"\n-        Loop over the list of single images and measure the\n-        gain for each image in a subregion where no sources \n-        are present. Defines the dictionary self.G, containing\n-        the gain for each amplifier for each single image in\n-        self.inputdata.\n-        \"\"\"\n-        self.writeLog('Measuring the gain of the single images')\n-        initial_run = 1\n-        imghdu = -1\n-        whdu = -1\n-        key_naxis1 = \"NAXIS1\"\n-        key_naxis2 = \"NAXIS2\"\n-        iotime = 0\n-        ndtime = 0\n-        cliptime = 0\n-        import time\n-        for imagename in self.inputdata:\n-            \"\"\"\n-            Measure the gain of one single epoch image for the\n-            two amplifiers A and B, using the formula \n-            G = I * W where I is the image and W is the weight.\n-            The gain is evaluated in a \"background region\" where\n-            no sources are present. \"The background region\"\n-            is identified via sigma clipping on the single \n-            epoch image.\n-            \"\"\"\n-            s = time.time()\n-            #lets assume all images are the same\n-            #get their hdus\n-            if initial_run:\n-                imghdu = FitsServices.get_image_hdu(imagename)\n-                whdu = FitsServices.get_weight_hdu(imagename)\n-                print(\"imghdu = \", imghdu, \", weight hdu = \", whdu)\n-            #\n-            \n-            img_fits     = fitsio.FITS(imagename)\n-            image        = img_fits[imghdu].read()\n-            img_h        = img_fits[imghdu].read_header()\n-            weight       = img_fits[whdu].read()\n-            \n-            #are the images compressed?\n-            if initial_run:\n-                initial_run = 0\n-                if img_fits[imghdu].is_compressed():\n-                    key_naxis1 = \"ZNAXIS1\"\n-                    key_naxis2 = \"ZNAXIS2\"\n-            #\n-            img_fits.close()\n-            iotime += time.time() - s\n-            \n-            naxis1       = img_h[key_naxis1]\n-            naxis2       = img_h[key_naxis2]\n-            \n-            imageA       = image[ naxis2 // 2 - 200 : naxis2 // 2 + 200,\n-                                  naxis1 // 4 - 100 : naxis1 // 4 + 100]\n-            weightA      = weight[naxis2 // 2 - 200 : naxis2 // 2 + 200,\n-                                  naxis1 // 4 - 100 : naxis1 // 4 + 100]\n-            \n-            imageB       = image[ naxis2 // 2     - 200 : naxis2 // 2 + 200,\n-                                  naxis1 // 4 * 3 - 100 : naxis1 // 4 * 3 + 100]\n-            weightB      = weight[naxis2 // 2     - 200 : naxis2 // 2 + 200,\n-                                  naxis1 // 4 * 3 - 100 : naxis1 // 4 * 3 + 100]\n-            s = time.time()\n-            \n-            A     = SigmaClip.SigmaClip(imageA.flatten(), weightA.flatten())\n-            B     = SigmaClip.SigmaClip(imageB.flatten(), weightB.flatten())\n-            \n-            cliptime += time.time() - s\n-            s = time.time()\n-            \n-            gainA = np.array(A.bkgArr) * np.array(A.bkWeight)\n-            gainB = np.array(B.bkgArr) * np.array(B.bkWeight)\n-            \n-            self.G[imagename]      = {}\n-            self.G[imagename]['A'] = np.median(gainA)\n-            self.G[imagename]['B'] = np.median(gainB)\n-            ndtime += time.time() - s\n-            \n-        #\n-        print(\"iotime, cliptime, ndtime \", iotime, cliptime, ndtime)\n-        return self.G\n-\n-    def init_image(self, image):\n-        \"\"\"\n-        Instantiates the ExtractImage class and reads the WCS parameters\n-        \"\"\"\n-        # Read the SE image and get WCS\n-        name       = image.split(\" \")[0]\n-        obj        = ExtractImage.ExtractImage(name, verbose = 0)\n-        obj.getWcsParams()\n-        return obj\n-\n-    def project_input_coordinates_into_the_single_image_pixel_space(self, single_epoch_image, layer_positions):\n-        \"\"\"\n-        Project the coordinates onto the se image pixel space\n-        \"\"\"\n-        #MW: in this method we add positions for all layer objects calculated from only one single image!\n-        #layer_positions must be copied and then thrown away\n-        temp_layer_pos = copy.deepcopy(layer_positions)\n-        \n-        skycoords  = StackPSF.prepare_sky_coordinates(temp_layer_pos.ra, temp_layer_pos.dec)\n-        # Project the coordinates onto the se image pixel space\n-        WCSU       = WcsUtils(single_epoch_image.returnHeader())\n-        se_x, se_y   = WCSU.py_world2pix(skycoords)\n-        \n-        #add the X,Y values for the ra, dec, mag values already in temp_layer_pos\n-        temp_layer_pos._add_y_list(np.array(se_y))\n-        temp_layer_pos._add_x_list(np.array(se_x))\n-        overlapping_positions = self.filter_out_objects_not_contained_in_the_single_image(single_epoch_image, temp_layer_pos)\n-        return overlapping_positions\n-                                                               \n-    \n-    def filter_out_objects_not_contained_in_the_single_image(self, single_epoch_image : ExtractImage, objects : ObjectList):\n-        \"\"\"\n-        single_epoch_image: an ExtractImage object with single epoch image information\n-        objects: an ObjectList containing ra, dec, mag, X, Y information for objects on a layer\n-        \"\"\"\n-        # Get the objects that ovelap the single image\n-        \"\"\"\n-        #MW:here we take objects, whose center falls into the image\n-        idx = np.where((objects.X >= -(self.get_stamp_size() // 2)) &\n-                       (objects.Y >= -(self.get_stamp_size() // 2)) &\n-                       (objects.X <= single_epoch_image.naxis1 + (self.get_stamp_size() // 2)) &\n-                       (objects.Y <= single_epoch_image.naxis2 + (self.get_stamp_size() // 2)))[0]\n-        \"\"\"\n-        #MW:lets take all objects, whose stamp overlaps the image with at least one pixel\n-        idx = np.where(self.stamp_overlaps_image(objects.X, objects.Y, single_epoch_image.naxis1, single_epoch_image.naxis2))[0]\n-        \n-        objects._filter(idx)\n-        return objects\n-\n-    def get_object_positions_from_single_epoch_catalogue(self, sename):\n-        \"\"\"\n-        Reads the single epoch catalogue and extracts the relevant fields\n-        \n-        return\n-        last hdu of the catalog (which is the one with the table data)\n-        \"\"\"\n-        # Read the single epoch catalogue\n-        psf_file_name, catname = self.get_auxiliary_file_names(sename)\n-        return fitsio.FITS(catname)[-1]\n-        \n-        \n-        \n-    def flux_2_mag(self, fluxarray, zeropoint):\n-        \"\"\"\n-        converts arrays with fluxes into arrays with magnitudes\n-        if a flux value should be <=0, it will be set to math.pow(10, -28)\n-        to result in magnitudes > 90\n-        \"\"\"\n-        farray = np.array(fluxarray)\n-        farray[ np.where( farray <= 0.0 ) ] = math.pow(10, -28)\n-        \n-        magarray = np.array([ (-2.5 * math.log10(flux) + zeropoint) for flux in farray])\n-        return magarray\n-    #\n-    \n-    \n-    def match_single_epoch_catalogue_objects_with_input_positions(self, overlapping_positions:ObjectList, cat_data, se_image_name):\n-        \"\"\"\n-        Match the catalogue objects with the coordinates that overlap the single image\n-        and re-order the matched fields\n-        \n-        overlapping_positions: an ObjectList with the ra,dec,mag,x,y coordinates of the single image objects\n-        cat_data: the table hdu of the matching catalog of se_image_name\n-        se_image_name a single image\n-        \n-        return\n-        ObjectList with the matched objects\n-        indexes: a dict with the ids of detected, non-detected and objects with good flags \n-        \"\"\"\n-        #Match the catalogue objects with the coordinates that overlap the single image\n-        #the single epoch catalogs contain only x,y positions\n-        #use the wcs from the header to generate ra,dec\n-        #DES data uses model fitting, KIDS aperture fitting. Add LSST later\n-        #possible_xy_catalog_values: list of catalog table names that apply (X_IMAGE, X_WIN etc.)\n-        xvalue = self.possible_xy_catalog_values[0][0]\n-        yvalue = self.possible_xy_catalog_values[0][1]\n-        for xy_values in self.possible_xy_catalog_values:\n-            if xy_values[0] in cat_data._colnames and xy_values[1] in cat_data._colnames:\n-                xvalue = xy_values[0]\n-                yvalue = xy_values[1]\n-                break\n-            #\n-        #\n-        \n-        #from catalog X/Y and se-image WCS, get se-image ra/dec\n-        xlist = cat_data[xvalue].read()\n-        ylist = cat_data[yvalue].read()\n-        \n-        image_hdu = FitsServices.get_image_hdu(se_image_name)\n-        h = FitsServices.read_header(se_image_name, image_hdu)\n-        \n-        #MW: do this consistently with astropy\n-        #MW: no, as this crashes KIDS processing\n-        #investigate why\n-        #hdul = fits.open(se_image_name)  # open a FITS file\n-        #h = hdul[image_hdu].header \n-        WCSU = WcsUtils(h)\n-        ralist, declist = WCSU.py_pix2world(xlist, ylist)\n-        \n-        #indexes of matching objects:\n-        #detected_objects_idx: indexes in overlapping positions\n-        #seIdx: indexes in catalog ra/dec. Apply to select from catalog\n-        detected_objects_idx, seIdx   =  self.matchCoordinates(\n-            overlapping_positions.ra, overlapping_positions.dec, ralist, declist)\n-        \n-        # Re-order the matched fields\n-        #-> select from catalog\n-        #-> now sera, dec, spread have the same order as detected_objects \n-        #   from overlapping positions\n-        sera         = ralist[seIdx]\n-        sedec        = declist[seIdx]\n-        sespread     = cat_data[\"spread_model\"].read()[seIdx]\n-        \n-        # We use mag_psf for stars, mag_auto for extended objects\n-        #MW: like above with the coordinates, fluxes should be used and transformed\n-        #with zeropoints - possibly updated in stage 2\n-        #prefer fluxes above magnitudes, if possible.\n-        #At the time of writing, DES does not come with mag_psf though\n-        #This code will be simplified, once all catalogs contain the required \n-        #flux values\n-        semag = np.array([])\n-        semag_psf = np.array([])\n-        if \"FLUX_AUTO\" in cat_data._colnames and \"FLUX_PSF\" in cat_data._colnames:\n-            semag        = cat_data[\"flux_auto\"].read()[seIdx] #kids flux_auto, des mag_auto\n-            semag_psf    = cat_data[\"flux_psf\"].read()[seIdx] #kids: flux_psf, des mag-psf\n-            \n-            #transform flux to magnitudes\n-            zp = float( self.inputdata[se_image_name][\"zp\"] )\n-            semag = self.flux_2_mag( semag, zp )\n-            semag_psf = self.flux_2_mag( semag_psf, zp )\n-        elif \"MAG_AUTO\" in cat_data._colnames and \"MAG_PSF\" in cat_data._colnames:\n-            semag        = cat_data[\"mag_auto\"].read()[seIdx]\n-            semag_psf    = cat_data[\"mag_psf\"].read()[seIdx]\n-        #\n-        star_idxs    = np.where((np.abs(sespread) < 0.002) & \n-                                  (semag_psf < 90.))[0]\n-        \n-        #replace the coadd catalog mags with the single epoch catalog mags?????? for stars\n-        semag[star_idxs] = semag_psf[star_idxs]\n-        seflags      = cat_data[\"flags\"].read()[seIdx]\n-        indexes      = self.define_single_epoch_indexes(detected_objects_idx, seflags, overlapping_positions._length)\n-        \n-        se_matched_objects = ObjectList(semag, ra = sera, dec = sedec)\n-        se_matched_objects._add_attribute('flags', seflags)\n-        return se_matched_objects, indexes\n-    \n-    def define_single_epoch_indexes(self, detected_objects_idx, seflags, total_object_number):\n-        \"\"\"\n-        Defines a dictionary containing the indexes of :\n-        - detected objects\n-        - good objects (where the flags are OK),\n-        - non-detected objects\n-        relative to the input set of positions overlapping the single image\n-        \"\"\"\n-        indexes = {}\n-        if self._args.keep_edge_obj:\n-            #MW: keep_edge_obj works for the coadd and the single images\n-            #there is no way to keep the edge objects of the single images and thus\n-            #guantee high quality mapping, but keep out the edge objects of the coadd \n-            #to avoid half-moon shaped psfs\n-            good_idx      = np.where((seflags & 4  == 0) & \n-                                    (seflags & 16 == 0) &\n-                                    (seflags & 32 == 0))[0]\n-        else:\n-            good_idx      = np.where((seflags & 4  == 0) & \n-                                    (seflags & 8  == 0) &\n-                                    (seflags & 16 == 0) &\n-                                    (seflags & 32 == 0))[0]\n-\n-        # Get the indexes of the objects that are not detected in the\n-        # single image, or for which the information in the single \n-        # epoch catalogue is not reliable (bad flags)\n-        non_detected_objects_idx        = [x for x in range(total_object_number) if x not in detected_objects_idx[good_idx]]\n-        indexes['detected_objects']     = detected_objects_idx #unaltered in this method. Was the match \n-                                                               #between se-image overlaps and se-catalog\n-        indexes['non_detected_objects'] = non_detected_objects_idx #se-image overlaps with bad flags\n-        indexes['good_objects']         = good_idx #all se-catalog flags as required\n-        return indexes\n-    \n-    \n-    def stamp_overlaps_image(self, x, y, naxis1, naxis2):\n-        \"\"\"\n-        Algorithm to define, if the stamp surrounding an object with coordinates x,y overlaps \n-        an image naxis1, naxis2.\n-        \n-        x,y: numbers or arrays of x,y values\n-        naxis1, naxis2: wcs parameters\n-        \n-        return \n-        boolean value or array of booleans, matching x,y format\n-        \"\"\"\n-        try:\n-            comparator = self.get_stamp_size()//2\n-            return (x > - (comparator - 0.5)) & \\\n-                (y > - (comparator - 0.5)) & \\\n-                (x < naxis1 + 0.5 + comparator) & \\\n-                (y < naxis2 + 0.5 + comparator)\n-        except Exception as e:\n-            print(e)\n-            print(\"comparator \", comparator, \", type \", type(comparator))\n-            print(\"naxis1 \", naxis1, \", type \", type(naxis1))\n-            print(\"naxis2 \", naxis2, \", type \", type(naxis2))\n-            \n-    #\n-    \n-    def stamp_inside_image(self, x, y, naxis1, naxis2):\n-        \"\"\"\n-        Algorithm to define, if the stamp of an object with coordinates x,y is \n-        completely inside an image naxis1, naxis2.\n-        \n-        x,y: numbers or arrays of x,y values\n-        naxis1, naxis2: wcs parameters\n-        \n-        return\n-        boolean value or array of booleans, matching x,y format\n-        \"\"\"\n-        comparator = self.get_stamp_size()//2\n-        return (x >= comparator + 0.5) & \\\n-           (y >= comparator + 0.5) & \\\n-           (x <= naxis1 - (comparator - 0.5)) & \\\n-           (y <= naxis2 - (comparator - 0.5))\n-    #\n-    \n-    \n-    def fill_se_matches(self, overlapping_positions, se_matched_objects, seobj, indexes):\n-        \"\"\"\n-        Fills an entry in the self.se_matches for the objects that are \n-        not detected, using the value of the magnitude defined in the\n-        self.getSkyPosition method, and for those that are detected and \n-        are marked as 'good' (meaning that the flags are OK).\n-        \n-        overlapping_positions: ra,dec,mag for the layer from the coadd catalogs\n-        se_matched_objects: data (ra,dec,mag) from single epoch catalogs\n-        seobj: ExtractImage Object\n-        \"\"\"\n-        detected_objects_idx = indexes['detected_objects']\n-        image_header = seobj.get_image_header()\n-        if \"INSTRUME\" in image_header:\n-            instrument = image_header[\"INSTRUME\"] #we require this to be there\n-        else:\n-            instrument = \"LSST or KIDS\"\n-        #\n-        \n-        # Adding the 'good' objects contained in the coadd catalogue\n-        for i in indexes['good_objects']:\n-            # Fills an entry in the self.se_matches for each detected object \n-            # using the magnitude value from the single epoch catalogue\n-            self.se_matches[\"%.10f:%.10f\" % (\n-                overlapping_positions.ra[detected_objects_idx[i]], overlapping_positions.dec[detected_objects_idx[i]])][seobj.name] = [\n-                    se_matched_objects.mag[i], se_matched_objects.ra[i], se_matched_objects.dec[i]]\n-        #\n-        if self._args.keep_edge_obj:\n-            # If keep_edge_obj option is given, we fill an entry for each object\n-            # whose stamp overlaps the single image\n-            \n-            # Adding the non detected objects\n-            #they must always be added otherwise psf would miss in some images and thus \n-            #destroying the psf in the layer coadd\n-            #the mag could be set to -99 though in order to weight them out\n-            for i in indexes['non_detected_objects']:\n-                \"\"\"\n-                #MW:here we take objects, whose center falls into the image\n-                #this is duplicate code. See lines 1227 ff. correct\n-                if (overlapping_positions.X[i] >= -(self.get_stamp_size() // 2)) and (\n-                        overlapping_positions.Y[i] >= -(self.get_stamp_size() // 2)) and (\n-                            overlapping_positions.X[i] <= seobj.naxis1 + (self.get_stamp_size() // 2)) and (\n-                                overlapping_positions.Y[i] <= seobj.naxis2 + (self.get_stamp_size() // 2)):\n-                \"\"\"\n-\n-                magnitude = overlapping_positions.mag[i]\n-                #MW: DECAM is now calibrated\n-                #if \"DECam\" in instrument:\n-                #    #correct for incorrect DECam single epoch magnitudes\n-                #    overlapping_positions.mag[i] - self.inputdata[seobj.name][\"zp\"] + self._args.default_zp\n-                if self.stamp_overlaps_image(overlapping_positions.X[i], overlapping_positions.Y[i], seobj.naxis1, seobj.naxis2):\n-                    self.se_matches[\"%.10f:%.10f\" % (overlapping_positions.ra[i], overlapping_positions.dec[i])][seobj.name] = [\n-                        magnitude, \n-                        overlapping_positions.ra[i], overlapping_positions.dec[i]]\n-            #\n-            # Adding the 'good' objects contained in the coadd catalogue\n-            #for i in indexes['good_objects']:\n-            #    # Fills an entry in the self.se_matches for each detected object \n-            #    # using the magnitude value from the single epoch catalogue\n-            #    self.se_matches[\"%.10f:%.10f\" % (\n-            #        overlapping_positions.ra[detected_objects_idx[i]], overlapping_positions.dec[detected_objects_idx[i]])][seobj.name] = [\n-            #            se_matched_objects.mag[i], se_matched_objects.ra[i], se_matched_objects.dec[i]]\n-            #\n-        else:\n-            # If keep_edge_obj option is not given, we fill an entry for each object\n-            # whose stamp is completely included in the single image\n-            # We assign the magnitude value of -99 to the edge objects,\n-            # in order to later mask them when creating the PSF stamps.\n-        \n-            # Adding the non detected objects (i.e. the objects that are not included\n-            # in the single image catalogue\n-            for i in indexes['non_detected_objects']:\n-                \"\"\"\n-                if (overlapping_positions.X[i] > (self.get_stamp_size() // 2)) and (\n-                        overlapping_positions.Y[i] > (self.get_stamp_size() // 2)) and (\n-                            overlapping_positions.X[i] <= seobj.naxis1 - ((self.get_stamp_size() // 2) + 1)) and (\n-                                overlapping_positions.Y[i] <= seobj.naxis2 - ((self.get_stamp_size() // 2) + 1)):\n-                elif (overlapping_positions.X[i] >= -(self.get_stamp_size() // 2)) and (\n-                        overlapping_positions.Y[i] >= -(self.get_stamp_size() // 2)) and (\n-                            overlapping_positions.X[i] <= seobj.naxis1 + (self.get_stamp_size() // 2)) and (\n-                                overlapping_positions.Y[i] <= seobj.naxis2 + (self.get_stamp_size() // 2)):\n-                \"\"\"\n-                if self.stamp_inside_image(overlapping_positions.X[i], overlapping_positions.Y[i], seobj.naxis1, seobj.naxis2):\n-                    self.se_matches[\"%.10f:%.10f\" % (overlapping_positions.ra[i], overlapping_positions.dec[i])][seobj.name] = [\n-                        overlapping_positions.mag[i] - self.inputdata[seobj.name][\"zp\"] + self._args.default_zp, \n-                        overlapping_positions.ra[i], overlapping_positions.dec[i]]\n-                    self.writeLog(\"fill_se_matches: overlapping_positions.mag[i] \" +str(overlapping_positions.mag[i]) +\", self.inputdata[seobj.name]['zp'] \" +str(self.inputdata[seobj.name]['zp']) +\", self._args.default_zp \" +str(self._args.default_zp) )\n-                elif self.stamp_overlaps_image(overlapping_positions.X[i], overlapping_positions.Y[i], seobj.naxis1, seobj.naxis2):\n-                    self.se_matches[\"%.10f:%.10f\" % (overlapping_positions.ra[i], overlapping_positions.dec[i])][seobj.name] = [\n-                        -99, overlapping_positions.ra[i], overlapping_positions.dec[i]]\n-            #\n-            # Adding the 'good' objects contained in the coadd catalogue\n-            #for i in indexes['good_objects']:\n-            #    # Fills an entry in the self.se_matches for each detected object \n-            #    # using the magnitude value from the single epoch catalogue\n-            #    self.se_matches[\"%.10f:%.10f\" % (\n-            #        overlapping_positions.ra[detected_objects_idx[i]], overlapping_positions.dec[detected_objects_idx[i]])][seobj.name] = [\n-            #            se_matched_objects.mag[i], se_matched_objects.ra[i], se_matched_objects.dec[i]]\n-        #\n-\n-    def assertFalse(self, retval):\n-        \"\"\"\n-        print an error message if retval is not 0\n-        \"\"\"\n-        if retval !=0:\n-            self.writeLog(retval)\n-        #\n-    #\n-        \n-    def get_auxiliary_file_names(self, sename):\n-        \"\"\"\n-        Get the name of the Single spoch catalogue and of the \n-        PSF model corresponding to an input single epoch image.\n-        \"\"\"\n-        return self.inputdata[sename][\"psf\"], self.inputdata[sename][\"cat\"]\n-\n-\n-    def compute_minimum_separation_for_objects_in_layer(self):\n-        \"\"\"\n-        Checks that all SE images in the SElist have an associated\n-        PSF model.\n-        Defines self.min_separation, containing the minimum distance \n-        for non-overlapping PSFs in all objects.\n-        \n-        returns: the minimum separation in of 2 objects in arcseconds\n-        \"\"\"\n-        self.writeLog(\n-            \"Getting the minimum angular separation for non overlapping PSFs\")\n-        min_separation = 0.\n-        self.pixscale  = 0\n-        max_separation_in_pixels = 0\n-        \n-        for seimage in self.inputdata:\n-            se_header = fitsio.FITS(seimage)[FitsServices.get_image_hdu(seimage)].read_header()\n-            if \"pixscal1\" in se_header and \"pixscal2\" in se_header:\n-                pixscal1 = float(se_header[\"pixscal1\"])\n-                pixscal2 = float(se_header[\"pixscal2\"])\n-            else:\n-                pixscal1 = math.sqrt( float(se_header[\"CD1_1\"]) **2 + float(se_header[\"CD2_1\"]) **2 ) *3600.0\n-                pixscal2 = math.sqrt( float(se_header[\"CD1_2\"]) **2 + float(se_header[\"CD2_2\"]) **2 ) *3600.0\n-            #\n-            ######################################################################\n-            if abs( max(pixscal1, pixscal2) - self.pixscale ) > 0.01:\n-                if self.pixscale == 0:\n-                    self.pixscale = max(pixscal1, pixscal2)\n-                    self.writeLog(\"Pixel scale = %s arcsec / pixel\" % self.pixscale)\n-                else:\n-                    self.writeLog(\"Error: some images have a different pixel scale: %s \" % max(pixscal1, pixscal2))\n-            #######################################################################\n-                    \n-            psf_file_name = self.inputdata[seimage][\"psf\"]\n-            catname = self.inputdata[seimage][\"cat\"]\n-            \n-            psfobj        = PSFUtils.PSFUtils(psf_file_name)\n-            retval        = psfobj.file_exists(psf_file_name)\n-            \n-            self.assertFalse(retval)\n-            \n-            psfnaxis        = psfobj.get_convolution_params()\n-            \n-            max_sep       = max(psfnaxis)\n-            if max_separation_in_pixels < max_sep:\n-                max_separation_in_pixels = max_sep\n-            sep = np.sqrt(2.) * max_sep * max(pixscal1, pixscal2) \n-            \n-            if sep > min_separation:\n-                min_separation = sep\n-            #print(\"max_sep \", max_sep, \", max pixelsize \", max(pixscal1, pixscal2))\n-        \n-        # We want the stamp size to be odd\n-        if max_separation_in_pixels % 2 == 0:\n-            max_separation_in_pixels = max_separation_in_pixels - 1\n-        \n-        self.min_separation = min_separation\n-        self.writeLog(\"Min separation for non overlapping PSFs: %s arcsec\" % (\n-            self.min_separation))\n-        self.writeLog(\"Stampsize: %s pixels\" % (\n-            max_separation_in_pixels))\n-        \n-        return min_separation, max_separation_in_pixels\n-    \n-\n-    def readLayers(self):\n-        \"\"\"\n-        Reads the layers of non overlapping objects from a json file (DEBUG)\n-        \"\"\"\n-        lists              = OrderedDict()\n-        self.layer_objects = OrderedDict()\n-        with open(self._args.layers_file) as json_data:\n-            lists          = json.load(json_data)\n-        max_layers         = self._args.max_layer_num \n-        if max_layers <= 0 or max_layers > len(lists):\n-            max_layers     = len(lists)\n-        \n-        missing_obj        = 0\n-        for layeridx in range(max_layers):\n-            self.layer_objects[str(layeridx)] = lists[str(layeridx)]\n-            self.writeLog(\"Layer %s contains %s objects\" % (\n-                layeridx, len(self.layer_objects[str(layeridx)])))\n-            layeridx      += 1\n-        for k in range(max_layers, len(lists)):\n-            missing_obj   += len(lists[str(k)])\n-        \n-        self.writeLog('The total number of layers is set to %s.' % max_layers)\n-        self.writeLog('You are missing the PSF for %s objects.' % \n-                      missing_obj)\n-        \n-    def write_to_fits(self, layer, seobj, psfimage, psfweight):\n-        \"\"\"\n-        Write the PSF single image to a FITS file\n-        \"\"\"\n-        layerdir = self.tmpdir + os.sep + \"layer%s\" % layer\n-        tmp_out_name   = layerdir + os.sep + self.out_name % (\n-            os.path.basename(seobj.name.split(\".fits\")[0])) \n-        f = fitsio.FITS(tmp_out_name, 'rw', clobber = True)\n-        f.write(np.array(psfimage,       dtype = 'float32'), \n-                header = seobj.header, \n-                extver = 1)\n-        f.write(np.zeros(psfimage.shape, dtype = 'float32'), \n-                header = seobj.returnHeader(seobj.firsthdu + 1), \n-                extver = 2) \n-        f.write(np.array(psfweight,      dtype = 'float32'), \n-                header = seobj.returnHeader(seobj.firsthdu + 2), \n-                extver = 3) \n-        f.close()\n-    #\n-    \n-    def new_write_to_fits(self, layer, seobj, psfimage, psfweight):\n-        \"\"\"\n-        Write the PSF single image to a FITS file\n-        \"\"\"\n-        layerdir = self.tmpdir + os.sep + \"layer%s\" % layer\n-        tmp_out_name   = layerdir + os.sep + self.out_name % (\n-            os.path.basename(seobj.name.split(\".fits\")[0])) \n-        \n-        hdul = fits.open(seobj.name)\n-        \n-        hdu0 = fits.PrimaryHDU(data = np.array(psfimage, dtype = 'float32'), \n-            header = hdul[seobj.firsthdu].header)\n-        \n-        hdu1 = fits.ImageHDU(data = np.zeros(psfimage.shape, dtype = 'float32'), header = hdul[seobj.firsthdu +1].header)\n-        hdu2 = fits.ImageHDU(data = np.array(psfweight,      dtype = 'float32'), header = hdul[seobj.firsthdu +2].header)\n-        fits.HDUList([hdu0, hdu1, hdu2]).writeto(tmp_out_name, overwrite=True)\n-        hdul.close()\n-    #\n-    \n-    \n-    def writeLog(self, message):\n-        \"\"\"\n-        prints the message and writes it in the log file\n-        \"\"\"\n-        print(\"\\n%s\" % datetime.datetime.now(), message)\n-        self.logger.write(\"\\n%s\" % message)\n-    #\n-    \n-    def get_PSF_image(self, seobj, se_objects):\n-        \"\"\"\n-        Return  the PSF grid image and weights\n-        \"\"\"\n-        skycoords = StackPSF.prepare_sky_coordinates(se_objects.ra, se_objects.dec)\n-        X, Y      = StackPSF.getPixels(seobj, skycoords)\n-        if len(X) == 0:\n-            self.writeLog(\"No projected positions\")\n-            return None\n-        #\n-        data, noise, gains = self.define_maps(seobj)\n-        \n-        # Read the SE PSF model \n-        psf_file_name, catname = self.get_auxiliary_file_names(seobj.name)\n-        \n-        psfobj                 = PSFUtils.PSFUtils(psf_file_name)\n-        #get the psf stamp size from the psf file header\n-        psfnaxis               = psfobj.get_convolution_params()\n-        \n-        #MW here the objects need a zp\n-        zp                 = self.inputdata[seobj.name][\"zp\"] \n-        objects                = ObjectList(se_objects.mag, zp = [zp]*len(X), X = X, Y = Y)\n-        \n-        # Evaluate the PSF for each pixel\n-        \n-        #this takes time\n-        #can we parallelize it?\n-        #as it is done now, there would be concurrency problems\n-        #we would need a separate psfobj per process and call them independently\n-        #like n psfobj and split the inputlists in n parts\n-        all_stamps = psfobj.evaluateAll( list(objects.X +1), list(objects.Y +1))\n-        #all_stamps = self.evaluate_all_psfs( list(objects.X +1), list(objects.Y +1), psf_file_name, self._args.multiproceses)\n-        print(\"all stamps returned. len: \", len(all_stamps), \", len(x) \", len(objects.X))\n-        \n-        counter = 0\n-        for object_index in range(objects._length):\n-            data, gains, shifted_stamp = self.add_PSF_stamp_to_image(data, gains, objects, object_index, all_stamps[object_index], psfnaxis)\n-            #data, gains = self.add_PSF_stamp_to_image(data, gains, objects, object_index, psfobj, psfnaxis)\n-            \n-            if self._args.debug:\n-                \"\"\"\n-                save the stamp and the stamp and the image into a fits file \n-                for inspection - this will be many fits files!\n-                \"\"\"\n-                stamp = all_stamps[object_index]\n-                stamp.shape = ( int(psfnaxis[0]), int(psfnaxis[1]) )\n-                hdus = fits.PrimaryHDU(stamp)\n-                \n-                hdr = fits.Header()\n-                hdr['X'] = str(objects.X[object_index])\n-                hdr['Y'] = str(objects.Y[object_index])\n-                hdui = fits.ImageHDU(data, header = hdr)\n-                hduss = fits.ImageHDU(shifted_stamp)\n-        \n-                hdul = fits.HDUList([hdus, hdui,hduss])\n-                hdul.writeto(seobj.name.rsplit(os.sep, 1)[-1].split(\".\", 1)[0] +'_psf_' +str(counter) +'.fits', overwrite = 1)\n-                \n-                #reset data to 0\n-                data = np.zeros(shape=data.shape, dtype=float, order='F')\n-            #\n-            \n-            counter+= 1\n-        print(\"added \", counter, \" psfstamps to image \")\n-        weights = gains / (data + noise)\n-        \n-        #weights = 1.0/ (data + float(seobj.getKey('skysigma'))*float(seobj.getKey('skysigma')) )\n-        return data, weights, gains, noise\n-    #\n-    \n-    def evaluate_sublist_of_psfs(self, _queue:mp.Queue, psf_filename:str, x_values:list, y_values:list):\n-        \"\"\"\n-        method that allows parallel processing of a x/y sublist\n-        stores result in a queue object\n-        \"\"\"\n-        psfobj = PSFUtils.PSFUtils(psf_filename)\n-        all_stamps = psfobj.evaluateAll( x_values, y_values)\n-        #print(\"for values \", x_values, y_values, \" processed stamps \", all_stamps)\n-        _queue.put(all_stamps)\n-    #\n-    \n-    def evaluate_all_psfs(self, x_values:list, y_values:list, psf_filename:str, multiprocesses:int):\n-        \"\"\"\n-        evaluate the psfs - the most time consuming thing in the stackpsf - \n-        in a parallel fashion.\n-        Calculates the psf as image for a given x,y position.\n-        \n-        Parameters:\n-        x_values: the x values of the objects in pixelspace\n-        y_values: the y values of the objects in pixelspace\n-        \n-        psf_filename: the psf file to use for the evaluation\n-        multiprocesses: the number of parallel processes to use\n-        \n-        Returns:\n-        a list of psfstamps to add to the simulated image\n-        \"\"\"\n-        \n-        #approach: split the input list into partial lists, \n-        #according to the number of available processes\n-        #use multiprocessing to start separate processes for\n-        #each partial list\n-        #finally merge the result into one list\n-                \n-        \n-        partlength = math.floor( len(x_values)/multiprocesses )\n-        queuelist = dict()\n-          \n-        for i in range(multiprocesses - 1):\n-            #split\n-            x = x_values[i*partlength: (i+1)*partlength]\n-            y = y_values[i*partlength: (i+1)*partlength]\n-            \n-            #maintain a strictly ordered queuelist to keep the results in the correct order\n-            queuelist[i] = mp.Queue()\n-            \n-            #start the process\n-            p = mp.Process(target=self.evaluate_sublist_of_psfs, args=(queuelist[i], psf_filename, x, y))\n-            p.start()\n-            #p.join()\n-        #do all this for the rest of the x/y arrays\n-        x = x_values[(multiprocesses - 1)*partlength: ]\n-        y = y_values[(multiprocesses - 1)*partlength: ]\n-        queuelist[multiprocesses - 1] = mp.Queue()\n-            \n-        p = mp.Process(target=self.evaluate_sublist_of_psfs, args=(queuelist[multiprocesses - 1], psf_filename, x, y))\n-        p.start()\n-        #p.join()\n-        \n-        #print(\"quelist \", queuelist)\n-        #grab and return the results\n-        _keys = sorted(list(queuelist.keys()))\n-        \n-        all_stamps = queuelist[_keys[0]].get()\n-        print(\"shape \", all_stamps.shape)\n-        for k in sorted(_keys)[1:]:\n-            stamps = queuelist[k].get()\n-            print(\"shape \", stamps.shape)\n-            if stamps.shape[0] > 0 & all_stamps.shape[0] > 0:\n-                all_stamps = np.concatenate( (all_stamps, stamps) )\n-            else:\n-                all_stamps = stamps\n-            #\n-        #\n-        return all_stamps\n-    #\n-        \n-    \n-    def estimate_noise(self, sename):\n-        \"\"\"\n-        trys to read the skybrite and skysigma keyword\n-        In case of absense, gets the background hdu, calculates \n-        its mean and stdev\n-        \"\"\"\n-        image_hdu = FitsServices.get_image_hdu(sename)\n-        h = FitsServices.read_header(sename, image_hdu)\n-        \n-        if 'skybrite' in h and 'skysigma' in h:\n-            return float(h['skybrite']), float(h['skysigma'])\n-        else:\n-            bg_hdu = FitsServices.get_bg_hdu(sename)\n-            bg = FitsServices.read_data(sename, bg_hdu)\n-            if bg is not None:\n-                return np.mean(bg), np.std(bg)\n-            #\n-        #MW: fix that header value/background hdu problem asap!    \n-        return 0.01, 0.001 \n-        #\n-    #\n-    \n-    def define_maps(self, seobj):\n-        \"\"\"\n-        Prepares the arrays containing the output maps\n-        for the single epoch PSF stamp\n-        \"\"\"\n-        data_dim  = (seobj.naxis2, seobj.naxis1)\n-        skybrite, skysigma = self.estimate_noise(seobj.name)\n-        \n-        #generate the keys, if missing\n-        #MW debug this, if skybrite is not in the header \n-        #values will be None\n-        seobj.getKey('skybrite')\n-        seobj.getKey('skysigma')\n-        \n-        #set the values\n-        seobj.skybrite = skybrite\n-        seobj.skysigma = skysigma\n-        noise     = np.ones(data_dim) * skybrite\n-        data      = np.zeros(data_dim, dtype = np.float64) \n-\n-        # Compute the  weight map\n-        gains     = np.ones(data_dim, dtype = np.float64)\n-        gains[:, :(data_dim[1] // 2)] *= self.G[seobj.name]['A']\n-        gains[:, (data_dim[1] // 2):] *= self.G[seobj.name]['B']\n-        return data, noise, gains\n-\n-    def get_normalization_for_stamp(self, mag, zp):\n-        \"\"\"\n-        Evaluate the normalization for the PSF stamp\n-        \n-        convert the magnitudes to flux using the default zp\n-        -> this should use the real zp of the image\n-        \n-        If no mag is given, (the code sets it to -99 for objects \n-        not in the SE catalog), 0 is returned.\n-        \"\"\"\n-        if mag == -99:\n-            return 0.\n-        else:\n-            #convert the magnitudes to flux using the zp\n-            #-> this should use the real zp of the image\n-            #self.writeLog(\"get_normalization_for_stamp \" +str(mag) +\", zp \" +str(zp))\n-            return 10 ** ((zp - mag) / 2.5)\n-    \n-    def evaluate_PSF_for_pixel(self, pixel, psfobj, norm):\n-        \"\"\"\n-        Evaluate the PSF from the PSF model for the given pixel\n-        pixel: the xy coordinate of the psf\n-        psfobj: the psf model objects\n-        norm: the flux of the objects (converted from mag and default_zp)\n-        \"\"\"\n-        # psfobj.evaluate wants the pixel expressed in the\n-        # IRAF reference frame\n-        psfdata = psfobj.evaluate(pixel[0] + 1, pixel[1] + 1)\n-        return  psfdata * norm\n-        \n-        \n-    def add_PSF_stamp_to_image(self, data, gains, objects, object_index, stamp, psfnaxis):\n-        \"\"\"\n-        Adds the PSF stamp to the image\n-        \"\"\"\n-        try:\n-            mag = objects.mag[object_index]\n-            # pixel is in the SE coordinate reference frame\n-            pixel     = (objects.X[object_index], objects.Y[object_index])\n-            #convert the magnitude to flux (=norm)\n-            \n-            #MW here we need the real zp from the se_image of the objects origin\n-            zp = objects.zp[object_index]\n-            #self.writeLog(\"add_PSF_stamp_to_image: objects zp \" +str(zp) )\n-            norm      = self.get_normalization_for_stamp(mag, zp)\n-            \n-            \n-            #which mags to we deal with?\n-            if abs(norm) > 1.e38 or mag > 90.:\n-                return data, gains, stamp\n-            #\n-            if self._args.normalize_psfs:\n-                #normalize!\n-                #this is a debug option\n-                stamp = stamp/max(stamp)\n-            else:\n-                #this is the usual way\n-                stamp = stamp*norm\n-            #\n-            #stamp     = self.evaluate_PSF_for_pixel(pixel, psfobj, norm)\n-            stamp.shape = ( int(psfnaxis[0]), int(psfnaxis[1]) )\n-            stamp_dim = np.array(stamp.shape)\n-            \n-            \n-            data_dim  = data.shape\n-            start, end, shift  = self.get_indexes_of_stamp_on_image(pixel, stamp_dim)\n-            \n-            stamp = ndimage.shift(stamp, (shift[1], shift[0]), order=5)\n-\n-\n-            #does the stamp completely overlap?\n-            #if not, adapt the indices\n-            stampcut = [0,0,psfnaxis[0],psfnaxis[1]]\n-            modify = False\n-            if start[0] < 0:\n-                #cut the stamp\n-                stampcut[0] = -start[0]\n-                start[0] = 0\n-                modify = True\n-            if start[1] < 0:\n-                stampcut[1] = -start[1]\n-                start[1] = 0\n-                modify = True\n-            if end[0] > data_dim[1]:\n-                #cut the stamp\n-                stampcut[2] = data_dim[1] - end[0]\n-                end[0] = data_dim[1]\n-                modify = True\n-            if end[1] > data_dim[0]:\n-                #cut the stamp\n-                stampcut[3] = data_dim[0] - end[1]\n-                end[1] = data_dim[0]\n-                modify = True\n-            if modify:\n-                stamp = stamp[int(stampcut[1]):int(stampcut[3]), int(stampcut[0]):int(stampcut[2]) ]\n-            #\n-            #print(\"data \", int(start[1]),int(end[1]), int(start[0]),int(end[0]), \", stamp \", stamp.shape)\n-\n-            if np.all(np.array(stamp.shape) > 0):\n-                #if not, the stamp is outside of the array\n-                #this may happen in some cases as the stampsize is the max of the psfnaxes\n-                if not modify:\n-                    #only add not modified stamps\n-                    data[int(start[1]):int(end[1]), int(start[0]):int(end[0])] += stamp\n-                else:\n-                    #if stamps are modified, set the gain to 0, so they don't contribute\n-                    gains[int(start[1]):int(end[1]), int(start[0]):int(end[0])] = 0\n-                #\n-                if norm == 0. or mag == -99:\n-                    #gains are set to 0, means also weights will be 0\n-                    gains[int(start[1]):int(end[1]), int(start[0]):int(end[0])] = 0\n-                #\n-            #\n-            return data, gains, stamp/norm\n-        #\n-        except Exception as e:\n-            #if there is a problem for one object, \n-            #don't fail. Report and go on.\n-            print(\"An object could not be added to the layer image. \")\n-            exec_info =  sys.exc_info()\n-            traceback.print_tb(exec_info[2])\n-        #\n-        \n-        \n-    def get_indexes_of_stamp_on_image(self, pixel, stamp_dim):\n-        \"\"\"\n-        Get the indexes of the image on which the stamp should be added\n-         \n-        Parameters:\n-        pixel a set of (x,y) values in single image reference frame\n-        stamp_dim ndarray of stamp.shape\n-        \"\"\"\n-        #psf is centered in the central pixel of the stamp\n-        #which is coordinate (stampsize - 1)/2.0\n-        \n-        #Center of the stamp falls into image pixel\n-        ix = int(pixel[0] +0.5)\n-        iy = int(pixel[1] +0.5)\n-        \n-        #this is also the coordinate of the pixel after projection\n-        #so the necessary shift is\n-        shiftx = pixel[0] - ix\n-        shifty = pixel[1] - iy\n-        \n-        #should the stamp have an even number of pixels,\n-        #the center is betwen pixels and it does not fall \n-        #into the center pixel of the image, but also between pixels\n-        #in this case, it must be shifted by another 0.5 pixel\n-        if (stamp_dim[0] & 1) == 0:\n-            shiftx+=0.5\n-        if (stamp_dim[1] & 1) == 0:\n-            shifty+=0.5\n-        \n-        #first pixel for the stamp addition is\n-        startx = ix - stamp_dim[1]//2\n-        starty = iy - stamp_dim[0]//2\n-        \n-        endx = startx + stamp_dim[1] #end coordinate is exclusive\n-        endy = starty + stamp_dim[0]\n-        \n-        #return in col/row natation to avoid numpy chaos\n-        return [startx, starty], [endx, endy], [shiftx, shifty]\n-    \n-    \"\"\"\n-    MW: retired\n-    def add_PSF_stamp_to_image(self, data, gains, objects, object_index, psfobj, psfnaxis):\n-        #Adds the PSF stamp to the image\n-        mag = objects.mag[object_index]\n-        # pixel is in the SE coordinate reference frame\n-        pixel     = (objects.X[object_index], objects.Y[object_index])\n-        #convert the magnitude to flux (=norm)\n-        norm      = self.get_normalization_for_stamp(mag)\n-        \n-        #which mags to we deal with?\n-        if abs(norm) > 1.e38 or mag > 90.:\n-            return data, gains\n-        \n-        stamp     = self.evaluate_PSF_for_pixel(pixel, psfobj, norm)\n-        stamp.shape = ( int(psfnaxis[0]), int(psfnaxis[1]) )\n-        stamp_dim = np.array(stamp.shape)\n-        \n-        data_dim  = data.shape\n-        start, end, delta_start, delta_end  = self.get_indexes_of_stamp_on_image(pixel, data_dim, stamp_dim)\n-        if np.all((end + delta_end) - (start + delta_start) > 0):\n-            #MW: here is the point, where only completely overlapping stamps are put\n-            #into the image? tbc! This is why we don't have edge overlapping objects \n-            #in the singleimage\n-            # Calculate the data and PSF stamp overlapping indices\n-            data_start  = start     + delta_start\n-            data_end    = end       + delta_end\n-            stamp_start = delta_start\n-            stamp_end   = stamp_dim + delta_end\n-\n-            # Add the PSF stamp to the data\n-            #MW: should we round instead of casting to int?\n-            #currently, there may be up to a pixel error\n-            data[int(data_start[0]):int(data_end[0]), \n-                 int(data_start[1]):int(data_end[1])] += stamp[\n-                     int(stamp_start[0]):int(stamp_end[0]), \n-                     int(stamp_start[1]):int(stamp_end[1])]\n-            if norm == 0. or mag == -99:\n-                #gains are set to 0, means also weights will be 0\n-                gains[int(data_start[0]):int(data_end[0]), \n-                      int(data_start[1]):int(data_end[1])] = 0.\n-        return data, gains\n-        \n-    def get_indexes_of_stamp_on_image(self, pixel, data_dim, stamp_dim):\n-        #Get the indexes of the image on which the stamp should be added\n-        # \n-        #Parameters:\n-        #pixel a set of (x,y) values in single image reference frame\n-        #data_dim a set (ndarray.shape) of the single image size\n-        #stamp_dim ndarray of stamp.shape\n-        # Get the pixel where the PSF should be added\n-        point       = np.array(pixel[::-1]) \n-        # SEpixel refers to the center of the pixel\n-        SEpixel     = point + 0.5 \n-        stamp_cog   = np.array(stamp_dim / 2, \n-                               dtype = 'float') + point - np.array(\n-                                   point + 0.5, dtype = 'int') \n-        \n-        # Get the indices of the affected region on the image\n-        start       = np.array(np.round(\n-            SEpixel - stamp_cog), dtype = 'int')\n-        end         = start + stamp_dim\n-        # Make sure that at least part of the region falls on the image\n-        delta_start = 0 - start\n-        delta_start[delta_start < 0] = 0\n-        delta_end   = data_dim - end\n-        delta_end[delta_end > 0]     = 0\n-        return start, end, delta_start, delta_end\n-    \"\"\"\n-    \n-    \n-    def get_swarp_lists(self, layerdir):\n-        \"\"\"\n-        gets the input lists for swarp that are relevant for the current layer,\n-        stores them in the dictionary swarp_list ands returns it.\n-        \"\"\"\n-        #psflist: this is the list of the psfstamps\n-        psflist = [layerdir + os.sep + x for x in os.listdir(\n-            layerdir) if '_psfstamps' in x]\n-        names = [x.rsplit(os.sep, 1)[-1].split('_psfstamps')[0] for x in psflist]\n-        \n-        #single_epoch_list_for_layer: the list of the real single epoch images\n-        #from the data directory\n-        #must be perfectly matched to the psflist\n-        single_epoch_srcpath = list(self.inputdata.keys())[0].rsplit(os.sep, 1)[0]\n-        single_epoch_list_for_layer = [self.exists(single_epoch_srcpath +os.sep +x +\".fits\") for x in names]\n-        \n-        flux_scales    = self.write_flux_scales_list(layerdir, single_epoch_list_for_layer)\n-        imlist, wtlist = self.write_swarp_lists(psflist, 'psfSwarpList')\n-        swarp_lists    = {'images'       : imlist, \n-                          'weights'      : wtlist, \n-                          'flux_scales'  : flux_scales}\n-        return swarp_lists, single_epoch_list_for_layer, psflist\n-    #\n-    \n-    \n-    def swarp_call(self, coadd, band, swarp_lists, bg_sub):\n-        \"\"\"\n-        Define and return the swarp call\n-        \"\"\"\n-        swarpcall = [\n-            \"@%s\" % swarp_lists['images'],\n-            \"-c\",                \"%s/etc/default.swarp \" % os.environ[\n-                'EUCLID_CONF'],\n-            \"-PIXELSCALE_TYPE\",  \"MANUAL \",\n-            \"-PIXEL_SCALE\",      \"%s\"     % coadd.pixscale,\n-            \"-CENTER_TYPE\",      \"MANUAL \",\n-            \"-CENTER\",           \"%s,%s \" % (coadd.crval1, coadd.crval2),\n-            \"-IMAGE_SIZE\",       \"%s,%s \" % (coadd.naxis1, coadd.naxis2),\n-            \"-SUBTRACT_BACK\",    \"%s\" % bg_sub,\n-            \"-BLANK_BADPIXELS\",  \"N \",\n-            \"-COPY_KEYWORDS\",    \"PSF_FWHM,PSF_BETA,FWHMHOMO \",\n-            \"-DELETE_TMPFILES\",  \"Y\",\n-            \"-FSCALASTRO_TYPE\",  \"NONE \",\n-            \"-FSCALE_DEFAULT\",   \"@%s\"   % swarp_lists['flux_scales'],\n-            \"-FSCALE_KEYWORD\",   \"nokey\", \n-            \"-RESAMPLE\",         \"Y\",\n-            \"-RESAMPLING_TYPE\",  self._args.swarp_resampling,\n-            \"-COMBINE\",          \"Y \",\n-            \"-WEIGHT_TYPE\",      \"MAP_WEIGHT \",\n-            #\"-WEIGHT_TYPE\",      \"NONE\",\n-            \"-WEIGHT_IMAGE\",     \"@%s\" % swarp_lists['weights'],\n-            \"-HEADER_ONLY\",      \"N \",\n-            \"-NTHREADS\",         str(self._args.multiprocesses),\n-            \"-COMBINE_TYPE\",     \"WEIGHTED \",\n-            #\"-COMBINE_TYPE\",     \"AVERAGE \",\n-            \"-WRITE_XML\",        \"Y\",\n-            \"-XML_NAME\",         \"%s/%s_%s_swarp.xml\" % (\n-                self.xmldir, self.tilename, band),\n-            \"-TILE_COMPRESS\",    \"N \", #MW: this creates correlated bg noise as the input is exactly 0\n-            \"-IMAGEOUT_NAME\",    \"%s_%s.image.fits\"   % (\n-                self.tilename, band),\n-            \"-WEIGHTOUT_NAME\",   \"%s_%s.weight.fits\"  % (\n-                self.tilename, band),\n-            \"-RESAMPLE_DIR\",     \"%s\" % self.resdir,\n-            \"-VMEM_DIR\",         \"%s\" % self.resdir +os.sep +\"VMEM_DIR\",\n-            \"-VMEM_MAX\",         \"4096 \",\n-            \"-MEM_MAX\",          \"6500 \",\n-            \"-COMBINE_BUFSIZE\",  \"6000 \"\n-        ]\n-        return swarpcall\n-\n-    def filter(self, ra, dec, mag, spread, flags, indexes):\n-        ra     = ra[indexes]\n-        dec    = dec[indexes]\n-        mag    = mag[indexes]\n-        spread = spread[indexes]\n-        flags  = flags[indexes]\n-        return ra, dec, mag, spread, flags\n-\n-    def matchCoordinates(self, ra1, dec1, ra2, dec2):\n-        \"\"\"\n-        Match the input coordinates, returns the lists of matched\n-        indexes for the two catalogues \n-        \n-        Returns \n-        aidx: indices of matching coordinates in array ra1, dec1\n-        bidx: indices of matching coordinates in array r2, dec2\n-        \n-        ra1[aidx[0]], dec1[aidx[0]] match ra2[bidx[0]], dec2[bidx[0]]\n-        \"\"\"\n-        c       = SkyCoord(ra  = ra1  * u.degree, \n-                           dec = dec1 * u.degree)\n-        catalog = SkyCoord(ra  = ra2  * u.degree, \n-                           dec = dec2 * u.degree)\n-        #BIdx: indices of catalog that match c\n-        #d2d angular distance of the matched objects\n-        BIdx, d2d, d3d = c.match_to_catalog_sky(catalog)\n-        d2d     = d2d.hour * 15. * 3600.\n-        \n-        AIdx    = np.arange(len(d2d))\n-        #BIdx   = BIdx[d2d <=  self._args.max_separation_for_match]\n-        #AIdx   = AIdx[d2d <=  self._args.max_separation_for_match]\n-        BIdx    = BIdx[d2d <=  2 * self.pixscale]\n-        AIdx    = AIdx[d2d <=  2 * self.pixscale]\n-        return AIdx, BIdx\n-        \n-    def get_PSF_info(self, sename, layer_positions):\n-        \"\"\"\n-        Extract the information about the objects in the se image from \n-        self.se_matches\n-        \"\"\"\n-        info  = np.array([\n-            self.se_matches[\n-                '%.10f:%.10f' % (key[0], key[1])][sename] for key in zip(\n-                layer_positions.ra, layer_positions.dec) if sename in self.se_matches[\n-                '%.10f:%.10f' % (key[0], key[1])]])\n-        mag    = np.array([x[0] for x in  info])\n-        se_ra  = np.array([x[1] for x in  info])\n-        se_dec = np.array([x[2] for x in  info])\n-        se_objects = ObjectList(mag, ra = se_ra, dec = se_dec)\n-        return se_objects\n-    #\n-    \n-    \n-    def create_working_directory_for_layer(self, layer):\n-        \"\"\"\n-        Creates the temporary layer directory\n-        \"\"\"\n-        layerdir = self.tmpdir + os.sep + \"layer%s\" % layer\n-        if os.path.isdir(layerdir):\n-            shutil.rmtree(layerdir)\n-        os.makedirs(layerdir)\n-                \n-    def write_flux_scales_list(self, outdir, single_epoch_list_for_layer):\n-        \"\"\"\n-        Compute the scale corrections to be applied by swarp.\n-        Returns the filename containing the list of corrections.\n-        \"\"\"\n-        fscaleList = \"%s/%s_%s_fluxscale.list\" % (\n-            outdir, self.tilename, self.band)\n-        f = open(fscaleList, \"w+\")\n-        for sename in single_epoch_list_for_layer:\n-            zp = self.inputdata[sename.split(\" \")[0]][\"zp\"]\n-            #fluxscale for swarp: sets the coadd to default_zp\n-            #-> adapt that to coadd_zp?\n-            fluxscale = pow(10, ((self._args.coadd_zp - zp) / 2.5))\n-            f.write(\"%s\\n\" % fluxscale)\n-        f.close()\n-        return fscaleList\n-\n-    def write_swarp_lists(self, inlist, label):\n-        \"\"\"\n-        Defines two files containing the lists of images and weights \n-        for swarp. Returns the file names.\n-        \"\"\"\n-        iname = self.auxdir + os.sep + label + '_img.list'\n-        wname = self.auxdir + os.sep + label + '_wht.list'\n-        f = open(iname, 'w+')\n-        g = open(wname, 'w+')\n-        for sename in inlist:\n-            f.write(\"%s[0]\\n\" % sename)\n-            g.write(\"%s[2]\\n\" % sename)\n-        f.close()\n-        g.close()\n-        return iname, wname\n-\n-    def run_swarp(self, workdir, swarp_lists, bg_sub = 'N'):\n-        \"\"\"\n-        defines the swarp call and executes the program\n-        \n-        returns the path to the output image\n-        \"\"\"\n-        pwd = os.getcwd()\n-        os.chdir(workdir)\n-        \n-        self.coadd  = self.getCoaddMetadata(self._args.coadd)\n-        swarp_args  = self.swarp_call(self.coadd, self.band, swarp_lists, bg_sub)\n-        self.writeLog(\"Running Swarp:\")\n-        self.writeLog(\"CT_SWarp \" + \" \".join(swarp_args))\n-        self.execute(\"CT_SWarp\", swarp_args, wait = True)\n-        \n-        #self.writeLog(\"%s/bin/swarp %s\" % (\n-        #    os.environ['EUCLID_PREREQ'], \" \".join(swarp_args)))\n-        #self.execute(\"%s/bin/swarp\" % os.environ['EUCLID_PREREQ'], \n-        #             swarp_args, wait = True)\n-        os.chdir(pwd)\n-        image_out = (workdir + os.sep +swarp_args[swarp_args.index(\"-IMAGEOUT_NAME\") +1]).split()[0]\n-        weight_out = (workdir + os.sep +swarp_args[swarp_args.index(\"-WEIGHTOUT_NAME\") +1]).split()[0]\n-        return image_out, weight_out\n-    #\n-\n-    def getCoaddMetadata(self, coaddname):\n-        \"\"\"\n-        Get metadata from the coadd header\n-        \"\"\"\n-        self.writeLog(\"Getting the tile metadata\")\n-        coadd = self.init_image(coaddname)\n-        \n-        coadd.getKey(\"crval1\")\n-        coadd.getKey(\"crval2\")\n-        coadd.getKey(\"cd1_1\")\n-        coadd.getKey(\"cd1_2\")\n-        coadd.getKey(\"cd2_1\")\n-        coadd.getKey(\"cd2_2\")\n-\n-        if coadd.compressed:\n-            coadd.getKey(\"znaxis1\")\n-            coadd.getKey(\"znaxis2\")\n-            setattr(coadd,\"naxis1\",coadd.znaxis1)\n-            setattr(coadd,\"naxis2\",coadd.znaxis2)\n-        else:\n-            coadd.getKey(\"naxis1\")\n-            coadd.getKey(\"naxis2\")\n-        ##calculate the pixel scale                   \n-        cdelt1   = np.sqrt(coadd.cd1_1 ** 2 + coadd.cd1_2 ** 2)      \n-        cdelt2   = np.sqrt(coadd.cd2_1 ** 2 + coadd.cd2_2 ** 2)               \n-        pixscale = 0.5 * (cdelt1 + cdelt2) * 3600.0          \n-        setattr(coadd, 'pixscale', 0.5 * (\n-            cdelt1 + cdelt2) * 3600.0)\n-        return coadd\n-        \n-    def clean_up(self):\n-        \"\"\"\n-        Remove the temporary files, close the logger\n-        \"\"\"\n-        if self._args.clean_up:\n-            self.writeLog(\"Removing the temporary files\")\n-            shutil.rmtree(self.tmpdir)\n-        self.writeLog(\"Total computation time: %s s\" % (time.time() - self.starttime))\n-        self.logger.close()\n-\n-\n-class FilterType(object):\n-    limit_abs_sum = None\n-    def __init__(self, name, limit_abs_sum, fraction_zeroes_upper_limit, amplitude_upper_limit, uppler_limit_fit_deviation):\n-        self.name = name\n-        self.limit_abs_sum = limit_abs_sum\n-        self.fraction_zeroes_upper_limit = fraction_zeroes_upper_limit\n-        self.amplitude_upper_limit = amplitude_upper_limit\n-        self.uppler_limit_fit_deviation = uppler_limit_fit_deviation\n-    #\n-    \n-    def getName(self):\n-        return self.name\n-    #\n-#\n-\n-\n-class FilterTypes(Enum):\n-    DES = FilterType(\"DES\", 0.0001, 0.3, 0.0, 0.05)\n-    KIDS = FilterType(\"KIDS\", 0.0001, 0.3, 0.0, 0.2)\n-    LSST = FilterType(\"LSST\", 0.0001, 0.2, 0.0, 0.05)\n-    NOS = FilterType(\"NOS\", 0.0001, 0.3, 0.0, 0.05)\n-#\n-\n-class PsfStampFilter(object):\n-    \n-    def __init__(self, stamp_size, filtertype = FilterTypes.DES, execfilter = True):\n-        #define the filtersettings\n-        self.filtertype = filtertype.value #enum value is the Filtertype\n-        self.stamp_size = stamp_size\n-        self.execfilter = execfilter\n-    #\n-    \n-    def get_stamp_size(self):\n-        #print(\"get stamp size \", self.stamp_size)\n-        return self.stamp_size\n-    def set_stamp_size(self, stamp_size):\n-        self.stamp_size = stamp_size\n-    #\n-    def filter(self, layer_objects, layer_coadds, objects_x, objects_y):\n-        \"\"\"\n-        Identifies the PSFs that cannot be fit with a gaussian shape\n-        and removes them from the output file\n-        \"\"\"\n-        if not self.execfilter:\n-            return layer_objects\n-        #\n-        temp_layer_objects = OrderedDict()\n-        counter_zeroes = 0\n-        counter_badshape = 0\n-        counter_stampEmpty = 0\n-        zero_fraction = list()\n-        for i in range(len(layer_objects)):\n-            #get the coadd image\n-            layer_coadd = layer_coadds[str(i)]\n-            if layer_coadd is None:\n-                print(\"coadd for layer \", i, \" does not exist.\")\n-                continue\n-            #this is a fits image with only one hdu. Read it as hdunum 0\n-            imgdata = FitsServices.read_data(layer_coadd, 0)\n-            \n-            temp = []\n-            for obj in layer_objects[str(i)]:\n-                x = objects_x[obj]\n-                y = objects_y[obj]\n-                stamp  = Stamp(imgdata, self.get_stamp_size(), imgdata.shape)\n-                stamp_image = stamp.get_stamp_at(x,y)\n-                \n-                _max = abs(np.amax(stamp_image))\n-                _min = abs(np.amin(stamp_image))\n-                _sum = np.sum(stamp_image)\n-                \n-                \n-                #print(\" min, max \", _min, _max, \", same order of magnitude? \", (_max - _min)/_max < 0.9, \", sum \", _sum )\n-                z_f = 1.0*np.sum(stamp_image == 0)/(self.get_stamp_size()*self.get_stamp_size())\n-                zero_fraction.append(z_f)\n-                if z_f > self.filtertype.fraction_zeroes_upper_limit:\n-                    #if abs(_sum) < self.filtertype.limit_abs_sum or _sum < self.filtertype.sum_upper_limit:\n-                    #print(\"Contains 0.0. Reject.\", np.sum(Stamp_image == 0))\n-                    counter_zeroes = counter_zeroes +1\n-                    continue\n-                \"\"\"\n-                try:\n-                    amplitude, center, sigma = ArrayUtils.fit_simple_gauss_2d(Stamp_image)\n-                    #print(\"sigma \", sigma)\n-                    if amplitude < self.filtertype.amplitude_upper_limit:\n-                        #print(\"Negative fit amplitude. Reject.\")\n-                        counter_badshape = counter_badshape + 1\n-                        continue\n-                    psf_dim = np.array(Stamp_image.shape)\n-                    idxs = ArrayUtils.get_array_indices(psf_dim)\n-                    shape = Stamp_image.shape\n-                    gauss = ArrayUtils.simple_gauss_2d(idxs, amplitude, center[1], center[0], sigma)\n-                    print(np.sqrt(np.mean((Stamp_image.flatten() - gauss) ** 2.))/amplitude)\n-                    if np.sqrt(np.mean((Stamp_image.flatten() - gauss) ** 2.))/amplitude < self.filtertype.uppler_limit_fit_deviation:\n-                        temp.append(obj)\n-                    else:\n-                        #print('PSF centered at %.3f, %.3f skipped: bad PSF shape' % (x, y))\n-                        counter_badshape = counter_badshape + 1\n-                        continue\n-                except:\n-                    print('PSF centered at %.3f, %.3f skipped: could not fit a gaussian' % (x, y))\n-                    counter_badshape = counter_badshape + 1\n-                \"\"\"\n-                #test only for completely empty stamps\n-                if abs(_sum) < 0.0001 or _sum < 0:\n-                    #print(\"reject for low sum \", _sum, \", x \", x, \"y \", y)\n-                    counter_stampEmpty = counter_stampEmpty +1\n-                    continue\n-                else:\n-                    temp.append(obj)\n-                #\n-            #\n-            temp_layer_objects[str(i)] = temp\n-        print(\"  \", [len(temp_layer_objects[x]) for x in temp_layer_objects])\n-        #print(zero_fraction)\n-        print(\"stamps filtered out:\")\n-        print(\"bad shape \", counter_badshape)\n-        print(\"incomplete coverage (too many zeroes) \", counter_zeroes)\n-        print(\"stamp completely empty \", counter_stampEmpty)\n-        \n-        return temp_layer_objects\n-    #\n-#\n-\n-\n-\n-\n-if __name__ == \"__main__\":\n-    #prepare the command line\n-    argparser = argparse.ArgumentParser()\n-    argparser.add_argument(\"--position_cat\",  type = str, default = 'VIS.cat', \n-                           help = 'path to the catalogue containing the \\\n-                           positions on the sky on  which we want to compute \\\n-                           the stacked PSFs')\n-    #argparser.add_argument(\"--sort_catalog_by_mag\", dest = 'sort_catalog_by_mag', action = \n-    #                       'store_const',     const = True,  default = False,  \n-    #                       help = 'sorts the refence catalog by magnitude and thus puts \\\n-    #                       the brightest objects preferrably on the first layers.')\n-    argparser.add_argument(\"--ra\",            type = str, default = 'RA', \n-                           help = 'name of the catalogue field containing ra \\\n-                           positions')\n-    argparser.add_argument(\"--dec\",           type = str, default = 'DEC', \n-                           help = 'name of the catalogue field containing \\\n-                           dec positions')\n-    argparser.add_argument(\"--mag_entry\",  type = str, default = 'MAG_AUTO', \n-                           help = 'magnitude entry in the position catalog.')\n-    argparser.add_argument(\"--tilename\",      type = str, default = '', \n-                           help = 'tile name')\n-    argparser.add_argument(\"--band\",          type = str, default = '', \n-                           help = 'which band')\n-    argparser.add_argument(\"--SElist\",        type = str, default = \n-                           'SElist.fits',     help = 'path to the file \\\n-                           containing the list of SE image overlapping the \\\n-                           coadd')\n-    argparser.add_argument(\"--outdir\",        type = str, default = '~/tmp', \n-                           help = 'the output directory')\n-    argparser.add_argument(\"--ramdisk\",       type = str, default = \n-                           '/dev/shm/EuclidPipeline', help = 'the ramdisk \\\n-                           directory')\n-    argparser.add_argument(\"--coadd\",         type = str, default = '', \n-                           help = 'path to the coadd tile. Needed only for \\\n-                           the metadata, can be replaced to a query to the \\\n-                           EAS ')\n-    argparser.add_argument(\"--coadd_cat\",     type = str, default = None, \n-                           help = 'path to the coadd catalogue, needed\\\n-                           to flag the edge sources, using the sextractor \\\n-                           edge flag (8). If left empty, the program will \\\n-                           skip the objects whose center lay within \\\n-                           (stamp_size // 2) + 1 pixels from the edge of  \\\n-                           the coadd, where stamp_size is the size in pixels \\\n-                           of the PSF model stamp. It can be replaced to a \\\n-                           query to the EAS.')\n-    argparser.add_argument(\"--coadd_x\",      type = str, default = 'X_IMAGE', \n-                           help = 'name of the coadd catalogue field \\\n-                           containing x positions in the coadd catalogues.')\n-    argparser.add_argument(\"--coadd_y\",     type = str, default = 'Y_IMAGE', \n-                           help = 'name of the coadd catalogue field \\\n-                           containing y positions in the coadd catalogues.')\n-    argparser.add_argument(\"--max_layer_num\", type = int, default = sys.maxsize, \n-                           help = 'Maximum number of non-overlapping layers \\\n-                           in the final PSF product. If set to 0, the code \\\n-                           will use the maximum value from the layer \\\n-                           computation')\n-    argparser.add_argument(\"--coadd_zp\", type = float, default = 30.0, \n-                           help = 'Value of the coadd zeropoint. This is where the \\\n-                           coadded simulated psfs are flux-scaled to')    \n-    argparser.add_argument(\"--default_zp\",        type = float, default = 25., \n-                           help = 'Value of the uncalibrated zero point')\n-    argparser.add_argument(\"--clean_up\",        type = int, default = True, \n-                           help = 'if this option is given, the ramdisk will \\\n-                           not be cleaned after the PSF object computation')\n-    argparser.add_argument(\"--keep_edge_objects\", dest = 'keep_edge_obj', action = \n-                           'store_const',     const = True,  default = True,  \n-                           help = 'This option can be used to keep the objects \\\n-                           that are close to the edges of the single epoch \\\n-                           images in SElist (the default is to skip them)')\n-    argparser.add_argument(\"--normalize\", dest = 'normalize_psfs', action = \n-                           'store_const',     const = True,  default = False,  \n-                           help = 'If used, the psfs are not normalized to \\\n-                           a flux value, but to max(psf) = 1 \\\n-                           to allow easy quality checks in debug mode.')\n-    argparser.add_argument(\"--max_separation_for_match\",  type = float, default = 1., \n-                           help = 'Maximum distance in arcsecs for a match. \\\n-                           Default: 1.')\n-    argparser.add_argument(\"--multiprocesses\", type = int, default = 1, \n-                           help = 'Number of parallel processes. Default = 1.')\n-    argparser.add_argument(\"--bandpass_value\", type = float, default = 0.0, \n-                           help = 'The effective wavelength of the coadd. Default = 0.0')\n-    argparser.add_argument(\"--swarp_resampling\", type = str, default = \"LANCZOS3\", \n-                           help = 'One of swarps possible resampling types. Default = LANCZOS3')\n-    argparser.add_argument(\"--debug\", type = bool, default = False, \n-                           help = 'debug mode. Default = False.')\n-\n-                           \n-    if not len(sys.argv) > 1:\n-        argparser.print_help()\n-        sys.exit()\n-    args = argparser.parse_args()\n-   \n-    psf  = StackPSF(args)\n-    a = time.time()\n-    psf.run()\n-    print(\"time for execution of stackpsf \", time.time() - a)\n-    psf.clean_up()\n-\n",
                            "loopswarp with input file generation on demand",
                            "Michael",
                            "2023-07-15T22:35:56.000+02:00",
                            "9d73cee49a5e1faa2f94e94e1605cbe516ecb7cc"
                        ]
                    ],
                    "EXT_PF1_GEN_P2/python/EXT_PF1_GEN_P2/Pipeline/rdisk_coadd_stage2_pipeline.pscript": [
                        [
                            "@@ -313,7 +313,8 @@ for band in bands:\n     \n     retval = Pipeline.execute('CT_SWarp', coadd_nonhomog_args, wait = True)\n     Qa_log_reporter.output_file_exists('Swarp nonhomog mask output', maskout_name)\n-    \n+    Pipeline.delete_list(resampled_mask_list, clean_up, _from = resampledir_nhcoadd)\n+\n     \n     ####\n     Pipeline.log(\"Fifth swarp call (resample psfids)\")\n",
                            "add option to swarp coadds in chunks and then combine to full product",
                            "Michael",
                            "2023-07-10T12:15:03.000+02:00",
                            "7b8b6a1cddb18e2a9c64452eaaba612cfdbbccea"
                        ]
                    ],
                    "EXT_PF1_GEN_P2/python/EXT_PF1_GEN_P2/pybin/StackPsfExec.py": [
                        [
                            "@@ -132,6 +132,9 @@ def defineSpecificProgramOptions():\n                            help = 'The effective wavelength of the coadd. Default = 0.0')\n     argparser.add_argument(\"--swarp_resampling\", type = str, default = \"LANCZOS3\", \n                            help = 'One of swarps possible resampling types. Default = LANCZOS3')\n+    argparser.add_argument(\"--loopswarp_chunks\", type = int, default = 1000000,\n+                           help = \"It defines the chunks of the inputdata. \\\n+                           Default = 1000000 (don't use LoopSwarp\")\n     argparser.add_argument(\"--debug\", type = bool, default = False, \n                            help = 'debug mode. Default = False.')\n     return argparser\n",
                            "add option to swarp coadds in chunks and then combine to full product",
                            "Michael",
                            "2023-07-10T12:15:03.000+02:00",
                            "7b8b6a1cddb18e2a9c64452eaaba612cfdbbccea"
                        ]
                    ]
                },
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": [
                    {
                        "name": "0.9.0",
                        "created_at": "2023-07-04T12:48:58.000+02:00",
                        "author_name": "Michael"
                    },
                    {
                        "name": "0.9.1",
                        "created_at": "2023-08-01T17:08:52.000+02:00",
                        "author_name": "Michael"
                    }
                ]
            }
        }
    }
}