{
    "LE2": {
        "PF-NIR": {
            "PF-NIR/NIR_Baseline": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_Documentation": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_DQC_Pipeline": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_TransientDetection": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_Dependencies": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_SelfCalib": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_IAL_Pipelines": {
                "start date": "2023-06-26T19:09:18",
                "end date": "2023-08-09T21:58:44",
                "start tag": "2.2.0",
                "end tag": "2.3.1",
                "count_files_modified": "50",
                "modifications_by_file": {
                    "CMakeLists.txt": [
                        [
                            "@@ -16,4 +16,4 @@ elements_project(NIR_IAL_Pipelines 2.3\n                  USE\n                  Elements 6.2.1\n                  ST_DataModel 9.2.0\n-                 ST_PipelineChecker 1.5.0)\n+                 ST_PipelineChecker 1.5.1)\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ],
                        [
                            "@@ -14,6 +14,6 @@ find_package(ElementsProject)\n \n elements_project(NIR_IAL_Pipelines 2.3\n                  USE\n-                 Elements 6.1.1\n-                 ST_DataModel 9.1.5\n-                 ST_PipelineChecker 1.4.0)\n+                 Elements 6.2.1\n+                 ST_DataModel 9.2.0\n+                 ST_PipelineChecker 1.5.0)\n",
                            "Merge branch 'DM92_update' into 'develop'",
                            "Thomas Gasparetto",
                            "2023-07-03T09:40:32.000+00:00",
                            "2071ea55716d41f9de141db558789bdee79cbbc1"
                        ],
                        [
                            "@@ -14,6 +14,6 @@ find_package(ElementsProject)\n \n elements_project(NIR_IAL_Pipelines 2.3\n                  USE\n-                 Elements 6.1.1\n-                 ST_DataModel 9.1.5\n-                 ST_PipelineChecker 1.4.0)\n+                 Elements 6.2.1\n+                 ST_DataModel 9.2.0\n+                 ST_PipelineChecker 1.5.0)\n",
                            "update to DM 9.2.0, Elements, jenkins, PipelineChecker. Adding CI file",
                            "Thomas Gasparetto",
                            "2023-07-03T09:40:32.000+00:00",
                            "c836a6652fe083eff2f72bdf00e1f1ab80dbc580"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_AbsolutePhotometry_Pipeline/PipDef_NIR_AbsolutePhotometry.xml": [
                        [
                            "@@ -1,5 +1,5 @@\n <tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_H-CALIB_ABSOLUTE-PHOTOMETRY_DEV_2022.03.29</Id> \n+    <Id>PipDef_NIR_CALIB_ABSOLUTE-PHOTOMETRY_2023.08.08</Id> \n     <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag> \n     <PipelineScriptPath>NIR_AbsolutePhotometry_Pipeline/PipScript_NIR_AbsolutePhotometry.py</PipelineScriptPath>\n     <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n@@ -7,18 +7,17 @@\n         <KeyProductInputDataPlan>\n             <InputPortName>dithers</InputPortName>\n             <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"H\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"H\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>(dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"UNKNOWN\") AND (dithers.Data.ObservationSequence.CalblockId == \"UNKNOWN\") AND (dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n-                <Max>4</Max>\n+                <Max>800</Max>\n             </Cardinality>\n         </KeyProductInputDataPlan>\n-        <InputDataPlan>\n+         <InputDataPlan>\n             <InputPortName>nirConfig</InputPortName>\n             <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>nirConfig.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -28,9 +27,9 @@\n         <InputDataPlan>\n             <InputPortName>mdb</InputPortName>\n             <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>mdb.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\"</FilesToInclude>\n+                <FilesToInclude>\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISPDetectorTable*\",\"NISPDetectorSlots*\",\"EUC_NISP_NLPHOTO-*\",\"EUC_NISP_GAIN-*\",\"Calibrator*\",\"EUC_FM_NIP_[JHY]_SCS*.fits\",\"NISPDetectorQuantumEff*\",\"NISP[YJH]TransmissionCurves*.csv\",\"PLMTransmissionNISP*\",\"comoving_distance_relation.fits\"</FilesToInclude>\n             </FileFiltering>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n@@ -41,7 +40,7 @@\n         <InputDataPlan>\n             <InputPortName>presolution</InputPortName>\n             <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>presolution.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>OPTIONAL</Optionality>\n                 <Min>0</Min>\n@@ -51,8 +50,7 @@\n         <InputDataPlan>\n             <InputPortName>masterdark</InputPortName>\n             <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_H\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>masterdark.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -62,7 +60,7 @@\n         <InputDataPlan>\n             <InputPortName>masterflat</InputPortName>\n             <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_H\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>masterflat.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -72,7 +70,7 @@\n         <InputDataPlan>\n             <InputPortName>largeflat</InputPortName>\n             <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(largeflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (largeflat.Data.Filter.Name.FilterName == \"NIR_H\") AND (largeflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>largeflat.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -82,8 +80,7 @@\n         <InputDataPlan>\n             <InputPortName>badpixel</InputPortName>\n             <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>badpixel.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -92,19 +89,22 @@\n         </InputDataPlan>\n         <InputDataPlan>\n             <InputPortName>sourceCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(sourceCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (sourceCatalog.Header.DataSetRelease==\"UNKNOWN\")</InputQuerySpecPlan>\n+            <DataProductType>DpdVisStackedFrameCatalog</DataProductType>\n+            <InputQuerySpecPlan>sourceCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\"</InputQuerySpecPlan>\n+             <LinkedBy>\n+                <Query>sourceCatalog.Data.ObservationId == dithers.Data.ObservationSequence.ObservationId</Query>\n+            </LinkedBy>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n                 <Max>1</Max>\n             </Cardinality>\n-        </InputDataPlan>\n+        </InputDataPlan>      \n         <InputDataPlan>\n             <InputPortName>detectorsPhotomOffsets</InputPortName>\n             <DataProductType>DpdNirRelPhotoDetCalibration</DataProductType>\n-            <InputQuerySpecPlan>(detectorsPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (detectorsPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_H\") AND (detectorsPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n+            <InputQuerySpecPlan>detectorsPhotomOffsets.Header.ProductId.LimitedString == \"UNKNOWN\" </InputQuerySpecPlan>\n+        <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n                 <Max>1</Max>\n@@ -122,5 +122,5 @@\n             </Cardinality>\n         </OutputDataProduct>\n     </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n+    <EstimatedWorkdirSizeGB>2000</EstimatedWorkdirSizeGB>\n </tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_AbsolutePhotometry_Pipeline/PipDef_NIR_J_AbsolutePhotometry.xml": [
                        [
                            "@@ -1,126 +0,0 @@\n-<tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_J-CALIB_ABSOLUTE-PHOTOMETRY_DEV_2022.03.29</Id> \n-    <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag> \n-    <PipelineScriptPath>NIR_AbsolutePhotometry_Pipeline/PipScript_NIR_AbsolutePhotometry.py</PipelineScriptPath>\n-    <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n-    <InputDataSetPlan>\n-        <KeyProductInputDataPlan>\n-            <InputPortName>dithers</InputPortName>\n-            <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"J\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"J\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>4</Max>\n-            </Cardinality>\n-        </KeyProductInputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>nirConfig</InputPortName>\n-            <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>mdb</InputPortName>\n-            <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\"</FilesToInclude>\n-            </FileFiltering>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>presolution</InputPortName>\n-            <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>OPTIONAL</Optionality>\n-                <Min>0</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterdark</InputPortName>\n-            <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_J\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterflat</InputPortName>\n-            <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_J\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>largeflat</InputPortName>\n-            <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(largeflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (largeflat.Data.Filter.Name.FilterName == \"NIR_J\") AND (largeflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>badpixel</InputPortName>\n-            <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>sourceCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(sourceCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (sourceCatalog.Header.DataSetRelease==\"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>detectorsPhotomOffsets</InputPortName>\n-            <DataProductType>DpdNirRelPhotoDetCalibration</DataProductType>\n-            <InputQuerySpecPlan>(detectorsPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (detectorsPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_J\") AND (detectorsPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-    </InputDataSetPlan> \n-    <OutputDataSet>\n-        <OutputDataProduct>\n-            <OutputPortName>abscal</OutputPortName>\n-            <DataProductType>DpdNirAbsPhotoCalibration</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-    </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n-</tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_AbsolutePhotometry_Pipeline/PipDef_NIR_Y_AbsolutePhotometry.xml": [
                        [
                            "@@ -1,126 +0,0 @@\n-<tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_Y-CALIB_ABSOLUTE-PHOTOMETRY_DEV_2022.03.29</Id> \n-    <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag> \n-    <PipelineScriptPath>NIR_AbsolutePhotometry_Pipeline/PipScript_NIR_AbsolutePhotometry.py</PipelineScriptPath>\n-    <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n-    <InputDataSetPlan>\n-        <KeyProductInputDataPlan>\n-            <InputPortName>dithers</InputPortName>\n-            <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"Y\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"Y\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>4</Max>\n-            </Cardinality>\n-        </KeyProductInputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>nirConfig</InputPortName>\n-            <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>mdb</InputPortName>\n-            <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\"</FilesToInclude>\n-            </FileFiltering>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>presolution</InputPortName>\n-            <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>OPTIONAL</Optionality>\n-                <Min>0</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterdark</InputPortName>\n-            <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_Y\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterflat</InputPortName>\n-            <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_Y\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>largeflat</InputPortName>\n-            <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(largeflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (largeflat.Data.Filter.Name.FilterName == \"NIR_Y\") AND (largeflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>badpixel</InputPortName>\n-            <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>sourceCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(sourceCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (sourceCatalog.Header.DataSetRelease==\"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>detectorsPhotomOffsets</InputPortName>\n-            <DataProductType>DpdNirRelPhotoDetCalibration</DataProductType>\n-            <InputQuerySpecPlan>(detectorsPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (detectorsPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_Y\") AND (detectorsPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-    </InputDataSetPlan> \n-    <OutputDataSet>\n-        <OutputDataProduct>\n-            <OutputPortName>abscal</OutputPortName>\n-            <DataProductType>DpdNirAbsPhotoCalibration</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-    </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n-</tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_Baseline_Pipeline/PipDef_NIR_Baseline.xml": [
                        [
                            "@@ -1,5 +1,5 @@\n <tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_H-CALIB_BASELINE_DEV_2022.03.29</Id>\n+    <Id>PipDef_NIR_CALIB_BASELINE_2023.08.08</Id>\n     <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag> \n     <PipelineScriptPath>NIR_Baseline_Pipeline/PipScript_NIR_Baseline.py</PipelineScriptPath>\n     <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n@@ -7,7 +7,7 @@\n         <KeyProductInputDataPlan>\n             <InputPortName>rawBaseline</InputPortName>\n             <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(rawBaseline.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (rawBaseline.Data.FilterWheelPos.FilterWheelPosition == \"CLOSED\") AND (rawBaseline.Data.ImgType.Category.ProductCategory == \"CALIB\") AND (rawBaseline.Data.ImgType.FirstType.ProductTypeFirstGroup == \"DARK\") AND (rawBaseline.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan> (rawBaseline.Data.ObservationSequence.CalblockId == \"UNKNOWN\") AND (rawBaseline.Data.FilterWheelPos.FilterWheelPosition == \"CLOSED\") AND (rawBaseline.Data.ReadoutMode.MACCValues.NGroups == 1) AND (rawBaseline.Data.ImgType.FirstType.ProductTypeFirstGroup == \"DARK\") AND (rawBaseline.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -17,7 +17,7 @@\n         <InputDataPlan>\n             <InputPortName>nirConfig</InputPortName>\n             <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>nirConfig.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -27,7 +27,7 @@\n         <InputDataPlan>\n             <InputPortName>mdb</InputPortName>\n             <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>mdb.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <FileFiltering>\n                 <FilesToInclude>\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\"</FilesToInclude>\n             </FileFiltering>\n@@ -37,17 +37,6 @@\n                 <Max>1</Max>\n             </Cardinality>\n         </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>badpixel</InputPortName>\n-            <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n     </InputDataSetPlan>\n     <OutputDataSet>\n         <OutputDataProduct>\n@@ -60,5 +49,5 @@\n             </Cardinality>\n         </OutputDataProduct>\n     </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n+    <EstimatedWorkdirSizeGB>60</EstimatedWorkdirSizeGB>\n </tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ],
                        [
                            "@@ -1,5 +1,5 @@\n <tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_CALIB_BASELINE_DEV_2023.08.08</Id>\n+    <Id>PipDef_NIR_CALIB_BASELINE_2023.08.08</Id>\n     <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag> \n     <PipelineScriptPath>NIR_Baseline_Pipeline/PipScript_NIR_Baseline.py</PipelineScriptPath>\n     <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n",
                            "Updated most of the pipeline definitions for PV",
                            "Marco Frailis",
                            "2023-08-09T17:51:09.000+00:00",
                            "e29a28ee79e24fa3d4416124617710741b3d82b1"
                        ],
                        [
                            "@@ -1,5 +1,5 @@\n <tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_H-CALIB_BASELINE_DEV_2022.03.29</Id>\n+    <Id>PipDef_NIR_CALIB_BASELINE_DEV_2023.08.08</Id>\n     <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag> \n     <PipelineScriptPath>NIR_Baseline_Pipeline/PipScript_NIR_Baseline.py</PipelineScriptPath>\n     <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n@@ -7,7 +7,7 @@\n         <KeyProductInputDataPlan>\n             <InputPortName>rawBaseline</InputPortName>\n             <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(rawBaseline.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (rawBaseline.Data.FilterWheelPos.FilterWheelPosition == \"CLOSED\") AND (rawBaseline.Data.ImgType.Category.ProductCategory == \"CALIB\") AND (rawBaseline.Data.ImgType.FirstType.ProductTypeFirstGroup == \"DARK\") AND (rawBaseline.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan> (rawBaseline.Data.ObservationSequence.CalblockId == \"UNKNOWN\") AND (rawBaseline.Data.FilterWheelPos.FilterWheelPosition == \"CLOSED\") AND (rawBaseline.Data.ReadoutMode.MACCValues.NGroups == 1) AND (rawBaseline.Data.ImgType.FirstType.ProductTypeFirstGroup == \"DARK\") AND (rawBaseline.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -17,7 +17,7 @@\n         <InputDataPlan>\n             <InputPortName>nirConfig</InputPortName>\n             <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>nirConfig.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -27,7 +27,7 @@\n         <InputDataPlan>\n             <InputPortName>mdb</InputPortName>\n             <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>mdb.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <FileFiltering>\n                 <FilesToInclude>\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\"</FilesToInclude>\n             </FileFiltering>\n@@ -37,17 +37,6 @@\n                 <Max>1</Max>\n             </Cardinality>\n         </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>badpixel</InputPortName>\n-            <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n     </InputDataSetPlan>\n     <OutputDataSet>\n         <OutputDataProduct>\n@@ -60,5 +49,5 @@\n             </Cardinality>\n         </OutputDataProduct>\n     </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n+    <EstimatedWorkdirSizeGB>60</EstimatedWorkdirSizeGB>\n </tsk1:PipelineDef>\n",
                            "First set of updates to the pipeline confgurations",
                            "Marco Frailis",
                            "2023-08-09T16:08:24.000+00:00",
                            "3b320c03b4e8940500253e078cb2afb087747ac4"
                        ],
                        [
                            "@@ -0,0 +1,64 @@\n+<tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n+    <Id>PipDef_NIR_H-CALIB_BASELINE_DEV_2022.03.29</Id>\n+    <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag> \n+    <PipelineScriptPath>NIR_Baseline_Pipeline/PipScript_NIR_Baseline.py</PipelineScriptPath>\n+    <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n+    <InputDataSetPlan>\n+        <KeyProductInputDataPlan>\n+            <InputPortName>rawBaseline</InputPortName>\n+            <DataProductType>DpdNispRawFrame</DataProductType>\n+            <InputQuerySpecPlan>(rawBaseline.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (rawBaseline.Data.FilterWheelPos.FilterWheelPosition == \"CLOSED\") AND (rawBaseline.Data.ImgType.Category.ProductCategory == \"CALIB\") AND (rawBaseline.Data.ImgType.FirstType.ProductTypeFirstGroup == \"DARK\") AND (rawBaseline.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <Cardinality>\n+                <Optionality>MANDATORY</Optionality>\n+                <Min>1</Min>\n+                <Max>600</Max>\n+            </Cardinality>\n+        </KeyProductInputDataPlan>\n+        <InputDataPlan>\n+            <InputPortName>nirConfig</InputPortName>\n+            <DataProductType>DpdNirConfigurationSet</DataProductType>\n+            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <Cardinality>\n+                <Optionality>MANDATORY</Optionality>\n+                <Min>1</Min>\n+                <Max>1</Max>\n+            </Cardinality>\n+        </InputDataPlan>\n+        <InputDataPlan>\n+            <InputPortName>mdb</InputPortName>\n+            <DataProductType>DpdMdbDataBase</DataProductType>\n+            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <FileFiltering>\n+                <FilesToInclude>\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\"</FilesToInclude>\n+            </FileFiltering>\n+            <Cardinality>\n+                <Optionality>MANDATORY</Optionality>\n+                <Min>1</Min>\n+                <Max>1</Max>\n+            </Cardinality>\n+        </InputDataPlan>\n+        <InputDataPlan>\n+            <InputPortName>badpixel</InputPortName>\n+            <DataProductType>DpdNirBadPixelMask</DataProductType>\n+            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <Cardinality>\n+                <Optionality>MANDATORY</Optionality>\n+                <Min>1</Min>\n+                <Max>1</Max>\n+            </Cardinality>\n+        </InputDataPlan>\n+    </InputDataSetPlan>\n+    <OutputDataSet>\n+        <OutputDataProduct>\n+            <OutputPortName>outputs</OutputPortName>\n+            <DataProductType>DpdNirDetectorBaseline</DataProductType>\n+            <Cardinality>\n+                <Optionality>MANDATORY</Optionality>\n+                <Min>1</Min>\n+                <Max>1</Max>\n+            </Cardinality>\n+        </OutputDataProduct>\n+    </OutputDataSet>\n+    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n+</tsk1:PipelineDef>\n",
                            "Merge branch 'add_baseline_pipeline' into 'develop'",
                            "Marco Frailis",
                            "2023-08-03T07:24:02.000+00:00",
                            "92a42a21a30cc50adf6e12d828f26b9455401e3c"
                        ],
                        [
                            "@@ -0,0 +1,64 @@\n+<tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n+    <Id>PipDef_NIR_H-CALIB_BASELINE_DEV_2022.03.29</Id>\n+    <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag> \n+    <PipelineScriptPath>NIR_Baseline_Pipeline/PipScript_NIR_Baseline.py</PipelineScriptPath>\n+    <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n+    <InputDataSetPlan>\n+        <KeyProductInputDataPlan>\n+            <InputPortName>rawBaseline</InputPortName>\n+            <DataProductType>DpdNispRawFrame</DataProductType>\n+            <InputQuerySpecPlan>(rawBaseline.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (rawBaseline.Data.FilterWheelPos.FilterWheelPosition == \"CLOSED\") AND (rawBaseline.Data.ImgType.Category.ProductCategory == \"CALIB\") AND (rawBaseline.Data.ImgType.FirstType.ProductTypeFirstGroup == \"DARK\") AND (rawBaseline.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <Cardinality>\n+                <Optionality>MANDATORY</Optionality>\n+                <Min>1</Min>\n+                <Max>600</Max>\n+            </Cardinality>\n+        </KeyProductInputDataPlan>\n+        <InputDataPlan>\n+            <InputPortName>nirConfig</InputPortName>\n+            <DataProductType>DpdNirConfigurationSet</DataProductType>\n+            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <Cardinality>\n+                <Optionality>MANDATORY</Optionality>\n+                <Min>1</Min>\n+                <Max>1</Max>\n+            </Cardinality>\n+        </InputDataPlan>\n+        <InputDataPlan>\n+            <InputPortName>mdb</InputPortName>\n+            <DataProductType>DpdMdbDataBase</DataProductType>\n+            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <FileFiltering>\n+                <FilesToInclude>\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\"</FilesToInclude>\n+            </FileFiltering>\n+            <Cardinality>\n+                <Optionality>MANDATORY</Optionality>\n+                <Min>1</Min>\n+                <Max>1</Max>\n+            </Cardinality>\n+        </InputDataPlan>\n+        <InputDataPlan>\n+            <InputPortName>badpixel</InputPortName>\n+            <DataProductType>DpdNirBadPixelMask</DataProductType>\n+            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <Cardinality>\n+                <Optionality>MANDATORY</Optionality>\n+                <Min>1</Min>\n+                <Max>1</Max>\n+            </Cardinality>\n+        </InputDataPlan>\n+    </InputDataSetPlan>\n+    <OutputDataSet>\n+        <OutputDataProduct>\n+            <OutputPortName>outputs</OutputPortName>\n+            <DataProductType>DpdNirDetectorBaseline</DataProductType>\n+            <Cardinality>\n+                <Optionality>MANDATORY</Optionality>\n+                <Min>1</Min>\n+                <Max>1</Max>\n+            </Cardinality>\n+        </OutputDataProduct>\n+    </OutputDataSet>\n+    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n+</tsk1:PipelineDef>\n",
                            "added init and final task for Baseline. PipScript and PipDef for baseline",
                            "Thomas Gasparetto",
                            "2023-07-04T16:41:23.000+02:00",
                            "8ed228c41ddb9a901cca71ccb0fc1bb2af26fac3"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_DistortionModel_Pipeline/PipDef_NIR_DistortionModel.xml": [
                        [
                            "@@ -1,5 +1,5 @@\n <tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_J-DISTORSIONMODEL_DEV_2022.03.29</Id>\n+    <Id>PipDef_NIR_DISTORSIONMODEL_2023.08.08</Id>\n     <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n     <PipelineScriptPath>NIR_DistortionModel_Pipeline/PipScript_NIR_DistortionModel.py</PipelineScriptPath>\n     <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n@@ -7,18 +7,17 @@\n         <KeyProductInputDataPlan>\n             <InputPortName>dithers</InputPortName>\n             <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"J\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"J\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>(dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"UNKNOWN\") AND (dithers.Data.ObservationSequence.CalblockId == \"UNKNOWN\") AND (dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n-                <Max>4</Max>\n+                <Max>60</Max>\n             </Cardinality>\n         </KeyProductInputDataPlan>\n         <InputDataPlan>\n             <InputPortName>nirConfig</InputPortName>\n             <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>nirConfig.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -28,9 +27,9 @@\n         <InputDataPlan>\n             <InputPortName>mdb</InputPortName>\n             <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>mdb.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\"</FilesToInclude>\n+                <FilesToInclude>\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISPDetectorTable*\",\"NISPDetectorSlots*\",\"EUC_NISP_NLPHOTO-*\",\"EUC_NISP_GAIN-*\"</FilesToInclude>\n             </FileFiltering>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n@@ -41,7 +40,7 @@\n         <InputDataPlan>\n             <InputPortName>presolution</InputPortName>\n             <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>presolution.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>OPTIONAL</Optionality>\n                 <Min>0</Min>\n@@ -51,8 +50,7 @@\n         <InputDataPlan>\n             <InputPortName>masterdark</InputPortName>\n             <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_J\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>masterdark.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -62,7 +60,7 @@\n         <InputDataPlan>\n             <InputPortName>masterflat</InputPortName>\n             <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_J\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>masterflat.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -72,8 +70,7 @@\n         <InputDataPlan>\n             <InputPortName>badpixel</InputPortName>\n             <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>badpixel.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -82,8 +79,11 @@\n         </InputDataPlan>\n         <InputDataPlan>\n             <InputPortName>sourceCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(sourceCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (sourceCatalog.Header.DataSetRelease==\"UNKNOWN\")</InputQuerySpecPlan>\n+            <DataProductType>DpdVisStackedFrameCatalog</DataProductType>\n+            <InputQuerySpecPlan>sourceCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\"</InputQuerySpecPlan>\n+             <LinkedBy>\n+                <Query>sourceCatalog.Data.ObservationId == dithers.Data.ObservationSequence.ObservationId</Query>\n+            </LinkedBy>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -102,5 +102,5 @@\n             </Cardinality>\n         </OutputDataProduct>\n     </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n+    <EstimatedWorkdirSizeGB>500</EstimatedWorkdirSizeGB>\n </tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_DistortionModel_Pipeline/PipDef_NIR_H_DistortionModel.xml": [
                        [
                            "@@ -1,106 +0,0 @@\n-<tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_H-DISTORSIONMODEL_DEV_2022.03.29</Id>\n-    <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n-    <PipelineScriptPath>NIR_DistortionModel_Pipeline/PipScript_NIR_DistortionModel.py</PipelineScriptPath>\n-    <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n-    <InputDataSetPlan>\n-        <KeyProductInputDataPlan>\n-            <InputPortName>dithers</InputPortName>\n-            <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"H\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"H\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>4</Max>\n-            </Cardinality>\n-        </KeyProductInputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>nirConfig</InputPortName>\n-            <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>mdb</InputPortName>\n-            <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\"</FilesToInclude>\n-            </FileFiltering>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>presolution</InputPortName>\n-            <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>OPTIONAL</Optionality>\n-                <Min>0</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterdark</InputPortName>\n-            <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_H\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterflat</InputPortName>\n-            <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_H\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>badpixel</InputPortName>\n-            <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>sourceCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(sourceCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (sourceCatalog.Header.DataSetRelease==\"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-    </InputDataSetPlan> \n-    <OutputDataSet>\n-        <OutputDataProduct>\n-            <OutputPortName>distortionmodel</OutputPortName>\n-            <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-    </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n-</tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_DistortionModel_Pipeline/PipDef_NIR_Y_DistortionModel.xml": [
                        [
                            "@@ -1,106 +0,0 @@\n-<tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_Y-DISTORSIONMODEL_DEV_2022.03.29</Id>\n-    <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n-    <PipelineScriptPath>NIR_DistortionModel_Pipeline/PipScript_NIR_DistortionModel.py</PipelineScriptPath>\n-    <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n-    <InputDataSetPlan>\n-        <KeyProductInputDataPlan>\n-            <InputPortName>dithers</InputPortName>\n-            <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"Y\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"Y\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>4</Max>\n-            </Cardinality>\n-        </KeyProductInputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>nirConfig</InputPortName>\n-            <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>mdb</InputPortName>\n-            <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\"</FilesToInclude>\n-            </FileFiltering>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>presolution</InputPortName>\n-            <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>OPTIONAL</Optionality>\n-                <Min>0</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterdark</InputPortName>\n-            <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_Y\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterflat</InputPortName>\n-            <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_Y\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>badpixel</InputPortName>\n-            <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>sourceCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(sourceCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (sourceCatalog.Header.DataSetRelease==\"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-    </InputDataSetPlan> \n-    <OutputDataSet>\n-        <OutputDataProduct>\n-            <OutputPortName>distortionmodel</OutputPortName>\n-            <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-    </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n-</tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_MasterDark_Pipeline/PipDef_NIR_J_MasterDark.xml": [
                        [
                            "@@ -1,64 +0,0 @@\n-<tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_J-CALIB_MASTERDARK_DEV_2022.03.29</Id>\n-    <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag> \n-    <PipelineScriptPath>NIR_MasterDark_Pipeline/PipScript_NIR_MasterDark.py</PipelineScriptPath>\n-    <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n-    <InputDataSetPlan>\n-        <KeyProductInputDataPlan>\n-            <InputPortName>rawDarks</InputPortName>\n-            <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(rawDarks.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (rawDarks.Data.FilterWheelPos.FilterWheelPosition == \"CLOSED\") AND (rawDarks.Data.ImgType.Category.ProductCategory == \"CALIB\") AND (rawDarks.Data.ImgType.FirstType.ProductTypeFirstGroup == \"DARK\") AND (rawDarks.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>600</Max>\n-            </Cardinality>\n-        </KeyProductInputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>nirConfig</InputPortName>\n-            <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>mdb</InputPortName>\n-            <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\"</FilesToInclude>\n-            </FileFiltering>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>badpixel</InputPortName>\n-            <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>   \n-    </InputDataSetPlan>\n-    <OutputDataSet>\n-        <OutputDataProduct>\n-            <OutputPortName>outputs</OutputPortName>\n-            <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-    </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n-</tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_MasterDark_Pipeline/PipDef_NIR_MasterDark.xml": [
                        [
                            "@@ -1,5 +1,5 @@\n <tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_H-CALIB_MASTERDARK_DEV_2022.03.29</Id>\n+    <Id>PipDef_NIR_CALIB_MASTERDARK_2023.08.08</Id>\n     <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag> \n     <PipelineScriptPath>NIR_MasterDark_Pipeline/PipScript_NIR_MasterDark.py</PipelineScriptPath>\n     <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n@@ -7,7 +7,7 @@\n         <KeyProductInputDataPlan>\n             <InputPortName>rawDarks</InputPortName>\n             <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(rawDarks.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (rawDarks.Data.FilterWheelPos.FilterWheelPosition == \"CLOSED\") AND (rawDarks.Data.ImgType.Category.ProductCategory == \"CALIB\") AND (rawDarks.Data.ImgType.FirstType.ProductTypeFirstGroup == \"DARK\") AND (rawDarks.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>(rawDarks.Data.ObservationSequence.CalblockId == \"UNKNOWN\") AND(rawDarks.Data.FilterWheelPos.FilterWheelPosition == \"CLOSED\") AND (rawDarks.Data.ImgType.Technique == \"UNKNOWN\") AND (rawDarks.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -17,7 +17,7 @@\n         <InputDataPlan>\n             <InputPortName>nirConfig</InputPortName>\n             <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>nirConfig.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -27,9 +27,9 @@\n         <InputDataPlan>\n             <InputPortName>mdb</InputPortName>\n             <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>mdb.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\"</FilesToInclude>\n+                <FilesToInclude>\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISPDetectorTable*\",\"NISPDetectorSlots*\",\"EUC_NISP_NLPHOTO-*\",\"EUC_NISP_GAIN-*\",\"EUC_NISP_DARKPHOTO-TV1_01.02.fits\",\"EUC_NISP_DARKSPECTRO-TV1_01.02.fits\",\"EUC_NISP_NLSPECTRO*\"</FilesToInclude>\n             </FileFiltering>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n@@ -40,8 +40,7 @@\n         <InputDataPlan>\n             <InputPortName>badpixel</InputPortName>\n             <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>badpixel.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -60,5 +59,5 @@\n             </Cardinality>\n         </OutputDataProduct>\n     </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n+    <EstimatedWorkdirSizeGB>2000</EstimatedWorkdirSizeGB>\n </tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ],
                        [
                            "@@ -1,5 +1,5 @@\n <tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_CALIB_MASTERDARK_DEV_2023.08.08</Id>\n+    <Id>PipDef_NIR_CALIB_MASTERDARK_2023.08.08</Id>\n     <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag> \n     <PipelineScriptPath>NIR_MasterDark_Pipeline/PipScript_NIR_MasterDark.py</PipelineScriptPath>\n     <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n",
                            "Updated most of the pipeline definitions for PV",
                            "Marco Frailis",
                            "2023-08-09T17:51:09.000+00:00",
                            "e29a28ee79e24fa3d4416124617710741b3d82b1"
                        ],
                        [
                            "@@ -1,5 +1,5 @@\n <tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_H-CALIB_MASTERDARK_DEV_2022.03.29</Id>\n+    <Id>PipDef_NIR_CALIB_MASTERDARK_DEV_2023.08.08</Id>\n     <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag> \n     <PipelineScriptPath>NIR_MasterDark_Pipeline/PipScript_NIR_MasterDark.py</PipelineScriptPath>\n     <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n@@ -7,7 +7,7 @@\n         <KeyProductInputDataPlan>\n             <InputPortName>rawDarks</InputPortName>\n             <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(rawDarks.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (rawDarks.Data.FilterWheelPos.FilterWheelPosition == \"CLOSED\") AND (rawDarks.Data.ImgType.Category.ProductCategory == \"CALIB\") AND (rawDarks.Data.ImgType.FirstType.ProductTypeFirstGroup == \"DARK\") AND (rawDarks.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>(rawDarks.Data.ObservationSequence.CalblockId == \"UNKNOWN\") AND(rawDarks.Data.FilterWheelPos.FilterWheelPosition == \"CLOSED\") AND (rawDarks.Data.ImgType.Technique == \"UNKNOWN\") AND (rawDarks.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -17,7 +17,7 @@\n         <InputDataPlan>\n             <InputPortName>nirConfig</InputPortName>\n             <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>nirConfig.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -27,9 +27,9 @@\n         <InputDataPlan>\n             <InputPortName>mdb</InputPortName>\n             <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>mdb.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\"</FilesToInclude>\n+                <FilesToInclude>\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISPDetectorTable*\",\"NISPDetectorSlots*\",\"EUC_NISP_NLPHOTO-*\",\"EUC_NISP_GAIN-*\",\"EUC_NISP_DARKPHOTO-TV1_01.02.fits\",\"EUC_NISP_DARKSPECTRO-TV1_01.02.fits\",\"EUC_NISP_NLSPECTRO*\"</FilesToInclude>\n             </FileFiltering>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n@@ -40,8 +40,7 @@\n         <InputDataPlan>\n             <InputPortName>badpixel</InputPortName>\n             <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>badpixel.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -60,5 +59,5 @@\n             </Cardinality>\n         </OutputDataProduct>\n     </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n+    <EstimatedWorkdirSizeGB>2000</EstimatedWorkdirSizeGB>\n </tsk1:PipelineDef>\n",
                            "First set of updates to the pipeline confgurations",
                            "Marco Frailis",
                            "2023-08-09T16:08:24.000+00:00",
                            "3b320c03b4e8940500253e078cb2afb087747ac4"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_MasterDark_Pipeline/PipDef_NIR_Y_MasterDark.xml": [
                        [
                            "@@ -1,64 +0,0 @@\n-<tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_Y-CALIB_MASTERDARK_DEV_2022.03.29</Id>\n-    <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag> \n-    <PipelineScriptPath>NIR_MasterDark_Pipeline/PipScript_NIR_MasterDark.py</PipelineScriptPath>\n-    <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n-    <InputDataSetPlan>\n-        <KeyProductInputDataPlan>\n-            <InputPortName>rawDarks</InputPortName>\n-            <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(rawDarks.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (rawDarks.Data.FilterWheelPos.FilterWheelPosition == \"CLOSED\") AND (rawDarks.Data.ImgType.Category.ProductCategory == \"CALIB\") AND (rawDarks.Data.ImgType.FirstType.ProductTypeFirstGroup == \"DARK\") AND (rawDarks.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>600</Max>\n-            </Cardinality>\n-        </KeyProductInputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>nirConfig</InputPortName>\n-            <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>mdb</InputPortName>\n-            <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\"</FilesToInclude>\n-            </FileFiltering>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>badpixel</InputPortName>\n-            <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>     \n-    </InputDataSetPlan>\n-    <OutputDataSet>\n-        <OutputDataProduct>\n-            <OutputPortName>outputs</OutputPortName>\n-            <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-    </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n-</tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_MasterFlat_Pipeline/PipDef_NIR_H_MasterFlat.xml": [
                        [
                            "@@ -1,75 +0,0 @@\n-<tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_H-CALIB_MASTERFLAT_DEV_2022.03.29</Id>\n-    <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag> \n-    <PipelineScriptPath>NIR_MasterFlat_Pipeline/PipScript_NIR_MasterFlat.py</PipelineScriptPath>\n-    <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n-    <InputDataSetPlan>\n-        <KeyProductInputDataPlan>\n-            <InputPortName>rawflatproducts</InputPortName>\n-            <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(rawflatproducts.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (rawflatproducts.Data.FilterWheelPos.FilterWheelPosition == \"CLOSED\") AND (rawflatproducts.Data.ImgType.Category.ProductCategory == \"CALIB\") AND (rawflatproducts.Data.ImgType.FirstType.ProductTypeFirstGroup == \"FLAT\") AND (rawflatproducts.Data.CalibUnit.Led.LedId == \"D\") AND (rawflatproducts.Data.CalibUnit.Led.FluxId == \"30\") AND (rawflatproducts.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>10</Max>\n-            </Cardinality>\n-        </KeyProductInputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>config</InputPortName>\n-            <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>config.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>mdbxml</InputPortName>\n-            <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdbxml.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"qe_SCA_18*_mdb_v2.fits\",\"NISPDetectorSlots*\"</FilesToInclude>\n-            </FileFiltering>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>badpixelsxml</InputPortName>\n-            <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixelsxml.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixelsxml.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterdarkxml</InputPortName>\n-            <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdarkxml.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdarkxml.Data.Filter.Name.FilterName == \"NIR_H\") AND (masterdarkxml.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-    </InputDataSetPlan>\n-    <OutputDataSet>\n-        <OutputDataProduct>\n-            <OutputPortName>small_scale_flat</OutputPortName>\n-            <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-    </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n-</tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_MasterFlat_Pipeline/PipDef_NIR_MasterFlat.xml": [
                        [
                            "@@ -1,5 +1,5 @@\n <tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_J-CALIB_MASTERFLAT_DEV_2022.03.29</Id>\n+    <Id>PipDef_NIR_CALIB_MASTERFLAT_2023.08.08</Id>\n     <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag> \n     <PipelineScriptPath>NIR_MasterFlat_Pipeline/PipScript_NIR_MasterFlat.py</PipelineScriptPath>\n     <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n@@ -7,17 +7,17 @@\n         <KeyProductInputDataPlan>\n             <InputPortName>rawflatproducts</InputPortName>\n             <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(rawflatproducts.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (rawflatproducts.Data.FilterWheelPos.FilterWheelPosition == \"CLOSED\") AND (rawflatproducts.Data.ImgType.Category.ProductCategory == \"CALIB\") AND (rawflatproducts.Data.ImgType.FirstType.ProductTypeFirstGroup == \"FLAT\") AND (rawflatproducts.Data.CalibUnit.Led.LedId == \"C\") AND (rawflatproducts.Data.CalibUnit.Led.FluxId == \"30\") AND (rawflatproducts.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>(rawflatproducts.Data.ObservationSequence.CalblockId == \"UNKNOWN\") AND (rawflatproducts.Data.FilterWheelPos == \"CLOSED\") AND (rawflatproducts.Data.ImgType.FirstType == \"FLAT\") AND (rawflatproducts.Data.CalibUnit.Led.LedId == \"UNKNOWN\") AND (rawflatproducts.Data.CalibUnit.Led.Intensity == UNKNOWN) AND (rawflatproducts.Data.CalibUnit.Led.PwmDutyCycle == UNKNOWN) AND (rawflatproducts.Header.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n-                <Max>10</Max>\n+                <Max>30</Max>\n             </Cardinality>\n         </KeyProductInputDataPlan>\n         <InputDataPlan>\n             <InputPortName>config</InputPortName>\n             <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>config.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>config.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -27,9 +27,9 @@\n         <InputDataPlan>\n             <InputPortName>mdbxml</InputPortName>\n             <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdbxml.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>mdbxml.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"qe_SCA_18*_mdb_v2.fits\",\"NISPDetectorSlots*\"</FilesToInclude>\n+                <FilesToInclude>\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"qe_SCA_18*_mdb_v3.fits\",\"NISPDetectorSlots*\",\"NISPDetectorTable*\",\"EUC_NISP_NLPHOTO-*\",\"EUC_NISP_GAIN-*\",\"NISP*TransmissionCurves_2.0.csv\",\"NISPCULED*\",\"calib_nicu_*LED*.csv\"</FilesToInclude>\n             </FileFiltering>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n@@ -40,8 +40,7 @@\n         <InputDataPlan>\n             <InputPortName>badpixelsxml</InputPortName>\n             <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixelsxml.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixelsxml.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>badpixelsxml.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -51,8 +50,7 @@\n         <InputDataPlan>\n             <InputPortName>masterdarkxml</InputPortName>\n             <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdarkxml.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdarkxml.Data.Filter.Name.FilterName == \"NIR_J\") AND (masterdarkxml.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>masterdarkxml.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -63,7 +61,7 @@\n     <OutputDataSet>\n         <OutputDataProduct>\n             <OutputPortName>small_scale_flat</OutputPortName>\n-            <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n+            <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -71,5 +69,5 @@\n             </Cardinality>\n         </OutputDataProduct>\n     </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n+    <EstimatedWorkdirSizeGB>200</EstimatedWorkdirSizeGB>\n </tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_MasterFlat_Pipeline/PipDef_NIR_Y_MasterFlat.xml": [
                        [
                            "@@ -1,75 +0,0 @@\n-<tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_Y-CALIB_MASTERFLAT_DEV_2022.03.29</Id>\n-    <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag> \n-    <PipelineScriptPath>NIR_MasterFlat_Pipeline/PipScript_NIR_MasterFlat.py</PipelineScriptPath>\n-    <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n-    <InputDataSetPlan>\n-        <KeyProductInputDataPlan>\n-            <InputPortName>rawflatproducts</InputPortName>\n-            <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(rawflatproducts.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (rawflatproducts.Data.FilterWheelPos.FilterWheelPosition == \"CLOSED\") AND (rawflatproducts.Data.ImgType.Category.ProductCategory == \"CALIB\") AND (rawflatproducts.Data.ImgType.FirstType.ProductTypeFirstGroup == \"FLAT\") AND (rawflatproducts.Data.CalibUnit.Led.LedId == \"B\") AND (rawflatproducts.Data.CalibUnit.Led.FluxId == \"30\") AND (rawflatproducts.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>10</Max>\n-            </Cardinality>\n-        </KeyProductInputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>config</InputPortName>\n-            <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>config.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>mdbxml</InputPortName>\n-            <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdbxml.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"qe_SCA_18*_mdb_v2.fits\",\"NISPDetectorSlots*\"</FilesToInclude>\n-            </FileFiltering>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>badpixelsxml</InputPortName>\n-            <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixelsxml.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixelsxml.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterdarkxml</InputPortName>\n-            <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdarkxml.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdarkxml.Data.Filter.Name.FilterName == \"NIR_Y\") AND (masterdarkxml.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-    </InputDataSetPlan>\n-    <OutputDataSet>\n-        <OutputDataProduct>\n-            <OutputPortName>small_scale_flat</OutputPortName>\n-            <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-    </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n-</tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_ProcessField_Background_Pipeline/PipDef_NIR_H_ProcessField_Background.xml": [
                        [
                            "@@ -1,193 +0,0 @@\n-<tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_H-PROCESSFIELD_BACKGROUND-CAT_DEV_2022.03.29</Id>\n-    <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n-    <PipelineScriptPath>NIR_ProcessField_Background_Pipeline/PipScript_NIR_ProcessField_Background.py</PipelineScriptPath>\n-    <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n-    <InputDataSetPlan>\n-        <KeyProductInputDataPlan>\n-            <InputPortName>dithers</InputPortName>\n-            <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"H\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"H\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>4</Max>\n-            </Cardinality>\n-        </KeyProductInputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>nirConfig</InputPortName>\n-            <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>mdb</InputPortName>\n-            <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISPH_Outfld_Teles_straylight*\"</FilesToInclude>\n-            </FileFiltering>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>presolution</InputPortName>\n-            <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>OPTIONAL</Optionality>\n-                <Min>0</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterdark</InputPortName>\n-            <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_H\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterflat</InputPortName>\n-            <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_H\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>largeflat</InputPortName>\n-            <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(largeflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (largeflat.Data.Filter.Name.FilterName == \"NIR_H\") AND (largeflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>badpixel</InputPortName>\n-            <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>obsCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(obsCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (obsCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>refCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(refCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (refCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>detectorsPhotomOffsets</InputPortName>\n-            <DataProductType>DpdNirRelPhotoDetCalibration</DataProductType>\n-            <InputQuerySpecPlan>(detectorsPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (detectorsPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_H\") AND (detectorsPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-        <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>tilesPhotomOffsets</InputPortName>\n-            <DataProductType>DpdNirRelPhotoFieldCalibration</DataProductType>\n-            <InputQuerySpecPlan>(tilesPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (tilesPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_H\") AND (tilesPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>absPhotoData</InputPortName>\n-            <DataProductType>DpdNirAbsPhotoCalibration</DataProductType>\n-            <InputQuerySpecPlan>(absPhotoData.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (absPhotoData.Data.Filter.Name.FilterName == \"NIR_H\")  AND (absPhotoData.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>relExposure</InputPortName>\n-            <DataProductType>DpdNirRelPhotoExpCalibration</DataProductType>\n-            <InputQuerySpecPlan>(relExposure.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (relExposure.Data.Filter.Name.FilterName == \"NIR_H\")  AND (relExposure.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-    </InputDataSetPlan> \n-    <OutputDataSet>\n-        <OutputDataProduct>\n-            <OutputPortName>stk_image_xml</OutputPortName>\n-            <DataProductType>DpdNirStackedFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>cal_images_xml</OutputPortName>\n-            <DataProductType>DpdNirCalibratedFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>stk_catalog_xml</OutputPortName>\n-            <DataProductType>DpdNirStackedFrameCatalog</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>cal_catalogs_xml</OutputPortName>\n-            <DataProductType>DpdNirCalibratedFrameCatalog</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-    </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n-</tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_ProcessField_Background_Pipeline/PipDef_NIR_ProcessField_Background.xml": [
                        [
                            "@@ -1,5 +1,5 @@\n <tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_J-PROCESSFIELD_BACKGROUND-CAT_DEV_2022.03.29</Id>\n+    <Id>PipDef_NIR_PROCESSFIELD_BACKGROUND_CAT_2023.08.08</Id>\n     <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n     <PipelineScriptPath>NIR_ProcessField_Background_Pipeline/PipScript_NIR_ProcessField_Background.py</PipelineScriptPath>\n     <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n@@ -7,18 +7,17 @@\n         <KeyProductInputDataPlan>\n             <InputPortName>dithers</InputPortName>\n             <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"J\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"J\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan> (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ObservationSequence.PointingId == \"UNKNOWN\") AND (dithers.Data.FilterWheelPos == \"UNKNOWN\") AND (dithers.Header.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n-                <Max>4</Max>\n+                <Max>1</Max>\n             </Cardinality>\n         </KeyProductInputDataPlan>\n         <InputDataPlan>\n             <InputPortName>nirConfig</InputPortName>\n             <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>nirConfig.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -28,9 +27,9 @@\n         <InputDataPlan>\n             <InputPortName>mdb</InputPortName>\n             <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>mdb.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISPH_Outfld_Teles_straylight*\"</FilesToInclude>\n+                <FilesToInclude>\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISPDetectorTable*\",\"NISPDetectorSlots*\",\"EUC_NISP_NLPHOTO-*\",\"EUC_NISP_GAIN-*\"</FilesToInclude>\n             </FileFiltering>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n@@ -41,7 +40,7 @@\n         <InputDataPlan>\n             <InputPortName>presolution</InputPortName>\n             <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>presolution.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>OPTIONAL</Optionality>\n                 <Min>0</Min>\n@@ -51,8 +50,7 @@\n         <InputDataPlan>\n             <InputPortName>masterdark</InputPortName>\n             <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_J\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>masterdark.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -62,7 +60,7 @@\n         <InputDataPlan>\n             <InputPortName>masterflat</InputPortName>\n             <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_J\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>masterflat.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -72,7 +70,7 @@\n         <InputDataPlan>\n             <InputPortName>largeflat</InputPortName>\n             <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(largeflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (largeflat.Data.Filter.Name.FilterName == \"NIR_J\") AND (largeflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>largeflat.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -82,8 +80,7 @@\n         <InputDataPlan>\n             <InputPortName>badpixel</InputPortName>\n             <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>badpixel.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -92,8 +89,11 @@\n         </InputDataPlan>\n         <InputDataPlan>\n             <InputPortName>obsCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(obsCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (obsCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <DataProductType>DpdVisStackedFrameCatalog</DataProductType>\n+            <InputQuerySpecPlan>obsCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\"</InputQuerySpecPlan>\n+             <LinkedBy>\n+                <Query>obsCatalog.Data.ObservationId == dithers.Data.ObservationSequence.ObservationId</Query>\n+            </LinkedBy>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -102,18 +102,21 @@\n         </InputDataPlan>\n         <InputDataPlan>\n             <InputPortName>refCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(refCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (refCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <DataProductType>DpdExtGaiaCutout</DataProductType>\n+            <InputQuerySpecPlan>(refCatalog.Header.DataSetRelease == \"UNKNOWN\") AND (refCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n+             <LinkedBy>\n+                <Query>dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(0.01,100) refCatalog.Data.CatalogCoverage.Polygon</Query>\n+            </LinkedBy>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n-                <Max>1</Max>\n+                <Max>100</Max>\n             </Cardinality>\n-        </InputDataPlan>\n+        </InputDataPlan>    \n         <InputDataPlan>\n             <InputPortName>detectorsPhotomOffsets</InputPortName>\n             <DataProductType>DpdNirRelPhotoDetCalibration</DataProductType>\n-            <InputQuerySpecPlan>(detectorsPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (detectorsPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_J\") AND (detectorsPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>detectorsPhotomOffsets.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n         <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -123,7 +126,7 @@\n         <InputDataPlan>\n             <InputPortName>tilesPhotomOffsets</InputPortName>\n             <DataProductType>DpdNirRelPhotoFieldCalibration</DataProductType>\n-            <InputQuerySpecPlan>(tilesPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (tilesPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_J\") AND (tilesPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>tilesPhotomOffsets.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -133,7 +136,7 @@\n         <InputDataPlan>\n             <InputPortName>absPhotoData</InputPortName>\n             <DataProductType>DpdNirAbsPhotoCalibration</DataProductType>\n-            <InputQuerySpecPlan>(absPhotoData.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (absPhotoData.Data.Filter.Name.FilterName == \"NIR_J\")  AND (absPhotoData.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>absPhotoData.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -143,7 +146,7 @@\n         <InputDataPlan>\n             <InputPortName>relExposure</InputPortName>\n             <DataProductType>DpdNirRelPhotoExpCalibration</DataProductType>\n-            <InputQuerySpecPlan>(relExposure.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (relExposure.Data.Filter.Name.FilterName == \"NIR_H\")  AND (relExposure.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>relExposure.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -189,5 +192,5 @@\n             </Cardinality>\n         </OutputDataProduct>\n     </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n+    <EstimatedWorkdirSizeGB>60</EstimatedWorkdirSizeGB>\n </tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ],
                        [
                            "@@ -1,5 +1,5 @@\n <tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_H-PROCESSFIELD_BACKGROUND-CAT_DEV_2022.03.29</Id>\n+    <Id>PipDef_NIR_PROCESSFIELD_BACKGROUND_CAT_2023.08.08</Id>\n     <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n     <PipelineScriptPath>NIR_ProcessField_Background_Pipeline/PipScript_NIR_ProcessField_Background.py</PipelineScriptPath>\n     <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n@@ -7,18 +7,17 @@\n         <KeyProductInputDataPlan>\n             <InputPortName>dithers</InputPortName>\n             <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"H\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"H\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan> (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ObservationSequence.PointingId == \"UNKNOWN\") AND (dithers.Data.FilterWheelPos == \"UNKNOWN\") AND (dithers.Header.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n-                <Max>4</Max>\n+                <Max>1</Max>\n             </Cardinality>\n         </KeyProductInputDataPlan>\n         <InputDataPlan>\n             <InputPortName>nirConfig</InputPortName>\n             <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>nirConfig.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -28,9 +27,9 @@\n         <InputDataPlan>\n             <InputPortName>mdb</InputPortName>\n             <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>mdb.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISPH_Outfld_Teles_straylight*\"</FilesToInclude>\n+                <FilesToInclude>\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISPDetectorTable*\",\"NISPDetectorSlots*\",\"EUC_NISP_NLPHOTO-*\",\"EUC_NISP_GAIN-*\"</FilesToInclude>\n             </FileFiltering>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n@@ -41,7 +40,7 @@\n         <InputDataPlan>\n             <InputPortName>presolution</InputPortName>\n             <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>presolution.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>OPTIONAL</Optionality>\n                 <Min>0</Min>\n@@ -51,8 +50,7 @@\n         <InputDataPlan>\n             <InputPortName>masterdark</InputPortName>\n             <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_H\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>masterdark.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -62,7 +60,7 @@\n         <InputDataPlan>\n             <InputPortName>masterflat</InputPortName>\n             <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_H\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>masterflat.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -72,7 +70,7 @@\n         <InputDataPlan>\n             <InputPortName>largeflat</InputPortName>\n             <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(largeflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (largeflat.Data.Filter.Name.FilterName == \"NIR_H\") AND (largeflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>largeflat.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -82,8 +80,7 @@\n         <InputDataPlan>\n             <InputPortName>badpixel</InputPortName>\n             <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>badpixel.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -92,8 +89,11 @@\n         </InputDataPlan>\n         <InputDataPlan>\n             <InputPortName>obsCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(obsCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (obsCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <DataProductType>DpdVisStackedFrameCatalog</DataProductType>\n+            <InputQuerySpecPlan>obsCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\"</InputQuerySpecPlan>\n+             <LinkedBy>\n+                <Query>obsCatalog.Data.ObservationId == dithers.Data.ObservationSequence.ObservationId</Query>\n+            </LinkedBy>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -102,18 +102,21 @@\n         </InputDataPlan>\n         <InputDataPlan>\n             <InputPortName>refCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(refCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (refCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <DataProductType>DpdExtGaiaCutout</DataProductType>\n+            <InputQuerySpecPlan>(refCatalog.Header.DataSetRelease == \"UNKNOWN\") AND (refCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n+             <LinkedBy>\n+                <Query>dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(0.01,100) refCatalog.Data.CatalogCoverage.Polygon</Query>\n+            </LinkedBy>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n-                <Max>1</Max>\n+                <Max>100</Max>\n             </Cardinality>\n-        </InputDataPlan>\n+        </InputDataPlan>    \n         <InputDataPlan>\n             <InputPortName>detectorsPhotomOffsets</InputPortName>\n             <DataProductType>DpdNirRelPhotoDetCalibration</DataProductType>\n-            <InputQuerySpecPlan>(detectorsPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (detectorsPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_H\") AND (detectorsPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>detectorsPhotomOffsets.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n         <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -123,7 +126,7 @@\n         <InputDataPlan>\n             <InputPortName>tilesPhotomOffsets</InputPortName>\n             <DataProductType>DpdNirRelPhotoFieldCalibration</DataProductType>\n-            <InputQuerySpecPlan>(tilesPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (tilesPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_H\") AND (tilesPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>tilesPhotomOffsets.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -133,7 +136,7 @@\n         <InputDataPlan>\n             <InputPortName>absPhotoData</InputPortName>\n             <DataProductType>DpdNirAbsPhotoCalibration</DataProductType>\n-            <InputQuerySpecPlan>(absPhotoData.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (absPhotoData.Data.Filter.Name.FilterName == \"NIR_H\")  AND (absPhotoData.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>absPhotoData.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -143,7 +146,7 @@\n         <InputDataPlan>\n             <InputPortName>relExposure</InputPortName>\n             <DataProductType>DpdNirRelPhotoExpCalibration</DataProductType>\n-            <InputQuerySpecPlan>(relExposure.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (relExposure.Data.Filter.Name.FilterName == \"NIR_H\")  AND (relExposure.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>relExposure.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -189,5 +192,5 @@\n             </Cardinality>\n         </OutputDataProduct>\n     </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n+    <EstimatedWorkdirSizeGB>60</EstimatedWorkdirSizeGB>\n </tsk1:PipelineDef>\n",
                            "Updating the ProcessField_Background pipeline definition",
                            "Marco Frailis",
                            "2023-08-09T20:02:48.000+00:00",
                            "df68a46abc3b52f0c6e2731c65697274ebb1a208"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_ProcessField_Background_Pipeline/PipDef_NIR_Y_ProcessField_Background.xml": [
                        [
                            "@@ -1,193 +0,0 @@\n-<tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_Y-PROCESSFIELD_BACKGROUND-CAT_DEV_2022.03.29</Id>\n-    <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n-    <PipelineScriptPath>NIR_ProcessField_Background_Pipeline/PipScript_NIR_ProcessField_Background.py</PipelineScriptPath>\n-    <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n-    <InputDataSetPlan>\n-        <KeyProductInputDataPlan>\n-            <InputPortName>dithers</InputPortName>\n-            <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"Y\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"Y\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>4</Max>\n-            </Cardinality>\n-        </KeyProductInputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>nirConfig</InputPortName>\n-            <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>mdb</InputPortName>\n-            <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISPH_Outfld_Teles_straylight*\"</FilesToInclude>\n-            </FileFiltering>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>presolution</InputPortName>\n-            <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>OPTIONAL</Optionality>\n-                <Min>0</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterdark</InputPortName>\n-            <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_Y\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterflat</InputPortName>\n-            <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_Y\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>largeflat</InputPortName>\n-            <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(largeflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (largeflat.Data.Filter.Name.FilterName == \"NIR_Y\") AND (largeflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>badpixel</InputPortName>\n-            <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>obsCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(obsCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (obsCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>refCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(refCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (refCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>detectorsPhotomOffsets</InputPortName>\n-            <DataProductType>DpdNirRelPhotoDetCalibration</DataProductType>\n-            <InputQuerySpecPlan>(detectorsPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (detectorsPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_Y\") AND (detectorsPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-        <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>tilesPhotomOffsets</InputPortName>\n-            <DataProductType>DpdNirRelPhotoFieldCalibration</DataProductType>\n-            <InputQuerySpecPlan>(tilesPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (tilesPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_Y\") AND (tilesPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>absPhotoData</InputPortName>\n-            <DataProductType>DpdNirAbsPhotoCalibration</DataProductType>\n-            <InputQuerySpecPlan>(absPhotoData.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (absPhotoData.Data.Filter.Name.FilterName == \"NIR_Y\")  AND (absPhotoData.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>relExposure</InputPortName>\n-            <DataProductType>DpdNirRelPhotoExpCalibration</DataProductType>\n-            <InputQuerySpecPlan>(relExposure.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (relExposure.Data.Filter.Name.FilterName == \"NIR_H\")  AND (relExposure.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-    </InputDataSetPlan> \n-    <OutputDataSet>\n-        <OutputDataProduct>\n-            <OutputPortName>stk_image_xml</OutputPortName>\n-            <DataProductType>DpdNirStackedFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>cal_images_xml</OutputPortName>\n-            <DataProductType>DpdNirCalibratedFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>stk_catalog_xml</OutputPortName>\n-            <DataProductType>DpdNirStackedFrameCatalog</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>cal_catalogs_xml</OutputPortName>\n-            <DataProductType>DpdNirCalibratedFrameCatalog</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-    </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n-</tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_ProcessField_Pipeline/PipDef_NIR_H_ProcessField_TU.xml": [
                        [
                            "@@ -1,183 +0,0 @@\n-<tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_H-PROCESSFIELD_TU-CAT_DEV_2022.03.29</Id>\n-    <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n-    <PipelineScriptPath>NIR_ProcessField_Pipeline/PipScript_NIR_ProcessField.py</PipelineScriptPath>\n-    <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n-    <InputDataSetPlan>\n-        <KeyProductInputDataPlan>\n-            <InputPortName>dithers</InputPortName>\n-            <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"H\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"H\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>4</Max>\n-            </Cardinality>\n-        </KeyProductInputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>nirConfig</InputPortName>\n-            <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>mdb</InputPortName>\n-            <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISPH_Outfld_Teles_straylight*\"</FilesToInclude>\n-            </FileFiltering>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>presolution</InputPortName>\n-            <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>OPTIONAL</Optionality>\n-                <Min>0</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterdark</InputPortName>\n-            <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_H\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterflat</InputPortName>\n-            <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_H\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>largeflat</InputPortName>\n-            <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(largeflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (largeflat.Data.Filter.Name.FilterName == \"NIR_H\") AND (largeflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>badpixel</InputPortName>\n-            <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>obsCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(obsCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (obsCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>refCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(refCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (refCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>detectorsPhotomOffsets</InputPortName>\n-            <DataProductType>DpdNirRelPhotoDetCalibration</DataProductType>\n-            <InputQuerySpecPlan>(detectorsPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (detectorsPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_H\") AND (detectorsPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-        <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>tilesPhotomOffsets</InputPortName>\n-            <DataProductType>DpdNirRelPhotoFieldCalibration</DataProductType>\n-            <InputQuerySpecPlan>(tilesPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (tilesPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_H\") AND (tilesPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>absPhotoData</InputPortName>\n-            <DataProductType>DpdNirAbsPhotoCalibration</DataProductType>\n-            <InputQuerySpecPlan>(absPhotoData.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (absPhotoData.Data.Filter.Name.FilterName == \"NIR_H\")  AND (absPhotoData.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-    </InputDataSetPlan> \n-    <OutputDataSet>\n-        <OutputDataProduct>\n-            <OutputPortName>stk_image_xml</OutputPortName>\n-            <DataProductType>DpdNirStackedFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>cal_images_xml</OutputPortName>\n-            <DataProductType>DpdNirCalibratedFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>stk_catalog_xml</OutputPortName>\n-            <DataProductType>DpdNirStackedFrameCatalog</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>cal_catalogs_xml</OutputPortName>\n-            <DataProductType>DpdNirCalibratedFrameCatalog</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-    </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n-</tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_ProcessField_Pipeline/PipDef_NIR_J_ProcessField.xml": [
                        [
                            "@@ -1,183 +0,0 @@\n-<tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_J-PROCESSFIELD_VIS-CAT_DEV_2022.03.29</Id>\n-    <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n-    <PipelineScriptPath>NIR_ProcessField_Pipeline/PipScript_NIR_ProcessField.py</PipelineScriptPath>\n-    <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n-    <InputDataSetPlan>\n-        <KeyProductInputDataPlan>\n-            <InputPortName>dithers</InputPortName>\n-            <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"J\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"J\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>4</Max>\n-            </Cardinality>\n-        </KeyProductInputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>nirConfig</InputPortName>\n-            <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>mdb</InputPortName>\n-            <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISPH_Outfld_Teles_straylight*\"</FilesToInclude>\n-            </FileFiltering>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>presolution</InputPortName>\n-            <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>OPTIONAL</Optionality>\n-                <Min>0</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterdark</InputPortName>\n-            <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_J\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterflat</InputPortName>\n-            <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_J\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>largeflat</InputPortName>\n-            <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(largeflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (largeflat.Data.Filter.Name.FilterName == \"NIR_J\") AND (largeflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>badpixel</InputPortName>\n-            <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>obsCatalog</InputPortName>\n-            <DataProductType>DpdVisStackedFrameCatalog</DataProductType>\n-            <InputQuerySpecPlan>(obsCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (obsCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>refCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(refCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (refCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>             \n-        <InputDataPlan>\n-            <InputPortName>detectorsPhotomOffsets</InputPortName>\n-            <DataProductType>DpdNirRelPhotoDetCalibration</DataProductType>\n-            <InputQuerySpecPlan>(detectorsPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (detectorsPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_J\") AND (detectorsPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-        <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>tilesPhotomOffsets</InputPortName>\n-            <DataProductType>DpdNirRelPhotoFieldCalibration</DataProductType>\n-            <InputQuerySpecPlan>(tilesPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (tilesPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_J\") AND (tilesPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>absPhotoData</InputPortName>\n-            <DataProductType>DpdNirAbsPhotoCalibration</DataProductType>\n-            <InputQuerySpecPlan>(absPhotoData.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (absPhotoData.Data.Filter.Name.FilterName == \"NIR_J\")  AND (absPhotoData.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-    </InputDataSetPlan> \n-    <OutputDataSet>\n-        <OutputDataProduct>\n-            <OutputPortName>stk_image_xml</OutputPortName>\n-            <DataProductType>DpdNirStackedFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>cal_images_xml</OutputPortName>\n-            <DataProductType>DpdNirCalibratedFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>stk_catalog_xml</OutputPortName>\n-            <DataProductType>DpdNirStackedFrameCatalog</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>cal_catalogs_xml</OutputPortName>\n-            <DataProductType>DpdNirCalibratedFrameCatalog</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-    </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n-</tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_ProcessField_Pipeline/PipDef_NIR_J_ProcessFieldSelfCal.xml": [
                        [
                            "@@ -1,183 +0,0 @@\n-<tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_J-PROCESSFIELDSELFCAL_VIS-CAT_DEV_2022.03.29</Id>\n-    <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n-    <PipelineScriptPath>NIR_ProcessField_Pipeline/PipScript_NIR_ProcessFieldSelfCal.py</PipelineScriptPath>\n-    <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n-    <InputDataSetPlan>\n-        <KeyProductInputDataPlan>\n-            <InputPortName>dithers</InputPortName>\n-            <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"J\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"J\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>4</Max>\n-            </Cardinality>\n-        </KeyProductInputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>nirConfig</InputPortName>\n-            <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>mdb</InputPortName>\n-            <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISPH_Outfld_Teles_straylight*\"</FilesToInclude>\n-            </FileFiltering>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>presolution</InputPortName>\n-            <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>OPTIONAL</Optionality>\n-                <Min>0</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterdark</InputPortName>\n-            <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_J\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterflat</InputPortName>\n-            <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_J\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>largeflat</InputPortName>\n-            <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(largeflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (largeflat.Data.Filter.Name.FilterName == \"NIR_J\") AND (largeflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>badpixel</InputPortName>\n-            <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>obsCatalog</InputPortName>\n-            <DataProductType>DpdVisStackedFrameCatalog</DataProductType>\n-            <InputQuerySpecPlan>(obsCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (obsCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>refCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(refCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (refCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>             \n-        <InputDataPlan>\n-            <InputPortName>detectorsPhotomOffsets</InputPortName>\n-            <DataProductType>DpdNirRelPhotoDetCalibration</DataProductType>\n-            <InputQuerySpecPlan>(detectorsPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (detectorsPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_J\") AND (detectorsPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-        <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>tilesPhotomOffsets</InputPortName>\n-            <DataProductType>DpdNirRelPhotoFieldCalibration</DataProductType>\n-            <InputQuerySpecPlan>(tilesPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (tilesPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_J\") AND (tilesPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>absPhotoData</InputPortName>\n-            <DataProductType>DpdNirAbsPhotoCalibration</DataProductType>\n-            <InputQuerySpecPlan>(absPhotoData.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (absPhotoData.Data.Filter.Name.FilterName == \"NIR_J\")  AND (absPhotoData.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-    </InputDataSetPlan> \n-    <OutputDataSet>\n-        <OutputDataProduct>\n-            <OutputPortName>stk_image_xml</OutputPortName>\n-            <DataProductType>DpdNirStackedFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>cal_images_xml</OutputPortName>\n-            <DataProductType>DpdNirCalibratedFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>stk_catalog_xml</OutputPortName>\n-            <DataProductType>DpdNirStackedFrameCatalog</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>cal_catalogs_xml</OutputPortName>\n-            <DataProductType>DpdNirCalibratedFrameCatalog</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-    </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n-</tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_ProcessField_Pipeline/PipDef_NIR_J_ProcessField_TU.xml": [
                        [
                            "@@ -1,183 +0,0 @@\n-<tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_J-PROCESSFIELD_TU-CAT_DEV_2022.03.29</Id>\n-    <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n-    <PipelineScriptPath>NIR_ProcessField_Pipeline/PipScript_NIR_ProcessField.py</PipelineScriptPath>\n-    <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n-    <InputDataSetPlan>\n-        <KeyProductInputDataPlan>\n-            <InputPortName>dithers</InputPortName>\n-            <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"J\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"J\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>4</Max>\n-            </Cardinality>\n-        </KeyProductInputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>nirConfig</InputPortName>\n-            <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>mdb</InputPortName>\n-            <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISPH_Outfld_Teles_straylight*\"</FilesToInclude>\n-            </FileFiltering>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>presolution</InputPortName>\n-            <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>OPTIONAL</Optionality>\n-                <Min>0</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterdark</InputPortName>\n-            <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_J\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterflat</InputPortName>\n-            <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_J\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>largeflat</InputPortName>\n-            <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(largeflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (largeflat.Data.Filter.Name.FilterName == \"NIR_J\") AND (largeflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>badpixel</InputPortName>\n-            <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>obsCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(obsCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (obsCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>refCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(refCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (refCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>        \n-        <InputDataPlan>\n-            <InputPortName>detectorsPhotomOffsets</InputPortName>\n-            <DataProductType>DpdNirRelPhotoDetCalibration</DataProductType>\n-            <InputQuerySpecPlan>(detectorsPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (detectorsPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_J\") AND (detectorsPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-        <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>tilesPhotomOffsets</InputPortName>\n-            <DataProductType>DpdNirRelPhotoFieldCalibration</DataProductType>\n-            <InputQuerySpecPlan>(tilesPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (tilesPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_J\") AND (tilesPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>absPhotoData</InputPortName>\n-            <DataProductType>DpdNirAbsPhotoCalibration</DataProductType>\n-            <InputQuerySpecPlan>(absPhotoData.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (absPhotoData.Data.Filter.Name.FilterName == \"NIR_J\")  AND (absPhotoData.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-    </InputDataSetPlan> \n-    <OutputDataSet>\n-        <OutputDataProduct>\n-            <OutputPortName>stk_image_xml</OutputPortName>\n-            <DataProductType>DpdNirStackedFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>cal_images_xml</OutputPortName>\n-            <DataProductType>DpdNirCalibratedFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>stk_catalog_xml</OutputPortName>\n-            <DataProductType>DpdNirStackedFrameCatalog</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>cal_catalogs_xml</OutputPortName>\n-            <DataProductType>DpdNirCalibratedFrameCatalog</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-    </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n-</tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_ProcessField_Pipeline/PipDef_NIR_ProcessField.xml": [
                        [
                            "@@ -1,5 +1,5 @@\n <tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_H-PROCESSFIELD_VIS-CAT_DEV_2022.03.29</Id>\n+    <Id>PipDef_NIR_PROCESSFIELD_VIS_CAT_2023.08.08</Id>\n     <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n     <PipelineScriptPath>NIR_ProcessField_Pipeline/PipScript_NIR_ProcessField.py</PipelineScriptPath>\n     <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n@@ -7,8 +7,7 @@\n         <KeyProductInputDataPlan>\n             <InputPortName>dithers</InputPortName>\n             <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"H\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"H\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>(dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"UNKNOWN\") AND (dithers.Data.ObservationSequence.CalblockId == \"UNKNOWN\") AND (dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -18,7 +17,7 @@\n         <InputDataPlan>\n             <InputPortName>nirConfig</InputPortName>\n             <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>nirConfig.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -28,9 +27,9 @@\n         <InputDataPlan>\n             <InputPortName>mdb</InputPortName>\n             <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>mdb.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISPH_Outfld_Teles_straylight*\"</FilesToInclude>\n+                <FilesToInclude>\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISP[JHY]_Outfld_Teles_straylight*\",\"NISPDetectorTable*\",\"NISPDetectorSlots*\",\"EUC_NISP_NLPHOTO-*\", \"EUC_NISP_NLSPECTRO-*\",\"EUC_NISP_GAIN-*\",\"EUC_FM_NIP_[JHY]_SCS-*\",\"NIPGhostsShifts*\"</FilesToInclude>\n             </FileFiltering>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n@@ -41,7 +40,7 @@\n         <InputDataPlan>\n             <InputPortName>presolution</InputPortName>\n             <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>presolution.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>OPTIONAL</Optionality>\n                 <Min>0</Min>\n@@ -51,8 +50,7 @@\n         <InputDataPlan>\n             <InputPortName>masterdark</InputPortName>\n             <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_H\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>masterdark.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -62,7 +60,7 @@\n         <InputDataPlan>\n             <InputPortName>masterflat</InputPortName>\n             <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_H\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>masterflat.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -72,7 +70,7 @@\n         <InputDataPlan>\n             <InputPortName>largeflat</InputPortName>\n             <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(largeflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (largeflat.Data.Filter.Name.FilterName == \"NIR_H\") AND (largeflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>largeflat.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -82,8 +80,7 @@\n         <InputDataPlan>\n             <InputPortName>badpixel</InputPortName>\n             <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>badpixel.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -93,7 +90,10 @@\n         <InputDataPlan>\n             <InputPortName>obsCatalog</InputPortName>\n             <DataProductType>DpdVisStackedFrameCatalog</DataProductType>\n-            <InputQuerySpecPlan>(obsCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (obsCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>obsCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\"</InputQuerySpecPlan>\n+             <LinkedBy>\n+                <Query>obsCatalog.Data.ObservationId == dithers.Data.ObservationSequence.ObservationId</Query>\n+            </LinkedBy>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -102,19 +102,22 @@\n         </InputDataPlan>\n         <InputDataPlan>\n             <InputPortName>refCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(refCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (refCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <DataProductType>DpdExtGaiaCutout</DataProductType>\n+            <InputQuerySpecPlan>(refCatalog.Header.DataSetRelease == \"UNKNOWN\") AND (refCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n+             <LinkedBy>\n+                <Query>dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(0.01,100) refCatalog.Data.CatalogCoverage.Polygon</Query>\n+            </LinkedBy>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n-                <Max>1</Max>\n+                <Max>100</Max>\n             </Cardinality>\n         </InputDataPlan>        \n         <InputDataPlan>\n             <InputPortName>detectorsPhotomOffsets</InputPortName>\n             <DataProductType>DpdNirRelPhotoDetCalibration</DataProductType>\n-            <InputQuerySpecPlan>(detectorsPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (detectorsPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_H\") AND (detectorsPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-        <Cardinality>\n+            <InputQuerySpecPlan>detectorsPhotomOffsets.Header.ProductId.LimitedString == \"UNKNOWN\" </InputQuerySpecPlan>\n+            <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n                 <Max>1</Max>\n@@ -123,7 +126,7 @@\n         <InputDataPlan>\n             <InputPortName>tilesPhotomOffsets</InputPortName>\n             <DataProductType>DpdNirRelPhotoFieldCalibration</DataProductType>\n-            <InputQuerySpecPlan>(tilesPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (tilesPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_H\") AND (tilesPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>tilesPhotomOffsets.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -133,7 +136,7 @@\n         <InputDataPlan>\n             <InputPortName>absPhotoData</InputPortName>\n             <DataProductType>DpdNirAbsPhotoCalibration</DataProductType>\n-            <InputQuerySpecPlan>(absPhotoData.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (absPhotoData.Data.Filter.Name.FilterName == \"NIR_H\")  AND (absPhotoData.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>absPhotoData.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -157,7 +160,7 @@\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n-                <Max>1</Max>\n+                <Max>4</Max>\n             </Cardinality>\n         </OutputDataProduct>\n         <OutputDataProduct>\n@@ -175,9 +178,9 @@\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n-                <Max>1</Max>\n+                <Max>4</Max>\n             </Cardinality>\n         </OutputDataProduct>\n     </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n+    <EstimatedWorkdirSizeGB>90</EstimatedWorkdirSizeGB>\n </tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ],
                        [
                            "@@ -1,5 +1,5 @@\n <tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_H-PROCESSFIELD_VIS-CAT_DEV_2023.08.08</Id>\n+    <Id>PipDef_NIR_PROCESSFIELD_VIS_CAT_2023.08.08</Id>\n     <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n     <PipelineScriptPath>NIR_ProcessField_Pipeline/PipScript_NIR_ProcessField.py</PipelineScriptPath>\n     <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n@@ -7,7 +7,7 @@\n         <KeyProductInputDataPlan>\n             <InputPortName>dithers</InputPortName>\n             <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"UNKNOWN\") AND (dithers.Data.ObservationSequence.CalblockId == \"UNKNOWN\") AND (dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>(dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"UNKNOWN\") AND (dithers.Data.ObservationSequence.CalblockId == \"UNKNOWN\") AND (dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n",
                            "Updated most of the pipeline definitions for PV",
                            "Marco Frailis",
                            "2023-08-09T17:51:09.000+00:00",
                            "e29a28ee79e24fa3d4416124617710741b3d82b1"
                        ],
                        [
                            "@@ -1,5 +1,5 @@\n <tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_H-PROCESSFIELD_VIS-CAT_DEV_2022.03.29</Id>\n+    <Id>PipDef_NIR_H-PROCESSFIELD_VIS-CAT_DEV_2023.08.08</Id>\n     <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n     <PipelineScriptPath>NIR_ProcessField_Pipeline/PipScript_NIR_ProcessField.py</PipelineScriptPath>\n     <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n@@ -7,8 +7,7 @@\n         <KeyProductInputDataPlan>\n             <InputPortName>dithers</InputPortName>\n             <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"H\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"H\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>(dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"UNKNOWN\") AND (dithers.Data.ObservationSequence.CalblockId == \"UNKNOWN\") AND (dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -18,7 +17,7 @@\n         <InputDataPlan>\n             <InputPortName>nirConfig</InputPortName>\n             <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>nirConfig.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -28,9 +27,9 @@\n         <InputDataPlan>\n             <InputPortName>mdb</InputPortName>\n             <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>mdb.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISPH_Outfld_Teles_straylight*\"</FilesToInclude>\n+                <FilesToInclude>\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISP[JHY]_Outfld_Teles_straylight*\",\"NISPDetectorTable*\",\"NISPDetectorSlots*\",\"EUC_NISP_NLPHOTO-*\", \"EUC_NISP_NLSPECTRO-*\",\"EUC_NISP_GAIN-*\",\"EUC_FM_NIP_[JHY]_SCS-*\",\"NIPGhostsShifts*\"</FilesToInclude>\n             </FileFiltering>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n@@ -41,7 +40,7 @@\n         <InputDataPlan>\n             <InputPortName>presolution</InputPortName>\n             <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>presolution.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>OPTIONAL</Optionality>\n                 <Min>0</Min>\n@@ -51,8 +50,7 @@\n         <InputDataPlan>\n             <InputPortName>masterdark</InputPortName>\n             <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_H\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>masterdark.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -62,7 +60,7 @@\n         <InputDataPlan>\n             <InputPortName>masterflat</InputPortName>\n             <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_H\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>masterflat.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -72,7 +70,7 @@\n         <InputDataPlan>\n             <InputPortName>largeflat</InputPortName>\n             <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(largeflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (largeflat.Data.Filter.Name.FilterName == \"NIR_H\") AND (largeflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>largeflat.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -82,8 +80,7 @@\n         <InputDataPlan>\n             <InputPortName>badpixel</InputPortName>\n             <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>badpixel.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -93,7 +90,10 @@\n         <InputDataPlan>\n             <InputPortName>obsCatalog</InputPortName>\n             <DataProductType>DpdVisStackedFrameCatalog</DataProductType>\n-            <InputQuerySpecPlan>(obsCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (obsCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>obsCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\"</InputQuerySpecPlan>\n+             <LinkedBy>\n+                <Query>obsCatalog.Data.ObservationId == dithers.Data.ObservationSequence.ObservationId</Query>\n+            </LinkedBy>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -102,19 +102,22 @@\n         </InputDataPlan>\n         <InputDataPlan>\n             <InputPortName>refCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(refCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (refCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <DataProductType>DpdExtGaiaCutout</DataProductType>\n+            <InputQuerySpecPlan>(refCatalog.Header.DataSetRelease == \"UNKNOWN\") AND (refCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n+             <LinkedBy>\n+                <Query>dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(0.01,100) refCatalog.Data.CatalogCoverage.Polygon</Query>\n+            </LinkedBy>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n-                <Max>1</Max>\n+                <Max>100</Max>\n             </Cardinality>\n         </InputDataPlan>        \n         <InputDataPlan>\n             <InputPortName>detectorsPhotomOffsets</InputPortName>\n             <DataProductType>DpdNirRelPhotoDetCalibration</DataProductType>\n-            <InputQuerySpecPlan>(detectorsPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (detectorsPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_H\") AND (detectorsPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-        <Cardinality>\n+            <InputQuerySpecPlan>detectorsPhotomOffsets.Header.ProductId.LimitedString == \"UNKNOWN\" </InputQuerySpecPlan>\n+            <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n                 <Max>1</Max>\n@@ -123,7 +126,7 @@\n         <InputDataPlan>\n             <InputPortName>tilesPhotomOffsets</InputPortName>\n             <DataProductType>DpdNirRelPhotoFieldCalibration</DataProductType>\n-            <InputQuerySpecPlan>(tilesPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (tilesPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_H\") AND (tilesPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>tilesPhotomOffsets.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -133,7 +136,7 @@\n         <InputDataPlan>\n             <InputPortName>absPhotoData</InputPortName>\n             <DataProductType>DpdNirAbsPhotoCalibration</DataProductType>\n-            <InputQuerySpecPlan>(absPhotoData.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (absPhotoData.Data.Filter.Name.FilterName == \"NIR_H\")  AND (absPhotoData.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>absPhotoData.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -157,7 +160,7 @@\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n-                <Max>1</Max>\n+                <Max>4</Max>\n             </Cardinality>\n         </OutputDataProduct>\n         <OutputDataProduct>\n@@ -175,9 +178,9 @@\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n-                <Max>1</Max>\n+                <Max>4</Max>\n             </Cardinality>\n         </OutputDataProduct>\n     </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n+    <EstimatedWorkdirSizeGB>90</EstimatedWorkdirSizeGB>\n </tsk1:PipelineDef>\n",
                            "First set of updates to the pipeline confgurations",
                            "Marco Frailis",
                            "2023-08-09T16:08:24.000+00:00",
                            "3b320c03b4e8940500253e078cb2afb087747ac4"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_ProcessField_Pipeline/PipDef_NIR_ProcessFieldSelfCal.xml": [
                        [
                            "@@ -1,5 +1,5 @@\n <tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_H-PROCESSFIELDSELFCAL_VIS-CAT_DEV_2022.03.29</Id>\n+    <Id>PipDef_NIR_PROCESSFIELDSELFCAL_VIS_CAT_2023.08.08</Id>\n     <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n     <PipelineScriptPath>NIR_ProcessField_Pipeline/PipScript_NIR_ProcessFieldSelfCal.py</PipelineScriptPath>\n     <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n@@ -7,18 +7,17 @@\n         <KeyProductInputDataPlan>\n             <InputPortName>dithers</InputPortName>\n             <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"H\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"H\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>(dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"UNKNOWN\") AND (dithers.Data.ObservationSequence.CalblockId == \"UNKNOWN\") AND (dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n-                <Max>4</Max>\n+                <Max>60</Max>\n             </Cardinality>\n         </KeyProductInputDataPlan>\n         <InputDataPlan>\n             <InputPortName>nirConfig</InputPortName>\n             <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>nirConfig.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -28,9 +27,9 @@\n         <InputDataPlan>\n             <InputPortName>mdb</InputPortName>\n             <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>mdb.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISPH_Outfld_Teles_straylight*\"</FilesToInclude>\n+                <FilesToInclude>\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISP[JHY]_Outfld_Teles_straylight*\",\"NISPDetectorTable*\",\"NISPDetectorSlots*\",\"EUC_NISP_NLPHOTO-*\", \"EUC_NISP_NLSPECTRO-*\",\"EUC_NISP_GAIN-*\",\"EUC_FM_NIP_[JHY]_SCS-*\",\"NIPGhostsShifts*\"</FilesToInclude>\n             </FileFiltering>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n@@ -41,7 +40,7 @@\n         <InputDataPlan>\n             <InputPortName>presolution</InputPortName>\n             <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>presolution.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>OPTIONAL</Optionality>\n                 <Min>0</Min>\n@@ -51,8 +50,7 @@\n         <InputDataPlan>\n             <InputPortName>masterdark</InputPortName>\n             <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_H\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>masterdark.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -62,7 +60,7 @@\n         <InputDataPlan>\n             <InputPortName>masterflat</InputPortName>\n             <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_H\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>masterflat.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -72,7 +70,7 @@\n         <InputDataPlan>\n             <InputPortName>largeflat</InputPortName>\n             <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(largeflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (largeflat.Data.Filter.Name.FilterName == \"NIR_H\") AND (largeflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>largeflat.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -82,8 +80,7 @@\n         <InputDataPlan>\n             <InputPortName>badpixel</InputPortName>\n             <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>badpixel.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -93,7 +90,10 @@\n         <InputDataPlan>\n             <InputPortName>obsCatalog</InputPortName>\n             <DataProductType>DpdVisStackedFrameCatalog</DataProductType>\n-            <InputQuerySpecPlan>(obsCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (obsCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>obsCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\"</InputQuerySpecPlan>\n+             <LinkedBy>\n+                <Query>obsCatalog.Data.ObservationId == dithers.Data.ObservationSequence.ObservationId</Query>\n+            </LinkedBy>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -102,18 +102,21 @@\n         </InputDataPlan>\n         <InputDataPlan>\n             <InputPortName>refCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(refCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (refCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <DataProductType>DpdExtGaiaCutout</DataProductType>\n+            <InputQuerySpecPlan>(refCatalog.Header.DataSetRelease == \"UNKNOWN\") AND (refCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n+             <LinkedBy>\n+                <Query>dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(0.01,100) refCatalog.Data.CatalogCoverage.Polygon</Query>\n+            </LinkedBy>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n-                <Max>1</Max>\n+                <Max>600</Max>\n             </Cardinality>\n         </InputDataPlan>        \n         <InputDataPlan>\n             <InputPortName>detectorsPhotomOffsets</InputPortName>\n             <DataProductType>DpdNirRelPhotoDetCalibration</DataProductType>\n-            <InputQuerySpecPlan>(detectorsPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (detectorsPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_H\") AND (detectorsPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>detectorsPhotomOffsets.Header.ProductId.LimitedString == \"UNKNOWN\" </InputQuerySpecPlan>\n         <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -123,7 +126,7 @@\n         <InputDataPlan>\n             <InputPortName>tilesPhotomOffsets</InputPortName>\n             <DataProductType>DpdNirRelPhotoFieldCalibration</DataProductType>\n-            <InputQuerySpecPlan>(tilesPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (tilesPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_H\") AND (tilesPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>tilesPhotomOffsets.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -133,7 +136,7 @@\n         <InputDataPlan>\n             <InputPortName>absPhotoData</InputPortName>\n             <DataProductType>DpdNirAbsPhotoCalibration</DataProductType>\n-            <InputQuerySpecPlan>(absPhotoData.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (absPhotoData.Data.Filter.Name.FilterName == \"NIR_H\")  AND (absPhotoData.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>absPhotoData.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -157,7 +160,7 @@\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n-                <Max>1</Max>\n+                <Max>60</Max>\n             </Cardinality>\n         </OutputDataProduct>\n         <OutputDataProduct>\n@@ -175,9 +178,9 @@\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n-                <Max>1</Max>\n+                <Max>60</Max>\n             </Cardinality>\n         </OutputDataProduct>\n     </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n+    <EstimatedWorkdirSizeGB>1000</EstimatedWorkdirSizeGB>\n </tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ],
                        [
                            "@@ -1,5 +1,5 @@\n <tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_H-PROCESSFIELDSELFCAL_VIS-CAT_DEV_2023.08.08</Id>\n+    <Id>PipDef_NIR_PROCESSFIELDSELFCAL_VIS_CAT_2023.08.08</Id>\n     <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n     <PipelineScriptPath>NIR_ProcessField_Pipeline/PipScript_NIR_ProcessFieldSelfCal.py</PipelineScriptPath>\n     <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n@@ -7,7 +7,7 @@\n         <KeyProductInputDataPlan>\n             <InputPortName>dithers</InputPortName>\n             <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"UNKNOWN\") AND (dithers.Data.ObservationSequence.CalblockId == \"UNKNOWN\") AND (dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>(dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"UNKNOWN\") AND (dithers.Data.ObservationSequence.CalblockId == \"UNKNOWN\") AND (dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n",
                            "Updated most of the pipeline definitions for PV",
                            "Marco Frailis",
                            "2023-08-09T17:51:09.000+00:00",
                            "e29a28ee79e24fa3d4416124617710741b3d82b1"
                        ],
                        [
                            "@@ -1,5 +1,5 @@\n <tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_H-PROCESSFIELDSELFCAL_VIS-CAT_DEV_2022.03.29</Id>\n+    <Id>PipDef_NIR_H-PROCESSFIELDSELFCAL_VIS-CAT_DEV_2023.08.08</Id>\n     <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n     <PipelineScriptPath>NIR_ProcessField_Pipeline/PipScript_NIR_ProcessFieldSelfCal.py</PipelineScriptPath>\n     <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n@@ -7,18 +7,17 @@\n         <KeyProductInputDataPlan>\n             <InputPortName>dithers</InputPortName>\n             <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"H\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"H\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>(dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"UNKNOWN\") AND (dithers.Data.ObservationSequence.CalblockId == \"UNKNOWN\") AND (dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n-                <Max>4</Max>\n+                <Max>60</Max>\n             </Cardinality>\n         </KeyProductInputDataPlan>\n         <InputDataPlan>\n             <InputPortName>nirConfig</InputPortName>\n             <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>nirConfig.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -28,9 +27,9 @@\n         <InputDataPlan>\n             <InputPortName>mdb</InputPortName>\n             <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>mdb.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISPH_Outfld_Teles_straylight*\"</FilesToInclude>\n+                <FilesToInclude>\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISP[JHY]_Outfld_Teles_straylight*\",\"NISPDetectorTable*\",\"NISPDetectorSlots*\",\"EUC_NISP_NLPHOTO-*\", \"EUC_NISP_NLSPECTRO-*\",\"EUC_NISP_GAIN-*\",\"EUC_FM_NIP_[JHY]_SCS-*\",\"NIPGhostsShifts*\"</FilesToInclude>\n             </FileFiltering>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n@@ -41,7 +40,7 @@\n         <InputDataPlan>\n             <InputPortName>presolution</InputPortName>\n             <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>presolution.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>OPTIONAL</Optionality>\n                 <Min>0</Min>\n@@ -51,8 +50,7 @@\n         <InputDataPlan>\n             <InputPortName>masterdark</InputPortName>\n             <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_H\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>masterdark.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -62,7 +60,7 @@\n         <InputDataPlan>\n             <InputPortName>masterflat</InputPortName>\n             <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_H\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>masterflat.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -72,7 +70,7 @@\n         <InputDataPlan>\n             <InputPortName>largeflat</InputPortName>\n             <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(largeflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (largeflat.Data.Filter.Name.FilterName == \"NIR_H\") AND (largeflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>largeflat.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -82,8 +80,7 @@\n         <InputDataPlan>\n             <InputPortName>badpixel</InputPortName>\n             <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>badpixel.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -93,7 +90,10 @@\n         <InputDataPlan>\n             <InputPortName>obsCatalog</InputPortName>\n             <DataProductType>DpdVisStackedFrameCatalog</DataProductType>\n-            <InputQuerySpecPlan>(obsCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (obsCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>obsCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\"</InputQuerySpecPlan>\n+             <LinkedBy>\n+                <Query>obsCatalog.Data.ObservationId == dithers.Data.ObservationSequence.ObservationId</Query>\n+            </LinkedBy>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -102,18 +102,21 @@\n         </InputDataPlan>\n         <InputDataPlan>\n             <InputPortName>refCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(refCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (refCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <DataProductType>DpdExtGaiaCutout</DataProductType>\n+            <InputQuerySpecPlan>(refCatalog.Header.DataSetRelease == \"UNKNOWN\") AND (refCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n+             <LinkedBy>\n+                <Query>dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(0.01,100) refCatalog.Data.CatalogCoverage.Polygon</Query>\n+            </LinkedBy>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n-                <Max>1</Max>\n+                <Max>600</Max>\n             </Cardinality>\n         </InputDataPlan>        \n         <InputDataPlan>\n             <InputPortName>detectorsPhotomOffsets</InputPortName>\n             <DataProductType>DpdNirRelPhotoDetCalibration</DataProductType>\n-            <InputQuerySpecPlan>(detectorsPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (detectorsPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_H\") AND (detectorsPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>detectorsPhotomOffsets.Header.ProductId.LimitedString == \"UNKNOWN\" </InputQuerySpecPlan>\n         <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -123,7 +126,7 @@\n         <InputDataPlan>\n             <InputPortName>tilesPhotomOffsets</InputPortName>\n             <DataProductType>DpdNirRelPhotoFieldCalibration</DataProductType>\n-            <InputQuerySpecPlan>(tilesPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (tilesPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_H\") AND (tilesPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>tilesPhotomOffsets.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -133,7 +136,7 @@\n         <InputDataPlan>\n             <InputPortName>absPhotoData</InputPortName>\n             <DataProductType>DpdNirAbsPhotoCalibration</DataProductType>\n-            <InputQuerySpecPlan>(absPhotoData.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (absPhotoData.Data.Filter.Name.FilterName == \"NIR_H\")  AND (absPhotoData.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>absPhotoData.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -157,7 +160,7 @@\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n-                <Max>1</Max>\n+                <Max>60</Max>\n             </Cardinality>\n         </OutputDataProduct>\n         <OutputDataProduct>\n@@ -175,9 +178,9 @@\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n-                <Max>1</Max>\n+                <Max>60</Max>\n             </Cardinality>\n         </OutputDataProduct>\n     </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n+    <EstimatedWorkdirSizeGB>1000</EstimatedWorkdirSizeGB>\n </tsk1:PipelineDef>\n",
                            "First set of updates to the pipeline confgurations",
                            "Marco Frailis",
                            "2023-08-09T16:08:24.000+00:00",
                            "3b320c03b4e8940500253e078cb2afb087747ac4"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_ProcessField_Pipeline/PipDef_NIR_Y_ProcessField.xml": [
                        [
                            "@@ -1,183 +0,0 @@\n-<tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_Y-PROCESSFIELD_VIS-CAT_DEV_2022.03.29</Id>\n-    <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n-    <PipelineScriptPath>NIR_ProcessField_Pipeline/PipScript_NIR_ProcessField.py</PipelineScriptPath>\n-    <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n-    <InputDataSetPlan>\n-        <KeyProductInputDataPlan>\n-            <InputPortName>dithers</InputPortName>\n-            <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"Y\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"Y\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>4</Max>\n-            </Cardinality>\n-        </KeyProductInputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>nirConfig</InputPortName>\n-            <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>mdb</InputPortName>\n-            <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISPH_Outfld_Teles_straylight*\"</FilesToInclude>\n-            </FileFiltering>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>presolution</InputPortName>\n-            <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>OPTIONAL</Optionality>\n-                <Min>0</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterdark</InputPortName>\n-            <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_Y\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterflat</InputPortName>\n-            <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_Y\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>largeflat</InputPortName>\n-            <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(largeflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (largeflat.Data.Filter.Name.FilterName == \"NIR_Y\") AND (largeflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>badpixel</InputPortName>\n-            <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>obsCatalog</InputPortName>\n-            <DataProductType>DpdVisStackedFrameCatalog</DataProductType>\n-            <InputQuerySpecPlan>(obsCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (obsCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>refCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(refCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (refCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>             \n-        <InputDataPlan>\n-            <InputPortName>detectorsPhotomOffsets</InputPortName>\n-            <DataProductType>DpdNirRelPhotoDetCalibration</DataProductType>\n-            <InputQuerySpecPlan>(detectorsPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (detectorsPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_Y\") AND (detectorsPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-        <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>tilesPhotomOffsets</InputPortName>\n-            <DataProductType>DpdNirRelPhotoFieldCalibration</DataProductType>\n-            <InputQuerySpecPlan>(tilesPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (tilesPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_Y\") AND (tilesPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>absPhotoData</InputPortName>\n-            <DataProductType>DpdNirAbsPhotoCalibration</DataProductType>\n-            <InputQuerySpecPlan>(absPhotoData.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (absPhotoData.Data.Filter.Name.FilterName == \"NIR_Y\")  AND (absPhotoData.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-    </InputDataSetPlan> \n-    <OutputDataSet>\n-        <OutputDataProduct>\n-            <OutputPortName>stk_image_xml</OutputPortName>\n-            <DataProductType>DpdNirStackedFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>cal_images_xml</OutputPortName>\n-            <DataProductType>DpdNirCalibratedFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>stk_catalog_xml</OutputPortName>\n-            <DataProductType>DpdNirStackedFrameCatalog</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>cal_catalogs_xml</OutputPortName>\n-            <DataProductType>DpdNirCalibratedFrameCatalog</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-    </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n-</tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_ProcessField_Pipeline/PipDef_NIR_Y_ProcessFieldSelfCal.xml": [
                        [
                            "@@ -1,183 +0,0 @@\n-<tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_Y-PROCESSFIELDSELFCAL_VIS-CAT_DEV_2022.03.29</Id>\n-    <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n-    <PipelineScriptPath>NIR_ProcessField_Pipeline/PipScript_NIR_ProcessFieldSelfCal.py</PipelineScriptPath>\n-    <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n-    <InputDataSetPlan>\n-        <KeyProductInputDataPlan>\n-            <InputPortName>dithers</InputPortName>\n-            <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"Y\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"Y\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>4</Max>\n-            </Cardinality>\n-        </KeyProductInputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>nirConfig</InputPortName>\n-            <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>mdb</InputPortName>\n-            <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISPH_Outfld_Teles_straylight*\"</FilesToInclude>\n-            </FileFiltering>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>presolution</InputPortName>\n-            <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>OPTIONAL</Optionality>\n-                <Min>0</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterdark</InputPortName>\n-            <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_Y\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterflat</InputPortName>\n-            <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_Y\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>largeflat</InputPortName>\n-            <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(largeflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (largeflat.Data.Filter.Name.FilterName == \"NIR_Y\") AND (largeflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>badpixel</InputPortName>\n-            <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>obsCatalog</InputPortName>\n-            <DataProductType>DpdVisStackedFrameCatalog</DataProductType>\n-            <InputQuerySpecPlan>(obsCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (obsCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>refCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(refCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (refCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>             \n-        <InputDataPlan>\n-            <InputPortName>detectorsPhotomOffsets</InputPortName>\n-            <DataProductType>DpdNirRelPhotoDetCalibration</DataProductType>\n-            <InputQuerySpecPlan>(detectorsPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (detectorsPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_Y\") AND (detectorsPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-        <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>tilesPhotomOffsets</InputPortName>\n-            <DataProductType>DpdNirRelPhotoFieldCalibration</DataProductType>\n-            <InputQuerySpecPlan>(tilesPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (tilesPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_Y\") AND (tilesPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>absPhotoData</InputPortName>\n-            <DataProductType>DpdNirAbsPhotoCalibration</DataProductType>\n-            <InputQuerySpecPlan>(absPhotoData.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (absPhotoData.Data.Filter.Name.FilterName == \"NIR_Y\")  AND (absPhotoData.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-    </InputDataSetPlan> \n-    <OutputDataSet>\n-        <OutputDataProduct>\n-            <OutputPortName>stk_image_xml</OutputPortName>\n-            <DataProductType>DpdNirStackedFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>cal_images_xml</OutputPortName>\n-            <DataProductType>DpdNirCalibratedFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>stk_catalog_xml</OutputPortName>\n-            <DataProductType>DpdNirStackedFrameCatalog</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>cal_catalogs_xml</OutputPortName>\n-            <DataProductType>DpdNirCalibratedFrameCatalog</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-    </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n-</tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_ProcessField_Pipeline/PipDef_NIR_Y_ProcessField_TU.xml": [
                        [
                            "@@ -1,183 +0,0 @@\n-<tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_Y-PROCESSFIELD_TU-CAT_DEV_2022.03.29</Id>\n-    <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n-    <PipelineScriptPath>NIR_ProcessField_Pipeline/PipScript_NIR_ProcessField.py</PipelineScriptPath>\n-    <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n-    <InputDataSetPlan>\n-        <KeyProductInputDataPlan>\n-            <InputPortName>dithers</InputPortName>\n-            <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"Y\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"Y\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>4</Max>\n-            </Cardinality>\n-        </KeyProductInputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>nirConfig</InputPortName>\n-            <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>mdb</InputPortName>\n-            <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISPH_Outfld_Teles_straylight*\"</FilesToInclude>\n-            </FileFiltering>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>presolution</InputPortName>\n-            <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>OPTIONAL</Optionality>\n-                <Min>0</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterdark</InputPortName>\n-            <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_Y\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterflat</InputPortName>\n-            <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_Y\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>largeflat</InputPortName>\n-            <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(largeflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (largeflat.Data.Filter.Name.FilterName == \"NIR_Y\") AND (largeflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>badpixel</InputPortName>\n-            <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>obsCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(obsCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (obsCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>refCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(refCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (refCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>        \n-        <InputDataPlan>\n-            <InputPortName>detectorsPhotomOffsets</InputPortName>\n-            <DataProductType>DpdNirRelPhotoDetCalibration</DataProductType>\n-            <InputQuerySpecPlan>(detectorsPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (detectorsPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_Y\") AND (detectorsPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-        <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>tilesPhotomOffsets</InputPortName>\n-            <DataProductType>DpdNirRelPhotoFieldCalibration</DataProductType>\n-            <InputQuerySpecPlan>(tilesPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (tilesPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_Y\") AND (tilesPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>absPhotoData</InputPortName>\n-            <DataProductType>DpdNirAbsPhotoCalibration</DataProductType>\n-            <InputQuerySpecPlan>(absPhotoData.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (absPhotoData.Data.Filter.Name.FilterName == \"NIR_Y\")  AND (absPhotoData.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-    </InputDataSetPlan> \n-    <OutputDataSet>\n-        <OutputDataProduct>\n-            <OutputPortName>stk_image_xml</OutputPortName>\n-            <DataProductType>DpdNirStackedFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>cal_images_xml</OutputPortName>\n-            <DataProductType>DpdNirCalibratedFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>stk_catalog_xml</OutputPortName>\n-            <DataProductType>DpdNirStackedFrameCatalog</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>cal_catalogs_xml</OutputPortName>\n-            <DataProductType>DpdNirCalibratedFrameCatalog</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-    </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n-</tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_ProcessField_Pipeline/PipScript_NIR_ProcessFieldSelfCal.py": [
                        [
                            "@@ -5,7 +5,7 @@ from PackageDef_NIR import (\n      backEstimate, smallFlatCorrect, largeFlatCorrect, doAstrom, psfForDither, \n      relPhotoExpSciSelfCal, relPhotoCalib, absPhotoCalib, doResampling, crRejectionMFSciSelfCal, \n      doStacking, psfForStack, catalogPhotDither, catalogPhotStackSciSelfCal, extractLists2, \n-     createScientificDpdsSciSelfCal, crRejectionSF, gsclMasking)\n+     createScientificDpdsSciSelfCal, crRejectionSF, gsclMasking, crDeflag)\n \n @parallel(iterable='ditherExposure')\n def nir_calib_dither(nirConfig, ditherExposure, mdb, masterdark, masterflat, largeflat, badpixel):\n@@ -55,10 +55,14 @@ def nir_pipeline(nirConfig, dithers, mdb, masterdark, masterflat, largeflat, bad\n                                                presolution=presolution,\n                                                config=nirConfig)\n \n+    astromCalibDithersCRFlagged = crRejectionMFSciSelfCal(dith_file=astromCalibDithers)\n+\n+    astromCalibDithersDeflagged = crDeflag(input_list=astromCalibDithersCRFlagged)\n+\n     rel_exposure_xml = relPhotoExpSciSelfCal(in_full_catalog=fullcatalog,\n                                              in_calibration_detectors=detectorsPhotomOffsets)\n \n-    tmp = p_photoCalib(infile=astromCalibDithers,\n+    tmp = p_photoCalib(infile=astromCalibDithersDeflagged,\n                        rel_cal_data=detectorsPhotomOffsets,\n                        rel_exposure_xml=rel_exposure_xml,\n                        tilesPhotomOffsets=tilesPhotomOffsets,\n@@ -74,9 +78,9 @@ def nir_pipeline(nirConfig, dithers, mdb, masterdark, masterflat, largeflat, bad\n                              listofbackgrounds=background,\n                              config=nirConfig)\n \n-    resampledCRFlagged = crRejectionMFSciSelfCal(dith_file=resampled)\n+    #resampledCRFlagged = crRejectionMFSciSelfCal(dith_file=resampled)\n \n-    stackedImage = doStacking(listofresampled=resampledCRFlagged,\n+    stackedImage = doStacking(listofresampled=resampled,\n                               config=nirConfig)\n \n     listofpsflists_stacked = psfForStack(listofimages=stackedImage,\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_SelfCalib_Pipeline/PipDef_NIR_H_SelfCalib.xml": [
                        [
                            "@@ -1,115 +0,0 @@\n-<tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_H-CALIB_LARGESCALEFLAT_DEV_2022.03.29</Id>\n-    <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n-    <PipelineScriptPath>NIR_SelfCalib_Pipeline/PipScript_NIR_SelfCalib.py</PipelineScriptPath>\n-    <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n-    <InputDataSetPlan>\n-        <KeyProductInputDataPlan>\n-            <InputPortName>dithers</InputPortName>\n-            <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"CALIB\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"H\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"H\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>4</Max>\n-            </Cardinality>\n-        </KeyProductInputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>nirConfig</InputPortName>\n-            <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>mdb</InputPortName>\n-            <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\"</FilesToInclude>\n-            </FileFiltering>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>presolution</InputPortName>\n-            <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>OPTIONAL</Optionality>\n-                <Min>0</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterdark</InputPortName>\n-            <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_H\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterflat</InputPortName>\n-            <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_H\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>badpixel</InputPortName>\n-            <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>sourceCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(sourceCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (sourceCatalog.Data.Release==\"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-    </InputDataSetPlan> \n-    <OutputDataSet>\n-        <OutputDataProduct>\n-            <OutputPortName>largeflat</OutputPortName>\n-            <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>detcoeff</OutputPortName>\n-            <DataProductType>DpdNirRelPhotoDetCalibration</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-    </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n-</tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_SelfCalib_Pipeline/PipDef_NIR_SelfCalib.xml": [
                        [
                            "@@ -1,5 +1,5 @@\n <tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_J-CALIB_LARGESCALEFLAT_DEV_2022.03.29</Id>\n+    <Id>PipDef_NIR_CALIB_LARGESCALEFLAT_2023.08.08</Id>\n     <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n     <PipelineScriptPath>NIR_SelfCalib_Pipeline/PipScript_NIR_SelfCalib.py</PipelineScriptPath>\n     <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n@@ -7,18 +7,17 @@\n         <KeyProductInputDataPlan>\n             <InputPortName>dithers</InputPortName>\n             <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"CALIB\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"J\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"J\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>(dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"UNKNOWN\") AND (dithers.Data.ObservationSequence.CalblockId == \"UNKNOWN\") AND (dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n-                <Max>4</Max>\n+                <Max>60</Max>\n             </Cardinality>\n         </KeyProductInputDataPlan>\n         <InputDataPlan>\n             <InputPortName>nirConfig</InputPortName>\n             <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>nirConfig.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -28,9 +27,9 @@\n         <InputDataPlan>\n             <InputPortName>mdb</InputPortName>\n             <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>mdb.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\"</FilesToInclude>\n+                <FilesToInclude>\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISPDetectorTable*\",\"NISPDetectorSlots*\",\"EUC_NISP_NLPHOTO-*\",\"EUC_NISP_GAIN-*\"</FilesToInclude>\n             </FileFiltering>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n@@ -41,7 +40,7 @@\n         <InputDataPlan>\n             <InputPortName>presolution</InputPortName>\n             <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>presolution.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>OPTIONAL</Optionality>\n                 <Min>0</Min>\n@@ -51,8 +50,7 @@\n         <InputDataPlan>\n             <InputPortName>masterdark</InputPortName>\n             <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_J\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>masterdark.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -62,7 +60,7 @@\n         <InputDataPlan>\n             <InputPortName>masterflat</InputPortName>\n             <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_J\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>masterflat.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -72,8 +70,7 @@\n         <InputDataPlan>\n             <InputPortName>badpixel</InputPortName>\n             <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>badpixel.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -82,8 +79,11 @@\n         </InputDataPlan>\n         <InputDataPlan>\n             <InputPortName>sourceCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(sourceCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (sourceCatalog.Data.Release==\"UNKNOWN\")</InputQuerySpecPlan>\n+            <DataProductType>DpdVisStackedFrameCatalog</DataProductType>\n+            <InputQuerySpecPlan>sourceCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\"</InputQuerySpecPlan>\n+             <LinkedBy>\n+                <Query>sourceCatalog.Data.ObservationId == dithers.Data.ObservationSequence.ObservationId</Query>\n+            </LinkedBy>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -111,5 +111,5 @@\n             </Cardinality>\n         </OutputDataProduct>\n     </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n+    <EstimatedWorkdirSizeGB>500</EstimatedWorkdirSizeGB>\n </tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ],
                        [
                            "@@ -1,5 +1,5 @@\n <tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_H-CALIB_LARGESCALEFLAT_DEV_2022.03.29</Id>\n+    <Id>PipDef_NIR_CALIB_LARGESCALEFLAT_2023.08.08</Id>\n     <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n     <PipelineScriptPath>NIR_SelfCalib_Pipeline/PipScript_NIR_SelfCalib.py</PipelineScriptPath>\n     <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n@@ -7,7 +7,7 @@\n         <KeyProductInputDataPlan>\n             <InputPortName>dithers</InputPortName>\n             <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"UNKNOWN\") AND (dithers.Data.ObservationSequence.CalblockId == \"UNKNOWN\") AND (dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>(dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"UNKNOWN\") AND (dithers.Data.ObservationSequence.CalblockId == \"UNKNOWN\") AND (dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -111,5 +111,5 @@\n             </Cardinality>\n         </OutputDataProduct>\n     </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n+    <EstimatedWorkdirSizeGB>500</EstimatedWorkdirSizeGB>\n </tsk1:PipelineDef>\n",
                            "Updated most of the pipeline definitions for PV",
                            "Marco Frailis",
                            "2023-08-09T17:51:09.000+00:00",
                            "e29a28ee79e24fa3d4416124617710741b3d82b1"
                        ],
                        [
                            "@@ -7,18 +7,17 @@\n         <KeyProductInputDataPlan>\n             <InputPortName>dithers</InputPortName>\n             <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"CALIB\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"H\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"H\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>(dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"UNKNOWN\") AND (dithers.Data.ObservationSequence.CalblockId == \"UNKNOWN\") AND (dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\")</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n-                <Max>4</Max>\n+                <Max>60</Max>\n             </Cardinality>\n         </KeyProductInputDataPlan>\n         <InputDataPlan>\n             <InputPortName>nirConfig</InputPortName>\n             <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>nirConfig.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -28,9 +27,9 @@\n         <InputDataPlan>\n             <InputPortName>mdb</InputPortName>\n             <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>mdb.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\"</FilesToInclude>\n+                <FilesToInclude>\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISPDetectorTable*\",\"NISPDetectorSlots*\",\"EUC_NISP_NLPHOTO-*\",\"EUC_NISP_GAIN-*\"</FilesToInclude>\n             </FileFiltering>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n@@ -41,7 +40,7 @@\n         <InputDataPlan>\n             <InputPortName>presolution</InputPortName>\n             <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>presolution.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>OPTIONAL</Optionality>\n                 <Min>0</Min>\n@@ -51,8 +50,7 @@\n         <InputDataPlan>\n             <InputPortName>masterdark</InputPortName>\n             <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_H\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>masterdark.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -62,7 +60,7 @@\n         <InputDataPlan>\n             <InputPortName>masterflat</InputPortName>\n             <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_H\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>masterflat.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -72,8 +70,7 @@\n         <InputDataPlan>\n             <InputPortName>badpixel</InputPortName>\n             <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n+            <InputQuerySpecPlan>badpixel.Header.ProductId.LimitedString == \"UNKNOWN\"</InputQuerySpecPlan>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n@@ -82,8 +79,11 @@\n         </InputDataPlan>\n         <InputDataPlan>\n             <InputPortName>sourceCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(sourceCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (sourceCatalog.Data.Release==\"UNKNOWN\")</InputQuerySpecPlan>\n+            <DataProductType>DpdVisStackedFrameCatalog</DataProductType>\n+            <InputQuerySpecPlan>sourceCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\"</InputQuerySpecPlan>\n+             <LinkedBy>\n+                <Query>sourceCatalog.Data.ObservationId == dithers.Data.ObservationSequence.ObservationId</Query>\n+            </LinkedBy>\n             <Cardinality>\n                 <Optionality>MANDATORY</Optionality>\n                 <Min>1</Min>\n",
                            "First set of updates to the pipeline confgurations",
                            "Marco Frailis",
                            "2023-08-09T16:08:24.000+00:00",
                            "3b320c03b4e8940500253e078cb2afb087747ac4"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_SelfCalib_Pipeline/PipDef_NIR_Y_SelfCalib.xml": [
                        [
                            "@@ -1,115 +0,0 @@\n-<tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_Y-CALIB_LARGESCALEFLAT_DEV_2022.03.29</Id>\n-    <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n-    <PipelineScriptPath>NIR_SelfCalib_Pipeline/PipScript_NIR_SelfCalib.py</PipelineScriptPath>\n-    <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n-    <InputDataSetPlan>\n-        <KeyProductInputDataPlan>\n-            <InputPortName>dithers</InputPortName>\n-            <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"CALIB\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"Y\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"Y\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>4</Max>\n-            </Cardinality>\n-        </KeyProductInputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>nirConfig</InputPortName>\n-            <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>mdb</InputPortName>\n-            <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\"</FilesToInclude>\n-            </FileFiltering>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>presolution</InputPortName>\n-            <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>OPTIONAL</Optionality>\n-                <Min>0</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterdark</InputPortName>\n-            <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_Y\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterflat</InputPortName>\n-            <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_Y\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>badpixel</InputPortName>\n-            <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>sourceCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(sourceCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (sourceCatalog.Data.Release==\"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-    </InputDataSetPlan> \n-    <OutputDataSet>\n-        <OutputDataProduct>\n-            <OutputPortName>largeflat</OutputPortName>\n-            <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>detcoeff</OutputPortName>\n-            <DataProductType>DpdNirRelPhotoDetCalibration</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-    </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n-</tsk1:PipelineDef>\n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/tests/python/NIR_AbsolutePhotometry_Pipeline_test.py": [
                        [
                            "@@ -32,9 +32,8 @@ from ST_PipelineUnitTesting.PipelineDefTester import PipelineDefTester\n \n absolute_photometry_package_def = getAuxiliaryPath('NIR_Pipelines/PackageDef_NIR.py')\n absolute_photometry_pipeline_script = getAuxiliaryPath('NIR_Pipelines/NIR_AbsolutePhotometry_Pipeline/PipScript_NIR_AbsolutePhotometry.py')\n-absolute_photometry_pipeline_def_Y = getAuxiliaryPath('NIR_Pipelines/NIR_AbsolutePhotometry_Pipeline/PipDef_NIR_Y_AbsolutePhotometry.xml')\n-absolute_photometry_pipeline_def_J = getAuxiliaryPath('NIR_Pipelines/NIR_AbsolutePhotometry_Pipeline/PipDef_NIR_J_AbsolutePhotometry.xml')\n-absolute_photometry_pipeline_def_H = getAuxiliaryPath('NIR_Pipelines/NIR_AbsolutePhotometry_Pipeline/PipDef_NIR_H_AbsolutePhotometry.xml')\n+absolute_photometry_pipeline_def = getAuxiliaryPath('NIR_Pipelines/NIR_AbsolutePhotometry_Pipeline/PipDef_NIR_AbsolutePhotometry.xml')\n+\n \n \n class TestAbsolutePhotometryPackageDef(PackageDefTester):\n@@ -46,13 +45,7 @@ class TestAbsolutePhotometryPipelineScript(PipelineScriptTester):\n \n class TestAbsolutePhotometryPipelineDefY(PipelineDefTester):\n    pipeline_script = absolute_photometry_pipeline_script\n-   pipeline_def = absolute_photometry_pipeline_def_Y\n-   \n-class TestAbsolutePhotometryPipelineDefJ(PipelineDefTester):\n-   pipeline_script = absolute_photometry_pipeline_script\n-   pipeline_def = absolute_photometry_pipeline_def_J\n+   pipeline_def = absolute_photometry_pipeline_def\n    \n-class TestAbsolutePhotometryPipelineDefH(PipelineDefTester):\n-   pipeline_script = absolute_photometry_pipeline_script\n-   pipeline_def = absolute_photometry_pipeline_def_H\n+\n \n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/tests/python/NIR_Baseline_Pipeline_test.py": [
                        [
                            "@@ -18,9 +18,9 @@\n #\n \n \"\"\"\n-File: tests/python/NIR_ProcessField_TU_Pipeline_test.py\n+File: tests/python/NIR_Baseline_Pipeline_test.py\n \n-Created on: 26/02/2021\n+Created on: 09/08/2023\n Author: mfrailis\n \"\"\"\n \n@@ -31,31 +31,23 @@ from ST_PipelineUnitTesting.PipelineScriptTester import PipelineScriptTester\n from ST_PipelineUnitTesting.PipelineDefTester import PipelineDefTester\n \n \n-process_field_package_def = getAuxiliaryPath('NIR_Pipelines/PackageDef_NIR.py')\n-process_field_pipeline_script = getAuxiliaryPath('NIR_Pipelines/NIR_ProcessField_Pipeline/PipScript_NIR_ProcessField.py')\n-process_field_pipeline_def_Y = getAuxiliaryPath('NIR_Pipelines/NIR_ProcessField_Pipeline/PipDef_NIR_Y_ProcessField_TU.xml')\n-process_field_pipeline_def_J = getAuxiliaryPath('NIR_Pipelines/NIR_ProcessField_Pipeline/PipDef_NIR_J_ProcessField_TU.xml')\n-process_field_pipeline_def_H = getAuxiliaryPath('NIR_Pipelines/NIR_ProcessField_Pipeline/PipDef_NIR_H_ProcessField_TU.xml')\n+baseline_package_def = getAuxiliaryPath('NIR_Pipelines/PackageDef_NIR.py')\n+baseline_pipeline_script = getAuxiliaryPath('NIR_Pipelines/NIR_Baseline_Pipeline/PipScript_NIR_Baseline.py')\n+baseline_pipeline_def = getAuxiliaryPath('NIR_Pipelines/NIR_Baseline_Pipeline/PipDef_NIR_Baseline.xml')\n \n \n-class TestProcessFieldPackageDef(PackageDefTester):\n-   package_def = process_field_package_def\n+class TestMasterDarkPackageDef(PackageDefTester):\n+   package_def = baseline_package_def\n+\n+class TestMasterDarkPipelineScript(PipelineScriptTester):\n+   package_def = baseline_package_def\n+   pipeline_script = baseline_pipeline_script\n+\n+class TestMasterDarkPipelineDefY(PipelineDefTester):\n+   pipeline_script = baseline_pipeline_script\n+   pipeline_def = baseline_pipeline_def\n \n-class TestProcessFieldPipelineScript(PipelineScriptTester):\n-   package_def = process_field_package_def\n-   pipeline_script = process_field_pipeline_script\n \n-class TestProcessFieldPipelineDefY(PipelineDefTester):\n-   pipeline_script = process_field_pipeline_script\n-   pipeline_def = process_field_pipeline_def_Y\n-   \n-class TestProcessFieldPipelineDefJ(PipelineDefTester):\n-   pipeline_script = process_field_pipeline_script\n-   pipeline_def = process_field_pipeline_def_J\n-   \n-class TestProcessFieldPipelineDefH(PipelineDefTester):\n-   pipeline_script = process_field_pipeline_script\n-   pipeline_def = process_field_pipeline_def_H\n \n \n \n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/tests/python/NIR_DistortionModel_Pipeline_test.py": [
                        [
                            "@@ -33,9 +33,7 @@ from ST_PipelineUnitTesting.PipelineDefTester import PipelineDefTester\n \n distortion_model_package_def = getAuxiliaryPath('NIR_Pipelines/PackageDef_NIR.py')\n distortion_model_pipeline_script = getAuxiliaryPath('NIR_Pipelines/NIR_DistortionModel_Pipeline/PipScript_NIR_DistortionModel.py')\n-distortion_model_pipeline_def_Y = getAuxiliaryPath('NIR_Pipelines/NIR_DistortionModel_Pipeline/PipDef_NIR_Y_DistortionModel.xml')\n-distortion_model_pipeline_def_J = getAuxiliaryPath('NIR_Pipelines/NIR_DistortionModel_Pipeline/PipDef_NIR_J_DistortionModel.xml')\n-distortion_model_pipeline_def_H = getAuxiliaryPath('NIR_Pipelines/NIR_DistortionModel_Pipeline/PipDef_NIR_H_DistortionModel.xml')\n+distortion_model_pipeline_def = getAuxiliaryPath('NIR_Pipelines/NIR_DistortionModel_Pipeline/PipDef_NIR_DistortionModel.xml')\n \n \n class TestDistortionModelPackageDef(PackageDefTester):\n@@ -47,15 +45,9 @@ class TestDistortionModelPipelineScript(PipelineScriptTester):\n \n class TestDistortionModelPipelineDefY(PipelineDefTester):\n    pipeline_script = distortion_model_pipeline_script\n-   pipeline_def = distortion_model_pipeline_def_Y\n+   pipeline_def = distortion_model_pipeline_def\n    \n-class TestDistortionModelPipelineDefJ(PipelineDefTester):\n-   pipeline_script = distortion_model_pipeline_script\n-   pipeline_def = distortion_model_pipeline_def_J\n-   \n-class TestDistortionModelPipelineDefH(PipelineDefTester):\n-   pipeline_script = distortion_model_pipeline_script\n-   pipeline_def = distortion_model_pipeline_def_H\n+\n \n \n \n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/tests/python/NIR_MasterDark_Pipeline_test.py": [
                        [
                            "@@ -33,9 +33,7 @@ from ST_PipelineUnitTesting.PipelineDefTester import PipelineDefTester\n \n master_dark_package_def = getAuxiliaryPath('NIR_Pipelines/PackageDef_NIR.py')\n master_dark_pipeline_script = getAuxiliaryPath('NIR_Pipelines/NIR_MasterDark_Pipeline/PipScript_NIR_MasterDark.py')\n-master_dark_pipeline_def_Y = getAuxiliaryPath('NIR_Pipelines/NIR_MasterDark_Pipeline/PipDef_NIR_Y_MasterDark.xml')\n-master_dark_pipeline_def_J = getAuxiliaryPath('NIR_Pipelines/NIR_MasterDark_Pipeline/PipDef_NIR_J_MasterDark.xml')\n-master_dark_pipeline_def_H = getAuxiliaryPath('NIR_Pipelines/NIR_MasterDark_Pipeline/PipDef_NIR_H_MasterDark.xml')\n+master_dark_pipeline_def = getAuxiliaryPath('NIR_Pipelines/NIR_MasterDark_Pipeline/PipDef_NIR_MasterDark.xml')\n \n \n class TestMasterDarkPackageDef(PackageDefTester):\n@@ -47,15 +45,9 @@ class TestMasterDarkPipelineScript(PipelineScriptTester):\n \n class TestMasterDarkPipelineDefY(PipelineDefTester):\n    pipeline_script = master_dark_pipeline_script\n-   pipeline_def = master_dark_pipeline_def_Y\n-   \n-class TestMasterDarkPipelineDefJ(PipelineDefTester):\n-   pipeline_script = master_dark_pipeline_script\n-   pipeline_def = master_dark_pipeline_def_J\n-   \n-class TestMasterDarkPipelineDefH(PipelineDefTester):\n-   pipeline_script = master_dark_pipeline_script\n-   pipeline_def = master_dark_pipeline_def_H\n+   pipeline_def = master_dark_pipeline_def\n+\n+\n \n \n \n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/tests/python/NIR_MasterFlat_Pipeline_test.py": [
                        [
                            "@@ -33,9 +33,7 @@ from ST_PipelineUnitTesting.PipelineDefTester import PipelineDefTester\n \n master_flat_package_def = getAuxiliaryPath('NIR_Pipelines/PackageDef_NIR.py')\n master_flat_pipeline_script = getAuxiliaryPath('NIR_Pipelines/NIR_MasterFlat_Pipeline/PipScript_NIR_MasterFlat.py')\n-master_flat_pipeline_def_Y = getAuxiliaryPath('NIR_Pipelines/NIR_MasterFlat_Pipeline/PipDef_NIR_Y_MasterFlat.xml')\n-master_flat_pipeline_def_J = getAuxiliaryPath('NIR_Pipelines/NIR_MasterFlat_Pipeline/PipDef_NIR_J_MasterFlat.xml')\n-master_flat_pipeline_def_H = getAuxiliaryPath('NIR_Pipelines/NIR_MasterFlat_Pipeline/PipDef_NIR_H_MasterFlat.xml')\n+master_flat_pipeline_def = getAuxiliaryPath('NIR_Pipelines/NIR_MasterFlat_Pipeline/PipDef_NIR_MasterFlat.xml')\n \n \n class TestMasterFlatPackageDef(PackageDefTester):\n@@ -47,15 +45,8 @@ class TestMasterFlatPipelineScript(PipelineScriptTester):\n \n class TestMasterFlatPipelineDefY(PipelineDefTester):\n    pipeline_script = master_flat_pipeline_script\n-   pipeline_def = master_flat_pipeline_def_Y\n-   \n-class TestMasterFlatPipelineDefJ(PipelineDefTester):\n-   pipeline_script = master_flat_pipeline_script\n-   pipeline_def = master_flat_pipeline_def_J\n-   \n-class TestMasterFlatPipelineDefH(PipelineDefTester):\n-   pipeline_script = master_flat_pipeline_script\n-   pipeline_def = master_flat_pipeline_def_H\n+   pipeline_def = master_flat_pipeline_def\n+\n \n \n \n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/tests/python/NIR_ProcessField_Background_test.py": [
                        [
                            "@@ -33,9 +33,8 @@ from ST_PipelineUnitTesting.PipelineDefTester import PipelineDefTester\n \n process_field_package_def = getAuxiliaryPath('NIR_Pipelines/PackageDef_NIR.py')\n process_field_pipeline_script = getAuxiliaryPath('NIR_Pipelines/NIR_ProcessField_Background_Pipeline/PipScript_NIR_ProcessField_Background.py')\n-process_field_pipeline_def_Y = getAuxiliaryPath('NIR_Pipelines/NIR_ProcessField_Background_Pipeline/PipDef_NIR_Y_ProcessField_Background.xml')\n-process_field_pipeline_def_J = getAuxiliaryPath('NIR_Pipelines/NIR_ProcessField_Background_Pipeline/PipDef_NIR_J_ProcessField_Background.xml')\n-process_field_pipeline_def_H = getAuxiliaryPath('NIR_Pipelines/NIR_ProcessField_Background_Pipeline/PipDef_NIR_H_ProcessField_Background.xml')\n+process_field_pipeline_def = getAuxiliaryPath('NIR_Pipelines/NIR_ProcessField_Background_Pipeline/PipDef_NIR_ProcessField_Background.xml')\n+\n \n \n class TestProcessFieldPackageDef(PackageDefTester):\n@@ -47,15 +46,9 @@ class TestProcessFieldPipelineScript(PipelineScriptTester):\n \n class TestProcessFieldPipelineDefY(PipelineDefTester):\n    pipeline_script = process_field_pipeline_script\n-   pipeline_def = process_field_pipeline_def_Y\n-   \n-class TestProcessFieldPipelineDefJ(PipelineDefTester):\n-   pipeline_script = process_field_pipeline_script\n-   pipeline_def = process_field_pipeline_def_J\n+   pipeline_def = process_field_pipeline_def\n    \n-class TestProcessFieldPipelineDefH(PipelineDefTester):\n-   pipeline_script = process_field_pipeline_script\n-   pipeline_def = process_field_pipeline_def_H\n+\n \n \n \n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/tests/python/NIR_ProcessField_Pipeline_test.py": [
                        [
                            "@@ -33,9 +33,7 @@ from ST_PipelineUnitTesting.PipelineDefTester import PipelineDefTester\n \n process_field_package_def = getAuxiliaryPath('NIR_Pipelines/PackageDef_NIR.py')\n process_field_pipeline_script = getAuxiliaryPath('NIR_Pipelines/NIR_ProcessField_Pipeline/PipScript_NIR_ProcessField.py')\n-process_field_pipeline_def_Y = getAuxiliaryPath('NIR_Pipelines/NIR_ProcessField_Pipeline/PipDef_NIR_Y_ProcessField.xml')\n-process_field_pipeline_def_J = getAuxiliaryPath('NIR_Pipelines/NIR_ProcessField_Pipeline/PipDef_NIR_J_ProcessField.xml')\n-process_field_pipeline_def_H = getAuxiliaryPath('NIR_Pipelines/NIR_ProcessField_Pipeline/PipDef_NIR_H_ProcessField.xml')\n+process_field_pipeline_def = getAuxiliaryPath('NIR_Pipelines/NIR_ProcessField_Pipeline/PipDef_NIR_ProcessField.xml')\n \n \n class TestProcessFieldPackageDef(PackageDefTester):\n@@ -45,17 +43,11 @@ class TestProcessFieldPipelineScript(PipelineScriptTester):\n    package_def = process_field_package_def\n    pipeline_script = process_field_pipeline_script\n \n-class TestProcessFieldPipelineDefY(PipelineDefTester):\n+class TestProcessFieldPipelineDef(PipelineDefTester):\n    pipeline_script = process_field_pipeline_script\n-   pipeline_def = process_field_pipeline_def_Y\n+   pipeline_def = process_field_pipeline_def\n    \n-class TestProcessFieldPipelineDefJ(PipelineDefTester):\n-   pipeline_script = process_field_pipeline_script\n-   pipeline_def = process_field_pipeline_def_J\n-   \n-class TestProcessFieldPipelineDefH(PipelineDefTester):\n-   pipeline_script = process_field_pipeline_script\n-   pipeline_def = process_field_pipeline_def_H\n+\n \n \n \n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/tests/python/NIR_ProcessField_SelfCal_test.py": [
                        [
                            "@@ -33,9 +33,7 @@ from ST_PipelineUnitTesting.PipelineDefTester import PipelineDefTester\n \n selfCal_process_field_package_def = getAuxiliaryPath('NIR_Pipelines/PackageDef_NIR.py')\n selfCal_process_field_pipeline_script = getAuxiliaryPath('NIR_Pipelines/NIR_ProcessField_Pipeline/PipScript_NIR_ProcessFieldSelfCal.py')\n-selfCal_process_field_pipeline_def_Y = getAuxiliaryPath('NIR_Pipelines/NIR_ProcessField_Pipeline/PipDef_NIR_Y_ProcessFieldSelfCal.xml')\n-selfCal_process_field_pipeline_def_J = getAuxiliaryPath('NIR_Pipelines/NIR_ProcessField_Pipeline/PipDef_NIR_J_ProcessFieldSelfCal.xml')\n-selfCal_process_field_pipeline_def_H = getAuxiliaryPath('NIR_Pipelines/NIR_ProcessField_Pipeline/PipDef_NIR_H_ProcessFieldSelfCal.xml')\n+selfCal_process_field_pipeline_def = getAuxiliaryPath('NIR_Pipelines/NIR_ProcessField_Pipeline/PipDef_NIR_ProcessFieldSelfCal.xml')\n \n \n class TestProcessFieldPackageDef(PackageDefTester):\n@@ -47,15 +45,9 @@ class TestProcessFieldPipelineScript(PipelineScriptTester):\n \n class TestProcessFieldPipelineDefY(PipelineDefTester):\n    pipeline_script = selfCal_process_field_pipeline_script\n-   pipeline_def = selfCal_process_field_pipeline_def_Y\n-   \n-class TestProcessFieldPipelineDefJ(PipelineDefTester):\n-   pipeline_script = selfCal_process_field_pipeline_script\n-   pipeline_def = selfCal_process_field_pipeline_def_J\n-   \n-class TestProcessFieldPipelineDefH(PipelineDefTester):\n-   pipeline_script = selfCal_process_field_pipeline_script\n-   pipeline_def = selfCal_process_field_pipeline_def_H\n+   pipeline_def = selfCal_process_field_pipeline_def\n+\n+\n \n \n \n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "NIR_IAL_Pipelines/tests/python/NIR_SelfCalib_Pipeline_test.py": [
                        [
                            "@@ -33,9 +33,7 @@ from ST_PipelineUnitTesting.PipelineDefTester import PipelineDefTester\n \n self_calib_package_def = getAuxiliaryPath('NIR_Pipelines/PackageDef_NIR.py')\n self_calib_pipeline_script = getAuxiliaryPath('NIR_Pipelines/NIR_SelfCalib_Pipeline/PipScript_NIR_SelfCalib.py')\n-self_calib_pipeline_def_Y = getAuxiliaryPath('NIR_Pipelines/NIR_SelfCalib_Pipeline/PipDef_NIR_Y_SelfCalib.xml')\n-self_calib_pipeline_def_J = getAuxiliaryPath('NIR_Pipelines/NIR_SelfCalib_Pipeline/PipDef_NIR_J_SelfCalib.xml')\n-self_calib_pipeline_def_H = getAuxiliaryPath('NIR_Pipelines/NIR_SelfCalib_Pipeline/PipDef_NIR_H_SelfCalib.xml')\n+self_calib_pipeline_def = getAuxiliaryPath('NIR_Pipelines/NIR_SelfCalib_Pipeline/PipDef_NIR_SelfCalib.xml')\n \n \n class TestSelfCalibPackageDef(PackageDefTester):\n@@ -47,15 +45,9 @@ class TestSelfCalibPipelineScript(PipelineScriptTester):\n \n class TestSelfCalibPipelineDefY(PipelineDefTester):\n    pipeline_script = self_calib_pipeline_script\n-   pipeline_def = self_calib_pipeline_def_Y\n+   pipeline_def = self_calib_pipeline_def\n    \n-class TestSelfCalibPipelineDefJ(PipelineDefTester):\n-   pipeline_script = self_calib_pipeline_script\n-   pipeline_def = self_calib_pipeline_def_J\n-   \n-class TestSelfCalibPipelineDefH(PipelineDefTester):\n-   pipeline_script = self_calib_pipeline_script\n-   pipeline_def = self_calib_pipeline_def_H\n+\n \n \n \n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ]
                    ],
                    "README.md": [
                        [
                            "@@ -4,12 +4,19 @@\n \n Project containing the NIR IAL pipeline definitions, package definitions and pipeline scripts for the science and the calibration pipelines:\n \n+- **NIR_Baseline_Pipeline**: pipeline to be run for validation and checking purposes. It is dedicated\n+to CALBLOCK-PV-014 to generate the baseline map\n+- **NIR_BadPixel_Pipeline**: set of pipelines computing all bad pixels favours and generating a single\n+bad pixel mask which includes all flavours\n+- **NIR_NonLinearity_Pipeline**: calibration pipeline estimating a new non-linearity model from \n+dedicated NISP acquisitions performed in engineering mode\n - **NIR_MasterDark_Pipeline**: pipeline which requires in input a list of NIR raw dark frames and producing a master dark frame\n - **NIR_MasterFlat_Pipeline**: pipeline which requires in input a list of NIR raw flat frames and producing a master flat frame\n-- **NIR_SelfCalib_Pipeline**: reads a list of exposures in the Self-Calibration Field and estimate the large scale flat field corrections.\n-- **NIR_AbsolutePhotometry_Pipeline**: NIR calibration pipeline computes inverse values PHOTFNU, ZPAB, ZPVEGA along with their uncertainties\n - **NIR_DistortionModel_Pipeline**: pipeline which requires as input the self-calibration exposures, for just one filter, and producing a model of geometric distortions. This product is used as a pre-solution for the Astrometric calibration step in the NIR_ProcessField pipeline\n-- **NIR_Persistence_Pipeline**: TODO\n+- **NIR_SelfCalib_Pipeline**: reads a list of exposures in the Self-Calibration Field and estimate the large scale flat field corrections.\n+- **NIR_AbsolutePhotometry_Pipeline**: calibration pipeline which computes inverse values PHOTFNU, ZPAB, ZPVEGA along with their uncertainties\n+- **NIR_Persistence_Pipeline**: calibration pipeline which computes the persistence charge image of\n+each NISP exposure acquired\n - **NIR_ProcessField_Pipeline**: NIR operational scientific pipeline, processing an entire observation ID (4 dithers of a single filter)\n   and requiring the VIS stack catalog as input, in order to perform the astrometric calibration.\n   As output the pipeline produces NIR calibrated frames, the corresponding PSFs and background models and the corresponding calibrated catalogs, \n",
                            "Merge branch 'mfrailis/last_pv_updates' into 'develop'",
                            "Marco Frailis",
                            "2023-08-09T20:09:15.000+00:00",
                            "6f6eef17ab3969df5ef4681b67dcb815d0391b79"
                        ],
                        [
                            "@@ -1,5 +1,7 @@\n # NIR_IAL_Pipelines\n \n+[![pipeline status](https://gitlab.euclid-sgs.uk/PF-NIR/NIR_IAL_Pipelines/badges/develop/pipeline.svg)](https://gitlab.euclid-sgs.uk/PF-NIR/NIR_IAL_Pipelines/-/commits/develop)\n+\n Project containing the NIR IAL pipeline definitions, package definitions and pipeline scripts for the science and the calibration pipelines:\n \n - **NIR_MasterDark_Pipeline**: pipeline which requires in input a list of NIR raw dark frames and producing a master dark frame\n",
                            "Merge branch 'DM92_update' into 'develop'",
                            "Thomas Gasparetto",
                            "2023-07-03T09:40:32.000+00:00",
                            "2071ea55716d41f9de141db558789bdee79cbbc1"
                        ],
                        [
                            "@@ -1,5 +1,7 @@\n # NIR_IAL_Pipelines\n \n+[![pipeline status](https://gitlab.euclid-sgs.uk/PF-NIR/NIR_IAL_Pipelines/badges/develop/pipeline.svg)](https://gitlab.euclid-sgs.uk/PF-NIR/NIR_IAL_Pipelines/-/commits/develop)\n+\n Project containing the NIR IAL pipeline definitions, package definitions and pipeline scripts for the science and the calibration pipelines:\n \n - **NIR_MasterDark_Pipeline**: pipeline which requires in input a list of NIR raw dark frames and producing a master dark frame\n",
                            "update to DM 9.2.0, Elements, jenkins, PipelineChecker. Adding CI file",
                            "Thomas Gasparetto",
                            "2023-07-03T09:40:32.000+00:00",
                            "c836a6652fe083eff2f72bdf00e1f1ab80dbc580"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_ProcessField_Background_Pipeline/PipDef_NIR_J_ProcessField_Background.xml": [
                        [
                            "@@ -1,193 +0,0 @@\n-<tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_J-PROCESSFIELD_BACKGROUND-CAT_DEV_2022.03.29</Id>\n-    <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n-    <PipelineScriptPath>NIR_ProcessField_Background_Pipeline/PipScript_NIR_ProcessField_Background.py</PipelineScriptPath>\n-    <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n-    <InputDataSetPlan>\n-        <KeyProductInputDataPlan>\n-            <InputPortName>dithers</InputPortName>\n-            <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"SCIENCE\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"J\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"J\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>4</Max>\n-            </Cardinality>\n-        </KeyProductInputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>nirConfig</InputPortName>\n-            <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>mdb</InputPortName>\n-            <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\",\"NISPH_Outfld_Teles_straylight*\"</FilesToInclude>\n-            </FileFiltering>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>presolution</InputPortName>\n-            <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>OPTIONAL</Optionality>\n-                <Min>0</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterdark</InputPortName>\n-            <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_J\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterflat</InputPortName>\n-            <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_J\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>largeflat</InputPortName>\n-            <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(largeflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (largeflat.Data.Filter.Name.FilterName == \"NIR_J\") AND (largeflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>badpixel</InputPortName>\n-            <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>obsCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(obsCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (obsCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>refCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(refCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (refCatalog.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>detectorsPhotomOffsets</InputPortName>\n-            <DataProductType>DpdNirRelPhotoDetCalibration</DataProductType>\n-            <InputQuerySpecPlan>(detectorsPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (detectorsPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_J\") AND (detectorsPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-        <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>tilesPhotomOffsets</InputPortName>\n-            <DataProductType>DpdNirRelPhotoFieldCalibration</DataProductType>\n-            <InputQuerySpecPlan>(tilesPhotomOffsets.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (tilesPhotomOffsets.Data.Filter.Name.FilterName == \"NIR_J\") AND (tilesPhotomOffsets.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>absPhotoData</InputPortName>\n-            <DataProductType>DpdNirAbsPhotoCalibration</DataProductType>\n-            <InputQuerySpecPlan>(absPhotoData.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (absPhotoData.Data.Filter.Name.FilterName == \"NIR_J\")  AND (absPhotoData.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>relExposure</InputPortName>\n-            <DataProductType>DpdNirRelPhotoExpCalibration</DataProductType>\n-            <InputQuerySpecPlan>(relExposure.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (relExposure.Data.Filter.Name.FilterName == \"NIR_H\")  AND (relExposure.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-    </InputDataSetPlan> \n-    <OutputDataSet>\n-        <OutputDataProduct>\n-            <OutputPortName>stk_image_xml</OutputPortName>\n-            <DataProductType>DpdNirStackedFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>cal_images_xml</OutputPortName>\n-            <DataProductType>DpdNirCalibratedFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>stk_catalog_xml</OutputPortName>\n-            <DataProductType>DpdNirStackedFrameCatalog</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>cal_catalogs_xml</OutputPortName>\n-            <DataProductType>DpdNirCalibratedFrameCatalog</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-    </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n-</tsk1:PipelineDef>\n",
                            "Updating the ProcessField_Background pipeline definition",
                            "Marco Frailis",
                            "2023-08-09T20:02:48.000+00:00",
                            "df68a46abc3b52f0c6e2731c65697274ebb1a208"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_SelfCalib_Pipeline/PipDef_NIR_J_SelfCalib.xml": [
                        [
                            "@@ -1,115 +0,0 @@\n-<tsk1:PipelineDef xmlns:tsk1=\"http://ecdm.euclid-ec.org/schema/interfaces/sys/orc\">\n-    <Id>PipDef_NIR_J-CALIB_LARGESCALEFLAT_DEV_2022.03.29</Id>\n-    <ArchiveProcessingFlag>PROCESSING_ONLY</ArchiveProcessingFlag>\n-    <PipelineScriptPath>NIR_SelfCalib_Pipeline/PipScript_NIR_SelfCalib.py</PipelineScriptPath>\n-    <PipelineRootPath>@ELEMENTS_BASE_DIR@/@PROJECT_NAME@/@PROJECT_VERSION@/InstallArea/@BINARY_TAG@/auxdir/NIR_Pipelines/</PipelineRootPath>\n-    <InputDataSetPlan>\n-        <KeyProductInputDataPlan>\n-            <InputPortName>dithers</InputPortName>\n-            <DataProductType>DpdNispRawFrame</DataProductType>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ObservationSequence.ObservationId == \"UNKNOWN\") AND (dithers.Data.ImgType.Category.ProductCategory == \"CALIB\") AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"J\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>(dithers.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (dithers.Data.ImgSpatialFootprint.Polygon INTERSECT(UNKNOWN,UNKNOWN) POLYGON(UNKNOWN)) AND (dithers.Data.FilterWheelPos.FilterWheelPosition == \"J\") AND (dithers.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>4</Max>\n-            </Cardinality>\n-        </KeyProductInputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>nirConfig</InputPortName>\n-            <DataProductType>DpdNirConfigurationSet</DataProductType>\n-            <InputQuerySpecPlan>nirConfig.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>mdb</InputPortName>\n-            <DataProductType>DpdMdbDataBase</DataProductType>\n-            <InputQuerySpecPlan>mdb.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <FileFiltering>\n-                <FilesToInclude>\"EUC_NISP_H2RG-NONLINEARITY*\",\"EUC_NISP-P*\",\"EUC_NISP_Satu*\",\"EUC_NISP_SINGLE*\",\"EUC_NIR_DISTOR*\",\"NISP_Det_PSF*\"</FilesToInclude>\n-            </FileFiltering>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>presolution</InputPortName>\n-            <DataProductType>DpdNirGeometricDistortions</DataProductType>\n-            <InputQuerySpecPlan>presolution.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>OPTIONAL</Optionality>\n-                <Min>0</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterdark</InputPortName>\n-            <DataProductType>DpdNirMasterDarkFrame</DataProductType>\n-            <!--  MasterDark must have same exposure time for filter, we currently use filter to select, only one instance ingested  -->\n-            <InputQuerySpecPlan>(masterdark.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterdark.Data.Filter.Name.FilterName == \"NIR_J\") AND (masterdark.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>masterflat</InputPortName>\n-            <DataProductType>DpdNirMasterFlatFrame</DataProductType>\n-            <InputQuerySpecPlan>(masterflat.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (masterflat.Data.Filter.Name.FilterName == \"NIR_J\") AND (masterflat.Header.DataSetRelease == \"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>badpixel</InputPortName>\n-            <DataProductType>DpdNirBadPixelMask</DataProductType>\n-            <InputQuerySpecPlan>badpixel.Header.ProductId.ObjectId == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <InputQuerySpecPlan>badpixel.Header.DataSetRelease == \"UNKNOWN\"</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-        <InputDataPlan>\n-            <InputPortName>sourceCatalog</InputPortName>\n-            <DataProductType>DpdTrueUniverseOutput</DataProductType>\n-            <InputQuerySpecPlan>(sourceCatalog.Header.ManualValidationStatus.ManualValidationStatus != \"INVALID\") AND (sourceCatalog.Data.Release==\"UNKNOWN\")</InputQuerySpecPlan>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </InputDataPlan>\n-    </InputDataSetPlan> \n-    <OutputDataSet>\n-        <OutputDataProduct>\n-            <OutputPortName>largeflat</OutputPortName>\n-            <DataProductType>DpdNirLargeFlatFrame</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-        <OutputDataProduct>\n-            <OutputPortName>detcoeff</OutputPortName>\n-            <DataProductType>DpdNirRelPhotoDetCalibration</DataProductType>\n-            <Cardinality>\n-                <Optionality>MANDATORY</Optionality>\n-                <Min>1</Min>\n-                <Max>1</Max>\n-            </Cardinality>\n-        </OutputDataProduct>\n-    </OutputDataSet>\n-    <EstimatedWorkdirSizeGB>2</EstimatedWorkdirSizeGB>\n-</tsk1:PipelineDef>\n",
                            "First set of updates to the pipeline confgurations",
                            "Marco Frailis",
                            "2023-08-09T16:08:24.000+00:00",
                            "3b320c03b4e8940500253e078cb2afb087747ac4"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_AbsolutePhotometry_Pipeline/PipScript_NIR_AbsolutePhotometry.py": [
                        [
                            "@@ -2,35 +2,43 @@ from euclidwf.framework.workflow_dsl import pipeline, parallel\n \n from PackageDef_NIR import (\n     runInitialize, badPixMasking, saturation, nonLinearity,\n-    darkSubtract, smallFlatCorrect, doAstromAbsCal, makeAbsoluteCalib)\n+    darkSubtract, smallFlatCorrect, largeFlatCorrect, doAstromAbsCal, makeAbsoluteCalib,\n+    psfForDitherAbsCal)\n \n @parallel(iterable=\"ditherExposure\")\n-def nir_calib_dither(ditherExposure, mdb, masterdark, masterflat, badpixel, config):\n+def nir_calib_dither(ditherExposure, mdb, masterdark, masterflat, badpixel, config, largeflat):\n     initExposure = runInitialize(infile=ditherExposure, mdbfile=mdb)\n     badPixelMasked = badPixMasking(infile=initExposure, xmlfile=badpixel)\n     satExposure = saturation(infile=badPixelMasked, xmlfile=mdb)\n     nonlinExposure = nonLinearity(infile=satExposure, xmlfile=mdb, config=config)\n     darkExposure = darkSubtract(infile=nonlinExposure, masterdark=masterdark)\n-    flatExposure = smallFlatCorrect(infile=darkExposure, masterflat=masterflat)\n-    return flatExposure\n+    smallflatExposure = smallFlatCorrect(infile=darkExposure, masterflat=masterflat)\n+    largeflatExposure = largeFlatCorrect(infile=smallflatExposure, flat=largeflat)\n+    return largeflatExposure\n \n \n @pipeline(outputs=('abscal'))\n def nir_pipeline(nirConfig, dithers, mdb, masterdark, masterflat, largeflat, badpixel,\n                   sourceCatalog, presolution, detectorsPhotomOffsets):\n \n-    flats = nir_calib_dither(ditherExposure=dithers, mdb=mdb,\n+    largeflats = nir_calib_dither(ditherExposure=dithers, mdb=mdb,\n                              masterdark=masterdark, masterflat=masterflat, \n-                             badpixel=badpixel, config=nirConfig)\n+                             badpixel=badpixel, config=nirConfig, \n+                             largeflat=largeflat)\n \n-    calibDithers_preLargeScale, astrometricCatalogs, fullcatalog = doAstromAbsCal(listofdithers=flats,\n+    listofpsflists_dither = psfForDitherAbsCal(listofimages=largeflats,\n+                                         mdbfile=mdb,\n+                                         config=nirConfig)\n+\n+    calibDithers_preLargeScale, astrometricCatalogs, fullcatalog = doAstromAbsCal(listofdithers=largeflats,\n                                   ref_catalog=sourceCatalog,\n+                                  listofpsflists=listofpsflists_dither,\n                                   presolution=presolution,\n                                   config=nirConfig)\n \n     abscal = makeAbsoluteCalib(inlist=astrometricCatalogs,\n                                mdbfile=mdb,\n-                               inflat=largeflat,\n+                               listofpsflists=listofpsflists_dither,\n                                indetcoeff=detectorsPhotomOffsets,\n                                standard_catalog=sourceCatalog)\n \n",
                            "Merge branch 'absolute_ph_changes' into 'develop'",
                            "Marco Frailis",
                            "2023-08-04T15:10:16.000+00:00",
                            "d3fb59c554610682a65c027c071bc400d65c743a"
                        ],
                        [
                            "@@ -2,7 +2,7 @@ from euclidwf.framework.workflow_dsl import pipeline, parallel\n \n from PackageDef_NIR import (\n     runInitialize, badPixMasking, saturation, nonLinearity,\n-    darkSubtract, smallFlatCorrect, doAstromAbsCal, makeAbsoluteCalib,\n+    darkSubtract, smallFlatCorrect, largeFlatCorrect, doAstromAbsCal, makeAbsoluteCalib,\n     psfForDitherAbsCal)\n \n @parallel(iterable=\"ditherExposure\")\n",
                            "Fix syntax errors, and missing parameters.  Pipeline now produces inflight PSFs",
                            "Jeffery Jacobson",
                            "2023-07-29T06:41:24.000-07:00",
                            "36b107202d2bc5cb11eee9b0d21720ddf75a35f2"
                        ],
                        [
                            "@@ -38,6 +38,7 @@ def nir_pipeline(nirConfig, dithers, mdb, masterdark, masterflat, largeflat, bad\n \n     abscal = makeAbsoluteCalib(inlist=astrometricCatalogs,\n                                mdbfile=mdb,\n+                               listofpsflists=listofpsflists_dither,\n                                indetcoeff=detectorsPhotomOffsets,\n                                standard_catalog=sourceCatalog)\n \n",
                            "added listofpsflists in makeAbsoluteCalib",
                            "Thomas Gasparetto",
                            "2023-07-18T15:54:33.000+00:00",
                            "f11bd0fadab2d217302b5037c693693028ef2549"
                        ],
                        [
                            "@@ -2,7 +2,8 @@ from euclidwf.framework.workflow_dsl import pipeline, parallel\n \n from PackageDef_NIR import (\n     runInitialize, badPixMasking, saturation, nonLinearity,\n-    darkSubtract, smallFlatCorrect, doAstromAbsCal, makeAbsoluteCalib)\n+    darkSubtract, smallFlatCorrect, doAstromAbsCal, makeAbsoluteCalib,\n+    psfForDitherAbsCal)\n \n @parallel(iterable=\"ditherExposure\")\n def nir_calib_dither(ditherExposure, mdb, masterdark, masterflat, badpixel, config, largeflat):\n@@ -25,8 +26,13 @@ def nir_pipeline(nirConfig, dithers, mdb, masterdark, masterflat, largeflat, bad\n                              badpixel=badpixel, config=nirConfig, \n                              largeflat=largeflat)\n \n+    listofpsflists_dither = psfForDitherAbsCal(listofimages=largeflats,\n+                                         mdbfile=mdb,\n+                                         config=nirConfig)\n+\n     calibDithers_preLargeScale, astrometricCatalogs, fullcatalog = doAstromAbsCal(listofdithers=largeflats,\n                                   ref_catalog=sourceCatalog,\n+                                  listofpsflists=listofpsflists_dither,\n                                   presolution=presolution,\n                                   config=nirConfig)\n \n",
                            "added PSF task to absolute ph pipeline",
                            "Thomas Gasparetto",
                            "2023-07-17T15:58:37.000+00:00",
                            "07d8532b05eb6e8fde8225efe3f4ff2b7e69c4fc"
                        ],
                        [
                            "@@ -5,32 +5,33 @@ from PackageDef_NIR import (\n     darkSubtract, smallFlatCorrect, doAstromAbsCal, makeAbsoluteCalib)\n \n @parallel(iterable=\"ditherExposure\")\n-def nir_calib_dither(ditherExposure, mdb, masterdark, masterflat, badpixel, config):\n+def nir_calib_dither(ditherExposure, mdb, masterdark, masterflat, badpixel, config, largeflat):\n     initExposure = runInitialize(infile=ditherExposure, mdbfile=mdb)\n     badPixelMasked = badPixMasking(infile=initExposure, xmlfile=badpixel)\n     satExposure = saturation(infile=badPixelMasked, xmlfile=mdb)\n     nonlinExposure = nonLinearity(infile=satExposure, xmlfile=mdb, config=config)\n     darkExposure = darkSubtract(infile=nonlinExposure, masterdark=masterdark)\n-    flatExposure = smallFlatCorrect(infile=darkExposure, masterflat=masterflat)\n-    return flatExposure\n+    smallflatExposure = smallFlatCorrect(infile=darkExposure, masterflat=masterflat)\n+    largeflatExposure = largeFlatCorrect(infile=smallflatExposure, flat=largeflat)\n+    return largeflatExposure\n \n \n @pipeline(outputs=('abscal'))\n def nir_pipeline(nirConfig, dithers, mdb, masterdark, masterflat, largeflat, badpixel,\n                   sourceCatalog, presolution, detectorsPhotomOffsets):\n \n-    flats = nir_calib_dither(ditherExposure=dithers, mdb=mdb,\n+    largeflats = nir_calib_dither(ditherExposure=dithers, mdb=mdb,\n                              masterdark=masterdark, masterflat=masterflat, \n-                             badpixel=badpixel, config=nirConfig)\n+                             badpixel=badpixel, config=nirConfig, \n+                             largeflat=largeflat)\n \n-    calibDithers_preLargeScale, astrometricCatalogs, fullcatalog = doAstromAbsCal(listofdithers=flats,\n+    calibDithers_preLargeScale, astrometricCatalogs, fullcatalog = doAstromAbsCal(listofdithers=largeflats,\n                                   ref_catalog=sourceCatalog,\n                                   presolution=presolution,\n                                   config=nirConfig)\n \n     abscal = makeAbsoluteCalib(inlist=astrometricCatalogs,\n                                mdbfile=mdb,\n-                               inflat=largeflat,\n                                indetcoeff=detectorsPhotomOffsets,\n                                standard_catalog=sourceCatalog)\n \n",
                            "moved large scale flat to preprocessing",
                            "Thomas Gasparetto",
                            "2023-07-17T15:46:03.000+00:00",
                            "0b809871ae208edf4445eee1a096c39ae5b61ea3"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/PackageDef_NIR.py": [
                        [
                            "@@ -69,6 +69,15 @@ psfForDither = Executable(command='E-Run NIR_PointSpreadFunction NIR_PSFModellin\n                           outputs=[Output('listofpsflists', content_type='listfile', mime_type='json')],\n                           resources=ComputingResources(cores=1, ram=3.0, walltime=3.0))\n \n+psfForDitherAbsCal = Executable(command='E-Run NIR_PointSpreadFunction NIR_PSFModelling --imagetype=dither --psflistcontent all_dithers --psfex_cpp False',\n+                          inputs=[\n+                                Input('listofimages', content_type='listfile'),\n+                                Input('mdbfile'),\n+                                Input('config')],\n+                          outputs=[Output('listofpsflists', content_type='listfile', mime_type='json')],\n+                          resources=ComputingResources(cores=1, ram=3.0, walltime=3.0))\n+\n+\n doAstrom = Executable(command='E-Run NIR_AstrometricCalibration  NIR_DoastromProgram',\n                       inputs=[Input('listofdithers', content_type='listfile'),\n                               Input('listofpsflists', content_type='listfile'),\n@@ -162,6 +171,7 @@ createScientificDpds = Executable(command='E-Run NIR_Utilities  NIR_CreateScient\n doAstromAbsCal = Executable(command='E-Run NIR_AstrometricCalibration  NIR_DoastromProgram --create-catalogs --create-scamp-plots False --create-check-plots False',\n                             inputs=[Input('listofdithers', content_type='listfile'),\n                                     Input('ref_catalog', content_type='listfile'),\n+                                    Input('listofpsflists', content_type='listfile'),\n                                     Input('presolution', content_type='listfile'),\n                                     Input('config')],\n                             outputs=[Output(\"listofcaldithers\",  content_type=\"listfile\", mime_type=\"json\"),\n@@ -182,8 +192,8 @@ doAstromSelfCal = Executable(command='E-Run NIR_AstrometricCalibration  NIR_Doas\n makeAbsoluteCalib = Executable(command=\"E-Run NIR_AbsolutePhotometry  NIR_ComputeAbsolutePhotometry --colorcorrect No --abmagrange 'TU_MAG_H_2MASS,15.0,18.5'\",\n                              inputs=[Input(\"inlist\", content_type=\"listfile\"),\n                                      Input(\"mdbfile\"),\n-                                     Input(\"inflat\"),\n                                      Input(\"indetcoeff\"),\n+                                     Input(\"listofpsflists\", content_type='listfile'),\n                                      Input(\"standard_catalog\", content_type=\"listfile\")],\n                             outputs=[Output(\"product\")],\n                             resources=ComputingResources(cores=1, ram=3.0, walltime=1.0))\n",
                            "Merge branch 'absolute_ph_changes' into 'develop'",
                            "Marco Frailis",
                            "2023-08-04T15:10:16.000+00:00",
                            "d3fb59c554610682a65c027c071bc400d65c743a"
                        ],
                        [
                            "@@ -17,6 +17,12 @@ runInitialize = Executable(command='E-Run NIR_Init  NIR_runInitialize',\n                            outputs=[Output('outfile', mime_type='fits')],\n                            resources=ComputingResources(cores=1, ram=2.0, walltime=1.0))\n \n+# To be used only for Baseline Map pre-processing\n+runInitializeBaseline = Executable(command='E-Run NIR_Init  NIR_runInitialize --no_trim',\n+                           inputs=[Input('infile'), Input('mdbfile')],\n+                           outputs=[Output('outfile', mime_type='fits')],\n+                           resources=ComputingResources(cores=1, ram=2.0, walltime=1.0))\n+\n badPixMasking = Executable(command='E-Run NIR_BadPixelMasking  maskBadpixels',\n                            inputs=[Input('infile'), Input('xmlfile')],\n                            outputs=[Output('outfile', mime_type='fits')],\n@@ -351,3 +357,8 @@ findHighLowBaselinePixels = Executable(command=\"E-Run NIR_BadPixelMasking findHi\n                             outputs=[Output(\"outfile\")],\n                             resources=ComputingResources(cores=1, ram=4.0, walltime=2.0)\n                            )\n+\n+makeBaseline = Executable(command=\"E-Run NIR_Baseline  makeNirBaseline\",\n+                          inputs=[Input(\"darklist\", content_type=\"listfile\"), Input(\"config\")],\n+                          outputs=[Output(\"outfile\")],\n+                          resources=ComputingResources(cores=1, ram=6.0, walltime=8.0))\n",
                            "Merge branch 'add_baseline_pipeline' into 'develop'",
                            "Marco Frailis",
                            "2023-08-03T07:24:02.000+00:00",
                            "92a42a21a30cc50adf6e12d828f26b9455401e3c"
                        ],
                        [
                            "@@ -63,7 +63,7 @@ psfForDither = Executable(command='E-Run NIR_PointSpreadFunction NIR_PSFModellin\n                           outputs=[Output('listofpsflists', content_type='listfile', mime_type='json')],\n                           resources=ComputingResources(cores=1, ram=3.0, walltime=3.0))\n \n-psfForDitherAbsCal = Executable(command='E-Run NIR_PointSpreadFunction NIR_PSFModelling --imagetype=dither --psfex_cpp False',\n+psfForDitherAbsCal = Executable(command='E-Run NIR_PointSpreadFunction NIR_PSFModelling --imagetype=dither --psflistcontent all_dithers --psfex_cpp False',\n                           inputs=[\n                                 Input('listofimages', content_type='listfile'),\n                                 Input('mdbfile'),\n@@ -165,6 +165,7 @@ createScientificDpds = Executable(command='E-Run NIR_Utilities  NIR_CreateScient\n doAstromAbsCal = Executable(command='E-Run NIR_AstrometricCalibration  NIR_DoastromProgram --create-catalogs --create-scamp-plots False --create-check-plots False',\n                             inputs=[Input('listofdithers', content_type='listfile'),\n                                     Input('ref_catalog', content_type='listfile'),\n+                                    Input('listofpsflists', content_type='listfile'),\n                                     Input('presolution', content_type='listfile'),\n                                     Input('config')],\n                             outputs=[Output(\"listofcaldithers\",  content_type=\"listfile\", mime_type=\"json\"),\n@@ -186,7 +187,7 @@ makeAbsoluteCalib = Executable(command=\"E-Run NIR_AbsolutePhotometry  NIR_Comput\n                              inputs=[Input(\"inlist\", content_type=\"listfile\"),\n                                      Input(\"mdbfile\"),\n                                      Input(\"indetcoeff\"),\n-                                     Input(\"listofpsflists\", content_type='listfile')\n+                                     Input(\"listofpsflists\", content_type='listfile'),\n                                      Input(\"standard_catalog\", content_type=\"listfile\")],\n                             outputs=[Output(\"product\")],\n                             resources=ComputingResources(cores=1, ram=3.0, walltime=1.0))\n",
                            "Fix syntax errors, and missing parameters.  Pipeline now produces inflight PSFs",
                            "Jeffery Jacobson",
                            "2023-07-29T06:41:24.000-07:00",
                            "36b107202d2bc5cb11eee9b0d21720ddf75a35f2"
                        ],
                        [
                            "@@ -234,9 +234,10 @@ persistenceApply = Executable(command='E-Run NIR_Persistence  applyPersistenceMa\n                           outputs=[Output('outfile', mime_type='fits')],\n                           resources=ComputingResources(cores=1, ram=5.0, walltime=1.0))\n \n-makeSelfCalib = Executable(command='E-Run NIR_SelfCalib  NIR_Compute --disableinterpolation 1 --ncoeff 10',\n+makeSelfCalib = Executable(command='E-Run NIR_SelfCalib  NIR_Compute',\n                            inputs=[\n                                 Input('inlist', content_type='listfile'),\n+                                Input('inopt'),\n                                 Input('mdbfile')],\n                            outputs=[Output('outflat'), Output('outdetcoeff')],\n                            resources=ComputingResources(cores=1, ram=4.0, walltime=1.0))\n",
                            "adding nirConfig to makeselfcal task in Self Cal Pipeline",
                            "Thomas Gasparetto",
                            "2023-07-24T16:05:31.000+02:00",
                            "6b5f7d07ae77d3b15d8e22fd155307e96e0c57b8"
                        ],
                        [
                            "@@ -18,7 +18,7 @@ runInitialize = Executable(command='E-Run NIR_Init  NIR_runInitialize',\n                            resources=ComputingResources(cores=1, ram=2.0, walltime=1.0))\n \n # To be used only for Baseline Map pre-processing\n-runInitializeBaseline = Executable(command='E-Run NIR_Init  NIR_runInitializeBaseline',\n+runInitializeBaseline = Executable(command='E-Run NIR_Init  NIR_runInitialize --no_trim',\n                            inputs=[Input('infile'), Input('mdbfile')],\n                            outputs=[Output('outfile', mime_type='fits')],\n                            resources=ComputingResources(cores=1, ram=2.0, walltime=1.0))\n@@ -361,4 +361,4 @@ findHighLowBaselinePixels = Executable(command=\"E-Run NIR_BadPixelMasking findHi\n makeBaseline = Executable(command=\"E-Run NIR_Baseline  makeNirBaseline\",\n                           inputs=[Input(\"darklist\", content_type=\"listfile\"), Input(\"config\")],\n                           outputs=[Output(\"outfile\")],\n-                          resources=ComputingResources(cores=1, ram=10.0, walltime=8.0))\n+                          resources=ComputingResources(cores=1, ram=6.0, walltime=8.0))\n",
                            "update to baseline after INIT update",
                            "Thomas Gasparetto",
                            "2023-07-21T09:51:41.000+00:00",
                            "c7f79858ad4bd2775f00f9596b37644255c33300"
                        ],
                        [
                            "@@ -18,7 +18,7 @@ runInitialize = Executable(command='E-Run NIR_Init  NIR_runInitialize',\n                            resources=ComputingResources(cores=1, ram=2.0, walltime=1.0))\n \n # To be used only for Baseline Map pre-processing\n-runInitializeBaseline = Executable(command='E-Run NIR_Init  NIR_runInitializeBaseline --disabletrimming',\n+runInitializeBaseline = Executable(command='E-Run NIR_Init  NIR_runInitializeBaseline',\n                            inputs=[Input('infile'), Input('mdbfile')],\n                            outputs=[Output('outfile', mime_type='fits')],\n                            resources=ComputingResources(cores=1, ram=2.0, walltime=1.0))\n@@ -359,6 +359,6 @@ findHighLowBaselinePixels = Executable(command=\"E-Run NIR_BadPixelMasking findHi\n                            )\n \n makeBaseline = Executable(command=\"E-Run NIR_Baseline  makeNirBaseline\",\n-                          inputs=[Input(\"baselinelist\", content_type=\"listfile\"), Input(\"config\")],\n+                          inputs=[Input(\"darklist\", content_type=\"listfile\"), Input(\"config\")],\n                           outputs=[Output(\"outfile\")],\n                           resources=ComputingResources(cores=1, ram=10.0, walltime=8.0))\n",
                            "removed useless steps in baseline pipeline. to be tested soon",
                            "Thomas Gasparetto",
                            "2023-07-20T16:23:54.000+02:00",
                            "c71c480afa86f9ff0ebc0d9c4190b3960fa281c1"
                        ],
                        [
                            "@@ -186,6 +186,7 @@ makeAbsoluteCalib = Executable(command=\"E-Run NIR_AbsolutePhotometry  NIR_Comput\n                              inputs=[Input(\"inlist\", content_type=\"listfile\"),\n                                      Input(\"mdbfile\"),\n                                      Input(\"indetcoeff\"),\n+                                     Input(\"listofpsflists\", content_type='listfile')\n                                      Input(\"standard_catalog\", content_type=\"listfile\")],\n                             outputs=[Output(\"product\")],\n                             resources=ComputingResources(cores=1, ram=3.0, walltime=1.0))\n",
                            "added listofpsflists in makeAbsoluteCalib",
                            "Thomas Gasparetto",
                            "2023-07-18T15:54:33.000+00:00",
                            "f11bd0fadab2d217302b5037c693693028ef2549"
                        ],
                        [
                            "@@ -63,6 +63,15 @@ psfForDither = Executable(command='E-Run NIR_PointSpreadFunction NIR_PSFModellin\n                           outputs=[Output('listofpsflists', content_type='listfile', mime_type='json')],\n                           resources=ComputingResources(cores=1, ram=3.0, walltime=3.0))\n \n+psfForDitherAbsCal = Executable(command='E-Run NIR_PointSpreadFunction NIR_PSFModelling --imagetype=dither --psfex_cpp False',\n+                          inputs=[\n+                                Input('listofimages', content_type='listfile'),\n+                                Input('mdbfile'),\n+                                Input('config')],\n+                          outputs=[Output('listofpsflists', content_type='listfile', mime_type='json')],\n+                          resources=ComputingResources(cores=1, ram=3.0, walltime=3.0))\n+\n+\n doAstrom = Executable(command='E-Run NIR_AstrometricCalibration  NIR_DoastromProgram',\n                       inputs=[Input('listofdithers', content_type='listfile'),\n                               Input('listofpsflists', content_type='listfile'),\n",
                            "added PSF task to absolute ph pipeline",
                            "Thomas Gasparetto",
                            "2023-07-17T15:58:37.000+00:00",
                            "07d8532b05eb6e8fde8225efe3f4ff2b7e69c4fc"
                        ],
                        [
                            "@@ -176,7 +176,6 @@ doAstromSelfCal = Executable(command='E-Run NIR_AstrometricCalibration  NIR_Doas\n makeAbsoluteCalib = Executable(command=\"E-Run NIR_AbsolutePhotometry  NIR_ComputeAbsolutePhotometry --colorcorrect No --abmagrange 'TU_MAG_H_2MASS,15.0,18.5'\",\n                              inputs=[Input(\"inlist\", content_type=\"listfile\"),\n                                      Input(\"mdbfile\"),\n-                                     Input(\"inflat\"),\n                                      Input(\"indetcoeff\"),\n                                      Input(\"standard_catalog\", content_type=\"listfile\")],\n                             outputs=[Output(\"product\")],\n",
                            "moved large scale flat to preprocessing",
                            "Thomas Gasparetto",
                            "2023-07-17T15:46:03.000+00:00",
                            "0b809871ae208edf4445eee1a096c39ae5b61ea3"
                        ],
                        [
                            "@@ -153,7 +153,7 @@ createScientificDpds = Executable(command='E-Run NIR_Utilities  NIR_CreateScient\n                                   resources=ComputingResources(cores=1, ram=6.0, walltime=1.0))\n \n # - New executables - #\n-doAstromAbsCal = Executable(command='E-Run NIR_AstrometricCalibration  NIR_DoastromProgram --create-catalogs --use-psf-models False --create-scamp-plots False --create-check-plots False',\n+doAstromAbsCal = Executable(command='E-Run NIR_AstrometricCalibration  NIR_DoastromProgram --create-catalogs --create-scamp-plots False --create-check-plots False',\n                             inputs=[Input('listofdithers', content_type='listfile'),\n                                     Input('ref_catalog', content_type='listfile'),\n                                     Input('presolution', content_type='listfile'),\n@@ -163,7 +163,7 @@ doAstromAbsCal = Executable(command='E-Run NIR_AstrometricCalibration  NIR_Doast\n                                      Output('fullcatalog', mime_type='fits')],\n                             resources=ComputingResources(cores=1, ram=6.0, walltime=24.0))\n \n-doAstromSelfCal = Executable(command='E-Run NIR_AstrometricCalibration  NIR_DoastromProgram --create-catalogs --use-psf-models False',\n+doAstromSelfCal = Executable(command='E-Run NIR_AstrometricCalibration  NIR_DoastromProgram --create-catalogs',\n                              inputs=[Input('listofdithers', content_type='listfile'),\n                                      Input('ref_catalog', content_type='listfile'),\n                                      Input('presolution', content_type='listfile'),\n@@ -182,7 +182,7 @@ makeAbsoluteCalib = Executable(command=\"E-Run NIR_AbsolutePhotometry  NIR_Comput\n                             outputs=[Output(\"product\")],\n                             resources=ComputingResources(cores=1, ram=3.0, walltime=1.0))\n \n-doAstromDistortion = Executable(command='E-Run NIR_AstrometricCalibration  NIR_DoastromProgram --create-distortion-model --use-psf-models False --use-presolution False',\n+doAstromDistortion = Executable(command='E-Run NIR_AstrometricCalibration  NIR_DoastromProgram --create-distortion-model',\n                       inputs=[Input('listofdithers', content_type='listfile'),\n                               Input('ref_catalog', content_type='listfile'),\n                               Input('presolution', content_type='listfile'),\n",
                            "Merge branch 'feature_astrometry_ports' into 'develop'",
                            "Thomas Gasparetto",
                            "2023-07-07T11:53:54.000+00:00",
                            "d0a4c0eefd0d885318e8216cff099102dbf8b049"
                        ],
                        [
                            "@@ -153,7 +153,7 @@ createScientificDpds = Executable(command='E-Run NIR_Utilities  NIR_CreateScient\n                                   resources=ComputingResources(cores=1, ram=6.0, walltime=1.0))\n \n # - New executables - #\n-doAstromAbsCal = Executable(command='E-Run NIR_AstrometricCalibration  NIR_DoastromProgram --create-catalogs --use-psf-models False --create-scamp-plots False --create-check-plots False',\n+doAstromAbsCal = Executable(command='E-Run NIR_AstrometricCalibration  NIR_DoastromProgram --create-catalogs --create-scamp-plots False --create-check-plots False',\n                             inputs=[Input('listofdithers', content_type='listfile'),\n                                     Input('ref_catalog', content_type='listfile'),\n                                     Input('presolution', content_type='listfile'),\n@@ -163,7 +163,7 @@ doAstromAbsCal = Executable(command='E-Run NIR_AstrometricCalibration  NIR_Doast\n                                      Output('fullcatalog', mime_type='fits')],\n                             resources=ComputingResources(cores=1, ram=6.0, walltime=24.0))\n \n-doAstromSelfCal = Executable(command='E-Run NIR_AstrometricCalibration  NIR_DoastromProgram --create-catalogs --use-psf-models False',\n+doAstromSelfCal = Executable(command='E-Run NIR_AstrometricCalibration  NIR_DoastromProgram --create-catalogs',\n                              inputs=[Input('listofdithers', content_type='listfile'),\n                                      Input('ref_catalog', content_type='listfile'),\n                                      Input('presolution', content_type='listfile'),\n@@ -182,7 +182,7 @@ makeAbsoluteCalib = Executable(command=\"E-Run NIR_AbsolutePhotometry  NIR_Comput\n                             outputs=[Output(\"product\")],\n                             resources=ComputingResources(cores=1, ram=3.0, walltime=1.0))\n \n-doAstromDistortion = Executable(command='E-Run NIR_AstrometricCalibration  NIR_DoastromProgram --create-distortion-model --use-psf-models False --use-presolution False',\n+doAstromDistortion = Executable(command='E-Run NIR_AstrometricCalibration  NIR_DoastromProgram --create-distortion-model',\n                       inputs=[Input('listofdithers', content_type='listfile'),\n                               Input('ref_catalog', content_type='listfile'),\n                               Input('presolution', content_type='listfile'),\n",
                            "changes to PckDef. New handling of flags in the Astrometry PE",
                            "Thomas Gasparetto",
                            "2023-07-07T11:41:04.000+00:00",
                            "843fc8d79402785d7325ad36acb61443765d2766"
                        ],
                        [
                            "@@ -57,7 +57,7 @@ backEstimate = Executable(command='E-Run NIR_BackgroundEstimation  NIR_estimate_\n                           outputs=[Output('outputbkg', mime_type='fits')],\n                           resources=ComputingResources(cores=1, ram=2.0, walltime=1.0))\n \n-psfForDither = Executable(command='E-Run NIR_PointSpreadFunction NIR_PSFModelling --imagetype=dither',\n+psfForDither = Executable(command='E-Run NIR_PointSpreadFunction NIR_PSFModelling --imagetype=dither --psfex_cpp False',\n                           inputs=[Input('listofimages', content_type='listfile'),\n                                   Input('mdbfile'), Input('cal_data'), Input('config')],\n                           outputs=[Output('listofpsflists', content_type='listfile', mime_type='json')],\n@@ -126,7 +126,7 @@ doStacking = Executable(command='E-Run NIR_Stacking  NIR_DostackProgram',\n                         outputs=[Output('stackedimage', content_type='listfile', mime_type='json')],\n                         resources=ComputingResources(cores=1, ram=10.0, walltime=2.0))\n \n-psfForStack = Executable(command='E-Run NIR_PointSpreadFunction  NIR_PSFModelling --imagetype=stack',\n+psfForStack = Executable(command='E-Run NIR_PointSpreadFunction  NIR_PSFModelling --imagetype=stack --psfex_cpp False',\n                          inputs=[Input('listofimages', content_type='listfile'),\n                                  Input('mdbfile'), Input('cal_data'), Input('config')],\n                          outputs=[Output('listofpsflists', content_type='listfile', mime_type='json')],\n",
                            "Merge branch 'feature_psfex_cpp' into 'develop'",
                            "Thomas Gasparetto",
                            "2023-07-07T10:45:14.000+00:00",
                            "2c3c90b1a75d8bdc95381e29c3984240fe671d08"
                        ],
                        [
                            "@@ -57,7 +57,7 @@ backEstimate = Executable(command='E-Run NIR_BackgroundEstimation  NIR_estimate_\n                           outputs=[Output('outputbkg', mime_type='fits')],\n                           resources=ComputingResources(cores=1, ram=2.0, walltime=1.0))\n \n-psfForDither = Executable(command='E-Run NIR_PointSpreadFunction NIR_PSFModelling --imagetype=dither',\n+psfForDither = Executable(command='E-Run NIR_PointSpreadFunction NIR_PSFModelling --imagetype=dither --psfex_cpp False',\n                           inputs=[Input('listofimages', content_type='listfile'),\n                                   Input('mdbfile'), Input('cal_data'), Input('config')],\n                           outputs=[Output('listofpsflists', content_type='listfile', mime_type='json')],\n@@ -126,7 +126,7 @@ doStacking = Executable(command='E-Run NIR_Stacking  NIR_DostackProgram',\n                         outputs=[Output('stackedimage', content_type='listfile', mime_type='json')],\n                         resources=ComputingResources(cores=1, ram=10.0, walltime=2.0))\n \n-psfForStack = Executable(command='E-Run NIR_PointSpreadFunction  NIR_PSFModelling --imagetype=stack',\n+psfForStack = Executable(command='E-Run NIR_PointSpreadFunction  NIR_PSFModelling --imagetype=stack --psfex_cpp False',\n                          inputs=[Input('listofimages', content_type='listfile'),\n                                  Input('mdbfile'), Input('cal_data'), Input('config')],\n                          outputs=[Output('listofpsflists', content_type='listfile', mime_type='json')],\n",
                            "adding psfex_cpp flag. it's will be used (True) once we've tested it",
                            "Thomas Gasparetto",
                            "2023-07-07T10:23:56.000+00:00",
                            "af97a449aa7f5c14333040db697a87cebc4cd267"
                        ],
                        [
                            "@@ -358,7 +358,7 @@ findHighLowBaselinePixels = Executable(command=\"E-Run NIR_BadPixelMasking findHi\n                             resources=ComputingResources(cores=1, ram=4.0, walltime=2.0)\n                            )\n \n-makeBaselineStack = Executable(command=\"E-Run NIR_BaselineStack  makeNirBaselineStack\",\n+makeBaseline = Executable(command=\"E-Run NIR_Baseline  makeNirBaseline\",\n                           inputs=[Input(\"baselinelist\", content_type=\"listfile\"), Input(\"config\")],\n                           outputs=[Output(\"outfile\")],\n                           resources=ComputingResources(cores=1, ram=10.0, walltime=8.0))\n",
                            "change name to makeBaseline",
                            "Thomas Gasparetto",
                            "2023-07-06T15:05:47.000+00:00",
                            "5bf8008f627ac24cdb85c4bd0707da08d6121ede"
                        ],
                        [
                            "@@ -17,6 +17,12 @@ runInitialize = Executable(command='E-Run NIR_Init  NIR_runInitialize',\n                            outputs=[Output('outfile', mime_type='fits')],\n                            resources=ComputingResources(cores=1, ram=2.0, walltime=1.0))\n \n+# To be used only for Baseline Map pre-processing\n+runInitializeBaseline = Executable(command='E-Run NIR_Init  NIR_runInitializeBaseline --disabletrimming',\n+                           inputs=[Input('infile'), Input('mdbfile')],\n+                           outputs=[Output('outfile', mime_type='fits')],\n+                           resources=ComputingResources(cores=1, ram=2.0, walltime=1.0))\n+\n badPixMasking = Executable(command='E-Run NIR_BadPixelMasking  maskBadpixels',\n                            inputs=[Input('infile'), Input('xmlfile')],\n                            outputs=[Output('outfile', mime_type='fits')],\n@@ -351,3 +357,8 @@ findHighLowBaselinePixels = Executable(command=\"E-Run NIR_BadPixelMasking findHi\n                             outputs=[Output(\"outfile\")],\n                             resources=ComputingResources(cores=1, ram=4.0, walltime=2.0)\n                            )\n+\n+makeBaselineStack = Executable(command=\"E-Run NIR_BaselineStack  makeNirBaselineStack\",\n+                          inputs=[Input(\"baselinelist\", content_type=\"listfile\"), Input(\"config\")],\n+                          outputs=[Output(\"outfile\")],\n+                          resources=ComputingResources(cores=1, ram=10.0, walltime=8.0))\n",
                            "added init and final task for Baseline. PipScript and PipDef for baseline",
                            "Thomas Gasparetto",
                            "2023-07-04T16:41:23.000+02:00",
                            "8ed228c41ddb9a901cca71ccb0fc1bb2af26fac3"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_Baseline_Pipeline/PipScript_NIR_Baseline.py": [
                        [
                            "@@ -0,0 +1,25 @@\n+from euclidwf.framework.workflow_dsl import pipeline, parallel\n+\n+from PackageDef_NIR import (\n+    runInitializeBaseline, makeBaseline)\n+\n+\n+@parallel(iterable=\"rawBaseline\")\n+def calibration(rawBaseline, mdb):\n+    step = runInitializeBaseline(infile=rawBaseline, mdbfile=mdb)\n+    return step\n+\n+\n+@pipeline(outputs=('outputs',))\n+def main(nirConfig, rawBaseline, mdb):\n+    calibrated = calibration(rawBaseline=rawBaseline, mdb=mdb)\n+    outputs = makeBaseline(darklist=calibrated, config=nirConfig)\n+    return outputs\n+\n+\n+if __name__ == '__main__':\n+    from euclidwf.framework.graph_builder import build_graph\n+    from euclidwf.utilities import visualizer\n+    pydron_graph=build_graph(main)\n+    print(str(pydron_graph))\n+    visualizer.visualize_graph(pydron_graph)\n",
                            "Merge branch 'add_baseline_pipeline' into 'develop'",
                            "Marco Frailis",
                            "2023-08-03T07:24:02.000+00:00",
                            "92a42a21a30cc50adf6e12d828f26b9455401e3c"
                        ],
                        [
                            "@@ -11,9 +11,9 @@ def calibration(rawBaseline, mdb):\n \n \n @pipeline(outputs=('outputs',))\n-def main(rawBaseline, mdb):\n+def main(nirConfig, rawBaseline, mdb):\n     calibrated = calibration(rawBaseline=rawBaseline, mdb=mdb)\n-    outputs = makeBaseline(darklist=calibrated)\n+    outputs = makeBaseline(darklist=calibrated, config=nirConfig)\n     return outputs\n \n \n",
                            "Fixing NIR_Baseline pipeline script",
                            "Marco Frailis",
                            "2023-08-03T09:09:14.000+02:00",
                            "92412e36057ba340a882fa3990da7d8199ad8653"
                        ],
                        [
                            "@@ -1,7 +1,7 @@\n from euclidwf.framework.workflow_dsl import pipeline, parallel\n \n from PackageDef_NIR import (\n-    runInitializeBaseline, badPixMasking, crRejectionSF, makeBaseline)\n+    runInitializeBaseline, makeBaseline)\n \n \n @parallel(iterable=\"rawBaseline\")\n",
                            "update to baseline after INIT update",
                            "Thomas Gasparetto",
                            "2023-07-21T09:51:41.000+00:00",
                            "c7f79858ad4bd2775f00f9596b37644255c33300"
                        ],
                        [
                            "@@ -1,21 +1,19 @@\n from euclidwf.framework.workflow_dsl import pipeline, parallel\n \n from PackageDef_NIR import (\n-    runInitializeBaseline, badPixMasking, crRejectionSF, makeBaselineStack)\n+    runInitializeBaseline, badPixMasking, crRejectionSF, makeBaseline)\n \n \n @parallel(iterable=\"rawBaseline\")\n-def calibration(rawBaseline, mdb, badpixel, nirconfig):\n+def calibration(rawBaseline, mdb):\n     step = runInitializeBaseline(infile=rawBaseline, mdbfile=mdb)\n-    step = badPixMasking(infile=step, xmlfile=badpixel)\n-    step = crRejectionSF(infile=step, config=nirconfig)\n     return step\n \n \n @pipeline(outputs=('outputs',))\n-def main(rawBaseline, mdb, nirConfig, badpixel):\n-    calibrated = calibration(rawBaseline=rawBaseline, mdb=mdb, badpixel=badpixel, nirconfig=nirConfig)\n-    outputs = makeBaseline(baselinelist=calibrated, config=nirConfig)\n+def main(rawBaseline, mdb):\n+    calibrated = calibration(rawBaseline=rawBaseline, mdb=mdb)\n+    outputs = makeBaseline(darklist=calibrated)\n     return outputs\n \n \n",
                            "removed useless steps in baseline pipeline. to be tested soon",
                            "Thomas Gasparetto",
                            "2023-07-20T16:23:54.000+02:00",
                            "c71c480afa86f9ff0ebc0d9c4190b3960fa281c1"
                        ],
                        [
                            "@@ -15,7 +15,7 @@ def calibration(rawBaseline, mdb, badpixel, nirconfig):\n @pipeline(outputs=('outputs',))\n def main(rawBaseline, mdb, nirConfig, badpixel):\n     calibrated = calibration(rawBaseline=rawBaseline, mdb=mdb, badpixel=badpixel, nirconfig=nirConfig)\n-    outputs = makeBaselineStack(baselinelist=calibrated, config=nirConfig)\n+    outputs = makeBaseline(baselinelist=calibrated, config=nirConfig)\n     return outputs\n \n \n",
                            "change name to makeBaseline",
                            "Thomas Gasparetto",
                            "2023-07-06T15:05:47.000+00:00",
                            "5bf8008f627ac24cdb85c4bd0707da08d6121ede"
                        ],
                        [
                            "@@ -0,0 +1,27 @@\n+from euclidwf.framework.workflow_dsl import pipeline, parallel\n+\n+from PackageDef_NIR import (\n+    runInitializeBaseline, badPixMasking, crRejectionSF, makeBaselineStack)\n+\n+\n+@parallel(iterable=\"rawBaseline\")\n+def calibration(rawBaseline, mdb, badpixel, nirconfig):\n+    step = runInitializeBaseline(infile=rawBaseline, mdbfile=mdb)\n+    step = badPixMasking(infile=step, xmlfile=badpixel)\n+    step = crRejectionSF(infile=step, config=nirconfig)\n+    return step\n+\n+\n+@pipeline(outputs=('outputs',))\n+def main(rawBaseline, mdb, nirConfig, badpixel):\n+    calibrated = calibration(rawBaseline=rawBaseline, mdb=mdb, badpixel=badpixel, nirconfig=nirConfig)\n+    outputs = makeBaselineStack(baselinelist=calibrated, config=nirConfig)\n+    return outputs\n+\n+\n+if __name__ == '__main__':\n+    from euclidwf.framework.graph_builder import build_graph\n+    from euclidwf.utilities import visualizer\n+    pydron_graph=build_graph(main)\n+    print(str(pydron_graph))\n+    visualizer.visualize_graph(pydron_graph)\n",
                            "added init and final task for Baseline. PipScript and PipDef for baseline",
                            "Thomas Gasparetto",
                            "2023-07-04T16:41:23.000+02:00",
                            "8ed228c41ddb9a901cca71ccb0fc1bb2af26fac3"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_Persistence_Pipeline/PipScript_NIR_Persistence.py": [
                        [
                            "@@ -28,7 +28,7 @@ def persistenceMaskList(targetexpolistxml, allexpolistfits, mdbxml):\n def nir_persistence(expolistxml, masklistxml,  mdbxml, badxml, config):\n     allexpolistfits = preprocessingList(expolistxml=expolistxml, mdbxml=mdbxml, badxml=badxml, config=config) # output = list of .fits\n     targetexpolistxml = selectExpos(expolist=expolistxml, masklist=masklistxml) # compare PTGID ? return json of xmls\n-    persistence_mask = persistenceMaskList(targetexpolistxml=targetexpolistxml, allexpolistfits=allexpolistfits, mdbxml=mdbxml) \n+    persistence_mask = persistenceMaskList(targetexpolistxml=targetexpolistxml, darkinput=allexpolistfits, mdbxml=mdbxml) \n     return persistence_mask #.json list of .xml\n \n if __name__ == '__main__':\n",
                            "Merge branch 'add_baseline_pipeline' into 'develop'",
                            "Marco Frailis",
                            "2023-08-03T07:24:02.000+00:00",
                            "92a42a21a30cc50adf6e12d828f26b9455401e3c"
                        ]
                    ],
                    "NIR_IAL_Pipelines/auxdir/NIR_Pipelines/NIR_SelfCalib_Pipeline/PipScript_NIR_SelfCalib.py": [
                        [
                            "@@ -29,7 +29,7 @@ def nir_selfcalib(nirConfig, dithers, mdb, masterdark, masterflat, badpixel,\n                                   presolution=presolution,\n                                   config=nirConfig)\n \n-    largeflat, detcoeff = makeSelfCalib(inlist=astrometricCatalogs, mdbfile=mdb)\n+    largeflat, detcoeff = makeSelfCalib(inlist=astrometricCatalogs, mdbfile=mdb, inopt=nirConfig)\n \n     return largeflat,detcoeff\n \n",
                            "adding nirConfig to makeselfcal task in Self Cal Pipeline",
                            "Thomas Gasparetto",
                            "2023-07-24T16:05:31.000+02:00",
                            "6b5f7d07ae77d3b15d8e22fd155307e96e0c57b8"
                        ]
                    ],
                    "Makefile": [
                        [
                            "@@ -44,170 +44,19 @@\n #\n ################################################################################\n \n-# settings\n-CMAKE := cmake\n-CTEST := ctest\n-NINJA := $(shell which ninja-build 2> /dev/null)\n-ifeq ($(NINJA),)\n-  NINJA := $(shell which ninja 2> /dev/null)\n-endif\n-\n-# Looking for the Custom make library\n-\n-CUSTOM_MAKE_LIB := Custom.mk\n-\n-ifneq ($(wildcard $(CURDIR)/make/$(CUSTOM_MAKE_LIB)),)\n-  CUSTOM_MAKE_LIB_FILE := $(CURDIR)/make/$(CUSTOM_MAKE_LIB)\n-else\n-  ifneq ($(CMAKE_PREFIX_PATH),)\n-    PREFIX_LIST := $(subst :, ,$(CMAKE_PREFIX_PATH))\n-    CUSTOM_MAKE_LIB_LIST := $(foreach dir,$(PREFIX_LIST),$(wildcard $(dir)/share/Elements/make/$(CUSTOM_MAKE_LIB) $(dir)/../make/$(CUSTOM_MAKE_LIB)))\n-  endif\n-  CUSTOM_MAKE_LIB_LIST += /usr/share/Elements/make/$(CUSTOM_MAKE_LIB)\n-  CUSTOM_MAKE_LIB_FILE := $(firstword $(CUSTOM_MAKE_LIB_LIST))\n-endif\n-\n-# Looking for the ToolChain\n-\n-TOOLCHAIN_NAME := ElementsToolChain.cmake\n+ELEMENTS_MAKE_LIB := Elements.mk\n \n-ifneq ($(wildcard $(CURDIR)/cmake/$(TOOLCHAIN_NAME)),)\n-  TOOLCHAIN_FILE := $(CURDIR)/cmake/$(TOOLCHAIN_NAME)\n+ifneq ($(wildcard $(CURDIR)/make/$(ELEMENTS_MAKE_LIB)),)\n+  ELEMENTS_MAKE_LIB_FILE := $(CURDIR)/make/$(ELEMENTS_MAKE_LIB)\n else\n   ifneq ($(CMAKE_PREFIX_PATH),)\n     PREFIX_LIST := $(subst :, ,$(CMAKE_PREFIX_PATH))\n-    TOOLCHAIN_LIST := $(foreach dir,$(PREFIX_LIST),$(wildcard $(dir)/lib*/cmake/ElementsProject/$(TOOLCHAIN_NAME) $(dir)/$(TOOLCHAIN_NAME)))\n-    TOOLCHAIN_FILE := $(firstword $(TOOLCHAIN_LIST))\n-  endif\n-endif\n-\n-override ALL_CMAKEFLAGS := -Wno-dev --no-warn-unused-cli\n-\n-ifneq ($(TOOLCHAIN_FILE),)\n-  # A toolchain has been found. Lets use it.\n-  override ALL_CMAKEFLAGS += -DCMAKE_TOOLCHAIN_FILE=$(TOOLCHAIN_FILE)\n-endif\n-\n-\n-BUILD_PREFIX_NAME := build\n-\n-override ALL_CMAKEFLAGS += -DUSE_LOCAL_INSTALLAREA=ON -DBUILD_PREFIX_NAME:STRING=$(BUILD_PREFIX_NAME)\n-override ALL_CMAKEFLAGS += -DUSE_VERSIONED_LIBRARIES=OFF\n-\n-ifndef BINARY_TAG\n-  ifdef CMAKECONFIG\n-    BINARY_TAG := ${CMAKECONFIG}\n-  else\n-    ifdef CMTCONFIG\n-      BINARY_TAG := ${CMTCONFIG}\n-    endif\n-  endif\n-endif\n-\n-ifdef BINARY_TAG\n-  BUILD_SUBDIR := $(BUILD_PREFIX_NAME).$(BINARY_TAG)\n-else\n-  BUILD_SUBDIR := $(BUILD_PREFIX_NAME)\n-endif\n-BUILDDIR := $(CURDIR)/$(BUILD_SUBDIR)\n-\n-# build tool\n-\n-ifneq ($(USE_NINJA),)\n-  # enable Ninja\n-  override ALL_CMAKEFLAGS += -GNinja\n-  BUILD_CONF_FILE := build.ninja\n-  BUILDFLAGS := $(NINJAFLAGS)\n-  ifneq ($(VERBOSE),)\n-    BUILDFLAGS := -v $(BUILDFLAGS)\n+    ELEMENTS_MAKE_LIB_LIST := $(foreach dir,$(PREFIX_LIST),$(wildcard $(dir)/share/Elements/make/$(ELEMENTS_MAKE_LIB) $(dir)/../make/$(ELEMENTS_MAKE_LIB)))\n   endif\n-else\n-  BUILD_CONF_FILE := Makefile\n-endif\n-BUILD_CMD := $(CMAKE) --build $(BUILD_SUBDIR) --target\n-\n-\n-# Use environment variable for extra flags\n-\n-# Replace the \":\" from eclipse variable list to spaces  \n-ifneq ($(EXPAND_FLAGS),)\n-  CMAKEFLAGS := $(subst :-, -,$(CMAKEFLAGS))\n-endif\n-\n-ifneq ($(CMAKEFLAGS),)\n-  override ALL_CMAKEFLAGS += $(CMAKEFLAGS)\n+  ELEMENTS_MAKE_LIB_LIST += /usr/share/Elements/make/$(ELEMENTS_MAKE_LIB)\n+  ELEMENTS_MAKE_LIB_FILE := $(firstword $(ELEMENTS_MAKE_LIB_LIST))\n endif\n \n-# default target\n-all:\n-\n-# deep clean\n-purge:\n-\t$(RM) -r $(BUILDDIR) $(CURDIR)/InstallArea/$(BINARY_TAG)\n-\tfind $(CURDIR) \"(\" -name \"InstallArea\" -prune -o -name \"*.pyc\" -o -name \"*.pyo\" \")\" -a -type f -exec $(RM) -v \\{} \\;\n-\tfind $(CURDIR) -depth -type d -name \"__pycache__\" -exec $(RM) -rv \\{} \\;\n-\n-# Remove all the possible directories and the whole InstallArea as well\n-mrproper:\n-\t$(RM) -r $(CURDIR)/build $(CURDIR)/build.* $(CURDIR)/InstallArea\n-\tfind $(CURDIR) \"(\" -name \"*.pyc\" -o -name \"*.pyo\" \")\" -a -type f -exec $(RM) -v \\{} \\;\n-\tfind $(CURDIR) -depth -type d -name \"__pycache__\" -exec $(RM) -rv \\{} \\;\n-\n-# delegate any target to the build directory (except 'purge')\n-ifneq ($(MAKECMDGOALS),purge)\n-ifneq ($(MAKECMDGOALS),mrproper)\n-%: $(BUILDDIR)/$(BUILD_CONF_FILE) FORCE\n-\t+$(BUILD_CMD) $* -- $(BUILDFLAGS)\n-endif\n-endif\n-\n-# aliases\n-.PHONY: configure tests FORCE\n-ifneq ($(wildcard $(BUILDDIR)/$(BUILD_CONF_FILE)),)\n-configure: rebuild_cache\n-else\n-configure: $(BUILDDIR)/$(BUILD_CONF_FILE)\n-endif\n-\t@ # do not delegate further\n-\n-\n-# This wrapping around the test target is used to ensure the generation of\n-# the XML output from ctest.\n-test: $(BUILDDIR)/$(BUILD_CONF_FILE)\n-\t$(RM) -r $(BUILDDIR)/Testing $(BUILDDIR)/html\n-\t-cd $(BUILDDIR) && $(CTEST) -T test $(ARGS)\n-\t+$(BUILD_CMD) JUnitSummary\n-\n-\n-# This target ensures that the \"all\" target is called before\n-# running the tests (unlike the \"test\" default target of CMake)\n-tests: all\n-\t$(RM) -r $(BUILDDIR)/Testing $(BUILDDIR)/html\n-\t-cd $(BUILDDIR) && $(CTEST) -T test $(ARGS)\n-\t+$(BUILD_CMD) JUnitSummary\n-\n-ifeq ($(VERBOSE),)\n-# less verbose install\n-# (emulate the default CMake install target)\n-install: all\n-\tcd $(BUILDDIR) && $(CMAKE) -P cmake_install.cmake | grep -v \"^-- Up-to-date:\"\n-endif\n-\n-# import the library to look for a custom Makefile\n--include $(CUSTOM_MAKE_LIB_FILE)\n-\n-# ensure that the target are always passed to the CMake Makefile\n-FORCE: ;\n-\n-# Makefiles are used as implicit targets in make, but we should not consider\n-# them for delegation.\n-$(MAKEFILE_LIST): ;\n-\n-\n-# trigger CMake configuration\n-$(BUILDDIR)/$(BUILD_CONF_FILE): | $(BUILDDIR)\n-\tcd $(BUILDDIR) && $(CMAKE) $(ALL_CMAKEFLAGS) $(CURDIR)\n-\n-$(BUILDDIR):\n-\tmkdir -p $(BUILDDIR)\n+$(info Using the $(ELEMENTS_MAKE_LIB_FILE) make library)\n+include $(ELEMENTS_MAKE_LIB_FILE)\n \n",
                            "updated MakeFile to be used in DM 9.2",
                            "Thomas Gasparetto",
                            "2023-07-04T12:38:37.000+02:00",
                            "3dd1b0c08f2f4b21aa1d2923e8ac798ab3bd0416"
                        ]
                    ],
                    ".gitlab-ci.yml": [
                        [
                            "@@ -0,0 +1,25 @@\n+image: lodeen:2.1.2\n+before_script:\n+     - source /cvmfs/euclid-dev.in2p3.fr/EDEN-3.1/bin/activate\n+\n+workflow:\n+  rules:\n+    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'\n+\n+variables:\n+  GIT_CLEAN_FLAGS: none\n+\n+stages:\n+     - build\n+     - test\n+\n+build:\n+    stage: build\n+    script:\n+     - make purge \n+     - make\n+\n+test:\n+    stage: test\n+    script:\n+     - make test ARGS=-VV\n",
                            "Merge branch 'DM92_update' into 'develop'",
                            "Thomas Gasparetto",
                            "2023-07-03T09:40:32.000+00:00",
                            "2071ea55716d41f9de141db558789bdee79cbbc1"
                        ]
                    ],
                    ".jenkinsFile": [
                        [
                            "@@ -1,3 +1,3 @@\n #!groovy\n-@Library('integration-library@release-9') _\n-pipelineElements(artifactId:\"NIR_IAL_Pipelines\", component:'eden.3.0')\n+@Library(value='integration-library@release-10') _\n+pipelineElements(name:\"NIR_IAL_Pipelines\", component:'eden.3.1')\n",
                            "Merge branch 'DM92_update' into 'develop'",
                            "Thomas Gasparetto",
                            "2023-07-03T09:40:32.000+00:00",
                            "2071ea55716d41f9de141db558789bdee79cbbc1"
                        ]
                    ]
                },
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": [
                    {
                        "name": "2.2.0",
                        "created_at": "2023-06-26T19:09:18.000+02:00",
                        "author_name": "Thomas Gasparetto"
                    },
                    {
                        "name": "2.3.1",
                        "created_at": "2023-08-09T21:58:44.000+00:00",
                        "author_name": "Marco Frailis"
                    }
                ]
            },
            "PF-NIR/NIR_MovingObjectsMasking": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_LargeScaleFlat": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_GhostBusters": {
                "start date": "2023-08-07T13:21:48",
                "end date": "2023-08-09T21:11:29",
                "start tag": "2.3.0",
                "end tag": "2.3.1",
                "count_files_modified": "3",
                "modifications_by_file": {
                    "NIR_GhostBusters/python/NIR_GhostBusters/mask.py": [
                        [
                            "@@ -227,6 +227,8 @@ class MaskGenerator():\n                 # Since SOURCE_ID is unique, we do not have to filter the result for duplicates resulting from the join\n                 cat = join(cat, cat_int, join_type='outer')\n             # Correct for proper motion\n+            cat = cat[~np.isnan(cat['PMRA'])]\n+            cat = cat[~np.isnan(cat['PMDEC'])]\n             cat = self.correct_propermotions_gaiacat(cat)\n             return cat, 'GAIA'\n         elif cat_dpd == 'DpdTrueUniverseOutput':\n",
                            "Fixing input GAIA catalog for emtpy PM values",
                            "Marco Frailis",
                            "2023-08-09T19:52:20.000+02:00",
                            "08a091ee8f7754b8f7741c4952644bd34e662d55"
                        ]
                    ],
                    ".bumpversion.cfg": [
                        [
                            "@@ -1,5 +1,5 @@\n [bumpversion]\n-current_version = 2.3\n+current_version = 2.4\n commit = False\n tag = False\n \n",
                            "bumping version after tagging",
                            "Marco Frailis",
                            "2023-08-08T10:48:01.000+00:00",
                            "209d6aa1498a1bdd29849ae6397bb5cac847a81f"
                        ]
                    ],
                    "CMakeLists.txt": [
                        [
                            "@@ -12,6 +12,6 @@ find_package(ElementsProject)\n #                         elements_project(MyProject 1.0 USE Element 3.9)\n #===============================================================================\n \n-elements_project(NIR_GhostBusters 2.3\n+elements_project(NIR_GhostBusters 2.4\n                  USE \n-                 NIR_Utilities 2.3)\n+                 NIR_Utilities 2.4)\n",
                            "bumping version after tagging",
                            "Marco Frailis",
                            "2023-08-08T10:48:01.000+00:00",
                            "209d6aa1498a1bdd29849ae6397bb5cac847a81f"
                        ]
                    ]
                },
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": [
                    {
                        "name": "2.3.0",
                        "created_at": "2023-08-07T13:21:48.000+00:00",
                        "author_name": "Marco Frailis"
                    },
                    {
                        "name": "2.3.1",
                        "created_at": "2023-08-09T21:11:29.000+02:00",
                        "author_name": "Marco Frailis"
                    }
                ]
            },
            "PF-NIR/NIR_Persistence": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_Pipelines_Deprecated": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_NonLinearSaturation": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_DarkBiasSubtraction": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_BadPixelMasking": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_Testing": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_Stacking": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_Resampling": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_PointSpreadFunction": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_AbsolutePhotometry": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_SuperflatCalibration": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_Utilities": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_RelativePhotometry": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_FlatFieldCorrection": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_BackgroundEstimation": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_CrRejectionSingleFrame": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_Init": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_AstrometricCalibration": {
                "start date": "2023-08-07T13:21:48",
                "end date": "2023-08-09T19:03:00",
                "start tag": "2.3.0",
                "end tag": "2.3.1",
                "count_files_modified": "3",
                "modifications_by_file": {
                    "NIR_Doastrom/python/NIR_Doastrom/NIR_DoastromUtils.py": [
                        [
                            "@@ -220,6 +220,8 @@ class DoastromClass(object):\n                 logger.info('%s', os.path.basename(refcat_path))\n \n                 t1 = Table.read(refcat_path, hdu=1)\n+                t1 = t1[~np.isnan(t1['PMRA'])]\n+                t1 = t1[~np.isnan(t1['PMDEC'])]\n \n                 # Convert Gaia magnitudes to H, J, and Y\n                 if nir_filter == 'H':\n",
                            "Fixing GAIA catalog for Nan values in PM columns",
                            "Marco Frailis",
                            "2023-08-09T16:20:52.000+02:00",
                            "379e6e6d843458482871f3d77dc4a5e29c07eb7a"
                        ]
                    ],
                    ".bumpversion.cfg": [
                        [
                            "@@ -1,5 +1,5 @@\n [bumpversion]\n-current_version = 2.3\n+current_version = 2.4\n commit = False\n tag = False\n \n",
                            "bumping version after tagging",
                            "Marco Frailis",
                            "2023-08-08T10:48:01.000+00:00",
                            "8f6497ac5f664b768976e6576c64dad2f7ade419"
                        ]
                    ],
                    "CMakeLists.txt": [
                        [
                            "@@ -6,6 +6,6 @@ find_package(ElementsProject)\n #---------------------------------------------------------------\n \n # Declare project name and version\n-elements_project(NIR_AstrometricCalibration 2.3\n+elements_project(NIR_AstrometricCalibration 2.4\n                  USE\n-                 NIR_Utilities 2.3)\n+                 NIR_Utilities 2.4)\n",
                            "bumping version after tagging",
                            "Marco Frailis",
                            "2023-08-08T10:48:01.000+00:00",
                            "8f6497ac5f664b768976e6576c64dad2f7ade419"
                        ]
                    ]
                },
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": [
                    {
                        "name": "2.3.0",
                        "created_at": "2023-08-07T13:21:48.000+00:00",
                        "author_name": "Marco Frailis"
                    },
                    {
                        "name": "2.3.1",
                        "created_at": "2023-08-09T19:03:00.000+00:00",
                        "author_name": "Marco Frailis"
                    }
                ]
            },
            "PF-NIR/NIR_Workflow": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_CatalogExtraction": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-NIR/NIR_CrRejectionMultiFrame": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            }
        },
        "PF-VIS": {
            "PF-VIS/VIS_DiffractionSpikesFocus": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/vis_instrument_tools": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_DQReport": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "OU-VIS/VIS_PTC": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_ImageLib": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/vis_autoarray": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_Common": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_CTI_Pipeline": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_AutoFit": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_LargeFlatCalibration": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/vis_illumcalibration": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/vis_darkcorrection": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/vis_darkcalibration": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_IAL_Pipelines": {
                "start date": "2023-08-02T20:20:55",
                "end date": "2023-08-08T14:57:49",
                "start tag": "13.0.6",
                "end tag": "13.0.10",
                "count_files_modified": "39",
                "modifications_by_file": {
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_ProcessField_Pipeline/PkgDef_VIS_ProcessField.py": [
                        [
                            "@@ -41,7 +41,7 @@ from euclidwf.framework.taskdefs import Executable, Input, Output, ComputingReso\n #mod = importlib.machinery.SourceFileLoader( \"VIS_IAL_PIPELINES_VERSION\", ialversion_path).load_module()\n #TASKS_VER = VIS_IAL_PIPELINES_VERSION.VIS_IAL_PIPELINES_ORIGINAL_VERSION\n \n-TASKS_VER = \"13.0.9\"\n+TASKS_VER = \"13.0.10\"\n \n import os\n PIPE_NAME = \"VIS_\" + os.path.splitext( os.path.basename( __file__))[0].split( \"VIS_\")[1]\n",
                            "[UPD]Set TASKS_VER to 13.0.10",
                            "Catherine Grenet",
                            "2023-08-08T14:57:49.000+02:00",
                            "ccc61aa044e0ce8eba6c1d8a04d5c5491981b329"
                        ],
                        [
                            "@@ -41,7 +41,7 @@ from euclidwf.framework.taskdefs import Executable, Input, Output, ComputingReso\n #mod = importlib.machinery.SourceFileLoader( \"VIS_IAL_PIPELINES_VERSION\", ialversion_path).load_module()\n #TASKS_VER = VIS_IAL_PIPELINES_VERSION.VIS_IAL_PIPELINES_ORIGINAL_VERSION\n \n-TASKS_VER = \"13.0.8\"\n+TASKS_VER = \"13.0.9\"\n \n import os\n PIPE_NAME = \"VIS_\" + os.path.splitext( os.path.basename( __file__))[0].split( \"VIS_\")[1]\n",
                            "[UPD]Bump version to 13.0.9 and set TASKS_VER to 13.0.9",
                            "Catherine Grenet",
                            "2023-08-06T21:53:07.000+02:00",
                            "3e38b8d5277fc7476e59994516e539fdfb5c2a8b"
                        ],
                        [
                            "@@ -41,7 +41,7 @@ from euclidwf.framework.taskdefs import Executable, Input, Output, ComputingReso\n #mod = importlib.machinery.SourceFileLoader( \"VIS_IAL_PIPELINES_VERSION\", ialversion_path).load_module()\n #TASKS_VER = VIS_IAL_PIPELINES_VERSION.VIS_IAL_PIPELINES_ORIGINAL_VERSION\n \n-TASKS_VER = \"13.0.7\"\n+TASKS_VER = \"13.0.8\"\n \n import os\n PIPE_NAME = \"VIS_\" + os.path.splitext( os.path.basename( __file__))[0].split( \"VIS_\")[1]\n",
                            "[UPD]Update TASKS_VER to 13.0.8",
                            "Catherine Grenet",
                            "2023-08-03T17:58:18.000+02:00",
                            "95e784492427ccae1d7ee7a171365c9a6abcd7d2"
                        ],
                        [
                            "@@ -41,7 +41,7 @@ from euclidwf.framework.taskdefs import Executable, Input, Output, ComputingReso\n #mod = importlib.machinery.SourceFileLoader( \"VIS_IAL_PIPELINES_VERSION\", ialversion_path).load_module()\n #TASKS_VER = VIS_IAL_PIPELINES_VERSION.VIS_IAL_PIPELINES_ORIGINAL_VERSION\n \n-TASKS_VER = \"13.0.6\"\n+TASKS_VER = \"13.0.7\"\n \n import os\n PIPE_NAME = \"VIS_\" + os.path.splitext( os.path.basename( __file__))[0].split( \"VIS_\")[1]\n",
                            "[UPD]Update TASKS_VER to 13.0.7",
                            "Catherine Grenet",
                            "2023-08-03T13:45:56.000+02:00",
                            "57941cfd33d76107dde883f24927674a50672c7d"
                        ]
                    ],
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_CTICalibration_Pipeline/PipScript_VIS_CTICalibration.py": [
                        [
                            "@@ -58,7 +58,7 @@ def process_calibrate_cti_to_ccd(config, ccd_list):\n     return calibrate_cti\n \n \n-@pipeline(outputs=(\"dpdcticalibration\", \"dpdanalysis_out\"))\n+@pipeline(outputs=(\"parallel_cti_xml_out, serial_cti_xml_out\"))\n def processCTI(   vis_config_in, MDB, raw_frames_in, flagmaps, gains_model, xtalk_model,\n                   masterbias, masterdark, nlcorr_model, ron_model,\n                   saturation_model):\n",
                            "fix output decorator",
                            "James Nightingale",
                            "2023-08-07T14:26:56.000+01:00",
                            "a5c8e0260a82e42181b05f60d944b74cd42c9e63"
                        ],
                        [
                            "@@ -40,16 +40,18 @@ def process_cti_to_quad(config, MDB, rawexp_list):\n @parallel(iterable=\"ccd_in\", outputs=(\"cti_parallel_output, cti_serial_output\"))\n def process_calibrate_cti(\n         config,\n-        # MDB,\n-        ccd_in):\n+        ccd_in\n+):\n+\n+    cti_parallel_output, cti_serial_output = PkgDef.calibrate_cti(\n+        config=config,\n+        input_ccd=ccd_in\n+    )\n \n-    cti_parallel_output, cti_serial_output = PkgDef.calibrate_cti(config=config,\n-                                      # MDB,\n-                                      input_ccd=ccd_in)\n     return cti_parallel_output, cti_serial_output\n \n \n-def process_calibrate_cti_to_ccd(config, MDB, ccd_list):\n+def process_calibrate_cti_to_ccd(config, ccd_list):\n \n     calibrate_cti = process_calibrate_cti(config=config, ccd_in=ccd_list)\n \n@@ -62,17 +64,19 @@ def processCTI(   vis_config_in, MDB, raw_frames_in, flagmaps, gains_model, xtal\n                   saturation_model):\n \n     rawexp_list, quad_list, config = \\\n-    PkgDef.VIS_cti_xml_in(vis_config_in=  vis_config_in,\n-                          MDB=           MDB,\n-                          raw_frames_in= raw_frames_in,\n-                          flagmaps=      flagmaps,\n-                          gains_model=   gains_model,\n-                          xtalk_model=   xtalk_model,\n-                          master_bias=   masterbias,\n-                          master_dark=   masterdark,\n-                          nlcorr_model=  nlcorr_model,\n-                          ron_model=     ron_model,\n-                          saturation_model = saturation_model)\n+    PkgDef.VIS_cti_xml_in(\n+        vis_config_in=  vis_config_in,\n+        MDB=           MDB,\n+        raw_frames_in= raw_frames_in,\n+        flagmaps=      flagmaps,\n+        gains_model=   gains_model,\n+        xtalk_model=   xtalk_model,\n+        master_bias=   masterbias,\n+        master_dark=   masterdark,\n+        nlcorr_model=  nlcorr_model,\n+        ron_model=     ron_model,\n+        saturation_model = saturation_model\n+    )\n \n     quad_list = process_cti_to_quad(config=config, MDB=MDB, rawexp_list=rawexp_list)\n \n@@ -90,10 +94,14 @@ def processCTI(   vis_config_in, MDB, raw_frames_in, flagmaps, gains_model, xtal\n     # Using each ccd_list, perform CTI calibration. This occurs in total 36 times, with a unique calibration for each\n     # CCD.\n  #   calibrate_cti_results_list = process_calibrate_cti(config=config, MDB=MDB, ccd_in=ccd_list)\n-    calibrate_cti_results_list = process_calibrate_cti_to_ccd(config=config, MDB=MDB, ccd_list=ccd_list)\n+    calibrate_cti_results_list = process_calibrate_cti_to_ccd(\n+        config=config,\n+        ccd_list=ccd_list\n+    )\n \n     parallel_cti_xml_out, serial_cti_xml_out = PkgDef.VIS_cti_xml_out(\n-        config=config, calibrate_cti_results_list=calibrate_cti_results_list\n+        config=config,\n+        calibrate_cti_results_list=calibrate_cti_results_list\n     )\n \n     return parallel_cti_xml_out, serial_cti_xml_out\n",
                            "remove superflous MDB inputs in some of PipScript_VIS_CTICalibration",
                            "James Nightingale",
                            "2023-08-06T12:02:29.000+01:00",
                            "43b40c6109f861cb1c437fad2964b53000ce1574"
                        ],
                        [
                            "@@ -92,11 +92,11 @@ def processCTI(   vis_config_in, MDB, raw_frames_in, flagmaps, gains_model, xtal\n  #   calibrate_cti_results_list = process_calibrate_cti(config=config, MDB=MDB, ccd_in=ccd_list)\n     calibrate_cti_results_list = process_calibrate_cti_to_ccd(config=config, MDB=MDB, ccd_list=ccd_list)\n \n-    dpdparallelcticalibration, dpdserialcticalibration = PkgDef.VIS_cti_xml_out(\n+    parallel_cti_xml_out, serial_cti_xml_out = PkgDef.VIS_cti_xml_out(\n         config=config, calibrate_cti_results_list=calibrate_cti_results_list\n     )\n \n-    return dpdparallelcticalibration, dpdserialcticalibration\n+    return parallel_cti_xml_out, serial_cti_xml_out\n \n if __name__ == \"__main__\":\n     from euclidwf.utilities import visualizer\n",
                            "update output ports",
                            "James Nightingale",
                            "2023-08-03T13:40:42.000+01:00",
                            "c6634ea77228e9f0fd4ed22583f8c71455455a07"
                        ]
                    ],
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_CTIMasterCI_Pipeline/PipScript_VIS_CTIMasterCI.py": [
                        [
                            "@@ -38,7 +38,7 @@ def process_cti_to_quad(config, MDB, rawexp_list):\n     return cti_quads\n \n \n-@pipeline(outputs=(\"dpdmasterci\", \"dpdanalysis_out\"))\n+@pipeline(outputs=(\"dpdmasterci\"))\n def processCTI(   vis_config_in, MDB, raw_frames_in, flagmaps, gains_model, xtalk_model,\n                   masterbias, masterdark, nlcorr_model, ron_model,\n                   saturation_model):\n@@ -72,7 +72,6 @@ def processCTI(   vis_config_in, MDB, raw_frames_in, flagmaps, gains_model, xtal\n         config=config\n     )\n \n-\n     dpdmasterci = PkgDef.VIS_cti_master_ci_xml_out(\n         config=config,\n         cti_master_ci_list=master_ci_data\n",
                            "fix output decorator",
                            "James Nightingale",
                            "2023-08-07T14:26:56.000+01:00",
                            "a5c8e0260a82e42181b05f60d944b74cd42c9e63"
                        ],
                        [
                            "@@ -44,25 +44,28 @@ def processCTI(   vis_config_in, MDB, raw_frames_in, flagmaps, gains_model, xtal\n                   saturation_model):\n \n     rawexp_list, quad_list, config = \\\n-    PkgDef.VIS_cti_xml_in(vis_config_in=  vis_config_in,\n-                          MDB=           MDB,\n-                          raw_frames_in= raw_frames_in,\n-                          flagmaps=      flagmaps,\n-                          gains_model=   gains_model,\n-                          xtalk_model=   xtalk_model,\n-                          master_bias=   masterbias,\n-                          master_dark=   masterdark,\n-                          nlcorr_model=  nlcorr_model,\n-                          ron_model=     ron_model,\n-                          saturation_model = saturation_model)\n+    PkgDef.VIS_cti_xml_in(\n+        vis_config_in=  vis_config_in,\n+        MDB=           MDB,\n+        raw_frames_in= raw_frames_in,\n+        flagmaps=      flagmaps,\n+        gains_model=   gains_model,\n+        xtalk_model=   xtalk_model,\n+        master_bias=   masterbias,\n+        master_dark=   masterdark,\n+        nlcorr_model=  nlcorr_model,\n+        ron_model=     ron_model,\n+        saturation_model = saturation_model\n+    )\n \n     quad_list = process_cti_to_quad(config=config, MDB=MDB, rawexp_list=rawexp_list)\n \n     # Using each ccd_list, perform CTI calibration. This occurs in total 36 times, with a unique calibration for each\n     # CCD.\n-    cti_master_ci_list = PkgDef.master_ci_estimate(config=config,\n-                                      # MDB,\n-                                      quad_list_of_lists=quad_list)\n+    cti_master_ci_list = PkgDef.master_ci_estimate(\n+        config=config,\n+        quad_list_of_lists=quad_list\n+    )\n \n     master_ci_data = PkgDef.quad2FPA(\n         infilelist_data=cti_master_ci_list,\n@@ -70,11 +73,12 @@ def processCTI(   vis_config_in, MDB, raw_frames_in, flagmaps, gains_model, xtal\n     )\n \n \n-    dpdmasterci, dpdanalysis_out = PkgDef.VIS_cti_master_ci_xml_out(\n-        config=config, cti_master_ci_list=master_ci_data\n+    dpdmasterci = PkgDef.VIS_cti_master_ci_xml_out(\n+        config=config,\n+        cti_master_ci_list=master_ci_data\n     )\n \n-    return dpdmasterci, dpdanalysis_out\n+    return dpdmasterci\n \n \n if __name__ == \"__main__\":\n",
                            "update VIS_CTIMasterCI ouptut ports at XML layer",
                            "James Nightingale",
                            "2023-08-06T11:45:23.000+01:00",
                            "2fbd3d977966f4b66aa5e94fde0d3d1555997144"
                        ]
                    ],
                    "CMakeLists.txt": [
                        [
                            "@@ -12,6 +12,6 @@ find_package(ElementsProject)\n #                         elements_project(MyProject 1.0 USE Element 3.9)\n #===============================================================================\n \n-elements_project( VIS_IAL_Pipelines 13.0.9\n+elements_project( VIS_IAL_Pipelines 13.0.10\n                   USE ST_PipelineChecker 1.5.0\n                   DESCRIPTION \"VIS Processing Function pipelines interface description\")\n",
                            "Bump version to 13.0.10",
                            "Catherine Grenet",
                            "2023-08-07T12:14:32.000+02:00",
                            "36a9a3114e7b8265b2817e2e91227d98cb5893e6"
                        ],
                        [
                            "@@ -12,6 +12,6 @@ find_package(ElementsProject)\n #                         elements_project(MyProject 1.0 USE Element 3.9)\n #===============================================================================\n \n-elements_project( VIS_IAL_Pipelines 13.0.8\n+elements_project( VIS_IAL_Pipelines 13.0.9\n                   USE ST_PipelineChecker 1.5.0\n                   DESCRIPTION \"VIS Processing Function pipelines interface description\")\n",
                            "[UPD]Bump version to 13.0.9 and set TASKS_VER to 13.0.9",
                            "Catherine Grenet",
                            "2023-08-06T21:53:07.000+02:00",
                            "3e38b8d5277fc7476e59994516e539fdfb5c2a8b"
                        ],
                        [
                            "@@ -12,6 +12,6 @@ find_package(ElementsProject)\n #                         elements_project(MyProject 1.0 USE Element 3.9)\n #===============================================================================\n \n-elements_project( VIS_IAL_Pipelines 13.0.7\n+elements_project( VIS_IAL_Pipelines 13.0.8\n                   USE ST_PipelineChecker 1.5.0\n                   DESCRIPTION \"VIS Processing Function pipelines interface description\")\n",
                            "Bump version to 13.0.8",
                            "Catherine Grenet",
                            "2023-08-03T14:17:00.000+02:00",
                            "a7e0a68586cd91a025514cf4f2c5066899c3fd21"
                        ],
                        [
                            "@@ -12,6 +12,6 @@ find_package(ElementsProject)\n #                         elements_project(MyProject 1.0 USE Element 3.9)\n #===============================================================================\n \n-elements_project( VIS_IAL_Pipelines 13.0.6\n+elements_project( VIS_IAL_Pipelines 13.0.7\n                   USE ST_PipelineChecker 1.5.0\n                   DESCRIPTION \"VIS Processing Function pipelines interface description\")\n",
                            "Bump version to 13.0.7",
                            "Catherine Grenet",
                            "2023-08-02T21:01:28.000+02:00",
                            "70e284e849faa029e390674773654c0e3a0655b0"
                        ]
                    ],
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_CTICalibration_Pipeline/PkgDef_VIS_CTICalibration.py": [
                        [
                            "@@ -74,11 +74,13 @@ gather_cti_quads = Executable(\n calibrate_cti = Executable(\n     command=f\"E-Run VIS_Tasks {TASKS_VER} VIS_CTI_Calibration\",\n     inputs=[\n-         Input('config'),\n-#        Input(\"MDB\"),\n-        Input(\"input_ccd\")],\n-    outputs=[Output(\"cti_parallel_output\", mime_type=\"json\"),\n-             Output(\"cti_serial_output\", mime_type=\"json\")],\n+        Input('config'),\n+        Input(\"input_ccd\")\n+    ],\n+    outputs=[\n+        Output(\"cti_parallel_output\", mime_type=\"json\"),\n+        Output(\"cti_serial_output\", mime_type=\"json\")\n+    ],\n     resources=ComputingResources(cores=1, ram=256.0, walltime=16.0),\n )\n \n",
                            "update VIS_CTIMasterCI ouptut ports at XML layer",
                            "James Nightingale",
                            "2023-08-06T11:45:23.000+01:00",
                            "2fbd3d977966f4b66aa5e94fde0d3d1555997144"
                        ],
                        [
                            "@@ -86,8 +86,8 @@ VIS_cti_xml_out = Executable(\n     command=f\"E-Run VIS_Tasks {TASKS_VER} VIS_cti_xml_out\",\n     inputs=[\"config\", \"calibrate_cti_results_list\"],\n     outputs=[\n-        Output(\"dpdparallelcticalibration\"),\n-        Output(\"dpdserialcticalibration\"),\n+        Output(\"parallel_cti_xml_out\"),\n+        Output(\"serial_cti_xml_out\"),\n     ],\n     resources=ComputingResources(cores=1, ram=7.0, walltime=3.0),\n )\n\\ No newline at end of file\n",
                            "update output ports",
                            "James Nightingale",
                            "2023-08-03T13:40:42.000+01:00",
                            "c6634ea77228e9f0fd4ed22583f8c71455455a07"
                        ]
                    ],
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_CTIMasterCI_Pipeline/PkgDef_VIS_CTIMasterCI.py": [
                        [
                            "@@ -68,18 +68,18 @@ master_ci_estimate = Executable(\n     command=f\"E-Run VIS_Tasks {TASKS_VER} VIS_CTI_Master_CI\",\n     inputs=[\n          Input('config'),\n-#        Input(\"MDB\"),\n-        Input(\"quad_list_of_lists\")],\n+        Input(\"quad_list_of_lists\")\n+    ],\n     outputs=[Output(\"cti_master_ci\", mime_type=\"json\")],\n-    resources=ComputingResources(cores=1, ram=16.0, walltime=4.0),\n+    resources=ComputingResources(cores=1, ram=128.0, walltime=4.0),\n )\n \n-quad2FPA = Executable(command = f\"E-Run VIS_Tasks {TASKS_VER} VIS_quad_to_fpa\",\n-                      inputs = [Input(\"infilelist_data\"), \"config\"],\n-                      outputs = [Output(\"master_data\", mime_type=\"json\")],\n-                      resources = ComputingResources(cores = 1,\n-                                                     ram = 3.0,\n-                                                     walltime = 1.0))\n+quad2FPA = Executable(\n+    command = f\"E-Run VIS_Tasks {TASKS_VER} VIS_quad_to_fpa\",\n+    inputs = [Input(\"infilelist_data\"), \"config\"],\n+    outputs = [Output(\"master_data\", mime_type=\"json\")],\n+    resources = ComputingResources(cores = 1, ram = 3.0, walltime = 1.0)\n+)\n \n \n \n@@ -87,8 +87,7 @@ VIS_cti_master_ci_xml_out = Executable(\n     command=f\"E-Run VIS_Tasks {TASKS_VER} VIS_cti_master_ci_xml_out\",\n     inputs=[\"config\", \"cti_master_ci_list\"],\n     outputs=[\n-        Output(\"dpdmasterci\", mime_type=\"json\", content_type=\"listfile\"),\n-        Output(\"dpdanalysis_out\", mime_type=\"json\", content_type=\"listfile\"),\n+        Output(\"dpdmasterci\"),\n     ],\n     resources=ComputingResources(cores=1, ram=7.0, walltime=3.0),\n )\n",
                            "update VIS_CTIMasterCI ouptut ports at XML layer",
                            "James Nightingale",
                            "2023-08-06T11:45:23.000+01:00",
                            "2fbd3d977966f4b66aa5e94fde0d3d1555997144"
                        ],
                        [
                            "@@ -69,7 +69,7 @@ master_ci_estimate = Executable(\n #        Input(\"MDB\"),\n         Input(\"quad_list_of_lists\")],\n     outputs=[Output(\"cti_master_ci\", mime_type=\"json\")],\n-    resources=ComputingResources(cores=1, ram=16.0, walltime=4.0),\n+    resources=ComputingResources(cores=1, ram=256.0, walltime=4.0),\n )\n \n quad2FPA = Executable(command = f\"E-Run VIS_Tasks {TASKS_VER} VIS_quad_to_fpa\",\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_CTITimeEvolution_Pipeline/PkgDef_VIS_CTITimeEvolution.py": [
                        [
                            "@@ -17,7 +17,6 @@ from VIS_ProcessField_Pipeline.PkgDef_VIS_ProcessField import TASKS_VER\n VIS_xml_in = Executable(\n     command=f\"E-Run VIS_Tasks {TASKS_VER} VIS_cti_time_evolution_xml_in\",\n     inputs=[\n-        Input(\"auxdatafiles\"),\n         Input(\"MDB\"),\n         Input(\"cti_results_in\", content_type=\"listfile\"),\n      ],\n@@ -34,7 +33,7 @@ fit_cti_time_evolution = Executable(command   = f\"E-Run VIS_Tasks {TASKS_VER} VI\n                                       Input(\"cti_results_x1_ccd\")],\n                          outputs   = [Output(\"time_evolution_json\", mime_type=\"json\")],\n                          resources = ComputingResources(cores = 1,\n-                                                        ram = 4.0,\n+                                                        ram = 32.0,\n                                                         walltime = 6.0))\n \n VIS_cti_xml_out = Executable(\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/release_note/VIS_Software_Release_Note.md": [
                        [
                            "@@ -0,0 +1,145 @@\n+|         |**Document Identification**                                                                          |\n+|---------|-----------------------------------------------------------------------------------------------------|\n+|Title|Euclid SGS VIS PF Software Release Note |\n+|PF Release| 13.0.6 |\n+|Date:|02/08/2023|\n+|Doc. Issue| 13.0.6 |\n+|Reference:|EUCL-IAP-TN-8-019|\n+|Custodian:|C. Grenet|\n+\n+# Table of Contents\n+\n+1. [Purpose and Scope](#purpose_and_scope)\n+    * [1.1 Scope of this PF Software](#scope)\n+    * [1.2 Purpose of the PF](#purpose)\n+2. [PF Documents](#documentation)\n+3. [PF Software products](#software)\n+    * [3.1 PF Environment configuration](#envt)\n+    * [3.2 PF software products configuration](#products)\n+ 4. [Changes Major Release](#changes_and_fixed_issues)\n+    * [4.1 Functional changes in this release](#changes)\n+    * [4.2 Issues fixed](#fixed_issues)\n+5. [Patch releases](#patches)\n+6. [Known issues](#known_issues)\n+\n+# 1. Purpose and Scope <a name=\"purpose_and_scope\"></a>\n+\n+## 1.1 Scope of this PF Software Release Note <a name=\"scope\"></a>\n+\n+The objective of the **S**oftware **R**elease **N**ote (SRN) is to provide the configuration status of the software configuration item.\n+It controls its evolution during the programme or project life cycle.\n+\n+## 1.2 Purpose of this PF Release <a name=\"purpose\"></a>\n+\n+**Release 13.0** of the VIS PF has been developed for Performance Verification phase which will start beginning of August 2023.\n+\n+# 2. PF Documents <a name=\"documentation\"></a>\n+\n+\n+| RD | Title / Author | Document reference | Doc. Release |\n+| -----------   | ----------- | ----------- |----------- |\n+| [RSD](https://euclid.roe.ac.uk/projects/vis_pf/dmsf?folder_id=489) | Euclid SGS PF Processing Function Requirements Specifications | EUCL-IAP-RS-8-001 | [2.4](https://euclid.roe.ac.uk/dmsf/files/5032/view) |\n+| [SDD](https://euclid.roe.ac.uk/projects/vis_pf/dmsf?folder_id=442) | Euclid SGS PF Software Design Document | EUCL-IAP-DDD-8-001 |[1.0](https://euclid.roe.ac.uk/dmsf/files/3053/view) |\n+| [VP-STS](https://euclid.roe.ac.uk/projects/vis_pf/dmsf?folder_id=372) | Euclid SGS PF Euclid SGS PF Validation Plan and Software Tests Specifications  | EUCL-IAP-PL-8-001 |[2.6](https://euclid.roe.ac.uk/dmsf/files/4082/view) |\n+| [STP-STR](https://euclid.roe.ac.uk/projects/vis_pf/dmsf?folder_id=372) | Euclid SGS PF Software Test Plan and Test Report | EUCL-IAP-TP-8-001| [7.0.3](https://euclid.roe.ac.uk/dmsf/files/4807/view) |\n+| [SUM]()https://gitlab.euclid-sgs.uk/PF-VIS/VIS_IAL_Pipelines/-/tree/release-13.0/doc/user_manual | Euclid SGS VIS PF Software User Manual | EUCL-IAP-MA-8-002 | 4.0 |\n+| [CCB]|Euclid SGS PF Configuration Control Board report   | -  | - |\n+\n+\n+# 3. PF Software products <a name=\"software\"></a>\n+\n+## 3.1 PF Environment configuration <a name=\"envt\"></a>\n+\n+The PF User Manual [RD5] describes the principal software parts of the system, including other software, such as operating systems, utilities, other supporting systems, and other facilities, equipment or resources.\n+\n+| Envt  | Version  |\n+|------|------|\n+| EDEN | `3.1` |\n+| Data Model | `9.0.2` |\n+| PF IAL Pipelines conf. | [13.0.6](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_IAL_Pipelines/-/tree/13.0.6) |\n+\n+\n+## 3.2 PF software products configuration <a name=\"products\"></a>\n+\n+\n+| Gitlab project    | Gitlab tag | SonarQube analysis\n+| ----------- | ----------- | ----------- |\n+| [VIS_Tasks](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_Tasks) | [13.0.6](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_Tasks/-/tags/13.0.6)|[release-13.0](https://codeen-app.euclid-ec.org/sonar/dashboard?branch=release-13.0&id=VIS_Tasks)|\n+| [VIS_PyLibrary](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_PyLibrary) | [3.20.2](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_PyLibrary/-/tags/3.20.2) |[release-3.20](https://codeen-app.euclid-ec.org/sonar/dashboard?branch=release-3.20&id=VIS_PyLibrary)|\n+| [VIS_ImageTools](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_ImageTools) | [3.16.0](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_ImageTools/-/tags/3.16.0) | [release-3.16](https://codeen-app.euclid-ec.org/sonar/dashboard?branch=release-3.16&id=VIS_ImageTools)|\n+ | [VIS_CTI](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_CTI) | [5.8.1](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_CTI/-/tags/5.8.1) |[release-5.8](https://codeen-app.euclid-ec.org/sonar/dashboard?branch=release-5.8&id=VIS_CTI)|\n+ | [VIS_Instrument_Tools](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_Instrument_Tools) | [0.7.0](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_Instrument_Tools/-/tags/0.7.0) | [release-0.7](https://codeen-app.euclid-ec.org/sonar/dashboard?branch=release-0.7&id=VIS_Instrument_Tools) |\n+ | [VIS_DiffractionSpikesFocus](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_DiffractionSpikesFocus) | [1.1.0](https://gitlab.euclid-sgs.uk/PF-VIS/VIS_DiffractionSpikesFocus/-/tags/1.1.0) | [release-1.1](https://codeen-app.euclid-ec.org/sonar/dashboard?branch=release-1.1&id=VIS_DiffractionSpikesFocus) |\n+\n+\n+# 4. Main Changes in this Release <a name=\"changes_and_fixed_issues\"></a>\n+\n+This release of the VIS PF is issued for the purpose of usual progress development in the context of the Euclid SGS. It has a particular emphasis with the preparation of the forthcoming Performance and Verification Phase processing.\n+This release is deployed as part of the cvmfs and does fully comply with the CODEEN standards.\n+\n+## 4.1 Functional changes <a name=\"changes\"></a>\n+\n+This release includes the following new calibration pipelines:\n+- VIS_BloomingCalibration \n+- VIS_BrighterFatterCalibration\n+- VIS_CTICalibration\n+- VIS_CTITimeEvolution\n+- VIS_DiffractionSpikesFocus\n+- VIS_FlagObjects\n+- VIS_GainCalibration\n+- VIS_NonLinCalibration\n+- VIS_PersistenceCalibration\n+- VIS_PhotometryCalibration\n+- VIS_PTCNLCalibration\n+- VIS_SmallScaleFlat\n+- VIS_TrapPumpingCalibration\n+\n+Refer to the SUM for the function of each of these pipelines.\n+\n+Processing of science exposures has been splitted in two pipelines: VIS_ProcessField for the processing of individual exposures, with the possibility to not produce the stack; and VIS_Stacking pipeline to produce a stack from a set of calibrated exposures. \n+\n+\n+\n+## 4.2 Bugs fixed  <a name=\"fixed_issues\"></a>\n+\n+| Issue | Title |\n+| -----------   | ----------- |\n+| [#17058](https://euclid.roe.ac.uk/issues/17058)| VIS PF crashes if a task is retried|\n+| [#17592](https://euclid.roe.ac.uk/issues/17592)| Some per-exposure statistics possibly lost in master dark pipeline|\n+| [#18113](https://euclid.roe.ac.uk/issues/18113)| Short exposure catalog metadata|\n+| [#20024](https://euclid.roe.ac.uk/issues/20024)| Master dark has incorrect unit|\n+| [#20034](https://euclid.roe.ac.uk/issues/20034)| wcsfit: Floating point nan values are not allowed in FITS headers|\n+| [#20089](https://euclid.roe.ac.uk/issues/20089)| VIS_LargeFlatCalibration_Pipeline: psf_model and starmask_model inputs are mandatory|\n+\n+\n+# 6. Known issues <a name=\"known_issues\"></a>\n+\n+Bug reports and software change/addition requests should be submitted through the Euclid Redmine tool at https://euclid.roe.ac.uk/projects/vis_pf/issues.\n+\n+\n+| Issue | Title |\n+| -----------   | ----------- |\n+| [#8670](https://euclid.roe.ac.uk/issues/8670)   | Missing columns in catalogs wrt R-VIS-PRD-F-070|\n+| [#19375](https://euclid.roe.ac.uk/issues/19375) | Master bias is out of requirement| \n+| [#19677](https://euclid.roe.ac.uk/issues/19677) | Master flat is out of requirement |\n+| [#19685](https://euclid.roe.ac.uk/issues/19685) | Dark calibration is out of requirement|\n+| [#20077](https://euclid.roe.ac.uk/issues/20077) | VIS PSFs seem to be broader than the TU stars|\n+| [#22778](https://euclid.roe.ac.uk/issues/22778) | VIS_NonLinCalibration_Pipeline (pixel MODE) produces incorrect results\n+| [#22866](https://euclid.roe.ac.uk/issues/22866) | Crosstalk calibration crashes when RemoveTempFiles = True\n+| [#22976](https://euclid.roe.ac.uk/issues/22976) | VIS_MasterDark_Pipeline (95 s exposures): Exception: model_dark(): All pixels are masked (perhaps the hot pixel threshold is too low?)\n+| [#23033](https://euclid.roe.ac.uk/issues/23033) | Astrometric calibration (use-fpa-model) fails on SIM-PV2-006_R2\n+| [#23072](https://euclid.roe.ac.uk/issues/23072) | Insufficient CR rejection in the newest VIS PVPR#2 data\n+| [#23096](https://euclid.roe.ac.uk/issues/23096) | FITS files are trucated when ZipOutputs = True\n+| [#23101](https://euclid.roe.ac.uk/issues/23101) | Large-scale Flat model CCDs may be showing an indexing error\n+| [#23168](https://euclid.roe.ac.uk/issues/23168) | VIS_BrighterFatterCalibrationCalibration_Pipeline: output product is DpdVisFileContainer instead of DpdVisBFEModel\n+| [#23190](https://euclid.roe.ac.uk/issues/23190) | wcsfit crashes on SIM-PV2-008_R2 EXTRA-FOCAL and INTRA-FOCAL exposures\n+| [#23233](https://euclid.roe.ac.uk/issues/23233) | Scattered light in VIS calblock-001 data\n+| [#23243](https://euclid.roe.ac.uk/issues/23243) | VIS_NonLinCalibration_Pipeline (APERTURE mode) produces incorrect results\n+| [#23265](https://euclid.roe.ac.uk/issues/23265) | VIS_ProcessField_Pipeline: VIS_Calibrate_Photometry crashes on out-of-focus exposures\n+| [#23266](https://euclid.roe.ac.uk/issues/23266) | stacking output product XML is empty\n+\n+\n+\n+\n+\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap01.md": [
                        [
                            "",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap02.md": [
                        [
                            "",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap03.md": [
                        [
                            "",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap04.md": [
                        [
                            "@@ -45,9 +45,9 @@ The SGS document [RD7] describes through the principal software parts of the sys\n \n |   |   |\n |---|---|\n-| **PF Release:**  | `X.Y` |\n-| **EDEN:** | `i.j` |\n-| **Data Models:** | `m.n` |\n+| **PF Release:**  | `13.0` |\n+| **EDEN:** | `3.1` |\n+| **Data Models:** | `9.2` |\n \n These elements (related to the PF software) are identified **with their versions** in the **PF Release Note** [RD10].\n \n@@ -79,3 +79,64 @@ These elements (related to the PF software) are identified **with their versions\n * `VIS_TrapPumpingCalibration_Pipeline`\n * `VIS_XTalkCalibration_Pipeline`\n \n+Processing of science exposures uses two pipelines:\n+\n+* `VIS_ProcessField_Pipeline`: processing of N raw science exposures to produce calibrated exposures and associated catalogs. Optionally, production of the stack image and the associated catalog.\n+* `VIS_Stacking_Pipeline`: production of the stack image and associated catalog from calibrated exposures and associated catalogs produced by `VIS_ProcessField_Pipeline`.\n+\n+All other pipelines are intended to produce calibration models from calibration data.\n+\n+The current version of this document describes VIS pipelines operation during PV phase. We describe below the processing of some complex calblocks which require to run several pipelines.\n+\n+### PV-001 Self Calibration\n+\n+1. Execution of VIS_PSFCalibration pipeline to produce a PSF model\n+\n+   This PSF model will be used in all subsequent steps where a PSF model is needed.\n+\n+2. Execution of 2 instances of VIS_ProcessField pipeline without stacking, using the PSF model above, possibly in parallel:  \n+   * one on the raw short exposures: it will produce short calibrated exposures and catalogs\n+   * one on the raw nominal exposures: it will produce nominal calibrated exposures and catalogs\n+\n+3. Possibly in parallel\n+   * Execution of the VIS_LargeFlatCalibration pipeline on the short calibrated catalogs produced in the previous step: it will produce the short large flat\n+   * Execution of the VIS_LargeFlatCalibration pipeline on the nominal calibrated catalogs produced in the previous step: it will produce the nominal large flat\n+   * Execution of the VIS_Stacking pipeline on the nominal calibrated exposures produced in the previous step: it will produce the astrometric catalog for NIR\n+\n+   These large flats will be used in all subsequent steps where a large flat is needed.\n+\n+4. Possibly in parallel\n+   * Execution of 2 instances of VIS_ProcessField pipeline without stacking\n+     * one on the raw short exposures, using the short large flat produced in step 3\n+     * one on the raw nominal exposures, using the nominal large flat produced in step 3\n+\n+5. Possibly in parallel\n+   * Execution of VIS_PhotometryCalibration pipeline on the short calibrated catalogs produced in step 4: it will produce a first estimation of the zero point\n+   * Execution of VIS_GhostsCalibration pipeline on the ghosts catalogs produced in step 4, both nominal and short\n+   * Execution of VIS_XTalkCalibration pipeline on the raw nominal exposures\n+\n+6. Execution of 2 instances of VIS_ProcessField pipeline with stacking, possibly in parallel:\n+   * one on the raw short exposures\n+   * one on the raw nominal exposures\n+\n+   using PSF model, large flats, zero point and crosstalk model produced in the previous steps.\n+\n+   This final step wil produce the standard VIS products calibrated in photometry.\n+\n+### PV-002 NISP-P and VIS Absolute Photometric Standards\n+\n+TBW\n+   \n+\n+## PF configuration file\n+\n+Each pipeline has in input a configuration file, named hereafter VIS PF configuration file, which controls its behavior. The configuration file is of type `DpdVisConfigurationFile`.\n+\n+Three configuration files are provided, listed below with their ProductId:\n+\n+* `DpdVisConfigurationFile_EUC_VIS_ConfigFile_PF12_01JUL2023_ini`: generic configuration file, to be used when no specific instructions are provided.\n+* `DpdVisConfigurationFile_EUC_VIS_ConfigFile_PF12_01JUL2023_nostack_ini`: to be used to execute a `ProcessField` pipeline without stacking\n+* `DpdVisConfigurationFile_EUC_VIS_ConfigFile_PF12_01JUL2023_normtmp_ini`: to be used to execute a pipeline without removing temporary files from the workdir\n+\n+\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap05_AstrometryCalibration.md": [
                        [
                            "@@ -0,0 +1,97 @@\n+\\newpage\n+\n+# Pipeline `VIS_AstrometryCalibration_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_AstrometryCalibration**: production of a distortion model from a suitable set of science exposures.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_AstrometryCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_AstrometryCalibration)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    DpdVisZeroPoint -->|zero_point<br>1..1| pipeline\n+    DpdVisMasterDarkFrame -.->|masterdark<br>0..1| pipeline\n+    DpdVisMasterFlatFrame -.->|masterflat<br>0..1| pipeline\n+    DpdVisDistortionModel -.->|dist_model<br>0..1| pipeline\n+    DpdVisLargeFlatFrame -.->|lsf_model<br>0..1| pipeline\n+    DpdVisGhostModel -.->|ghost_model<br>1..1| pipeline\n+    DpdVisStarMask -.->|starmask_model<br>1..1| pipeline\n+    DpdVisBFEModel -.->|bfe_model<br>0..1| pipeline\n+    DpdTrueUniverseOutput -->|ref_catalogues<br>1..*| pipeline\n+    pipeline -->|dist_model_xml_out<br>>1..1| DpdVisDistortionModel\n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: raw science frames to be processed\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `gains_model`: gain model\n+* `ron_model`: readout noise model\n+* `saturation_model`: saturation model\n+* `masterbias`: master bias frame from `VIS_MasterBias` pipeline\n+* `flagmaps`: map of defects in darkness from `VIS_MasterDark` pipeline, map of defects in photoresponse from `VIS_MasterFlat` pipeline\n+* `xtalk_model`: crosstalk model\n+* `nlcorr_model`: non-linearity correction model\n+* `cti_model`: CTI model\n+* `zero_point`: zero point\n+* `masterdark`: master dark, not to be used as long as dark is not measurable\n+* `masterflat`: master flat frame\n+* `dist_model`: distortion model, not to be used\n+* `lsf_model`: large scale flat model from `VIS_LargeFlatCalibration` pipeline\n+* `ghost_model`: ghost model\n+* `starmask_model`: star mask model\n+* `bfe_model`: brighter-fatter model\n+* `ref_catalogues`: list of reference catalogues covering raw science frames sky area\n+\n+## Processing triggering assumptions\n+\n+The pipeline will be executed on calblock PV-023. Only nominal exposures shall be used. \n+\n+xtalk_model, nlcorr_model, cti_model, lsf_model, bfe_model should not used because the corresponding models will not be available at the time PV-023 is received.\n+\n+gains_model, ron_model, saturation_model, zero_point, ghost_model, starmask_model: on-ground models should be used.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A run on a simulated realisation of PV-023 (20 nominal exposures) requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 20    | TBW      | 5            | TBW             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap06_BloomingCalibration.md": [
                        [
                            "@@ -0,0 +1,85 @@\n+\\newpage\n+\n+# Pipeline `VIS_BloomingCalibration_Pipeline`\n+\n+\n+## Pipeline Description\n+\n+**VIS_BloomingCalibration**: Production of a blooming model containing a json file, with the threshold in ADU of the blooming effect for all quadrants. Contains also png images of the graph of the PTC (Photon Transfer Curve) for all quadrants, used to compute the blooming threshold. The PTC images are located into the Data of the calibration product.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_BloomingCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_BloomingCalibration)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    DpdVisBFEModel -.->|bfe_model<br>0..1| pipeline\n+    pipeline -->|dpdcalib_blooming<br>1..*| DpdVisBloomingModel&nbsp\n+```\n+\n+**Ports description:**\n+\n+* `DpdVisRawFrame`: raw flat field frames\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `DpdVisGainModel`: gain model from `VIS_GainCalibration` pipeline\n+* `ron_model`: readout noise model\n+* `saturation_model`: saturation model, not used\n+* `masterbias`: master bias frame from `VIS_MasterBias` pipeline\n+* `flagmaps`: map of defects in darkness from `VIS_MasterDark` pipeline, map of defects in photoresponse from `VIS_MasterFlat` pipeline\n+* `xtalk_model`: crosstalk model from VIS_XTalkCalibration_Pipeline\n+* `nlcorr_model`: non-linearity correction model\n+* `cti_model`: CTI model\n+* `bfe_model`: bfe model\n+\n+\n+\n+## Processing triggering assumptions\n+\n+During PV phase the pipeline will be triggered on all the flatfields of calblock PV-029 and calblock PV-031.\n+\n+Input ports nlcorr_model, cti_model, bfe_model shall be left empty.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+Hardware requirement for the pipeline depend on the number of input raw flat frames.\n+\n+A typical run on 10 raw flat frames requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| TBW   | TBW      | TBW          | TBW             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap07_BrighterFatterCalibration.md": [
                        [
                            "@@ -0,0 +1,83 @@\n+\\newpage\n+\n+# Pipeline `VIS_BrighterFatterCalibration_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_BrighterFatterCalibration**: Production of brighter-fatter model from a list of raw flat fields and associated oject masks.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_BrighterFatterCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_BrighterFatterCalibration)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    DpdVisFlagMap -.->|object_masks<br>0..1| pipeline\n+    pipeline -->|bfecalib_xml_out<br>1..*| DpdVisBFEModel\n+```\n+\n+**Ports description:**\n+\n+* `DpdVisRawFrame`: raw flat field frames\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `DpdVisGainModel`: gain model from `VIS_GainCalibration` pipeline\n+* `ron_model`: readout noise model\n+* `saturation_model`: saturation model\n+* `masterbias`: master bias frame from `VIS_MasterBias` pipeline\n+* `flagmaps`: map of defects in darkness from `VIS_MasterDark` pipeline, map of defects in photoresponse from `VIS_MasterFlat` pipeline\n+* `xtalk_model`: crosstalk model\n+* `nlcorr_model`: non-linearity correction model\n+* `cti_model`: CTI model\n+* `object_masks`: object masks from `VIS_FlagObjects` pipeline\n+\n+\n+\n+## Processing triggering assumptions\n+\n+During PV phase the pipeline will be triggered on variant BF-40000ADU of calblock PV-022, selecting LED3 flats only (CalibUnit.LedMask=4).\n+\n+Input ports xtalk_model, nlcorr_model, cti_model shall be left empty.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+Hardware requirement for the pipeline depend on the number of input raw flat frames.\n+\n+A typical run on 10 raw flat frames requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 10    | 5        | 7            | 160             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap08_CTICalibration.md": [
                        [
                            "@@ -0,0 +1,82 @@\n+\\newpage\n+\n+# Pipeline `VIS_CTICalibration_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_CTICalibration**: Production of a cti model at a given data and time from a list of raw charge injection images.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_CTI`\n+* `SHE_ArCTIC`\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_CTICalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_CTICalibration)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|master_bias<br>0..1| pipeline\n+    DpdVisMasterDarkFrame -.->|master_dark<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    pipeline -->|dpdcticalibration<br>1..1| DpdVisCTICalibrationResults\n+    pipeline -->|dpdanalysis_out<br>1..1| DpdVisAnalysisResults\n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: list of raw charge injection frames, ImgType.FirstType=CHARGE_INJECTION\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `flagmaps`: list of flag maps.\n+* `gains_model`: gain model\n+* `xtalk_model`: crosstalk model\n+* `masterbias`: master bias frame\n+* `masterdark`: master dark frame\n+* `nlcorr_model`: non-linearity correction model\n+* `ron_model`: readout noise model\n+* `saturation_model`: saturation model\n+* `dpdcticalibration`: CTI calibration results, including best-fit model with errors.\n+* `dpdanalysis`: quality assessment parameters\n+\n+Input ports not described above are currently unused.\n+\n+## Processing triggering assumptions\n+\n+The pipeline needs a day's ROS sequence of raw charge injection\n+frames (see CALPRODUCT-VS-005: VIS CTI Charge Injection Lines), which consists of 8 frames taken at 8 different charge\n+injection levels.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 8 raw charge injection frames requires:\n+\n+| Cores | RSS (GB)        | Walltime (h) | Disk space (GB) |\n+|-------|-----------------|-------------|-----------------|\n+| 36    | 9216 (36 * 256) | 12          | TBW             | # Estimate from workdir\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing\n+order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap09_CTIMasterCI.md": [
                        [
                            "@@ -0,0 +1,86 @@\n+\\newpage\n+\n+# Pipeline `VIS_CTIMasterCI_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_CTIMasterCI**: Production of a master charge injection image from a list of raw charge injection frames.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_CTI`\n+* `SHE_ArCTIC`\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_CTIMasterCI`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_CTIMasterCI)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|master_bias<br>0..1| pipeline\n+    DpdVisMasterDarkFrame -.->|master_dark<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    pipeline -->|dpdmasterci<br>1..1| DpdVisMasterCIFrame\n+    pipeline -->|dpdanalysis_out<br>1..1| DpdVisAnalysisResults\n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: list of raw charge injection frames, ImgType.FirstType=CHARGE_INJECTION\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `flagmaps`: list of flag maps.\n+* `gains_model`: gain model\n+* `xtalk_model`: crosstalk model\n+* `masterbias`: master bias frame\n+* `masterdark`: master dark frame\n+* `nlcorr_model`: non-linearity correction model\n+* `ron_model`: readout noise model\n+* `saturation_model`: saturation model\n+* `dpdcticalibration`: CTI calibration results, including best-fit model with errors.\n+* `dpdanalysis`: quality assessment parameters\n+\n+Input ports not described above are currently unused.\n+\n+## Processing triggering assumptions\n+\n+The pipeline only runs during PV, on reception of calblock PV-028.\n+\n+The process should be triggered independently according to the two variants in the calblock:\n+\n+- ROS variant: 32 times for each set of ROS sequence charge injection settings.\n+\n+- IG1-SCAN variant: 42 times, for each column in Table 45.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 6 raw charge injection frames requires:\n+\n+| Cores | RSS (GB)        | Walltime (h) | Disk space (GB) |\n+|-------|-----------------|--------------|-----------------|\n+| 36    | 9216 (36 * 256) | 4            | TBW             | # Estimate from workdir\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing\n+order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap10_CTITimeEvolution.md": [
                        [
                            "@@ -0,0 +1,62 @@\n+\\newpage\n+\n+# Pipeline `VIS_CTITimeEvolution_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_CTITimeEvolution**: Production of a cti model as a function of time since launch, from a list of cti calibration results from the CTI calibration pipeline.\n+\n+The VIS science pipeline will input the time-stamp of science imaging into this interpolation model, in order to deterine the CTI model used for correction.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_CTI`\n+* `SHE_ArCTIC`\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_CTITimeEvolution`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisCTICalibrationResults -->|cti_results_in<br>1..1| pipeline\n+    pipeline -->|dpdcticalibration<br>1..1| DpdVisCTITimeEvolutionModel\n+    pipeline -->|dpdanalysis_out<br>1..1| DpdVisAnalysisResults\n+```\n+\n+**Ports description:**\n+\n+* `MDB`: Mission DataBase\n+* `cti_results_in`: list of previous CTI calibration pipeline results.\n+* `dpdctitimeevolution`: CTI time evolution model.\n+* `dpdanalysis`: quality assessment parameters\n+\n+## Processing triggering assumptions\n+\n+The pipeline will not be triggered from mission start, and will be switched on when CTI calibration results\n+indicate a need for CTI correction in science data.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run requires:\n+\n+| Cores | RSS (GB)       | Walltime (h) | Disk space (GB)                            |\n+|-------|----------------|--------------|--------------------------------------------|\n+| 36    | 1152 (36 * 32) | 6            | 1+ (Increases as more CTI results created) | # Estimate from workdir\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing\n+order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap11_DiffractionSpikesFocus.md": [
                        [
                            "@@ -0,0 +1,63 @@\n+\\newpage\n+\n+# Pipeline `VIS_DiffractionSpikesFocus_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_DiffractionSpikesFocus**: The aim of the algorithm is to measure (primarily) focus variations by detecting diffraction spikes around bright stars (including saturated stars) and measuring the lateral shifts of the spikes, following [EUCL-OXF-TN-8-\n+012](https://euclid.roe.ac.uk/dmsf/files/17822/view) although with a different measurement method from what was proposed in that Tech Note.\n+\n+Diffraction spike detection is carried out on each individual science exposure, by first generating an expected spike pattern using the PSF toolkit, for various values of telescope focus, then using a Fourier filtering method to cross-correlate the predicted spike patterns with the data. The best-fitting spike pattern is used to output an estimated focus value for each star.\n+\n+A focus estimate for the entire exposure is obtained from a weighted average over all detected star patterns with outlier rejection.\n+\n+The core algorithm was written by OU-SHE Lance Miller.\n+\n+The related GitLab projects are [RD6]:\n+\n+* `VIS_DiffractionSpikesFocus`\n+* `SHE_PSFToolkit`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of Pipeline `VIS_DiffractionSpikesFocus`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_DiffractionSpikesFocus)\n+    DpdVisCalibratedFrame ==>|cal_frames_in<br>1..*| pipeline\n+    DpdVisFileContainer -->|nominal_focus<br>1..1| pipeline\n+    pipeline -->|focus_list_out<br>1..*| DpdVisFileContainer&nbsp;\n+```\n+\n+**Ports description:**\n+\n+* `cal_frames_in`: input list of VIS processed science exposures\n+* `nominal_focus`: initial central focus value. It's a floating point number in micrometre stored in a genereic 'nominal_focus' key parameter\n+* `focus_list_out`: list of focus analysis results per exposure\n+\n+## Processing triggering assumptions\n+\n+The pipeline may be triggered anytime a telescope focus value measurement is needed, from any VIS processed science exposure.\n+\n+It is not currently planned to be triggered automatically. It will first be run manually until a focus monitoring automatisation scheme is devised.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+Hardware requirement for the pipeline depend on the number of input science exposures ([#21328#note-52](https://euclid.roe.ac.uk/issues/21328#note-52)).\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space |\n+| ----- | -------- | ------------ | ---------- |\n+|     8 |       24 | 0.25/exp     | 100KB/exp  |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap12_FlagObjects.md": [
                        [
                            "@@ -0,0 +1,100 @@\n+\\newpage\n+\n+# Pipeline `VIS_FlagObjects_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_FlagObjects**: Production of masks of celestial objects in science exposures.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_FlagObjects`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_FlagObjects)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    DpdVisZeroPoint -->|zero_point<br>1..1| pipeline\n+    DpdVisMasterDarkFrame -.->|masterdark<br>0..1| pipeline\n+    DpdVisMasterFlatFrame -.->|masterflat<br>0..1| pipeline\n+    DpdVisPSFModel -->|psf_model<br>1..1| pipeline\n+    DpdVisDistortionModel -.->|dist_model<br>0..1| pipeline\n+    DpdVisLargeFlatFrame -.->|lsf_model<br>0..1| pipeline\n+    DpdVisGhostModel -.->|ghost_model<br>0..1| pipeline\n+    DpdVisStarMask -.->|starmask_model<br>0..1| pipeline\n+    DpdVisBFEModel -.->|bfe_model<br>0..1| pipeline\n+    DpdTrueUniverseOutput -.->|ref_catalogues<br>0..*| pipeline\n+    pipeline -->|objects_flagmap_xml_out<br>1..*| DpdVisFlagMap\n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: raw science exposures\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `gains_model`: gain model\n+* `ron_model`: readout noise model\n+* `saturation_model`: saturation model\n+* `masterbias`: master bias frame from `VIS_MasterBias` pipeline\n+* `flagmaps`: map of defects in darkness from `VIS_MasterDark` pipeline, map of defects in photoresponse from `VIS_MasterFlat` pipeline\n+* `xtalk_model`: empty\n+* `nlcorr_model`: empty\n+* `cti_model`: empty\n+* `zero_point`: on-ground zero point (not used by the pipeline)\n+* `masterdark`: master dark, not to be used as long as dark is not measurable\n+* `masterflat`: master flat frame, not to be used\n+* `psf_model`: PSF model from `VIS_PSFCalibration` pipeline, otherwise any DpdVisPSFModel (not used by the pipeline)\n+* `dist_model`: empty\n+* `lsf_model`: empty\n+* `ghost_model`: empty\n+* `starmask_model`: empty\n+* `bfe_model`: empty\n+* `ref_catalogues`: empty\n+* `objects_flagmap_xml_out`: list of object masks, one for each input exposure\n+\n+## Processing triggering assumptions\n+\n+The pipeline will be triggered on science exposures taken at the same pointing than flat field exposures. It will produce a mask of celestial objects for each pointing. These masks will be used by the `VIS_MasterFlat` pipeline to exclude pixels affected by sky objects from its processing.\n+\n+The way exposures are grouped in different instances of the pipeline does not matter, provided that the masks corresponding to a given input set of flat fields are available when `VIS_MasterFlat` pipeline is triggered.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+Hardware requirement for the pipeline depends on the number of input raw science exposure.\n+\n+A typical run requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| TBW   | TBW      | TBW          | TBW             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap13_GainCalibration.md": [
                        [
                            "@@ -0,0 +1,85 @@\n+\\newpage\n+\n+# Pipeline `VIS_GainCalibration_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_GainCalibration**: Production of gain model for each quadrant from a list of raw flat fields\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_GainCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_GainCalibration)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    DpdVisMasterDarkFrame -.->|masterdark<br>0..1| pipeline\n+    DpdVisBFEModel -.->|bfe_model<br>0..1| pipeline\n+    DpdVisFlagMap -.-> |object_masks<br>0..*| pipeline\n+    pipeline -->|gain_model_xml_out<br>1..*| DpdVisGainModel\n+```\n+\n+**Ports description:**\n+\n+* `DpdVisRawFrame`: raw flat field frames\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `gains_model`: reference gain model (most recent valid gain model or on-ground model)\n+* `ron_model`: readout noise model\n+* `saturation_model`: saturation model\n+* `masterbias`: master bias frame from `VIS_MasterBias` pipeline\n+* `flagmaps`: map of defect in darkness from `VIS_MasterDark` pipeline, map of defects in photoresponse from `VIS_MasterFlat` pipeline\n+* `xtalk_model`: crosstalk model\n+* `nlcorr_model`: non-linearity correction model\n+* `cti_model`: CTI model\n+* `masterdark`: master dark, not to be used as long as dark is not measurable\n+* `bfe_model`: brighter-fatter model\n+* `object_masks`: objects masks from VIS_FlagObjects_Pipeline\n+\n+## Processing triggering assumptions\n+\n+During PV phase the pipeline will be triggered on variant LOW1-1000ADU of calblock PV-022, selecting LED3 flats only (CalibUnit.LedMask=4).\n+\n+Input ports xtalk_model, nlcorr_model, cti_model and bfe_model shall be left empty.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+Hardware requirement for the pipeline depend on the number of input raw flat frames.\n+\n+A typical run on 10 raw flat frames requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| TBW   | TBW      | TBW          | TBW             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap14_GhostsCalibration.md": [
                        [
                            "@@ -0,0 +1,62 @@\n+\\newpage\n+\n+# Pipeline `VIS_GhostsCalibration_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_GhostsCalibration**: Production of a ghost model from a list of ghosts catalogs\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_GhostsCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_GhostsCalibration)\n+    DpdVisFileContainer ==>|ghost_cat_list<br>1..*| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGhostModel -->|ref_ghost_model_in<br>1..1| pipeline\n+    pipeline -->|ghost_model_xml_out<br>1..*| DpdVisGhostModel \n+```\n+\n+**Ports description:**\n+\n+* `ghost_cat_list`: list of ghosts catalogs, DpdVisFileContainer with VisProduct=ghost_catalogue\n+* `MDB`: Mission DataBase\n+* `ref_ghost_model_in`: reference ghost model (most recent valid model or on-ground model)\n+* `ghost_model_xml_out`: output ghost model\n+\n+## Processing triggering assumptions\n+\n+During PV phase the pipeline will be trigerred on the ghosts catalogs produced by the second run of `VIS_ProcessField` pipeline on calblock PV-001, after large flat correction. The two set of catalogs produced by `VIS_ProcessField`, from nominal and short exposures, will be used.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 120 ghosts catalogs requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 1     | TBW      | 0.2          | 0.003           |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n+\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap15_LargeFlatCalibration.md": [
                        [
                            "@@ -0,0 +1,60 @@\n+\\newpage\n+\n+# Pipeline `VIS_LargeFlatCalibration_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_LargeFlatCalibration**: Production of a large flat from a list of raw science exposures.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_LargeFlatCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_LargeFlatCalibration)\n+    DpdVisCalibratedFrameCatalog ==>|catalogues_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    pipeline -->|largeflatcal_output<br>1..1| DpdVisLargeFlatFrame\n+```\n+\n+**Ports description:**\n+\n+* `catalogues_in`: VIS single exposure catalogs\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `largeflatcal_output`: large flat\n+\n+## Processing triggering assumptions\n+\n+This pipeline will be executed during the processing of calblock PV-001. It will be triggered on the DpdVisCalibratedFrameCatalogs produced by a first ProcessField pipeline executed on PV-001 raw exposures (see description of PV-001 processing in chapter 4). Two instances of the pipeline will be run, one for the short exposures and one for the nominal exposures.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 60 raw bias frames requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| TBW   | TBW      | 0.5          | 10              |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap16_MasterBias.md": [
                        [
                            "@@ -0,0 +1,74 @@\n+\\newpage\n+\n+# Pipeline `VIS_MasterBias`\n+\n+## Pipeline Description\n+\n+**VIS_MasterBias**: Production of a master bias from a list of raw bias frames.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_MasterBias`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_MasterBias)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    pipeline -->|dpdcalib_data<br>1..1| DpdVisMasterBiasFrame\n+    pipeline -->|dpdanalysis<br>1..1| DpdVisAnalysisResults\n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: list of raw bias frames, ImgType.FirstType=BIAS\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `gains_model`: gain model\n+* `ron_model`: readout noise model\n+* `dpdcalib_data`: master bias\n+* `dpdanalysis`: quality assessment parameters\n+\n+Input ports not described above are currently unused.\n+\n+## Processing triggering assumptions\n+\n+The pipeline needs 60 or more raw bias frames.\n+\n+During PV it will be triggered on reception of calblock PV-021.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 60 raw bias frames requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 60    | TBW      | 2            | 300             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap17_MasterDark.md": [
                        [
                            "@@ -0,0 +1,78 @@\n+\\newpage\n+\n+# Pipeline `VIS_MasterDark_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_MasterDark**: Production of a master dark from a list of raw dark frames.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_MasterDark`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_MasterDark)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    pipeline -->|dpdcalib_data<br>1..1| DpdVisMasterDarkFrame\n+    pipeline -->|dpdcalib_flag<br>1..1| DpdVisFlagMap\n+    pipeline -->|dpdanalysis<br>1..1| DpdVisAnalysisResults\n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: list of raw bias frames, ImgType.FirstType=DARK\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `gains_model`: gain model\n+* `ron_model`: readout noise model\n+* `masterbias`: master bias frame from `VIS_MasterBias` pipeline\n+* `dpdcalib_data`: master dark\n+* `dpdcalib_flag`: map of defects in darkness\n+* `dpdanalysis`: quality assessment parameters\n+\n+Input ports not described above are currently unused.\n+\n+## Processing triggering assumptions\n+\n+The pipeline needs 30 or more raw dark frames. Although it can support dark frames of different durations, it will be triggered with dark frames of same duration (ExposureTime) only.\n+\n+During PV it will be triggered on reception of calblock PV-021.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 30 raw dark frames requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 30    | TBW      | 1.5          | 520             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap18_MasterFlat.md": [
                        [
                            "@@ -0,0 +1,93 @@\n+\\newpage\n+\n+# Pipeline `VIS_MasterFlat_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_MasterFlat**: Production of a master flat from a list of raw flat frames.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_MasterFlat`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_MasterFlat)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    DpdVisMasterDarkFrame -.->|masterdark<br>0..1| pipeline\n+    DpdVisBFEModel -.->|bfe_model<br>0..1| pipeline\n+    DpdVisFlagMap -.->|object_masks<br>0..1| pipeline\n+    pipeline -->|dpdcalib_data<br>1..1| DpdVisMasterFlatFrame\n+    pipeline -->|dpdcalib_flag<br>1..1| DpdVisFlagMap\n+    pipeline -->|dpdanalysis<br>1..1| DpdVisAnalysisResults\n+    pipeline -->|dpd_ledprofile<br>1..1| DpdVisFileContainer\n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: list of raw flat frames, ImgType.FirstType=FLAT\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `gains_model`: gain model\n+* `ron_model`: readout noise model\n+* `masterbias`: master bias frame from `VIS_MasterBias` pipeline\n+* `flagmaps`:  map of defects in darkness from `VIS_MasterDark` pipeline\n+* `object_masks`: masks of celestial objects from `VIS_FlagObjects` pipeline\n+* `dpdcalib_data`: master flat\n+* `dpdcalib_flag`: map of defects in photoresponse\n+* `dpdanalysis`: quality assessment parameters\n+* `dpd_ledprofile`: calibration unit profile\n+\n+Input ports not described above are currently unused.\n+\n+## Processing triggering assumptions\n+\n+During PV phase the pipeline will be triggered on the different variants of calblock PV-022.\n+\n+One pipeline will be triggered for each pair (LED, fluence).\n+\n+LED can be selected from CalibUnit.LedMask, a 8-bit field indicating which LED is active: Bit0 (LSB) = LED1, ..., Bit5 = LED6 (see LE1 data model).\n+Fluence can be selected from ObservationSequence.CalBlockVariant: each variant except LED56-PRNU1-PRNU2-BF contains flat fields of one fluence only.\n+\n+The way to select fluence in calblock LED56-PRNU1-PRNU2-BF is TBD (but see https://euclid.roe.ac.uk/issues/21059).\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+Hardware requirement for the pipeline depend on the number of input raw flat frames.\n+\n+A typical run on 32 raw flat frames requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 50    | TBW      | 2            | 164             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap19_NonLinCalibration.md": [
                        [
                            "@@ -0,0 +1,5 @@\n+\\newpage\n+\n+# Pipeline `VIS_NonLinCalibration_Pipeline`\n+\n+TBW\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap20_PSFCalibration.md": [
                        [
                            "@@ -0,0 +1,98 @@\n+\\newpage\n+\n+# Pipeline `VIS_PSFCalibration_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_PSFCalibration**: Production of a PSF model from raw science exposures.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_PSFCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_PSFCalibration)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    DpdVisZeroPoint -.->|zero_point<br>0..1| pipeline\n+    DpdVisMasterDarkFrame -.->|masterdark<br>0..1| pipeline\n+    DpdVisMasterFlatFrame -.->|masterflat<br>0..1| pipeline\n+    DpdVisPSFModel -.->|psf_model<br>0..1| pipeline\n+    DpdVisDistortionModel -.->|dist_model<br>0..1| pipeline\n+    DpdVisLargeFlatFrame -.->|lsf_model<br>0..1| pipeline\n+    DpdVisGhostModel -.->|ghost_model<br>0..1| pipeline\n+    DpdVisStarMask -.->|starmask_model<br>0..1| pipeline\n+    DpdVisBFEModel -.->|bfe_model<br>0..1| pipeline\n+    DpdTrueUniverseOutput -.->|ref_catalogues<br>0..*| pipeline\n+    pipeline -->|psf_model_xml_out<br>1..1| DpdVisPSFModel\n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: raw science frames to be processed\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `gains_model`: gain model\n+* `ron_model`: readout noise model\n+* `saturation_model`: saturation model\n+* `masterbias`: master bias frame from `VIS_MasterBias` pipeline\n+* `flagmaps`: map of defect in darkness from `VIS_MasterDark` pipeline, map of defects in photoresponse from `VIS_MasterFlat` pipeline\n+* `xtalk_model`: crosstalk model\n+* `nlcorr_model`: non-linearity correction model\n+* `cti_model`: CTI model\n+* `zero_point`: zero point, not used\n+* `masterdark`: master dark, not to be used as long as dark is not measurable\n+* `masterflat`: master flat frame\n+* `psf_model`: PSF model, not used\n+* `dist_model`: distortion model, not used\n+* `lsf_model`: large scale flat model from `VIS_LargeFlatCalibration` pipeline, none if not available\n+* `ghost_model`: ghost model, not used\n+* `starmask_model`: star mask model, not used\n+* `bfe_model`: brighter-fatter model\n+* `ref_catalogues`: list of reference catalogues covering raw science frames sky area, not used\n+\n+## Processing triggering assumptions\n+\n+The `VIS_PSFCalibration` pipeline will be the first one to be trigerred on calblock PV-001.\n+\n+It will be executed on short science exposures only.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 58 short science exposures requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 58    | TBW      | 10           | 940             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap21_PTCNLCalibration.md": [
                        [
                            "@@ -0,0 +1,83 @@\n+\\newpage\n+\n+# Pipeline `VIS_PTCNLCalibration_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_PTCNLCalibration**: Production of Non linearity polynomial coefficients from a list of raw flats frames.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_PTCNLCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_PTCNLCalibration)\n+    DpdVisConfigurationFile ==>|vis_config_in<br>1..1   | pipeline\n+    DpdMdbDataBase          ==>|MDB<br>1..1             | pipeline\n+    DpdVisRawFrame          ==>|raw_frames_in<br>1..*   | pipeline\n+    DpdVisFlagmap           ==>|flagmaps<br>1..*        | pipeline\n+    DpdVisGainModel         -->|gains_model<br>1..1     | pipeline\n+    DpdVisBloomingModel     -->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame   ==>|masterbias<br>0..1      | pipeline\n+    DpdVisMasterDarkFrame   -->|masterdark<br>0..1      | pipeline\n+    DpdVisXTalkModel        -->|xtalk_model<br>0..1     | pipeline\n+    DpdVisNonLinearityModel -->|nlcorr_model<br>0..1    | pipeline\n+    DpdVisRONModel          -->|ron_model<br>1..1       | pipeline\n+    DpdVisCTIModel          -->|cti_model<br>0..1       | pipeline\n+    DpdVisBFEModel          -->|bfe_model<br>0..1       | pipeline\n+    DpdVisFlagmap           ==>|object_masks<br>1..*    | pipeline\n+    pipeline                ==>|dpdcalib_ptc<br>1..1    | DpdVisFileContainer\n+    pipeline                ==>|dpdcalib_nl<br>1..1     | DpdVisFileContainer\n+```\n+\n+**Ports description:**\n+\n+* `vis_config_in`   : VIS PF configuration file\n+* `MDB`             : Mission DataBase\n+* `raw_frames_in`   : list of raw flat frames, ImgType.FirstType=FLAT\n+* `flagmaps`        : map of defect in darkness from `VIS_MasterDark` pipeline, map of defects in\n+* `gains_model`     : gain model\n+* `saturation_model`: saturation model\n+* `masterbias`      : master bias frame from `VIS_MasterBias` pipeline\n+* `masterdark`      : master dark frame from `VIS_MasterDark` pipeline (to be left empty)\n+* `xtalk_model`     : crosstalk model\n+* `nlcorr_model`    : non-linearity correction model (to be left empty)\n+* `ron_model`       : readout noise model\n+* `cti_model`       : CTI model\n+* `bfe_model`       : brighter-fatter model (to be left empty)\n+* `object_masks`    : list of object masks, one for each input nominal/short exposure corresponding to the flat pair\n+* `dpdcalib_ptc`    : ptc mean, variance and variance error values for each quadrant json file\n+* `dpdcalib_nl`     : non linearity polynomial coefficients for each quadrant json file\n+\n+## Processing triggering assumptions\n+\n+The pipeline needs at least one pair of flats of same OBS_ID, PTG_ID, nominal fluence value or more as input\n+\n+During PV it will be triggered on reception of calblock PV-029 all variants.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 42 flat frames paires requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| TBW   | TBW      | 33           | TBW             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap22_PersistenceCalibration.md": [
                        [
                            "@@ -0,0 +1,78 @@\n+\\newpage\n+\n+# Pipeline `VIS_PersistenceCalibration_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_PersistenceCalibration**: Production of Non linearity polynomial coefficients from a list of raw flats frames.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_PersistenceCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_PersistenceCalibration)\n+    DpdMdbDataBase          ==>|MDB<br>1..1                 | pipeline\n+    DpdVisRawFrame          ==>|raw_frames_in<br>1..*       | pipeline\n+    DpdVisFlagmap           ==>|flagmaps<br>1..*            | pipeline\n+    DpdVisGainModel         -->|gains_model<br>1..1         | pipeline\n+    DpdVisBloomingModel     -->|saturation_model<br>0..1    | pipeline\n+    DpdVisMasterBiasFrame   ==>|masterbias<br>0..1          | pipeline\n+    DpdVisMasterDarkFrame   -->|masterdark<br>0..1          | pipeline\n+    DpdVisXTalkModel        -->|xtalk_model<br>0..1         | pipeline\n+    DpdVisNonLinearityModel -->|nlcorr_model<br>0..1        | pipeline\n+    DpdVisRONModel          -->|ron_model<br>1..1           | pipeline\n+    DpdVisCTIModel          -->|cti_model<br>0..1           | pipeline\n+    DpdVisConfigurationFile ==>|vis_config_in<br>1..1       | pipeline\n+    DpdVisBFEModel          -->|bfe_model<br>0..1           | pipeline\n+    pipeline                -->|dpdcalib_persistence<br>1..1| DpdVisFileContainer\n+```\n+\n+**Ports description:**\n+\n+* `MDB`                  : Mission DataBase\n+* `raw_frames_in`        : list of raw flat frames, ImgType.FirstType=FLAT\n+* `flagmaps`             : map of defect in darkness from `VIS_MasterDark` pipeline, map of defects in\n+* `gains_model`          : gain model\n+* `saturation_model`     : saturation model\n+* `masterbias`           : master bias frame from `VIS_MasterBias` pipeline\n+* `masterdark`           : master dark frame from `VIS_MasterDark` pipeline\n+* `xtalk_model`          : crosstalk model\n+* `nlcorr_model`         : non-linearity correction model\n+* `ron_model`            : readout noise model\n+* `cti_model`            : CTI model\n+* `vis_config_in`        : VIS PF configuration file\n+* `bfe_model`            : brighter-fatter model\n+* `dpdcalib_persistence` : json file containing difference between dark exposures, mean, variance and mean err of persistence\n+\n+## Processing triggering assumptions\n+\n+The pipeline needs 14 dark frames as input.\n+\n+During PV it will be triggered on reception of calblock PV-031 all variants.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 14 dark frames paires requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| TBW   | TBW      | TBW          | TBW             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap23_PhotometryCalibration.md": [
                        [
                            "@@ -0,0 +1,60 @@\n+\\newpage\n+\n+# Pipeline `VIS_PhotometryCalibration_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_PhotometryCalibration**: production of the VIS zeropoint.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of pipeline `VIS_PhotometryCalibration`.  For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_PhotometryCalibration)\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisCalibratedFrameCatalog ==>|catalogues_in<br>1..*| pipeline\n+    pipeline -->|zero_point_xml_out<br>1..1| DpdVisZeroPoint\n+```\n+\n+**Ports description:**\n+\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `catalogues_in`: calibrated input catalogues\n+* `zero_point_xml_out`: VIS zero point\n+\n+## Processing triggering assumptions\n+\n+The pipeline will be triggered during the processing of calblocks PV-001 and PV-002 on the DpdVisCalibratedFrameCatalog produced by ProcessField pipelines. See chapter 4 for more details on PV-001 and PV-002 processing.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run on 60 raw bias frames requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 1     | TBW      | 0.25         | 0.002           |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+ \n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap24_ProcessField.md": [
                        [
                            "@@ -0,0 +1,117 @@\n+\\newpage\n+\n+# Pipeline `VIS_ProcessField_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_ProcessField**: Production of calibrated frames and associated catalogs from a list of raw science exposures. Optionally, production of the stacked image and its associated catalog.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_ProcessField`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_ProcessField)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    DpdVisZeroPoint -->|zero_point<br>1..1| pipeline\n+    DpdVisMasterDarkFrame -.->|masterdark<br>0..1| pipeline\n+    DpdVisMasterFlatFrame -.->|masterflat<br>0..1| pipeline\n+    DpdVisPSFModel -->|psf_model<br>1..1| pipeline\n+    DpdVisDistortionModel -->|dist_model<br>1..1| pipeline\n+    DpdVisLargeFlatFrame -.->|lsf_model<br>0..1| pipeline\n+    DpdVisGhostModel -->|ghost_model<br>1..1| pipeline\n+    DpdVisStarMask -->|starmask_model<br>1..1| pipeline\n+    DpdVisBFEModel -.->|bfe_model<br>0..1| pipeline\n+    DpdTrueUniverseOutput -->|ref_catalogues<br>1..*| pipeline\n+\n+    pipeline -->|dpdcalibrated_frames<br>1..*| DpdVisCalibratedFrame\n+    pipeline -->|dpdcalibrated_catalogues<br>1..*| DpdVisCalibratedFrameCatalog\n+    pipeline -->|dpdghost_catalogues<br>1..*| DpdVisFileContainer\n+    pipeline -.->|dpdstacked_frame<br>0..1|DpdVisStackedFrame\n+    pipeline -.->|dpdstacked_catalogue<br>0..1|DpdVisStackedFrameCatalog\n+    pipeline -->|dpdanalysis_out<br>1..*| DpdVisAnalysisResults\n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: raw science frames to be processed\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `gains_model`: gain model\n+* `ron_model`: readout noise model\n+* `saturation_model`: saturation model\n+* `masterbias`: master bias frame from `VIS_MasterBias` pipeline\n+* `flagmaps`: map of defect in darkness from `VIS_MasterDark` pipeline, map of defects in photoresponse from `VIS_MasterFlat` pipeline\n+* `xtalk_model`: crosstalk model\n+* `nlcorr_model`: non-linearity correction model\n+* `cti_model`: CTI model\n+* `zero_point`: zero point\n+* `masterdark`: master dark, not to be used as long as dark is not measurable\n+* `masterflat`: master flat frame\n+* `psf_model`: PSF model from `VIS_PSFCalibration` pipeline\n+* `dist_model`: distortion model\n+* `lsf_model`: large scale flat model from `VIS_LargeFlatCalibration` pipeline\n+* `ghost_model`: ghost model\n+* `starmask_model`: star mask model\n+* `bfe_model`: brighter-fatter model\n+* `ref_catalogues`: list of reference catalogues covering raw science frames sky area\n+* `dpdcalibrated_frames`: calibrated images\n+* `dpdcalibrated_catalogues`: calibrated images catalogues\n+* `dpdghost_catalogues`: ghosts catalogues, to be used by `VIS_GhostsCalibration` pipeline\n+* `dpdstacked_frame`: stacked image\n+* `dpdstacked_catalogue`: stacked image catalogue\n+* `dpdanalysis_out`: quality assessment parameters\n+\n+\n+## Processing triggering assumptions\n+\n+During nominal operations the pipeline will be triggered on each observation (ROS). It will also be executed at different stages during PV phase, for the processing of several calblocks.\n+\n+Either during PV or nominal operations, short and nominal science exposures should always be processed in different instances of the pipeline, because the large flat model is different depending on exposure duration.\n+\n+Below we describe the operation of the pipeline during PV, in chronological order of calblocks.\n+\n+TBW\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+Hardware configuration requirements for the pipeline depends on the number of input exposures.\n+\n+N being the cumber of input exposuers:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| N     | TBW      | TBW          | 352 * N + 140   |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap25_SmallScaleFlat.md": [
                        [
                            "@@ -0,0 +1,64 @@\n+\\newpage\n+\n+# Pipeline `VIS_SmallScaleFlat_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_SmallScaleFlat**: Produce a 'small-scale' master flat from a list of single-LED / single-fluence master flats.\n+\n+The VIS_SmallScaleFlat pipelines first produces an 'extrapolated to 0 ADU' master flat per LED using all the different fluences available for each LED and extrapolating linearly each pixel to a 0 ADU signal.\n+\n+It then combines all the extrapolated master flat models per LED using an equal weight average. LED weights could be calculated to better fit a given signal SED, but this has not been decided and done yet ([#19832#note-23](https://euclid.roe.ac.uk/issues/19832#note-23)).\n+\n+The related GitLab projects are [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_SmallScaleFlat`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_SmallScaleFlat)\n+    DpdVisRawFrame ==>|prnulist_in<br>1..*| pipeline\n+    DpdVisFlagMap -->|flagmaps_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    pipeline -->|smallscaleflat_out<br>1..1| DpdVisMasterFlatFrame\n+    pipeline -->|prnuflagmap_out<br>1..1| DpdVisFlagMap&nbsp;\n+```\n+\n+**Ports description:**\n+\n+* `prnulist_in`: input list of master flats per LED and per fluence\n+* `flagmaps_in`: input list of master flat associated flagmaps\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `smallscaleflat_out`: output small-scale master flat\n+* `prnuflagmap_out`: output small-scale master flat flagmap\n+\n+## Processing triggering assumptions\n+\n+During PV phase, the pipeline will be triggered when a small-scale flat model is needed to process science data, using available PV-022 master flat models.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+Hardware requirement for the pipeline depend on the number of input master flats and LEDs.\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 1/LED | TBD      | TBD          | TBD             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap26_Stacking.md": [
                        [
                            "@@ -0,0 +1,61 @@\n+\\newpage\n+\n+# Pipeline `VIS_Stacking`\n+\n+## Pipeline Description\n+\n+**VIS_Stacking**: Production of a stack image and associated catalog from a list of calibrated exposures.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of pipeline `VIS_Stacking`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_Stacking)\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdTrueUniverseOutput   -->|ref_catalogues<br>1..*| pipeline\n+    DpdVisCalibratedFrame   ==>|exposure_list<br>1..*| pipeline\n+    pipeline -->|dpdstacked_frame<br>1..1| DpdVisStackedFrame\n+    pipeline -->|dpdstacked_catalogue<br>1..1| DpdVisStackedFrameCatalog\n+```\n+\n+**Ports description:**\n+\n+* `vis_config_in`: VIS PF configuration file\n+* `ref_catalogues`: list of reference catalogues covering input exposures sky area\n+* `exposure_list`: list of input calibrated exposures\n+* `dpdstacked_frame`: stack image\n+* `dpdstacked_catalogue`: catalogue of the stack image\n+\n+## Processing triggering assumptions\n+\n+The pipeline will be triggered on DpdVisCalibratedFrames produced by the VIS_ProcessField pipeline to produce a single astrometric catalog for NIR during processing of calblocks PV-001 and PV-002.\n+\n+## Hardware configuration and related performances\n+\n+Hardware configuration for the pipeline depends on the number of input exposures.\n+\n+Processing of the 60 exposures of PV-001 requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| TBW   | TBW      | 15           | 220             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n+\n+\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap27_TrapPumpingCalibration.md": [
                        [
                            "@@ -0,0 +1,97 @@\n+\\newpage\n+\n+# Pipeline `VIS_TrapPumpingCalibration_Pipeline`\n+\n+## Pipeline Description\n+\n+**VIS_TrapPumpingCalibration**: Production of CCD trap analysis from trap pumping (TP) data.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of `Pipeline VIS_TrapPumpingCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_TrapPumpingCalibration)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisMasterDarkFrame -.->|masterdark<br>0..1| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    DpdVisBFEModel -.->|bfe_model<br>0..1| pipeline\n+    pipeline -->|tp_params_xml<br>1..1| DpdVisTrapPumpingResults\n+    pipeline -->|analysis_xml<br>1..1| DpdVisAnalysisResults\n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: list of raw TP frames, ImgType.FirstType=TRAP_PUMPING\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase (not used by the pipeline)\n+* `gains_model`: gain model (not used by the pipeline)\n+* `ron_model`: readout noise model (not used by the pipeline)\n+* `tp_params_xml`: trap parameters from analysis of TP data\n+* `analysis_xml`: quality assessment parameters and plots\n+\n+Input ports not described above are currently unused.\n+\n+## Processing triggering assumptions\n+\n+The pipeline can accept vertical (parallel) trap pumping (VTP) or multiple-readout serial trap pumping (MSTP) data. Separate instances of each of these are run for different TP parameter configurations. A configuration is defined by a combination of a charge injection (CI) injection gate 1 (IG1) voltage and a TP \"shuffling mode\". The configurations are described in general terms below, and specific details of PV configurations are given in the following [subsection](#pv-configurations).\n+\n+For VTP (`TrapPumping.Status=Parallel`), each pipeline instance requires 1 reference CI frame and 11 TP frames. The reference frame is specifically CI for TP: it has `TrapPumping.Status=Parallel` but `ParallelTrapPumpingParameters.ShufflingCyclesCount=1`, being effectively a VTP frame without pumping. The TP frames each have a different value of `ParallelTrapPumpingParameters.PhaseTime`. All frames for each pipeline instance must share the same `ChargeInjection.Parameters.InjectionGate1Voltage`, and the TP frames must share the same `ParallelTrapPumpingParameters.ShufflingMode`.\n+\n+For MSTP (`TrapPumping.Status=MultipleSerial`), each pipeline instance requires 2 frames with the same `ChargeInjection.Parameters.InjectionGate1Voltage` and `SerialTrapPumpingParameters.SerialTrapPumpingParameterList.SerialTrapPumpingParameterSet1.ShufflingMode`. Each frame has a different set of `SerialTrapPumpingParameterSet?.DwellingTime` values.\n+\n+### PV configurations\n+\n+During PV the pipeline will be triggered on reception of calblock PV-027, with an instance to be run for each TP parameter configuration. For VTP, there are 2 IG1 voltages and 4 shuffling modes, giving a total of 8 pipeline instances. For MSTP, there are 2 IG1 voltages and 2 shuffling modes, so 4 instances. The frame selection queries are given below.\n+\n+**VTP:**\n+\n+The queries follow the pattern\n+```\n+ObservationSequence.CalblockId=PV-027&ObservationSequence.CalblockVariant=PARALLEL-CI-<variant>&(TrapPumping.ParallelTrapPumpingParameters.ShufflingCyclesCount=1|TrapPumping.ParallelTrapPumpingParameters.ShufflingMode=<mode>)\n+```\n+with `<variant>` taking the values `HIGH` and `LOW` and, for each of these, `<mode>` taking the values `234`, `123`, `341` and `412`.\n+\n+**STP:**\n+\n+The queries follow the pattern\n+```\n+ObservationSequence.CalBlockId=PV-027&ObservationSequence.CalBlockVariant=SERIAL&ChargeInjection.Parameters.InjectionGate1Voltage.Value=<ig1>&TrapPumping.SerialTrapPumpingParameters.SerialTrapPumpingParameterList.SerialTrapPumpingParameterSet1.ShufflingMode=<mode>\n+```\n+with `<ig1>` taking the values `4.0` and `4.75` and, for each of these, `<mode>` taking the values `23` and `31`.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+A typical run of VTP is estimated to use:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 144   | TBD      | <1           | 150             |\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap28_XTalkCalibration.md": [
                        [
                            "@@ -0,0 +1,98 @@\n+\\newpage\n+\n+# Pipeline `VIS_XTalkCalibration_Pipeline`\n+\n+**VIS_XTalkCalibration**: Production of a crosstalk model from a list of raw science exposures.\n+\n+The related GitLab projects are following [RD6]:\n+\n+* `VIS_Tasks`\n+* `VIS_PyLibrary`\n+* `VIS_ImageTools`\n+* `VIS_CTI`\n+* `VIS_Instrument_Tools`\n+\n+## Pipeline ports with inputs/outputs\n+\n+The following diagram represents the ports of pipeline `VIS_XTalkCalibration`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n+\n+```mermaid\n+graph LR\n+    pipeline(VIS_XTalkCalibration)\n+    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n+    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n+    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n+    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n+    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n+    DpdVisBloomingModel -.->|saturation_model<br>0..1| pipeline\n+    DpdVisMasterBiasFrame -.->|masterbias<br>0..1| pipeline\n+    DpdVisFlagMap -.->|flagmaps<br>0..*| pipeline\n+    DpdVisXTalkModel -.->|xtalk_model<br>0..1| pipeline\n+    DpdVisNonLinearityModel -.->|nlcorr_model<br>0..1| pipeline\n+    DpdVisCTIModel -.->|cti_model<br>0..1| pipeline\n+    DpdVisZeroPoint -->|zero_point<br>1..1| pipeline\n+    DpdVisMasterDarkFrame -.->|masterdark<br>0..1| pipeline\n+    DpdVisMasterFlatFrame -.->|masterflat<br>0..1| pipeline\n+    DpdVisPSFModel -->|psf_model<br>1..1| pipeline\n+    DpdVisDistortionModel -->|dist_model<br>1..1| pipeline\n+    DpdVisLargeFlatFrame -.->|lsf_model<br>0..1| pipeline\n+    DpdVisGhostModel -->|ghost_model<br>1..1| pipeline\n+    DpdVisStarMask -->|starmask_model<br>1..1| pipeline\n+    DpdVisBFEModel -.->|bfe_model<br>0..1| pipeline\n+    DpdTrueUniverseOutput -->|ref_catalogues<br>1..*| pipeline\n+\n+    pipeline -->|xtalk_model_xml_out<br>1..1| DpdVisXTalkModel \n+```\n+\n+**Ports description:**\n+\n+* `raw_frames_in`: raw science frames to be processed\n+* `vis_config_in`: VIS PF configuration file\n+* `MDB`: Mission DataBase\n+* `gains_model`: gain model\n+* `ron_model`: readout noise model\n+* `saturation_model`: saturation model\n+* `masterbias`: master bias frame from `VIS_MasterBias` pipeline\n+* `flagmaps`: map of defect in darkness from `VIS_MasterDark` pipeline, map of defects in photoresponse from `VIS_MasterFlat` pipeline\n+* `xtalk_model`: crosstalk model, to be left empty.\n+* `nlcorr_model`: non-linearity correction model\n+* `cti_model`: CTI model\n+* `zero_point`: zero point\n+* `masterdark`: master dark, not to be used as long as dark is not measurable\n+* `masterflat`: master flat frame\n+* `psf_model`: PSF model from `VIS_PSFCalibration` pipeline\n+* `dist_model`: distortion model\n+* `lsf_model`: large scale flat model from `VIS_LargeFlatCalibration` pipeline\n+* `ghost_model`: ghost model\n+* `starmask_model`: star mask model\n+* `bfe_model`: brighter-fatter model\n+* `ref_catalogues`: list of reference catalogues covering raw science frames sky area\n+* `xtalk_model_xml_out`: crosstalk model\n+\n+## Processing triggering assumptions\n+\n+During PV phase the pipeline will be executed during processing of calblock PV-001. See description of PV-001 processing in chapter 4 for more details.\n+\n+## Operational constraints\n+\n+None.\n+\n+## Hardware configuration and related performances\n+\n+Hardware configuration for the pipeline depends on the number of input exposures.\n+\n+A typical run on 60 exposures requires:\n+\n+| Cores | RSS (GB) | Walltime (h) | Disk space (GB) |\n+| ----- | -------- | ------------ | --------------- |\n+| 60    | TBW      | 15           | 2100 (*)        |\n+\n+The required disk space is 2100 GB when temporary files are not removed from the workdir.\n+\n+## Normal termination\n+\n+The pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n+\n+## Error condition\n+\n+In case of runtime error contact PF support.\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/chap5.md": [
                        [
                            "@@ -1,106 +0,0 @@\n-\\newpage\n-\n-# Pipeline `VIS_MasterBias`\n-\n-## Pipeline Description\n-\n-**VIS_MasterBias**: Production of a master bias from a list of raw bias frames.\n-\n-The related GitLab projects are following [RD6]:\n-\n-* `GitLab project 1`\n-* `GitLab project 2`\n-* ...\n-\n-## Pipeline ports with inputs/outputs\n-\n-The following diagram represents the ports of `Pipeline VIS_MasterBias`. For each port, the product type, port name and cardinality are provided. The thick arrow is for the key input port. Optional ports are represented by dotted arrows.\n-\n-```mermaid\n-graph LR\n-    pipeline(VIS_MasterBias)\n-    DpdVisRawFrame ==>|raw_frames_in<br>1..*| pipeline\n-    DpdVisConfigurationFile -->|vis_config_in<br>1..1| pipeline\n-    DpdMdbDataBase -->|MDB<br>1..1| pipeline\n-    DpdVisGainModel -->|gains_model<br>1..1| pipeline\n-    DpdVisRONModel -->|ron_model<br>1..1| pipeline\n-    DpdVisBloomingModel -.->|saturation_model<br>1..1| pipeline\n-    DpdVisFlagMap -.->|flagmaps<br>1..*| pipeline\n-    DpdVisXTalkModel -.->|xtalk_model<br>1..1| pipeline\n-    DpdVisNonLinearityModel -.->|nlcorr_model<br>1..1| pipeline\n-    DpdVisCTIModel -.->|cti_model<br>1..1| pipeline\n-    pipeline -->|dpdcalib_data<br>1..1| DpdVisMasterBiasFrame\n-    pipeline -->|dpdanalysis<br>1..1| DpdVisAnalysisResults\n-```\n-\n-**Ports description:**\n-\n-* `dpdcalib_flag`: Map of darkness defects\n-\n-## Processing triggering assumptions\n-\n-> Add any information on the operational running context: scales and input data. Modify the bullets below.\n-\n-* PF pipeline triggered at different scales: Obs, Tile, SkyPatch, Full-sky to be completed\n-* Complementary description of the inputs: selection of L2 catalogs with aggregated columns from a selection of (input) PF tiles,\n-* possibly usage of the CATRED OR CONCAT outputs or mock catalogs\n-* any other useful information for creating the pipeline definitions (input/output data product and their optionality and cardinality ) and plan/PPOs\n-\n-| Scale(s) | Periodicity | Input DataProduct | Information for creating the pipeline definition |\n-| -----------   | ----------- | ----------- |  ----------- |\n-| Obs, Tile, SkyPatch, Island, Full sky | Week, Month, Data Release || Quality criteria, Metrics on catalogs, ...|\n-\n-## Operational constraints\n-\n-> Explain what the user must do with the software in addition to the standard rules described in [DR4 SGS Pipeline Operational Procedures]\n- in various states and modes of operation, including contingency and degraded modes\n-> Section by default should be empty (no specific tasks for running this pipeline.)\n-> **Example**\n-> Because GPUs can perform parallel operations on multiple sets of data, they must be used for scientific computation for this pipeline....\n-\n-## Hardware configuration and related performances\n-\n-The hardware requirements for the `PF_name` depend on the dimensions of the input catalogs and the maximum separation scale used in the computations.\n-\n-> Provide below any information on the HW resources and duration for a typical run (possibly add related assumptions vs the pipeline)\n-> Ensure these data are in line with the PackageDef.py in the PF-IAL-Pipelines Gitlab project\n-> Mention here that the PF dynamically (at run time) assigns some infra resources against the input data or configuration\n-\n-| Processing Element | Version | Executable name | Cores | RAM (GB) | Walltime (hours) | Disk space (GB) |\n-| ----------- | ----------- | ----------- | ----------- | ----------- | ----------- | ----------- |\n-| PE name | x.y | Executable1 | n cores or formula against input data | x GB | xx hours | xxx GB |\n-\n-> **Example with typical run** ...\n->\n-> Assuming a typical run (i.e. 2PCF multipole moments) over a data catalog of 3*10^6 objects, and a random catalog of 1.5*10^7 objects,\n-> corresponding to a redshift z-bin of width delta_z=0.1 in the range 0.9 < z < 1.8, with a maximum separation scale of\n-> 200 Mpc/h in bins of 1Mpc/h, > the hardware requirements for each LE_GC_TwoPointCorrelation project PE are listed\n-> below:\n->\n-> | Processing Element | Version | Executable name | Cores | RAM (GB) | Walltime (hours) | Disk space (GB) |\n-> | ----------- | ----------- | ----------- | ----------- | ----------- | ----------- | ----------- |\n-> | LE_GC_TPC | 1.0 | Correlate | 24 | < 1 | < 3 | 15 |\n->\n-> In the worst case, in which the analysis is performed using a single z-bin for the whole redshift range delta_z=0.9, with a data catalog of 1.\n-> 7*10^7 objects, and a random catalog of 8.5*10^8 objects, the hardware requirements increase to 3 GB of RAM and 36 hours.\n-\n-## Normal termination\n-\n-> Describe how the user can interrupt the pipeline and how to determine whether normal termination has occurred. This section is optional.\n-\n-The `Pipeline_Name` pipeline is managed by the IAL pipeline runner so in the normal termination case the associated pipeline processing order should have its `ProcessingState` element set to `Completed`.\n-\n-If the code run is locally, code termination can be invoked at any time with Ctrl-C. This will not cause any problems but, depending on the code operation during termination, it may require the user to clean the `workdir` and `workdir/data` folder from incomplete output objects.\n-\n-## Error condition\n-\n-> Describe the common error conditions that can occur as a result of executing the function and how to detect that the error has occurred.\n-\n-The runtime errors related to `Pipeline_Name` are listed below:\n-\n-| Software Executable | Exception | Message | Operator Instruction |\n-| -----------   | ----------- | ----------- |  ----------- |\n-| `Executable X` | Exception name / ID | Configuration file not found | Contact PF support |\n-| `Executable Y` | Exception name / ID | Input product not found | Re-run |\n-| `Executable Z` | Exception name / ID | Message text | Contact infra support |\n-\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/manifest": [
                        [
                            "@@ -1,8 +1,31 @@\n # Manifest for template user manual document\n header.md\n version.md\n-chap1.md # Purpose\n-chap2.md # Applicable & Reference Documents\n-chap3.md # Acronyms, abbreviations and definitions\n-chap4.md # PF Operations Environment\n-chap5.md # Pipeline VIS_Masterbias\n+chap01.md # Purpose\n+chap02.md # Applicable & Reference Documents\n+chap03.md # Acronyms, abbreviations and definitions\n+chap04.md # PF Operations Environment\n+chap05_AstrometryCalibration.md\n+chap06_BloomingCalibration.md\n+chap07_BrighterFatterCalibration.md\n+chap08_CTICalibration.md\n+chap09_CTIMasterCI.md\n+chap10_CTITimeEvolution.md\n+chap11_DiffractionSpikesFocus.md\n+chap12_FlagObjects.md\n+chap13_GainCalibration.md\n+chap14_GhostsCalibration.md\n+chap15_LargeFlatCalibration.md\n+chap16_MasterBias.md\n+chap17_MasterDark.md\n+chap18_MasterFlat.md\n+chap19_NonLinCalibration.md\n+chap20_PSFCalibration.md\n+chap21_PTCNLCalibration.md\n+chap22_PersistenceCalibration.md\n+chap23_PhotometryCalibration.md\n+chap24_ProcessField.md\n+chap25_SmallScaleFlat.md\n+chap26_Stacking.md\n+chap27_TrapPumpingCalibration.md\n+chap28_XTalkCalibration.md\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "doc/user_manual/title.md": [
                        [
                            "@@ -7,19 +7,22 @@ body-includes: no\n |         |**Document Identification**                                                                          |\n |---------|-----------------------------------------------------------------------------------------------------|\n |Title|Euclid SGS `VIS` PF User Manual \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\. |\n-|Date:|24-Jun-2023|\n+|Date:|24-Jul-2023|\n |Issue|4.0|\n |Reference:|EUCL-IAP-MA-8-002|\n-|Custodian:|Euclid SGS|\n+|Custodian:|Catherine Grenet|\n \n **Prepared by** | **Role**\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\. | **Date**  | **Signature** |\n --------------|--------------------------------|-----------|-----------\n-`User Manual Custodian Name`         | `SDC-xx` `Custodian Role`                                                     |`dd-month-yyyy`|\n+`Catherine Grenet`         | `OU-VIS` `Co-lead`                                                     |`dd-month-yyyy`|\n \n **Contributors** | **Role**\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\. | **Date** | **Signature**\n --------------|--------------------------------|-----------|-----------\n-`Contributor Name 1`|`SDC-xx` `Contributor Role`| |\n-`Contributor Name 2`|`SDC-xx` `Contributor Role`| |\n+`Thomas Flanet`|`SDC-FR` `Developer`| |\n+`Sylvain Mottet`|`SDC-FR` `Developer`| |\n+`Kane Nguyen-Kim`|`SDC-FR` `Developer`| |\n+`James Nightingale`|`SDC-FR` `Developer`| |\n+`Matt Wander`|`SDC-FR` `Developer`| |\n `...`\n \n **Authorised** | **Role**\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\. | **Date** | **Signature**\n@@ -36,8 +39,6 @@ Yannick Mellier|Euclid Consortium Lead||\n \n **Issue**|**Date**|**Page**|**Description of Change** \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\. |**Comment**\n -------|--------|------------------|----------------------------------|----------\n- 0.1 | 07/02/17 | all | First draft | JG|\n- 1.0 | 23/03/17 | none | Previous version elevated to version 1.0 | CV|\n- 2.0 | 06/06/22 | all | New version specific to the SGS environment | DB|\n+ 4.0 | 2023-07-24 | all | First issue in Mardown/Mermaid format | |\n \n ![](images/dot.png) \\\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ]
                },
                "selected_modifications": {
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_ProcessField_Pipeline/PkgDef_VIS_ProcessField.py": [
                        [
                            "@@ -41,7 +41,7 @@ from euclidwf.framework.taskdefs import Executable, Input, Output, ComputingReso\n #mod = importlib.machinery.SourceFileLoader( \"VIS_IAL_PIPELINES_VERSION\", ialversion_path).load_module()\n #TASKS_VER = VIS_IAL_PIPELINES_VERSION.VIS_IAL_PIPELINES_ORIGINAL_VERSION\n \n-TASKS_VER = \"13.0.9\"\n+TASKS_VER = \"13.0.10\"\n \n import os\n PIPE_NAME = \"VIS_\" + os.path.splitext( os.path.basename( __file__))[0].split( \"VIS_\")[1]\n",
                            "[UPD]Set TASKS_VER to 13.0.10",
                            "Catherine Grenet",
                            "2023-08-08T14:57:49.000+02:00",
                            "ccc61aa044e0ce8eba6c1d8a04d5c5491981b329"
                        ],
                        [
                            "@@ -41,7 +41,7 @@ from euclidwf.framework.taskdefs import Executable, Input, Output, ComputingReso\n #mod = importlib.machinery.SourceFileLoader( \"VIS_IAL_PIPELINES_VERSION\", ialversion_path).load_module()\n #TASKS_VER = VIS_IAL_PIPELINES_VERSION.VIS_IAL_PIPELINES_ORIGINAL_VERSION\n \n-TASKS_VER = \"13.0.8\"\n+TASKS_VER = \"13.0.9\"\n \n import os\n PIPE_NAME = \"VIS_\" + os.path.splitext( os.path.basename( __file__))[0].split( \"VIS_\")[1]\n",
                            "[UPD]Bump version to 13.0.9 and set TASKS_VER to 13.0.9",
                            "Catherine Grenet",
                            "2023-08-06T21:53:07.000+02:00",
                            "3e38b8d5277fc7476e59994516e539fdfb5c2a8b"
                        ],
                        [
                            "@@ -41,7 +41,7 @@ from euclidwf.framework.taskdefs import Executable, Input, Output, ComputingReso\n #mod = importlib.machinery.SourceFileLoader( \"VIS_IAL_PIPELINES_VERSION\", ialversion_path).load_module()\n #TASKS_VER = VIS_IAL_PIPELINES_VERSION.VIS_IAL_PIPELINES_ORIGINAL_VERSION\n \n-TASKS_VER = \"13.0.7\"\n+TASKS_VER = \"13.0.8\"\n \n import os\n PIPE_NAME = \"VIS_\" + os.path.splitext( os.path.basename( __file__))[0].split( \"VIS_\")[1]\n",
                            "[UPD]Update TASKS_VER to 13.0.8",
                            "Catherine Grenet",
                            "2023-08-03T17:58:18.000+02:00",
                            "95e784492427ccae1d7ee7a171365c9a6abcd7d2"
                        ],
                        [
                            "@@ -41,7 +41,7 @@ from euclidwf.framework.taskdefs import Executable, Input, Output, ComputingReso\n #mod = importlib.machinery.SourceFileLoader( \"VIS_IAL_PIPELINES_VERSION\", ialversion_path).load_module()\n #TASKS_VER = VIS_IAL_PIPELINES_VERSION.VIS_IAL_PIPELINES_ORIGINAL_VERSION\n \n-TASKS_VER = \"13.0.6\"\n+TASKS_VER = \"13.0.7\"\n \n import os\n PIPE_NAME = \"VIS_\" + os.path.splitext( os.path.basename( __file__))[0].split( \"VIS_\")[1]\n",
                            "[UPD]Update TASKS_VER to 13.0.7",
                            "Catherine Grenet",
                            "2023-08-03T13:45:56.000+02:00",
                            "57941cfd33d76107dde883f24927674a50672c7d"
                        ]
                    ],
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_CTICalibration_Pipeline/PkgDef_VIS_CTICalibration.py": [
                        [
                            "@@ -74,11 +74,13 @@ gather_cti_quads = Executable(\n calibrate_cti = Executable(\n     command=f\"E-Run VIS_Tasks {TASKS_VER} VIS_CTI_Calibration\",\n     inputs=[\n-         Input('config'),\n-#        Input(\"MDB\"),\n-        Input(\"input_ccd\")],\n-    outputs=[Output(\"cti_parallel_output\", mime_type=\"json\"),\n-             Output(\"cti_serial_output\", mime_type=\"json\")],\n+        Input('config'),\n+        Input(\"input_ccd\")\n+    ],\n+    outputs=[\n+        Output(\"cti_parallel_output\", mime_type=\"json\"),\n+        Output(\"cti_serial_output\", mime_type=\"json\")\n+    ],\n     resources=ComputingResources(cores=1, ram=256.0, walltime=16.0),\n )\n \n",
                            "update VIS_CTIMasterCI ouptut ports at XML layer",
                            "James Nightingale",
                            "2023-08-06T11:45:23.000+01:00",
                            "2fbd3d977966f4b66aa5e94fde0d3d1555997144"
                        ],
                        [
                            "@@ -86,8 +86,8 @@ VIS_cti_xml_out = Executable(\n     command=f\"E-Run VIS_Tasks {TASKS_VER} VIS_cti_xml_out\",\n     inputs=[\"config\", \"calibrate_cti_results_list\"],\n     outputs=[\n-        Output(\"dpdparallelcticalibration\"),\n-        Output(\"dpdserialcticalibration\"),\n+        Output(\"parallel_cti_xml_out\"),\n+        Output(\"serial_cti_xml_out\"),\n     ],\n     resources=ComputingResources(cores=1, ram=7.0, walltime=3.0),\n )\n\\ No newline at end of file\n",
                            "update output ports",
                            "James Nightingale",
                            "2023-08-03T13:40:42.000+01:00",
                            "c6634ea77228e9f0fd4ed22583f8c71455455a07"
                        ]
                    ],
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_CTIMasterCI_Pipeline/PkgDef_VIS_CTIMasterCI.py": [
                        [
                            "@@ -68,18 +68,18 @@ master_ci_estimate = Executable(\n     command=f\"E-Run VIS_Tasks {TASKS_VER} VIS_CTI_Master_CI\",\n     inputs=[\n          Input('config'),\n-#        Input(\"MDB\"),\n-        Input(\"quad_list_of_lists\")],\n+        Input(\"quad_list_of_lists\")\n+    ],\n     outputs=[Output(\"cti_master_ci\", mime_type=\"json\")],\n-    resources=ComputingResources(cores=1, ram=16.0, walltime=4.0),\n+    resources=ComputingResources(cores=1, ram=128.0, walltime=4.0),\n )\n \n-quad2FPA = Executable(command = f\"E-Run VIS_Tasks {TASKS_VER} VIS_quad_to_fpa\",\n-                      inputs = [Input(\"infilelist_data\"), \"config\"],\n-                      outputs = [Output(\"master_data\", mime_type=\"json\")],\n-                      resources = ComputingResources(cores = 1,\n-                                                     ram = 3.0,\n-                                                     walltime = 1.0))\n+quad2FPA = Executable(\n+    command = f\"E-Run VIS_Tasks {TASKS_VER} VIS_quad_to_fpa\",\n+    inputs = [Input(\"infilelist_data\"), \"config\"],\n+    outputs = [Output(\"master_data\", mime_type=\"json\")],\n+    resources = ComputingResources(cores = 1, ram = 3.0, walltime = 1.0)\n+)\n \n \n \n@@ -87,8 +87,7 @@ VIS_cti_master_ci_xml_out = Executable(\n     command=f\"E-Run VIS_Tasks {TASKS_VER} VIS_cti_master_ci_xml_out\",\n     inputs=[\"config\", \"cti_master_ci_list\"],\n     outputs=[\n-        Output(\"dpdmasterci\", mime_type=\"json\", content_type=\"listfile\"),\n-        Output(\"dpdanalysis_out\", mime_type=\"json\", content_type=\"listfile\"),\n+        Output(\"dpdmasterci\"),\n     ],\n     resources=ComputingResources(cores=1, ram=7.0, walltime=3.0),\n )\n",
                            "update VIS_CTIMasterCI ouptut ports at XML layer",
                            "James Nightingale",
                            "2023-08-06T11:45:23.000+01:00",
                            "2fbd3d977966f4b66aa5e94fde0d3d1555997144"
                        ],
                        [
                            "@@ -69,7 +69,7 @@ master_ci_estimate = Executable(\n #        Input(\"MDB\"),\n         Input(\"quad_list_of_lists\")],\n     outputs=[Output(\"cti_master_ci\", mime_type=\"json\")],\n-    resources=ComputingResources(cores=1, ram=16.0, walltime=4.0),\n+    resources=ComputingResources(cores=1, ram=256.0, walltime=4.0),\n )\n \n quad2FPA = Executable(command = f\"E-Run VIS_Tasks {TASKS_VER} VIS_quad_to_fpa\",\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ],
                    "VIS_IAL_Pipelines/auxdir/VIS_IAL_Pipelines/VIS_CTITimeEvolution_Pipeline/PkgDef_VIS_CTITimeEvolution.py": [
                        [
                            "@@ -17,7 +17,6 @@ from VIS_ProcessField_Pipeline.PkgDef_VIS_ProcessField import TASKS_VER\n VIS_xml_in = Executable(\n     command=f\"E-Run VIS_Tasks {TASKS_VER} VIS_cti_time_evolution_xml_in\",\n     inputs=[\n-        Input(\"auxdatafiles\"),\n         Input(\"MDB\"),\n         Input(\"cti_results_in\", content_type=\"listfile\"),\n      ],\n@@ -34,7 +33,7 @@ fit_cti_time_evolution = Executable(command   = f\"E-Run VIS_Tasks {TASKS_VER} VI\n                                       Input(\"cti_results_x1_ccd\")],\n                          outputs   = [Output(\"time_evolution_json\", mime_type=\"json\")],\n                          resources = ComputingResources(cores = 1,\n-                                                        ram = 4.0,\n+                                                        ram = 32.0,\n                                                         walltime = 6.0))\n \n VIS_cti_xml_out = Executable(\n",
                            "Merge branch 'feature-SUM' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-02T20:20:55.000+02:00",
                            "e4469c0072b123cd2adc7026feeb8c7eded730b1"
                        ]
                    ]
                },
                "count_selected_modifications": "4",
                "tags_in_period": [
                    {
                        "name": "13.0.6",
                        "created_at": "2023-08-02T20:20:55.000+02:00",
                        "author_name": "Catherine Grenet"
                    },
                    {
                        "name": "13.0.7",
                        "created_at": "2023-08-03T13:45:56.000+02:00",
                        "author_name": "Catherine Grenet"
                    },
                    {
                        "name": "13.0.8",
                        "created_at": "2023-08-03T17:58:18.000+02:00",
                        "author_name": "Catherine Grenet"
                    },
                    {
                        "name": "13.0.9",
                        "created_at": "2023-08-06T21:53:07.000+02:00",
                        "author_name": "Catherine Grenet"
                    },
                    {
                        "name": "13.0.10",
                        "created_at": "2023-08-08T14:57:49.000+02:00",
                        "author_name": "Catherine Grenet"
                    }
                ]
            },
            "PF-VIS/VIS_Transients": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_XTalk": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_BiasCorrection": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_BiasCalibration": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_PRNUCalibration": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_PRNUCorrection": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_Helper_scripts": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_PSF": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_Validation": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_Cosmics": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_CTI": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_NonLinCorrection": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_Pipelines": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_Tasks": {
                "start date": "2023-08-02T19:25:05",
                "end date": "2023-08-08T12:11:35",
                "start tag": "13.0.6",
                "end tag": "13.0.10",
                "count_files_modified": "50",
                "modifications_by_file": {
                    "VIS_Stacking/python/VIS_Stacking/VIS_stacking.py": [
                        [
                            "@@ -723,7 +723,13 @@ def mainMethod(args):\n   else:\n     logger.warning( \"Stacking disabled in config.cfg, produce empty outputs\")\n     # write empty output product XML list\n-    stack_xml_out( workdir, list(), stack_out_prefix, args.dpdstacked_frame, args.dpdstacked_catalogue, ZIP_OUTPUTS=False)\n+    stack_xml_out( workdir,\n+                   list(),\n+                   stack_out_prefix,\n+                   args.dpdstacked_frame,\n+                   args.dpdstacked_catalogue,\n+                   calblock_id=\"None\",\n+                   ZIP_OUTPUTS=False)\n \n   # and we're done\n   logger.info( \"#\")\n",
                            "Merge branch 'hotfix_23358_missingcalblockid' into 'release-13.0'",
                            "Catherine Grenet",
                            "2023-08-08T12:11:35.000+00:00",
                            "572755dca290595ae90f8f5f5561f3fe1916a2fb"
                        ],
                        [
                            "@@ -367,7 +367,9 @@ def subtract( infile1, infile2, outfile, flagfile, extnum=-1, maxmem=MAXMEM):\n \n ################################################################################\n \n-def stack_xml_out( workdir, exposure_list, stack_file_prefix, dpdstacked_frame, dpdstacked_catalogue, ZIP_OUTPUTS=False):\n+def stack_xml_out( workdir, exposure_list, stack_file_prefix,\n+                   dpdstacked_frame, dpdstacked_catalogue, calblock_id,\n+                   ZIP_OUTPUTS=False):\n   \"\"\"Produce the stacking task output products\n   \"\"\"\n \n@@ -483,6 +485,7 @@ def stack_xml_out( workdir, exposure_list, stack_file_prefix, dpdstacked_frame,\n       stk_dp = FromToXML.stack_dp( os.path.join( datadir, euc_stk_file),\n                                    survey_type,\n                                    obs_id,\n+                                   calblock_id,\n                                    euc_psf_file,\n                                    euc_bkg_file,\n                                    euc_wgt_file)\n@@ -495,7 +498,7 @@ def stack_xml_out( workdir, exposure_list, stack_file_prefix, dpdstacked_frame,\n #        FromToXML.create_qualityparams_fromlist(stk_dp,pe_runinfo_consolidate_list)\n \n       # Creating xml file\n-      xml_filename = os.path.join( DATADIR, \"DpdVisStackedFrame.xml\")\n+      xml_filename = \"DpdVisStackedFrame.xml\"\n       DmUtils.save_product_metadata( stk_dp, os.path.join( workdir, xml_filename))\n       DpdVisStackedFrame_list.append( xml_filename)\n \n@@ -517,7 +520,7 @@ def stack_xml_out( workdir, exposure_list, stack_file_prefix, dpdstacked_frame,\n       stack_catalog_dp = FromToXML.stack_cat_dp( os.path.join( datadir, euc_cat_file),\n                                                  spatial_footprint,\n                                                  obs_id)\n-      xml_filename = os.path.join( DATADIR, \"DpdVisStackedFrameCatalog.xml\")\n+      xml_filename = \"DpdVisStackedFrameCatalog.xml\"\n       DmUtils.save_product_metadata( stack_catalog_dp, os.path.join( workdir, xml_filename))\n       DpdVisStackedCatalogue_list.append( xml_filename)\n \n@@ -593,6 +596,7 @@ def mainMethod(args):\n     input_files = sorted( FromToXML.read_json( args.exposure_list))\n     exposure_list = list()\n     wgt_files_list = list()\n+    calblock_id = \"\"\n     for input_file in input_files:\n       file_ext = os.path.splitext( input_file)[1].lower()\n       if file_ext == \".xml\":\n@@ -612,6 +616,10 @@ def mainMethod(args):\n         exposure_list.append( sci_datafile)\n         wgt_datafile = zip_tools.unzip( os.path.join( DATADIR, wgt_datafile))\n         wgt_files_list.append( wgt_datafile)\n+        # read calblock_id from input DpdVisCalibratedFrame XML file\n+        if calblock_id == \"\":\n+          dp = DmUtils.read_product_metadata( input_file)\n+          calblock_id = dp.Data.ObservationSequence.CalblockId\n       else:\n         # working as stacking task in another pipeline\n         # args.exposure_list contains \"process_photo_exp.reduce/tuplelist.json\"\n@@ -627,6 +635,15 @@ def mainMethod(args):\n         exp_json_list  = FromToXML.read_json( args.exposure_list)\n         exposure_list  = [FromToXML.read_json( exp_json) for exp_json in input_files]\n         wgt_files_list = None\n+        # read calblock_id from metadata stored in config.cfg by VIS_xml_in.py\n+        # and take the first one, supposing calblocks are not mixed in VIS pipelines...\n+        if calblock_id == \"\":\n+          # find first config file section containing input raw frame metadata\n+          for section in config.sections():\n+            if section.startswith( visdef.EUCVISEXP_PREFIX) and \\\n+               \"dp.Data.ObservationSequence.CalblockId\" in config[section]:\n+              calblock_id = config[section][\"dp.Data.ObservationSequence.CalblockId\"]\n+              break\n \n     logger.info( f\"flatten args.exposure_list={exposure_list}\")\n \n@@ -688,6 +705,7 @@ def mainMethod(args):\n                    stack_out_prefix,\n                    args.dpdstacked_frame,\n                    args.dpdstacked_catalogue,\n+                   calblock_id,\n                    ZIP_OUTPUTS)\n \n     # save (again) pipeline profiling, possibly replacing the one created by VIS_science_xml_out which should have completed first\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ],
                        [
                            "@@ -367,7 +367,9 @@ def subtract( infile1, infile2, outfile, flagfile, extnum=-1, maxmem=MAXMEM):\n \n ################################################################################\n \n-def stack_xml_out( workdir, exposure_list, stack_file_prefix, dpdstacked_frame, dpdstacked_catalogue, ZIP_OUTPUTS=False):\n+def stack_xml_out( workdir, exposure_list, stack_file_prefix,\n+                   dpdstacked_frame, dpdstacked_catalogue, calblock_id,\n+                   ZIP_OUTPUTS=False):\n   \"\"\"Produce the stacking task output products\n   \"\"\"\n \n@@ -483,6 +485,7 @@ def stack_xml_out( workdir, exposure_list, stack_file_prefix, dpdstacked_frame,\n       stk_dp = FromToXML.stack_dp( os.path.join( datadir, euc_stk_file),\n                                    survey_type,\n                                    obs_id,\n+                                   calblock_id,\n                                    euc_psf_file,\n                                    euc_bkg_file,\n                                    euc_wgt_file)\n@@ -495,7 +498,7 @@ def stack_xml_out( workdir, exposure_list, stack_file_prefix, dpdstacked_frame,\n #        FromToXML.create_qualityparams_fromlist(stk_dp,pe_runinfo_consolidate_list)\n \n       # Creating xml file\n-      xml_filename = os.path.join( DATADIR, \"DpdVisStackedFrame.xml\")\n+      xml_filename = \"DpdVisStackedFrame.xml\"\n       DmUtils.save_product_metadata( stk_dp, os.path.join( workdir, xml_filename))\n       DpdVisStackedFrame_list.append( xml_filename)\n \n@@ -517,7 +520,7 @@ def stack_xml_out( workdir, exposure_list, stack_file_prefix, dpdstacked_frame,\n       stack_catalog_dp = FromToXML.stack_cat_dp( os.path.join( datadir, euc_cat_file),\n                                                  spatial_footprint,\n                                                  obs_id)\n-      xml_filename = os.path.join( DATADIR, \"DpdVisStackedFrameCatalog.xml\")\n+      xml_filename = \"DpdVisStackedFrameCatalog.xml\"\n       DmUtils.save_product_metadata( stack_catalog_dp, os.path.join( workdir, xml_filename))\n       DpdVisStackedCatalogue_list.append( xml_filename)\n \n@@ -593,6 +596,7 @@ def mainMethod(args):\n     input_files = sorted( FromToXML.read_json( args.exposure_list))\n     exposure_list = list()\n     wgt_files_list = list()\n+    calblock_id = \"\"\n     for input_file in input_files:\n       file_ext = os.path.splitext( input_file)[1].lower()\n       if file_ext == \".xml\":\n@@ -612,6 +616,10 @@ def mainMethod(args):\n         exposure_list.append( sci_datafile)\n         wgt_datafile = zip_tools.unzip( os.path.join( DATADIR, wgt_datafile))\n         wgt_files_list.append( wgt_datafile)\n+        # read calblock_id from input DpdVisCalibratedFrame XML file\n+        if calblock_id == \"\":\n+          dp = DmUtils.read_product_metadata( input_file)\n+          calblock_id = dp.Data.ObservationSequence.CalblockId\n       else:\n         # working as stacking task in another pipeline\n         # args.exposure_list contains \"process_photo_exp.reduce/tuplelist.json\"\n@@ -627,6 +635,15 @@ def mainMethod(args):\n         exp_json_list  = FromToXML.read_json( args.exposure_list)\n         exposure_list  = [FromToXML.read_json( exp_json) for exp_json in input_files]\n         wgt_files_list = None\n+        # read calblock_id from metadata stored in config.cfg by VIS_xml_in.py\n+        # and take the first one, supposing calblocks are not mixed in VIS pipelines...\n+        if calblock_id == \"\":\n+          # find first config file section containing input raw frame metadata\n+          for section in config.sections():\n+            if section.startswith( visdef.EUCVISEXP_PREFIX) and \\\n+               \"dp.Data.ObservationSequence.CalblockId\" in config[section]:\n+              calblock_id = config[section][\"dp.Data.ObservationSequence.CalblockId\"]\n+              break\n \n     logger.info( f\"flatten args.exposure_list={exposure_list}\")\n \n@@ -688,6 +705,7 @@ def mainMethod(args):\n                    stack_out_prefix,\n                    args.dpdstacked_frame,\n                    args.dpdstacked_catalogue,\n+                   calblock_id,\n                    ZIP_OUTPUTS)\n \n     # save (again) pipeline profiling, possibly replacing the one created by VIS_science_xml_out which should have completed first\n",
                            "Merge branch 'release-13.0' into develop: Fixes bugs #20505, 23168, 23190, 23265",
                            "Catherine Grenet",
                            "2023-08-07T12:19:04.000+02:00",
                            "f112799d015cdc323c99ef638e7027ad8decb28e"
                        ],
                        [
                            "@@ -367,7 +367,9 @@ def subtract( infile1, infile2, outfile, flagfile, extnum=-1, maxmem=MAXMEM):\n \n ################################################################################\n \n-def stack_xml_out( workdir, exposure_list, stack_file_prefix, dpdstacked_frame, dpdstacked_catalogue, ZIP_OUTPUTS=False):\n+def stack_xml_out( workdir, exposure_list, stack_file_prefix,\n+                   dpdstacked_frame, dpdstacked_catalogue, calblock_id,\n+                   ZIP_OUTPUTS=False):\n   \"\"\"Produce the stacking task output products\n   \"\"\"\n \n@@ -483,6 +485,7 @@ def stack_xml_out( workdir, exposure_list, stack_file_prefix, dpdstacked_frame,\n       stk_dp = FromToXML.stack_dp( os.path.join( datadir, euc_stk_file),\n                                    survey_type,\n                                    obs_id,\n+                                   calblock_id,\n                                    euc_psf_file,\n                                    euc_bkg_file,\n                                    euc_wgt_file)\n@@ -495,7 +498,7 @@ def stack_xml_out( workdir, exposure_list, stack_file_prefix, dpdstacked_frame,\n #        FromToXML.create_qualityparams_fromlist(stk_dp,pe_runinfo_consolidate_list)\n \n       # Creating xml file\n-      xml_filename = os.path.join( DATADIR, \"DpdVisStackedFrame.xml\")\n+      xml_filename = \"DpdVisStackedFrame.xml\"\n       DmUtils.save_product_metadata( stk_dp, os.path.join( workdir, xml_filename))\n       DpdVisStackedFrame_list.append( xml_filename)\n \n@@ -517,7 +520,7 @@ def stack_xml_out( workdir, exposure_list, stack_file_prefix, dpdstacked_frame,\n       stack_catalog_dp = FromToXML.stack_cat_dp( os.path.join( datadir, euc_cat_file),\n                                                  spatial_footprint,\n                                                  obs_id)\n-      xml_filename = os.path.join( DATADIR, \"DpdVisStackedFrameCatalog.xml\")\n+      xml_filename = \"DpdVisStackedFrameCatalog.xml\"\n       DmUtils.save_product_metadata( stack_catalog_dp, os.path.join( workdir, xml_filename))\n       DpdVisStackedCatalogue_list.append( xml_filename)\n \n@@ -593,6 +596,7 @@ def mainMethod(args):\n     input_files = sorted( FromToXML.read_json( args.exposure_list))\n     exposure_list = list()\n     wgt_files_list = list()\n+    calblock_id = \"\"\n     for input_file in input_files:\n       file_ext = os.path.splitext( input_file)[1].lower()\n       if file_ext == \".xml\":\n@@ -612,6 +616,10 @@ def mainMethod(args):\n         exposure_list.append( sci_datafile)\n         wgt_datafile = zip_tools.unzip( os.path.join( DATADIR, wgt_datafile))\n         wgt_files_list.append( wgt_datafile)\n+        # read calblock_id from input DpdVisCalibratedFrame XML file\n+        if calblock_id == \"\":\n+          dp = DmUtils.read_product_metadata( input_file)\n+          calblock_id = dp.Data.ObservationSequence.CalblockId\n       else:\n         # working as stacking task in another pipeline\n         # args.exposure_list contains \"process_photo_exp.reduce/tuplelist.json\"\n@@ -627,6 +635,15 @@ def mainMethod(args):\n         exp_json_list  = FromToXML.read_json( args.exposure_list)\n         exposure_list  = [FromToXML.read_json( exp_json) for exp_json in input_files]\n         wgt_files_list = None\n+        # read calblock_id from metadata stored in config.cfg by VIS_xml_in.py\n+        # and take the first one, supposing calblocks are not mixed in VIS pipelines...\n+        if calblock_id == \"\":\n+          # find first config file section containing input raw frame metadata\n+          for section in config.sections():\n+            if section.startswith( visdef.EUCVISEXP_PREFIX) and \\\n+               \"dp.Data.ObservationSequence.CalblockId\" in config[section]:\n+              calblock_id = config[section][\"dp.Data.ObservationSequence.CalblockId\"]\n+              break\n \n     logger.info( f\"flatten args.exposure_list={exposure_list}\")\n \n@@ -688,6 +705,7 @@ def mainMethod(args):\n                    stack_out_prefix,\n                    args.dpdstacked_frame,\n                    args.dpdstacked_catalogue,\n+                   calblock_id,\n                    ZIP_OUTPUTS)\n \n     # save (again) pipeline profiling, possibly replacing the one created by VIS_science_xml_out which should have completed first\n",
                            "Merge branch 'hotfix_20505_calblockid' into 'release-13.0'",
                            "Catherine Grenet",
                            "2023-08-07T08:55:33.000+00:00",
                            "e1c03bd819fe3602af68ac1eb28cae693b4e3563"
                        ],
                        [
                            "@@ -367,7 +367,9 @@ def subtract( infile1, infile2, outfile, flagfile, extnum=-1, maxmem=MAXMEM):\n \n ################################################################################\n \n-def stack_xml_out( workdir, exposure_list, stack_file_prefix, dpdstacked_frame, dpdstacked_catalogue, ZIP_OUTPUTS=False):\n+def stack_xml_out( workdir, exposure_list, stack_file_prefix,\n+                   dpdstacked_frame, dpdstacked_catalogue, calblock_id,\n+                   ZIP_OUTPUTS=False):\n   \"\"\"Produce the stacking task output products\n   \"\"\"\n \n@@ -483,6 +485,7 @@ def stack_xml_out( workdir, exposure_list, stack_file_prefix, dpdstacked_frame,\n       stk_dp = FromToXML.stack_dp( os.path.join( datadir, euc_stk_file),\n                                    survey_type,\n                                    obs_id,\n+                                   calblock_id,\n                                    euc_psf_file,\n                                    euc_bkg_file,\n                                    euc_wgt_file)\n@@ -495,7 +498,7 @@ def stack_xml_out( workdir, exposure_list, stack_file_prefix, dpdstacked_frame,\n #        FromToXML.create_qualityparams_fromlist(stk_dp,pe_runinfo_consolidate_list)\n \n       # Creating xml file\n-      xml_filename = os.path.join( DATADIR, \"DpdVisStackedFrame.xml\")\n+      xml_filename = \"DpdVisStackedFrame.xml\"\n       DmUtils.save_product_metadata( stk_dp, os.path.join( workdir, xml_filename))\n       DpdVisStackedFrame_list.append( xml_filename)\n \n@@ -517,7 +520,7 @@ def stack_xml_out( workdir, exposure_list, stack_file_prefix, dpdstacked_frame,\n       stack_catalog_dp = FromToXML.stack_cat_dp( os.path.join( datadir, euc_cat_file),\n                                                  spatial_footprint,\n                                                  obs_id)\n-      xml_filename = os.path.join( DATADIR, \"DpdVisStackedFrameCatalog.xml\")\n+      xml_filename = \"DpdVisStackedFrameCatalog.xml\"\n       DmUtils.save_product_metadata( stack_catalog_dp, os.path.join( workdir, xml_filename))\n       DpdVisStackedCatalogue_list.append( xml_filename)\n \n@@ -593,6 +596,7 @@ def mainMethod(args):\n     input_files = sorted( FromToXML.read_json( args.exposure_list))\n     exposure_list = list()\n     wgt_files_list = list()\n+    calblock_id = \"\"\n     for input_file in input_files:\n       file_ext = os.path.splitext( input_file)[1].lower()\n       if file_ext == \".xml\":\n@@ -612,6 +616,10 @@ def mainMethod(args):\n         exposure_list.append( sci_datafile)\n         wgt_datafile = zip_tools.unzip( os.path.join( DATADIR, wgt_datafile))\n         wgt_files_list.append( wgt_datafile)\n+        # read calblock_id from input DpdVisCalibratedFrame XML file\n+        if calblock_id == \"\":\n+          dp = DmUtils.read_product_metadata( input_file)\n+          calblock_id = dp.Data.ObservationSequence.CalblockId\n       else:\n         # working as stacking task in another pipeline\n         # args.exposure_list contains \"process_photo_exp.reduce/tuplelist.json\"\n@@ -627,6 +635,15 @@ def mainMethod(args):\n         exp_json_list  = FromToXML.read_json( args.exposure_list)\n         exposure_list  = [FromToXML.read_json( exp_json) for exp_json in input_files]\n         wgt_files_list = None\n+        # read calblock_id from metadata stored in config.cfg by VIS_xml_in.py\n+        # and take the first one, supposing calblocks are not mixed in VIS pipelines...\n+        if calblock_id == \"\":\n+          # find first config file section containing input raw frame metadata\n+          for section in config.sections():\n+            if section.startswith( visdef.EUCVISEXP_PREFIX) and \\\n+               \"dp.Data.ObservationSequence.CalblockId\" in config[section]:\n+              calblock_id = config[section][\"dp.Data.ObservationSequence.CalblockId\"]\n+              break\n \n     logger.info( f\"flatten args.exposure_list={exposure_list}\")\n \n@@ -688,6 +705,7 @@ def mainMethod(args):\n                    stack_out_prefix,\n                    args.dpdstacked_frame,\n                    args.dpdstacked_catalogue,\n+                   calblock_id,\n                    ZIP_OUTPUTS)\n \n     # save (again) pipeline profiling, possibly replacing the one created by VIS_science_xml_out which should have completed first\n",
                            "fix issue #20505: CalblockId not copied in VIS output products",
                            "Sylvain Mottet",
                            "2023-08-06T22:20:00.000+02:00",
                            "644af87977aafe2c2c9ee8c5b7229666b141010e"
                        ]
                    ],
                    "VIS_Tasks_Common/python/VIS_Tasks_Common/FromToXML.py": [
                        [
                            "@@ -1191,7 +1191,7 @@ def stack_dp( stack: str, survey_type: str, obsid: int, calblock_id: str,\n     data.ImgSpatialFootprint = DmUtils.create_spatial_footprint_from_header(ext_header,\n                                                                             N_FOOTPRINT_SAMPLE_STEPS)\n     data.ObservationId = obsid\n-    data.CalblockId = calblock_id\n+    data.CalblockId = str( calblock_id)\n     data.DataStorage = DmUtils.create_fits_storage(\n                                vis_stub.visStackedStorageFitsFile,\n                                os.path.basename(stack), \"vis.stackedImage\", \"0.1\")\n",
                            "Merge branch 'hotfix_23358_missingcalblockid' into 'release-13.0'",
                            "Catherine Grenet",
                            "2023-08-08T12:11:35.000+00:00",
                            "572755dca290595ae90f8f5f5561f3fe1916a2fb"
                        ],
                        [
                            "@@ -77,9 +77,11 @@ from ST_DataModelBindings.dpd.vis import ppovalidation_stub\n from ST_DataModelBindings.dpd.vis import validationresult_stub\n from ST_DataModelBindings.dpd.vis import visfilecontainer_stub\n from ST_DataModelBindings.dpd.vis import visbloomingmodel_stub\n+from ST_DataModelBindings.dpd.vis import visbfemodel_stub\n from ST_DataModelBindings.dpd.vis import vistrappumpingmodel_stub\n from ST_DataModelBindings.dpd.vis import visgainmodel_stub\n from ST_DataModelBindings.dpd.vis import viszeropoint_stub\n+from ST_DataModelBindings.dpd.vis import visghostmodel_stub\n # pro\n from ST_DataModelBindings.pro import le1_stub\n from ST_DataModelBindings.pro import vis_stub\n@@ -1028,7 +1030,8 @@ def stack_cat_dp(fits_catalog, spatial_footprint, observation_id, raw_frame_id=U\n # Calibrated exposure data product\n #---------------------------------\n \n-def calib_exp_dp(exposure: str, prnu_corr_exposure: str, psf: str, background: str, weightmap: str, raw_frame_id: str):\n+def calib_exp_dp( exposure: str, prnu_corr_exposure: str, psf: str,\n+                  background: str, weightmap: str, raw_meta: dict = None):\n     \"\"\"Creates a DpdVisCalibratedFrame from a FITS single exposure + associated files\n \n     Parameters\n@@ -1038,6 +1041,7 @@ def calib_exp_dp(exposure: str, prnu_corr_exposure: str, psf: str, background: s\n         psf: filename of the PSF model FITS file\n         background: filename of the background FITS file\n         weightmap: filename of the weightmap FITS file\n+        metadata: optional config.cfg section containing raw frame metadata\n \n     Returns\n     -------\n@@ -1098,19 +1102,18 @@ def calib_exp_dp(exposure: str, prnu_corr_exposure: str, psf: str, background: s\n     data.WLQ2Exposures = create_WLQ2_exposures(prnu_corr_exposure)\n     data.PsfModelStorage = DmUtils.create_fits_storage(\n                                vis_stub.visPsfModelStorageFitsFile,\n-                               psf, \"vis.psfModel\", \"0.1\")\n+                               os.path.basename( psf), \"vis.psfModel\", \"0.1\")\n     data.BackgroundStorage = DmUtils.create_fits_storage(\n                                vis_stub.visBackgroundStorageFitsFile,\n-                               background, \"vis.backgroundMap\", \"0.1\")\n+                               os.path.basename( background), \"vis.backgroundMap\", \"0.1\")\n     data.WeightStorage = DmUtils.create_fits_storage(\n                                vis_stub.visWeightStorageFitsFile,\n-                               weightmap, \"vis.weightMap\", \"0.1\")\n+                               os.path.basename( weightmap), \"vis.weightMap\", \"0.1\")\n     data.DataStorage = DmUtils.create_fits_storage(\n                                vis_stub.visCalibratedStorageFitsFile,\n-                               os.path.basename(exposure), \"vis.calibratedFrame\", \"0.1\")\n+                               os.path.basename( exposure), \"vis.calibratedFrame\", \"0.1\")\n \n     # DetectorList\n-#    data.DetectorList = img_stub.detectorList()\n     data.DetectorList = vis_stub.visCalFrameDetectorList()\n     ext_header_list = []\n     ext = 1\n@@ -1128,17 +1131,23 @@ def calib_exp_dp(exposure: str, prnu_corr_exposure: str, psf: str, background: s\n     data.ImgSpatialFootprint = DmUtils.create_spatial_footprint_from_header_list(ext_header_list,\n                                                                                  N_FOOTPRINT_SAMPLE_STEPS)\n \n-    # InputRawFrameReference\n-    data.InputRawFrameReference = sys_stub.dataProductReference()\n-    data.InputRawFrameReference.ProductID = raw_frame_id\n-    data.InputRawFrameReference.ProductType = \"DpdVisRawFrame\"\n+    if raw_meta is not None:\n+      if \"DpdVisRawFrame_ProductID\" in raw_meta:\n+        data.InputRawFrameReference = sys_stub.dataProductReference()\n+        data.InputRawFrameReference.ProductID = raw_meta[\"DpdVisRawFrame_ProductID\"]\n+        data.InputRawFrameReference.ProductType = \"DpdVisRawFrame\"\n+      if \"dp.Data.ObservationSequence.CalblockId\" in raw_meta:\n+        data.ObservationSequence.CalblockId = raw_meta[\"dp.Data.ObservationSequence.CalblockId\"]\n+      if \"dp.Data.ObservationSequence.CalblockVariant\"in raw_meta:\n+        data.ObservationSequence.CalblockVariant = raw_meta[\"dp.Data.ObservationSequence.CalblockVariant\"]\n \n     data_product.Data = data\n \n     return data_product\n \n \n-def stack_dp(stack: str, survey_type: str, obsid: int, psf: str, background: str, weightmap: str):\n+def stack_dp( stack: str, survey_type: str, obsid: int, calblock_id: str,\n+              psf: str, background: str, weightmap: str):\n     \"\"\"Creates a DpDVisStackedFrame from a FITS stack file + associated files\n \n     Parameters\n@@ -1184,6 +1193,7 @@ def stack_dp(stack: str, survey_type: str, obsid: int, psf: str, background: str\n     data.ImgSpatialFootprint = DmUtils.create_spatial_footprint_from_header(ext_header,\n                                                                             N_FOOTPRINT_SAMPLE_STEPS)\n     data.ObservationId = obsid\n+    data.CalblockId = calblock_id\n     data.DataStorage = DmUtils.create_fits_storage(\n                                vis_stub.visStackedStorageFitsFile,\n                                os.path.basename(stack), \"vis.stackedImage\", \"0.1\")\n@@ -1483,7 +1493,7 @@ def create_analysis_dp(result_passed: bool, aux_file: str, raw_frame_id=None, an\n          analysis_data.DataContainer = dss_stub.dataContainer.Factory()\n          analysis_data.DataContainer.FileName = os.path.basename(filename)\n          analysis_data.DataContainer.filestatus = \"PROPOSED\"\n-         analysis_data.DataContainer.FileType = \"fits\" \n+         analysis_data.DataContainer.FileType = \"fits\"\n          data.AnalysisData.append(analysis_data)\n \n     data_product.Data = data\n@@ -1802,6 +1812,10 @@ def create_DpdVisBloomingModel( file_name: str) ->  visbloomingmodel_stub.DpdVis\n   fill_visFileContainer_dp( dp, [file_name])\n   return dp\n \n+def create_DpdVisBFEModel( file_name: str) -> visbfemodel_stub.DpdVisBFEModel:\n+   dp = visbfemodel_stub.DpdVisBFEModel()\n+   fill_visFileContainer_dp( dp, [file_name])\n+   return dp\n \n def create_DpdVisGainModel( file_name: str) ->  visgainmodel_stub.DpdVisGainModel:\n   dp = visgainmodel_stub.DpdVisGainModel()\n@@ -1831,3 +1845,9 @@ def create_DpdVisZeroPoint( file_name: str) ->  viszeropoint_stub.DpdVisZeroPoin\n   dp = viszeropoint_stub.DpdVisZeroPoint()\n   fill_visFileContainer_dp( dp, [file_name])\n   return dp\n+\n+\n+def create_DpdVisGhostModel( file_name: str) ->  visghostmodel_stub.DpdVisGhostModel:\n+  dp = visghostmodel_stub.DpdVisGhostModel()\n+  fill_visFileContainer_dp( dp, [file_name])\n+  return dp\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ],
                        [
                            "@@ -75,6 +75,7 @@ from ST_DataModelBindings.dpd.vis import ppovalidation_stub\n from ST_DataModelBindings.dpd.vis import validationresult_stub\n from ST_DataModelBindings.dpd.vis import visfilecontainer_stub\n from ST_DataModelBindings.dpd.vis import visbloomingmodel_stub\n+from ST_DataModelBindings.dpd.vis import visbfemodel_stub\n from ST_DataModelBindings.dpd.vis import vistrappumpingmodel_stub\n from ST_DataModelBindings.dpd.vis import visgainmodel_stub\n from ST_DataModelBindings.dpd.vis import viszeropoint_stub\n@@ -1027,7 +1028,8 @@ def stack_cat_dp(fits_catalog, spatial_footprint, observation_id, raw_frame_id=U\n # Calibrated exposure data product\n #---------------------------------\n \n-def calib_exp_dp(exposure: str, prnu_corr_exposure: str, psf: str, background: str, weightmap: str, raw_frame_id: str):\n+def calib_exp_dp( exposure: str, prnu_corr_exposure: str, psf: str,\n+                  background: str, weightmap: str, raw_meta: dict = None):\n     \"\"\"Creates a DpdVisCalibratedFrame from a FITS single exposure + associated files\n \n     Parameters\n@@ -1037,6 +1039,7 @@ def calib_exp_dp(exposure: str, prnu_corr_exposure: str, psf: str, background: s\n         psf: filename of the PSF model FITS file\n         background: filename of the background FITS file\n         weightmap: filename of the weightmap FITS file\n+        metadata: optional config.cfg section containing raw frame metadata\n \n     Returns\n     -------\n@@ -1097,19 +1100,18 @@ def calib_exp_dp(exposure: str, prnu_corr_exposure: str, psf: str, background: s\n     data.WLQ2Exposures = create_WLQ2_exposures(prnu_corr_exposure)\n     data.PsfModelStorage = DmUtils.create_fits_storage(\n                                vis_stub.visPsfModelStorageFitsFile,\n-                               psf, \"vis.psfModel\", \"0.1\")\n+                               os.path.basename( psf), \"vis.psfModel\", \"0.1\")\n     data.BackgroundStorage = DmUtils.create_fits_storage(\n                                vis_stub.visBackgroundStorageFitsFile,\n-                               background, \"vis.backgroundMap\", \"0.1\")\n+                               os.path.basename( background), \"vis.backgroundMap\", \"0.1\")\n     data.WeightStorage = DmUtils.create_fits_storage(\n                                vis_stub.visWeightStorageFitsFile,\n-                               weightmap, \"vis.weightMap\", \"0.1\")\n+                               os.path.basename( weightmap), \"vis.weightMap\", \"0.1\")\n     data.DataStorage = DmUtils.create_fits_storage(\n                                vis_stub.visCalibratedStorageFitsFile,\n-                               os.path.basename(exposure), \"vis.calibratedFrame\", \"0.1\")\n+                               os.path.basename( exposure), \"vis.calibratedFrame\", \"0.1\")\n \n     # DetectorList\n-#    data.DetectorList = img_stub.detectorList()\n     data.DetectorList = vis_stub.visCalFrameDetectorList()\n     ext_header_list = []\n     ext = 1\n@@ -1127,17 +1129,23 @@ def calib_exp_dp(exposure: str, prnu_corr_exposure: str, psf: str, background: s\n     data.ImgSpatialFootprint = DmUtils.create_spatial_footprint_from_header_list(ext_header_list,\n                                                                                  N_FOOTPRINT_SAMPLE_STEPS)\n \n-    # InputRawFrameReference\n-    data.InputRawFrameReference = sys_stub.dataProductReference()\n-    data.InputRawFrameReference.ProductID = raw_frame_id\n-    data.InputRawFrameReference.ProductType = \"DpdVisRawFrame\"\n+    if raw_meta is not None:\n+      if \"DpdVisRawFrame_ProductID\" in raw_meta:\n+        data.InputRawFrameReference = sys_stub.dataProductReference()\n+        data.InputRawFrameReference.ProductID = raw_meta[\"DpdVisRawFrame_ProductID\"]\n+        data.InputRawFrameReference.ProductType = \"DpdVisRawFrame\"\n+      if \"dp.Data.ObservationSequence.CalblockId\" in raw_meta:\n+        data.ObservationSequence.CalblockId = raw_meta[\"dp.Data.ObservationSequence.CalblockId\"]\n+      if \"dp.Data.ObservationSequence.CalblockVariant\"in raw_meta:\n+        data.ObservationSequence.CalblockVariant = raw_meta[\"dp.Data.ObservationSequence.CalblockVariant\"]\n \n     data_product.Data = data\n \n     return data_product\n \n \n-def stack_dp(stack: str, survey_type: str, obsid: int, psf: str, background: str, weightmap: str):\n+def stack_dp( stack: str, survey_type: str, obsid: int, calblock_id: str,\n+              psf: str, background: str, weightmap: str):\n     \"\"\"Creates a DpDVisStackedFrame from a FITS stack file + associated files\n \n     Parameters\n@@ -1183,6 +1191,7 @@ def stack_dp(stack: str, survey_type: str, obsid: int, psf: str, background: str\n     data.ImgSpatialFootprint = DmUtils.create_spatial_footprint_from_header(ext_header,\n                                                                             N_FOOTPRINT_SAMPLE_STEPS)\n     data.ObservationId = obsid\n+    data.CalblockId = calblock_id\n     data.DataStorage = DmUtils.create_fits_storage(\n                                vis_stub.visStackedStorageFitsFile,\n                                os.path.basename(stack), \"vis.stackedImage\", \"0.1\")\n@@ -1448,7 +1457,7 @@ def create_analysis_dp(result_passed: bool, aux_file: str, raw_frame_id=None, an\n          analysis_data.DataContainer = dss_stub.dataContainer.Factory()\n          analysis_data.DataContainer.FileName = os.path.basename(filename)\n          analysis_data.DataContainer.filestatus = \"PROPOSED\"\n-         analysis_data.DataContainer.FileType = \"fits\" \n+         analysis_data.DataContainer.FileType = \"fits\"\n          data.AnalysisData.append(analysis_data)\n \n     data_product.Data = data\n@@ -1767,6 +1776,10 @@ def create_DpdVisBloomingModel( file_name: str) ->  visbloomingmodel_stub.DpdVis\n   fill_visFileContainer_dp( dp, [file_name])\n   return dp\n \n+def create_DpdVisBFEModel( file_name: str) -> visbfemodel_stub.DpdVisBFEModel:\n+   dp = visbfemodel_stub.DpdVisBFEModel()\n+   fill_visFileContainer_dp( dp, [file_name])\n+   return dp\n \n def create_DpdVisGainModel( file_name: str) ->  visgainmodel_stub.DpdVisGainModel:\n   dp = visgainmodel_stub.DpdVisGainModel()\n",
                            "Merge branch 'release-13.0' into develop: Fixes bugs #20505, 23168, 23190, 23265",
                            "Catherine Grenet",
                            "2023-08-07T12:19:04.000+02:00",
                            "f112799d015cdc323c99ef638e7027ad8decb28e"
                        ],
                        [
                            "@@ -1028,7 +1028,8 @@ def stack_cat_dp(fits_catalog, spatial_footprint, observation_id, raw_frame_id=U\n # Calibrated exposure data product\n #---------------------------------\n \n-def calib_exp_dp(exposure: str, prnu_corr_exposure: str, psf: str, background: str, weightmap: str, raw_frame_id: str):\n+def calib_exp_dp( exposure: str, prnu_corr_exposure: str, psf: str,\n+                  background: str, weightmap: str, raw_meta: dict = None):\n     \"\"\"Creates a DpdVisCalibratedFrame from a FITS single exposure + associated files\n \n     Parameters\n@@ -1038,6 +1039,7 @@ def calib_exp_dp(exposure: str, prnu_corr_exposure: str, psf: str, background: s\n         psf: filename of the PSF model FITS file\n         background: filename of the background FITS file\n         weightmap: filename of the weightmap FITS file\n+        metadata: optional config.cfg section containing raw frame metadata\n \n     Returns\n     -------\n@@ -1098,19 +1100,18 @@ def calib_exp_dp(exposure: str, prnu_corr_exposure: str, psf: str, background: s\n     data.WLQ2Exposures = create_WLQ2_exposures(prnu_corr_exposure)\n     data.PsfModelStorage = DmUtils.create_fits_storage(\n                                vis_stub.visPsfModelStorageFitsFile,\n-                               psf, \"vis.psfModel\", \"0.1\")\n+                               os.path.basename( psf), \"vis.psfModel\", \"0.1\")\n     data.BackgroundStorage = DmUtils.create_fits_storage(\n                                vis_stub.visBackgroundStorageFitsFile,\n-                               background, \"vis.backgroundMap\", \"0.1\")\n+                               os.path.basename( background), \"vis.backgroundMap\", \"0.1\")\n     data.WeightStorage = DmUtils.create_fits_storage(\n                                vis_stub.visWeightStorageFitsFile,\n-                               weightmap, \"vis.weightMap\", \"0.1\")\n+                               os.path.basename( weightmap), \"vis.weightMap\", \"0.1\")\n     data.DataStorage = DmUtils.create_fits_storage(\n                                vis_stub.visCalibratedStorageFitsFile,\n-                               os.path.basename(exposure), \"vis.calibratedFrame\", \"0.1\")\n+                               os.path.basename( exposure), \"vis.calibratedFrame\", \"0.1\")\n \n     # DetectorList\n-#    data.DetectorList = img_stub.detectorList()\n     data.DetectorList = vis_stub.visCalFrameDetectorList()\n     ext_header_list = []\n     ext = 1\n@@ -1128,17 +1129,23 @@ def calib_exp_dp(exposure: str, prnu_corr_exposure: str, psf: str, background: s\n     data.ImgSpatialFootprint = DmUtils.create_spatial_footprint_from_header_list(ext_header_list,\n                                                                                  N_FOOTPRINT_SAMPLE_STEPS)\n \n-    # InputRawFrameReference\n-    data.InputRawFrameReference = sys_stub.dataProductReference()\n-    data.InputRawFrameReference.ProductID = raw_frame_id\n-    data.InputRawFrameReference.ProductType = \"DpdVisRawFrame\"\n+    if raw_meta is not None:\n+      if \"DpdVisRawFrame_ProductID\" in raw_meta:\n+        data.InputRawFrameReference = sys_stub.dataProductReference()\n+        data.InputRawFrameReference.ProductID = raw_meta[\"DpdVisRawFrame_ProductID\"]\n+        data.InputRawFrameReference.ProductType = \"DpdVisRawFrame\"\n+      if \"dp.Data.ObservationSequence.CalblockId\" in raw_meta:\n+        data.ObservationSequence.CalblockId = raw_meta[\"dp.Data.ObservationSequence.CalblockId\"]\n+      if \"dp.Data.ObservationSequence.CalblockVariant\"in raw_meta:\n+        data.ObservationSequence.CalblockVariant = raw_meta[\"dp.Data.ObservationSequence.CalblockVariant\"]\n \n     data_product.Data = data\n \n     return data_product\n \n \n-def stack_dp(stack: str, survey_type: str, obsid: int, psf: str, background: str, weightmap: str):\n+def stack_dp( stack: str, survey_type: str, obsid: int, calblock_id: str,\n+              psf: str, background: str, weightmap: str):\n     \"\"\"Creates a DpDVisStackedFrame from a FITS stack file + associated files\n \n     Parameters\n@@ -1184,6 +1191,7 @@ def stack_dp(stack: str, survey_type: str, obsid: int, psf: str, background: str\n     data.ImgSpatialFootprint = DmUtils.create_spatial_footprint_from_header(ext_header,\n                                                                             N_FOOTPRINT_SAMPLE_STEPS)\n     data.ObservationId = obsid\n+    data.CalblockId = calblock_id\n     data.DataStorage = DmUtils.create_fits_storage(\n                                vis_stub.visStackedStorageFitsFile,\n                                os.path.basename(stack), \"vis.stackedImage\", \"0.1\")\n@@ -1449,7 +1457,7 @@ def create_analysis_dp(result_passed: bool, aux_file: str, raw_frame_id=None, an\n          analysis_data.DataContainer = dss_stub.dataContainer.Factory()\n          analysis_data.DataContainer.FileName = os.path.basename(filename)\n          analysis_data.DataContainer.filestatus = \"PROPOSED\"\n-         analysis_data.DataContainer.FileType = \"fits\" \n+         analysis_data.DataContainer.FileType = \"fits\"\n          data.AnalysisData.append(analysis_data)\n \n     data_product.Data = data\n",
                            "Merge branch 'hotfix_20505_calblockid' into 'release-13.0'",
                            "Catherine Grenet",
                            "2023-08-07T08:55:33.000+00:00",
                            "e1c03bd819fe3602af68ac1eb28cae693b4e3563"
                        ],
                        [
                            "@@ -1027,7 +1027,8 @@ def stack_cat_dp(fits_catalog, spatial_footprint, observation_id, raw_frame_id=U\n # Calibrated exposure data product\n #---------------------------------\n \n-def calib_exp_dp(exposure: str, prnu_corr_exposure: str, psf: str, background: str, weightmap: str, raw_frame_id: str):\n+def calib_exp_dp( exposure: str, prnu_corr_exposure: str, psf: str,\n+                  background: str, weightmap: str, raw_meta: dict = None):\n     \"\"\"Creates a DpdVisCalibratedFrame from a FITS single exposure + associated files\n \n     Parameters\n@@ -1037,6 +1038,7 @@ def calib_exp_dp(exposure: str, prnu_corr_exposure: str, psf: str, background: s\n         psf: filename of the PSF model FITS file\n         background: filename of the background FITS file\n         weightmap: filename of the weightmap FITS file\n+        metadata: optional config.cfg section containing raw frame metadata\n \n     Returns\n     -------\n@@ -1097,19 +1099,18 @@ def calib_exp_dp(exposure: str, prnu_corr_exposure: str, psf: str, background: s\n     data.WLQ2Exposures = create_WLQ2_exposures(prnu_corr_exposure)\n     data.PsfModelStorage = DmUtils.create_fits_storage(\n                                vis_stub.visPsfModelStorageFitsFile,\n-                               psf, \"vis.psfModel\", \"0.1\")\n+                               os.path.basename( psf), \"vis.psfModel\", \"0.1\")\n     data.BackgroundStorage = DmUtils.create_fits_storage(\n                                vis_stub.visBackgroundStorageFitsFile,\n-                               background, \"vis.backgroundMap\", \"0.1\")\n+                               os.path.basename( background), \"vis.backgroundMap\", \"0.1\")\n     data.WeightStorage = DmUtils.create_fits_storage(\n                                vis_stub.visWeightStorageFitsFile,\n-                               weightmap, \"vis.weightMap\", \"0.1\")\n+                               os.path.basename( weightmap), \"vis.weightMap\", \"0.1\")\n     data.DataStorage = DmUtils.create_fits_storage(\n                                vis_stub.visCalibratedStorageFitsFile,\n-                               os.path.basename(exposure), \"vis.calibratedFrame\", \"0.1\")\n+                               os.path.basename( exposure), \"vis.calibratedFrame\", \"0.1\")\n \n     # DetectorList\n-#    data.DetectorList = img_stub.detectorList()\n     data.DetectorList = vis_stub.visCalFrameDetectorList()\n     ext_header_list = []\n     ext = 1\n@@ -1127,17 +1128,23 @@ def calib_exp_dp(exposure: str, prnu_corr_exposure: str, psf: str, background: s\n     data.ImgSpatialFootprint = DmUtils.create_spatial_footprint_from_header_list(ext_header_list,\n                                                                                  N_FOOTPRINT_SAMPLE_STEPS)\n \n-    # InputRawFrameReference\n-    data.InputRawFrameReference = sys_stub.dataProductReference()\n-    data.InputRawFrameReference.ProductID = raw_frame_id\n-    data.InputRawFrameReference.ProductType = \"DpdVisRawFrame\"\n+    if raw_meta is not None:\n+      if \"DpdVisRawFrame_ProductID\" in raw_meta:\n+        data.InputRawFrameReference = sys_stub.dataProductReference()\n+        data.InputRawFrameReference.ProductID = raw_meta[\"DpdVisRawFrame_ProductID\"]\n+        data.InputRawFrameReference.ProductType = \"DpdVisRawFrame\"\n+      if \"dp.Data.ObservationSequence.CalblockId\" in raw_meta:\n+        data.ObservationSequence.CalblockId = raw_meta[\"dp.Data.ObservationSequence.CalblockId\"]\n+      if \"dp.Data.ObservationSequence.CalblockVariant\"in raw_meta:\n+        data.ObservationSequence.CalblockVariant = raw_meta[\"dp.Data.ObservationSequence.CalblockVariant\"]\n \n     data_product.Data = data\n \n     return data_product\n \n \n-def stack_dp(stack: str, survey_type: str, obsid: int, psf: str, background: str, weightmap: str):\n+def stack_dp( stack: str, survey_type: str, obsid: int, calblock_id: str,\n+              psf: str, background: str, weightmap: str):\n     \"\"\"Creates a DpDVisStackedFrame from a FITS stack file + associated files\n \n     Parameters\n@@ -1183,6 +1190,7 @@ def stack_dp(stack: str, survey_type: str, obsid: int, psf: str, background: str\n     data.ImgSpatialFootprint = DmUtils.create_spatial_footprint_from_header(ext_header,\n                                                                             N_FOOTPRINT_SAMPLE_STEPS)\n     data.ObservationId = obsid\n+    data.CalblockId = calblock_id\n     data.DataStorage = DmUtils.create_fits_storage(\n                                vis_stub.visStackedStorageFitsFile,\n                                os.path.basename(stack), \"vis.stackedImage\", \"0.1\")\n@@ -1448,7 +1456,7 @@ def create_analysis_dp(result_passed: bool, aux_file: str, raw_frame_id=None, an\n          analysis_data.DataContainer = dss_stub.dataContainer.Factory()\n          analysis_data.DataContainer.FileName = os.path.basename(filename)\n          analysis_data.DataContainer.filestatus = \"PROPOSED\"\n-         analysis_data.DataContainer.FileType = \"fits\" \n+         analysis_data.DataContainer.FileType = \"fits\"\n          data.AnalysisData.append(analysis_data)\n \n     data_product.Data = data\n",
                            "fix issue #20505: CalblockId not copied in VIS output products",
                            "Sylvain Mottet",
                            "2023-08-06T22:20:00.000+02:00",
                            "644af87977aafe2c2c9ee8c5b7229666b141010e"
                        ],
                        [
                            "@@ -75,6 +75,7 @@ from ST_DataModelBindings.dpd.vis import ppovalidation_stub\n from ST_DataModelBindings.dpd.vis import validationresult_stub\n from ST_DataModelBindings.dpd.vis import visfilecontainer_stub\n from ST_DataModelBindings.dpd.vis import visbloomingmodel_stub\n+from ST_DataModelBindings.dpd.vis import visbfemodel_stub\n from ST_DataModelBindings.dpd.vis import vistrappumpingmodel_stub\n from ST_DataModelBindings.dpd.vis import visgainmodel_stub\n from ST_DataModelBindings.dpd.vis import viszeropoint_stub\n@@ -1767,6 +1768,10 @@ def create_DpdVisBloomingModel( file_name: str) ->  visbloomingmodel_stub.DpdVis\n   fill_visFileContainer_dp( dp, [file_name])\n   return dp\n \n+def create_DpdVisBFEModel( file_name: str) -> visbfemodel_stub.DpdVisBFEModel:\n+   dp = visbfemodel_stub.DpdVisBFEModel()\n+   fill_visFileContainer_dp( dp, [file_name])\n+   return dp\n \n def create_DpdVisGainModel( file_name: str) ->  visgainmodel_stub.DpdVisGainModel:\n   dp = visgainmodel_stub.DpdVisGainModel()\n",
                            "Merge branch 'hotfix_#23168_DpdVISBFEModel' into 'release-13.0'",
                            "Catherine Grenet",
                            "2023-08-06T15:58:02.000+00:00",
                            "0c428053df894c54b302bfd922498929d9190b0c"
                        ],
                        [
                            "@@ -75,6 +75,7 @@ from ST_DataModelBindings.dpd.vis import ppovalidation_stub\n from ST_DataModelBindings.dpd.vis import validationresult_stub\n from ST_DataModelBindings.dpd.vis import visfilecontainer_stub\n from ST_DataModelBindings.dpd.vis import visbloomingmodel_stub\n+from ST_DataModelBindings.dpd.vis import visbfemodel_stub\n from ST_DataModelBindings.dpd.vis import vistrappumpingmodel_stub\n from ST_DataModelBindings.dpd.vis import visgainmodel_stub\n from ST_DataModelBindings.dpd.vis import viszeropoint_stub\n@@ -1767,6 +1768,10 @@ def create_DpdVisBloomingModel( file_name: str) ->  visbloomingmodel_stub.DpdVis\n   fill_visFileContainer_dp( dp, [file_name])\n   return dp\n \n+def create_DpdVisBFEModel( file_name: str) -> visbfemodel_stub.DpdVisBFEModel:\n+   dp = visbfemodel_stub.DpdVisBFEModel()\n+   fill_visFileContainer_dp( dp, [file_name])\n+   return dp\n \n def create_DpdVisGainModel( file_name: str) ->  visgainmodel_stub.DpdVisGainModel:\n   dp = visgainmodel_stub.DpdVisGainModel()\n",
                            "Fix bug #23168 : In VIS_BrighterFatter Calibration pipeline, output is DpdVisBFEModel",
                            "Thomas Flanet",
                            "2023-08-04T11:13:51.000+02:00",
                            "d177bca2486258d3d2baf19cf01d56851abae441"
                        ]
                    ],
                    "VIS_PTC_NL/python/VIS_PTC_NL/VIS_PTC_NL_calibration.py": [
                        [
                            "@@ -58,7 +58,7 @@ import ElementsKernel.Logging\n logger = ElementsKernel.Logging.getLogger( __name__)\n \n \n-def compute_ptc(flat_1, flat_2, quad_name, n_tile=10, bf_corr_typ=1, kernelsize=12, fltn=0):\n+def compute_ptc(flat_1, flat_2, quad_name, n_tile=10, bf_corr_typ=1, fltn=0, kernelsize=12, sigclip=5):\n     '''\n     @brief\n     flat_1 and flat_2 are two flats of a single pair (already processed)\n@@ -77,57 +77,51 @@ def compute_ptc(flat_1, flat_2, quad_name, n_tile=10, bf_corr_typ=1, kernelsize=\n     tab_diff = np.array([])\n \n     if (bf_corr_typ == 0):\n-        tab_var, tab_mean, tab_err_var  = Compute_mean_var_correctedfromBFE(flat_1, flat_2, n_tile, 0, mm=1, fltn=fltn)\n-    elif (bf_corr_typ == 1):\n-         # we correct from brighter-fatter with covariance'\n-         tab_var, tab_mean, tab_err_var = Compute_mean_var_correctedfromBFE(flat_1, flat_2, n_tile, kernelsize, mm=1, fltn=fltn)\n+        tab_var, tab_mean, tab_err_var = Compute_mean_var_correctedfromBFE(flat_1-flat_2,(flat_1+flat_2)/2.,np.ones(np.shape(flat_1)), n_tile, fltn=fltn, sigclip=sigclip)\n+    #elif (bf_corr_typ == 1):\n+    #     # we correct from brighter-fatter with covariance'\n+    #     tab_var, tab_mean, tab_err_var = Compute_mean_var_correctedfromBFE(flat_1, flat_2, n_tile, kernelsize, mm=1, fltn=fltn)\n     else:\n          # we first rebin the quadrants\n-         new_flat_1, new_flat_2         = rebin3(flat_1, flat_2, kernelsize)\n-         tab_var, tab_mean, tab_err_var = Compute_mean_var_correctedfromBFE(new_flat_1, new_flat_2, n_tile, 0, mm=1, fltn=fltn)\n+\n+         new_flat_1, new_flat_2, wg     = rebin3(flat_1-flat_2, (flat_2+flat_1)/2., kernelsize, sigclip=sigclip)\n+         tab_var, tab_mean, tab_err_var = Compute_mean_var_correctedfromBFE(new_flat_1, new_flat_2, wg, n_tile, fltn=fltn,sigclip=sigclip)\n          tab_var                        = tab_var*kernelsize*kernelsize\n          tab_err_var                    = tab_err_var*(kernelsize*kernelsize)**2\n-\n     return tab_var, tab_mean, np.sqrt(tab_err_var)\n \n \n-def Compute_mean_var_correctedfromBFE(image_1, image_2, n_tile, kernelsize, mm=1, fltn=0):\n+def Compute_mean_var_correctedfromBFE(image_s1, image_s2, wg, n_tile, fltn=0, sigclip=5):\n     '''\n     @brief\n-    image_1 and image_2 are two offset-subtracted flats.\n-    kernelsize: if >0, BFE is corrected from the \"covariance method\"\n-    if fltn=1, the flats are flattened, and pixels are sorted by values and divided in a certain number of bins. Variance / mean are computed on\n+    image_1 and image_2 are respectively the difference and the mean of  two offset-subtracted flats.\n+    if fltn=1, the flats are flattened, and pixels are sorted by values and divided in a certain number of bins.\n     @return\n     '''\n-    DD = (image_1-image_2)\n-    MM = (image_1+image_2)/2.\n-\n-    if (kernelsize > 0):\n-        image_s1 = image_1[kernelsize:-kernelsize,kernelsize:-kernelsize]\n-        image_s2 = image_2[kernelsize:-kernelsize,kernelsize:-kernelsize]\n-    else:\n-        image_s1 = image_1\n-        image_s2 = image_2\n-\n-    if (fltn == 0):\n-        MM_s = (image_s1+image_s2)/2.\n-        DD_s = (image_s1-image_s2)\n-        # ww = np.where((np.abs(DD_s)<MM_s) * (np.isfinite(DD_s)))\n-    else:\n-        ### flatten the image and sort the pixels by their values\n-        MM_s = ((image_s1+image_s2).flatten()/2.)\n-        DD_s = ((image_s1-image_s2).flatten())\n-        idi = np.argsort(MM_s)\n-        # ww = np.where((np.abs(DD_s[idi])<MM_s[idi]) * (np.isfinite(DD_s[idi])))[0]\n-        # idi = idi[ww]\n+    DD_s = image_s1\n+    MM_s = image_s2\n+\n+    if (fltn == 1):\n+        MM_s = image_s2.flatten()\n+        DD_s = image_s1.flatten()\n+        wg   = wg.flatten()\n+        # keep only the non-masked pixels\n+        ww = np.where((ma.getmask(DD_s) == False)*(ma.getmask(MM_s) == False))[0]\n+        idi = np.argsort(MM_s[ww])\n+        idi = ww[idi]\n+        # additional sigma-clipping to be sure to remove the outliers\n+        mymas = astropy.stats.sigma_clip(DD_s[idi],sigma = sigclip)\n+        mask_ = ma.getmask(mymas)\n+        ww = np.where((mask_ == False))[0]\n+        idi = idi[ww]\n \n     n1 = np.shape(image_s1)[0]\n     n2 = np.shape(image_s2)[1]\n \n     if (fltn == 0):\n         #n_tile is the size in pixel of the tile\n-        n_tile_1 = n_tile # np.int(n1/n_tile)\n-        n_tile_2 = n_tile #np.int(n2/n_tile)\n+        n_tile_1 = n_tile\n+        n_tile_2 = n_tile\n         fluxmean_all = np.zeros(n_tile_1*n_tile_2)\n         variance_all = np.zeros(n_tile_1*n_tile_2)\n         err_var_all  = np.zeros(n_tile_1*n_tile_2)\n@@ -135,46 +129,27 @@ def Compute_mean_var_correctedfromBFE(image_1, image_2, n_tile, kernelsize, mm=1\n         n_pix_2 = np.int(n2/n_tile)\n         for k in range(n_tile_1):\n             for j in range(n_tile_2):\n+                ic = k*n_tile_2 +j\n                 MM_tmp = MM_s[k*n_pix_1:(k+1)*n_pix_1,j*n_pix_2:(j+1)*n_pix_2]\n                 DD_tmp = DD_s[k*n_pix_1:(k+1)*n_pix_1,j*n_pix_2:(j+1)*n_pix_2]\n-\n-                # ww = np.where((np.abs(DD_tmp)<MM_tmp)*(np.isfinite(DD_tmp)))\n-                # n_pt = len(MM[ww])\n-                DD_tmp = astropy.stats.sigma_clip(DD_tmp,sigma = 5)\n-                mask_ = ma.getmask(DD_tmp)\n+                wg_tmp = wg[k*n_pix_1:(k+1)*n_pix_1,j*n_pix_2:(j+1)*n_pix_2]\n+                mymas = astropy.stats.sigma_clip(DD_tmp,sigma = sigclip)\n+                mask_ = ma.getmask(mymas)\n                 w = np.where(mask_ == False)\n                 MM_tmp = MM_tmp[w]\n+                DD_tmp = DD_tmp[w]\n+                wg_tmp = wg_tmp[w]\n                 n_pt = len(MM_tmp.flatten())\n-                ic = k*n_tile_2 + j\n-\n-                if (mm==1):\n-                    fluxmean_all[ic] = np.mean(MM_tmp)\n-                else:\n-                    fluxmean_all[ic] = np.median(MM_tmp)\n-                if (kernelsize == 0):\n-                    variance_all[ic] = np.std((DD_tmp))**2\n-                    mu_4 = np.mean((DD_tmp - np.mean(DD_tmp))**4)\n-                    # err_var_all[k] = mu_4/n_pt - variance_all[k]**2*(n_pt-3)/(n_pt*(n_pt-1))\n-                    # variance_all[k] /= 2 ## because uncertainties on the two flats of the pair add up in quadrature. We don't want to count it twice\n-                    # err_var_all[k] /= 4 ## if we divide variance by 2, we also divide its std by 2, and therefore its variance by 4\n+                if ((n_pt >1 ) * (np.sum(wg_tmp)>0)):\n+                    fluxmean_all[ic] = np.ma.sum(wg_tmp*MM_tmp)/np.sum(wg_tmp)\n+                    dd_mean = np.ma.sum(wg_tmp*DD_tmp)/np.sum(wg_tmp)\n+                    variance_all[ic] = np.ma.sum(wg_tmp*(DD_tmp-dd_mean)**2)/np.sum(wg_tmp)\n+                    mu_4 = np.ma.sum(wg_tmp*(DD_tmp - dd_mean)**4)/np.sum(wg_tmp)\n                     err_var_all[ic] = mu_4/n_pt - variance_all[ic]**2*(n_pt-3)/(n_pt*(n_pt-1))\n                     variance_all[ic] /= 2 ## because uncertainties on the two flats of the pair add up in quadrature. We don't want to count it twice\n                     err_var_all[ic] /= 4 ## if we divide variance by 2, we also divide its std by 2, and therefore its variance by 4\n-                else:\n-                    med = np.median(MM_tmp)\n-                    for m in range(-kernelsize,kernelsize+1):\n-                        for n in range(-kernelsize,kernelsize+1):\n-                            newids1 = kernelsize + w[0]+ m #kernelsize+newids//n2+m  ##3\n-                            newids2 = kernelsize + w[1]+ n #kernelsize+newids%n2+n\n-                            # variance_all[k] = variance_all[k] + np.sum(DD_tmp*DD[newids1,newids2])/(len(ww[0])-1) - np.sum(DD_tmp)*np.sum(DD_tmp)/(len(ww)-1)**2\n-                            # mu_4 = np.mean((DD_tmp - np.mean(DD_tmp))**4)\n-                            # err_var_all[k] = mu_4/n_pt - variance_all[k]**4*(n_pt-3)/(n_pt*(n_pt-1))\n-                            # err_var_all[k] /= 4 ### check this factor 4\n-                            # ic = k*n_tile_2 + j\n-                            variance_all[ic] = variance_all[ic] + np.sum(DD_tmp*DD[newids1,newids2])/(len(w[0])-1) - np.sum(DD_tmp)*np.sum(DD_tmp)/(len(w)-1)**2\n-                            mu_4 = np.mean((DD_tmp - np.mean(DD_tmp))**4)\n-                            err_var_all[ic] = mu_4/n_pt - variance_all[ic]**4*(n_pt-3)/(n_pt*(n_pt-1))\n-                            err_var_all[ic] /= 4 ### check this factor 4\n+                    variance_all[ic] *= np.ma.mean(wg_tmp)\n+                    err_var_all[ic] *= np.ma.mean(wg_tmp)**2\n     else:\n         fluxmean_all = np.zeros(n_tile)\n         variance_all = np.zeros(n_tile)\n@@ -183,40 +158,25 @@ def Compute_mean_var_correctedfromBFE(image_1, image_2, n_tile, kernelsize, mm=1\n \n         for k in range(n_tile):\n             newids = idi[k*nnn:(k+1)*nnn] #ids of the pixels which will contribute to this bin\n-            DD_tmp = astropy.stats.sigma_clip(DD_s[newids],sigma = 5)\n-            mask_ = ma.getmask(DD_tmp)\n-            ww = np.where(mask_ == False)[0]\n-            newids = newids[ww]\n-\n+            # DD_tmp = astropy.stats.sigma_clip(DD_s[newids],sigma = 5)\n+            # mask_ = ma.getmask(DD_tmp)\n+            # ww = np.where(mask_ == False)[0]\n+            # newids = newids[ww]\n             n_pt = len(newids)\n-            if (mm==1):\n-                fluxmean_all[k] = np.mean(MM_s[newids])\n-            else:\n-                fluxmean_all[k] = np.median(MM_s[newids])\n-\n-            if (kernelsize == 0):\n-                variance_all[k] = np.std((DD_s[newids]))**2 #/2.\n-                mu_4 = np.mean((DD_s[newids] - np.mean(DD_s[newids]) )**4)\n-\n+            if ((n_pt > 1) * (np.sum(wg[newids])>0)):\n+                fluxmean_all[k] = np.ma.sum(MM_s[newids]*wg[newids])/np.sum(wg[newids])\n+                dd_mean = np.ma.sum(wg[newids]*DD_s[newids])/np.sum(wg[newids])\n+                variance_all[k] = np.ma.sum(wg[newids]*(DD_s[newids]-dd_mean)**2)/np.sum(wg[newids])\n+                mu_4 = np.ma.sum(wg[newids]*(DD_s[newids] - dd_mean)**4)/np.sum(wg[newids])\n                 err_var_all[k] =  (mu_4/n_pt - variance_all[k]**2*(n_pt-3)/(n_pt*(n_pt-1)))\n                 variance_all[k] /= 2 ## because uncertainties on the two flats of the pair add up in quadrature. We don't want to count it twice\n                 err_var_all[k] /= 4 ## if we divide variance by 2, we also divide its std by 2, and therefore its variance by 4\n-            else:\n-                med = np.median(MM_s[newids])\n-                ttt = np.zeros([len(newids),kernelsize*2+1,kernelsize*2+1])\n-\n-                for m in range(-kernelsize,kernelsize+1):\n-                    for n in range(-kernelsize,kernelsize+1):\n-                        newids1 = kernelsize+newids//n2+m  ##3\n-                        newids2 = kernelsize+newids%n2+n\n-                        variance_all[k] = variance_all[k]+np.sum(DD_s[newids]*DD[newids1,newids2])/(len(newids)-1) - np.sum(DD_s[newids])*np.sum(DD_s[newids])/(len(newids)-1)**2\n-                        mu_4 = np.mean((DD_s[newids] - np.mean(DD_s[newids]))**4)\n-                        err_var_all[k] = (mu_4/n_pt - variance_all[k]**2*(n_pt-3)/(n_pt*(n_pt-1)))\n-                        err_var_all[k] /= 4 ### check this factor 4\n-\n-    return variance_all, fluxmean_all, err_var_all\n-\n-def rebin3(quad1, quad2, kernelsize):\n+                variance_all[k] *= np.ma.mean(wg[newids])\n+                err_var_all[k] *= np.ma.mean(wg[newids])**2\n+            ########\n+    return variance_all[(fluxmean_all>0)], fluxmean_all[fluxmean_all>0], err_var_all[fluxmean_all>0]\n+\n+def rebin3(quad1, quad2, kernelsize, sigclip=5):\n     '''\n     @brief\n     rebin two Masked ndarray data in 2D into two smaller Masked ndarray of the same rank, whose dimensions\n@@ -227,18 +187,23 @@ def rebin3(quad1, quad2, kernelsize):\n     the two rebinned Masked ndarray data\n     '''\n     shape = quad1.shape\n-    narrays = (asarray(shape)%kernelsize)+1 #.astype(np.int)-1\n+    narrays = (asarray(shape)%kernelsize)+1\n     n_pix = asarray(shape)//kernelsize\n \n     nq1 = ma.zeros([n_pix[0],n_pix[1],narrays[1]*narrays[0]])\n     nq2 = ma.zeros([n_pix[0],n_pix[1],narrays[1]*narrays[0]])\n+    wg  = ma.zeros([n_pix[0],n_pix[1],narrays[1]*narrays[0]])\n+\n     for np1 in range(narrays[0]):\n             for np2 in range(narrays[1]):\n                 a = quad1[np1:,np2:][:n_pix[0]*kernelsize,:n_pix[1]*kernelsize]\n+                a =  astropy.stats.sigma_clip(a,sigma = sigclip)\n                 nn = np.ma.reshape(a,[n_pix[0],kernelsize,n_pix[1],kernelsize])\n-                nq1[:,:,np1*narrays[1]+np2] = np.mean(nn,axis=(1,3))\n+                nq1[:,:,np1*narrays[1]+np2] = np.ma.mean(nn,axis=(1,3))\n                 a = quad2[np1:,np2:][:n_pix[0]*kernelsize,:n_pix[1]*kernelsize]\n+                a =  astropy.stats.sigma_clip(a,sigma = sigclip)\n                 nn = np.ma.reshape(a,[n_pix[0],kernelsize,n_pix[1],kernelsize])\n-                nq2[:,:,np1*narrays[1]+np2] = np.mean(nn,axis=(1,3))\n+                nq2[:,:,np1*narrays[1]+np2] = np.ma.mean(nn,axis=(1,3))\n+                wg[:,:,np1*narrays[1]+np2] = (np.ma.count(nn,axis=(1,3)))/(kernelsize*kernelsize)\n \n-    return nq1[:,:,0], nq2[:,:,0] #np.mean(nq1, axis=2), np.mean(nq2, axis=2)\n+    return nq1[:,:,0], nq2[:,:,0], wg[:,:,0]\n",
                            "Merge branch 'feature-22650-PTCNL-improvement' into 'release-13.0'",
                            "Catherine Grenet",
                            "2023-08-08T11:10:08.000+00:00",
                            "470cf10463903940dbf7603e844d32aa5eb4a682"
                        ]
                    ],
                    "VIS_PTC_NL/python/VIS_PTC_NL/VIS_mcmc_emcee.py": [
                        [
                            "@@ -208,12 +208,12 @@ def Make_Corner_Plot(out_chain, thetaref, rangetab, typ=\"mean\", burn_ = 100, log\n             else:\n                 plt.scatter(np.median(out_chain[:,n]),np.median(out_chain[:,n]),color=\"black\",marker='+')\n \n-            plt.scatter(thetaref[n],thetaref[k],color=\"black\",marker='+',s=200)\n+            # plt.scatter(thetaref[n],thetaref[k],color=\"black\",marker='+',s=200)\n             axes=plt.gca()\n             plt.text(0.05,0.08,f'measured: p{n+1}={np.round(np.mean(out_chain[:,n])*1000.)/1000.}; p{k+1}={np.round(np.mean(out_chain[:,k])*1000.)/1000.} ',\n                      transform=axes.transAxes,horizontalalignment='left',verticalalignment='bottom',fontsize=14,color=\"firebrick\")\n-            plt.text(0.05,0.02,f'model: p{n+1}={np.round(thetaref[n]*1000.)/1000.}; p{k+1}={np.round(thetaref[k]*1000.)/1000.} ',\n-                     transform=axes.transAxes,horizontalalignment='left',verticalalignment='bottom',fontsize=14,color=\"black\")\n+            # plt.text(0.05,0.02,f'model: p{n+1}={np.round(thetaref[n]*1000.)/1000.}; p{k+1}={np.round(thetaref[k]*1000.)/1000.} ',\n+                    #  transform=axes.transAxes,horizontalalignment='left',verticalalignment='bottom',fontsize=14,color=\"black\")\n             axes.tick_params(axis='both', which='major', labelsize=14)\n             axes.tick_params(axis='both', which='minor', labelsize=14)\n \n",
                            "Merge branch 'feature-22650-PTCNL-improvement' into 'release-13.0'",
                            "Catherine Grenet",
                            "2023-08-08T11:10:08.000+00:00",
                            "470cf10463903940dbf7603e844d32aa5eb4a682"
                        ]
                    ],
                    "VIS_PTC_NL/python/VIS_PTC_NL/file_entry_point.py": [
                        [
                            "@@ -106,8 +106,8 @@ def file_layer_entry_point(input_files, interm_dir, quadrant_id=None, in_flagmap\n         handle.close()\n         print(f\"flagmap handler closed...\")\n \n-        print(f\"applying algo.flagging_stack...\")\n-        flagging_stack_start = timer()\n+        # print(f\"applying algo.flagging_stack...\")\n+        # flagging_stack_start = timer()\n         # image_stack = algo.flagging_stack(image_stack32,\n         #                                   flagmap,\n         #                                   input_files,\n@@ -118,8 +118,8 @@ def file_layer_entry_point(input_files, interm_dir, quadrant_id=None, in_flagmap\n         #                                   flag_prescan_size,\n         #                                   flag_serial_overscan_size,\n         #                                   flag_parallel_overscan_size)\n-        flagging_stack_end = timer()\n-        print(f\"flagging_stack processed in {flagging_stack_end-flagging_stack_start} seconds...\")\n+        # flagging_stack_end = timer()\n+        # print(f\"flagging_stack processed in {flagging_stack_end-flagging_stack_start} seconds...\")\n     image_stack = ma.array(image_stack32, mask=flagmap, copy=False)\n \n     log.info(\"file_layer_entry_point(): end\")\n",
                            "Merge branch 'feature-22650-PTCNL-improvement' into 'release-13.0'",
                            "Catherine Grenet",
                            "2023-08-08T11:10:08.000+00:00",
                            "470cf10463903940dbf7603e844d32aa5eb4a682"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_PTC_NL_calib.py": [
                        [
                            "@@ -156,7 +156,7 @@ def mainMethod(args):\n     ## if bf_corr_typ==1: correction with covariance;\n     ## if bf_corr_typ==2: correction with rebinning\n     bf_corr_typ = 2\n-    tile_s      = 4  ## when bf_corr_typ ==2 , tile_s must be a small number.\n+    tile_s      = 3  ## when bf_corr_typ ==2 , tile_s must be a small number.\n     kernelsize  = 12 ## if bf_corr_typ==2:  we rebin in superpixels of size kernelsize x kernelsize original pixels\n \n     # Initialize JSON model file names\n@@ -238,9 +238,16 @@ def mainMethod(args):\n         n_steps_tot = 2000\n \n         ## initialisation\n+        ndim = 5\n         p1_r = np.array([0.5,1.5])\n         p2_r = np.array([-0.5,0.5])\n         p3_r = np.array([-0.5,0.5])\n+        tab_r = np.array([p1_r])\n+        # print(tab_r)\n+        for i in range(1,ndim):\n+            tab_r = np.append(tab_r,[np.array([-0.5,0.5])],axis=0)\n+        p = np.zeros(ndim)\n+        p[0] = 1/3.\n         tab_r = np.array([p1_r,p2_r,p3_r]) #range on which vary the parameters\n \n         p = np.array([0.3,0,0]) # initial guess for the parameter\n",
                            "Merge branch 'feature-22650-PTCNL-improvement' into 'release-13.0'",
                            "Catherine Grenet",
                            "2023-08-08T11:10:08.000+00:00",
                            "470cf10463903940dbf7603e844d32aa5eb4a682"
                        ]
                    ],
                    "VIS_Astrometry/python/VIS_Astrometry/wcsfit.py": [
                        [
                            "@@ -219,16 +219,16 @@ def get_parser():\n         help='maximum reference star magnitude (default: no limit)'\n     )\n     ref_opt_args_group.add_argument(\n-        '--flux-rad-min', type=float, default=0.5, metavar='FLUX_RADIUS',\n-        help='Lower limit on reference star FLUX_RADIUS (default: 0.5)'\n+        '--flux-rad-min', type=float, default=None, metavar='FLUX_RADIUS',\n+        help='Lower limit on reference star FLUX_RADIUS'\n     )\n     ref_opt_args_group.add_argument(\n-        '--flux-rad-max', type=float, default=2.5, metavar='FLUX_RADIUS',\n-        help='Upper limit on reference star FLUX_RADIUS (default: 2.5)'\n+        '--flux-rad-max', type=float, default=None, metavar='FLUX_RADIUS',\n+        help='Upper limit on reference star FLUX_RADIUS'\n     )\n     ref_opt_args_group.add_argument(\n-        '--flux-rad-peak', type=float, default=1.1, metavar='FLUX_RADIUS',\n-        help='Approximate reference star FLUX_RADIUS distribution peak (default: 1.1)'\n+        '--flux-rad-peak', type=float, default=None, metavar='FLUX_RADIUS',\n+        help='Approximate reference star FLUX_RADIUS distribution peak'\n     )\n \n     # minimiser termination optional arguments\n@@ -338,12 +338,14 @@ def check_cmdargs(_args):\n         parser.error(' and '.join(mag_lims) + f' require{plural} --refmagcol')\n \n     # check that the FLUX_RADIUS related arguments are sensible\n-    if _args.flux_rad_min >= _args.flux_rad_max:\n-        parser.error(\"FLUX_RADIUS minimum must be smaller than FLUX_RADIUS maximum\")\n-    if _args.flux_rad_peak <= _args.flux_rad_min:\n-        parser.error(\"FLUX_RADIUS peak must be larger than FLUX_RADIUS minimum\")\n-    if _args.flux_rad_peak >= _args.flux_rad_max:\n-        parser.error(\"FLUX_RADIUS peak must be smaller than FLUX_RADIUS maximum\")\n+    if _args.flux_rad_min is not None and _args.flux_rad_max is not None:\n+        if _args.flux_rad_min >= _args.flux_rad_max:\n+            parser.error(\"FLUX_RADIUS minimum must be smaller than FLUX_RADIUS maximum\")\n+        if _args.flux_rad_peak is not None:\n+            if _args.flux_rad_peak <= _args.flux_rad_min:\n+                parser.error(\"FLUX_RADIUS peak must be larger than FLUX_RADIUS minimum\")\n+            if _args.flux_rad_peak >= _args.flux_rad_max:\n+                parser.error(\"FLUX_RADIUS peak must be smaller than FLUX_RADIUS maximum\")\n \n     # check that the number of minimiser iterations is greater than zero\n     if not _args.niter > 0:\n@@ -1619,7 +1621,7 @@ def fpa_model_from_observation(observation, sip_order, logger=None):\n def read_observations_references(\n         source_catalogues, reference_catalogues,\n         refmagkey=None, refmagmin=None, refmagmax=None,\n-        flux_rad_min=0.5, flux_rad_max=2.5, flux_rad_peak=1.1,\n+        flux_rad_min=None, flux_rad_max=None, flux_rad_peak=None,\n         logger=None\n ):\n     \"\"\"\n@@ -1641,11 +1643,14 @@ def read_observations_references(\n         Maximum magnitude of the reference stars used from refcat (None for\n         no maximum limit).\n     flux_rad_min : float, optional\n-        Lower limit of acceptable FLUX_RADIUS range for real stars, default 0.5.\n+        Lower limit of acceptable FLUX_RADIUS range for real stars.\n+        Default None, i.e. no minimum FLUX_RADIUS.\n     flux_rad_max : float, optional\n-        Upper limit of acceptable FLUX_RADIUS range for real stars, default 2.5.\n+        Upper limit of acceptable FLUX_RADIUS range for real stars.\n+        Default None, i.e. no maximum FLUX_RADIUS.\n     flux_rad_peak : float, optional\n-        The peak of the FLUX_RADIUS distribution for real stars, default 1.1.\n+        The peak of the FLUX_RADIUS distribution for real stars.\n+        Default None, i.e. no FLUX_RADIUS distribution fitting.\n     logger : Logger, optional\n         A Logger for logging messages (None for no logging, default).\n \n@@ -2147,7 +2152,7 @@ def is_an_astrometric_kwd(kwd, include_naxis=False):\n \n \n def get_observation(src_cat_path, refdata, refmagmin=None, refmagmax=None,\n-                    flux_rad_min=0.5, flux_rad_max=2.5, flux_rad_peak=1.1,\n+                    flux_rad_min=None, flux_rad_max=None, flux_rad_peak=None,\n                     logger=None):\n     \"\"\"\n     Grab data and headers from the catalogue of the relevant observation.\n@@ -2167,11 +2172,14 @@ def get_observation(src_cat_path, refdata, refmagmin=None, refmagmax=None,\n         Maximum magnitude of the reference stars used from refcat (None for\n         no maximum limit).\n     flux_rad_min : float, optional\n-        Lower limit of acceptable FLUX_RADIUS range for real stars, default 0.5.\n+        Lower limit of acceptable FLUX_RADIUS range for real stars.\n+        Default None, i.e. no minimum FLUX_RADIUS.\n     flux_rad_max : float, optional\n-        Upper limit of acceptable FLUX_RADIUS range for real stars, default 2.5.\n+        Upper limit of acceptable FLUX_RADIUS range for real stars.\n+        Default None, i.e. no maximum FLUX_RADIUS.\n     flux_rad_peak : float, optional\n-        The peak of the FLUX_RADIUS distribution for real stars, default 1.1.\n+        The peak of the FLUX_RADIUS distribution for real stars.\n+        Default None, i.e. no FLUX_RADIUS distribution fitting.\n     logger : Logger, optional\n         A logger which will be used for printing the logging messages (None for\n         no printing).\n@@ -3374,7 +3382,7 @@ def gauss_fit(xdat, ydat, flux_rad_min, flux_rad_max, flux_rad_peak):\n \n \n def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n-                     flux_rad_min=0.5, flux_rad_max=2.5, flux_rad_peak=1.1,\n+                     flux_rad_min=None, flux_rad_max=None, flux_rad_peak=None,\n                      logger=None):\n     \"\"\"\n     Filter a set of sources by magnitude and flux radius\n@@ -3392,11 +3400,14 @@ def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n     mag_margin : float, optional\n         Allowable margin for error on the magnitudes\n     flux_rad_min : float, optional\n-        Lower limit of acceptable FLUX_RADIUS range for real stars, default 0.5.\n+        Lower limit of acceptable FLUX_RADIUS range for real stars.\n+        Default None, i.e. no minimum FLUX_RADIUS.\n     flux_rad_max : float, optional\n-        Upper limit of acceptable FLUX_RADIUS range for real stars, default 2.5.\n+        Upper limit of acceptable FLUX_RADIUS range for real stars.\n+        Default None, i.e. no maximum FLUX_RADIUS.\n     flux_rad_peak : float, optional\n-        The peak of the FLUX_RADIUS distribution for real stars, default 1.1.\n+        The peak of the FLUX_RADIUS distribution for real stars.\n+        Default None, i.e. no FLUX_RADIUS distribution fitting.\n     logger : Logger, optional\n         A logger which will be used for printing the logging messages (None for\n         no printing).\n@@ -3419,46 +3430,43 @@ def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n     if mag_max is not None:\n         mask[mag > (mag_max + mag_margin)] = False\n \n+    if flux_rad_min is None:\n+        flux_rad_min = 0.0\n+    if flux_rad_max is None:\n+        flux_rad_max = np.inf\n+\n     # basic fluxrad filtering\n     mask[(fluxrad < flux_rad_min) | (fluxrad > flux_rad_max)] = False\n \n     # check on current source count, can we do something fancy?\n     num_in_range = np.count_nonzero(mask)\n \n-    # some testing suggests 30 sources is enough to do something with\n-    if num_in_range >= 30:\n-        bin_count = 50\n-        # get flux radius histogram\n-        radius_count, bin_edges = np.histogram(\n-            fluxrad[mask], bins=bin_count, range=[flux_rad_min, flux_rad_max], density=True\n-        )\n-        bin_centers = (bin_edges[:-1] + bin_edges[1:]) / 2\n+    if flux_rad_peak is not None:\n+        # some testing suggests 30 sources is enough to do something with\n+        if num_in_range >= 30:\n+            bin_count = 50\n+            # get flux radius histogram\n+            radius_count, bin_edges = np.histogram(\n+                fluxrad[mask], bins=bin_count, range=[flux_rad_min, flux_rad_max], density=True\n+            )\n+            bin_centers = (bin_edges[:-1] + bin_edges[1:]) / 2\n \n-        # try to fit a gaussian to the flux_radius distribution\n-        try:\n-            a, x0, sig = gauss_fit(bin_centers, radius_count, flux_rad_min, flux_rad_max, flux_rad_peak)\n-            mask[np.abs(fluxrad - x0) > (5 * sig)] = False\n-\n-            # plt.hist(\n-            #     fluxrad[mask], bins=bin_edges, density=True, histtype='step'\n-            # )\n-            # xx = np.linspace(0.5, 2.5, 1000)\n-            # yy = gauss_func(xx, a, x0, sig)\n-            # plt.plot(xx, yy)\n-            # plt.gca().axvline(x0+5*sig)\n-            # plt.gca().axvline(x0-5*sig)\n-            # print(a, x0, sig)  #, a_2, x0_2, sig_2)\n-            # plt.show()\n-        except RuntimeError:\n+            # try to fit a gaussian to the flux_radius distribution\n+            try:\n+                a, x0, sig = gauss_fit(bin_centers, radius_count, flux_rad_min, flux_rad_max, flux_rad_peak)\n+                mask[np.abs(fluxrad - x0) > (5 * sig)] = False\n+            except RuntimeError:\n+                if logger is not None:\n+                    logger.info(\n+                        f\"flux_radius distribution fitting was unsuccessful\"\n+                    )\n+        else:\n             if logger is not None:\n                 logger.info(\n-                    f\"flux_radius distribution fitting was unsuccessful\"\n+                    f\"too few sources to attempt flux_radius distribution fitting\"\n                 )\n-    else:\n-        if logger is not None:\n-            logger.info(\n-                f\"too few sources to attempt flux_radius distribution fitting\"\n-            )\n+    elif logger is not None:\n+        logger.debug(\"flux_radius fitting not performed\")\n \n     return mask\n \n",
                            "flux_radius filtering now optional #23345",
                            "Leigh Smith",
                            "2023-08-07T15:54:08.000+01:00",
                            "86b641a086b40ac99fe52c5ff3bb43da8f4999f1"
                        ],
                        [
                            "@@ -2157,6 +2157,10 @@ def get_observation(src_cat_path, refdata, refmagmin=None, refmagmax=None,\n         # grab the primary header\n         pri_hdr = srccat_hdul[0].header\n \n+        # record the primary header exptime if present\n+        if 'EXPTIME' in pri_hdr.keys():\n+            exptimes.append(float(pri_hdr['EXPTIME']))\n+\n         for i in range(1, len(srccat_hdul), 2):\n             # the headers are stored in the odd extensions and the catalogues\n             # are stored in the even extensions [excluding the 0th]\n@@ -2193,20 +2197,28 @@ def get_observation(src_cat_path, refdata, refmagmin=None, refmagmax=None,\n             pointings.append((header['RA'], header['DEC']))\n             pas.append(header['PA'])\n \n-            # read the exposure time\n-            exptime = float(header['EXPTIME'])\n-            exptimes.append(exptime)\n+            # record the exposure time if present\n+            if 'EXPTIME' in header.keys():\n+                exptimes.append(float(header['EXPTIME']))\n \n+            # verify that an exptime is available\n+            if len(exptimes) == 0:\n+                if logger is not None:\n+                    logger.error(\n+                        \"No EXPTIME is present in the primary or secondary headers\"\n+                    )\n+                    sys.exit(1)\n             # add the mag ZP\n             # todo\n             #   this might be unnecessary in production, we might be provided\n             #   with calibrated catalogues\n-            mags += 24.36 + 2.5 * np.log10(exptime)\n+            mags += 24.36 + 2.5 * np.log10(exptimes[-1])\n \n             # ref source filtering on mag and flux radius\n             _mask = filter_catalogue(\n                 mags, fluxrad,\n                 mag_min=refmagmin, mag_max=refmagmax, mag_margin=0.5,\n+                flux_rad_min=2.0, flux_rad_max=4.0,\n                 logger=logger\n             )\n \n@@ -3299,12 +3311,13 @@ def gauss_func(x, a, x0, sigma):\n     )\n \n \n-def gauss_fit(xdat, ydat):\n+def gauss_fit(xdat, ydat, flux_rad_min, flux_rad_max):\n     \"\"\"\n     Perform a Gaussian fit (courtesy of Sylvain Mottet)\n     \"\"\"\n     # initial parameters\n-    p0 = np.array([0.5, 1.1, 0.15])\n+    flux_rad_med = 0.5 * (flux_rad_min + flux_rad_max)\n+    p0 = np.array([0.5, flux_rad_med, 0.15])\n \n     def func(x, p00, p01, p02):\n         # composite of two Gaussian functions\n@@ -3313,13 +3326,14 @@ def gauss_fit(xdat, ydat):\n     popt, pcov = curve_fit(\n         func, xdat, ydat,\n         p0=p0, bounds=(\n-            [0, 0.5, 0],\n-            [np.inf, 2.5, np.inf]\n+            [0, flux_rad_min, 0],\n+            [np.inf, flux_rad_max, np.inf]\n         )\n     )\n     return popt  # a, x0, sigma\n \n def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n+                     flux_rad_min=0.5, flux_rad_max=2.5,\n                      logger=None):\n     \"\"\"\n     Filter a set of sources by magnitude and flux radius\n@@ -3336,6 +3350,10 @@ def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n         Maximum magnitude\n     mag_margin : float, optional\n         Allowable margin for error on the magnitudes\n+    flux_rad_min : float, optional\n+        Lower limit of acceptable flux_radius range, default 0.5.\n+    flux_rad_max : float, optional\n+        Upper limit of acceptable flux_radius range, default 2.5.\n     logger : Logger, optional\n         A logger which will be used for printing the logging messages (None for\n         no printing).\n@@ -3358,8 +3376,11 @@ def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n     if mag_max is not None:\n         mask[mag > (mag_max + mag_margin)] = False\n \n+    \"\"\"\n+    # Commented out: see https://euclid.roe.ac.uk/issues/23190#note-57\n+\n     # basic fluxrad filtering\n-    mask[(fluxrad < 0.5) | (fluxrad > 2.5)] = False\n+    mask[(fluxrad < flux_rad_min) | (fluxrad > flux_rad_max)] = False\n \n     # check on current source count, can we do something fancy?\n     num_in_range = np.count_nonzero(mask)\n@@ -3369,13 +3390,13 @@ def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n         bin_count = 50\n         # get flux radius histogram\n         radius_count, bin_edges = np.histogram(\n-            fluxrad[mask], bins=bin_count, range=[0.5, 2.5], density=True\n+            fluxrad[mask], bins=bin_count, range=[flux_rad_min, flux_rad_max], density=True\n         )\n         bin_centers = (bin_edges[:-1] + bin_edges[1:]) / 2\n \n         # try to fit a gaussian to the flux_radius distribution\n         try:\n-            a, x0, sig = gauss_fit(bin_centers, radius_count)\n+            a, x0, sig = gauss_fit(bin_centers, radius_count, flux_rad_min, flux_rad_max)\n             mask[np.abs(fluxrad - x0) > (5 * sig)] = False\n \n             # plt.hist(\n@@ -3398,6 +3419,7 @@ def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n             logger.info(\n                 f\"too few sources to attempt flux_radius distribution fitting\"\n             )\n+    \"\"\"\n \n     return mask\n \n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ],
                        [
                            "@@ -3376,6 +3376,9 @@ def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n     if mag_max is not None:\n         mask[mag > (mag_max + mag_margin)] = False\n \n+    \"\"\"\n+    # Commented out: see https://euclid.roe.ac.uk/issues/23190#note-57\n+\n     # basic fluxrad filtering\n     mask[(fluxrad < flux_rad_min) | (fluxrad > flux_rad_max)] = False\n \n@@ -3416,6 +3419,7 @@ def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n             logger.info(\n                 f\"too few sources to attempt flux_radius distribution fitting\"\n             )\n+    \"\"\"\n \n     return mask\n \n",
                            "Merge branch 'release-13.0' into develop: Fixes bugs #20505, 23168, 23190, 23265",
                            "Catherine Grenet",
                            "2023-08-07T12:19:04.000+02:00",
                            "f112799d015cdc323c99ef638e7027ad8decb28e"
                        ],
                        [
                            "@@ -3376,6 +3376,9 @@ def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n     if mag_max is not None:\n         mask[mag > (mag_max + mag_margin)] = False\n \n+    \"\"\"\n+    # Commented out: see https://euclid.roe.ac.uk/issues/23190#note-57\n+\n     # basic fluxrad filtering\n     mask[(fluxrad < flux_rad_min) | (fluxrad > flux_rad_max)] = False\n \n@@ -3416,6 +3419,7 @@ def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n             logger.info(\n                 f\"too few sources to attempt flux_radius distribution fitting\"\n             )\n+    \"\"\"\n \n     return mask\n \n",
                            "Merge branch 'hotfix-23190-wcsfit-no-flux-rad' into 'release-13.0'",
                            "Catherine Grenet",
                            "2023-08-06T15:44:06.000+00:00",
                            "d7ac0e4ce69bd35cb91955a660d21cdd49fc2dbd"
                        ],
                        [
                            "@@ -3376,6 +3376,9 @@ def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n     if mag_max is not None:\n         mask[mag > (mag_max + mag_margin)] = False\n \n+    \"\"\"\n+    # Commented out: see https://euclid.roe.ac.uk/issues/23190#note-57\n+\n     # basic fluxrad filtering\n     mask[(fluxrad < flux_rad_min) | (fluxrad > flux_rad_max)] = False\n \n@@ -3416,6 +3419,7 @@ def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n             logger.info(\n                 f\"too few sources to attempt flux_radius distribution fitting\"\n             )\n+    \"\"\"\n \n     return mask\n \n",
                            "[FIX]Bug #23190: wcsfit.py flux-radius filtering suppressed in filter_catalogue()",
                            "Catherine Grenet",
                            "2023-08-06T17:31:07.000+02:00",
                            "aab90023177c6e5c002bcd48b7ce558ea6325720"
                        ],
                        [
                            "@@ -218,6 +218,18 @@ def get_parser():\n         '--refmagmax', type=float, default=None, metavar='MAX_MAG',\n         help='maximum reference star magnitude (default: no limit)'\n     )\n+    ref_opt_args_group.add_argument(\n+        '--flux-rad-min', type=float, default=0.5, metavar='FLUX_RADIUS',\n+        help='Lower limit on reference star FLUX_RADIUS (default: 0.5)'\n+    )\n+    ref_opt_args_group.add_argument(\n+        '--flux-rad-max', type=float, default=2.5, metavar='FLUX_RADIUS',\n+        help='Upper limit on reference star FLUX_RADIUS (default: 2.5)'\n+    )\n+    ref_opt_args_group.add_argument(\n+        '--flux-rad-peak', type=float, default=1.1, metavar='FLUX_RADIUS',\n+        help='Approximate reference star FLUX_RADIUS distribution peak (default: 1.1)'\n+    )\n \n     # minimiser termination optional arguments\n     term_opt_args_group = parser.add_argument_group(\n@@ -325,6 +337,14 @@ def check_cmdargs(_args):\n         plural = '' if len(mag_lims) > 1 else 's'\n         parser.error(' and '.join(mag_lims) + f' require{plural} --refmagcol')\n \n+    # check that the FLUX_RADIUS related arguments are sensible\n+    if _args.flux_rad_min >= _args.flux_rad_max:\n+        parser.error(\"FLUX_RADIUS minimum must be smaller than FLUX_RADIUS maximum\")\n+    if _args.flux_rad_peak <= _args.flux_rad_min:\n+        parser.error(\"FLUX_RADIUS peak must be larger than FLUX_RADIUS minimum\")\n+    if _args.flux_rad_peak >= _args.flux_rad_max:\n+        parser.error(\"FLUX_RADIUS peak must be smaller than FLUX_RADIUS maximum\")\n+\n     # check that the number of minimiser iterations is greater than zero\n     if not _args.niter > 0:\n         parser.error('--niter must be >0')\n@@ -444,6 +464,9 @@ def runwcsfit(args, logger=None):\n         refmagkey=args.refmagcol,\n         refmagmin=args.refmagmin,\n         refmagmax=args.refmagmax,\n+        flux_rad_min=args.flux_rad_min,\n+        flux_rad_max=args.flux_rad_max,\n+        flux_rad_peak=args.flux_rad_peak,\n         logger=logger\n     )\n \n@@ -1596,6 +1619,7 @@ def fpa_model_from_observation(observation, sip_order, logger=None):\n def read_observations_references(\n         source_catalogues, reference_catalogues,\n         refmagkey=None, refmagmin=None, refmagmax=None,\n+        flux_rad_min=0.5, flux_rad_max=2.5, flux_rad_peak=1.1,\n         logger=None\n ):\n     \"\"\"\n@@ -1616,6 +1640,12 @@ def read_observations_references(\n     refmagmax : float, optional\n         Maximum magnitude of the reference stars used from refcat (None for\n         no maximum limit).\n+    flux_rad_min : float, optional\n+        Lower limit of acceptable FLUX_RADIUS range for real stars, default 0.5.\n+    flux_rad_max : float, optional\n+        Upper limit of acceptable FLUX_RADIUS range for real stars, default 2.5.\n+    flux_rad_peak : float, optional\n+        The peak of the FLUX_RADIUS distribution for real stars, default 1.1.\n     logger : Logger, optional\n         A Logger for logging messages (None for no logging, default).\n \n@@ -1650,7 +1680,8 @@ def read_observations_references(\n         observations.append(get_observation(\n             src_cat_path, refdata,\n             refmagmin=refmagmin, refmagmax=refmagmax,\n-            logger=logger\n+            flux_rad_min=flux_rad_min, flux_rad_max=flux_rad_max,\n+            flux_rad_peak=flux_rad_peak, logger=logger\n         ))\n \n     # return an ObservationSet instance\n@@ -2116,6 +2147,7 @@ def is_an_astrometric_kwd(kwd, include_naxis=False):\n \n \n def get_observation(src_cat_path, refdata, refmagmin=None, refmagmax=None,\n+                    flux_rad_min=0.5, flux_rad_max=2.5, flux_rad_peak=1.1,\n                     logger=None):\n     \"\"\"\n     Grab data and headers from the catalogue of the relevant observation.\n@@ -2134,6 +2166,15 @@ def get_observation(src_cat_path, refdata, refmagmin=None, refmagmax=None,\n     refmagmax : float, optional\n         Maximum magnitude of the reference stars used from refcat (None for\n         no maximum limit).\n+    flux_rad_min : float, optional\n+        Lower limit of acceptable FLUX_RADIUS range for real stars, default 0.5.\n+    flux_rad_max : float, optional\n+        Upper limit of acceptable FLUX_RADIUS range for real stars, default 2.5.\n+    flux_rad_peak : float, optional\n+        The peak of the FLUX_RADIUS distribution for real stars, default 1.1.\n+    logger : Logger, optional\n+        A logger which will be used for printing the logging messages (None for\n+        no printing).\n \n     Returns\n     -------\n@@ -2218,8 +2259,8 @@ def get_observation(src_cat_path, refdata, refmagmin=None, refmagmax=None,\n             _mask = filter_catalogue(\n                 mags, fluxrad,\n                 mag_min=refmagmin, mag_max=refmagmax, mag_margin=0.5,\n-                flux_rad_min=2.0, flux_rad_max=4.0,\n-                logger=logger\n+                flux_rad_min=flux_rad_min, flux_rad_max=flux_rad_max,\n+                flux_rad_peak=flux_rad_peak, logger=logger\n             )\n \n             # require no large sextractor error flags\n@@ -3311,13 +3352,12 @@ def gauss_func(x, a, x0, sigma):\n     )\n \n \n-def gauss_fit(xdat, ydat, flux_rad_min, flux_rad_max):\n+def gauss_fit(xdat, ydat, flux_rad_min, flux_rad_max, flux_rad_peak):\n     \"\"\"\n     Perform a Gaussian fit (courtesy of Sylvain Mottet)\n     \"\"\"\n     # initial parameters\n-    flux_rad_med = 0.5 * (flux_rad_min + flux_rad_max)\n-    p0 = np.array([0.5, flux_rad_med, 0.15])\n+    p0 = np.array([0.5, flux_rad_peak, 0.15])\n \n     def func(x, p00, p01, p02):\n         # composite of two Gaussian functions\n@@ -3332,8 +3372,9 @@ def gauss_fit(xdat, ydat, flux_rad_min, flux_rad_max):\n     )\n     return popt  # a, x0, sigma\n \n+\n def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n-                     flux_rad_min=0.5, flux_rad_max=2.5,\n+                     flux_rad_min=0.5, flux_rad_max=2.5, flux_rad_peak=1.1,\n                      logger=None):\n     \"\"\"\n     Filter a set of sources by magnitude and flux radius\n@@ -3351,9 +3392,11 @@ def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n     mag_margin : float, optional\n         Allowable margin for error on the magnitudes\n     flux_rad_min : float, optional\n-        Lower limit of acceptable flux_radius range, default 0.5.\n+        Lower limit of acceptable FLUX_RADIUS range for real stars, default 0.5.\n     flux_rad_max : float, optional\n-        Upper limit of acceptable flux_radius range, default 2.5.\n+        Upper limit of acceptable FLUX_RADIUS range for real stars, default 2.5.\n+    flux_rad_peak : float, optional\n+        The peak of the FLUX_RADIUS distribution for real stars, default 1.1.\n     logger : Logger, optional\n         A logger which will be used for printing the logging messages (None for\n         no printing).\n@@ -3393,7 +3436,7 @@ def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n \n         # try to fit a gaussian to the flux_radius distribution\n         try:\n-            a, x0, sig = gauss_fit(bin_centers, radius_count, flux_rad_min, flux_rad_max)\n+            a, x0, sig = gauss_fit(bin_centers, radius_count, flux_rad_min, flux_rad_max, flux_rad_peak)\n             mask[np.abs(fluxrad - x0) > (5 * sig)] = False\n \n             # plt.hist(\n",
                            "user specifiable flux radius selection criteria - 23190",
                            "Leigh Smith",
                            "2023-08-04T11:06:15.000+01:00",
                            "cd63c48bebc6589aabac955fc8a19381069c7cff"
                        ],
                        [
                            "@@ -2218,6 +2218,7 @@ def get_observation(src_cat_path, refdata, refmagmin=None, refmagmax=None,\n             _mask = filter_catalogue(\n                 mags, fluxrad,\n                 mag_min=refmagmin, mag_max=refmagmax, mag_margin=0.5,\n+                flux_rad_min=2.0, flux_rad_max=4.0,\n                 logger=logger\n             )\n \n@@ -3310,12 +3311,13 @@ def gauss_func(x, a, x0, sigma):\n     )\n \n \n-def gauss_fit(xdat, ydat):\n+def gauss_fit(xdat, ydat, flux_rad_min, flux_rad_max):\n     \"\"\"\n     Perform a Gaussian fit (courtesy of Sylvain Mottet)\n     \"\"\"\n     # initial parameters\n-    p0 = np.array([0.5, 1.1, 0.15])\n+    flux_rad_med = 0.5 * (flux_rad_min + flux_rad_max)\n+    p0 = np.array([0.5, flux_rad_med, 0.15])\n \n     def func(x, p00, p01, p02):\n         # composite of two Gaussian functions\n@@ -3324,13 +3326,14 @@ def gauss_fit(xdat, ydat):\n     popt, pcov = curve_fit(\n         func, xdat, ydat,\n         p0=p0, bounds=(\n-            [0, 0.5, 0],\n-            [np.inf, 2.5, np.inf]\n+            [0, flux_rad_min, 0],\n+            [np.inf, flux_rad_max, np.inf]\n         )\n     )\n     return popt  # a, x0, sigma\n \n def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n+                     flux_rad_min=0.5, flux_rad_max=2.5,\n                      logger=None):\n     \"\"\"\n     Filter a set of sources by magnitude and flux radius\n@@ -3347,6 +3350,10 @@ def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n         Maximum magnitude\n     mag_margin : float, optional\n         Allowable margin for error on the magnitudes\n+    flux_rad_min : float, optional\n+        Lower limit of acceptable flux_radius range, default 0.5.\n+    flux_rad_max : float, optional\n+        Upper limit of acceptable flux_radius range, default 2.5.\n     logger : Logger, optional\n         A logger which will be used for printing the logging messages (None for\n         no printing).\n@@ -3370,7 +3377,7 @@ def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n         mask[mag > (mag_max + mag_margin)] = False\n \n     # basic fluxrad filtering\n-    mask[(fluxrad < 0.5) | (fluxrad > 2.5)] = False\n+    mask[(fluxrad < flux_rad_min) | (fluxrad > flux_rad_max)] = False\n \n     # check on current source count, can we do something fancy?\n     num_in_range = np.count_nonzero(mask)\n@@ -3380,13 +3387,13 @@ def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n         bin_count = 50\n         # get flux radius histogram\n         radius_count, bin_edges = np.histogram(\n-            fluxrad[mask], bins=bin_count, range=[0.5, 2.5], density=True\n+            fluxrad[mask], bins=bin_count, range=[flux_rad_min, flux_rad_max], density=True\n         )\n         bin_centers = (bin_edges[:-1] + bin_edges[1:]) / 2\n \n         # try to fit a gaussian to the flux_radius distribution\n         try:\n-            a, x0, sig = gauss_fit(bin_centers, radius_count)\n+            a, x0, sig = gauss_fit(bin_centers, radius_count, flux_rad_min, flux_rad_max)\n             mask[np.abs(fluxrad - x0) > (5 * sig)] = False\n \n             # plt.hist(\n",
                            "Merge branch 'release-13.0' into develop: [FIX]Bug #23101 Large flat indexing error",
                            "Catherine Grenet",
                            "2023-08-03T16:47:19.000+02:00",
                            "68cbbb8f3eb2ea5fce820e492f3d02e06964440a"
                        ],
                        [
                            "@@ -2218,6 +2218,7 @@ def get_observation(src_cat_path, refdata, refmagmin=None, refmagmax=None,\n             _mask = filter_catalogue(\n                 mags, fluxrad,\n                 mag_min=refmagmin, mag_max=refmagmax, mag_margin=0.5,\n+                flux_rad_min=2.0, flux_rad_max=4.0,\n                 logger=logger\n             )\n \n@@ -3310,12 +3311,13 @@ def gauss_func(x, a, x0, sigma):\n     )\n \n \n-def gauss_fit(xdat, ydat):\n+def gauss_fit(xdat, ydat, flux_rad_min, flux_rad_max):\n     \"\"\"\n     Perform a Gaussian fit (courtesy of Sylvain Mottet)\n     \"\"\"\n     # initial parameters\n-    p0 = np.array([0.5, 1.1, 0.15])\n+    flux_rad_med = 0.5 * (flux_rad_min + flux_rad_max)\n+    p0 = np.array([0.5, flux_rad_med, 0.15])\n \n     def func(x, p00, p01, p02):\n         # composite of two Gaussian functions\n@@ -3324,13 +3326,14 @@ def gauss_fit(xdat, ydat):\n     popt, pcov = curve_fit(\n         func, xdat, ydat,\n         p0=p0, bounds=(\n-            [0, 0.5, 0],\n-            [np.inf, 2.5, np.inf]\n+            [0, flux_rad_min, 0],\n+            [np.inf, flux_rad_max, np.inf]\n         )\n     )\n     return popt  # a, x0, sigma\n \n def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n+                     flux_rad_min=0.5, flux_rad_max=2.5,\n                      logger=None):\n     \"\"\"\n     Filter a set of sources by magnitude and flux radius\n@@ -3347,6 +3350,10 @@ def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n         Maximum magnitude\n     mag_margin : float, optional\n         Allowable margin for error on the magnitudes\n+    flux_rad_min : float, optional\n+        Lower limit of acceptable flux_radius range, default 0.5.\n+    flux_rad_max : float, optional\n+        Upper limit of acceptable flux_radius range, default 2.5.\n     logger : Logger, optional\n         A logger which will be used for printing the logging messages (None for\n         no printing).\n@@ -3370,7 +3377,7 @@ def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n         mask[mag > (mag_max + mag_margin)] = False\n \n     # basic fluxrad filtering\n-    mask[(fluxrad < 0.5) | (fluxrad > 2.5)] = False\n+    mask[(fluxrad < flux_rad_min) | (fluxrad > flux_rad_max)] = False\n \n     # check on current source count, can we do something fancy?\n     num_in_range = np.count_nonzero(mask)\n@@ -3380,13 +3387,13 @@ def filter_catalogue(mag, fluxrad, mag_min=None, mag_max=None, mag_margin=0.0,\n         bin_count = 50\n         # get flux radius histogram\n         radius_count, bin_edges = np.histogram(\n-            fluxrad[mask], bins=bin_count, range=[0.5, 2.5], density=True\n+            fluxrad[mask], bins=bin_count, range=[flux_rad_min, flux_rad_max], density=True\n         )\n         bin_centers = (bin_edges[:-1] + bin_edges[1:]) / 2\n \n         # try to fit a gaussian to the flux_radius distribution\n         try:\n-            a, x0, sig = gauss_fit(bin_centers, radius_count)\n+            a, x0, sig = gauss_fit(bin_centers, radius_count, flux_rad_min, flux_rad_max)\n             mask[np.abs(fluxrad - x0) > (5 * sig)] = False\n \n             # plt.hist(\n",
                            "Merge branch 'hotfix-23190-wcsfit-flux-rad' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-03T16:19:39.000+02:00",
                            "2bb34d7a30f895b21327f4c38130be1bd7f83a45"
                        ]
                    ],
                    "CMakeLists.txt": [
                        [
                            "@@ -8,9 +8,9 @@ find_package(ElementsProject)\n #                         elements_project(MyProject 1.0 USE Element 3.8)\n #===============================================================================\n \n-elements_project( VIS_Tasks 13.0.3\n+elements_project( VIS_Tasks 13.0.10\n                   USE Elements 6.2.1\n-                      VIS_PyLibrary 3.20.1\n+                      VIS_PyLibrary 3.20.2\n                       VIS_ImageTools 3.16.0\n                       VIS_CTI 5.8.2\n                       VIS_Instrument_Tools 0.7.0\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ],
                        [
                            "@@ -8,7 +8,7 @@ find_package(ElementsProject)\n #                         elements_project(MyProject 1.0 USE Element 3.8)\n #===============================================================================\n \n-elements_project( VIS_Tasks 13.0.9\n+elements_project( VIS_Tasks 13.0.10\n                   USE Elements 6.2.1\n                       VIS_PyLibrary 3.20.2\n                       VIS_ImageTools 3.16.0\n",
                            "Bump version to 13.0.10",
                            "Catherine Grenet",
                            "2023-08-07T12:09:35.000+02:00",
                            "69c54bef9869b798e9ff7a1b422ddf79e5dbe89b"
                        ],
                        [
                            "@@ -8,7 +8,7 @@ find_package(ElementsProject)\n #                         elements_project(MyProject 1.0 USE Element 3.8)\n #===============================================================================\n \n-elements_project( VIS_Tasks 13.0.8\n+elements_project( VIS_Tasks 13.0.9\n                   USE Elements 6.2.1\n                       VIS_PyLibrary 3.20.2\n                       VIS_ImageTools 3.16.0\n",
                            "Bump version to 13.0.9",
                            "Catherine Grenet",
                            "2023-08-03T17:50:49.000+02:00",
                            "77545239be8a063ed3da6832b620e2966e767953"
                        ],
                        [
                            "@@ -8,7 +8,7 @@ find_package(ElementsProject)\n #                         elements_project(MyProject 1.0 USE Element 3.8)\n #===============================================================================\n \n-elements_project( VIS_Tasks 13.0.7\n+elements_project( VIS_Tasks 13.0.8\n                   USE Elements 6.2.1\n                       VIS_PyLibrary 3.20.2\n                       VIS_ImageTools 3.16.0\n",
                            "Bump version to 13.0.8",
                            "Catherine Grenet",
                            "2023-08-03T13:42:26.000+02:00",
                            "4ddfe26aa573953e7c6163d018627349c3e70a76"
                        ],
                        [
                            "@@ -10,7 +10,7 @@ find_package(ElementsProject)\n \n elements_project( VIS_Tasks 13.1\n                   USE Elements 6.2.1\n-                      VIS_PyLibrary 3.20.1\n+                      VIS_PyLibrary 3.20.2\n                       VIS_ImageTools 3.17\n                       VIS_CTI 5.8.1\n                       VIS_Instrument_Tools 0.7.0\n",
                            "Merge branch 'release-13.0' into develop: #23191 Astrometric calibration magnitude range selection",
                            "Catherine Grenet",
                            "2023-08-03T10:47:54.000+02:00",
                            "05560a54e12c030014d3ebef656d0296a5aa9c55"
                        ],
                        [
                            "@@ -8,7 +8,7 @@ find_package(ElementsProject)\n #                         elements_project(MyProject 1.0 USE Element 3.8)\n #===============================================================================\n \n-elements_project( VIS_Tasks 13.0.6\n+elements_project( VIS_Tasks 13.0.7\n                   USE Elements 6.2.1\n                       VIS_PyLibrary 3.20.2\n                       VIS_ImageTools 3.16.0\n",
                            "Bump version to 13.0.7",
                            "Catherine Grenet",
                            "2023-08-02T20:36:17.000+02:00",
                            "fe7289ff2064042441a263c2b2fda9b7ed633295"
                        ],
                        [
                            "@@ -8,7 +8,7 @@ find_package(ElementsProject)\n #                         elements_project(MyProject 1.0 USE Element 3.8)\n #===============================================================================\n \n-elements_project( VIS_Tasks 13.0.5\n+elements_project( VIS_Tasks 13.0.6\n                   USE Elements 6.2.1\n                       VIS_PyLibrary 3.20.2\n                       VIS_ImageTools 3.16.0\n",
                            "[UPD]Bump version to 13.0.6 (resync with VIS_IAL_Pipelines)",
                            "Catherine Grenet",
                            "2023-08-02T19:25:05.000+02:00",
                            "a0314b1868553ed83f46025b57024661e397fea0"
                        ]
                    ],
                    "HISTORY.txt": [
                        [
                            "@@ -1,6 +1,27 @@\n VIS_Tasks changelog\n -------------------\n \n+* 04 Aug 2023 - herent@iap.fr\n+** VIS_Photometry/python/VIS_Photometry/VIS_Calibrate_Photometry.py: fix photometry issue #23277 for PDC dataset\n+\n+* 31 Jul 2023 - mottet@iap.fr\n+** VIS_process_quad.py: fix #23240, add config_filename to NL correction PE call\n+\n+* 29 Jul 2023 - catherine.grenet@iap.fr\n+Feature ##23191 Astrometric calibration (use-fpa-model): adapt magnitude range selection to exposure duration\n+*** Modules.py: Wcsfit() new argument exptime\n+*** VIS_process_astro_field.py: pass EXPTIME to Modules.Wcsfit()\n+\n+* 28 Jul 2023 - mottet@iap.fr\n+** VIS_xml_in.py, VIS_ghosts_calibration: fix #23163, now use DpdVisGhostModel to store the ghost model.\n+\n+* 25 Jul 2023 - herent@iap.fr\n+** VIS_xml_in.py: add Gain calibration section to setup the activation of specific PE correction\n+                  for the Gain calibration pipeline\n+\n+* 25 Jul 2023 - mottet@iap.fr\n+** VIS_extract_sources.py: fix bug 22894, 'tmpdir' is now automatically and systematically used\n+\n * 07 July 2023 - v13.0.2 - matt.wander@open.ac.uk\n ** VIS_TrapPumping_IO.plotting: fix bins and stacking on histograms (#22966)\n \n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ],
                        [
                            "@@ -1,6 +1,9 @@\n VIS_Tasks changelog\n -------------------\n \n+* 04 Aug 2023 - herent@iap.fr\n+** VIS_Photometry/python/VIS_Photometry/VIS_Calibrate_Photometry.py: fix photometry issue #23277 for PDC dataset\n+\n * 31 Jul 2023 - mottet@iap.fr\n ** VIS_process_quad.py: fix #23240, add config_filename to NL correction PE call\n \n",
                            "Merge branch 'release-13.0' into develop: Fixes bugs #20505, 23168, 23190, 23265",
                            "Catherine Grenet",
                            "2023-08-07T12:19:04.000+02:00",
                            "f112799d015cdc323c99ef638e7027ad8decb28e"
                        ],
                        [
                            "@@ -1,6 +1,9 @@\n VIS_Tasks changelog\n -------------------\n \n+* 04 Aug 2023 - herent@iap.fr\n+** VIS_Photometry/python/VIS_Photometry/VIS_Calibrate_Photometry.py: fix photometry issue #23277 for PDC dataset\n+\n * 31 Jul 2023 - mottet@iap.fr\n ** VIS_process_quad.py: fix #23240, add config_filename to NL correction PE call\n \n",
                            "Merge branch 'hotfix-23190-wcsfit-no-flux-rad' into 'release-13.0'",
                            "Catherine Grenet",
                            "2023-08-06T15:44:06.000+00:00",
                            "d7ac0e4ce69bd35cb91955a660d21cdd49fc2dbd"
                        ],
                        [
                            "@@ -1,6 +1,9 @@\n VIS_Tasks changelog\n -------------------\n \n+* 04 Aug 2023 - herent@iap.fr\n+** VIS_Photometry/python/VIS_Photometry/VIS_Calibrate_Photometry.py: fix photometry issue #23277 for PDC dataset\n+\n * 31 Jul 2023 - mottet@iap.fr\n ** VIS_process_quad.py: fix #23240, add config_filename to NL correction PE call\n \n",
                            "Merge branch 'hotfix_#23277' into hotfix-23190-wcsfit-no-flux-rad",
                            "Catherine Grenet",
                            "2023-08-04T19:23:02.000+02:00",
                            "56fd1727122b7feaeecdc2a01064c2a23da5a1f1"
                        ],
                        [
                            "@@ -1,6 +1,9 @@\n VIS_Tasks changelog\n -------------------\n \n+* 04 Aug 2023 - herent@iap.fr\n+** VIS_Photometry/python/VIS_Photometry/VIS_Calibrate_Photometry.py: fix photometry issue #23277 for PDC dataset\n+\n * 31 Jul 2023 - mottet@iap.fr\n ** VIS_process_quad.py: fix #23240, add config_filename to NL correction PE call\n \n",
                            "VIS_Calibrate_Photometry.py: fix photometry issue #23277 for PDC dataset",
                            "Olivier Herent",
                            "2023-08-04T12:08:06.000+00:00",
                            "045f74da7524bad667503b362977418a6d247602"
                        ],
                        [
                            "@@ -4,6 +4,11 @@ VIS_Tasks changelog\n * 31 Jul 2023 - mottet@iap.fr\n ** VIS_process_quad.py: fix #23240, add config_filename to NL correction PE call\n \n+* 29 Jul 2023 - catherine.grenet@iap.fr\n+Feature ##23191 Astrometric calibration (use-fpa-model): adapt magnitude range selection to exposure duration\n+*** Modules.py: Wcsfit() new argument exptime\n+*** VIS_process_astro_field.py: pass EXPTIME to Modules.Wcsfit()\n+\n * 28 Jul 2023 - mottet@iap.fr\n ** VIS_xml_in.py, VIS_ghosts_calibration: fix #23163, now use DpdVisGhostModel to store the ghost model.\n \n",
                            "Merge branch 'release-13.0' into develop: #23191 Astrometric calibration magnitude range selection",
                            "Catherine Grenet",
                            "2023-08-03T10:47:54.000+02:00",
                            "05560a54e12c030014d3ebef656d0296a5aa9c55"
                        ],
                        [
                            "@@ -4,6 +4,11 @@ VIS_Tasks changelog\n * 31 Jul 2023 - mottet@iap.fr\n ** VIS_process_quad.py: fix #23240, add config_filename to NL correction PE call\n \n+* 29 Jul 2023 - catherine.grenet@iap.fr\n+Feature ##23191 Astrometric calibration (use-fpa-model): adapt magnitude range selection to exposure duration\n+*** Modules.py: Wcsfit() new argument exptime\n+*** VIS_process_astro_field.py: pass EXPTIME to Modules.Wcsfit()\n+\n * 28 Jul 2023 - mottet@iap.fr\n ** VIS_xml_in.py, VIS_ghosts_calibration: fix #23163, now use DpdVisGhostModel to store the ghost model.\n \n",
                            "Merge branch 'feature-23191-mag_range_selection' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-03T10:39:55.000+02:00",
                            "0b587c0533c886756f0604676a4f0076e3c780d9"
                        ]
                    ],
                    "VIS_Blooming/python/VIS_Blooming/VIS_blooming_calib.py": [
                        [
                            "@@ -325,10 +325,11 @@ def mainMethod(args):\n     data_product = FromToXML.create_DpdVisBloomingModel( os.path.basename( blooming_model_file))\n \n     # tar of the 144 png images into one single file, that will be added to the calibration product into Data.\n-    output_PTC_graphs_filename = \"PTC_graphs.tar\"\n+    output_PTC_graphs_filename = workdir+\"/data/PTC_graphs.tar\"\n \n     with tarfile.open(output_PTC_graphs_filename, \"w:gz\") as tar:\n       for filename in os.listdir(subdir):\n+        #logger.info(f\"filename is : {filename}\")\n         tar.add(os.path.join(subdir, filename), arcname=filename)\n \n     # adding to the data_product, inside Data.QualityParameterStorage, the file output_PTC_graphs_filename\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_Blooming/python/VIS_Blooming/file_entry_point.py": [
                        [
                            "@@ -17,6 +17,7 @@\n \n import astropy.io.fits as pf\n import numpy as np\n+import numpy.ma as ma\n \n import ElementsKernel.Logging as elog\n \n@@ -93,7 +94,7 @@ def file_layer_entry_point(input_files, interm_dir, quadrant_id=None, in_flagmap\n           flag_quad_id = handle[quadrant_id].header[\"QUADID\"]\n           handle.close()\n         \n-        image_stack = algo.flagging_stack(image_stack32, \n+        '''image_stack = algo.flagging_stack(image_stack32, \n                                           flagmap, \n                                           input_files, \n                                           quad_name, \n@@ -103,5 +104,7 @@ def file_layer_entry_point(input_files, interm_dir, quadrant_id=None, in_flagmap\n                                           flag_prescan_size,\n                                           flag_serial_overscan_size, \n                                           flag_parallel_overscan_size)\n+        '''\n+    image_stack = ma.array(image_stack32, mask=flagmap, copy=False)    \n     log.info(\"file_layer_entry_point(): end\")\n     return image_stack\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_BrighterFatter/python/VIS_BrighterFatter/VIS_BrighterFatter_calib.py": [
                        [
                            "@@ -251,8 +251,7 @@ def mainMethod(args):\n     dpdcalib_bfe = os.path.abspath( os.path.join( args.workdir, dpdcalib_bfe))\n     logger.info( \"** Writing Bfe model data product XML to \" + dpdcalib_bfe)\n     logger.info(dpdcalib_bfe)\n-    data_product = FromToXML.create_DpdVisFileContainer( datafile_list = [os.path.basename(bfe_model_file)],\n-                                                         vis_product=\"bfe_model\")\n+    data_product = FromToXML.create_DpdVisBFEModel( os.path.basename( bfe_model_file))\n     DmUtils.save_product_metadata( data_product, dpdcalib_bfe)       \n      \n     \n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_Ghosts/python/VIS_Ghosts/VIS_ghosts_calibration.py": [
                        [
                            "@@ -184,7 +184,7 @@ def mainMethod( args):\n \n   # create and write the XML data product encapsulating the model file\n   logger.info( \"** Writing ghost model data product XML to \" + args.ghost_model_xml_out)\n-  data_product = FromToXML.create_DpdVisXTalkModel( model_json)\n+  data_product = FromToXML.create_DpdVisGhostModel( model_json)\n   DmUtils.save_product_metadata( data_product, args.ghost_model_xml_out)\n \n \n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_LargeFlat/python/VIS_LargeFlat/VIS_LargeFlat_Modelling/FPA_VIS_Geometry.py": [
                        [
                            "@@ -176,8 +176,6 @@ class FPA_VISGeometry():\n                       self.sizeDetX(), self.sizeGapsX()[3],  \\\n                       self.sizeDetX(), self.sizeGapsX()[4],  \\\n                       self.sizeDetX())) / self.sizeFPX()\n-        #c = np.cumsum(c) * 2 - 1\n-        #c[0] = -1.;  c[-1] = 1.\n         c = np.cumsum(c) * 3 - 1.5\n         c[0] = -1.5;  c[-1] = 1.5\n         return c\n@@ -191,9 +189,6 @@ class FPA_VISGeometry():\n                       self.sizeDetY(), self.sizeGapsY()[3],  \\\n                       self.sizeDetY(), self.sizeGapsY()[4],  \\\n                       self.sizeDetY())) / self.sizeFPY()\n-        #c = np.cumsum(c) * 2 - 1\n-        #c[0] = -1.;  c[-1] = 1.\n-        #c2 = np.cumsum(c) * 2 - 1.5\n         c = np.cumsum(c) * 3 - 1.5\n         c[0] = -1.5;  c[-1] = 1.5\n         return c\n@@ -231,7 +226,7 @@ class FPA_VISGeometry():\n         \"\"\"Return True if the chip of a detector is rotated by 180 degrees in the FPA.\"\"\"\n         if self.enableDetRotation:\n             (idetx, idety) = self.idetseq2xy(idet)\n-            return (idety >= 5)\n+            return (idetx >= 4)\n         return False\n     \n     \n@@ -268,9 +263,7 @@ class FPA_VISGeometry():\n         x = copy.copy(_x)\n         y = copy.copy(_y)\n \n-        #print(np.count_nonzero(y >= 4136))\n         y = np.where(y >= 4136, 4130, y)\n-        #print(np.count_nonzero(y >= 4136))\n \n \n         assert np.all(0. <= x);  assert np.all(x <= self.detector_pixel_shortdim)\n@@ -310,10 +303,6 @@ class FPA_VISGeometry():\n             y = np.array((y,))\n         if np.isscalar(idet):\n             idet = np.repeat(idet, x.size)\n-        #assert np.all(np.abs(x) <= 1)\n-        #assert np.all(np.abs(y) <= 1)\n-        \n-        \n         \n         assert np.all(np.abs(x) <= 1.5)\n         assert np.all(np.abs(y) <= 1.5)\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_LargeFlat/python/VIS_LargeFlat/VIS_LargeFlat_Modelling/Fit2D.py": [
                        [
                            "@@ -4,13 +4,6 @@ from scipy.interpolate import CloughTocher2DInterpolator, interp1d, NearestNDInt\n # 2D profile fitting (non-parametric)\n class Fit2D_NP:\n \n-    #def coords(self):\n-    #    if self.atedge:\n-    #        return np.linspace(-1.5, 1.5, self.npar)\n-    #    else:\n-    #        g = np.linspace(-1.5, 1.5, self.npar+1)\n-    #        return (g[0:-1] + g[1:]) / 2.\n-        \n     def coords_x(self):\n         g = np.linspace(-1.5, 1.5, self.npar_x+1)\n         return (g[0:-1] + g[1:]) / 2.\n@@ -23,35 +16,6 @@ class Fit2D_NP:\n     Fit2D initialisation class\n     WALKTHRU_3-1\n     \"\"\"\n-    #def __init__(self, npar, meas_x, meas_y,logger,atedge=False):\n-    #    self.npar = npar\n-    #    self.logger=logger\n-    #    assert meas_x.size == meas_y.size\n-    #    assert np.max(np.abs(meas_x)) < 1.5\n-    #    assert np.max(np.abs(meas_y)) < 1.5\n-    #    self.meas_x = meas_x.copy()\n-    #    self.meas_y = meas_y.copy()\n-    #    self.param_val = np.zeros((npar, npar))\n-    #    self.param_unc = np.zeros((npar, npar))\n-    #    self.atedge = atedge\n-    #    x = self.coords()\n-    #    y = self.coords()\n-    #    step = x[1] - x[0]\n-    #    self.indexmap = []\n-    #    for ix in range(0, npar):\n-    #        for iy in range(0, npar):\n-    #            max_dist = step / 2 ##original from \n-                \n-    #            j = np.where((np.abs(self.meas_x - x[ix]) < max_dist)  &\n-    #                         (np.abs(self.meas_y - y[iy]) < max_dist))\n-    #            \"OU-NIR tends to throw an exception and quit. So NIR expects data points. Not reaching this in selfcal\"\n-    #            if len(j[0]) < 2:\n-    #                self.logger.warn(\"Not enough data in the square region around \" + str(x[iy]) + \", \" + str(y[iy]) + \" (size: \" + str(step) + \")\")\n-    #                print(\"Not enough data in the square region around \" + str(x[iy]) + \", \" + str(y[iy]) + \" (size: \" + str(step) + \")\")\n-    #            else : \n-    #                self.indexmap.append(j[0])\n-    #    print(\"End __init__ of fit2d\")\n-        \n     def __init__(self, npar_x, npar_y, meas_x, meas_y, logger):\n         self.npar_x = npar_x\n         self.npar_y = npar_y\n@@ -84,23 +48,6 @@ class Fit2D_NP:\n                     raise ValueError(\"Not enough data in the square region around \" + str(x[iy]) + \", \" + str(y[iy]) + \" (size: \" + str(step_x) + \")\")\n                 self.indexmap.append(j[0])\n         \n-\n-    #def fit(self, meas, uncert):\n-    #    print(\"Start fit2d.fit\")\n-    #    assert meas.ndim == 1\n-    #    assert meas.size == self.meas_x.size\n-    #    i = 0\n-    #    for ix in range(0, self.npar):\n-    #        for iy in range(0, self.npar):\n-    #            if(i < len(self.indexmap)):\n-    #                j = self.indexmap[i]\n-    #                i += 1\n-    #                if len(j) > 0:\n-    #                    self.param_val[ix, iy] = np.mean(meas[j])\n-    #                    self.param_unc[ix, iy] = np.mean(uncert[j]) / np.sqrt(len(j))\n-    #                    \n-    #    print(\"End fit of fit2d.fit\")\n-        \n     def fit(self, meas, uncert):\n         assert meas.ndim == 1\n         assert meas.size == self.meas_x.size\n@@ -114,24 +61,6 @@ class Fit2D_NP:\n                     self.param_unc[ix, iy] = np.mean(uncert[j]) / np.sqrt(len(j))        \n \n \n-    #def extrapolate(self, x, y):\n-    #    print(\"Start fit of extrapolate\")\n-\n-    #    assert np.isscalar(x)\n-    #    assert np.isscalar(y)\n-    #    assert ((np.abs(x) < 1.5) or (np.abs(y) < 1.5))\n-    #    if np.abs(x) < 1.5:\n-    #        mx = np.repeat(x, self.npar)\n-    #        my = self.coords()\n-    #        dd = self.predict_at(mx, my)\n-    #        return float(interp1d(my, dd, fill_value='extrapolate')(y))\n-    #    if np.abs(y) < 1.5:\n-    #        mx = self.coords()\n-    #        my = np.repeat(y, self.npar)\n-    #        dd = self.predict_at(mx, my)\n-    #        return float(interp1d(mx, dd, fill_value='extrapolate')(x))\n-    #    raise ValueError('Unexpected value for inputs (x=' + str(x) + ', y=' + str(y) + ').')\n-    \n     def extrapolate(self, x, y):\n         assert np.isscalar(x)\n         assert np.isscalar(y)\n@@ -151,26 +80,6 @@ class Fit2D_NP:\n         raise ValueError('Unexpected value for inputs (x=' + str(x) + ', y=' + str(y) + ').')\n     \n \n-    #def predict_at(self, x, y, uncert=False):\n-    #    if uncert:\n-    #        z = self.param_unc.transpose()\n-    #    else:\n-    #        z = self.param_val.transpose()\n-\n-    #    if self.atedge:\n-    #        x_grid, y_grid, z_grid = self.coords(), self.coords(), z\n-    #    else:\n-    #        x_grid, y_grid, z_grid = self.extended_grid(self.coords(), self.coords(), z)\n-\n-    #    (mx, my) = np.meshgrid(x_grid, y_grid)\n-    #    mx = mx.reshape(mx.size)\n-    #    my = my.reshape(my.size)\n-    #    points = np.vstack([mx, my]).transpose()\n-    #    itp = CloughTocher2DInterpolator(points, z_grid.reshape(z_grid.size))\n-    #    return itp(x, y)\n-    \n-    \n-    \n     # Predict model at coordinates x, y.  If uncert=true returns the\n     # model uncertainties at x,y.\n     def predict_at(self, x, y, uncert=False):\n@@ -184,8 +93,6 @@ class Fit2D_NP:\n         # coords_x/y() are always WITHIN, and not AT, the boundaries.\n         # Here we prepare a grid extending to the boundaries (-1.5:1.5)\n         # and extrapolate the \"z\" values on the added locations.\n-        #x_grid = np.hstack((-1., self.coords_x(), 1.))\n-        #y_grid = np.hstack((-1., self.coords_y(), 1.))\n         \n         x_grid = np.hstack((-1.5, self.coords_x(), 1.5))\n         y_grid = np.hstack((-1.5, self.coords_y(), 1.5))\n@@ -196,27 +103,19 @@ class Fit2D_NP:\n         # Extrapolate on the boundaries\n         for i in range(0, self.npar_y):\n             itp = interp1d(self.coords_x(), z[:, i], fill_value='extrapolate')\n-            #z_grid[ 0, i+1] = float(itp(-1.))\n-            #z_grid[-1, i+1] = float(itp( 1.))\n             z_grid[ 0, i+1] = float(itp(-1.5))\n             z_grid[-1, i+1] = float(itp( 1.5))\n             \n         for i in range(0, self.npar_x):\n             itp = interp1d(self.coords_y(), z[i, :], fill_value='extrapolate')\n-            #z_grid[i+1 , 0] = float(itp(-1.))\n-            #z_grid[i+1, -1] = float(itp( 1.))\n             z_grid[i+1 , 0] = float(itp(-1.5))\n             z_grid[i+1, -1] = float(itp( 1.5))\n \n         itp = interp1d(self.coords_y(), z_grid[ 0, 1:self.npar_y+1], fill_value='extrapolate')\n-        #z_grid[ 0,  0] = float(itp(-1.))\n-        #z_grid[ 0, -1] = float(itp( 1.))\n         z_grid[ 0,  0] = float(itp(-1.5))\n         z_grid[ 0, -1] = float(itp( 1.5))\n         \n         itp = interp1d(self.coords_y(), z_grid[-1, 1:self.npar_y+1], fill_value='extrapolate')\n-        #z_grid[-1,  0] = float(itp(-1.))\n-        #z_grid[-1, -1] = float(itp( 1.))\n         z_grid[-1,  0] = float(itp(-1.5))\n         z_grid[-1, -1] = float(itp( 1.5))\n \n@@ -243,28 +142,3 @@ class Fit2D_NP:\n \n     def addGlobalOffset(self, offset):\n         self.param_val[:] += offset\n-\n-\n-    # Extrapolate to the whole detector (i.e. in the range -1.5:1.5)\n-    #def extended_grid(self, x_inner, y_inner, z_inner):\n-    #    print(\"Start extended_grid\")\n-    #    x_outer = np.hstack((-1.5, x_inner, 1.5))\n-    #    y_outer = np.hstack((-1.5, y_inner, 1.5))\n-    #    z_outer = np.zeros((self.npar+2, self.npar+2))\n-    #    for i in range(0, self.npar):\n-    #        z_outer[1:self.npar+1, i+1] = z_inner[0:self.npar, i]\n-\n-    #    for i in range(0, self.npar):\n-    #        z_outer[i+1,  0] = float(interp1d(y_inner, z_inner[i, :], fill_value='extrapolate')(-1.5))\n-    #        z_outer[i+1, -1] = float(interp1d(y_inner, z_inner[i, :], fill_value='extrapolate')( 1.5))\n-\n-    #        z_outer[ 0, i+1] = float(interp1d(x_inner, z_inner[:, i], fill_value='extrapolate')(-1.5))\n-    #        z_outer[-1, i+1] = float(interp1d(x_inner, z_inner[:, i], fill_value='extrapolate')( 1.5))\n-\n-    #    z_outer[ 0,  0] = float(interp1d(x_inner, z_outer[1:self.npar+1,  0], fill_value='extrapolate')(-1.5))\n-    #    z_outer[-1,  0] = float(interp1d(x_inner, z_outer[1:self.npar+1,  0], fill_value='extrapolate')( 1.5))\n-\n-    #    z_outer[ 0, -1] = float(interp1d(x_inner, z_outer[1:self.npar+1, -1], fill_value='extrapolate')(-1.5))\n-    #    z_outer[-1, -1] = float(interp1d(x_inner, z_outer[1:self.npar+1, -1], fill_value='extrapolate')( 1.5))\n-    #    print(\"End extended_grid\")\n-    #    return (x_outer, y_outer, z_outer)\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_LargeFlat/python/VIS_LargeFlat/VIS_LargeFlat_Modelling/SelfCalib_VIS.py": [
                        [
                            "@@ -8,9 +8,7 @@ import astropy.stats\n import tarfile\n \n import scipy.linalg\n-\n-\n-\n+from math import floor\n import astropy.coordinates\n from astropy.io import fits\n from astropy.table import Table\n@@ -107,52 +105,36 @@ def readFiles(filelist, ccdid_list, vis_fpa_geom, logger, outdir=None):\n             #    if hdul[ihdu].header['CCDID'] == vis_fpa_geom.idetseq2string(idet):\n             #        break                  \n             #assert hdul[ihdu].header['CCDID'] == vis_fpa_geom.idetseq2string(idet)\n+\n+            nextid_test = floor((idet-1)/6+1)\n+            mextid_test = (idet-1)%6+1\n+            extid_test = mextid_test + 6*(nextid_test-1)\n+            extid_test_new = nextid_test +6*(mextid_test-1)\n+            #extid_test_new = a +6*(b-1)\n             \n-            catTable_read = data['extid'] == idet  # Makes a boolean selection mask (numpy array)\n+            logger.info(\"idet: \" + str(idet) + \"ext_test: \" + str(extid_test) + \" ext_test_new: \" + str(extid_test_new) + \"  m: \" + str(mextid_test) + \" n: \" + str(nextid_test))\n+            \n+            #catTable_read = data['extid'] == idet  # Makes a boolean selection mask (numpy array)\n+            catTable_read = data['extid'] == extid_test_new # Makes a boolean selection mask (numpy array)\n             catTable = data[catTable_read]  # Makes a new astropy Table\n \n-            #****We don't need to look for ccd extension in the file. Always just extension 1.\n-            #data = Table.read(filelist[ifile], hdu=ihdu)\n-            #c = astropy.table.Column(name='ifile', data=np.repeat(ifile, len(data))); data.add_column(c)\n-            #c = astropy.table.Column(name='idet' , data=np.repeat(idet , len(data))); data.add_column(c)\n-            \n             c = astropy.table.Column(name='ifile', data=np.repeat(ifile, len(catTable))); catTable.add_column(c)\n             c = astropy.table.Column(name='idet' , data=np.repeat(idet , len(catTable))); catTable.add_column(c)\n             \n-            #****Rename of column for new wcsfit\n-            #(x, y) = vis_fpa_geom.pixel2focalplane(data['idet'], data['X_IMAGE'], data['Y_IMAGE'])\n-            #(x, y) = vis_fpa_geom.pixel2focalplane(data['idet'], data['XWIN_IMAGE'], data['YWIN_IMAGE'])\n-            \n             (x, y) = vis_fpa_geom.pixel2focalplane(catTable['idet'], catTable['XWIN_IMAGE'], catTable['YWIN_IMAGE'])            \n \n-            #c = astropy.table.Column(name='X_fp' , data=x); data.add_column(c)\n-            #c = astropy.table.Column(name='Y_fp' , data=y); data.add_column(c)\n             c = astropy.table.Column(name='X_fp' , data=x); catTable.add_column(c)\n             c = astropy.table.Column(name='Y_fp' , data=y); catTable.add_column(c)\n \n-\n-            #****Rename of column for new wcsfit\n-            #(x, y) = vis_fpa_geom.pixel2det(idet, data['X_IMAGE'], data['Y_IMAGE'])\n-            #(x, y) = vis_fpa_geom.pixel2det(idet, data['XWIN_IMAGE'], data['YWIN_IMAGE'])\n-            #logger.info(\"idetA: \" + str(idet) + \" \" + str(np.count_nonzero(catTable['YWIN_IMAGE'] >= 4136)))\n             (x, y) = vis_fpa_geom.pixel2det(idet, catTable['XWIN_IMAGE'], catTable['YWIN_IMAGE'])\n-            #c = astropy.table.Column(name='X_det' , data=x); data.add_column(c)\n-            #c = astropy.table.Column(name='Y_det' , data=y); data.add_column(c)\n-            #logger.info(\"idetB: \" + str(idet) + \" \" + str(np.count_nonzero(y >= 1.5)))\n+\n             c = astropy.table.Column(name='X_det' , data=x); catTable.add_column(c)\n             c = astropy.table.Column(name='Y_det' , data=y); catTable.add_column(c)\n \n-            \n-            #data['MAG_APER'][:] = np.add(data['MAG_APER'][:], 20).tolist()\n-            #print(\"readfiles ihdu: \" + str(ihdu))\n-\n-            #data.meta.clear()  # Avoid warnings when merging meta\n             catTable.meta.clear()\n             if len(obs) == 0:\n-                #obs = data.copy()\n                 obs = catTable.copy()\n             else:\n-                #obs = astropy.table.vstack([obs, data])\n                 obs = astropy.table.vstack([obs, catTable])\n \n     logger.info(\"Initial number of constraints : \" + str(len(obs)))\n@@ -177,11 +159,8 @@ def readFiles(filelist, ccdid_list, vis_fpa_geom, logger, outdir=None):\n     # Discard pairs whose distance is > distance threshold\n     dist_threshold = 0.3   # arcsec\n     #****WCFit change in column name but should it call findMatching twice? Rechck\n-    #(i1, i2) = findMatchingObs(obs['OBJECT_ID'])\n     (i1, i2) = findMatchingObs(obs['starid'])\n     #****WCSFit change in column name.\n-    #c1 = astropy.coordinates.SkyCoord(obs['ALPHA_J2000'][i1], obs['DELTA_J2000'][i1], unit=\"deg\")\n-    #c2 = astropy.coordinates.SkyCoord(obs['ALPHA_J2000'][i2], obs['DELTA_J2000'][i2], unit=\"deg\")\n     c1 = astropy.coordinates.SkyCoord(obs['RA'][i1], obs['DEC'][i1], unit=\"deg\")\n     c2 = astropy.coordinates.SkyCoord(obs['RA'][i2], obs['DEC'][i2], unit=\"deg\")\n \n@@ -233,7 +212,6 @@ class SelfCalibData:\n         # Prepare catalog of individual stars\n         catalog = Table()\n         #****\n-        #catalog['OBJECT_ID'] = np.unique(obs['OBJECT_ID'])\n         catalog['starid'] = np.unique(obs['starid'])\n         catalog['nobs'] = np.repeat(     0, len(catalog))\n         catalog['mag']  = np.repeat(np.NaN, len(catalog))\n@@ -248,7 +226,6 @@ class SelfCalibData:\n         for i in range(0, len(catalog)):\n             \n             #****\n-            #j = np.where(obs['OBJECT_ID'] == catalog['OBJECT_ID'][i])\n             j = np.where(obs['starid'] == catalog['starid'][i])\n             index_star2obs.append(j[0])\n             catalog['nobs'][i] = len(j[0])\n@@ -263,14 +240,12 @@ class SelfCalibData:\n             #****\n             #ss = np.sum(1 / obs['MAGERR_APER'][j])\n             ss = np.sum(1 / obs['MAGERR_AUTO'][j])\n-            #logger.info(\"in toopa i: \" + str(i))\n             for k in j[0]:\n                 rr.append(k)\n                 cc.append(i)\n                 #****\n                 #dd.append(1. / obs['MAGERR_APER'][k] / ss)\n                 dd.append(1. / obs['MAGERR_AUTO'][k] / ss)\n-            #logger.info(\"in loopb i: \" + str(i))\n \n         logger.info(\"calculate coomatrix\")\n         rr = np.asarray(rr)\n@@ -316,7 +291,6 @@ class SelfCalib:\n         mm = self\n \n         self.logger.info(\"In Prepare. Do FindMatchObject\")\n-        #(i1, i2) = findMatchingObs(obs['OBJECT_ID'])\n         (i1, i2) = findMatchingObs(obs['starid'])\n         self.logger.info(\"Done with FindMatchingObs in Prepare. Get Unique\")\n         i = np.unique([i1, i2])\n@@ -333,7 +307,6 @@ class SelfCalib:\n             i = mm.data.index_det2obs[idet]  \n             x = mm.data.obs['X_det'][i]\n             y = mm.data.obs['Y_det'][i]\n-            #print(\"Prepare idet: \" + str(idet) + \" ncoeff: \" + str(mm.ncoeff) + \"  i: \" + str(i) + \" x: \" + str(x) + \" y: \" + str(y) )\n             par_flat.append(Fit2D_NP(mm.ncoeff,mm.ncoeff, x, y,self.logger))\n \n         if hasattr(self, 'par_flat'):\n@@ -367,10 +340,6 @@ class SelfCalib:\n         \"\"\"TODO: Check about removing this loop.  Not sure why it is here except for debug to make sure it\n         has all the files.\n         \"\"\"\n-        #with open(os.path.join(outdir, \"filelist.txt\"), \"w\") as text_file:\n-        #    for ifile in range(0, len(filelist)):\n-        #        print(ifile, \"   \", filelist[ifile], file=text_file)\n-                \n         logger.info(\"Read files and prepare:\")\n         (obs, filter,exptime) = readFiles(filelist, ccdid_list, self.vis_fpa_geom,logger,outdir=outdir)\n         logger.info(\"Done with Read Files. Now Prepare\")\n@@ -493,9 +462,6 @@ class SelfCalib:\n         for i in range(0, gx.size):\n             mat[i, dets[i, 0]-1] =  1.5 ##Should it be 1.5\n             mat[i, dets[i, 1]-1] = -1.5\n-            #self.logger.info(\"KEVIN_MAT_NEW i: \" + str(i) + \" MAT: \" + str(mat[i]))\n-            #mat[i, dets[i, 0]-1] = -1 ##OUNIR Should it be 1.5. OUVIS shuld be 1.5\n-            #mat[i, dets[i, 1]-1] = -1 \n \n         mat[gx.size, :] = 1.5                  # add constraint for the average\n \n@@ -503,13 +469,11 @@ class SelfCalib:\n \n         #res = np.linalg.lstsq(mat, data, rcond=-1.)\n         res = np.linalg.lstsq(mat, data)\n-        #mm.par_detqe += res[0]\n         mm.par_detqe += res_scipy[0]\n \n         for idet in range(0, 36):  \n             val_scipy = -1. * res_scipy[0][idet]\n             mm.par_flat[idet].addGlobalOffset(val_scipy)\n-            #mm.par_flat[idet].addGlobalOffset(-1. * res[0][idet])\n \n         return out\n \n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_LargeFlat/python/VIS_LargeFlat/VIS_LargeFlat_Modelling/Utils.py": [
                        [
                            "@@ -6,7 +6,6 @@ import VIS_LargeFlat.VIS_LargeFlat_Modelling.FPA_VIS_Geometry as vis_geom\n \n def coordGapsX(vis_fpa_geom,n=1):\n     print(\"Start coordgapsx\")\n-    #print(\"Size detX: \" + str(vis_fpa_geom.sizeDetX()))\n     out = np.array(())\n     c = 0.\n     for i in range(0, 6):\n@@ -20,19 +19,13 @@ def coordGapsX(vis_fpa_geom,n=1):\n \n \n def coordGapsY(vis_fpa_geom,n=1):\n-    #print(\"Size detY: \" + str(vis_fpa_geom.sizeDetY()))\n-\n     out = np.array(())\n     c = 0.\n     for i in range(0, 6):\n         out = np.append(out, c + vis_fpa_geom.sizeDetY() * np.linspace(1, n, n) / (n+1));  c += vis_fpa_geom.sizeDetY();\n-        #if i <= 2:\n         if i <= 3:\n             out = np.append(out, c + vis_fpa_geom.sizeGapsY()[i] / 3);                     c += vis_fpa_geom.sizeGapsY()[i];\n-            #out = np.append(out, c + vis_fpa_geom.sizeGapsY()[i] / 2);                     c += vis_fpa_geom.sizeGapsY()[i];\n-    #out = np.asarray(out) / vis_fpa_geom.sizeFPY() * 2 - 1\n     out = np.asarray(out) / vis_fpa_geom.sizeFPY() * 3 - 1.5\n-    #out = np.asarray(out) / vis_fpa_geom.sizeFPY() * 2 - 1.5\n     return out\n \n \n@@ -43,7 +36,6 @@ def coordGaps(vis_fpa_geom,n=1):\n     y = coordGapsY(vis_fpa_geom,n)\n     outX = []\n     outY = []\n-    #print(\"CoordGaps LenX: \" + str(len(x)) + \" LenY: \" + str(len(y)))\n     for ix in range(0, len(x)):\n         for iy in range(0, len(y)):\n             # Discard points fallig on a detector\n@@ -56,29 +48,11 @@ def coordGaps(vis_fpa_geom,n=1):\n             (idet2, _x, _y) = vis_fpa_geom.focalplane2det(-1.5, y[iy])\n             if (idet1 == 0)  and  (idet2 == 0):\n                 continue\n-\n-            #print(\"GAPS idet: \" + str(idet) + \" idet1: \" + str(idet1) + \" idet2: \" + str(idet2) + \" xix: \" + str(x[ix]) + \" yiy: \" + str(y[iy]) + \" _x:\" + str(_x) + \" _y: \" + str(_y))\n             outX.append(x[ix])\n             outY.append(y[iy])\n     print(\"End coordGaps\")\n     return (np.asarray(outX), np.asarray(outY))\n \n-\n-#def allcombinations(x, y):\n-    #print(\"Start allcombinations\")\n-#    (x, y) = np.meshgrid(x, y)\n-#    x = x.reshape(x.size)\n-#    y = y.reshape(y.size)\n-    #print(\"End allcombinations\")\n-#    return (x, y)\n-\n-#def cartesianProduct(x, y):\n-#    (x, y) = np.meshgrid(x, y)\n-#    x = x.reshape(x.size)\n-#    y = y.reshape(y.size)\n-#    return (x, y)\n-\n-\n def cartesianProduct(x, y):\n     (x, y) = np.meshgrid(x, y, indexing='ij')\n     x = x.reshape(x.size)\n@@ -88,7 +62,6 @@ def cartesianProduct(x, y):\n def closestDetectors(vis_fpa_geom,x, y):\n     \n     c = np.array((-1.25,-0.75, -0.25, 0.25, 0.75,1.25))\n-    #(cy, cx) = allcombinations(c.copy(), c.copy())  # NOTE: this is correct: first y, then x.\n \n     (cx, cy) = cartesianProduct(c.copy(), c.copy())\n     idet = np.argsort(np.sqrt( (cx-x)**2  +  (cy-y)**2 ))[0:2] + 1\n@@ -100,37 +73,5 @@ def closestDetectors(vis_fpa_geom,x, y):\n         return idet[[1,0]]\n     return idet\n \n-\"\"\"\n-for loop in range(0, 2):\n-    fig = plt.figure()\n-    (x, y) = coordGaps(5); plt.scatter(x, y);\n-    for i in range(0, x.size):\n-        idet = closestDetectors(x[i], y[i])[loop]\n-        (idetx, idety) = idetseq2xy(idet)\n-        px = -0.75 + (idetx-1) * 0.5\n-        py = -0.75 + (idety-1) * 0.5\n-        plt.plot([x[i], px], [y[i], py])\n-plt.show()\n-\"\"\"\n-\n-\"\"\"\n-# Each point in the gaps (excluding points at the intersection of the\n-# gaps) has exactly two closest detectors.  Given x,y coordinate of a\n-# point, the closestDetectors() function returns the detector IDs of\n-# such detectors.  The following shows its usage in a plot:\n-for loop in range(0, 2):  # Select either the first or second closest det.\n-    fig = plt.figure()\n-    (x, y) = coordGaps(5);\n-    plt.scatter(x, y);\n-    for i in range(0, x.size):\n-        idet = closestDetectors(x[i], y[i])[loop]\n-        (idetx, idety) = idetseq2xy(idet)\n-        px = -0.75 + (idetx-1) * 0.5  # X coordinate of closest detector\n-        py = -0.75 + (idety-1) * 0.5  # Y coordinate of closest detector\n-        plt.plot([x[i], px], [y[i], py])\n-plt.show()\n-\"\"\"\n-\n-\n def gaussian(x, mu, sig):\n     return np.exp(-np.power(x - mu, 2.) / (2 * np.power(sig, 2.))) / np.sqrt(2 * np.pi) / sig\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_LargeFlat/tests/python/EUC_MDB_2023-07-11_SpaceSegment.Instrument.VIS.xml": [
                        [
                            "@@ -0,0 +1,179 @@\n+<?xml version=\"1.0\" ?><ns0:DpdMdbDataBase xmlns:ns0=\"http://ecdm.euclid-ec.org/schema/dpd/mdb\">\n+ <Header>\n+  <ProductId>EUC_MDB_MISSIONCONFIGURATION-DEV_2023-07-11T15:00:00.00Z_00</ProductId>\n+  <ProductType>DpdMdbDataBase</ProductType>\n+  <SoftwareName>ST_MDB_Tools</SoftwareName>\n+  <SoftwareRelease>1.0</SoftwareRelease>\n+  <ProdSDC>UNKNOWN</ProdSDC>\n+  <DataSetRelease>NoDR</DataSetRelease>\n+  <Purpose>TEST</Purpose>\n+  <PlanId>NoPlan</PlanId>\n+  <PPOId>NoPPP</PPOId>\n+  <PipelineDefinitionId>NoPipelineDef</PipelineDefinitionId>\n+  <PpoStatus>COMPLETED</PpoStatus>\n+  <ManualValidationStatus>UNKNOWN</ManualValidationStatus>\n+  <Curator>SGS Euclid System Team</Curator>\n+  <CreationDate>2023-07-11T13:03:57.813000Z</CreationDate>\n+ </Header>\n+ <Data>\n+  <EuclidMissionParameterSet>\n+\n+\n+\n+   <Parameter title=\"SpaceSegment.Instrument.VIS.VISAveragePixelSizemicron\">\n+    <Description>This is the average physical size of the detector pixels on the focal plane.</Description>\n+    <Source>Input by J.A. As required. Not validated. For test in the MDB.</Source>\n+    <Expression>None</Expression>\n+    <Release>0.1</Release>\n+    <Value>\n+     <Double unit=\"um\">\n+      <DoubleValue>12.0</DoubleValue>\n+     </Double>\n+    </Value>\n+   </Parameter>\n+\n+   <Parameter title=\"SpaceSegment.Instrument.VIS.VISCCDChargeInjection\">\n+    <Description>This is the size of the charge injection structure that splits the CCD in the vertical direction.</Description>\n+    <Source>Input from J. Denniston EUCL-MSS-ICD-6-002 issue1.1. As Required</Source>\n+    <Expression>None</Expression>\n+    <Release>0.1</Release>\n+    <Value>\n+     <Long unit=\"pixel\">\n+      <LongValue>4</LongValue>\n+     </Long>\n+    </Value>\n+   </Parameter>\n+\n+   <Parameter title=\"SpaceSegment.Instrument.VIS.VISCCDColumn\">\n+    <Description>This is the number of CCD on a column of the VIS focal plane assembly.</Description>\n+    <Source>Input by J.A. As required. Not validated. For test in the MDB.</Source>\n+    <Expression>None</Expression>\n+    <Release>0.1</Release>\n+    <Value>\n+     <Long unit=\"NA\">\n+      <LongValue>6</LongValue>\n+     </Long>\n+    </Value>\n+   </Parameter>\n+\n+   <Parameter title=\"SpaceSegment.Instrument.VIS.VISCCDGapLongDimensionNominalImage\">\n+    <Description>This is the nominal size of the gaps between 2 CCDs active area, in the VIS channel telescope image focal plane, in the longest dimension                of the VIS focal plane. The longest dimension of the VIS focal plane is projected on the sky along the Ysc axis. It corresponds to the                X_OPT_VIS axis. In order to get its size on the sky, the VIS channel telescope plate scale parameter must be used.</Description>\n+    <Source>Input by J.A. As required. Not validated, for test in the MDB. EUCL-MSS-RD-6-001 issue 1.3.</Source>\n+    <Expression>None</Expression>\n+    <Release>0.2</Release>\n+    <Value>\n+     <Double unit=\"mm\">\n+      <DoubleValue>7.528</DoubleValue>\n+     </Double>\n+    </Value>\n+   </Parameter>\n+\n+   <Parameter title=\"SpaceSegment.Instrument.VIS.VISCCDGapShortDimensionNominalImage\">\n+    <Description>This is the nominal size of the gaps between 2 CCDs active area, in the VIS channel telescope image focal plane, in the shortest                dimension of the VIS focal plane. The shortest dimension of the VIS focal plane is projected on the sky along the Xsc axis. It corresponds                to the Y_OPT_VIS axis. In order to get its size on the sky, the VIS channel telescope plate scale parameter must be used.</Description>\n+    <Source>Input by J.A. As required. Not validated, for test in the MDB. EUCL-MSS-RD-6-001 issue 1.3.</Source>\n+    <Expression>None</Expression>\n+    <Release>0.2</Release>\n+    <Value>\n+     <Double unit=\"mm\">\n+      <DoubleValue>1.468</DoubleValue>\n+     </Double>\n+    </Value>\n+   </Parameter>\n+\n+   <Parameter title=\"SpaceSegment.Instrument.VIS.VISCCDNumber\">\n+    <Description>This is the total number of CCD integrated into the VIS focal plane assembly.</Description>\n+    <Source>Input by J.A. As required. Not validated. For test in the MDB.</Source>\n+    <Expression>None</Expression>\n+    <Release>0.1</Release>\n+    <Value>\n+     <Long unit=\"NA\">\n+      <LongValue>36</LongValue>\n+     </Long>\n+    </Value>\n+   </Parameter>\n+\n+   <Parameter title=\"SpaceSegment.Instrument.VIS.VISCCDQuadrantList\">\n+    <Description>This is the set of identifiers of the Quadrants of the VIS detector. The detailed description of the quadrant configuration of the CCD                is in the document referenced in the source.</Description>\n+    <Source>Input from J. Denniston EUCL-MSS-ICD-6-002 issue1.1. As Required</Source>\n+    <Expression>None</Expression>\n+    <Release>0.1</Release>\n+    <Value>\n+     <Text>E F G H</Text>\n+    </Value>\n+   </Parameter>\n+\n+   <Parameter title=\"SpaceSegment.Instrument.VIS.VISCCDRow\">\n+    <Description>This is the number of CCD on a row of the VIS focal plane assembly.</Description>\n+    <Source>Input by J.A. As required. Not validated. For test in the MDB.</Source>\n+    <Expression>None</Expression>\n+    <Release>0.1</Release>\n+    <Value>\n+     <Long unit=\"NA\">\n+      <LongValue>6</LongValue>\n+     </Long>\n+    </Value>\n+   </Parameter>\n+\n+   <Parameter title=\"SpaceSegment.Instrument.VIS.VISDetectorActivePixelLongDimensionFormat\">\n+    <Description>This is the minimum number of active pixels in the longest dimension of the VIS focal plane. Due to the injection line inserted in the                long direction of the CCD format, the active array is split in 2 equal active arrays of 2066 pixels.</Description>\n+    <Source>Input by J.A. As required. Not validated, for test in the MDB. EUCL-EST-PS-7-001.</Source>\n+    <Expression>None</Expression>\n+    <Release>0.2</Release>\n+    <Value>\n+     <Long unit=\"pixel\">\n+      <LongValue>4132</LongValue>\n+     </Long>\n+    </Value>\n+   </Parameter>\n+\n+   <Parameter title=\"SpaceSegment.Instrument.VIS.VISDetectorActivePixelShortDimensionFormat\">\n+    <Description>This is the minimum number of active pixels in the shortest dimension of the            VIS focal plane.</Description>\n+    <Source>Input by J.A. As required. Not validated, for test in the MDB.            EUCL-EST-PS-7-001.</Source>\n+    <Expression>None</Expression>\n+    <Release>0.3</Release>\n+    <Value>\n+     <Long unit=\"pixel\">\n+      <LongValue>4096</LongValue>\n+     </Long>\n+    </Value>\n+   </Parameter>\n+\n+   <Parameter title=\"SpaceSegment.Instrument.VIS.VISDetectorPixelLongDimensionFormat\">\n+    <Description>This is the minimum number of pixels in the longest dimension of the VIS focal plane. Due to the injection line inserted in the long                direction of the CCD format, the active array is split in 2 equal active arrays, with 4 inactive pixels in the middle for injection line.</Description>\n+    <Source>Input by J.A. As required. Not validated, for test in the MDB. EUCL-EST-PS-7-001.</Source>\n+    <Expression>None</Expression>\n+    <Release>0.2</Release>\n+    <Value>\n+     <Long unit=\"pixel\">\n+      <LongValue>4136</LongValue>\n+     </Long>\n+    </Value>\n+   </Parameter>\n+\n+   <Parameter title=\"SpaceSegment.Instrument.VIS.VISFocalPlaneAssemblyLongDimensionMaxImage\">\n+    <Description>This is the maximum size of the Focal Plane Assembly of the VIS, in the longest dimension of the VIS focal plane. The longest dimension                of the VIS focal plane is projected on the sky along the Ysc axis. It corresponds to the X_OPT_VIS axis. In order to get its size on the sky,                the VIS channel telescope plate scale parameter must be used.</Description>\n+    <Source>Input by J.A. As required. Not validated, for test in the MDB. EUCL-MSS-RD-6-001 issue 1.3.</Source>\n+    <Expression>None</Expression>\n+    <Release>0.2</Release>\n+    <Value>\n+     <Double unit=\"mm\">\n+      <DoubleValue>336.932</DoubleValue>\n+     </Double>\n+    </Value>\n+   </Parameter>\n+\n+   <Parameter title=\"SpaceSegment.Instrument.VIS.VISFocalPlaneAssemblyShortDimensionMaxImage\">\n+    <Description>This is the minimum size of the Focal Plane Assembly of the VIS, in the shortest dimension of the VIS focal plane.                The shortest dimension of the VIS focal plane is projected on the sky along the Xsc axis. It corresponds to the Y_OPT_VIS axis.                In order to get its size on the sky, the VIS channel telescope plate scale parameter must be used.</Description>\n+    <Source>Input by J.A. As required. Not validated, for test in the MDB. EUCL-MSS-RD-6-001 issue 1.3.</Source>\n+    <Expression>None</Expression>\n+    <Release>0.2</Release>\n+    <Value>\n+     <Double unit=\"mm\">\n+      <DoubleValue>303.127</DoubleValue>\n+     </Double>\n+    </Value>\n+   </Parameter>\n+\n+  </EuclidMissionParameterSet>\n+ </Data>\n+</ns0:DpdMdbDataBase>\n\\ No newline at end of file\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_LargeFlat/tests/python/FPA_VIS_Geometry_test.py": [
                        [
                            "@@ -0,0 +1,108 @@\n+\"\"\"\n+@file VIS_Tasks/VIS_LargeFlat/tests/python/FPA_VIS_Geometry_test.py\n+@date 2023-07-25\n+@author mottet@iap.fr\n+\n+@description: VIS_LargeFlat/VIS_LargeFlat_Modelling/FPA_VIS_Geometry.py test script\n+\n+run with:\n+$ cd VIS_Tasks\n+$ make purge all install\n+$ ./build.*/run pytest --capture=no VIS_LargeFlat/tests/python/FPA_VIS_Geometry_test.py\n+\n+\"\"\"\n+\n+\n+################################################################################\n+\n+import pytest\n+import os\n+import re\n+import numpy as np\n+\n+import logging\n+logger = logging.getLogger( __name__)\n+\n+from ST_DM_MDBTools.Mdb import Mdb\n+\n+from VIS_LargeFlat.VIS_LargeFlat_Modelling import FPA_VIS_Geometry\n+from VIS_ImageTools_M import FPA_quadrant\n+\n+\n+#-------------------------------------------------------------------------------\n+\n+def ccd_row_col( ccdid):\n+  ccdrow, ccdcol = re.findall( \"[1-6]\", ccdid)\n+  return int( ccdrow), int( ccdcol)\n+\n+\n+#-------------------------------------------------------------------------------\n+\n+def is_close( x, y, err):\n+  return np.abs( x-y) < err\n+\n+\n+#-------------------------------------------------------------------------------\n+\n+def test_FPA_VIS_Geometry():\n+\n+  # clean log\n+  print()\n+\n+  script_dir = os.path.dirname( os.path.realpath( __file__))\n+\n+  mdb = Mdb( os.path.join( script_dir, \"EUC_MDB_2023-07-11_SpaceSegment.Instrument.VIS.xml\"))\n+\n+  vis_fpa_geom = FPA_VIS_Geometry.FPA_VISGeometry( mdb, logger)\n+\n+  ccd_list =      ['1-1','2-1','3-1','4-1','5-1','6-1']\n+  ccd_list.extend(['1-2','2-2','3-2','4-2','5-2','6-2'])\n+  ccd_list.extend(['1-3','2-3','3-3','4-3','5-3','6-3'])\n+  ccd_list.extend(['1-4','2-4','3-4','4-4','5-4','6-4'])\n+  ccd_list.extend(['1-5','2-5','3-5','4-5','5-5','6-5'])\n+  ccd_list.extend(['1-6','2-6','3-6','4-6','5-6','6-6'])\n+\n+  NCCD = len( ccd_list)\n+  assert NCCD == 36\n+\n+# test idetseq2string(), idetseq2xy() and idetxy2seq()\n+  for idet in range( 1, NCCD+1):\n+    ccd_id = ccd_list[idet-1]\n+    logger.debug( ccd_id)\n+    assert vis_fpa_geom.idetseq2string( idet) == ccd_id\n+    det_col, det_row = vis_fpa_geom.idetseq2xy( idet)\n+    idet_out = vis_fpa_geom.idetxy2seq( det_col, det_row)\n+    logger.info( f\"idetseq2xy( {ccd_id}): ccd_row={det_row}, ccd_col={det_col}\")\n+    assert idet_out == idet\n+    ccd_row, ccd_col = ccd_row_col( ccd_id)\n+    assert (det_col == ccd_col) and (det_row == ccd_row)\n+\n+# fpa_x/y are normalised FPA coordinates from -1.5 to 1.5\n+# det_x/y are normalised CCD coordinates from -1.5 to 1.5\n+# pix_x/y are CCD pixel coordinates, from (0, 0) to (4096, 4136)\n+\n+# test det2pixel(), pixel2det()\n+  maxerr = 0\n+  for det_x, det_y in ((-1.5, -1.5), (-1.5, +1.5), (+1.5, -1.5), (+1.5, +1.5), (0, 0)):\n+    for idet in (1, 6, 31, 36):\n+      ccd_id = vis_fpa_geom.idetseq2string( idet)\n+      pix_x, pix_y = vis_fpa_geom.det2pixel( idet, det_x, det_y)\n+      logger.info( f\"vis_fpa_geom.det2pixel( {ccd_id}, det_x={det_x}, det_y={det_y}): pix_x={pix_x}, pix_y={pix_y}\")\n+      det_x_out, det_y_out = vis_fpa_geom.pixel2det( idet, pix_x, pix_y)\n+      maxerr = max( np.abs( det_x - det_x_out), maxerr)\n+      maxerr = max( np.abs( det_y - det_y_out), maxerr)\n+  maxerr_pix = maxerr / 3.0 * 4100\n+  logger.info( f\"det2pixel() - pixel2det() max error = {maxerr_pix} pixels\")\n+\n+# test det2focalplane(), focalplane2det()\n+  for idet in range( 1, NCCD+1):\n+    for det_x, det_y in ((-1.5, -1.5), (+1.5, +1.5), (0, 0)):\n+      ccd_id = vis_fpa_geom.idetseq2string( idet)\n+      fpa_x, fpa_y = vis_fpa_geom.det2focalplane( idet, det_x, det_y)\n+      logger.info( f\"vis_fpa_geom.det2focalplane( {idet}, {det_x}, {det_y}): fpa_x={fpa_x}, fpa_y={fpa_y}\")\n+      idet_out, det_x_out, det_y_out = vis_fpa_geom.focalplane2det( fpa_x, fpa_y)\n+      assert idet == idet_out\n+      assert det_x == det_x_out\n+      assert det_y == det_y_out\n+\n+  return\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_NonLinearity/auxdir/VIS_NonLinearity/Patty_FlatfieldNL.json": [
                        [
                            "",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_NonLinearity/auxdir/VIS_NonLinearity/Patty_FlatfieldNL.readme.txt": [
                        [
                            "@@ -1,4 +1,4 @@\n An example json file containing measured NL points for each quadrant.\n Downloaded from:\n https://euclid.roe.ac.uk/issues/22517#note-28\n-https://euclid.roe.ac.uk/attachments/87505\n\\ No newline at end of file\n+https://euclid.roe.ac.uk/attachments/87505\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_NonLinearity/python/VIS_NonLinearity/VIS_NonLinCorrection_IO/file_entry_point.py": [
                        [
                            "@@ -22,6 +22,8 @@ A corrected copy of the specified input quadrant will be written to the output f\n \n import os.path\n import numpy as np\n+import json\n+import configparser\n import re #regular expressions\n from astropy.io import fits\n \n@@ -29,15 +31,18 @@ import ElementsKernel.Logging as elog\n \n import VIS_PyLibrary_M.fits_io_library as fio\n \n-from VIS_NonLinearity_Flat.VIS_NonLinCorrectionFlat_IO import file_entry_point as flat_method\n-\n-from ..VIS_NonLin_Removal import non_lin_removal as algo\n+from ..VIS_NonLin_Removal import non_lin_removal as pixel_algo\n+from ..VIS_NonLin_Removal import non_lin_flat_removal as flat_algo\n \n __all__ = ['file_layer_entry_point']\n \n+#the name of this PE's [section] in the configuration ini file\n+_CONFIG_SECTION = \"CorrectNonLinearity\"\n+\n \n-def _read_corr_model_file(model_file_name, quad_name):\n-    \"\"\"Read the non-linearity correction model of the specified quadrant from a file.\n+def _read_corr_model_file_pixel(model_file_name, quad_name):\n+    \"\"\"Read the non-linearity correction model of the specified quadrant from a file.  For the pixel-based method\n+       where the file contains a polynomial.\n \n     Parameters\n     ----------\n@@ -65,7 +70,33 @@ def _read_corr_model_file(model_file_name, quad_name):\n     model_coeffs = [model[name][0] for name in model.names if iscoeff(name)]\n     return model_coeffs\n \n-def file_layer_entry_point(input_file, model_file, output_file, quadrant_id=None):\n+def _read_corr_model_file_flat(model_file_name, quad_name):\n+    \"\"\"Read the non-linearity correction model of the specified quadrant from a json file.  Intended for the\n+       list of data points which define the model fitted to flat exposures.\n+\n+    Parameters\n+    ----------\n+    model_file_name : string\n+        File name of the json file containing the model which converts non-linear flux to linear flux, where both\n+        are in ADU.  It must contain the quadrant specified by `quad_name`.\n+    quad_name : string\n+        Name of the quadrant whose model shall be read from the file.  It should match a name used inside the file.\n+\n+    Returns\n+    -------\n+    2-D array_like of float\n+        A set of pairs of flux values which convert non-linear flux to linear flux, where both are in ADU.  If there are\n+        N pairs this array's shape is [N][2].  In each pair, index [1] is a non-linear (i.e. observed) flux and [0] is the\n+        corresponding linear (i.e. corrected) flux.\n+    \"\"\"\n+    log = elog.getLogger(__name__)\n+    with open( model_file_name, \"r\") as file:\n+        json_data = json.load(file)\n+    model_points = np.array(json_data[quad_name])\n+    log.info(\"_read_corr_model_file(): Loaded a model with \" + str(len(model_points)) + \" points\")\n+    return model_points\n+\n+def file_layer_entry_point(input_file, model_file, config_file, output_file, quadrant_id=None):\n     \"\"\"Handles the I/O to/from files.  It is a wrapper around the core algorithm.\n \n     Parameters\n@@ -76,6 +107,8 @@ def file_layer_entry_point(input_file, model_file, output_file, quadrant_id=None\n         File name of the FITS (for pixel method) or json (for flat method) file containing the model which converts\n         non-linear flux to linear flux, where both are in ADU.  It must contain the quadrant specified by `quadrant_id`.\n         The file name must end in .fits or .json, to distinguish the two supported methods of correcting non-linearity.\n+    config_file : string\n+        File name of the configuration parameters for this PE.  It should be in the ini file format.\n     output_file : string\n         Output FITS file name.  If it already exists, only the one corrected quadrant will be modified.  If it does\n         not already exist, a new output file will be created.\n@@ -88,25 +121,41 @@ def file_layer_entry_point(input_file, model_file, output_file, quadrant_id=None\n     log.info(\"file_layer_entry_point(): argument 'input_file' is: \" + str(input_file))\n     log.info(\"file_layer_entry_point(): argument 'quadrant_id' is: \" + str(quadrant_id))\n     log.info(\"file_layer_entry_point(): argument 'model_file' is: \" + str(model_file))\n+    log.info(\"file_layer_entry_point(): argument 'config_file' is: \" + str(config_file))\n     log.info(\"file_layer_entry_point(): argument 'output_file' is: \" + str(output_file))\n+    if config_file is None:\n+        message = (\"file_layer_entry_point(): Configuration ini file name must be supplied (see #22822)\")\n+        log.error(message)\n+        raise Exception(message)\n+    config = configparser.ConfigParser()\n+    config.read(config_file)\n+    if _CONFIG_SECTION not in config:\n+        message = (\"file_layer_entry_point(): The section [\" + str(_CONFIG_SECTION) + \"] is missing from \"\n+                   \"the configuration ini file (see #22822)\")\n+        log.error(message)\n+        raise Exception(message)\n+    non_lin_cfg = config[_CONFIG_SECTION]\n     if (quadrant_id is None) or (quadrant_id == \"\"):\n         quadrant_id = 1 #use the first image extension\n     elif quadrant_id.isdigit():\n         quadrant_id = int(quadrant_id)\n     quad_name = fio.read_ext_name(input_file, quadrant_id)\n+    log.info(\"file_layer_entry_point(): quadrant name (converted) is: \" + str(quad_name))\n+    image = fio.load_single_ext(input_file, quad_name, apply_gain=False)\n     if \".json\" in model_file.lower():\n         log.info(\"file_layer_entry_point(): calling flat version of NL removal\")\n-        flat_method.file_layer_entry_point(input_file, model_file, output_file, str(quadrant_id))\n+        model_points = _read_corr_model_file_flat(model_file, quad_name)\n+        log.debug(\"file_layer_entry_point(): FITS model points are \" + str(model_points))\n+        output_image = flat_algo.remove_non_lin_flat(image, model_points, non_lin_cfg)\n     else:\n-        log.info(\"file_layer_entry_point(): quadrant name (converted) is: \" + str(quad_name))\n-        image = fio.load_single_ext(input_file, quad_name, apply_gain=False)\n-        model_coeffs = _read_corr_model_file(model_file, quad_name)\n+        log.info(\"file_layer_entry_point(): calling pixel-based version of NL removal\")\n+        model_coeffs = _read_corr_model_file_pixel(model_file, quad_name)\n         log.debug(\"file_layer_entry_point(): FITS model coeffs are \" + str(model_coeffs))\n-        output_image = algo.remove_non_lin(image, model_coeffs)\n-        if os.path.isfile(output_file):\n-            log.info(\"file_layer_entry_point(): saving to existing file: \" + output_file)\n-            fio.update_single_ext(output_file, output_image, quad_name, gain=None, apply_gain=False)\n-        else:\n-            log.info(\"file_layer_entry_point(): saving image to new file: \" + output_file)\n-            fio.save_single_ext(output_file, output_image, quad_name, input_file, gain=None, apply_gain=False)\n+        output_image = pixel_algo.remove_non_lin(image, model_coeffs)\n+    if os.path.isfile(output_file):\n+        log.info(\"file_layer_entry_point(): saving to existing file: \" + output_file)\n+        fio.update_single_ext(output_file, output_image, quad_name, gain=None, apply_gain=False)\n+    else:\n+        log.info(\"file_layer_entry_point(): saving image to new file: \" + output_file)\n+        fio.save_single_ext(output_file, output_image, quad_name, input_file, gain=None, apply_gain=False)\n     log.info(\"file_layer_entry_point(): end\")\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_NonLinearity/python/VIS_NonLinearity/VIS_NonLinCorrection_Programs/VIS_remove_non_lin.py": [
                        [
                            "@@ -3,7 +3,7 @@\n The Elements Program name matches the name of this .py file.\n \"\"\"\n #\n-# Copyright (C) 2012-2021 Euclid Science Ground Segment\n+# Copyright (C) 2012-2023 Euclid Science Ground Segment\n #\n # This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n # Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n@@ -43,6 +43,7 @@ def mainMethod(args):\n     \"\"\"\n     fep.file_layer_entry_point(args.in_image,\n                                args.in_model,\n+                               args.config_ini,\n                                args.out_file_name,\n                                quadrant_id=args.extname)\n \n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_NonLinearity/python/VIS_NonLinearity/VIS_NonLinCorrection_Programs/command_line_options.py": [
                        [
                            "@@ -37,6 +37,8 @@ def define_cmd_line_options():\n                         help='Input non-linearity correction model file name (ending in either .fits or .json).')\n     parser.add_argument('--extname', type=str,\n                         help='(optional) name or number of the quadrant to be corrected (e.g. \"2-1.E\").')\n+    parser.add_argument('--config_ini', type=str,\n+                        help='Input configuration file name')\n     parser.add_argument('--out_file_name', type=str,\n                         help='Output file name for the corrected quadrant.  It may already exist and contain other ' +\n                              'quadrants.  If it does not exist, a new file will be created.')\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_NonLinearity/python/VIS_NonLinearity/VIS_NonLin_Removal/__init__.py": [
                        [
                            "@@ -13,3 +13,4 @@ __path__ = extend_path(__path__, __name__)\n \n #import the python files which define the external interface of this Elements module\n from .non_lin_removal import *\n+from .non_lin_flat_removal import *\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_NonLinearity/python/VIS_NonLinearity/VIS_NonLin_Removal/non_lin_flat_removal.py": [
                        [
                            "@@ -1,4 +1,10 @@\n \"\"\"Corrects the non-linearity effect in image pixel data, using a model from flat images.\n+\n+standalone test with:\n+\n+$ cd /sps/euclid/Users/smottet/wrk_pattynlcorr\n+$ E-Run VIS_Tasks VIS_remove_non_lin_flat --in_image EUC_VIS_EXP_000024-01-1.fits_sa_bs.010 --in_model Patty_FlatfieldNL.json --extname  1-3.F --out_file_name outfilename.fits\n+\n \"\"\"\n #\n # Copyright (C) 2012-2023 Euclid Science Ground Segment\n@@ -17,43 +23,35 @@\n \n import numpy as np\n \n-__all__ = ['remove_non_lin']\n+import ElementsKernel.Logging as elog\n+\n+__all__ = ['remove_non_lin_flat']\n \n-#flux values above this should not occur.  If they do exist they will receive the same correction as 65535.0\n+#The model will be extrapolated up to this non-linear (observed) flux value.  If there is any flux value\n+#above this, they will receive the same correction as this value.\n _EXTRAPOLATION_LIMIT = 65535.0\n \n+#flux values below this will be unchanged\n+_MINIMUM_FLUX = -10000.0\n \n-def _interpolate_nl_to_linear(nl_flux_value, points_model):\n-    \"\"\"Correct the non-linearity effect of a flux value by applying a model defined by several fixed points.\n+\n+def _assert_config_valid(non_lin_flat_cfg):\n+    \"\"\"Raise an exception if the config is not valid for this algorithm.\n \n     Parameters\n     ----------\n-    nl_flux_value : number\n-        A value in which is to be corrected for the non-linearity effect.\n-    points_model : 2-D array_like of float\n-        A set of pairs of numbers.  In each pair, index [1] is a non-linear (i.e. observed) flux and [0] is the\n-        corresponding linear (i.e. corrected) flux.\n-\n-    Returns\n-    -------\n-    number\n-        The flux value with the non-linearity effect corrected.\n+    non_lin_flat_cfg : dictionary-like\n+        Config parameters.  This could be a SectionProxy from a ConfigParser, or any other dictionary-like object.\n     \"\"\"\n-    if nl_flux_value >= _EXTRAPOLATION_LIMIT:\n-        #use the correction defined by the last point\n-        result = nl_flux_value + (points_model[-1,0] - points_model[-1,1])\n-    elif (len(points_model) < 2) or (nl_flux_value <= 0.0) or (nl_flux_value <= points_model[0,1]):\n-        #don't apply any correction\n-        result = nl_flux_value\n-    else:\n-        for pair_i in range(len(points_model)-2):\n-            if (nl_flux_value > points_model[pair_i,1]) and (nl_flux_value <= points_model[pair_i+1,1]):\n-                linear_diff = points_model[pair_i+1,0] - points_model[pair_i,0]\n-                nl_diff     = points_model[pair_i+1,1] - points_model[pair_i,1]\n-                result = points_model[pair_i,0] + (nl_flux_value - points_model[pair_i,1]) / nl_diff * linear_diff\n-    return result\n-\n-def remove_non_lin(image, points_model):\n+    log = elog.getLogger(__name__)\n+    required_config = \"linear_up_to_adu\"\n+    if required_config not in non_lin_flat_cfg:\n+        message = (\"_assert_config_valid(): The configuration value \" + str(required_config) + \" is missing from \"\n+                   \"the configuration (check the ini file?)\")\n+        log.error(message)\n+        raise Exception(message)\n+\n+def remove_non_lin_flat(image, points_model, non_lin_flat_cfg):\n     \"\"\"Correct the non-linearity effect in an image by applying a model defined by several fixed points.\n \n     Parameters\n@@ -63,15 +61,27 @@ def remove_non_lin(image, points_model):\n     points_model : 2-D ndarray of floats\n         A set of pairs of numbers.  In each pair, index [1] is a non-linear (i.e. observed) flux and [0] is the\n         corresponding linear (i.e. corrected) flux.\n+    non_lin_flat_cfg : dictionary-like\n+        Config parameters.  This could be a SectionProxy from a ConfigParser, or any other dictionary-like object.\n \n     Returns\n     -------\n     array_like of number\n         A copy of `image` with the non-linearity effect corrected.\n     \"\"\"\n-    if points_model[0,1] > 0.0:\n-        #prepend another point at zero,zero\n-        ext_model = np.concatenate((np.zeros_like(points_model, shape=(1,2)), points_model))\n+    log = elog.getLogger(__name__)\n+    _assert_config_valid(non_lin_flat_cfg)\n+    correction_lower_limit = float(non_lin_flat_cfg[\"linear_up_to_adu\"])\n+    log.info(\"remove_non_lin_flat(): The correction lower limit (linear_up_to_adu in config) is \" + str(correction_lower_limit))\n+    # prepend two additional linear points at -1000 ADU and 'correction_lower_limit'\n+    # to take into account negative readout noise values in overscans and not correct pixels up to 'correction_lower_limit'\n+    ext_model = np.array( [[_MINIMUM_FLUX, _MINIMUM_FLUX], [correction_lower_limit, correction_lower_limit]], dtype=np.float32)\n+    for pair_i in range(len(points_model)):\n+        _, nonlin_val = points_model[pair_i]\n+        if nonlin_val <= correction_lower_limit:\n+            continue\n+        ext_model = np.concatenate((ext_model, [points_model[pair_i]]))\n+\n     if ext_model[-1,1] < _EXTRAPOLATION_LIMIT:\n         #append a new last point at _EXTRAPOLATION_LIMIT\n         last_linear_diff = ext_model[-1,0] - ext_model[-2,0]\n@@ -82,7 +92,27 @@ def remove_non_lin(image, points_model):\n         new_last_point[0,1] = _EXTRAPOLATION_LIMIT\n         new_last_point[0,0] = ext_model[-1,0] + (_EXTRAPOLATION_LIMIT - ext_model[-1,1]) * gradient\n         ext_model = np.concatenate((ext_model, new_last_point))\n-    #apply the non-linearity correction function to each flux value individually\n-    nl_correction = np.vectorize(_interpolate_nl_to_linear, otypes=[float], excluded=[\"points_model\"])\n-    corrected_img = nl_correction(nl_flux_value=image, points_model=ext_model)\n+\n+    corrected_img = image.copy() * np.nan\n+    #pixels lower than the model's lowest point are unchanged\n+    nl_pixels_mask = image < ext_model[0,1]\n+    corrected_img[nl_pixels_mask] = image[nl_pixels_mask]\n+    #pixels at or above the model's highest point are given the NL correction which that point defines\n+    nl_pixels_mask = image >= ext_model[-1,1]\n+    corrected_img[nl_pixels_mask] = image[nl_pixels_mask] + (ext_model[-1,0] - ext_model[-1,1])\n+    for pair_i in range(len(ext_model)-1):\n+        linear_beg, nonlin_beg = ext_model[pair_i]\n+        linear_end, nonlin_end = ext_model[pair_i+1]\n+        log.debug( f\"remove_non_lin_flat(): linear_beg, nonlin_beg, linear_end, nonlin_end = \" +\n+                   f\"{linear_beg:.2f}, {nonlin_beg:.2f}, {linear_end:.2f}, {nonlin_end:.2f}\")\n+        nl_pixels_mask = np.logical_and( image >= nonlin_beg, image < nonlin_end)\n+        log.debug( f\"remove_non_lin_flat(): pixel count = {np.count_nonzero( nl_pixels_mask)}\")\n+        linear_diff = linear_end - linear_beg\n+        nl_diff     = nonlin_end - nonlin_beg\n+        corrected_img[nl_pixels_mask] = linear_beg + (image[nl_pixels_mask] - nonlin_beg) / nl_diff * linear_diff\n+\n+    uncorrected_pixel_count = np.count_nonzero( np.isnan( corrected_img))\n+    log.debug( f\"remove_non_lin_flat(): uncorrected pixels = {uncorrected_pixel_count}\")\n+    assert uncorrected_pixel_count == 0, (f\"remove_non_lin_flat(): Error: {uncorrected_pixel_count} pixels \" +\n+                                          f\"were not corrected. This should not happen\")\n     return corrected_img\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_NonLinearity/tests/python/VIS_remove_non_lin_flat_test.py": [
                        [
                            "@@ -26,26 +26,109 @@ To run them at the command line, use \"make purge install ; make CTEST_OUTPUT_ON_\n \n import pytest\n \n-import VIS_NonLinearity_Flat.VIS_NonLinCorrectionFlat_Programs.VIS_remove_non_lin_flat as prog\n+from   VIS_NonLinearity import VIS_NonLin_Removal\n+import numpy as np\n+import json\n+import sys\n \n+import logging\n+logger = logging.getLogger( __name__)\n \n-def test_main_method_badargs():\n-    \"\"\"Call the command line entry point with an argument that is not recognised.\n \n-    Assert that the expected exception is thrown due to the invalid argument.\n-    \"\"\"\n-    arg_string = ['argv_item_zero_which_is_not_used', '--unrecognised_argument']\n-    #Python's argparse.py calls sys.exit() which throws a SystemExit Exception\n-    with pytest.raises(SystemExit):\n-        prog.cmd_line_entry_point(arg_string)\n+def test_non_lin_flat_removal():\n+  # to get the log messages, execute with:\n+  # build.*/run pytest --capture=no VIS_NonLinearity_Flat/tests/python/VIS_remove_non_lin_flat_test.py\n \n-def test_main_method_callable():\n-    \"\"\"Call the command line entry point with input files that do not exist.\n+  # from https://euclid.roe.ac.uk/issues/22517#note-28\n+  # first value in the pair is the linear signal in ADU,\n+  # the second one is the correcponding non-linear signal in ADU\n+  NLMODEL = \"\"\"{\n+\"1-1.E\": [\n+    [\n+      5.7205759826688904,\n+      5.807249847988931\n+    ],\n+    [\n+      12.088025578334763,\n+      12.13829002398899\n+    ],\n+    [\n+      31.357132187303225,\n+      31.468369922215974\n+    ],\n+    [\n+      63.12610021814389,\n+      62.992331362068676\n+    ],\n+    [\n+      127.18233644061723,\n+      127.07687630976658\n+    ],\n+    [\n+      319.2614419237922,\n+      319.15183262424875\n+    ],\n+    [\n+      639.6414209206326,\n+      639.7731134066603\n+    ],\n+    [\n+      1281.0531955783497,\n+      1282.3205548366452\n+    ],\n+    [\n+      3209.5279760698586,\n+      3218.461708954091\n+    ],\n+    [\n+      6438.379363052668,\n+      6474.959727033666\n+    ],\n+    [\n+      12949.723502523604,\n+      13089.290747508476\n+    ],\n+    [\n+      32698.444425748825,\n+      33398.46232320779\n+    ],\n+    [\n+      39328.831991792795,\n+      40263.488795679245\n+    ],\n+    [\n+      52608.14872305627,\n+      54032.42242146698\n+    ],\n+    [\n+      59221.55010694724,\n+      60863.18786984436\n+    ]\n+  ]\n+}\"\"\"\n+  logger.info( \"\")\n+  # correct nonlinearity in a random array\n+  non_lin_flat_cfg = { \"linear_up_to_adu\": 300 }\n+  model_points = np.array( json.loads( NLMODEL)[\"1-1.E\"])\n+  nonlin_image = np.random.rand( 1000, 1000) * 65535.0 - 100.0\n+  linear_image = VIS_NonLin_Removal.remove_non_lin_flat( nonlin_image, model_points, non_lin_flat_cfg)\n+  pixels_above_1000 = linear_image > 1000\n \n-    Assert that the expected file-not-found exception is thrown.\n-    \"\"\"\n-    arg_string = ['argv_item_zero_which_is_not_used',\n-                  '--in_image', 'non/existent/input/file.fits']\n-    #An IOError Exception \"No such file or directory\" is expected\n-    with pytest.raises(IOError):\n-        prog.cmd_line_entry_point(arg_string)\n+  # check that correction goes in the right way\n+  # (with model above, linear values above 1000 ADU are lower than non-linear values)\n+  logger.info( f\"above 1000 ADU correction mean: {np.mean( linear_image[pixels_above_1000] - nonlin_image[pixels_above_1000]):.2f} ADU\")\n+  assert np.all( linear_image[pixels_above_1000] < nonlin_image[pixels_above_1000])\n+\n+  # invert nl correction model\n+  inv_model = model_points[:,::-1]\n+\n+  # convert linear_image back to non linear image\n+  nonlin_image2 = VIS_NonLin_Removal.remove_non_lin_flat( linear_image, inv_model, non_lin_flat_cfg)\n+  diff = nonlin_image2 - nonlin_image\n+\n+  # and check various stats\n+  logger.info( f\"max difference={np.abs( diff).max()}\")\n+  logger.info( f\"abs difference sum={np.abs( diff).sum()}\")\n+  logger.info( f\"different pixels count={np.count_nonzero( diff):,}\")\n+  assert np.abs( diff).sum() < 1\n+  return\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_NonLinearity_Flat/CMakeLists.txt": [
                        [
                            "@@ -1,70 +0,0 @@\n-CMAKE_MINIMUM_REQUIRED(VERSION 2.8.5)\n-\n-#===============================================================================\n-# Load elements_subdir macro here\n-# Examples:\n-#   For declaring a project module:\n-#         elements_subdir(ElementsExamples)\n-#===============================================================================\n-elements_subdir(VIS_NonLinearity_Flat)\n-\n-#===============================================================================\n-# Load elements_depends_on_subdirs macro here\n-#   For creating a dependency onto an other accessible module\n-#         elements_depends_on_subdirs(ElementsKernel)\n-#===============================================================================\n-elements_depends_on_subdirs(ElementsKernel)\n-\n-#===============================================================================\n-# Add the find_package macro (a pure CMake command) here to locate the\n-# libraries.\n-# Examples:\n-#          find_package(CppUnit)\n-#===============================================================================\n-\n-#===============================================================================\n-# Declare the library dependencies here\n-# Example:\n-#         elements_add_library(ElementsExamples src/Lib/*.cpp\n-#                     LINK_LIBRARIES Boost ElementsKernel\n-#                     INCLUDE_DIRS Boost ElementsKernel\n-#                     PUBLIC_HEADERS ElementsExamples)\n-#===============================================================================\n-\n-#===============================================================================\n-# Declare the executables here\n-# Example:\n-# elements_add_executable(ElementsProgramExample src/Program/ProgramExample.cpp\n-#                        LINK_LIBRARIES Boost ElementsExamples\n-#                        INCLUDE_DIRS Boost ElementsExamples)\n-#===============================================================================\n-\n-#===============================================================================\n-# Declare the Boost tests here\n-# Example:\n-# elements_add_unit_test(BoostClassExample tests/src/Boost/ClassExample_test.cpp\n-#                       EXECUTABLE BoostClassExample_test\n-#                       INCLUDE_DIRS ElementsExamples\n-#                       LINK_LIBRARIES ElementsExamples TYPE Boost)\n-#===============================================================================\n-\n-#===============================================================================\n-# Use the following macro for python modules, scripts and aux files:\n-#  elements_install_python_modules()\n-#  elements_install_scripts()\n-#===============================================================================\n-elements_install_python_modules()\n-\n-#===============================================================================\n-# Declare the Python programs here\n-# Examples :\n-# elements_add_python_program(PythonProgramExample\n-#                             ElementsExamples.PythonProgramExample)\n-#===============================================================================\n-elements_add_python_program(VIS_remove_non_lin_flat VIS_NonLinearity_Flat.VIS_NonLinCorrectionFlat_Programs.VIS_remove_non_lin_flat)\n-\n-#===============================================================================\n-# Add the elements_install_conf_files macro\n-# Examples:\n-#          elements_install_conf_files()\n-#===============================================================================\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_NonLinearity_Flat/python/VIS_NonLinearity_Flat/VIS_NonLinCorrectionFlat_IO/__init__.py": [
                        [
                            "@@ -1,9 +0,0 @@\n-\"\"\"\n-This package contains the VIS_NonLinCorrectionFlat_IO Elements module.\n-\"\"\"\n-\n-from pkgutil import extend_path\n-__path__ = extend_path(__path__, __name__)\n-\n-#import the python files which define the external interface of this Elements module\n-from .file_entry_point import *\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_NonLinearity_Flat/python/VIS_NonLinearity_Flat/VIS_NonLinCorrectionFlat_IO/file_entry_point.py": [
                        [
                            "@@ -1,103 +0,0 @@\n-\"\"\"The layer of the Non-linearity Correction (Flat exposures) PE which reads/writes files on disk.\n-\n-This layer should be used by a caller who can supply the file names of input files to be read, and the name of an\n-output file to be written.\n-\n-A corrected copy of the specified input quadrant will be written to the output file.\n-\"\"\"\n-#\n-# Copyright (C) 2012-2023 Euclid Science Ground Segment\n-#\n-# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n-# Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n-# any later version.\n-#\n-# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n-# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n-# details.\n-#\n-# You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n-# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n-#\n-\n-import os.path\n-import numpy as np\n-import json\n-import re #regular expressions\n-from astropy.io import fits\n-\n-import ElementsKernel.Logging as elog\n-\n-import VIS_PyLibrary_M.fits_io_library as fio\n-\n-from ..VIS_NonLinFlat_Removal import non_lin_flat_removal as algo\n-\n-__all__ = ['file_layer_entry_point']\n-\n-\n-def _read_corr_model_file(model_file_name, quad_name):\n-    \"\"\"Read the non-linearity correction model of the specified quadrant from a json file.\n-\n-    Parameters\n-    ----------\n-    model_file_name : string\n-        File name of the json file containing the model which converts non-linear flux to linear flux, where both\n-        are in ADU.  It must contain the quadrant specified by `quad_name`.\n-    quad_name : string\n-        Name of the quadrant whose model shall be read from the file.  It should match a name used inside the file.\n-\n-    Returns\n-    -------\n-    2-D array_like of float\n-        A set of pairs of flux values which convert non-linear flux to linear flux, where both are in ADU.  If there are\n-        N pairs this array's shape is [N][2].  In each pair, index [1] is a non-linear (i.e. observed) flux and [0] is the\n-        corresponding linear (i.e. corrected) flux.\n-    \"\"\"\n-    log = elog.getLogger(__name__)\n-    with open( model_file_name, \"r\") as file:\n-        json_data = json.load(file)\n-    model_points = np.array(json_data[quad_name])\n-    log.info(\"_read_corr_model_file(): Loaded a model with \" + str(len(model_points)) + \" points\")\n-    return model_points\n-\n-def file_layer_entry_point(input_file, model_file, output_file, quadrant_id=None):\n-    \"\"\"Handles the I/O to/from files.  It is a wrapper around the core algorithm.\n-\n-    Parameters\n-    ----------\n-    input_file : string\n-        File name of the input FITS image file to be examined.  It must contain the quadrant specified by\n-        `quadrant_id`.\n-    model_file : string\n-        File name of the json file containing the model (as a set of points) which converts non-linear flux to linear\n-        flux, where both are in ADU.  It must contain the quadrant specified by `quadrant_id`.\n-    output_file : string\n-        Output FITS file name.  If it already exists, only the one corrected quadrant will be modified.  If it does\n-        not already exist, a new output file will be created.\n-    quadrant_id : string or number\n-        Optional name or number of the quadrant to examine.  It should match the EXTNAME in the FITS header of\n-        an image extension in the `input_file`.  Alternatively it can be an integer index of the extension within\n-        the FITS file (usually 1 to 144 in Euclid).  If not supplied, the first image extension is examined.\n-    \"\"\"\n-    log = elog.getLogger(__name__)\n-    log.info(\"file_layer_entry_point(): argument 'input_file' is: \" + str(input_file))\n-    log.info(\"file_layer_entry_point(): argument 'quadrant_id' is: \" + str(quadrant_id))\n-    log.info(\"file_layer_entry_point(): argument 'model_file' is: \" + str(model_file))\n-    log.info(\"file_layer_entry_point(): argument 'output_file' is: \" + str(output_file))\n-    if (quadrant_id is None) or (quadrant_id == \"\"):\n-        quadrant_id = 1 #use the first image extension\n-    elif quadrant_id.isdigit():\n-        quadrant_id = int(quadrant_id)\n-    quad_name = fio.read_ext_name(input_file, quadrant_id)\n-    log.info(\"file_layer_entry_point(): quadrant name (converted) is: \" + str(quad_name))\n-    image = fio.load_single_ext(input_file, quad_name, apply_gain=False)\n-    model_points = _read_corr_model_file(model_file, quad_name)\n-    log.debug(\"file_layer_entry_point(): FITS model points are \" + str(model_points))\n-    output_image = algo.remove_non_lin(image, model_points)\n-    if os.path.isfile(output_file):\n-        log.info(\"file_layer_entry_point(): saving to existing file: \" + output_file)\n-        fio.update_single_ext(output_file, output_image, quad_name, gain=None, apply_gain=False)\n-    else:\n-        log.info(\"file_layer_entry_point(): saving image to new file: \" + output_file)\n-        fio.save_single_ext(output_file, output_image, quad_name, input_file, gain=None, apply_gain=False)\n-    log.info(\"file_layer_entry_point(): end\")\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_NonLinearity_Flat/python/VIS_NonLinearity_Flat/VIS_NonLinCorrectionFlat_Programs/VIS_remove_non_lin_flat.py": [
                        [
                            "@@ -1,68 +0,0 @@\n-\"\"\"Entry point for the Elements program of the Non-linearity Correction PE for a model from flat exposures.\n-\n-The Elements Program name matches the name of this .py file.\n-\"\"\"\n-#\n-# Copyright (C) 2012-2023 Euclid Science Ground Segment\n-#\n-# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n-# Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n-# any later version.\n-#\n-# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n-# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n-# details.\n-#\n-# You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n-# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n-#\n-\n-import ElementsKernel.Logging as elog\n-\n-from ..VIS_NonLinCorrectionFlat_IO import file_entry_point as fep\n-\n-from . import command_line_options as clo\n-from . import identity as this_emod #Id of the Elements module which contains this program\n-\n-__all__ = ['defineSpecificProgramOptions', 'mainMethod', 'cmd_line_entry_point', 'parent_module_name']\n-\n-\n-def defineSpecificProgramOptions():\n-    \"\"\"Standard method required by Elements, defining the options.\"\"\"\n-    return clo.define_cmd_line_options()\n-\n-def mainMethod(args):\n-    \"\"\"Entry point for launching the algorithm with pre-parsed arguments.\n-\n-    Used by Euclid Elements (E-Run for example).\n-\n-    Parameters\n-    ----------\n-    args : argparse.Namespace\n-        Named arguments and their values, as defined in `command_line_options.py`.\n-    \"\"\"\n-    fep.file_layer_entry_point(args.in_image,\n-                               args.in_model,\n-                               args.out_file_name,\n-                               quadrant_id=args.extname)\n-\n-def cmd_line_entry_point(argv):\n-    \"\"\"Entry point for launching the algorithm with command line arguments.\n-\n-    Technically these args could come directly from a command line, or from other Python code such as a unit test.\n-\n-    Parameters\n-    ----------\n-    argv : array_like\n-        An array of arguments in the same format as sys.argv.  The supported arguments are defined\n-        in `command_line_options.py`.\n-    \"\"\"\n-    log = elog.getLogger(__name__)\n-    log.debug(\"cmd_line_entry_point(): argv is \" + str(argv))\n-    parser = clo.define_cmd_line_options()\n-    parsed_args = parser.parse_args(argv[1:])\n-    mainMethod(parsed_args)\n-\n-def parent_module_name():\n-    \"\"\"Returns the name of the Elements module which contains this program.\"\"\"\n-    return this_emod.elements_module_name()\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_NonLinearity_Flat/python/VIS_NonLinearity_Flat/VIS_NonLinCorrectionFlat_Programs/__init__.py": [
                        [
                            "@@ -1,9 +0,0 @@\n-\"\"\"\n-This package contains the VIS_NonLinCorrectionFlat_Programs Elements module.\n-\"\"\"\n-\n-from pkgutil import extend_path\n-__path__ = extend_path(__path__, __name__)\n-\n-#import the python files which define the external interface of this Elements module\n-from .VIS_remove_non_lin_flat import *\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_NonLinearity_Flat/python/VIS_NonLinearity_Flat/VIS_NonLinCorrectionFlat_Programs/command_line_options.py": [
                        [
                            "@@ -1,43 +0,0 @@\n-\"\"\"Defines the command line arguments supported by the Elements program of this PE.\n-\n-For a more general overview of the input and output data, see this project's README.md.\n-\"\"\"\n-#\n-# Copyright (C) 2012-2023 Euclid Science Ground Segment\n-#\n-# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n-# Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n-# any later version.\n-#\n-# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n-# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n-# details.\n-#\n-# You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n-# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n-#\n-\n-import argparse\n-\n-__all__ = ['define_cmd_line_options']\n-\n-\n-def define_cmd_line_options():\n-    \"\"\"Define the command line arguments supported by the VIS_remove_non_lin_flat Elements program.\n-\n-    Returns\n-    -------\n-    argparse.ArgumentParser\n-        A definition of arguments.\n-    \"\"\"\n-    parser = argparse.ArgumentParser()\n-    parser.add_argument('--in_image', type=str,\n-                        help='Input FITS image file name.  It must contain the quadrant to be corrected (--extname).')\n-    parser.add_argument('--in_model', type=str,\n-                        help='Input non-linearity correction model json file name.')\n-    parser.add_argument('--extname', type=str,\n-                        help='(optional) name or number of the quadrant to be corrected (e.g. \"2-1.E\").')\n-    parser.add_argument('--out_file_name', type=str,\n-                        help='Output file name for the corrected quadrant.  It may already exist and contain other ' +\n-                             'quadrants.  If it does not exist, a new file will be created.')\n-    return parser\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_NonLinearity_Flat/python/VIS_NonLinearity_Flat/VIS_NonLinCorrectionFlat_Programs/eclipse_main.py": [
                        [
                            "@@ -1,27 +0,0 @@\n-\"\"\"\n-This is the entry point only for use in Eclipse.  It replaces a similar 'if' statement which was previously\n-in VIS_remove_non_lin_flat.py, but did not work with relative imports (i.e. \"from . import\")).\n-\"\"\"\n-#\n-# Copyright (C) 2012-2023 Euclid Science Ground Segment\n-#\n-# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n-# Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n-# any later version.\n-#\n-# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n-# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n-# details.\n-#\n-# You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n-# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n-#\n-\n-import sys\n-\n-#from . import VIS_remove_non_lin_flat as program  #this does not work in Eclipse\n-import VIS_NonLinearity_Flat.VIS_NonLinCorrectionFlat_Programs.VIS_remove_non_lin_flat as program\n-\n-\n-if __name__ == '__main__':\n-    program.cmd_line_entry_point(sys.argv)\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_NonLinearity_Flat/python/VIS_NonLinearity_Flat/VIS_NonLinCorrectionFlat_Programs/identity.py": [
                        [
                            "@@ -1,20 +0,0 @@\n-\"\"\"Defines the identity of the Elements module which contains it.\n-\"\"\"\n-#\n-# Copyright (C) 2012-2023 Euclid Science Ground Segment\n-#\n-# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\n-# Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\n-# any later version.\n-#\n-# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n-# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n-# details.\n-#\n-# You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\n-# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n-#\n-\n-def elements_module_name():\n-    \"\"\"Returns the name of the Elements module.\"\"\"\n-    return \"VIS_NonLinCorrectionFlat_Programs\"\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_NonLinearity_Flat/python/VIS_NonLinearity_Flat/VIS_NonLinFlat_Removal/__init__.py": [
                        [
                            "@@ -1,9 +0,0 @@\n-\"\"\"\n-This package contains the VIS_NonLinFlat_Removal Elements module.\n-\"\"\"\n-\n-from pkgutil import extend_path\n-__path__ = extend_path(__path__, __name__)\n-\n-#import the python files which define the external interface of this Elements module\n-from .non_lin_flat_removal import *\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_NonLinearity_Flat/python/VIS_NonLinearity_Flat/__init__.py": [
                        [
                            "@@ -1,7 +0,0 @@\n-\"\"\"\n-This package contains the VIS Non-linearity Ccorrection PE which uses a model made from flat\n-exposures (i.e. the Calibration Unit LED).\n-\"\"\"\n-\n-from pkgutil import extend_path\n-__path__ = extend_path(__path__, __name__)\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_Photometry/python/VIS_Photometry/VIS_Calibrate_Photometry.py": [
                        [
                            "@@ -151,6 +151,9 @@ def get_zeropoint(catref_file, catmes_file, exp_time, logdir):\n              smp.add_ext( hdu)\n              ### Filtering VIS sources\n              mask = (catmes_data['SNR_WIN'] > 100) & (np.abs(catmes_data['SPREAD_MODEL']) < 0.005) & (catmes_data['ELLIPTICITY'] < 0.05) & (catmes_data['FLAGS'] == 0)\n+             if mask.sum() == 0:\n+               ## No need to continue in the loop\n+               continue\n              ### Fill in the dqc table\n              dqc_data = catmes_data[mask]\n              aper_cor_dqc_row = dict()\n@@ -190,6 +193,9 @@ def get_zeropoint(catref_file, catmes_file, exp_time, logdir):\n              ######\n \n              magref_matched  = magref_assoc[ dist_arcsec_abs < tol ]\n+             if len(magref_matched) < 3:\n+               # Not enough matched sources\n+               continue\n              ra_vis_matched  = ra_vis[ dist_arcsec_abs < tol ]\n              dec_vis_matched = dec_vis[ dist_arcsec_abs < tol ]\n              x_vis_matched   = x_vis[ dist_arcsec_abs < tol ]\n@@ -216,6 +222,9 @@ def get_zeropoint(catref_file, catmes_file, exp_time, logdir):\n \n         hdulist.close()\n \n+    if len(zero_point_dqc) == 0:\n+      return(-1)\n+\n     # write spread_model plot\n     try: # failsafe mode\n       expid = visdef.get_expid_from_filename( catmes_file)\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_SourceExtraction/python/VIS_SourceExtraction/VIS_extract_sources.py": [
                        [
                            "@@ -49,7 +49,7 @@ def defineSpecificProgramOptions():\n   parser.add_argument( \"--OUTPUT_CAT\", required=True, help=\"name of the output catalog\")\n   parser.add_argument( \"--FLAGS\",      help=\"name of the flags map, mandatory, will be updated with OBJECTS check-image\")\n   parser.add_argument( \"--WEIGHT\",     help=\"name of the weight map, optional\")\n-  parser.add_argument( \"--tmpdir\",     help=\"directory where default sextractor parameter and conf files are written\")\n+  parser.add_argument( \"--tmpdir\",     help=\"deprecated and ignored, now automatically generated - directory where default sextractor parameter and conf files are written\")\n   return parser\n \n \n@@ -67,7 +67,11 @@ def mainMethod(args):\n   inflagmap = args.FLAGS\n   inweight = args.WEIGHT\n   workdir = args.workdir\n-  tmpdir = args.tmpdir + '/'\n+\n+  # tmpdir must be used an unique, we build it from the exposure name\n+  # actual arg.tmpdir argument value is ignored\n+  tmpdir = os.path.basename( args.FITS_INPUT) + \".sexconf\"\n+  os.mkdir( tmpdir)\n \n   #Arguments given in input of the command for SExtractor\n   if (image[-5:] == \".fits\"):\n@@ -166,6 +170,12 @@ def mainMethod(args):\n     os.remove( inflagmap)\n     os.rename( temp_flagmap, inflagmap)\n \n+  # remove SExtractor configuration temporary directory\n+  try:\n+    shutil.rmtree( tmpdir)\n+  except:\n+    pass\n+\n   logger.info( \"#\")\n   logger.info( \"# Exiting %s mainMethod()\", __name__)\n   logger.info( \"#\")\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_Tasks_Common/python/VIS_Tasks_Common/Modules.py": [
                        [
                            "@@ -172,12 +172,13 @@ def CorrectDark( config, infile, outfile):\n \n     logger.debug( f\"CorrectDark() Output: {outfile}\")\n \n-def CorrectNonLin( config, infile, outfile, quad_name):\n+def CorrectNonLin( config, config_filename, infile, outfile, quad_name):\n \n     workdir = config.get( \"General\", \"workdir\")\n     nlcorr_model = os.path.join( workdir, config.get( \"CalibDataProducts\", \"nlcorr_model\"))\n     non_lin_cor_io.file_layer_entry_point(infile,\n                                           nlcorr_model,\n+                                          config_filename,\n                                           outfile,\n                                           quad_name)\n \n@@ -388,7 +389,7 @@ def Calibrate_Astrometry(config, section, workdir, catalog, star_file, distormod\n            logger.error(f\"Astrometry subprocess error code: {cpe}\")\n            raise\n \n-def Wcsfit(config, catalogue, star_file, exp_list, plot_dir=None):\n+def Wcsfit(config, catalogue, star_file, exp_list, exptime, plot_dir=None):\n \n     # Populate command line for runwcsfit module\n     cmdline  = f\"use-fpa-model \"\n@@ -399,7 +400,7 @@ def Wcsfit(config, catalogue, star_file, exp_list, plot_dir=None):\n     cmdline += f\"--target-precision 3 \"\n     cmdline += f\"--niter 3 \"\n     cmdline += f\"--refmagcol VIS \"\n-    cmdline += f\"--refmagmin 18.5 \"\n+    cmdline += f\"--refmagmin {18.5 + 2.5 * np.log10(exptime / 565.0)} \"\n     cmdline += f\"--refmagmax 22.0 \"\n     cmdline += f\"--writeto {' '.join(map(str, exp_list))} {catalogue} \"\n     cmdline += f\"--loglevel debug \"\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ],
                        [
                            "@@ -389,7 +389,7 @@ def Calibrate_Astrometry(config, section, workdir, catalog, star_file, distormod\n            logger.error(f\"Astrometry subprocess error code: {cpe}\")\n            raise\n \n-def Wcsfit(config, catalogue, star_file, exp_list, plot_dir=None):\n+def Wcsfit(config, catalogue, star_file, exp_list, exptime, plot_dir=None):\n \n     # Populate command line for runwcsfit module\n     cmdline  = f\"use-fpa-model \"\n@@ -400,7 +400,7 @@ def Wcsfit(config, catalogue, star_file, exp_list, plot_dir=None):\n     cmdline += f\"--target-precision 3 \"\n     cmdline += f\"--niter 3 \"\n     cmdline += f\"--refmagcol VIS \"\n-    cmdline += f\"--refmagmin 18.5 \"\n+    cmdline += f\"--refmagmin {18.5 + 2.5 * np.log10(exptime / 565.0)} \"\n     cmdline += f\"--refmagmax 22.0 \"\n     cmdline += f\"--writeto {' '.join(map(str, exp_list))} {catalogue} \"\n     cmdline += f\"--loglevel debug \"\n",
                            "Merge branch 'release-13.0' into develop: #23191 Astrometric calibration magnitude range selection",
                            "Catherine Grenet",
                            "2023-08-03T10:47:54.000+02:00",
                            "05560a54e12c030014d3ebef656d0296a5aa9c55"
                        ],
                        [
                            "@@ -389,7 +389,7 @@ def Calibrate_Astrometry(config, section, workdir, catalog, star_file, distormod\n            logger.error(f\"Astrometry subprocess error code: {cpe}\")\n            raise\n \n-def Wcsfit(config, catalogue, star_file, exp_list, plot_dir=None):\n+def Wcsfit(config, catalogue, star_file, exp_list, exptime, plot_dir=None):\n \n     # Populate command line for runwcsfit module\n     cmdline  = f\"use-fpa-model \"\n@@ -400,7 +400,7 @@ def Wcsfit(config, catalogue, star_file, exp_list, plot_dir=None):\n     cmdline += f\"--target-precision 3 \"\n     cmdline += f\"--niter 3 \"\n     cmdline += f\"--refmagcol VIS \"\n-    cmdline += f\"--refmagmin 18.5 \"\n+    cmdline += f\"--refmagmin {18.5 + 2.5 * np.log10(exptime / 565.0)} \"\n     cmdline += f\"--refmagmax 22.0 \"\n     cmdline += f\"--writeto {' '.join(map(str, exp_list))} {catalogue} \"\n     cmdline += f\"--loglevel debug \"\n",
                            "Merge branch 'feature-23191-mag_range_selection' into release-13.0",
                            "Catherine Grenet",
                            "2023-08-03T10:39:55.000+02:00",
                            "0b587c0533c886756f0604676a4f0076e3c780d9"
                        ]
                    ],
                    "VIS_Tasks_Common/tests/python/FromToXML_test.py": [
                        [
                            "@@ -279,7 +279,8 @@ class TestFromToXML(object):\n \n         # Create input data\n         filename = \"CalibratedExp.fits\"\n-        fits = fitsio.FITS(filename, 'rw', ignore_empty=True)\n+        if os.path.exists(filename): os.remove(filename)\n+        fits = fitsio.FITS(filename, 'rw')\n         nccds = 4\n         naxis1 = 4\n         naxis2 = 5\n@@ -375,8 +376,13 @@ class TestFromToXML(object):\n         spatial_footprint = DmUtils.create_spatial_footprint_from_header_list(ext_header_list, 5)\n         fits.close()\n \n+        raw_meta = {\n+          \"DpdVisRawFrame_ProductID\": \"rawpid\",\n+          \"dp.Data.ObservationSequence.CalblockId\": \"cbid\",\n+          \"dp.Data.ObservationSequence.CalblockVariant\": \"cbvar\"\n+        }\n         dp = FromToXML.calib_exp_dp(os.path.abspath(filename), \"prnu.fits\", \"psf.fits\", \"background.fits\", \"weight.fits\",\n-                                    raw_frame_id=FromToXML.UNKNOWN_STRING)\n+                                    raw_meta=raw_meta)\n         DmUtils.save_product_metadata( dp, dp.Header.ProductType + \"_test.xml\")\n \n         assert DmUtils.validate(dp)\n@@ -399,7 +405,7 @@ class TestFromToXML(object):\n         assert data.Instrument.InstrumentName == \"VIS\"\n         assert data.Instrument.TelescopeName == \"Euclid\"\n         assert data.Filter.Name == \"VIS\"\n-#        assert data.InputRawFrameReference.ProductID == FromToXML.UNKNOWN_STRING\n+        assert data.InputRawFrameReference.ProductID.value() == \"rawpid\"\n         assert data.InputRawFrameReference.ProductType == \"DpdVisRawFrame\"\n \n         ### assert data.ImgSpatialFootprint.Polygon == spatial_footprint.Polygon\n@@ -413,6 +419,8 @@ class TestFromToXML(object):\n         assert data.ObservationSequence.PointingId == pri_header[\"PTGID\"]\n         assert data.ObservationSequence.Exposure == pri_header[\"EXPNUM\"]\n         assert data.ObservationSequence.TotalExposure == pri_header[\"TOTEXP\"]\n+        assert data.ObservationSequence.CalblockId == \"cbid\"\n+        assert data.ObservationSequence.CalblockVariant == \"cbvar\"\n         assert data.InstrumentMode == \"Science\"\n         assert data.CommandedFPAPointing.RA == pri_header[\"RA\"]\n         assert data.CommandedFPAPointing.Dec == pri_header[\"DEC\"]\n@@ -500,7 +508,8 @@ class TestFromToXML(object):\n         date_obs_start = \"1997-05-24T11:40:24.802000Z\"\n         date_obs_end = \"1998-05-24T11:40:24.802000Z\"\n         obsid = 52929\n-        dp = FromToXML.stack_dp(os.path.abspath(filename), \"WIDE\", obsid,\n+        calblock_id = \"PV-001\"\n+        dp = FromToXML.stack_dp(os.path.abspath(filename), \"WIDE\", obsid, calblock_id,\n                                 \"psf.fits\", \"background.fits\", \"weight.fits\")\n         DmUtils.save_product_metadata( dp, dp.Header.ProductType + \"_test.xml\")\n \n@@ -551,6 +560,7 @@ class TestFromToXML(object):\n         assert data.BackgroundStorage.DataContainer.FileName == \"background.fits\"\n         assert data.WeightStorage.DataContainer.FileName == \"weight.fits\"\n         assert data.DataStorage.DataContainer.FileName == filename\n+        assert data.CalblockId == calblock_id\n \n         # delete test files\n         os.remove( dp.Header.ProductType + \"_test.xml\")\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_Tasks_M/auxdir/VIS_Tasks_M/EUC_VIS_PPR-SC8_00_20210423T163838.815652Z.ini": [
                        [
                            "@@ -127,6 +127,8 @@ ReferenceGain = 3.48\n ;-------------------------------------------------------------------------------\n [CorrectNonLinearity]\n invNLmodel = invNonLinearityModel_Sim_CCD273.txt\n+; When correcting data, model data points (from json file) below this value are not used (ADU).  The value must be >= 0.\n+linear_up_to_adu = 300\n \n \n ;-------------------------------------------------------------------------------\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_process_astro_field.py": [
                        [
                            "@@ -129,11 +129,15 @@ def mainMethod(args):\n         else:\n             # run wcsfit in 'use-fpa-model' mode to copy distmodel to headers and reconstruct pointing\n             for catalogue, exposure in zip( catalog_list, exposure_list):\n+                # Open the catalog to find exposure duration (EXPTIME in #HDU 0)\n+                with fits.open(catalogue, mode='readonly',  memmap=False) as hdul:\n+                    exptime = hdul[0].header[\"EXPTIME\"]\n                 logger.info (\"==> Performing Wcsfit run on %s...\", catalogue)\n                 Modules.Wcsfit( config,\n                                 catalogue,\n                                 reference_starcat,\n                                 headers_to_update( exposure),\n+                                exptime,\n                                 os.path.join( visdef.logdir_name( args.logdir), visdiags.DIAGDIR))\n \n     # write output lists to JSON files\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_process_quad.py": [
                        [
                            "@@ -140,7 +140,7 @@ def mainMethod(args):\n     # get visible pixel indices\n     xmin, xmax, ymin, ymax = FPA_quadrant.get_quadrant_real_pixels( mef_hdul[1])\n \n-    \n+\n     # get an objects_mask flagmap if one available\n     objmask_cfg_section = f\"object_mask_ObsId-{prim_hdr['OBS_ID']}-PointingId-{prim_hdr['PTGID']}\"\n     objmask_name = None\n@@ -148,7 +148,7 @@ def mainMethod(args):\n       objmask_name = config.get( objmask_cfg_section, \"flagmap_FITS\")\n       flagmap_list.append( os.path.join( DATADIR, objmask_name))\n       logger.info( f\"found {objmask_name} to mask objects in {args.raw_exp_in}\")\n-    \n+\n     for hdu_in in mef_hdul[1:]:\n       # read quadrant extension from MEF\n       quad_dat = hdu_in.data.astype( \"float32\")\n@@ -271,7 +271,7 @@ def mainMethod(args):\n       outfile = out_prefix # eg. /workdir/EUC_VIS_EXP_052929_01.fits\n       logger.info( \"==> Processing \" + os.path.basename( outfile + dot_ext))\n \n-       \n+\n       # Flag saturated pixels\n       if config.has_option('CalibDataProducts', 'saturation_model'):\n         infile = outfile\n@@ -293,8 +293,8 @@ def mainMethod(args):\n           os.remove( infile + dot_ext)\n       else:\n         logger.info( \"### Saturated pixels flagging deactivated in \" + args.config)\n-        \n-    \n+\n+\n     # Correct XTalk\n     # all quadrants of a block must be in the same processing state to correct XTalk\n     if config.has_option('CalibDataProducts', 'xtalk_model'):\n@@ -309,7 +309,7 @@ def mainMethod(args):\n         os.remove( infile + dot_ext)\n     else:\n       logger.info( \"### CrossTalk correction deactivated in \" + args.config)\n-    \n+\n     processed_quad_fits = list()\n     processed_quad_flg_fits = list()\n     outfile_init = outfile\n@@ -349,7 +349,7 @@ def mainMethod(args):\n       if config.has_option('CalibDataProducts', 'nlcorr_model'):\n         infile = outfile\n         outfile = infile + '_nl' # eg. /workdir/EUC_VIS_EXP_052929_01.fits_sa_xt_bs_nl\n-        CorrectNonLin( config, infile + dot_ext, outfile + dot_ext, quad_name)\n+        CorrectNonLin( config, args.config, infile + dot_ext, outfile + dot_ext, quad_name)\n         logger.info( f\"==> CorrectNonLin done on {quad_name} ({iquad+1}/{len( qnames)})\")\n         if rm_tmpfiles:\n           os.remove( infile + dot_ext)\n@@ -381,33 +381,33 @@ def mainMethod(args):\n #        if rm_tmpfiles:\n #          os.remove( infile + dot_ext)\n \n-      # Cosmics      \n-      logger.info(f\"flagmap before Cosmics is : {flg_file}\")      \n-      \n+      # Cosmics\n+      logger.info(f\"flagmap before Cosmics is : {flg_file}\")\n+\n       start_time = time.time()\n       if config.getboolean('General', 'FlagCosmics') == True:\n         infile = outfile\n         # This processing step does not modify the input image\n         # hence, we do directly : outfile = infile\n         outfile = infile\n-        Cosmics( config, quad_name, infile + dot_ext, flg_file + dot_ext)        \n+        Cosmics( config, quad_name, infile + dot_ext, flg_file + dot_ext)\n         outfile = infile\n         logger.info(f\"outfile after Cosmics is : {outfile+dot_ext}\")\n         logger.info(f\"flagmap after Cosmics is : {flg_file+dot_ext}\")\n         logger.info( f\"==> Cosmics flagged in {quad_name} ({iquad+1}/{len( qnames)})\")\n       else:\n         logger.info( \"### Cosmics flagging deactivated in \" + args.config)\n-      \n+\n       end_time = time.time()\n       total_time = end_time - start_time\n       logger.info(f\"Flagging of CR takes {total_time} seconds\")\n-      \n+\n       # Correct Brighter-Fatter\n       if config.has_option('CalibDataProducts', 'bfe_model'):\n         infile = outfile\n         outfile = infile + '_bfe' # eg. /workdir/EUC_VIS_EXP_052929_01.fits_sa_xt_bs_nl_cti_bfe\n-        BrighterFatter_correction(infile + dot_ext, flg_file + dot_ext, \n-                                  bfe_kernels_dict[quad_name], quad_name, config.getfloat( \"GainPerQuad\", quad_name), \n+        BrighterFatter_correction(infile + dot_ext, flg_file + dot_ext,\n+                                  bfe_kernels_dict[quad_name], quad_name, config.getfloat( \"GainPerQuad\", quad_name),\n                                   outfile + dot_ext)\n         logger.info( f\"==> CorrectBFE done on {quad_name} ({iquad+1}/{len( qnames)})\")\n         if rm_tmpfiles:\n@@ -428,7 +428,7 @@ def mainMethod(args):\n           os.remove( infile + dot_ext)\n       else:\n         logger.info( \"### Pre/Overscan pixels removal deactivated in \" + args.config)\n-        \n+\n       # Correct flat field\n       if config.has_option('CalibDataProducts', 'master_flat'):\n         infile = outfile\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_science_xml_out.py": [
                        [
                            "@@ -379,7 +379,7 @@ def mainMethod(args):\n                                                    euc_psf_file,\n                                                    euc_bkg_file,\n                                                    euc_wgt_file,\n-                                                   raw_frame_id = raw_frame_ids[-1])\n+                                                   raw_meta = exposure_config_section)\n         # Spatial footprint observation sequence and observation date will be needed for single exposure catalog\n         spatial_footprint = vis_cal_frame_dp.Data.ImgSpatialFootprint\n         observation_sequence = vis_cal_frame_dp.Data.ObservationSequence\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_xml_in.py": [
                        [
                            "@@ -373,6 +373,10 @@ def mainMethod(args):\n     config.set( raw_frame_section, \"Header.CreationDate\",    dp.Header.CreationDate)\n     config.set( raw_frame_section, \"Data.ImgType.Category\",  dp.Data.ImgType.Category)\n     config.set( raw_frame_section, \"Data.ImgType.FirstType\", dp.Data.ImgType.FirstType)\n+    if hasattr( dp.Data.ObservationSequence, \"CalblockId\"):\n+      config.set( raw_frame_section, \"dp.Data.ObservationSequence.CalblockId\", dp.Data.ObservationSequence.CalblockId)\n+    if hasattr( dp.Data.ObservationSequence, \"CalblockVariant\"):\n+      config.set( raw_frame_section, \"dp.Data.ObservationSequence.CalblockVariant\", dp.Data.ObservationSequence.CalblockVariant)\n     if dp.Data.ImgType.FirstType == \"FLAT\":\n       for hkey in (\"CULEDMSK\", \"CULEDDUR\"):\n         config.set( raw_frame_section, hkey, primhdr[hkey])\n@@ -436,6 +440,17 @@ def mainMethod(args):\n     # prevent cosmic ray detections in the case of the masterflat pipeline\n     config.set('General', 'FlagCosmics', 'False')\n \n+  if args.pipeline_name == \"VIS_GainCalibration\":\n+    if calibration_type != \"FLAT\":\n+      raise Exception(\n+          f\"calibration type '{calibration_type}' does not match FLAT\"\n+      )\n+    job_max_quad = config.getint('MasterFlat', 'QuadrantsPerJob')\n+    # prevent the gain equalisation in the case of the masterflat pipeline\n+    config.remove_section('GainEqualisation')\n+    # prevent cosmic ray detections in the case of the masterflat pipeline\n+    config.set('General', 'FlagCosmics', 'False')\n+\n   if args.pipeline_name == \"VIS_PTCNLCalibration\":\n     if calibration_type != \"FLAT\":\n       raise Exception(\n@@ -609,6 +624,8 @@ def mainMethod(args):\n     refcat_filename = os.path.join( science_xml_in_dir, 'Master_Ref_Cat.fits')\n     cat_ra, cat_dec = merge_catalogues( cat_xml_list, refcat_filename)\n     config.set( \"General\", \"star_catalogue\", refcat_filename)\n+  else:\n+    cat_ra = cat_dec = None\n \n   # put other \"standard\" model file names in config CalibDataProducts section\n   put_model_filename_in_config( config, args.zero_point,     \"zero_point\")\n",
                            "Merge branch 'release-13.0' into cti_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:30:08.000+02:00",
                            "df2c258e051e47c7c94220f589a2e061dce4dafc"
                        ],
                        [
                            "@@ -373,6 +373,10 @@ def mainMethod(args):\n     config.set( raw_frame_section, \"Header.CreationDate\",    dp.Header.CreationDate)\n     config.set( raw_frame_section, \"Data.ImgType.Category\",  dp.Data.ImgType.Category)\n     config.set( raw_frame_section, \"Data.ImgType.FirstType\", dp.Data.ImgType.FirstType)\n+    if hasattr( dp.Data.ObservationSequence, \"CalblockId\"):\n+      config.set( raw_frame_section, \"dp.Data.ObservationSequence.CalblockId\", dp.Data.ObservationSequence.CalblockId)\n+    if hasattr( dp.Data.ObservationSequence, \"CalblockVariant\"):\n+      config.set( raw_frame_section, \"dp.Data.ObservationSequence.CalblockVariant\", dp.Data.ObservationSequence.CalblockVariant)\n     if dp.Data.ImgType.FirstType == \"FLAT\":\n       for hkey in (\"CULEDMSK\", \"CULEDDUR\"):\n         config.set( raw_frame_section, hkey, primhdr[hkey])\n",
                            "Merge branch 'release-13.0' into develop: Fixes bugs #20505, 23168, 23190, 23265",
                            "Catherine Grenet",
                            "2023-08-07T12:19:04.000+02:00",
                            "f112799d015cdc323c99ef638e7027ad8decb28e"
                        ],
                        [
                            "@@ -373,6 +373,10 @@ def mainMethod(args):\n     config.set( raw_frame_section, \"Header.CreationDate\",    dp.Header.CreationDate)\n     config.set( raw_frame_section, \"Data.ImgType.Category\",  dp.Data.ImgType.Category)\n     config.set( raw_frame_section, \"Data.ImgType.FirstType\", dp.Data.ImgType.FirstType)\n+    if hasattr( dp.Data.ObservationSequence, \"CalblockId\"):\n+      config.set( raw_frame_section, \"dp.Data.ObservationSequence.CalblockId\", dp.Data.ObservationSequence.CalblockId)\n+    if hasattr( dp.Data.ObservationSequence, \"CalblockVariant\"):\n+      config.set( raw_frame_section, \"dp.Data.ObservationSequence.CalblockVariant\", dp.Data.ObservationSequence.CalblockVariant)\n     if dp.Data.ImgType.FirstType == \"FLAT\":\n       for hkey in (\"CULEDMSK\", \"CULEDDUR\"):\n         config.set( raw_frame_section, hkey, primhdr[hkey])\n",
                            "Merge branch 'hotfix_20505_calblockid' into 'release-13.0'",
                            "Catherine Grenet",
                            "2023-08-07T08:55:33.000+00:00",
                            "e1c03bd819fe3602af68ac1eb28cae693b4e3563"
                        ],
                        [
                            "@@ -373,6 +373,10 @@ def mainMethod(args):\n     config.set( raw_frame_section, \"Header.CreationDate\",    dp.Header.CreationDate)\n     config.set( raw_frame_section, \"Data.ImgType.Category\",  dp.Data.ImgType.Category)\n     config.set( raw_frame_section, \"Data.ImgType.FirstType\", dp.Data.ImgType.FirstType)\n+    if hasattr( dp.Data.ObservationSequence, \"CalblockId\"):\n+      config.set( raw_frame_section, \"dp.Data.ObservationSequence.CalblockId\", dp.Data.ObservationSequence.CalblockId)\n+    if hasattr( dp.Data.ObservationSequence, \"CalblockVariant\"):\n+      config.set( raw_frame_section, \"dp.Data.ObservationSequence.CalblockVariant\", dp.Data.ObservationSequence.CalblockVariant)\n     if dp.Data.ImgType.FirstType == \"FLAT\":\n       for hkey in (\"CULEDMSK\", \"CULEDDUR\"):\n         config.set( raw_frame_section, hkey, primhdr[hkey])\n",
                            "fix issue #20505: CalblockId not copied in VIS output products",
                            "Sylvain Mottet",
                            "2023-08-06T22:20:00.000+02:00",
                            "644af87977aafe2c2c9ee8c5b7229666b141010e"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_cti_master_ci_xml_out.py": [
                        [
                            "@@ -94,7 +94,7 @@ def mainMethod( args):\n   nhdu = fits[-1].get_extnum()\r\n   header = fits[1].read_header()\r\n \r\n-  data.ImgType = create_img_type(\"CALIB\", \"CHARGE-INJECTION\", \"OTHER\", \"CALIBRATION\")\r\n+  data.ImgType = create_img_type(\"CALIB\", \"CHARGE_INJECTION\", \"OTHER\", \"CALIBRATION\")\r\n   data.ImgArea = img_stub.imgArea(Name=\"QUADRANT\")\r\n   data.ImgNumber = nhdu\r\n   data.AxisNumber = header[\"NAXIS\"]\r\n",
                            "fixing VIS_cti_master_ci_xml_out",
                            "James Nightingale",
                            "2023-08-07T15:29:33.000+02:00",
                            "fffd7b0a57ad9e3aeb435059ab42a9bc4250b0a5"
                        ],
                        [
                            "@@ -8,7 +8,9 @@\n import argparse\r\n import os\r\n import fitsio\r\n+import json\r\n from pathlib import Path\r\n+import shutil\r\n from typing import Union\r\n \r\n \r\n@@ -69,10 +71,14 @@ def mainMethod( args):\n   out_dir = os.path.split(args.master_ci_xml_out )[0]\r\n   os.makedirs(out_dir, exist_ok=True)\r\n \r\n-  print(args.cti_master_ci_list)\r\n-  print(args.master_ci_xml_out)\r\n-  print(out_dir)\r\n-  dfsdsdf\r\n+  with open(args.cti_master_ci_list, \"r\") as f:\r\n+    master_ci_filename_fits = json.load(f)\r\n+\r\n+  workdir_master_path = os.path.join(args.workdir, master_ci_filename_fits)\r\n+  data_path = os.path.join(args.workdir, \"data\")\r\n+  shutil.copy(workdir_master_path, data_path)\r\n+\r\n+  master_ci_data_path_fits = os.path.join(data_path, master_ci_filename_fits)\r\n \r\n   # Create the data product\r\n   data_product = vismasterciframe_stub.DpdVisMasterCIFrame()\r\n@@ -83,10 +89,8 @@ def mainMethod( args):\n   # Add Data\r\n   data = vis_stub.visMasterCIFrame.Factory()\r\n \r\n-  fits_file = \"placeholder.fits\"\r\n-\r\n   # Open the FITS file\r\n-  fits = fitsio.FITS(fits_file, 'r')\r\n+  fits = fitsio.FITS(master_ci_data_path_fits, 'r')\r\n   nhdu = fits[-1].get_extnum()\r\n   header = fits[1].read_header()\r\n \r\n@@ -102,7 +106,8 @@ def mainMethod( args):\n   # DataStorage\r\n   data.DataStorage = DmUtils.create_fits_storage(\r\n     vis_stub.visMasterCIStorageFitsFile,\r\n-    os.path.basename(fits_file), \"vis.masterCI\", \"0.1\")\r\n+    os.path.basename(master_ci_filename_fits), \"vis.masterCI\", \"0.1\"\r\n+  )\r\n \r\n   fits.close()\r\n \r\n",
                            "VIS_cti_master_ci_xml_out implemented but needs debugging",
                            "James Nightingale",
                            "2023-08-07T13:11:43.000+01:00",
                            "d47ac3fc10f54fb68dad693a1af4078af161434e"
                        ],
                        [
                            "@@ -69,6 +69,7 @@ def mainMethod( args):\n   out_dir = os.path.split(args.master_ci_xml_out )[0]\r\n   os.makedirs(out_dir, exist_ok=True)\r\n \r\n+  print(args.cti_master_ci_list)\r\n   print(args.master_ci_xml_out)\r\n   print(out_dir)\r\n   dfsdsdf\r\n",
                            "another print",
                            "James Nightingale",
                            "2023-08-07T13:01:49.000+01:00",
                            "15e1b6dd5e5211785808741c78bce437491cacf2"
                        ],
                        [
                            "@@ -69,6 +69,7 @@ def mainMethod( args):\n   out_dir = os.path.split(args.master_ci_xml_out )[0]\r\n   os.makedirs(out_dir, exist_ok=True)\r\n \r\n+  print(args.master_ci_xml_out)\r\n   print(out_dir)\r\n   dfsdsdf\r\n \r\n",
                            "extra print statement debugging master_ci",
                            "James Nightingale",
                            "2023-08-07T13:00:14.000+01:00",
                            "87f02bd440f7440843651c55f3c9b454b77a7ca6"
                        ],
                        [
                            "@@ -69,6 +69,9 @@ def mainMethod( args):\n   out_dir = os.path.split(args.master_ci_xml_out )[0]\r\n   os.makedirs(out_dir, exist_ok=True)\r\n \r\n+  print(out_dir)\r\n+  dfsdsdf\r\n+\r\n   # Create the data product\r\n   data_product = vismasterciframe_stub.DpdVisMasterCIFrame()\r\n \r\n",
                            "VIS_cti_master_ci_out",
                            "James Nightingale",
                            "2023-08-07T12:10:05.000+01:00",
                            "2f5e083697e5f00a06a4daaad959c8b26d8fb1e9"
                        ]
                    ],
                    "VIS_Tasks_M/CMakeLists.txt": [
                        [
                            "@@ -71,6 +71,7 @@ elements_add_python_program(VIS_process_flat_quad VIS_Tasks_M.VIS_process_flat_q\n elements_add_python_program(VIS_process_dark_quad VIS_Tasks_M.VIS_process_dark_quad)\n elements_add_python_program(VIS_calib_xml_out VIS_Tasks_M.VIS_calib_xml_out)\n elements_add_python_program(VIS_cti_xml_out VIS_Tasks_M.VIS_cti_xml_out)\n+elements_add_python_program(VIS_cti_master_ci_xml_out VIS_Tasks_M.VIS_cti_master_ci_xml_out)\n elements_add_python_program(VIS_science_xml_out VIS_Tasks_M.VIS_science_xml_out)\n elements_add_python_program(VIS_xml_in VIS_Tasks_M.VIS_xml_in)\n elements_add_python_program(VIS_process_extract_exp VIS_Tasks_M.VIS_process_extract_exp)\n",
                            "add VIS_cti_master_ci_xml_out to CmakeList.txt",
                            "James Nightingale",
                            "2023-08-07T12:28:05.000+01:00",
                            "6b2ed52553cbc30baac69d60cbcad29fed019603"
                        ],
                        [
                            "@@ -81,7 +81,6 @@ elements_add_python_program(VIS_Astrometry_calib VIS_Tasks_M.VIS_Astrometry_cali\n elements_add_python_program(VIS_PSF_calib VIS_Tasks_M.VIS_PSF_calib)\n elements_add_python_program(VIS_LargeFlat_calib VIS_Tasks_M.VIS_LargeFlat_calib)\n elements_add_python_program(VIS_CTI_Calibration VIS_Tasks_M.VIS_CTI_Calibration)\n-elements_add_python_program(VIS_CTI_Data_Visualize VIS_Tasks_M.VIS_CTI_Data_Visualize)\n elements_add_python_program(VIS_CTI_Master_CI VIS_Tasks_M.VIS_CTI_Master_CI)\n elements_add_python_program(VIS_process_astro_field_largeflat VIS_Tasks_M.VIS_process_astro_field_largeflat)\n elements_add_python_program(VIS_gain_calib VIS_Tasks_M.VIS_gain_calib)\n",
                            "VIS_cti_master_ci_out",
                            "James Nightingale",
                            "2023-08-07T12:10:05.000+01:00",
                            "2f5e083697e5f00a06a4daaad959c8b26d8fb1e9"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_CTI_Data_Visualize.py": [
                        [
                            "@@ -1,175 +0,0 @@\n-# Copyright (C) 2012-2020 Euclid Science Ground Segment\r\n-#\r\n-# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\r\n-# Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)\r\n-# any later version.\r\n-#\r\n-# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\r\n-# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\r\n-# details.\r\n-#\r\n-# You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\r\n-# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\r\n-#\r\n-import argparse\r\n-import os\r\n-import sys\r\n-\r\n-if sys.version_info[0] < 3:\r\n-    from ConfigParser import RawConfigParser\r\n-else:\r\n-    from configparser import RawConfigParser\r\n-import shutil\r\n-\r\n-# Euclid specific imports\r\n-import ElementsKernel.Logging as log\r\n-from astropy.io import fits\r\n-import numpy as np\r\n-import re\r\n-\r\n-# Local imports\r\n-from VIS_PyLibrary_Common import pe_run_information\r\n-\r\n-from VIS_Tasks_Common.FromToXML import read_json, write_json\r\n-from VIS_PyLibrary_Common import pipe_tools\r\n-\r\n-# initialise global logger\r\n-import ElementsKernel.Logging\r\n-\r\n-logger = ElementsKernel.Logging.getLogger(__name__)\r\n-\r\n-\r\n-def defineSpecificProgramOptions():\r\n-    \"\"\"\r\n-    @brief Allows to define the (command line and configuration file) options\r\n-    specific to this program\r\n-\r\n-    @details\r\n-    See the Elements documentation for more details.\r\n-    @return\r\n-    An  ArgumentParser.\r\n-    \"\"\"\r\n-\r\n-    # Inputs\r\n-    parser = argparse.ArgumentParser()\r\n-\r\n-    parser.add_argument(\"--workdir\", type=str, help=\"absolute path to the workdir\")\r\n-    parser.add_argument(\r\n-        \"--logdir\", type=str, help=\"path to the logdir, relative to the workdir\"\r\n-    )\r\n-    parser.add_argument(\"--config\", type=str, help=\"configuration file path\")\r\n-    parser.add_argument(\"--input_quads\", type=str)\r\n-    # Outputs\r\n-    parser.add_argument(\"--visualize_output\", type=str, help=\"Visualize json file\")\r\n-\r\n-    return parser\r\n-\r\n-\r\n-def mainMethod(args):\r\n-\r\n-    logger.info(\"#\")\r\n-    logger.info(\"# Entering %s mainMethod()\" % __name__)\r\n-    logger.info(\"# command line: \" + pipe_tools.get_erun_commandline())\r\n-    pipe_tools.log_task_environment(logger)\r\n-    logger.info(\"#\")\r\n-\r\n-    logdir = os.path.join(args.workdir, args.logdir)\r\n-    config_filename = os.path.join(args.workdir, args.config)\r\n-    input_quads = os.path.join(args.workdir, args.input_quads)\r\n-    visualize_output_name = os.path.join(args.workdir, args.visualize_output)\r\n-\r\n-    logger.info(\"ccdlistname: \" + visualize_output_name)\r\n-\r\n-    # Check that configuration file exists\r\n-    if os.path.isfile(config_filename) == False:\r\n-        logger.error(\"%s does not exist or is not readable\", config_filename)\r\n-        exit(1)\r\n-    # Instantiate the configuration file parser\r\n-    config = RawConfigParser()\r\n-    # Make it case-sensitive for parameter names\r\n-    config.optionxform = str\r\n-    # Open the configuration file\r\n-    config.read(config_filename)\r\n-\r\n-    # Set up logger\r\n-    logger.setLevel(\"DEBUG\")\r\n-\r\n-    logger.info(input_quads)\r\n-\r\n-    # Read parameters from config file\r\n-    # initialise PERunInformation dictionary for Data Quality Control\r\n-    # To be done later.\r\n-    peri = dict()\r\n-\r\n-    # Load quad name files.\r\n-    # NOTE: This is NOT 8*144 yet but 8 files/tuplelist.  These 8 files contain the 144 quads\r\n-    # I thin because of how we defined it in IAL Pip/Pkg these 8 files are in a file as a list of list\r\n-    # Basically a list of 8x1 where 1 is the file name.  Probably could be fixed in IAL definition.\r\n-    # Just in case it is 8x? higher than 1, will load up everything below.\r\n-    quad_name_files = [read_json(input_quads)]\r\n-    logger.info(\"Names of Quad Files:\")\r\n-    [logger.info(quad_name) for quad_name in quad_name_files]\r\n-\r\n-    visualize_output = []\r\n-\r\n-    # prefix file names with workdir\r\n-    all_quads = []\r\n-    print(f\"NUM FILES (FPARef_A): {quad_name_files}\")\r\n-    for i in range(len(quad_name_files)):\r\n-\r\n-        logger.info(\r\n-            f\"Quad Name file {i}: \"\r\n-            + str(quad_name_files[i])\r\n-            + \" len: \"\r\n-            + str(len(quad_name_files[i]))\r\n-        )\r\n-\r\n-        logger.info(\"quad name files[][]: \" + str(quad_name_files[i][0]))\r\n-\r\n-        for qname_tuple_file in quad_name_files[i]:\r\n-\r\n-            logger.info(\"Print QuadName TupleList: \" + qname_tuple_file)\r\n-            quad_144_list = read_json(qname_tuple_file)\r\n-            logger.info(\"Len quad_144_list: \" + str(quad_144_list))\r\n-            all_quads.append(quad_144_list)\r\n-\r\n-    # In a perfect world this [8][144] should be the same size and we don't bother opening fits files.\r\n-    # we just make file references from these lists. We are going for now to assume were in a perfect world\r\n-    # also a big assumption that every 4 quadrants are part of the same CCD.\r\n-    num_quads = len(all_quads[0])\r\n-\r\n-    # print(\"NUM FILES (FPARef_B): \" + str(all_quads))\r\n-    logger.info(\r\n-        \"NUM Quads in index 0: \"\r\n-        + str(num_quads)\r\n-        + \" Num of indexes: \"\r\n-        + str(len(all_quads[0]))\r\n-    )\r\n-\r\n-    print(all_quads)\r\n-    dddd\r\n-\r\n-    ccd_num = int(num_quads / 4)\r\n-    logger.info(\"Number of ccd to do: \" + str(ccd_num))\r\n-    for i in range(ccd_num):\r\n-        # For now lets store these names and everything in the gater_ccd directory instead of workdir.\r\n-        # Note it has .json names to this file we should do a strip or something here.\r\n-\r\n-        # file_name = visualize_output_name + \"_cti.\" + str(i) + \".json\"\r\n-        file_name = os.path.basename(visualize_output_name) + \"fpa_quad_\" + str(i) + \".png\"\r\n-\r\n-        ccd_quads = []\r\n-        visualize_output.append(file_name)\r\n-        for j in range(len(all_quads)):\r\n-            start_range = i * 4\r\n-            end_range = i * 4 + 4\r\n-            for k in range(start_range, end_range):\r\n-                ccd_quads.append(all_quads[j][k])\r\n-\r\n-\r\n-    logger.info(\"Writing to: \" + os.path.basename(visualize_output_name))\r\n-    write_json(visualize_output, visualize_output_name)\r\n-\r\n-    logger.info(\"#\")\r\n-    logger.info(\"# Exiting %s mainMethod()\" % __name__)\r\n-    logger.info(\"#\")\r\n",
                            "VIS_cti_master_ci_out",
                            "James Nightingale",
                            "2023-08-07T12:10:05.000+01:00",
                            "2f5e083697e5f00a06a4daaad959c8b26d8fb1e9"
                        ]
                    ],
                    "VIS_Tasks_M/python/VIS_Tasks_M/VIS_cti_xml_out.py": [
                        [
                            "@@ -62,24 +62,16 @@ def mainMethod( args):\n   out_dir = os.path.split(args.parallel_cti_xml_out )[0]\r\n   os.makedirs(out_dir, exist_ok=True)\r\n \r\n-  # get an Euclid compliant filename to store XML\r\n+  \"\"\"\r\n+  calibrate_cti_results_list: is a .json file containing strings with the names of 72.json files in the workdir, \r\n+  each are parallel and serial fits per ccd.\r\n   \r\n-  # TODO : Need to check if type_name is a good name or not\r\n-  \r\n-  # datafile_out = FileNameProvider().get_allowed_filename( processing_function='VIS',\r\n-  #                                                         type_name          =\"CTI\",\r\n-  #                                                         instance_id        ='',\r\n-  #                                                         extension          ='.json')\r\n-  # datafile_out = os.path.join( args.workdir, \"data\", datafile_out)\r\n-  \r\n-  # concatenate the CTI models in datafile_out\r\n-\r\n-  # calibrate_cti_results_list: is a .json file containing strings with the names of 72.json files in the workdir, each are parallel and serial fits per ccd.\r\n-  # cti_per_ccd is a list of 72 .json files, where each .json files is a dictionary of the results of the CTI calibration pipeline.\r\n-  # For each, the first .json file is called CCD1-1_parallel.json, which will look something like the following:\r\n+  cti_per_ccd is a list of 72 .json files, where each .json files is a dictionary of the results of the CTI calibration p\r\n+  ipeline. For each, the first .json file is called CCD1-1_parallel.json, which will look something like the following:\r\n \r\n-  # {\"MultiNestZip\": \"/sps/euclid/Users/jnightin/workspaces/ctical/ppo_root/workdir//output/2022-10-13T11:37:14.399Z_CCD6-4/parallel[x1]/2f929b8acbe296cfb1102229221a7438.zip\",\r\n+  # {\"ModelResult\": \"/sps/euclid/Users/jnightin/workspaces/ctical/ppo_root/workdir//output/2022-10-13T11:37:14.399Z_CCD6-4/parallel[x1]/2f929b8acbe296cfb1102229221a7438.zip\",\r\n   # {\"ModelInfo\": \"/sps/euclid/Users/jnightin/workspaces/ctical/ppo_root/workdir//output/2022-10-13T11:37:14.399Z_CCD6-4/parallel[x1]/2f929b8acbe296cfb1102229221a7438/model.info\"}\r\n+  \"\"\"\r\n \r\n   with open(args.calibrate_cti_results_list, \"r\") as f:\r\n     cti_per_ccd_list = json.load(f)\r\n@@ -97,41 +89,31 @@ def mainMethod( args):\n \r\n   logger.info( f\"reading {len( cti_per_ccd_list)} CCD CTI calibration files\")\r\n \r\n-  # cti_out = dict()\r\n-  # cti_out[\"creator\"]     = __file__\r\n-  # cti_out[\"date\"]        = time.ctime()\r\n-  # cti_out[\"description\"] = \"The CTI Calibration results contains for each CCD the results of a Dynesty model-fit to charge injection data and other datasets. \"\r\n-\r\n-  # This loop updates the cti_out dictionary with each key of the .json file containing the 72 model fits.\r\n-\r\n-  # For example, the first iteration loads the result:\r\n-\r\n-  # {\"Something\":/sps/euclid/Users/jnightin/workspaces/ctical/ppo_root/workdir/cti_calibration_results/CCD1-1_parallel.json\"}\r\n-\r\n   from ST_DM_DmUtils import DmUtils\r\n   from ST_DataModelBindings.dpd.vis import viscticalibrationresults_stub\r\n   import ST_DataModelBindings.ins_stub as ins_dict\r\n \r\n-  # Create the date range\r\n+  \"\"\"Create the date range\"\"\"\r\n   date_range = ins_dict.calibrationValidPeriod()\r\n   date_range.TimestampStart = \"2023-02-21T00:00:00.000Z\"\r\n   date_range.TimestampEnd = \"2023-02-22T00:00:00.000Z\"\r\n \r\n-\r\n-  # Create a CTI model fit entry\r\n+  \"\"\"Create a CTI model fit entry\"\"\"\r\n   parallel_fit_list = []\r\n   serial_fit_list = []\r\n \r\n-  # The cti_result_list contains the results of all 72 CTI calibrations performed in this pipeline\r\n-  # run (36 x parallel CTI, 36 x serial CTI).\r\n-\r\n-  # This loop iterates over all results, creates a visCTIModelFitData() object for each\r\n-  # and then stores in them data.Fits at the end.\r\n+  \"\"\"\r\n+  __Fit Results__\r\n+  \r\n+  The cti_result_list contains the results of all 72 CTI calibrations performed in this pipeline\r\n+  run (36 x parallel CTI, 36 x serial CTI).\r\n \r\n-  dq_parallel_file_list = []\r\n-  dq_serial_file_list = []\r\n+  This loop iterates over all results, creates a visCTIModelFitData() object for each\r\n+  and then stores in them data.Fits at the end.\r\n+  \"\"\"\r\n \r\n   for cti_result in cti_result_list:\r\n+\r\n     fit = vis_stub.visCTIModelFitData()\r\n \r\n     fit.ValidityRange = date_range\r\n@@ -163,10 +145,20 @@ def mainMethod( args):\n \r\n     if cti_result[\"IsParallel\"]:\r\n       parallel_fit_list.append(fit)\r\n+      cti_result_parallel = cti_result\r\n     else:\r\n       serial_fit_list.append(fit)\r\n+      cti_result_serial = cti_result  \r\n \r\n-  ##### DQ FILES #####\r\n+  \"\"\"\r\n+  __Data Quality Files__\r\n+  \r\n+  Create a list of the Data Quality image folders which contain all .png images of the fits \r\n+  for parallel and serial CTI.\r\n+  \r\n+  There are 72 folders in total, 36 for parallel and 36 for serial, which will be collectively\r\n+  zipped into two .tar files.\r\n+  \"\"\"\r\n \r\n   parallel_dq_file_list = []\r\n   serial_dq_file_list = []\r\n@@ -180,7 +172,7 @@ def mainMethod( args):\n     else:\r\n       serial_dq_file_list.append(file)\r\n \r\n-  ##### PARALLEL #####\r\n+  \"\"\"PARALLEL Data Product\"\"\"\r\n \r\n   # Create the data product\r\n   data_product = viscticalibrationresults_stub.DpdVisCTICalibrationResults()\r\n@@ -194,7 +186,11 @@ def mainMethod( args):\n   data.DateRange = date_range\r\n   data.PreviousCTIModelsUsedID = \"0\"\r\n \r\n-  data.FitID = \"Par_Hello\"\r\n+  trap = cti_result_parallel[\"TrapType\"]\r\n+  ccd = cti_result_parallel[\"CCDType\"]\r\n+  time_from_zero = cti_result_parallel[\"TimeFromZero\"]\r\n+  \r\n+  data.FitID = f'Par_{time_from_zero}_{trap}_{ccd}'\r\n \r\n   # Add fit to data\r\n   data.Fits = parallel_fit_list\r\n@@ -221,7 +217,7 @@ def mainMethod( args):\n \r\n   DmUtils.save_product_metadata(data_product, args.parallel_cti_xml_out)\r\n \r\n-  ##### SERIAL #####\r\n+  \"\"\"SERIAL Data Product\"\"\"\r\n \r\n   # Create the data product\r\n   data_product = viscticalibrationresults_stub.DpdVisCTICalibrationResults()\r\n@@ -234,8 +230,12 @@ def mainMethod( args):\n   data.ValidityRange = create_validity_range()\r\n   data.DateRange = date_range\r\n   data.PreviousCTIModelsUsedID = \"0\"\r\n-\r\n-  data.FitID = \"Ser_Hello\"\r\n+  \r\n+  trap = cti_result_serial[\"TrapType\"]\r\n+  ccd = cti_result_serial[\"CCDType\"]\r\n+  time_from_zero = cti_result_serial[\"TimeFromZero\"]\r\n+  \r\n+  data.FitID = f'Ser_{time_from_zero}_{trap}_{ccd}'\r\n \r\n   # Add fit to data\r\n   data.Fits = serial_fit_list\r\n",
                            "VIS_cti_master_ci_out",
                            "James Nightingale",
                            "2023-08-07T12:10:05.000+01:00",
                            "2f5e083697e5f00a06a4daaad959c8b26d8fb1e9"
                        ],
                        [
                            "@@ -137,16 +137,12 @@ def mainMethod( args):\n     fit.ValidityRange = date_range\r\n     fit.DateRange = date_range\r\n     fit.DetectorId = cti_result[\"DetectorId\"]\r\n-    #   fit.DetectorId = cti_result[\"DetectorId\"] # Need to update this to each Detector\r\n \r\n     fit.FitMetaData = create_data_container(cti_result[\"FitMetaData\"])\r\n     fit.SearchPickle = create_data_container(cti_result[\"SearchPickle\"])\r\n     fit.ModelPickle = create_data_container(cti_result[\"ModelPickle\"])\r\n     fit.ModelInfo = create_data_container(cti_result[\"ModelInfo\"])\r\n-    try:\r\n-      fit.Model = create_data_container(cti_result[\"Model\"])\r\n-    except KeyError:\r\n-      fit.Model = create_data_container(cti_result[\"ModelResults\"])\r\n+    fit.Model = create_data_container(cti_result[\"Model\"])\r\n \r\n     fit.ModelResults = create_data_container(cti_result[\"ModelResults\"])\r\n     fit.SearchInfo = create_data_container(cti_result[\"SearchInfo\"])\r\n@@ -177,16 +173,12 @@ def mainMethod( args):\n \r\n   for cti_result in cti_result_list:\r\n \r\n-    dq_key_list = [key for key in cti_result.keys() if key.startswith(\"DQ\")]\r\n+    file = os.path.join(args.workdir, \"data\", cti_result[\"DQImage\"])\r\n \r\n-    for key in dq_key_list:\r\n-\r\n-      file = os.path.join(args.workdir, \"data\", cti_result[key])\r\n-\r\n-      if cti_result[\"IsParallel\"]:\r\n-        parallel_dq_file_list.append(file)\r\n-      else:\r\n-        serial_dq_file_list.append(file)\r\n+    if cti_result[\"IsParallel\"]:\r\n+      parallel_dq_file_list.append(file)\r\n+    else:\r\n+      serial_dq_file_list.append(file)\r\n \r\n   ##### PARALLEL #####\r\n \r\n",
                            "formatting",
                            "James Nightingale",
                            "2023-08-06T11:40:15.000+01:00",
                            "da7b3a93de047f4fd08e9014086a2f07368b6733"
                        ]
                    ]
                },
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": [
                    {
                        "name": "13.0.6",
                        "created_at": "2023-08-02T19:25:05.000+02:00",
                        "author_name": "Catherine Grenet"
                    },
                    {
                        "name": "13.0.7",
                        "created_at": "2023-08-03T10:39:55.000+02:00",
                        "author_name": "Catherine Grenet"
                    },
                    {
                        "name": "13.0.8",
                        "created_at": "2023-08-03T16:44:03.000+02:00",
                        "author_name": "Catherine Grenet"
                    },
                    {
                        "name": "13.0.9",
                        "created_at": "2023-08-07T08:55:33.000+00:00",
                        "author_name": "Catherine Grenet"
                    },
                    {
                        "name": "13.0.10",
                        "created_at": "2023-08-08T12:11:35.000+00:00",
                        "author_name": "Catherine Grenet"
                    }
                ]
            },
            "PF-VIS/VIS_SatPixels": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_Photometry": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_NonLinCalibration": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_RemovePRNU": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_PyLibrary": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_MeasurePRNU": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_RemoveLamp": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_MeasureLamp": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_MasterBias": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_ImageTools": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_Ghosts": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_CTICalibrate": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_CTICorrect": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_CTIAdd": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_CTI_from_Git": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_Background": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "PF-VIS/VIS_Astrometry": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            }
        }
    },
    "INFRA": {
        "ST-EAS": {
            "ST-EAS/ST_EASDPS_DM_Updates": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EASOmd": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/eas_scripts": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EASAnsibleDevops": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EAS_MAL": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_DataModelInstances": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EAS_Documentation": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EASJupyterNotebooks": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EASDPS_Docker": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EASDPSTest": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EASDPS": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EASLegacyCode": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EASGrid": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EASeuclid": {
                "start date": "2023-06-13T18:04:52",
                "end date": "2023-07-27T10:20:01",
                "start tag": "0.9.9",
                "end tag": "1.0.0",
                "count_files_modified": "26",
                "modifications_by_file": {
                    "config/startup.py": [
                        [
                            "@@ -43,6 +43,33 @@ sys.ps1 = 'ewe> '\n sys.ps2 = '...  '\n \n \n+def check_long_char():\n+    \"\"\" check the long_char dict from aweimports \"\"\"\n+    def get_column_size(tablename, attr_name):\n+        \"\"\" return the column size \"\"\"\n+        from common.database.Database import database\n+        for column in database.columncache[tablename]:\n+            if column.attrname == attr_name:\n+                if column.propname == 'desc_list_property':\n+                    columnname = 'COLUMN_VALUE'\n+                    tablename = column.tablename\n+                else:\n+                    columnname = column.columnname\n+                sql = f\"select char_length from all_tab_columns where table_name='{tablename}' and column_name='{columnname}'\"\n+                #print(sql)\n+                return database.execute_select(sql)[0][0]\n+        raise KeyError(f'table {tablename} with attrname {attr_name} not found')\n+    from euclid.dm_bindings import long_char, dataproduct\n+    for cls_name in long_char:\n+        try:\n+            tablename = dataproduct[cls_name]._dmlname()\n+            for attr_name in long_char[cls_name]:\n+                size = get_column_size(tablename, attr_name)\n+                assert size == 4000, f'size not 4000 but {size} for {cls_name}.{attr_name}'\n+        except Exception as e:\n+            print(f'ERROR checking long_char; {e}')\n+\n+\n ## Print the news file\n if 'AWEPIPE' in os.environ:\n     try:\n@@ -89,6 +116,7 @@ else:\n         profile.sso_ticket = st\n     from common.database.Context import privileges_names\n     from euclid.dm_bindings import *\n+    check_long_char()\n     if is_using_filebased():\n         print('WARNING -- using file-based interface (NOT databased interface)')\n         print('')\n@@ -125,4 +153,4 @@ if userstartup:\n     del userstartup\n \n ## Delete all unwanted modules from the namespace that were imported\n-del euclid, common\n+del euclid, common, check_long_char\n",
                            "Merge branch 'wjv/bugfix/check_long_char_dict_on_startup' into 'develop'",
                            "Andrey Belikov",
                            "2023-07-26T18:12:00.000+00:00",
                            "da879582aef55e49f109243c46fb853631e8c6e9"
                        ],
                        [
                            "@@ -42,6 +42,7 @@ print('\\\n sys.ps1 = 'ewe> '\n sys.ps2 = '...  '\n \n+\n def check_long_char():\n     \"\"\" check the long_char dict from aweimports \"\"\"\n     def get_column_size(tablename, attr_name):\n",
                            "Merge branch 'assist/autoformat/wjv/bugfix/check_long_char_dict_on_startup/47c6a514' into 'wjv/bugfix/check_long_char_dict_on_startup'",
                            "Willem-Jan Vriend",
                            "2023-07-26T17:26:46.000+00:00",
                            "83ee744bb16ec0e523554a2e030c1bf388ce4676"
                        ],
                        [
                            "@@ -42,6 +42,7 @@ print('\\\n sys.ps1 = 'ewe> '\n sys.ps2 = '...  '\n \n+\n def check_long_char():\n     \"\"\" check the long_char dict from aweimports \"\"\"\n     def get_column_size(tablename, attr_name):\n",
                            "Auto-format files with autopep8",
                            "CI Bot",
                            "2023-07-26T16:52:00.000+00:00",
                            "fd7f556006116611d20b4a9801618bfa8a9a4822"
                        ],
                        [
                            "@@ -42,6 +42,32 @@ print('\\\n sys.ps1 = 'ewe> '\n sys.ps2 = '...  '\n \n+def check_long_char():\n+    \"\"\" check the long_char dict from aweimports \"\"\"\n+    def get_column_size(tablename, attr_name):\n+        \"\"\" return the column size \"\"\"\n+        from common.database.Database import database\n+        for column in database.columncache[tablename]:\n+            if column.attrname == attr_name:\n+                if column.propname == 'desc_list_property':\n+                    columnname = 'COLUMN_VALUE'\n+                    tablename = column.tablename\n+                else:\n+                    columnname = column.columnname\n+                sql = f\"select char_length from all_tab_columns where table_name='{tablename}' and column_name='{columnname}'\"\n+                #print(sql)\n+                return database.execute_select(sql)[0][0]\n+        raise KeyError(f'table {tablename} with attrname {attr_name} not found')\n+    from euclid.dm_bindings import long_char, dataproduct\n+    for cls_name in long_char:\n+        try:\n+            tablename = dataproduct[cls_name]._dmlname()\n+            for attr_name in long_char[cls_name]:\n+                size = get_column_size(tablename, attr_name)\n+                assert size == 4000, f'size not 4000 but {size} for {cls_name}.{attr_name}'\n+        except Exception as e:\n+            print(f'ERROR checking long_char; {e}')\n+\n \n ## Print the news file\n if 'AWEPIPE' in os.environ:\n@@ -89,6 +115,7 @@ else:\n         profile.sso_ticket = st\n     from common.database.Context import privileges_names\n     from euclid.dm_bindings import *\n+    check_long_char()\n     if is_using_filebased():\n         print('WARNING -- using file-based interface (NOT databased interface)')\n         print('')\n@@ -125,4 +152,4 @@ if userstartup:\n     del userstartup\n \n ## Delete all unwanted modules from the namespace that were imported\n-del euclid, common\n+del euclid, common, check_long_char\n",
                            "check the long_char dict on startup",
                            "Willem-Jan Vriend",
                            "2023-07-26T16:33:53.000+02:00",
                            "47c6a514ed162d5cc1efa611d778f6a0c240d038"
                        ]
                    ],
                    "pip/aweimports.py": [
                        [
                            "@@ -2888,7 +2888,7 @@ dataproduct_delay = {\n long_char = {\n     'IalInstance': ['IalBootstrapInfo'],\n     'PipelineDefinition': ['OptionalPackageDefRootPaths'],\n-    'FileFiltering': ['FilesToExclude', 'FilesToInclude'],\n+    'Filefiltering': ['FilesToExclude', 'FilesToInclude'],\n     'Plan': ['Message'],\n     'PipelineProcessingOrder': ['SdcConfiguration'],\n     'ThematicParameterValue': ['Text'],\n",
                            "Merge branch 'wjv/bugfix/aweimports_FileFiltering_Filefiltering' into 'develop'",
                            "Andrey Belikov",
                            "2023-07-26T17:18:15.000+00:00",
                            "c85b02cd9492fa4dde379a7693cc91fc8370d365"
                        ]
                    ],
                    "util/IntersectShapely.py": [
                        [
                            "@@ -87,7 +87,7 @@ ORDER BY T4.DPD_OBJECT_ID, T1.POSITION\n     return result\n \n \n-def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_overlap=True):\n+def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_overlap=False):\n     \"\"\"Find the overlap between a search area and a list of data product id and vertices.\n \n     :param area: Search area as shapely.Polygon\n@@ -126,9 +126,9 @@ def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_\n         polygon = shapely.Polygon(coordinates)\n         try:\n             if inverse_overlap:\n-                overlap = 100.0 * (area & polygon).area / polygon.area\n-            else:\n                 overlap = 100.0 * (area & polygon).area / area.area\n+            else:\n+                overlap = 100.0 * (area & polygon).area / polygon.area\n         except shapely.errors.GEOSException:\n             # Some footprints are incorrect, raising the following exception\n             # shapely.errors.GEOSException: TopologyException: Input geom 1 is invalid: Self-intersection at ...\n@@ -141,7 +141,7 @@ def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_\n     return result_true, result_false\n \n \n-def intersect_shapely(input_area, class_name, min_overlap, max_overlap, inverse_overlap=True):\n+def intersect_shapely(input_area, class_name, min_overlap, max_overlap, inverse_overlap=False):\n     \"\"\"Find the Data Products that overlap a search area.\n \n     It is up to the caller of this routine to convert the result to\n",
                            "Merge branch 'drb/feature/inverse-overlap-inverted' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-07-26T13:55:22.000+00:00",
                            "3bbc2caa03d9acf5bdf9e22a1d748507240926d8"
                        ],
                        [
                            "@@ -87,7 +87,7 @@ ORDER BY T4.DPD_OBJECT_ID, T1.POSITION\n     return result\n \n \n-def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_overlap=False):\n+def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_overlap=True):\n     \"\"\"Find the overlap between a search area and a list of data product id and vertices.\n \n     :param area: Search area as shapely.Polygon\n@@ -96,16 +96,16 @@ def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_\n         The tuples have to be sorted by data product id and position.\n     :param min_overlap: Minimum overlap in percent of the input_area\n     :param max_overlap: Maximum overlap in percent of the input_area\n-    :returns:\n-        Both a dictionary with the overlapping data product ids and\n-        vertices and a dictionary with the non-overlapping data product\n-        ids and vertices.  The key in each dictionary is the data product\n-        id as bytes() and the value is a shapely.Polygon.\n     :param inverse_overlap:\n         Determines the denominator for calculating the overlap percentage.\n         If True, the denominator is the area of the spatial footprint of the data product\n         with the given class_name.\n         If False, the denominator is the area of the input_area, which is the default.\n+    :returns:\n+        Both a dictionary with the overlapping data product ids and\n+        vertices and a dictionary with the non-overlapping data product\n+        ids and vertices.  The key in each dictionary is the data product\n+        id as bytes() and the value is a shapely.Polygon.\n \n     \"\"\"\n     result_true = {}\n@@ -141,7 +141,7 @@ def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_\n     return result_true, result_false\n \n \n-def intersect_shapely(input_area, class_name, min_overlap, max_overlap, inverse_overlap=False):\n+def intersect_shapely(input_area, class_name, min_overlap, max_overlap, inverse_overlap=True):\n     \"\"\"Find the Data Products that overlap a search area.\n \n     It is up to the caller of this routine to convert the result to\n@@ -164,6 +164,11 @@ def intersect_shapely(input_area, class_name, min_overlap, max_overlap, inverse_\n         If True, the denominator is the area of the spatial footprint of the data product\n         with the given class_name.\n         If False, the denominator is the area of the input_area, which is the default.\n+    :returns:\n+        Both a dictionary with the overlapping data product ids and\n+        vertices and a dictionary with the non-overlapping data product\n+        ids and vertices.  The key in each dictionary is the data product\n+        id as bytes() and the value is a shapely.Polygon.\n \n     \"\"\"\n     vertices = intersect_shapely_vertices(input_area, class_name)\n",
                            "Merge branch 'drb/feature/inverse-overlap-default' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-07-26T10:45:26.000+00:00",
                            "60a5002a2db17565c42ff515e8ee42d34215d614"
                        ],
                        [
                            "@@ -87,7 +87,7 @@ ORDER BY T4.DPD_OBJECT_ID, T1.POSITION\n     return result\n \n \n-def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_overlap=False):\n+def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_overlap=True):\n     \"\"\"Find the overlap between a search area and a list of data product id and vertices.\n \n     :param area: Search area as shapely.Polygon\n@@ -96,16 +96,16 @@ def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_\n         The tuples have to be sorted by data product id and position.\n     :param min_overlap: Minimum overlap in percent of the input_area\n     :param max_overlap: Maximum overlap in percent of the input_area\n-    :returns:\n-        Both a dictionary with the overlapping data product ids and\n-        vertices and a dictionary with the non-overlapping data product\n-        ids and vertices.  The key in each dictionary is the data product\n-        id as bytes() and the value is a shapely.Polygon.\n     :param inverse_overlap:\n         Determines the denominator for calculating the overlap percentage.\n         If True, the denominator is the area of the spatial footprint of the data product\n         with the given class_name.\n         If False, the denominator is the area of the input_area, which is the default.\n+    :returns:\n+        Both a dictionary with the overlapping data product ids and\n+        vertices and a dictionary with the non-overlapping data product\n+        ids and vertices.  The key in each dictionary is the data product\n+        id as bytes() and the value is a shapely.Polygon.\n \n     \"\"\"\n     result_true = {}\n@@ -141,7 +141,7 @@ def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_\n     return result_true, result_false\n \n \n-def intersect_shapely(input_area, class_name, min_overlap, max_overlap, inverse_overlap=False):\n+def intersect_shapely(input_area, class_name, min_overlap, max_overlap, inverse_overlap=True):\n     \"\"\"Find the Data Products that overlap a search area.\n \n     It is up to the caller of this routine to convert the result to\n@@ -164,6 +164,11 @@ def intersect_shapely(input_area, class_name, min_overlap, max_overlap, inverse_\n         If True, the denominator is the area of the spatial footprint of the data product\n         with the given class_name.\n         If False, the denominator is the area of the input_area, which is the default.\n+    :returns:\n+        Both a dictionary with the overlapping data product ids and\n+        vertices and a dictionary with the non-overlapping data product\n+        ids and vertices.  The key in each dictionary is the data product\n+        id as bytes() and the value is a shapely.Polygon.\n \n     \"\"\"\n     vertices = intersect_shapely_vertices(input_area, class_name)\n",
                            "Calculate overlap percentage with spatial footprint area as denominator by default.",
                            "Danny Boxhoorn",
                            "2023-07-26T12:15:52.000+02:00",
                            "33a3bbc4bc788271b2eb84c10d28cbd8dd87fa6a"
                        ],
                        [
                            "@@ -87,7 +87,7 @@ ORDER BY T4.DPD_OBJECT_ID, T1.POSITION\n     return result\n \n \n-def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap):\n+def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_overlap=False):\n     \"\"\"Find the overlap between a search area and a list of data product id and vertices.\n \n     :param area: Search area as shapely.Polygon\n@@ -101,6 +101,11 @@ def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap):\n         vertices and a dictionary with the non-overlapping data product\n         ids and vertices.  The key in each dictionary is the data product\n         id as bytes() and the value is a shapely.Polygon.\n+    :param inverse_overlap:\n+        Determines the denominator for calculating the overlap percentage.\n+        If True, the denominator is the area of the spatial footprint of the data product\n+        with the given class_name.\n+        If False, the denominator is the area of the input_area, which is the default.\n \n     \"\"\"\n     result_true = {}\n@@ -120,7 +125,10 @@ def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap):\n             dpd_product_id = product_id\n         polygon = shapely.Polygon(coordinates)\n         try:\n-            overlap = 100.0 * (area & polygon).area / area.area\n+            if inverse_overlap:\n+                overlap = 100.0 * (area & polygon).area / polygon.area\n+            else:\n+                overlap = 100.0 * (area & polygon).area / area.area\n         except shapely.errors.GEOSException:\n             # Some footprints are incorrect, raising the following exception\n             # shapely.errors.GEOSException: TopologyException: Input geom 1 is invalid: Self-intersection at ...\n@@ -133,7 +141,7 @@ def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap):\n     return result_true, result_false\n \n \n-def intersect_shapely(input_area, class_name, min_overlap, max_overlap):\n+def intersect_shapely(input_area, class_name, min_overlap, max_overlap, inverse_overlap=False):\n     \"\"\"Find the Data Products that overlap a search area.\n \n     It is up to the caller of this routine to convert the result to\n@@ -151,9 +159,14 @@ def intersect_shapely(input_area, class_name, min_overlap, max_overlap):\n     :param class_name: The name of a data product class, i.e. Dpd*\n     :param min_overlap: Minimum overlap in percent of the input_area\n     :param max_overlap: Maximum overlap in percent of the input_area\n+    :param inverse_overlap:\n+        Determines the denominator for calculating the overlap percentage.\n+        If True, the denominator is the area of the spatial footprint of the data product\n+        with the given class_name.\n+        If False, the denominator is the area of the input_area, which is the default.\n \n     \"\"\"\n     vertices = intersect_shapely_vertices(input_area, class_name)\n     area = shapely.Polygon(input_area)\n-    result_true, result_false = intersect_shapely_overlap(area, vertices, min_overlap, max_overlap)\n+    result_true, result_false = intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_overlap=inverse_overlap)\n     return result_true, result_false\n",
                            "Merge branch 'drb/feature/inverse-overlap' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-07-20T12:42:54.000+00:00",
                            "5332d6e2727af8e1c8432f19dd5ba49dad76632d"
                        ],
                        [
                            "@@ -87,7 +87,7 @@ ORDER BY T4.DPD_OBJECT_ID, T1.POSITION\n     return result\n \n \n-def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap):\n+def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_overlap=False):\n     \"\"\"Find the overlap between a search area and a list of data product id and vertices.\n \n     :param area: Search area as shapely.Polygon\n@@ -101,6 +101,11 @@ def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap):\n         vertices and a dictionary with the non-overlapping data product\n         ids and vertices.  The key in each dictionary is the data product\n         id as bytes() and the value is a shapely.Polygon.\n+    :param inverse_overlap:\n+        Determines the denominator for calculating the overlap percentage.\n+        If True, the denominator is the area of the spatial footprint of the data product\n+        with the given class_name.\n+        If False, the denominator is the area of the input_area, which is the default.\n \n     \"\"\"\n     result_true = {}\n@@ -120,7 +125,10 @@ def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap):\n             dpd_product_id = product_id\n         polygon = shapely.Polygon(coordinates)\n         try:\n-            overlap = 100.0 * (area & polygon).area / area.area\n+            if inverse_overlap:\n+                overlap = 100.0 * (area & polygon).area / polygon.area\n+            else:\n+                overlap = 100.0 * (area & polygon).area / area.area\n         except shapely.errors.GEOSException:\n             # Some footprints are incorrect, raising the following exception\n             # shapely.errors.GEOSException: TopologyException: Input geom 1 is invalid: Self-intersection at ...\n@@ -133,7 +141,7 @@ def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap):\n     return result_true, result_false\n \n \n-def intersect_shapely(input_area, class_name, min_overlap, max_overlap):\n+def intersect_shapely(input_area, class_name, min_overlap, max_overlap, inverse_overlap=False):\n     \"\"\"Find the Data Products that overlap a search area.\n \n     It is up to the caller of this routine to convert the result to\n@@ -151,9 +159,14 @@ def intersect_shapely(input_area, class_name, min_overlap, max_overlap):\n     :param class_name: The name of a data product class, i.e. Dpd*\n     :param min_overlap: Minimum overlap in percent of the input_area\n     :param max_overlap: Maximum overlap in percent of the input_area\n+    :param inverse_overlap:\n+        Determines the denominator for calculating the overlap percentage.\n+        If True, the denominator is the area of the spatial footprint of the data product\n+        with the given class_name.\n+        If False, the denominator is the area of the input_area, which is the default.\n \n     \"\"\"\n     vertices = intersect_shapely_vertices(input_area, class_name)\n     area = shapely.Polygon(input_area)\n-    result_true, result_false = intersect_shapely_overlap(area, vertices, min_overlap, max_overlap)\n+    result_true, result_false = intersect_shapely_overlap(area, vertices, min_overlap, max_overlap, inverse_overlap=inverse_overlap)\n     return result_true, result_false\n",
                            "Divide by the area of the spatial footprint if requested.",
                            "Danny Boxhoorn",
                            "2023-07-20T12:34:13.000+02:00",
                            "bc8cf08d5cf65bcc601ca906c136fc16b67e3540"
                        ],
                        [
                            "@@ -87,13 +87,15 @@ ORDER BY T4.DPD_OBJECT_ID, T1.POSITION\n     return result\n \n \n-def intersect_shapely_overlap(area, vertices):\n+def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap):\n     \"\"\"Find the overlap between a search area and a list of data product id and vertices.\n \n     :param area: Search area as shapely.Polygon\n     :param vertices:\n         List of (data product id, position, R.A., Declination) tuples.\n         The tuples have to be sorted by data product id and position.\n+    :param min_overlap: Minimum overlap in percent of the input_area\n+    :param max_overlap: Maximum overlap in percent of the input_area\n     :returns:\n         Both a dictionary with the overlapping data product ids and\n         vertices and a dictionary with the non-overlapping data product\n@@ -103,7 +105,7 @@ def intersect_shapely_overlap(area, vertices):\n     \"\"\"\n     result_true = {}\n     result_false = {}\n-    Result = namedtuple(\"Result\", [\"dpd_product_id\", \"footprint\"])\n+    Result = namedtuple(\"Result\", [\"dpd_product_id\", \"overlap\", \"footprint\"])\n \n     for dpd_object_id, xylist in itertools.groupby(\n         vertices, key=operator.itemgetter(0)\n@@ -117,15 +119,21 @@ def intersect_shapely_overlap(area, vertices):\n             assert dpd_product_id is None or dpd_product_id == product_id, (dpd_product_id, product_id)\n             dpd_product_id = product_id\n         polygon = shapely.Polygon(coordinates)\n-        if polygon.intersects(area):\n-            result_true[dpd_object_id] = Result(dpd_product_id, polygon)\n+        try:\n+            overlap = 100.0 * (area & polygon).area / area.area\n+        except shapely.errors.GEOSException:\n+            # Some footprints are incorrect, raising the following exception\n+            # shapely.errors.GEOSException: TopologyException: Input geom 1 is invalid: Self-intersection at ...\n+            overlap = -1.0\n+        if polygon.intersects(area) and overlap >= min_overlap and overlap <= max_overlap:\n+            result_true[dpd_object_id] = Result(dpd_product_id, overlap, polygon)\n         else:\n-            result_false[dpd_object_id] = Result(dpd_product_id, polygon)\n+            result_false[dpd_object_id] = Result(dpd_product_id, overlap, polygon)\n \n     return result_true, result_false\n \n \n-def intersect_shapely(input_area, class_name):\n+def intersect_shapely(input_area, class_name, min_overlap, max_overlap):\n     \"\"\"Find the Data Products that overlap a search area.\n \n     It is up to the caller of this routine to convert the result to\n@@ -141,9 +149,11 @@ def intersect_shapely(input_area, class_name):\n     :param input_area:\n         The search area given as a list of (R.A., Declination) tuples forming a polygon.\n     :param class_name: The name of a data product class, i.e. Dpd*\n+    :param min_overlap: Minimum overlap in percent of the input_area\n+    :param max_overlap: Maximum overlap in percent of the input_area\n \n     \"\"\"\n     vertices = intersect_shapely_vertices(input_area, class_name)\n     area = shapely.Polygon(input_area)\n-    result_true, result_false = intersect_shapely_overlap(area, vertices)\n+    result_true, result_false = intersect_shapely_overlap(area, vertices, min_overlap, max_overlap)\n     return result_true, result_false\n",
                            "Merge branch 'drb/bugfix/check-min-and-max-overlap-low-level' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-07-11T13:25:07.000+00:00",
                            "479bde684d500f96f26c43f4ead2bba6c337afed"
                        ],
                        [
                            "@@ -87,13 +87,15 @@ ORDER BY T4.DPD_OBJECT_ID, T1.POSITION\n     return result\n \n \n-def intersect_shapely_overlap(area, vertices):\n+def intersect_shapely_overlap(area, vertices, min_overlap, max_overlap):\n     \"\"\"Find the overlap between a search area and a list of data product id and vertices.\n \n     :param area: Search area as shapely.Polygon\n     :param vertices:\n         List of (data product id, position, R.A., Declination) tuples.\n         The tuples have to be sorted by data product id and position.\n+    :param min_overlap: Minimum overlap in percent of the input_area\n+    :param max_overlap: Maximum overlap in percent of the input_area\n     :returns:\n         Both a dictionary with the overlapping data product ids and\n         vertices and a dictionary with the non-overlapping data product\n@@ -103,7 +105,7 @@ def intersect_shapely_overlap(area, vertices):\n     \"\"\"\n     result_true = {}\n     result_false = {}\n-    Result = namedtuple(\"Result\", [\"dpd_product_id\", \"footprint\"])\n+    Result = namedtuple(\"Result\", [\"dpd_product_id\", \"overlap\", \"footprint\"])\n \n     for dpd_object_id, xylist in itertools.groupby(\n         vertices, key=operator.itemgetter(0)\n@@ -117,15 +119,21 @@ def intersect_shapely_overlap(area, vertices):\n             assert dpd_product_id is None or dpd_product_id == product_id, (dpd_product_id, product_id)\n             dpd_product_id = product_id\n         polygon = shapely.Polygon(coordinates)\n-        if polygon.intersects(area):\n-            result_true[dpd_object_id] = Result(dpd_product_id, polygon)\n+        try:\n+            overlap = 100.0 * (area & polygon).area / area.area\n+        except shapely.errors.GEOSException:\n+            # Some footprints are incorrect, raising the following exception\n+            # shapely.errors.GEOSException: TopologyException: Input geom 1 is invalid: Self-intersection at ...\n+            overlap = -1.0\n+        if polygon.intersects(area) and overlap >= min_overlap and overlap <= max_overlap:\n+            result_true[dpd_object_id] = Result(dpd_product_id, overlap, polygon)\n         else:\n-            result_false[dpd_object_id] = Result(dpd_product_id, polygon)\n+            result_false[dpd_object_id] = Result(dpd_product_id, overlap, polygon)\n \n     return result_true, result_false\n \n \n-def intersect_shapely(input_area, class_name):\n+def intersect_shapely(input_area, class_name, min_overlap, max_overlap):\n     \"\"\"Find the Data Products that overlap a search area.\n \n     It is up to the caller of this routine to convert the result to\n@@ -141,9 +149,11 @@ def intersect_shapely(input_area, class_name):\n     :param input_area:\n         The search area given as a list of (R.A., Declination) tuples forming a polygon.\n     :param class_name: The name of a data product class, i.e. Dpd*\n+    :param min_overlap: Minimum overlap in percent of the input_area\n+    :param max_overlap: Maximum overlap in percent of the input_area\n \n     \"\"\"\n     vertices = intersect_shapely_vertices(input_area, class_name)\n     area = shapely.Polygon(input_area)\n-    result_true, result_false = intersect_shapely_overlap(area, vertices)\n+    result_true, result_false = intersect_shapely_overlap(area, vertices, min_overlap, max_overlap)\n     return result_true, result_false\n",
                            "Calculate the overlap and check the minimum and maximum overlap in the low level intersect.",
                            "Danny Boxhoorn",
                            "2023-07-11T14:58:13.000+02:00",
                            "39a015c147427087c451286a6755a6ab7b5cda70"
                        ],
                        [
                            "@@ -1,4 +1,5 @@\n \"\"\"Find SpatialFootprints overlapping a search area using shapely.\"\"\"\n+from collections import namedtuple\n import operator\n import itertools\n import shapely\n@@ -67,6 +68,7 @@ def intersect_shapely_vertices(input_area, class_name):\n     # than one HEALPIX5 pixel.\n     query = f\"\"\"\\\n SELECT DISTINCT T4.DPD_OBJECT_ID\n+, T4.DPD_PRODUCT_ID\n , T1.POSITION N\n , T2.C1 X\n , T2.C2 Y\n@@ -101,20 +103,24 @@ def intersect_shapely_overlap(area, vertices):\n     \"\"\"\n     result_true = {}\n     result_false = {}\n+    Result = namedtuple(\"Result\", [\"dpd_product_id\", \"footprint\"])\n \n     for dpd_object_id, xylist in itertools.groupby(\n         vertices, key=operator.itemgetter(0)\n     ):\n         coordinates = []\n-        for n, (group_oid, position, x, y) in enumerate(xylist):\n+        dpd_product_id = None\n+        for n, (group_oid, product_id, position, x, y) in enumerate(xylist):\n             assert n == position, (n, position)\n             assert dpd_object_id == group_oid, (dpd_object_id, group_oid)\n             coordinates.append((x, y))\n+            assert dpd_product_id is None or dpd_product_id == product_id, (dpd_product_id, product_id)\n+            dpd_product_id = product_id\n         polygon = shapely.Polygon(coordinates)\n         if polygon.intersects(area):\n-            result_true[dpd_object_id] = polygon\n+            result_true[dpd_object_id] = Result(dpd_product_id, polygon)\n         else:\n-            result_false[dpd_object_id] = polygon\n+            result_false[dpd_object_id] = Result(dpd_product_id, polygon)\n \n     return result_true, result_false\n \n",
                            "Merge branch 'drb/feature/productid-in-intersect-shapely-result' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-07-11T10:33:57.000+00:00",
                            "c59d03bb25ea17be0887d423a7c25bf4fd86e5e6"
                        ],
                        [
                            "@@ -1,4 +1,5 @@\n \"\"\"Find SpatialFootprints overlapping a search area using shapely.\"\"\"\n+from collections import namedtuple\n import operator\n import itertools\n import shapely\n@@ -67,6 +68,7 @@ def intersect_shapely_vertices(input_area, class_name):\n     # than one HEALPIX5 pixel.\n     query = f\"\"\"\\\n SELECT DISTINCT T4.DPD_OBJECT_ID\n+, T4.DPD_PRODUCT_ID\n , T1.POSITION N\n , T2.C1 X\n , T2.C2 Y\n@@ -101,20 +103,24 @@ def intersect_shapely_overlap(area, vertices):\n     \"\"\"\n     result_true = {}\n     result_false = {}\n+    Result = namedtuple(\"Result\", [\"dpd_product_id\", \"footprint\"])\n \n     for dpd_object_id, xylist in itertools.groupby(\n         vertices, key=operator.itemgetter(0)\n     ):\n         coordinates = []\n-        for n, (group_oid, position, x, y) in enumerate(xylist):\n+        dpd_product_id = None\n+        for n, (group_oid, product_id, position, x, y) in enumerate(xylist):\n             assert n == position, (n, position)\n             assert dpd_object_id == group_oid, (dpd_object_id, group_oid)\n             coordinates.append((x, y))\n+            assert dpd_product_id is None or dpd_product_id == product_id, (dpd_product_id, product_id)\n+            dpd_product_id = product_id\n         polygon = shapely.Polygon(coordinates)\n         if polygon.intersects(area):\n-            result_true[dpd_object_id] = polygon\n+            result_true[dpd_object_id] = Result(dpd_product_id, polygon)\n         else:\n-            result_false[dpd_object_id] = polygon\n+            result_false[dpd_object_id] = Result(dpd_product_id, polygon)\n \n     return result_true, result_false\n \n",
                            "Include the ProductId in the intersect_shapely result to avoid instantiating data products.",
                            "Danny Boxhoorn",
                            "2023-07-11T12:15:32.000+02:00",
                            "09a4b0186a6272308edf1d7a2a549a2f57975db6"
                        ],
                        [
                            "@@ -5,6 +5,7 @@ import shapely\n \n from common.database.Database import database\n from euclid.dm_bindings import polygon_dictionary\n+from euclid.database.oraclesupport import long_names_translation\n from euclid.util.Healpix import convert_area_healpix\n \n \n@@ -60,6 +61,7 @@ def intersect_shapely_vertices(input_area, class_name):\n     \"\"\"\n     healpix5_clause = intersect_shapely_healpix5_clause(input_area)\n     footprintlink = intersect_shapely_footprintlink(class_name)\n+    view_name = long_names_translation.get(class_name + '+', class_name + '+')\n \n     # NB. DISTINCT is necessary because one data product can appear in more\n     # than one HEALPIX5 pixel.\n@@ -71,7 +73,7 @@ SELECT DISTINCT T4.DPD_OBJECT_ID\n FROM AWOPER.SPATIALFOOTPRINT T0\n   JOIN AWOPER.POLYGONTYPE$VERTEX T1 ON T1.OBJECT_ID=T0.POLYGON\n   JOIN AWOPER.VERTEXTYPE T2 ON T2.OBJECT_ID=T1.COLUMN_VALUE\n-  JOIN AWOPER.\"{class_name}+\" T3 ON T3.{footprintlink}.\"object_id\"=T0.OBJECT_ID\n+  JOIN AWOPER.\"{view_name}\" T3 ON T3.{footprintlink}.\"object_id\"=T0.OBJECT_ID\n   JOIN AWOPER.AWEHEALPIX5 T4 ON T4.DPD_OBJECT_ID=T3.\"object_id\"\n WHERE T4.DPD_TYPE='{class_name}'\n   AND T4.HEALPIX {healpix5_clause}\n",
                            "Merge branch 'drb/bugfix/long-names-translation-missing' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-06-27T10:20:18.000+00:00",
                            "c0871ff9b384c55eebfd6f998d1a1142eeada45a"
                        ],
                        [
                            "@@ -61,7 +61,7 @@ def intersect_shapely_vertices(input_area, class_name):\n     \"\"\"\n     healpix5_clause = intersect_shapely_healpix5_clause(input_area)\n     footprintlink = intersect_shapely_footprintlink(class_name)\n-    view_name = long_names_translation.get(class_name+'+', class_name+'+')\n+    view_name = long_names_translation.get(class_name + '+', class_name + '+')\n \n     # NB. DISTINCT is necessary because one data product can appear in more\n     # than one HEALPIX5 pixel.\n",
                            "Merge branch 'assist/autoformat/drb/bugfix/long-names-translation-missing/dc14df0a' into 'drb/bugfix/long-names-translation-missing'",
                            "Danny Boxhoorn",
                            "2023-06-27T10:05:38.000+00:00",
                            "507e49886979756433cbcc49207f33c50235d6d6"
                        ],
                        [
                            "@@ -61,7 +61,7 @@ def intersect_shapely_vertices(input_area, class_name):\n     \"\"\"\n     healpix5_clause = intersect_shapely_healpix5_clause(input_area)\n     footprintlink = intersect_shapely_footprintlink(class_name)\n-    view_name = long_names_translation.get(class_name+'+', class_name+'+')\n+    view_name = long_names_translation.get(class_name + '+', class_name + '+')\n \n     # NB. DISTINCT is necessary because one data product can appear in more\n     # than one HEALPIX5 pixel.\n",
                            "Auto-format files with autopep8",
                            "CI Bot",
                            "2023-06-27T10:01:58.000+00:00",
                            "7bc59694c3ad5317ec80b44ecf2dfe1d7abaf18e"
                        ],
                        [
                            "@@ -5,6 +5,7 @@ import shapely\n \n from common.database.Database import database\n from euclid.dm_bindings import polygon_dictionary\n+from euclid.database.oraclesupport import long_names_translation\n from euclid.util.Healpix import convert_area_healpix\n \n \n@@ -60,6 +61,7 @@ def intersect_shapely_vertices(input_area, class_name):\n     \"\"\"\n     healpix5_clause = intersect_shapely_healpix5_clause(input_area)\n     footprintlink = intersect_shapely_footprintlink(class_name)\n+    view_name = long_names_translation.get(class_name+'+', class_name+'+')\n \n     # NB. DISTINCT is necessary because one data product can appear in more\n     # than one HEALPIX5 pixel.\n@@ -71,7 +73,7 @@ SELECT DISTINCT T4.DPD_OBJECT_ID\n FROM AWOPER.SPATIALFOOTPRINT T0\n   JOIN AWOPER.POLYGONTYPE$VERTEX T1 ON T1.OBJECT_ID=T0.POLYGON\n   JOIN AWOPER.VERTEXTYPE T2 ON T2.OBJECT_ID=T1.COLUMN_VALUE\n-  JOIN AWOPER.\"{class_name}+\" T3 ON T3.{footprintlink}.\"object_id\"=T0.OBJECT_ID\n+  JOIN AWOPER.\"{view_name}\" T3 ON T3.{footprintlink}.\"object_id\"=T0.OBJECT_ID\n   JOIN AWOPER.AWEHEALPIX5 T4 ON T4.DPD_OBJECT_ID=T3.\"object_id\"\n WHERE T4.DPD_TYPE='{class_name}'\n   AND T4.HEALPIX {healpix5_clause}\n",
                            "Long names of VIEW should be translated to something short.",
                            "Danny Boxhoorn",
                            "2023-06-27T11:57:40.000+02:00",
                            "dc14df0af8827166fc326a1511f46b69294edeaa"
                        ]
                    ],
                    "util/Healpix.py": [
                        [
                            "@@ -116,7 +116,7 @@ def call_healpix(area, area_healpix, **kwargs):\n     if productlist and len(productlist) > 0:\n         data['input_array'] = {producttype : productlist}\n         if len(area_healpix) > 0:\n-            data['input_area_healpix'] = area_healpix\n+            data['input_area_healpix'] = [int(k) for k in area_healpix]\n     else:\n         data['class_name'] = producttype\n         data['input_area'] = area\n",
                            "Merge branch 'belikov/hotfix/convertnumpy' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-26T11:15:25.000+00:00",
                            "07ebf33024c76d5b7a6dc52ce8e48c88235275e3"
                        ],
                        [
                            "@@ -1626,3 +1626,41 @@ def INTERSECT(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n         t2 = time.time()\n         print(t2 - t1)\n     return ret\n+\n+\n+def INTERSECT_SHAPELY(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n+    \"\"\" implementation of INTERSECT_SHAPELY \"\"\"\n+    from euclid.util.IntersectShapely import intersect_shapely\n+    inp_area = kwargs.get('inp_area', None)\n+    inp_data_type = kwargs.get('inp_data_type', None)\n+    inp_data_productid = kwargs.get('inp_data_productid', None)\n+    getids = kwargs.get('getids', False)\n+    ret = []\n+    input_area = []\n+    #shapely works with %\n+    pr_min = pr_min * 100.0\n+    pr_max = pr_max * 100.0\n+    if inp_data_type and inp_data_productid:\n+        inp_obj_sel = getlongattr(dataproduct[inp_data_type], OBJECTID_PATH) == inp_data_productid\n+        if len(inp_obj_sel) > 0:\n+            out_arr = []\n+            out_arr = getpolygons(inp_obj_sel[0], inp_data_type, out_arr)\n+            input_area = []\n+            if len(out_arr) > 0:\n+                for i_arr in out_arr:\n+                    for j_v in i_arr.Vertex:\n+                        input_area = fill_inpbox(input_area, j_v)\n+    elif inp_area:\n+        input_area = inp_area\n+    else:\n+        return ret\n+    if len(input_area) > 0:\n+        result_true, result_false = intersect_shapely(input_area, data_type, pr_min, pr_max)\n+        for dpd_i in result_true:\n+            if getids:\n+                ret.append(result_true[dpd_i].dpd_product_id)\n+            else:\n+                dpd_dp_i = dataproduct[data_type](object_id=dpd_i)\n+                if dpd_dp_i:\n+                    ret.append(dpd_dp_i)\n+    return ret\n",
                            "Merge branch 'belikov/feature/intersectshapely' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-21T08:51:35.000+00:00",
                            "08d188979a7168303288bc0116c6e657c0ab0556"
                        ],
                        [
                            "@@ -1637,6 +1637,9 @@ def INTERSECT_SHAPELY(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n     getids = kwargs.get('getids', False)\n     ret = []\n     input_area = []\n+    #shapely works with %\n+    pr_min = pr_min * 100.0\n+    pr_max = pr_max * 100.0\n     if inp_data_type and inp_data_productid:\n         inp_obj_sel = getlongattr(dataproduct[inp_data_type], OBJECTID_PATH) == inp_data_productid\n         if len(inp_obj_sel) > 0:\n@@ -1653,7 +1656,6 @@ def INTERSECT_SHAPELY(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n         return ret\n     if len(input_area) > 0:\n         result_true, result_false = intersect_shapely(input_area, data_type, pr_min, pr_max)\n-        #print(f'{result_true} {result_false}')\n         for dpd_i in result_true:\n             if getids:\n                 ret.append(result_true[dpd_i].dpd_product_id)\n",
                            "final version",
                            "Andrey Belikov",
                            "2023-07-20T19:12:11.000+02:00",
                            "fcc35a312bde7bf2fb20466695a0d46bb44497e0"
                        ],
                        [
                            "@@ -32,7 +32,6 @@ from euclid.database.helpers import getlongattr\n from euclid.util.MOCHPUtils import MOCHPUtils\n from euclid.dm_bindings import dataproduct, moc_dictionary, polygon_dictionary\n from euclid.util.utils import get_hostport, getauthorization\n-from euclid.util.IntersectShapely import intersect_shapely\n \n try:\n     _create_unverified_https_context = ssl._create_unverified_context\n@@ -1631,6 +1630,7 @@ def INTERSECT(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n \n def INTERSECT_SHAPELY(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n     \"\"\" implementation of INTERSECT_SHAPELY \"\"\"\n+    from euclid.util.IntersectShapely import intersect_shapely\n     inp_area = kwargs.get('inp_area', None)\n     inp_data_type = kwargs.get('inp_data_type', None)\n     inp_data_productid = kwargs.get('inp_data_productid', None)\n@@ -1646,13 +1646,14 @@ def INTERSECT_SHAPELY(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n             if len(out_arr) > 0:\n                 for i_arr in out_arr:\n                     for j_v in i_arr.Vertex:\n-                        input_area = fill_inpbox(inp_box, j_v)\n+                        input_area = fill_inpbox(input_area, j_v)\n     elif inp_area:\n         input_area = inp_area\n     else:\n         return ret\n     if len(input_area) > 0:\n         result_true, result_false = intersect_shapely(input_area, data_type, pr_min, pr_max)\n+        #print(f'{result_true} {result_false}')\n         for dpd_i in result_true:\n             if getids:\n                 ret.append(result_true[dpd_i].dpd_product_id)\n",
                            "avoid circular import",
                            "Andrey Belikov",
                            "2023-07-20T18:53:40.000+02:00",
                            "6ffffe9a1f4fe72f7f680f320c0942b8473114ca"
                        ],
                        [
                            "@@ -1655,7 +1655,7 @@ def INTERSECT_SHAPELY(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n         result_true, result_false = intersect_shapely(input_area, data_type, pr_min, pr_max)\n         for dpd_i in result_true:\n             if getids:\n-                ret.append(result_true[dpd_i][\"dpd_product_id\"])\n+                ret.append(result_true[dpd_i].dpd_product_id)\n             else:\n                 dpd_dp_i = dataproduct[data_type](object_id=dpd_i)\n                 if dpd_dp_i:\n",
                            "proper access to value",
                            "Andrey Belikov",
                            "2023-07-19T23:22:07.000+02:00",
                            "577ddec731f0cf95b7598329fea560d0fc784fca"
                        ],
                        [
                            "@@ -1637,7 +1637,6 @@ def INTERSECT_SHAPELY(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n     getids = kwargs.get('getids', False)\n     ret = []\n     input_area = []\n-    t1 = time.time()\n     if inp_data_type and inp_data_productid:\n         inp_obj_sel = getlongattr(dataproduct[inp_data_type], OBJECTID_PATH) == inp_data_productid\n         if len(inp_obj_sel) > 0:\n",
                            "syntax",
                            "Andrey Belikov",
                            "2023-07-16T21:23:33.000+02:00",
                            "25590865af437bc887e29f57c48f0f938b0a6e02"
                        ],
                        [
                            "@@ -1634,9 +1634,6 @@ def INTERSECT_SHAPELY(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n     inp_area = kwargs.get('inp_area', None)\n     inp_data_type = kwargs.get('inp_data_type', None)\n     inp_data_productid = kwargs.get('inp_data_productid', None)\n-    reverse = kwargs.get('reverse', False)\n-    order = kwargs.get('order', 13)\n-    productid = kwargs.get('productid', False)\n     getids = kwargs.get('getids', False)\n     ret = []\n     input_area = []\n@@ -1661,7 +1658,7 @@ def INTERSECT_SHAPELY(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n             if getids:\n                 ret.append(result_true[dpd_i][\"dpd_product_id\"])\n             else:\n-                dpd_dp_i = dataproduct[data_type](object_id=dpd_i)\\\n+                dpd_dp_i = dataproduct[data_type](object_id=dpd_i)\n                 if dpd_dp_i:\n                     ret.append(dpd_dp_i)\n     return ret\n",
                            "typo",
                            "Andrey Belikov",
                            "2023-07-16T20:20:34.000+02:00",
                            "77c07d0a89d01a0cc46d42b839d827ca33498dfa"
                        ],
                        [
                            "@@ -1628,6 +1628,7 @@ def INTERSECT(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n         print(t2 - t1)\n     return ret\n \n+\n def INTERSECT_SHAPELY(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n     \"\"\" implementation of INTERSECT_SHAPELY \"\"\"\n     inp_area = kwargs.get('inp_area', None)\n",
                            "Merge branch 'assist/autoformat/belikov/feature/intersectshapely/85824f55' into 'belikov/feature/intersectshapely'",
                            "Andrey Belikov",
                            "2023-07-16T17:52:50.000+00:00",
                            "1a6f5977620379223184eeb2108552c404a70d4f"
                        ],
                        [
                            "@@ -1628,6 +1628,7 @@ def INTERSECT(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n         print(t2 - t1)\n     return ret\n \n+\n def INTERSECT_SHAPELY(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n     \"\"\" implementation of INTERSECT_SHAPELY \"\"\"\n     inp_area = kwargs.get('inp_area', None)\n",
                            "Auto-format files with autopep8",
                            "CI Bot",
                            "2023-07-16T17:51:12.000+00:00",
                            "f07d4d040b93b7164ef90f5e2f006612864ea428"
                        ],
                        [
                            "@@ -32,6 +32,7 @@ from euclid.database.helpers import getlongattr\n from euclid.util.MOCHPUtils import MOCHPUtils\n from euclid.dm_bindings import dataproduct, moc_dictionary, polygon_dictionary\n from euclid.util.utils import get_hostport, getauthorization\n+from euclid.util.IntersectShapely import intersect_shapely\n \n try:\n     _create_unverified_https_context = ssl._create_unverified_context\n@@ -1626,3 +1627,40 @@ def INTERSECT(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n         t2 = time.time()\n         print(t2 - t1)\n     return ret\n+\n+def INTERSECT_SHAPELY(pr_min, pr_max, data_type, limit_id=None, **kwargs):\n+    \"\"\" implementation of INTERSECT_SHAPELY \"\"\"\n+    inp_area = kwargs.get('inp_area', None)\n+    inp_data_type = kwargs.get('inp_data_type', None)\n+    inp_data_productid = kwargs.get('inp_data_productid', None)\n+    reverse = kwargs.get('reverse', False)\n+    order = kwargs.get('order', 13)\n+    productid = kwargs.get('productid', False)\n+    getids = kwargs.get('getids', False)\n+    ret = []\n+    input_area = []\n+    t1 = time.time()\n+    if inp_data_type and inp_data_productid:\n+        inp_obj_sel = getlongattr(dataproduct[inp_data_type], OBJECTID_PATH) == inp_data_productid\n+        if len(inp_obj_sel) > 0:\n+            out_arr = []\n+            out_arr = getpolygons(inp_obj_sel[0], inp_data_type, out_arr)\n+            input_area = []\n+            if len(out_arr) > 0:\n+                for i_arr in out_arr:\n+                    for j_v in i_arr.Vertex:\n+                        input_area = fill_inpbox(inp_box, j_v)\n+    elif inp_area:\n+        input_area = inp_area\n+    else:\n+        return ret\n+    if len(input_area) > 0:\n+        result_true, result_false = intersect_shapely(input_area, data_type, pr_min, pr_max)\n+        for dpd_i in result_true:\n+            if getids:\n+                ret.append(result_true[dpd_i][\"dpd_product_id\"])\n+            else:\n+                dpd_dp_i = dataproduct[data_type](object_id=dpd_i)\\\n+                if dpd_dp_i:\n+                    ret.append(dpd_dp_i)\n+    return ret\n",
                            "add INTERSECT_SHAPELY",
                            "Andrey Belikov",
                            "2023-07-16T19:47:59.000+02:00",
                            "4cc6acf309f9303d3131a0a16e7fe91089963127"
                        ],
                        [
                            "@@ -133,7 +133,7 @@ def call_healpix(area, area_healpix, **kwargs):\n     try:\n         connection.request('PUT', request_url, headers=headers, body=data_json)\n     except socket.timeout:\n-        error = 'connection timed out after {}'.format(self.timeout)\n+        error = 'connection timed out after {}'.format(timeout)\n     except socket.gaierror:\n         error = 'connection failed to {}'.format(request_url)\n     except http.client.CannotSendRequest as e:\n@@ -190,7 +190,7 @@ def call_checklog(dss_server, username, password, timeout=30.0):\n     try:\n         connection.request('GET', request_url, headers=headers)\n     except socket.timeout:\n-        error = 'connection timed out after {}'.format(self.timeout)\n+        error = 'connection timed out after {}'.format(timeout)\n     except socket.gaierror:\n         error = 'connection failed to {}'.format(request_url)\n     except http.client.CannotSendRequest as e:\n@@ -1221,7 +1221,8 @@ def INTERSECT_DB(healpix_array, healpix_array_5, productid=False, objtype=None,\n             if objtype in result_hp:\n                 result_intersect[objtype] = {}\n                 for dp_id in result_hp[objtype]:\n-                    result_intersect[objtype][dp_id] = result_hp[objtype][dp_id]\n+                    obj_id = result_hp['convert_ids'][dp_id]\n+                    result_intersect[objtype][obj_id] = result_hp[objtype][dp_id]\n             tf3 = time.time()\n             Message(f'Total time new: {tf2 - tf1}, {tf3 - tf2}, {tf3 - tf1}')\n     return result_intersect\n@@ -1585,11 +1586,11 @@ def intersectcycle(pr_min, pr_max, order, reverse, healpix_area13, result_inters\n         for objid in result_intersect[dtype]:\n             if order == 13:\n                 if result_intersect[dtype][objid] >= pr_min and result_intersect[dtype][objid] <= pr_max:\n-                    out_i = getdataproduct(dtype, objid)\n-                    if out_i:\n-                        if getids:\n-                            ret.append(out_i.object_id.unquote())\n-                        else:\n+                    if getids:\n+                        ret.append(objid)\n+                    else:\n+                        out_i = getdataproduct(dtype, objid)\n+                        if out_i:\n                             ret.append(out_i)\n             else:\n                 ret.append(intersectcycle2(pr_min, pr_max, dtype, objid, reverse, healpix_area13, getids))\n",
                            "Merge branch 'belikov/feature/intersect' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-06-21T07:25:53.000+00:00",
                            "9bb20e9cd17825bfe31766b8f073dbcf168a8ddc"
                        ]
                    ],
                    "services/general/query_helper.py": [
                        [
                            "@@ -14,7 +14,7 @@ from common.database.DBProperties import link_list_property, desc_list_property\n from euclid.config.Environment import Env\n from euclid.database.helpers import getlongattr\n from euclid.exceptions import EasDpsConfigurationError, EasDpsDataModelError\n-from euclid.util.Healpix import CONTAINS, CONTAINS_BB, INTERSECT, decodearea\n+from euclid.util.Healpix import CONTAINS, CONTAINS_BB, INTERSECT, INTERSECT_SHAPELY, decodearea\n \n from euclid.dm_bindings import dataproduct\n \n@@ -222,6 +222,16 @@ def getspatial(class_name, inp_query, limit_id=None, limit_oid=None, getids=Fals\n     elif inp_query.startswith('CONTAINS'):\n         function_type = 'CONTAINS'\n         mod_query = inp_query.replace('CONTAINS', '')\n+    elif inp_query.startswith('INTERSECT_SHAPELY'):\n+        function_type = 'INTERSECT_SHAPELY'\n+        mod_query = inp_query.replace('INTERSECT_SHAPELY', '')\n+        start_pr = mod_query.find(\"(\")\n+        end_pr = mod_query.find(\")\")\n+        if start_pr > -1 and end_pr > -1:\n+            values_pr = mod_query[start_pr + 1:end_pr].split(\",\")\n+            pr_min = 0.01 * float(values_pr[0].strip())\n+            pr_max = 0.01 * float(values_pr[1].strip())\n+        mod_query = mod_query[end_pr + 1:]\n     elif inp_query.startswith('INTERSECT'):\n         function_type = 'INTERSECT'\n         mod_query = inp_query.replace('INTERSECT', '')\n@@ -247,6 +257,13 @@ def getspatial(class_name, inp_query, limit_id=None, limit_oid=None, getids=Fals\n                 limit_id=limit_oid, getids=getids)\n         else:\n             ret = CONTAINS_BB(class_name, inp_area=function_input, limit_id=limit_oid, getids=getids)\n+    elif function_type == 'INTERSECT_SHAPELY':\n+        if function_id:\n+            ret = INTERSECT_SHAPELY(pr_min, pr_max, class_name, inp_data_type=function_input,\n+                            inp_data_productid=function_id, limit_id=limit_id, reverse=reverse, getids=getids)\n+        else:\n+            ret = INTERSECT_SHAPELY(pr_min, pr_max, class_name, inp_area=function_input,\n+                limit_id=limit_id, reverse=reverse, getids=getids)\n     elif function_type == 'INTERSECT':\n         if function_id:\n             ret = INTERSECT(pr_min, pr_max, class_name, inp_data_type=function_input,\n",
                            "Merge branch 'belikov/feature/intersectshapely' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-21T08:51:35.000+00:00",
                            "08d188979a7168303288bc0116c6e657c0ab0556"
                        ],
                        [
                            "@@ -986,6 +986,7 @@ def find_object(class_name, spatial_query, fields, attributes, timedict_inp, all\n         return class_name, error_output, ret_res, ''\n     fields_decompose, error_output = check_fields_array(dataproduct[class_name], fields)\n     if error_output:\n+        class_name = 'ERRORMESSAGE'\n         return class_name, error_output, ret_res, ''\n     if len(fields_decompose) > 0:\n         allow_array = True\n",
                            "Merge branch 'belikov/hotfix/attributeerror' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-17T09:01:36.000+00:00",
                            "0a3136888804ecaad7c1dbefbff9c965947c0ce3"
                        ],
                        [
                            "@@ -14,7 +14,7 @@ from common.database.DBProperties import link_list_property, desc_list_property\n from euclid.config.Environment import Env\n from euclid.database.helpers import getlongattr\n from euclid.exceptions import EasDpsConfigurationError, EasDpsDataModelError\n-from euclid.util.Healpix import CONTAINS, CONTAINS_BB, INTERSECT, decodearea\n+from euclid.util.Healpix import CONTAINS, CONTAINS_BB, INTERSECT, INTERSECT_SHAPELY, decodearea\n \n from euclid.dm_bindings import dataproduct\n \n",
                            "add import",
                            "Andrey Belikov",
                            "2023-07-16T19:50:08.000+02:00",
                            "85824f55ee1139bccd0d626fb95b9ce169fa80a0"
                        ],
                        [
                            "@@ -222,6 +222,16 @@ def getspatial(class_name, inp_query, limit_id=None, limit_oid=None, getids=Fals\n     elif inp_query.startswith('CONTAINS'):\n         function_type = 'CONTAINS'\n         mod_query = inp_query.replace('CONTAINS', '')\n+    elif inp_query.startswith('INTERSECT_SHAPELY'):\n+        function_type = 'INTERSECT_SHAPELY'\n+        mod_query = inp_query.replace('INTERSECT_SHAPELY', '')\n+        start_pr = mod_query.find(\"(\")\n+        end_pr = mod_query.find(\")\")\n+        if start_pr > -1 and end_pr > -1:\n+            values_pr = mod_query[start_pr + 1:end_pr].split(\",\")\n+            pr_min = 0.01 * float(values_pr[0].strip())\n+            pr_max = 0.01 * float(values_pr[1].strip())\n+        mod_query = mod_query[end_pr + 1:]\n     elif inp_query.startswith('INTERSECT'):\n         function_type = 'INTERSECT'\n         mod_query = inp_query.replace('INTERSECT', '')\n@@ -247,6 +257,13 @@ def getspatial(class_name, inp_query, limit_id=None, limit_oid=None, getids=Fals\n                 limit_id=limit_oid, getids=getids)\n         else:\n             ret = CONTAINS_BB(class_name, inp_area=function_input, limit_id=limit_oid, getids=getids)\n+    elif function_type == 'INTERSECT_SHAPELY':\n+        if function_id:\n+            ret = INTERSECT_SHAPELY(pr_min, pr_max, class_name, inp_data_type=function_input,\n+                            inp_data_productid=function_id, limit_id=limit_id, reverse=reverse, getids=getids)\n+        else:\n+            ret = INTERSECT_SHAPELY(pr_min, pr_max, class_name, inp_area=function_input,\n+                limit_id=limit_id, reverse=reverse, getids=getids)\n     elif function_type == 'INTERSECT':\n         if function_id:\n             ret = INTERSECT(pr_min, pr_max, class_name, inp_data_type=function_input,\n",
                            "add INTERSECT_SHAPELY",
                            "Andrey Belikov",
                            "2023-07-16T19:47:59.000+02:00",
                            "4cc6acf309f9303d3131a0a16e7fe91089963127"
                        ],
                        [
                            "@@ -986,6 +986,7 @@ def find_object(class_name, spatial_query, fields, attributes, timedict_inp, all\n         return class_name, error_output, ret_res, ''\n     fields_decompose, error_output = check_fields_array(dataproduct[class_name], fields)\n     if error_output:\n+        class_name = 'ERRORMESSAGE'\n         return class_name, error_output, ret_res, ''\n     if len(fields_decompose) > 0:\n         allow_array = True\n",
                            "trigger error",
                            "Andrey Belikov",
                            "2023-07-15T17:17:58.000+02:00",
                            "b332995e9e50461481c635094c2a9bb2cd00759f"
                        ],
                        [
                            "@@ -516,12 +516,16 @@ def get_fullquery(input_class, attribute_path):\n def check_fields_array(input_class, fields):\n     \"\"\" check if fields contain arrays \"\"\"\n     output_fields = {}\n+    error = ''\n     for field in fields:\n         if not field.startswith('_') and not field.startswith('+'):\n-            cl, atr = get_fullquery(input_class, field)\n+            try:\n+                cl, atr = get_fullquery(input_class, field)\n+            except AttributeError as e:\n+                return output_fields, str(e)\n             if len(cl) > 1:\n                 output_fields[field] = [cl, atr]\n-    return output_fields\n+    return output_fields, error\n \n \n def get_dbselect(class_name, attribute, predicat, condition):\n@@ -980,7 +984,9 @@ def find_object(class_name, spatial_query, fields, attributes, timedict_inp, all\n         error_output = f'Given data product type - {class_name} - not in predefined list of data products types'\n         class_name = 'ERRORMESSAGE'\n         return class_name, error_output, ret_res, ''\n-    fields_decompose = check_fields_array(dataproduct[class_name], fields)\n+    fields_decompose, error_output = check_fields_array(dataproduct[class_name], fields)\n+    if error_output:\n+        return class_name, error_output, ret_res, ''\n     if len(fields_decompose) > 0:\n         allow_array = True\n     if allow_array:\n",
                            "Merge branch 'belikov/hotfix/attributeerror' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-15T14:48:09.000+00:00",
                            "f8d3614a107f56be95ab24fda1fc586c877178b8"
                        ],
                        [
                            "@@ -516,12 +516,16 @@ def get_fullquery(input_class, attribute_path):\n def check_fields_array(input_class, fields):\n     \"\"\" check if fields contain arrays \"\"\"\n     output_fields = {}\n+    error = ''\n     for field in fields:\n         if not field.startswith('_') and not field.startswith('+'):\n-            cl, atr = get_fullquery(input_class, field)\n+            try:\n+                cl, atr = get_fullquery(input_class, field)\n+            except AttributeError as e:\n+                return output_fields, str(e)\n             if len(cl) > 1:\n                 output_fields[field] = [cl, atr]\n-    return output_fields\n+    return output_fields, error\n \n \n def get_dbselect(class_name, attribute, predicat, condition):\n@@ -980,7 +984,9 @@ def find_object(class_name, spatial_query, fields, attributes, timedict_inp, all\n         error_output = f'Given data product type - {class_name} - not in predefined list of data products types'\n         class_name = 'ERRORMESSAGE'\n         return class_name, error_output, ret_res, ''\n-    fields_decompose = check_fields_array(dataproduct[class_name], fields)\n+    fields_decompose, error_output = check_fields_array(dataproduct[class_name], fields)\n+    if error_output:\n+        return class_name, error_output, ret_res, ''\n     if len(fields_decompose) > 0:\n         allow_array = True\n     if allow_array:\n",
                            "catch AttributeError",
                            "Andrey Belikov",
                            "2023-07-15T12:00:53.000+02:00",
                            "b618f26e99ea594f51fa393b54eb9d56f2d0f07b"
                        ],
                        [
                            "@@ -233,6 +233,7 @@ def getspatial(class_name, inp_query, limit_id=None, limit_oid=None, getids=Fals\n             pr_max = 0.01 * float(values_pr[1].strip())\n         mod_query = mod_query[end_pr + 1:]\n     function_input, function_id = getspatialinput(mod_query)\n+    print(f'getspatial {function_type} {function_id} {class_name} {function_input}')\n     if function_type == 'CONTAINS':\n         if function_id:\n             ret = CONTAINS(class_name, inp_data_type=function_input, inp_data_productid=function_id,\n@@ -1000,6 +1001,7 @@ def find_object(class_name, spatial_query, fields, attributes, timedict_inp, all\n             return class_name, error_output, ret_res, ''\n \n     t2 = time.time()\n+    print(f'Input: {class_name} {spatial_query} {other_attributes}')\n     ret_res = find_object_spatial(class_name, spatial_query, other_attributes, ret_res, timedict, fields=fields)\n     if remove_fields:\n         ret_res = modify_result(fields_original, ret_res)\n",
                            "Merge branch 'belikov/feature/intersect' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-06-21T07:25:53.000+00:00",
                            "9bb20e9cd17825bfe31766b8f073dbcf168a8ddc"
                        ]
                    ],
                    "services/general/XmlBaseEuclid.py": [
                        [
                            "@@ -835,25 +835,21 @@ class XmlBaseEuclid(HtmlBase):\n \n     def give_healpix_coors(self, res_arr, filename, jobid):\n         \"\"\" healpixes return \"\"\"\n+        from euclid.util.Healpix import GETHEALPIX_DB\n         res_xml = ''\n         res_healpix = {}\n-        c = database.cursor()\n         for ing_i in res_arr:\n             id_out = ''\n-            if ing_i.__class__.__name__ == 'Tile':\n+            id_type = ing_i.__class__.__name__\n+            if id_type == 'Tile':\n                 id_out = ing_i.TileIdentifier\n-            elif ing_i.__class__.__name__.startswith('Dpd'):\n+            elif id_type.startswith('Dpd'):\n                 id_out = ing_i.Header.ProductId.LimitedString\n             if id_out:\n                 out_hp = []\n-                sql = '''SELECT HEALPIX from AWOPER.AWEHEALPIX where DPD_PRODUCT_ID='%s' ''' % (id_out)\n-                c.execute(sql)\n-                res = c.fetchall()\n+                res = GETHEALPIX_DB(id_type, productid=id_out)\n                 if len(res) > 0:\n-                    for row in res:\n-                        out_hp.append(row[0])\n-                    res_healpix[id_out] = copy(out_hp)\n-        c.close()\n+                    res_healpix[id_out] = res\n         res_xml = 'Header.ProductId.LimitedString,HEALPIX\\n'\n         for dp_id in res_healpix:\n             hp_list_id = ''\n",
                            "Merge branch 'belikov/hotfix/givehealpix' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-21T05:44:33.000+00:00",
                            "682af14640ba52efa6412ae7d178d2d937ca0e57"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/DEST/dest_ec_usersmaster.sh": [
                        [
                            "@@ -1 +1,4 @@\n-sqlplus /nolog @scripts/dest_ec_usersmaster_create_main.sql\n+#!/bin/bash\n+DESTUSER_defpwd=`tr -dc A-Za-z0-9 < /dev/urandom | head -c 20`\n+DESTUSER_defpwd=randpwd${DESTUSER_defpwd}\n+sqlplus /nolog @scripts/dest_ec_usersmaster_create_main.sql ${DESTUSER_defpwd}\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Andrey Belikov",
                            "2023-07-19T13:00:47.000+00:00",
                            "cea8b7e397575ecdb8c5ca0801037ea629305abf"
                        ],
                        [
                            "@@ -0,0 +1 @@\n+sqlplus /nolog @scripts/dest_ec_usersmaster_create_main.sql\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ],
                        [
                            "@@ -0,0 +1 @@\n+sqlplus /nolog @scripts/dest_ec_usersmaster_create_main.sql\n",
                            "toolbox: oracle SQLs and PL/SQLs to manage users synch between different euclid database instances",
                            "Andrey Tsyganov",
                            "2023-07-12T17:49:32.000+02:00",
                            "dede8cb730f5ee51bece0be739d28043c16cdb00"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/DEST/scripts/dest_ec_usersmaster_create_main.sql": [
                        [
                            "@@ -1,10 +1,10 @@\n set verify off\n \n---get user input\n+--Get the table name from the user\n ACCEPT ec_usersmaster_dest_username CHAR DEFAULT 'EC_USERSMASTER_DEST' PROMPT 'Users master username for this instance (default:  EC_USERSMASTER_DEST):>'\n-ACCEPT ec_usersmaster_dest_username_pwd CHAR DEFAULT 'cT9ywyAaoli5UVhK5leU3EXMz54OxC' PROMPT 'password (default: cT9ywyAaoli5UVhK5leU3EXMz54OxC):>'\n+ACCEPT ec_usersmaster_dest_username_pwd CHAR DEFAULT '&1' PROMPT 'password (default: &1):>'\n ACCEPT ec_usersmaster_source_username CHAR DEFAULT 'EC_USERSMASTER_SRC' PROMPT 'Provide source users master username (default: EC_USERSMASTER_SRC):>'\n-ACCEPT ec_usersmaster_source_username_pwd CHAR DEFAULT 'NTGWRVsZSiRYxcYQ8qaSX7368jkqbT' PROMPT 'password (default: NTGWRVsZSiRYxcYQ8qaSX7368jkqbT):>'\n+ACCEPT ec_usersmaster_source_username_pwd CHAR PROMPT '&ec_usersmaster_source_username password:>'\n ACCEPT ec_usersmaster_dest_tns CHAR DEFAULT 'ECUSERS_SOURCE_TNS' PROMPT 'Source connection TNS name or full tns connection string (default:ECUSERS_SOURCE_TNS):>'\n \n connect / as sysdba\n@@ -37,7 +37,7 @@ parameters:\n description : \n     this procedure creates or alters ORACLE user for euclid AWOPER schema\n     The procedure does not insert data to the AWOPER.AWEUSERS table it is \n-    done with the call of &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.synch_users_from_source\n+    done with the call of &ec_usersmaster_dest_username.USERSMASTER_ECPKG_DEST.synch_users_from_source\n     \n */\n \n@@ -63,22 +63,22 @@ BEGIN\n         EXECUTE IMMEDIATE l_sql_create_user2;\n         EXECUTE IMMEDIATE l_sql_alter_user_pwd;\n         \n-        &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: new user is created: ' || p_username, '', l_run_date);\n+        &ec_usersmaster_dest_username.USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: new user is created: ' || p_username, '', l_run_date);\n     END IF;\n     \n     IF p_mode = 2 THEN\n         EXECUTE IMMEDIATE l_sql_alter_user_pwd;\n-        &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: alter password: ' || p_username, '', l_run_date);\n+        &ec_usersmaster_dest_username.USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: alter password: ' || p_username, '', l_run_date);\n     END IF;\n     \n     IF p_mode = 3 THEN\n         EXECUTE IMMEDIATE l_sql_alter_user_lock;\n-        &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: lock account: ' || p_username, '', l_run_date);\n+        &ec_usersmaster_dest_username.USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: lock account: ' || p_username, '', l_run_date);\n     END IF;\n \n     IF p_mode = 4 THEN\n         EXECUTE IMMEDIATE l_sql_alter_user_unlock;\n-        &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: unlock account: ' || p_username, '', l_run_date);\n+        &ec_usersmaster_dest_username.USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: unlock account: ' || p_username, '', l_run_date);\n     END IF;\n \n     COMMIT;\n@@ -89,29 +89,29 @@ GRANT EXECUTE ON sys.ecuser_manager TO &ec_usersmaster_dest_username;\n connect &ec_usersmaster_dest_username/&ec_usersmaster_dest_username_pwd\n @@dest_ec_usersmaster_create_schema_objects.sql &ec_usersmaster_source_username &ec_usersmaster_source_username_pwd &ec_usersmaster_dest_tns\n @@dest_USERSMASTER_ECPKG.sql\n-GRANT EXECUTE ON &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST TO SYS;\n+GRANT EXECUTE ON EC_USERSMASTER_DEST.USERSMASTER_ECPKG_DEST TO SYS;\n \n disconnect\n connect  / as sysdba\n ALTER PROCEDURE sys.ecuser_manager COMPILE;\n-ALTER PACKAGE &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST COMPILE PACKAGE; \n-ALTER PACKAGE &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST COMPILE BODY; \n+ALTER PACKAGE EC_USERSMASTER_DEST.USERSMASTER_ECPKG_DEST COMPILE PACKAGE; \n+ALTER PACKAGE EC_USERSMASTER_DEST.USERSMASTER_ECPKG_DEST COMPILE BODY; \n \n disconnect\n connect &ec_usersmaster_dest_username/&ec_usersmaster_dest_username_pwd\n \n BEGIN\n     dbms_scheduler.create_job (\n-      job_name => '&ec_usersmaster_dest_username..EUCLID_USERS_SYNCH_FROM_SOURCE'\n+      job_name => '&ec_usersmaster_dest_username.EUCLID_USERS_SYNCH_FROM_SOURCE'\n       ,job_type => 'PLSQL_BLOCK'\n-      ,job_action => 'BEGIN &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.synch_users_from_source; END; '\n+      ,job_action => 'BEGIN &ec_usersmaster_dest_username.USERSMASTER_ECPKG_DEST.synch_users_from_source; END; '\n       ,start_date => SYSDATE\n       ,repeat_interval => 'FREQ=MINUTELY;INTERVAL=30;'\n       ,enabled => TRUE\n       ,end_date => NULL\n       ,job_class => 'DEFAULT_JOB_CLASS'\n       ,comments => 'runs synchronisation between soruce EUCLID users tables and current destination');\n-    dbms_scheduler.enable('&ec_usersmaster_dest_username..EUCLID_USERS_SYNCH_FROM_SOURCE');      \n+    dbms_scheduler.enable('&ec_usersmaster_dest_username.EUCLID_USERS_SYNCH_FROM_SOURCE');      \n END;\n /\n \n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Andrey Belikov",
                            "2023-07-19T13:00:47.000+00:00",
                            "cea8b7e397575ecdb8c5ca0801037ea629305abf"
                        ],
                        [
                            "@@ -0,0 +1,120 @@\n+set verify off\n+\n+--get user input\n+ACCEPT ec_usersmaster_dest_username CHAR DEFAULT 'EC_USERSMASTER_DEST' PROMPT 'Users master username for this instance (default:  EC_USERSMASTER_DEST):>'\n+ACCEPT ec_usersmaster_dest_username_pwd CHAR DEFAULT 'cT9ywyAaoli5UVhK5leU3EXMz54OxC' PROMPT 'password (default: cT9ywyAaoli5UVhK5leU3EXMz54OxC):>'\n+ACCEPT ec_usersmaster_source_username CHAR DEFAULT 'EC_USERSMASTER_SRC' PROMPT 'Provide source users master username (default: EC_USERSMASTER_SRC):>'\n+ACCEPT ec_usersmaster_source_username_pwd CHAR DEFAULT 'NTGWRVsZSiRYxcYQ8qaSX7368jkqbT' PROMPT 'password (default: NTGWRVsZSiRYxcYQ8qaSX7368jkqbT):>'\n+ACCEPT ec_usersmaster_dest_tns CHAR DEFAULT 'ECUSERS_SOURCE_TNS' PROMPT 'Source connection TNS name or full tns connection string (default:ECUSERS_SOURCE_TNS):>'\n+\n+connect / as sysdba\n+@@dest_ec_usersmaster_create_user.sql &ec_usersmaster_dest_username &ec_usersmaster_dest_username_pwd\n+\n+--AUDIT INSERT, UPDATE, DELETE ON AWOPER.AWEUSERS BY ACCESS;\n+--AUDIT INSERT, UPDATE, DELETE ON AWOPER.AWEPROJECTS BY ACCESS;\n+--AUDIT INSERT, UPDATE, DELETE ON AWOPER.AWEPROJECTUSERS BY ACCESS;\n+--AUDIT INSERT, UPDATE, DELETE ON AWOPER.AWEEUCLIDUSERS BY ACCESS;\n+\n+CREATE OR REPLACE PROCEDURE SYS.ecuser_manager (\n+      p_uuid       IN VARCHAR2\n+    , p_mode       IN NUMBER\n+    , p_username   IN VARCHAR2\n+    , p_user_pwd   IN VARCHAR2\n+    , p_ec_user_id IN NUMBER\n+    ) \n+AS\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters:\n+    p_uuid  - unique uuid to write message into the log. The caller must have it already. \n+    p_mode  - modes of the procedure:\n+                1: CREATE USER\n+                2: ALTER USER\n+                3: LOCK USER\n+                4: UNLOCK USER\n+                \n+description : \n+    this procedure creates or alters ORACLE user for euclid AWOPER schema\n+    The procedure does not insert data to the AWOPER.AWEUSERS table it is \n+    done with the call of &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.synch_users_from_source\n+    \n+*/\n+\n+    PRAGMA AUTONOMOUS_TRANSACTION;\n+    l_sql_create_user1      VARCHAR2(4000);\n+    l_sql_create_user2      VARCHAR2(4000);\n+    l_sql_create_user3      VARCHAR2(4000);\n+    l_sql_alter_user_pwd    VARCHAR2(4000);\n+    l_sql_alter_user_lock   VARCHAR2(4000);\n+    l_sql_alter_user_unlock VARCHAR2(4000);\n+    l_run_date              DATE := SYSDATE;\n+\n+BEGIN\n+    l_sql_create_user1      := 'CREATE USER '     || p_username || ' PROFILE AWNORMAL IDENTIFIED BY tmppwd DEFAULT TABLESPACE \"USERS\"';\n+    l_sql_create_user2      := 'GRANT AWUSER TO ' || p_username;\n+\n+    l_sql_alter_user_pwd    := 'ALTER USER '  || p_username || ' IDENTIFIED BY VALUES ''' || p_user_pwd || '''';\n+    l_sql_alter_user_lock   := 'ALTER USER '  || p_username || ' ACCOUNT LOCK';\n+    l_sql_alter_user_unlock := 'ALTER USER '  || p_username || ' ACCOUNT UNLOCK';\n+    \n+    IF p_mode = 1 THEN\n+        EXECUTE IMMEDIATE l_sql_create_user1;\n+        EXECUTE IMMEDIATE l_sql_create_user2;\n+        EXECUTE IMMEDIATE l_sql_alter_user_pwd;\n+        \n+        &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: new user is created: ' || p_username, '', l_run_date);\n+    END IF;\n+    \n+    IF p_mode = 2 THEN\n+        EXECUTE IMMEDIATE l_sql_alter_user_pwd;\n+        &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: alter password: ' || p_username, '', l_run_date);\n+    END IF;\n+    \n+    IF p_mode = 3 THEN\n+        EXECUTE IMMEDIATE l_sql_alter_user_lock;\n+        &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: lock account: ' || p_username, '', l_run_date);\n+    END IF;\n+\n+    IF p_mode = 4 THEN\n+        EXECUTE IMMEDIATE l_sql_alter_user_unlock;\n+        &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: unlock account: ' || p_username, '', l_run_date);\n+    END IF;\n+\n+    COMMIT;\n+END;\n+/\n+GRANT EXECUTE ON sys.ecuser_manager TO &ec_usersmaster_dest_username;\n+\n+connect &ec_usersmaster_dest_username/&ec_usersmaster_dest_username_pwd\n+@@dest_ec_usersmaster_create_schema_objects.sql &ec_usersmaster_source_username &ec_usersmaster_source_username_pwd &ec_usersmaster_dest_tns\n+@@dest_USERSMASTER_ECPKG.sql\n+GRANT EXECUTE ON &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST TO SYS;\n+\n+disconnect\n+connect  / as sysdba\n+ALTER PROCEDURE sys.ecuser_manager COMPILE;\n+ALTER PACKAGE &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST COMPILE PACKAGE; \n+ALTER PACKAGE &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST COMPILE BODY; \n+\n+disconnect\n+connect &ec_usersmaster_dest_username/&ec_usersmaster_dest_username_pwd\n+\n+BEGIN\n+    dbms_scheduler.create_job (\n+      job_name => '&ec_usersmaster_dest_username..EUCLID_USERS_SYNCH_FROM_SOURCE'\n+      ,job_type => 'PLSQL_BLOCK'\n+      ,job_action => 'BEGIN &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.synch_users_from_source; END; '\n+      ,start_date => SYSDATE\n+      ,repeat_interval => 'FREQ=MINUTELY;INTERVAL=30;'\n+      ,enabled => TRUE\n+      ,end_date => NULL\n+      ,job_class => 'DEFAULT_JOB_CLASS'\n+      ,comments => 'runs synchronisation between soruce EUCLID users tables and current destination');\n+    dbms_scheduler.enable('&ec_usersmaster_dest_username..EUCLID_USERS_SYNCH_FROM_SOURCE');      \n+END;\n+/\n+\n+disconnect\n+exit\n+\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ],
                        [
                            "@@ -0,0 +1,120 @@\n+set verify off\n+\n+--get user input\n+ACCEPT ec_usersmaster_dest_username CHAR DEFAULT 'EC_USERSMASTER_DEST' PROMPT 'Users master username for this instance (default:  EC_USERSMASTER_DEST):>'\n+ACCEPT ec_usersmaster_dest_username_pwd CHAR DEFAULT 'cT9ywyAaoli5UVhK5leU3EXMz54OxC' PROMPT 'password (default: cT9ywyAaoli5UVhK5leU3EXMz54OxC):>'\n+ACCEPT ec_usersmaster_source_username CHAR DEFAULT 'EC_USERSMASTER_SRC' PROMPT 'Provide source users master username (default: EC_USERSMASTER_SRC):>'\n+ACCEPT ec_usersmaster_source_username_pwd CHAR DEFAULT 'NTGWRVsZSiRYxcYQ8qaSX7368jkqbT' PROMPT 'password (default: NTGWRVsZSiRYxcYQ8qaSX7368jkqbT):>'\n+ACCEPT ec_usersmaster_dest_tns CHAR DEFAULT 'ECUSERS_SOURCE_TNS' PROMPT 'Source connection TNS name or full tns connection string (default:ECUSERS_SOURCE_TNS):>'\n+\n+connect / as sysdba\n+@@dest_ec_usersmaster_create_user.sql &ec_usersmaster_dest_username &ec_usersmaster_dest_username_pwd\n+\n+--AUDIT INSERT, UPDATE, DELETE ON AWOPER.AWEUSERS BY ACCESS;\n+--AUDIT INSERT, UPDATE, DELETE ON AWOPER.AWEPROJECTS BY ACCESS;\n+--AUDIT INSERT, UPDATE, DELETE ON AWOPER.AWEPROJECTUSERS BY ACCESS;\n+--AUDIT INSERT, UPDATE, DELETE ON AWOPER.AWEEUCLIDUSERS BY ACCESS;\n+\n+CREATE OR REPLACE PROCEDURE SYS.ecuser_manager (\n+      p_uuid       IN VARCHAR2\n+    , p_mode       IN NUMBER\n+    , p_username   IN VARCHAR2\n+    , p_user_pwd   IN VARCHAR2\n+    , p_ec_user_id IN NUMBER\n+    ) \n+AS\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters:\n+    p_uuid  - unique uuid to write message into the log. The caller must have it already. \n+    p_mode  - modes of the procedure:\n+                1: CREATE USER\n+                2: ALTER USER\n+                3: LOCK USER\n+                4: UNLOCK USER\n+                \n+description : \n+    this procedure creates or alters ORACLE user for euclid AWOPER schema\n+    The procedure does not insert data to the AWOPER.AWEUSERS table it is \n+    done with the call of &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.synch_users_from_source\n+    \n+*/\n+\n+    PRAGMA AUTONOMOUS_TRANSACTION;\n+    l_sql_create_user1      VARCHAR2(4000);\n+    l_sql_create_user2      VARCHAR2(4000);\n+    l_sql_create_user3      VARCHAR2(4000);\n+    l_sql_alter_user_pwd    VARCHAR2(4000);\n+    l_sql_alter_user_lock   VARCHAR2(4000);\n+    l_sql_alter_user_unlock VARCHAR2(4000);\n+    l_run_date              DATE := SYSDATE;\n+\n+BEGIN\n+    l_sql_create_user1      := 'CREATE USER '     || p_username || ' PROFILE AWNORMAL IDENTIFIED BY tmppwd DEFAULT TABLESPACE \"USERS\"';\n+    l_sql_create_user2      := 'GRANT AWUSER TO ' || p_username;\n+\n+    l_sql_alter_user_pwd    := 'ALTER USER '  || p_username || ' IDENTIFIED BY VALUES ''' || p_user_pwd || '''';\n+    l_sql_alter_user_lock   := 'ALTER USER '  || p_username || ' ACCOUNT LOCK';\n+    l_sql_alter_user_unlock := 'ALTER USER '  || p_username || ' ACCOUNT UNLOCK';\n+    \n+    IF p_mode = 1 THEN\n+        EXECUTE IMMEDIATE l_sql_create_user1;\n+        EXECUTE IMMEDIATE l_sql_create_user2;\n+        EXECUTE IMMEDIATE l_sql_alter_user_pwd;\n+        \n+        &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: new user is created: ' || p_username, '', l_run_date);\n+    END IF;\n+    \n+    IF p_mode = 2 THEN\n+        EXECUTE IMMEDIATE l_sql_alter_user_pwd;\n+        &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: alter password: ' || p_username, '', l_run_date);\n+    END IF;\n+    \n+    IF p_mode = 3 THEN\n+        EXECUTE IMMEDIATE l_sql_alter_user_lock;\n+        &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: lock account: ' || p_username, '', l_run_date);\n+    END IF;\n+\n+    IF p_mode = 4 THEN\n+        EXECUTE IMMEDIATE l_sql_alter_user_unlock;\n+        &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.add_log_record(p_uuid, 'sys.ecuser_manager', 'ORACLE USER: unlock account: ' || p_username, '', l_run_date);\n+    END IF;\n+\n+    COMMIT;\n+END;\n+/\n+GRANT EXECUTE ON sys.ecuser_manager TO &ec_usersmaster_dest_username;\n+\n+connect &ec_usersmaster_dest_username/&ec_usersmaster_dest_username_pwd\n+@@dest_ec_usersmaster_create_schema_objects.sql &ec_usersmaster_source_username &ec_usersmaster_source_username_pwd &ec_usersmaster_dest_tns\n+@@dest_USERSMASTER_ECPKG.sql\n+GRANT EXECUTE ON &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST TO SYS;\n+\n+disconnect\n+connect  / as sysdba\n+ALTER PROCEDURE sys.ecuser_manager COMPILE;\n+ALTER PACKAGE &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST COMPILE PACKAGE; \n+ALTER PACKAGE &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST COMPILE BODY; \n+\n+disconnect\n+connect &ec_usersmaster_dest_username/&ec_usersmaster_dest_username_pwd\n+\n+BEGIN\n+    dbms_scheduler.create_job (\n+      job_name => '&ec_usersmaster_dest_username..EUCLID_USERS_SYNCH_FROM_SOURCE'\n+      ,job_type => 'PLSQL_BLOCK'\n+      ,job_action => 'BEGIN &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST.synch_users_from_source; END; '\n+      ,start_date => SYSDATE\n+      ,repeat_interval => 'FREQ=MINUTELY;INTERVAL=30;'\n+      ,enabled => TRUE\n+      ,end_date => NULL\n+      ,job_class => 'DEFAULT_JOB_CLASS'\n+      ,comments => 'runs synchronisation between soruce EUCLID users tables and current destination');\n+    dbms_scheduler.enable('&ec_usersmaster_dest_username..EUCLID_USERS_SYNCH_FROM_SOURCE');      \n+END;\n+/\n+\n+disconnect\n+exit\n+\n",
                            "toolbox: oracle SQLs and PL/SQLs to manage users synch between different euclid database instances",
                            "Andrey Tsyganov",
                            "2023-07-12T17:49:32.000+02:00",
                            "dede8cb730f5ee51bece0be739d28043c16cdb00"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/SOURCE/scripts/source_ec_usersmaster_create_main.sql": [
                        [
                            "@@ -2,7 +2,7 @@ set verify off\n \n --get user input\n ACCEPT ec_usersmaster_source_username CHAR DEFAULT 'EC_USERSMASTER_SRC' PROMPT 'Provide users master username (default: EC_USERSMASTER_SRC):>'\n-ACCEPT ec_usersmaster_source_username_pwd CHAR DEFAULT 'NTGWRVsZSiRYxcYQ8qaSX7368jkqbT' PROMPT 'password (default: NTGWRVsZSiRYxcYQ8qaSX7368jkqbT):>'\n+ACCEPT ec_usersmaster_source_username_pwd CHAR DEFAULT '&1' PROMPT 'password (default: &1):>'\n \n connect / as sysdba;\n @@source_ec_usersmaster_create_user.sql &ec_usersmaster_source_username &ec_usersmaster_source_username_pwd\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Andrey Belikov",
                            "2023-07-19T13:00:47.000+00:00",
                            "cea8b7e397575ecdb8c5ca0801037ea629305abf"
                        ],
                        [
                            "@@ -0,0 +1,31 @@\n+set verify off\n+\n+--get user input\n+ACCEPT ec_usersmaster_source_username CHAR DEFAULT 'EC_USERSMASTER_SRC' PROMPT 'Provide users master username (default: EC_USERSMASTER_SRC):>'\n+ACCEPT ec_usersmaster_source_username_pwd CHAR DEFAULT 'NTGWRVsZSiRYxcYQ8qaSX7368jkqbT' PROMPT 'password (default: NTGWRVsZSiRYxcYQ8qaSX7368jkqbT):>'\n+\n+connect / as sysdba;\n+@@source_ec_usersmaster_create_user.sql &ec_usersmaster_source_username &ec_usersmaster_source_username_pwd\n+disconnect;\n+\n+connect &ec_usersmaster_source_username/&ec_usersmaster_source_username_pwd;\n+@@source_ec_usersmaster_create_schema_objects.sql &ec_usersmaster_source_username\n+@@source_USERSMASTER_ECPKG.sql\n+\n+BEGIN\n+    dbms_scheduler.create_job (\n+        job_name => '&ec_usersmaster_source_username..EUCLID_USERS_PRE_REPLICATION'\n+        ,job_type => 'PLSQL_BLOCK'\n+        ,job_action => 'BEGIN &ec_usersmaster_source_username..USERSMASTER_ECPKG_SOURCE.create_synch_tables_replica; END; '\n+        ,start_date => SYSDATE\n+        ,repeat_interval => 'FREQ=MINUTELY;INTERVAL=30;'\n+        ,enabled => TRUE\n+        ,end_date => NULL\n+        ,job_class => 'DEFAULT_JOB_CLASS'\n+        ,comments => 'Creates tables EUCLID users information replicas in case of any changes in the tables');\n+    dbms_scheduler.enable('&ec_usersmaster_source_username..EUCLID_USERS_PRE_REPLICATION');      \n+END;\n+/\n+\n+disconnect;\n+exit;\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ],
                        [
                            "@@ -0,0 +1,31 @@\n+set verify off\n+\n+--get user input\n+ACCEPT ec_usersmaster_source_username CHAR DEFAULT 'EC_USERSMASTER_SRC' PROMPT 'Provide users master username (default: EC_USERSMASTER_SRC):>'\n+ACCEPT ec_usersmaster_source_username_pwd CHAR DEFAULT 'NTGWRVsZSiRYxcYQ8qaSX7368jkqbT' PROMPT 'password (default: NTGWRVsZSiRYxcYQ8qaSX7368jkqbT):>'\n+\n+connect / as sysdba;\n+@@source_ec_usersmaster_create_user.sql &ec_usersmaster_source_username &ec_usersmaster_source_username_pwd\n+disconnect;\n+\n+connect &ec_usersmaster_source_username/&ec_usersmaster_source_username_pwd;\n+@@source_ec_usersmaster_create_schema_objects.sql &ec_usersmaster_source_username\n+@@source_USERSMASTER_ECPKG.sql\n+\n+BEGIN\n+    dbms_scheduler.create_job (\n+        job_name => '&ec_usersmaster_source_username..EUCLID_USERS_PRE_REPLICATION'\n+        ,job_type => 'PLSQL_BLOCK'\n+        ,job_action => 'BEGIN &ec_usersmaster_source_username..USERSMASTER_ECPKG_SOURCE.create_synch_tables_replica; END; '\n+        ,start_date => SYSDATE\n+        ,repeat_interval => 'FREQ=MINUTELY;INTERVAL=30;'\n+        ,enabled => TRUE\n+        ,end_date => NULL\n+        ,job_class => 'DEFAULT_JOB_CLASS'\n+        ,comments => 'Creates tables EUCLID users information replicas in case of any changes in the tables');\n+    dbms_scheduler.enable('&ec_usersmaster_source_username..EUCLID_USERS_PRE_REPLICATION');      \n+END;\n+/\n+\n+disconnect;\n+exit;\n",
                            "toolbox: oracle SQLs and PL/SQLs to manage users synch between different euclid database instances",
                            "Andrey Tsyganov",
                            "2023-07-12T17:49:32.000+02:00",
                            "dede8cb730f5ee51bece0be739d28043c16cdb00"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/SOURCE/source_ec_usersmaster.sh": [
                        [
                            "@@ -1 +1,5 @@\n-sqlplus /nolog @scripts/source_ec_usersmaster_create_main.sql\n+#!/bin/bash\n+SRCUSER_defpwd=`tr -dc A-Za-z0-9 < /dev/urandom | head -c 20`\n+SRCUSER_defpwd=randpwd${SRCUSER_defpwd}\n+sqlplus /nolog @scripts/source_ec_usersmaster_create_main.sql $SRCUSER_defpwd\n+\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Andrey Belikov",
                            "2023-07-19T13:00:47.000+00:00",
                            "cea8b7e397575ecdb8c5ca0801037ea629305abf"
                        ],
                        [
                            "@@ -0,0 +1 @@\n+sqlplus /nolog @scripts/source_ec_usersmaster_create_main.sql\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ],
                        [
                            "@@ -0,0 +1 @@\n+sqlplus /nolog @scripts/source_ec_usersmaster_create_main.sql\n",
                            "toolbox: oracle SQLs and PL/SQLs to manage users synch between different euclid database instances",
                            "Andrey Tsyganov",
                            "2023-07-12T17:49:32.000+02:00",
                            "dede8cb730f5ee51bece0be739d28043c16cdb00"
                        ]
                    ],
                    "services/intersect/IntersectShapely.py": [
                        [
                            "@@ -117,7 +117,7 @@ class IntersectShapely(RestGeneric):\n                 self.errors.append(str(e))\n             for object_id, footprint in overlap.items():\n                 Message(f'found {footprint.dpd_product_id} with overlap {footprint.overlap}')\n-                result[self.class_name][productid] = footprint.overlap\n+                result[self.class_name][footprint.dpd_product_id] = footprint.overlap\n             result['total'] = {self.class_name: sum(result[self.class_name].values())}\n             Message(f'intersect shapely result {result}')\n \n",
                            "Merge branch 'drb/bugfix/incorrect-pruductid-used' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-07-14T13:27:03.000+00:00",
                            "0022d5df5af2abd3191026dd88e483d4fefa131d"
                        ],
                        [
                            "@@ -112,14 +112,12 @@ class IntersectShapely(RestGeneric):\n             cls = dataproduct[self.class_name]\n             result[self.class_name] = {}\n             try:\n-                overlap, _ = intersect_shapely(self.input_area, self.class_name)\n+                overlap, _ = intersect_shapely(self.input_area, self.class_name, self.p1, self.p2)\n             except Exception as e:\n                 self.errors.append(str(e))\n             for object_id, footprint in overlap.items():\n-                overlap = self.calculateOverlap(input_area_polygon, footprint.footprint)\n-                Message(f'found {footprint.dpd_product_id} with overlap {overlap}')\n-                if overlap >= self.p1 and overlap <= self.p2:\n-                    result[self.class_name][productid] = overlap\n+                Message(f'found {footprint.dpd_product_id} with overlap {footprint.overlap}')\n+                result[self.class_name][productid] = footprint.overlap\n             result['total'] = {self.class_name: sum(result[self.class_name].values())}\n             Message(f'intersect shapely result {result}')\n \n",
                            "Merge branch 'drb/bugfix/check-min-and-max-overlap-low-level' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-07-11T13:25:07.000+00:00",
                            "479bde684d500f96f26c43f4ead2bba6c337afed"
                        ],
                        [
                            "@@ -112,14 +112,12 @@ class IntersectShapely(RestGeneric):\n             cls = dataproduct[self.class_name]\n             result[self.class_name] = {}\n             try:\n-                overlap, _ = intersect_shapely(self.input_area, self.class_name)\n+                overlap, _ = intersect_shapely(self.input_area, self.class_name, self.p1, self.p2)\n             except Exception as e:\n                 self.errors.append(str(e))\n             for object_id, footprint in overlap.items():\n-                overlap = self.calculateOverlap(input_area_polygon, footprint.footprint)\n-                Message(f'found {footprint.dpd_product_id} with overlap {overlap}')\n-                if overlap >= self.p1 and overlap <= self.p2:\n-                    result[self.class_name][productid] = overlap\n+                Message(f'found {footprint.dpd_product_id} with overlap {footprint.overlap}')\n+                result[self.class_name][productid] = footprint.overlap\n             result['total'] = {self.class_name: sum(result[self.class_name].values())}\n             Message(f'intersect shapely result {result}')\n \n",
                            "Calculate the overlap and check the minimum and maximum overlap in the low level intersect.",
                            "Danny Boxhoorn",
                            "2023-07-11T14:58:13.000+02:00",
                            "39a015c147427087c451286a6755a6ab7b5cda70"
                        ],
                        [
                            "@@ -116,10 +116,8 @@ class IntersectShapely(RestGeneric):\n             except Exception as e:\n                 self.errors.append(str(e))\n             for object_id, footprint in overlap.items():\n-                obj = cls(object_id=object_id)\n-                productid = obj.Header.ProductId.LimitedString\n-                overlap = self.calculateOverlap(input_area_polygon, footprint)\n-                Message(f'found {productid} with overlap {overlap}')\n+                overlap = self.calculateOverlap(input_area_polygon, footprint.footprint)\n+                Message(f'found {footprint.dpd_product_id} with overlap {overlap}')\n                 if overlap >= self.p1 and overlap <= self.p2:\n                     result[self.class_name][productid] = overlap\n             result['total'] = {self.class_name: sum(result[self.class_name].values())}\n",
                            "Merge branch 'drb/feature/productid-in-intersect-shapely-result' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-07-11T10:33:57.000+00:00",
                            "c59d03bb25ea17be0887d423a7c25bf4fd86e5e6"
                        ],
                        [
                            "@@ -116,10 +116,8 @@ class IntersectShapely(RestGeneric):\n             except Exception as e:\n                 self.errors.append(str(e))\n             for object_id, footprint in overlap.items():\n-                obj = cls(object_id=object_id)\n-                productid = obj.Header.ProductId.LimitedString\n-                overlap = self.calculateOverlap(input_area_polygon, footprint)\n-                Message(f'found {productid} with overlap {overlap}')\n+                overlap = self.calculateOverlap(input_area_polygon, footprint.footprint)\n+                Message(f'found {footprint.dpd_product_id} with overlap {overlap}')\n                 if overlap >= self.p1 and overlap <= self.p2:\n                     result[self.class_name][productid] = overlap\n             result['total'] = {self.class_name: sum(result[self.class_name].values())}\n",
                            "Include the ProductId in the intersect_shapely result to avoid instantiating data products.",
                            "Danny Boxhoorn",
                            "2023-07-11T12:15:32.000+02:00",
                            "09a4b0186a6272308edf1d7a2a549a2f57975db6"
                        ],
                        [
                            "@@ -12,6 +12,8 @@\n  \"p2\":1.0\n }\n \n+p1 minimal overlap, p2 maximal overlap\n+\n (2) Call\n \n curl -k  -u <username>:<password> -X GET --data-binary @area=intersect.json \"https://eas-dps-rest-hotfix.dev.euclid.astro.rug.nl/IntersectShapely?PROJECT=TEST\"\n@@ -47,6 +49,10 @@ class IntersectShapely(RestGeneric):\n \n     \"\"\" service layer implementation for intersect shapely \"\"\"\n \n+    # default values for p1 and p2\n+    default_p1 = 0.01\n+    default_p2 = 1.0\n+\n     def __init__(self, args):\n         ''' initialize '''\n         # base class initialization\n@@ -56,8 +62,9 @@ class IntersectShapely(RestGeneric):\n         else:\n             self.input_area = self.getArg('input_area')\n             self.class_name = self.getArg('class_name')\n-            self.p1 = self.getArg('p1', 0)\n-            self.p2 = self.getArg('p2', 0)\n+            # minimal (p1) and maximum (p2) overlap\n+            self.p1 = self.getArg('p1', self.default_p1)\n+            self.p2 = self.getArg('p2', self.default_p2)\n \n     def handleInputJson(self, area):\n         \"\"\" handle the input json area \"\"\"\n@@ -112,7 +119,9 @@ class IntersectShapely(RestGeneric):\n                 obj = cls(object_id=object_id)\n                 productid = obj.Header.ProductId.LimitedString\n                 overlap = self.calculateOverlap(input_area_polygon, footprint)\n-                result[self.class_name][productid] = overlap\n+                Message(f'found {productid} with overlap {overlap}')\n+                if overlap >= self.p1 and overlap <= self.p2:\n+                    result[self.class_name][productid] = overlap\n             result['total'] = {self.class_name: sum(result[self.class_name].values())}\n             Message(f'intersect shapely result {result}')\n \n",
                            "Merge branch 'wjv/bugfix/intersect_shapely_use_p1_and_p2' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-10T13:37:54.000+00:00",
                            "ab1db199df7634ca4d12eef9bd0f2a31dd6b8f7a"
                        ],
                        [
                            "@@ -12,6 +12,8 @@\n  \"p2\":1.0\n }\n \n+p1 minimal overlap, p2 maximal overlap\n+\n (2) Call\n \n curl -k  -u <username>:<password> -X GET --data-binary @area=intersect.json \"https://eas-dps-rest-hotfix.dev.euclid.astro.rug.nl/IntersectShapely?PROJECT=TEST\"\n@@ -47,6 +49,10 @@ class IntersectShapely(RestGeneric):\n \n     \"\"\" service layer implementation for intersect shapely \"\"\"\n \n+    # default values for p1 and p2\n+    default_p1 = 0.01\n+    default_p2 = 1.0\n+\n     def __init__(self, args):\n         ''' initialize '''\n         # base class initialization\n@@ -56,8 +62,9 @@ class IntersectShapely(RestGeneric):\n         else:\n             self.input_area = self.getArg('input_area')\n             self.class_name = self.getArg('class_name')\n-            self.p1 = self.getArg('p1', 0)\n-            self.p2 = self.getArg('p2', 0)\n+            # minimal (p1) and maximum (p2) overlap\n+            self.p1 = self.getArg('p1', self.default_p1)\n+            self.p2 = self.getArg('p2', self.default_p2)\n \n     def handleInputJson(self, area):\n         \"\"\" handle the input json area \"\"\"\n@@ -112,7 +119,9 @@ class IntersectShapely(RestGeneric):\n                 obj = cls(object_id=object_id)\n                 productid = obj.Header.ProductId.LimitedString\n                 overlap = self.calculateOverlap(input_area_polygon, footprint)\n-                result[self.class_name][productid] = overlap\n+                Message(f'found {productid} with overlap {overlap}')\n+                if overlap >= self.p1 and overlap <= self.p2:\n+                    result[self.class_name][productid] = overlap\n             result['total'] = {self.class_name: sum(result[self.class_name].values())}\n             Message(f'intersect shapely result {result}')\n \n",
                            "use p1 and p2 to limit the intersected results",
                            "Willem-Jan Vriend",
                            "2023-07-10T15:18:24.000+02:00",
                            "efb9c5744489e954fdc45baddc777fce843993f4"
                        ]
                    ],
                    "services/dbview/HtmlQueryResult.py": [
                        [
                            "@@ -208,7 +208,11 @@ function sendSAMP(conn, tableURL) {\n \n     def get_date_sorter_javascript(self):\n         \"\"\" table query result has one exta column Lineage view, so all data columns start one index higher \"\"\"\n-        return super().get_date_sorter_javascript(col_start=1)\n+        if self.renderer.dataobject:\n+            col_start = 1\n+        else:\n+            col_start = 0\n+        return super().get_date_sorter_javascript(col_start=col_start)\n \n     def get_header(self):\n         \"\"\" return html which is meant for euclid specific header \"\"\"\n",
                            "Merge branch 'wjv/bugfix/dbview_only_for_dataobjects_the_lineage_link_is_inserted' into 'develop'",
                            "Andrey Belikov",
                            "2023-07-13T13:55:42.000+00:00",
                            "7b5d2ac57e91d0aef7a12e8b2ab0c3537ba14fdd"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/DEST/dest_ec_usersmaster_changepwd.sql": [
                        [
                            "@@ -0,0 +1,7 @@\n+set verify off\n+--get user input\n+ACCEPT ec_usersmaster_dest_username CHAR DEFAULT 'EC_USERSMASTER_SRC' PROMPT 'Provide users master username (default: EC_USERSMASTER_SRC):>'\n+ACCEPT ec_usersmaster_dest_username_pwd CHAR DEFAULT 'cT9ywyAaoli5UVhK5leU3EXMz54OxC' PROMPT 'password (default: cT9ywyAaoli5UVhK5leU3EXMz54OxC):>'\n+\n+ALTER USER &ec_usersmaster_dest_username IDENTIFIED BY &ec_usersmaster_dest_username_pwd;\n+\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/DEST/dest_ec_usersmaster_updatedblink.sql": [
                        [
                            "@@ -0,0 +1,28 @@\n+set verify off\n+\n+--get user input\n+ACCEPT ec_usersmaster_dest_username CHAR DEFAULT 'EC_USERSMASTER_DEST' PROMPT 'Users master username for this instance (default:  EC_USERSMASTER_DEST):>'\n+ACCEPT ec_usersmaster_dest_username_pwd CHAR DEFAULT 'cT9ywyAaoli5UVhK5leU3EXMz54OxC' PROMPT 'password (default: cT9ywyAaoli5UVhK5leU3EXMz54OxC):>'\n+ACCEPT ec_usersmaster_source_username CHAR DEFAULT 'EC_USERSMASTER_SRC' PROMPT 'Provide source users master username (default: EC_USERSMASTER_SRC):>'\n+ACCEPT ec_usersmaster_source_username_pwd CHAR DEFAULT 'NTGWRVsZSiRYxcYQ8qaSX7368jkqbT' PROMPT 'password (default: NTGWRVsZSiRYxcYQ8qaSX7368jkqbT):>'\n+ACCEPT ec_usersmaster_dest_tns CHAR DEFAULT 'ECUSERS_SOURCE_TNS' PROMPT 'Source connection TNS name or full tns connection string (default:ECUSERS_SOURCE_TNS):>'\n+\n+connect &ec_usersmaster_dest_username/&ec_usersmaster_dest_username_pwd\n+\n+DROP DATABASE LINK users_source_dblink;\n+CREATE DATABASE LINK users_source_dblink \n+    CONNECT TO &ec_usersmaster_source_username IDENTIFIED BY &ec_usersmaster_source_username_pwd USING '&ec_usersmaster_dest_tns';\n+    \n+CREATE OR REPLACE synonym SOURCE_REPL_LOG FOR REPL_LOG@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_AWEUSERS FOR REPL_AWEUSERS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_AWEPROJECTS FOR REPL_AWEPROJECTS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_AWEPROJECTUSERS FOR REPL_AWEPROJECTUSERS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_AWEEUCLIDUSERS FOR REPL_AWEEUCLIDUSERS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_ORACLEUSERS FOR REPL_ORACLEUSERS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_USERSSTOPLIST FOR REPL_USERSSTOPLIST@users_source_dblink;\n+\n+ALTER PACKAGE &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST COMPILE PACKAGE; \n+ALTER PACKAGE &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST COMPILE BODY; \n+\n+disconnect;\n+exit;\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ],
                        [
                            "@@ -1,10 +1,28 @@\n set verify off\n \n --get user input\n+ACCEPT ec_usersmaster_dest_username CHAR DEFAULT 'EC_USERSMASTER_DEST' PROMPT 'Users master username for this instance (default:  EC_USERSMASTER_DEST):>'\n+ACCEPT ec_usersmaster_dest_username_pwd CHAR DEFAULT 'cT9ywyAaoli5UVhK5leU3EXMz54OxC' PROMPT 'password (default: cT9ywyAaoli5UVhK5leU3EXMz54OxC):>'\n ACCEPT ec_usersmaster_source_username CHAR DEFAULT 'EC_USERSMASTER_SRC' PROMPT 'Provide source users master username (default: EC_USERSMASTER_SRC):>'\n ACCEPT ec_usersmaster_source_username_pwd CHAR DEFAULT 'NTGWRVsZSiRYxcYQ8qaSX7368jkqbT' PROMPT 'password (default: NTGWRVsZSiRYxcYQ8qaSX7368jkqbT):>'\n ACCEPT ec_usersmaster_dest_tns CHAR DEFAULT 'ECUSERS_SOURCE_TNS' PROMPT 'Source connection TNS name or full tns connection string (default:ECUSERS_SOURCE_TNS):>'\n \n+connect &ec_usersmaster_dest_username/&ec_usersmaster_dest_username_pwd\n+\n DROP DATABASE LINK users_source_dblink;\n CREATE DATABASE LINK users_source_dblink \n-    CONNECT TO &ec_usersmaster_source_username IDENTIFIED BY &ec_usersmaster_source_username_pwd USING '&ec_usersmaster_dest_tns';\n\\ No newline at end of file\n+    CONNECT TO &ec_usersmaster_source_username IDENTIFIED BY &ec_usersmaster_source_username_pwd USING '&ec_usersmaster_dest_tns';\n+    \n+CREATE OR REPLACE synonym SOURCE_REPL_LOG FOR REPL_LOG@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_AWEUSERS FOR REPL_AWEUSERS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_AWEPROJECTS FOR REPL_AWEPROJECTS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_AWEPROJECTUSERS FOR REPL_AWEPROJECTUSERS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_AWEEUCLIDUSERS FOR REPL_AWEEUCLIDUSERS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_ORACLEUSERS FOR REPL_ORACLEUSERS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_USERSSTOPLIST FOR REPL_USERSSTOPLIST@users_source_dblink;\n+\n+ALTER PACKAGE &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST COMPILE PACKAGE; \n+ALTER PACKAGE &ec_usersmaster_dest_username..USERSMASTER_ECPKG_DEST COMPILE BODY; \n+\n+disconnect;\n+exit;\n",
                            "fix in the dblink recreattion script",
                            "Andrey Tsyganov",
                            "2023-07-12T18:15:06.000+02:00",
                            "5308ad2cc53a3cff7be6b5951496a535942d732d"
                        ],
                        [
                            "@@ -0,0 +1,10 @@\n+set verify off\n+\n+--get user input\n+ACCEPT ec_usersmaster_source_username CHAR DEFAULT 'EC_USERSMASTER_SRC' PROMPT 'Provide source users master username (default: EC_USERSMASTER_SRC):>'\n+ACCEPT ec_usersmaster_source_username_pwd CHAR DEFAULT 'NTGWRVsZSiRYxcYQ8qaSX7368jkqbT' PROMPT 'password (default: NTGWRVsZSiRYxcYQ8qaSX7368jkqbT):>'\n+ACCEPT ec_usersmaster_dest_tns CHAR DEFAULT 'ECUSERS_SOURCE_TNS' PROMPT 'Source connection TNS name or full tns connection string (default:ECUSERS_SOURCE_TNS):>'\n+\n+DROP DATABASE LINK users_source_dblink;\n+CREATE DATABASE LINK users_source_dblink \n+    CONNECT TO &ec_usersmaster_source_username IDENTIFIED BY &ec_usersmaster_source_username_pwd USING '&ec_usersmaster_dest_tns';\n\\ No newline at end of file\n",
                            "toolbox: oracle SQLs and PL/SQLs to manage users synch between different euclid database instances",
                            "Andrey Tsyganov",
                            "2023-07-12T17:49:32.000+02:00",
                            "dede8cb730f5ee51bece0be739d28043c16cdb00"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/DEST/scripts/dest_USERSMASTER_ECPKG.sql": [
                        [
                            "@@ -0,0 +1,711 @@\n+CREATE OR REPLACE PACKAGE USERSMASTER_ECPKG_DEST AS\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+description : \n+    The package is used to sychnronise user with the soruce euclid database instance. \n+    The access to the source data is done via database link: users_source_dblink\n+    and synonyms:\n+    SOURCE_REPL_LOG             : REPL_LOG@users_source_dblink;\n+    SOURCE_REPL_AWEUSERS        : REPL_AWEUSERS@users_source_dblink;\n+    SOURCE_REPL_AWEPROJECTS     : REPL_AWEPROJECTS@users_source_dblink;\n+    SOURCE_REPL_AWEPROJECTUSERS : REPL_AWEPROJECTUSERS@users_source_dblink;\n+    SOURCE_REPL_AWEEUCLIDUSERS  : REPL_AWEEUCLIDUSERS@users_source_dblink;\n+    SOURCE_REPL_ORACLEUSERS     : REPL_ORACLEUSERS@users_source_dblink;\n+    SOURCE_REPL_USERSSTOPLIST   : REPL_USERSSTOPLIST@users_source_dblink;\n+\n+*/\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters  :\n+    p_uuid          - unique id. This is generated by the caller.\n+    p_function_name - name of the caller (procedure/function or any custom string)\n+    p_info          - short information about the action/process that is logged\n+    p_clob          - long text data for errors details etc...\n+                      mainly ussed in the package to store json of the data differences between \n+                      SOURCE and DESTINATION        \n+    p_date          - date of the run, generated by the caller. Assumes sysdate fixed by the caller\n+description : \n+    procedure to add synchronisation processing log\n+*/\n+PROCEDURE add_log_record (\n+      p_uuid VARCHAR2\n+    , p_function_name IN VARCHAR2\n+    , p_info IN VARCHAR2\n+    , p_clob IN CLOB\n+    , p_date IN DATE\n+    );\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters  :\n+    p_run_date - run date of the report\n+                 it assumes that default is sysdate, \n+                 but if it is called from another function \n+                 then it is good to have this option to set.\n+description : \n+    synch_health_check - generates synchronisation report, \n+    it creates the log record in the table DEST_REPL_LOG.\n+    Each run has unique uuid.    \n+    There is a views that can be used to easy query results.\n+    last_synch_health_check\n+    \n+*/\n+PROCEDURE synch_health_check(\n+        p_run_date IN DATE DEFAULT SYSDATE\n+    );\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters  :\n+    p_run_date - run date of the report\n+                 it assumes that default is sysdate, \n+                 but if it is called from another function \n+                 then it is good to have this option to set.\n+description : \n+    synch_users_from_source - calls synch_health_check and applyes actions.\n+    it thus generates two reports in one uuid\n+    synch_health_check and action done by synch_users_from_source\n+    Each run has unique uuid.\n+    There are three views that can be used to easy query results.\n+    last_synch_run\n+    last_uuid\n+    \n+*/    \n+PROCEDURE synch_users_from_source;\n+\n+END USERSMASTER_ECPKG_DEST;\n+/\n+\n+\n+CREATE OR REPLACE PACKAGE BODY USERSMASTER_ECPKG_DEST AS\n+\n+-- cursor to get new oracle EC_ accounts from the source  \n+CURSOR g_c_new_oracle_users_cursor IS\n+      SELECT USERNAME\n+        FROM SOURCE_REPL_AWEUSERS\n+       WHERE USERNAME IN (\n+        SELECT USERNAME\n+          FROM SOURCE_REPL_ORACLEUSERS\n+        MINUS\n+        SELECT USERNAME\n+          FROM sys.user$, sys.dba_users\n+         WHERE 1 = 1\n+           AND name LIKE 'EC\\_%' ESCAPE '\\'\n+           AND USERNAME LIKE 'EC\\_%' ESCAPE '\\'\n+           AND sys.user$.USER# = sys.dba_users.USER_ID\n+        );\n+\n+-- cursor to get new passwords (spare4) from the oracle accounts of the source\n+CURSOR g_c_oracle_users_pwd_update_cursor IS\n+        SELECT USERNAME, spare4\n+          FROM SOURCE_REPL_ORACLEUSERS\n+         WHERE 1=1\n+           AND USERNAME IN (SELECT USERNAME FROM sys.dba_users)\n+           AND USERNAME NOT IN (\n+                                SELECT USERNAME\n+                                  FROM SOURCE_REPL_USERSSTOPLIST\n+                               )\n+        MINUS\n+        SELECT USERNAME, spare4\n+          FROM sys.user$, sys.dba_users\n+         WHERE 1 = 1\n+           AND name LIKE 'EC\\_%' ESCAPE '\\'\n+           AND USERNAME LIKE 'EC\\_%' ESCAPE '\\'\n+           AND sys.user$.USER# = sys.dba_users.USER_ID;\n+\n+-- cursor to get oracle accounts of the source that must be locked in the current destination\n+CURSOR g_c_oracle_users_lock_cursor IS\n+        SELECT USERNAME, spare4\n+          FROM SOURCE_REPL_ORACLEUSERS\n+         WHERE ACCOUNT_STATUS != 'OPEN'\n+           AND USERNAME IN (SELECT USERNAME FROM sys.dba_users)\n+           AND USERNAME NOT IN (\n+                                SELECT USERNAME\n+                                  FROM SOURCE_REPL_USERSSTOPLIST\n+                               );\n+\n+-- cursor to get oracle accounts of the source that must be unlocked in the current destination\n+CURSOR g_c_oracle_users_unlock_cursor IS\n+        SELECT USERNAME, spare4\n+          FROM SOURCE_REPL_ORACLEUSERS\n+         WHERE ACCOUNT_STATUS = 'OPEN'\n+           AND USERNAME IN (SELECT USERNAME FROM sys.dba_users)\n+           AND USERNAME NOT IN (\n+                                SELECT USERNAME\n+                                  FROM SOURCE_REPL_USERSSTOPLIST\n+                               )\n+           AND USERNAME IN (\n+                            SELECT USERNAME\n+                              FROM sys.dba_users\n+                             WHERE ACCOUNT_STATUS != 'OPEN'\n+                           );\n+-- cursor to get users from that must be inserted or updated in the current instance table AWOPER.AWEUSERS \n+CURSOR g_c_aweusers_synch_cursor IS\n+    SELECT USERNAME\n+          ,USER_ID\n+          ,CREATED\n+          ,FULLNAME\n+          ,EMAIL\n+          ,PASSWORD\n+          ,user_id_exists_in_dest\n+          ,username_exists_in_source\n+          ,CASE WHEN user_id_exists_in_dest = 0 AND username_exists_in_source = 0 THEN\n+                    'AWEUSERS:INSERT'\n+                WHEN user_id_exists_in_dest = 1 AND username_exists_in_source = 1 THEN\n+                    'AWEUSERS:UPDATE'\n+                WHEN user_id_exists_in_dest = 0 AND username_exists_in_source = 1 THEN\n+                    'AWEUSERS:WRONG_USER_ID:UPDATE'\n+                ELSE\n+                    'AWEUSERS:UNKNOWN'\n+           END action\n+      FROM (\n+        SELECT trepview.USERNAME\n+              ,trepview.USER_ID\n+              ,CREATED\n+              ,FULLNAME\n+              ,EMAIL\n+              ,PASSWORD\n+             ,(SELECT COUNT(*) FROM AWOPER.AWEUSERS WHERE user_id = trepview.user_id) user_id_exists_in_dest\n+             ,(SELECT COUNT(*) FROM AWOPER.AWEUSERS WHERE username = trepview.username) username_exists_in_source\n+        FROM\n+        ( SELECT * FROM source_repl_aweusers t1\n+          MINUS\n+          SELECT * FROM AWOPER.AWEUSERS t2\n+        ) trepview\n+    );\n+\n+-- cursor to get all records from current instance table AWOPER.AWEPROJECTUSERS\n+-- but does not exist in source replica SOURCE_REPL_AWEPROJECTUSERS\n+CURSOR g_c_AWEPROJECTUSERS_to_delete IS\n+    SELECT PROJECTID\n+          ,USERID\n+          ,USERTYPE\n+      FROM (\n+        SELECT * FROM AWOPER.AWEPROJECTUSERS t2\n+        MINUS\n+        SELECT * FROM SOURCE_REPL_AWEPROJECTUSERS t1\n+    );\n+\n+-- cursor to get all records from source SOURCE_REPL_AWEPROJECTUSERS\n+-- that does not exist in currecnt instance table AWOPER.AWEPROJECTUSERS\n+CURSOR g_c_AWEPROJECTUSERS_to_insert IS\n+    SELECT PROJECTID\n+          ,USERID\n+          ,USERTYPE\n+      FROM (\n+        SELECT * FROM SOURCE_REPL_AWEPROJECTUSERS t1\n+        MINUS\n+        SELECT * FROM AWOPER.AWEPROJECTUSERS t2\n+    );\n+\n+-- cursor to get all records from current instance table AWOPER.AWEEUCLIDUSERS\n+-- but does not exist in source replica SOURCE_REPL_AWEEUCLIDUSERS\n+CURSOR g_c_AWEEUCLIDUSERS_to_delete IS\n+    SELECT trepview.USERNAME\n+          ,trepview.PRIVLEVEL\n+          ,trepview.ID\n+          ,'AWEEUCLIDUSERS:DELETE' action\n+      FROM (\n+            SELECT * FROM AWOPER.AWEEUCLIDUSERS t2\n+            MINUS\n+            SELECT * FROM SOURCE_REPL_AWEEUCLIDUSERS t1\n+        ) trepview;\n+\n+-- cursor to get all records from source SOURCE_REPL_AWEEUCLIDUSERS\n+-- that does not exist in currecnt instance table AWOPER.AWEEUCLIDUSERS\n+CURSOR g_c_AWEEUCLIDUSERS_to_insert IS\n+    SELECT trepview.USERNAME\n+          ,trepview.PRIVLEVEL\n+          ,trepview.ID\n+          ,'AWEEUCLIDUSERS:INSERT' action\n+      FROM (\n+            SELECT * FROM SOURCE_REPL_AWEEUCLIDUSERS t1\n+            MINUS\n+            SELECT * FROM AWOPER.AWEEUCLIDUSERS t2\n+        ) trepview;\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters  :\n+    check package specification     \n+description : \n+    check package specification     \n+*/\n+PROCEDURE add_log_record (\n+      p_uuid VARCHAR2\n+    , p_function_name IN VARCHAR2\n+    , p_info IN VARCHAR2\n+    , p_clob IN CLOB\n+    , p_date IN DATE\n+    ) AS\n+\n+    PRAGMA AUTONOMOUS_TRANSACTION;\n+\n+BEGIN\n+    INSERT INTO DEST_REPL_LOG(uuid, msg_date, function_name, info, json_clob) VALUES (p_uuid, p_date,  p_function_name, p_info, p_clob);\n+    COMMIT;\n+END add_log_record;\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters  :\n+    check package specification     \n+description : \n+    check package specification     \n+*/\n+PROCEDURE synch_health_check(\n+        p_run_date IN DATE DEFAULT SYSDATE\n+    ) AS\n+    PRAGMA AUTONOMOUS_TRANSACTION;\n+\n+    l_uuid VARCHAR2(40) := SYS_GUID();\n+    l_json CLOB;\n+\n+BEGIN\n+    add_log_record(l_uuid, 'synch_health_check', '==synch_health_check==start' , '', p_run_date);\n+\n+    FOR c_new_oracle_users_row IN g_c_new_oracle_users_cursor LOOP\n+        add_log_record(l_uuid, 'synch_health_check', 'ORACLE USER: new user will be created: ' || c_new_oracle_users_row.USERNAME, '', p_run_date);\n+    END LOOP;\n+\n+    -- 2. we update user password\n+    FOR c_oracle_users_pwd_update_row IN g_c_oracle_users_pwd_update_cursor LOOP\n+         add_log_record(l_uuid, 'synch_health_check', 'ORACLE USER: password will be updated for: ' || c_oracle_users_pwd_update_row.USERNAME, '', p_run_date);\n+    END LOOP;\n+\n+    -- 3. we lock users that were locked in source - optional\n+    FOR c_oracle_users_lock_row IN g_c_oracle_users_lock_cursor LOOP\n+         add_log_record(l_uuid, 'synch_health_check', 'ORACLE USER: user will be locked: ' || c_oracle_users_lock_row.USERNAME, '', p_run_date);\n+    END LOOP;\n+\n+    -- 4. we unlock users that were unlocked in source - optional\n+    FOR c_oracle_users_unlock_row IN g_c_oracle_users_unlock_cursor LOOP\n+         add_log_record(l_uuid, 'synch_health_check', 'ORACLE USER: user will be unlocked: ' || c_oracle_users_unlock_row.USERNAME, '', p_run_date);\n+    END LOOP;\n+\n+\n+    FOR c_iAWEUSRRECORD IN g_c_aweusers_synch_cursor LOOP\n+        SELECT json_serialize(JSON_OBJECTAGG( KEY akey VALUE JSON_OBJECT(USERNAME\n+                  ,USER_ID\n+                  ,CREATED\n+                  ,FULLNAME\n+                  ,EMAIL\n+                  ,PASSWORD)\n+                  )) all_data\n+          INTO  l_json\n+          FROM\n+          (\n+            SELECT 'DEST:' || username akey, t1.* FROM awoper.aweusers t1 WHERE username = c_iAWEUSRRECORD.USERNAME\n+            UNION ALL\n+            SELECT 'SOURCE: ' || username akey, t2.* FROM source_repl_aweusers t2 WHERE username = c_iAWEUSRRECORD.USERNAME\n+          );\n+\n+        IF c_iAWEUSRRECORD.action = 'AWEUSERS:WRONG_USER_ID:UPDATE' THEN\n+            add_log_record(l_uuid, 'synch_health_check', 'AWEUSERS:WRONG_USER_ID:UPDATE: ' || c_iAWEUSRRECORD.USERNAME, l_json, p_run_date);\n+        END IF;\n+\n+        IF c_iAWEUSRRECORD.action = 'AWEUSERS:UPDATE' THEN\n+            add_log_record(l_uuid, 'synch_health_check', 'AWEUSERS:UPDATE: ' || c_iAWEUSRRECORD.USERNAME, l_json, p_run_date);\n+        END IF;\n+\n+        IF c_iAWEUSRRECORD.action = 'AWEUSERS:INSERT' THEN\n+            add_log_record(l_uuid, 'synch_health_check', 'AWEUSERS:INSERT: ' || c_iAWEUSRRECORD.USERNAME, l_json, p_run_date);\n+        END IF;\n+\n+    END LOOP;\n+\n+    FOR iROW_AWEPROJECTS IN (\n+            SELECT * FROM SOURCE_REPL_AWEPROJECTS t1\n+            MINUS\n+            SELECT * FROM AWOPER.AWEPROJECTS t2\n+    ) LOOP\n+        SELECT json_serialize(JSON_OBJECTAGG( KEY akey VALUE JSON_OBJECT(\n+                    ID\n+                   ,NAME\n+                   ,DESCRIPTION\n+                   ,INSTRUMENT\n+                   ,DEFAULT_PRIVILEGES\n+                  ))\n+                ) all_data\n+          INTO  l_json\n+          FROM\n+          (\n+            SELECT 'DEST:' || NAME akey, t1.* FROM awoper.AWEPROJECTS t1 WHERE ID = iROW_AWEPROJECTS.ID\n+            UNION ALL\n+            SELECT 'SOURCE: ' || NAME akey, t2.* FROM SOURCE_REPL_AWEPROJECTS t2 WHERE ID = iROW_AWEPROJECTS.ID\n+          );\n+\n+        add_log_record(l_uuid, 'synch_health_check', 'AWEPROJECTS:CHANGE: ' || iROW_AWEPROJECTS.NAME, l_json, p_run_date);\n+    END LOOP;\n+\n+    FOR c_AWEEUCLIDUSERS_to_delete_row IN g_c_AWEEUCLIDUSERS_to_delete LOOP\n+        SELECT JSON_ARRAY(c_AWEEUCLIDUSERS_to_delete_row.USERNAME, c_AWEEUCLIDUSERS_to_delete_row.PRIVLEVEL, c_AWEEUCLIDUSERS_to_delete_row.id)\n+          INTO l_json\n+          FROM dual;\n+\n+        add_log_record(l_uuid, 'synch_health_check', 'AWEEUCLIDUSERS:DELETE: ' || c_AWEEUCLIDUSERS_to_delete_row.USERNAME, l_json, p_run_date);\n+\n+    END LOOP;\n+\n+\n+    FOR c_AWEEUCLIDUSERS_to_insert_row IN g_c_AWEEUCLIDUSERS_to_insert LOOP\n+        SELECT JSON_ARRAY(c_AWEEUCLIDUSERS_to_insert_row.USERNAME, c_AWEEUCLIDUSERS_to_insert_row.PRIVLEVEL, c_AWEEUCLIDUSERS_to_insert_row.id)\n+          INTO l_json\n+          FROM dual;\n+\n+        add_log_record(l_uuid, 'synch_health_check', 'AWEEUCLIDUSERS:INSERT: ' || c_AWEEUCLIDUSERS_to_insert_row.USERNAME, l_json, p_run_date);\n+    END LOOP;\n+\n+    FOR c_AWEPROJECTUSERS_to_delete_row IN g_c_AWEPROJECTUSERS_to_delete LOOP\n+        SELECT JSON_ARRAY(c_AWEPROJECTUSERS_to_delete_row.PROJECTID, c_AWEPROJECTUSERS_to_delete_row.USERID, c_AWEPROJECTUSERS_to_delete_row.USERTYPE)\n+          INTO l_json\n+          FROM dual;\n+\n+        add_log_record(l_uuid, 'synch_health_check', 'AWEPROJECTUSERS:DELETE: ' || c_AWEPROJECTUSERS_to_delete_row.PROJECTID, l_json, p_run_date);\n+\n+    END LOOP;\n+\n+    FOR c_AWEPROJECTUSERS_to_insert_row IN g_c_AWEPROJECTUSERS_to_insert LOOP\n+        SELECT JSON_ARRAY(c_AWEPROJECTUSERS_to_insert_row.PROJECTID, c_AWEPROJECTUSERS_to_insert_row.USERID, c_AWEPROJECTUSERS_to_insert_row.USERTYPE)\n+          INTO l_json\n+          FROM dual;\n+\n+        add_log_record(l_uuid, 'synch_health_check', 'AWEPROJECTUSERS:INSERT: ' || c_AWEPROJECTUSERS_to_insert_row.PROJECTID, l_json, p_run_date);\n+    END LOOP;\n+\n+    add_log_record(l_uuid, 'synch_health_check', '==synch_health_check==end' , '', p_run_date);\n+\n+    COMMIT;\n+\n+END synch_health_check;\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters  :\n+    p_uuid     - unique id of the operation fro the log\n+    p_run_date - date of the operation for the log\n+description : \n+    Procedure gets data from the SOURCE_REPL_ORACLEUSERS source \n+    and compares it with the current users in the current instance.\n+    then, depending from the result function sys.ecuser_manager is called\n+    There are 4 modes:\n+    1 - create user, grant awuser role, alter password\n+    2 - alter password\n+    3 - lock user\n+    4 - unlock user\n+    \n+*/\n+PROCEDURE synch_ora_users_from_source(p_uuid VARCHAR2, p_run_date DATE) AS\n+\n+    l_username_pwd VARCHAR2(4000);\n+    l_username_ecid NUMBER;\n+BEGIN\n+    -- 1. we create all new users\n+    FOR c_new_oracle_users_row IN g_c_new_oracle_users_cursor LOOP\n+        SELECT user_id\n+          INTO l_username_ecid\n+          FROM SOURCE_REPL_AWEUSERS\n+         WHERE username = c_new_oracle_users_row.USERNAME;\n+\n+        SELECT spare4\n+          INTO l_username_pwd\n+          FROM SOURCE_REPL_ORACLEUSERS\n+         WHERE username = c_new_oracle_users_row.USERNAME;\n+\n+        sys.ecuser_manager(p_uuid, 1, c_new_oracle_users_row.USERNAME, l_username_pwd, l_username_ecid);\n+\n+    END LOOP;\n+\n+    -- 2. we update user password\n+    FOR c_oracle_users_pwd_update_row IN g_c_oracle_users_pwd_update_cursor LOOP\n+        sys.ecuser_manager(p_uuid, 2, c_oracle_users_pwd_update_row.USERNAME, c_oracle_users_pwd_update_row.spare4, -1);\n+    END LOOP;\n+\n+    -- 3. we lock users that were locked in source - optional\n+    FOR c_oracle_users_lock_row IN g_c_oracle_users_lock_cursor LOOP\n+        sys.ecuser_manager(p_uuid, 3, c_oracle_users_lock_row.USERNAME, '', -1);\n+    END LOOP;\n+\n+    -- 4. we unlock users that were unlocked in source - optional\n+    FOR c_oracle_users_unlock_row IN g_c_oracle_users_unlock_cursor LOOP\n+        sys.ecuser_manager(p_uuid, 4, c_oracle_users_unlock_row.USERNAME, '', -1);\n+    END LOOP;\n+\n+END synch_ora_users_from_source;\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters  :\n+    p_uuid     - unique id of the operation fro the log\n+    p_run_date - date of the operation for the log\n+description : \n+    Procedure gets data from the SOURCE_REPL_AWEUSERS source \n+    and compares it with the current AWEUSERS in the current instance.\n+    If particular user does not exist - it runs INSERT statment\n+    If user exists with combination (user_id, username) - then updates other columns in the table\n+    If user exists but user_id is different - generates error record in the report run with the lable:\n+        AWEUSERS:WRONG_USER_ID:UPDATE\n+    There are 4 modes:\n+*/\n+PROCEDURE synch_aweusers_from_source(p_uuid VARCHAR2, p_run_date DATE) AS\n+   PRAGMA AUTONOMOUS_TRANSACTION;\n+\n+    l_json CLOB;\n+BEGIN\n+\n+    FOR c_iAWEUSRRECORD_row IN g_c_aweusers_synch_cursor LOOP\n+        SELECT json_serialize(JSON_OBJECTAGG( KEY akey VALUE JSON_OBJECT(USERNAME\n+                  ,USER_ID\n+                  ,CREATED\n+                  ,FULLNAME\n+                  ,EMAIL\n+                  ,PASSWORD)\n+                  )) all_data\n+          INTO  l_json\n+          FROM\n+          (\n+            SELECT 'DEST:' || username akey, t1.* FROM awoper.aweusers t1 WHERE username = c_iAWEUSRRECORD_row.USERNAME\n+            UNION ALL\n+            SELECT 'SOURCE: ' || username akey, t2.* FROM source_repl_aweusers t2 WHERE username = c_iAWEUSRRECORD_row.USERNAME\n+          );\n+\n+        IF c_iAWEUSRRECORD_row.action = 'AWEUSERS:WRONG_USER_ID:UPDATE' THEN\n+            add_log_record(p_uuid, 'synch_health_check', 'WRONG_USER_ID:UPDATE: ' || c_iAWEUSRRECORD_row.USERNAME, l_json, p_run_date);\n+\n+        END IF;\n+\n+        IF c_iAWEUSRRECORD_row.action = 'AWEUSERS:UPDATE' THEN\n+            add_log_record(p_uuid, 'add_aweusers_from_source', 'UPDATE: ' || c_iAWEUSRRECORD_row.USERNAME, '', p_run_date);\n+            UPDATE AWOPER.AWEUSERS SET\n+                       CREATED  = c_iAWEUSRRECORD_row.CREATED\n+                      ,FULLNAME = c_iAWEUSRRECORD_row.FULLNAME\n+                      ,EMAIL    = c_iAWEUSRRECORD_row.EMAIL\n+                      ,PASSWORD = c_iAWEUSRRECORD_row.PASSWORD\n+              WHERE user_id =  c_iAWEUSRRECORD_row.user_id and username = c_iAWEUSRRECORD_row.username;\n+\n+\n+        END IF;\n+\n+        IF c_iAWEUSRRECORD_row.action = 'AWEUSERS:INSERT' THEN\n+            add_log_record(p_uuid, 'add_aweusers_from_source', 'INSERT: ' || c_iAWEUSRRECORD_row.USERNAME, '', p_run_date);\n+\n+            INSERT INTO AWOPER.AWEUSERS(\n+                USER_ID\n+               ,USERNAME\n+               ,CREATED\n+               ,FULLNAME\n+               ,EMAIL\n+               ,PASSWORD\n+            )\n+            VALUES (\n+                c_iAWEUSRRECORD_row.USER_ID\n+               ,c_iAWEUSRRECORD_row.USERNAME\n+               ,c_iAWEUSRRECORD_row.CREATED\n+               ,c_iAWEUSRRECORD_row.FULLNAME\n+               ,c_iAWEUSRRECORD_row.EMAIL\n+               ,c_iAWEUSRRECORD_row.PASSWORD\n+            );\n+\n+        END IF;\n+\n+    END LOOP;\n+\n+    COMMIT;\n+END synch_aweusers_from_source;\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters  :\n+    p_uuid     - unique id of the operation fro the log\n+    p_run_date - date of the operation for the log\n+description : \n+    Procedure gets data from the SOURCE_REPL_AWEPROJECTS source \n+    and merges content into the AWOPER.AWEPROJECTS\n+    new projects are added, existing will be updated if changed. \n+    \n+*/\n+PROCEDURE synch_aweprojects_from_source(p_uuid VARCHAR2, p_run_date DATE) AS\n+   PRAGMA AUTONOMOUS_TRANSACTION;\n+BEGIN\n+    -- insert or update the AWEPROJECTUSERS table that are in source but not in destination or privilage had changed\n+    -- that synch does not take into account delete operations\n+    MERGE INTO AWOPER.AWEPROJECTS tdest\n+    USING (\n+        SELECT * FROM SOURCE_REPL_AWEPROJECTS t1\n+        MINUS\n+        SELECT * FROM AWOPER.AWEPROJECTS t2\n+    ) data_to_merge_view\n+    ON ( tdest.ID = data_to_merge_view.ID)\n+        WHEN MATCHED THEN\n+            UPDATE SET tdest.NAME = data_to_merge_view.NAME\n+                      ,tdest.DESCRIPTION = data_to_merge_view.DESCRIPTION\n+                      ,tdest.INSTRUMENT = data_to_merge_view.INSTRUMENT\n+                      ,tdest.DEFAULT_PRIVILEGES = data_to_merge_view.DEFAULT_PRIVILEGES\n+        WHEN NOT MATCHED THEN\n+            INSERT (\n+                ID\n+               ,NAME\n+               ,DESCRIPTION\n+               ,INSTRUMENT\n+               ,DEFAULT_PRIVILEGES\n+            )\n+            VALUES (\n+                data_to_merge_view.ID\n+               ,data_to_merge_view.NAME\n+               ,data_to_merge_view.DESCRIPTION\n+               ,data_to_merge_view.INSTRUMENT\n+               ,data_to_merge_view.DEFAULT_PRIVILEGES\n+            );\n+\n+    COMMIT;\n+\n+END synch_aweprojects_from_source;\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters  :\n+    p_uuid     - unique id of the operation fro the log\n+    p_run_date - date of the operation for the log\n+description : \n+    Procedure gets data from the SOURCE_REPL_AWEPROJECTUSERS source \n+    It first deletes all records from the AWEPROJECTUSERS that \n+    exists in current instance of AWEPROJECTUSERS but not in the source\n+    second it inserts all records that are in the source \n+    but not in the current instance of AWEPROJECTUSERS\n+    \n+*/\n+PROCEDURE synch_aweprojectusers_from_source(p_uuid VARCHAR2, p_run_date DATE) AS\n+   PRAGMA AUTONOMOUS_TRANSACTION;\n+\n+    l_json CLOB;\n+BEGIN\n+    FOR c_AWEPROJECTUSERS_to_delete_row IN g_c_AWEPROJECTUSERS_to_delete LOOP\n+        SELECT JSON_ARRAY(c_AWEPROJECTUSERS_to_delete_row.PROJECTID, c_AWEPROJECTUSERS_to_delete_row.USERID, c_AWEPROJECTUSERS_to_delete_row.USERTYPE)\n+          INTO l_json\n+          FROM dual;\n+\n+        add_log_record(p_uuid, 'add_aweprojectusers_from_source', 'AWEPROJECTUSERS:DELETE: ' || c_AWEPROJECTUSERS_to_delete_row.PROJECTID, l_json, p_run_date);\n+\n+        DELETE FROM AWOPER.AWEPROJECTUSERS\n+         WHERE PROJECTID = c_AWEPROJECTUSERS_to_delete_row.PROJECTID\n+           AND NVL(USERID, -1) = NVL(c_AWEPROJECTUSERS_to_delete_row.USERID, -1)\n+           AND USERTYPE  = c_AWEPROJECTUSERS_to_delete_row.USERTYPE;\n+\n+    END LOOP;\n+\n+    FOR c_AWEPROJECTUSERS_to_insert_row IN g_c_AWEPROJECTUSERS_to_insert LOOP\n+        SELECT JSON_ARRAY(c_AWEPROJECTUSERS_to_insert_row.PROJECTID, c_AWEPROJECTUSERS_to_insert_row.USERID, c_AWEPROJECTUSERS_to_insert_row.USERTYPE)\n+          INTO l_json\n+          FROM dual;\n+\n+        add_log_record(p_uuid, 'add_aweprojectusers_from_source', 'AWEPROJECTUSERS:INSERT: ' || c_AWEPROJECTUSERS_to_insert_row.PROJECTID, l_json, p_run_date);\n+\n+        INSERT INTO AWOPER.AWEPROJECTUSERS(\n+                     PROJECTID\n+                    ,USERID\n+                    ,USERTYPE)\n+             VALUES (\n+                     c_AWEPROJECTUSERS_to_insert_row.PROJECTID\n+                    ,c_AWEPROJECTUSERS_to_insert_row.USERID\n+                    ,c_AWEPROJECTUSERS_to_insert_row.USERTYPE\n+                    );\n+    END LOOP;\n+\n+    COMMIT;\n+\n+END synch_aweprojectusers_from_source;\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters  :\n+    p_uuid     - unique id of the operation fro the log\n+    p_run_date - date of the operation for the log\n+description : \n+    Procedure gets data from the SOURCE_REPL_AWEEUCLIDUSERS source \n+    It first deletes all records from the AWEEUCLIDUSERS that \n+    exists in current instance of AWEEUCLIDUSERS but not in the source\n+    second it inserts all records that are in the source \n+    but not in the current instance of AWEEUCLIDUSERS\n+    \n+*/\n+PROCEDURE synch_aweeuclidusers_from_source(p_uuid VARCHAR2, p_run_date DATE) AS\n+    PRAGMA AUTONOMOUS_TRANSACTION;\n+\n+    l_json CLOB;\n+\n+BEGIN\n+    FOR c_AWEEUCLIDUSERS_to_delete_row IN g_c_AWEEUCLIDUSERS_to_delete LOOP\n+        SELECT JSON_ARRAY(c_AWEEUCLIDUSERS_to_delete_row.USERNAME, c_AWEEUCLIDUSERS_to_delete_row.PRIVLEVEL, c_AWEEUCLIDUSERS_to_delete_row.id)\n+          INTO l_json\n+          FROM dual;\n+\n+        add_log_record(p_uuid, 'synch_aweeuclidusers_from_source', 'AWEEUCLIDUSERS:DELETE: ' || c_AWEEUCLIDUSERS_to_delete_row.USERNAME, l_json, p_run_date);\n+\n+        DELETE FROM AWOPER.AWEEUCLIDUSERS\n+         WHERE USERNAME  = c_AWEEUCLIDUSERS_to_delete_row.USERNAME\n+           AND ID        = c_AWEEUCLIDUSERS_to_delete_row.ID\n+           AND PRIVLEVEL = c_AWEEUCLIDUSERS_to_delete_row.PRIVLEVEL;\n+\n+    END LOOP;\n+\n+\n+    FOR c_AWEEUCLIDUSERS_to_insert_row IN g_c_AWEEUCLIDUSERS_to_insert LOOP\n+        SELECT JSON_ARRAY (c_AWEEUCLIDUSERS_to_insert_row.USERNAME, c_AWEEUCLIDUSERS_to_insert_row.PRIVLEVEL, c_AWEEUCLIDUSERS_to_insert_row.id)\n+          INTO l_json\n+          FROM dual;\n+\n+        add_log_record(p_uuid, 'synch_aweeuclidusers_from_source', 'AWEEUCLIDUSERS:INSERT: ' || c_AWEEUCLIDUSERS_to_insert_row.USERNAME, l_json, p_run_date);\n+\n+        INSERT INTO AWOPER.AWEEUCLIDUSERS(\n+                     USERNAME\n+                    ,PRIVLEVEL\n+                    ,ID)\n+             VALUES (\n+                     c_AWEEUCLIDUSERS_to_insert_row.USERNAME\n+                    ,c_AWEEUCLIDUSERS_to_insert_row.PRIVLEVEL\n+                    ,c_AWEEUCLIDUSERS_to_insert_row.id\n+                    );\n+    END LOOP;\n+\n+    COMMIT;\n+\n+END synch_aweeuclidusers_from_source;\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters  :\n+description : \n+    check package specification     \n+*/ \n+PROCEDURE synch_users_from_source AS\n+    PRAGMA AUTONOMOUS_TRANSACTION;\n+\n+    l_uuid VARCHAR2(40) := SYS_GUID();\n+    l_run_date DATE := SYSDATE;\n+BEGIN\n+    synch_health_check(l_run_date);\n+    synch_ora_users_from_source(l_uuid, l_run_date);\n+    synch_aweusers_from_source(l_uuid, l_run_date);\n+    synch_aweprojects_from_source(l_uuid, l_run_date);\n+    synch_aweprojectusers_from_source(l_uuid, l_run_date);\n+    synch_aweeuclidusers_from_source(l_uuid, l_run_date);\n+\n+    COMMIT;\n+END synch_users_from_source;\n+\n+END USERSMASTER_ECPKG_DEST;\n+/\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/DEST/scripts/dest_ec_usersmaster_create_schema_objects.sql": [
                        [
                            "@@ -0,0 +1,72 @@\n+DROP DATABASE LINK users_source_dblink;\n+CREATE DATABASE LINK users_source_dblink \n+    CONNECT TO &1 \n+    IDENTIFIED BY &2 \n+            USING '&3';\n+\n+CREATE OR REPLACE synonym SOURCE_REPL_LOG FOR REPL_LOG@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_AWEUSERS FOR REPL_AWEUSERS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_AWEPROJECTS FOR REPL_AWEPROJECTS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_AWEPROJECTUSERS FOR REPL_AWEPROJECTUSERS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_AWEEUCLIDUSERS FOR REPL_AWEEUCLIDUSERS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_ORACLEUSERS FOR REPL_ORACLEUSERS@users_source_dblink;\n+CREATE OR REPLACE synonym SOURCE_REPL_USERSSTOPLIST FOR REPL_USERSSTOPLIST@users_source_dblink;\n+\n+CREATE TABLE DEST_REPL_LOG (uuid VARCHAR2(40), msg_date date, function_name varchar2(255), info VARCHAR2(255), json_clob CLOB);\n+CREATE INDEX INDX1_DEST_LOG_FNAME ON DEST_REPL_LOG(function_name);\n+CREATE INDEX INDX2_DEST_UUID ON DEST_REPL_LOG(uuid);\n+CREATE INDEX INDX2_DEST_MSG_DATE ON DEST_REPL_LOG(msg_date);\n+\n+GRANT INSERT ON DEST_REPL_LOG TO SYS;\n+\n+\n+CREATE OR REPLACE VIEW last_synch_health_check AS \n+SELECT DEST_REPL_LOG.* \n+  FROM DEST_REPL_LOG \n+     ,(SELECT ROWNUM rn, v1.*\n+        FROM\n+        (\n+        SELECT uuid subuuid, MAX(msg_date) md\n+                FROM DEST_REPL_LOG\n+               WHERE function_name = 'synch_health_check' \n+            GROUP BY uuid\n+            ORDER BY md desc\n+        ) v1   \n+        WHERE ROWNUM = 1\n+    ) v2 \n+WHERE uuid = v2.subuuid\n+;\n+\n+CREATE OR REPLACE VIEW last_synch_run AS \n+SELECT DEST_REPL_LOG.* \n+  FROM DEST_REPL_LOG \n+     ,(SELECT ROWNUM rn, v1.*\n+        FROM\n+        (\n+        SELECT uuid subuuid, MAX(msg_date) md\n+                FROM DEST_REPL_LOG\n+               WHERE function_name != 'synch_health_check' \n+            GROUP BY uuid\n+            ORDER BY md desc\n+        ) v1   \n+        WHERE ROWNUM = 1\n+    ) v2 \n+WHERE uuid = v2.subuuid\n+;\n+\n+\n+CREATE OR REPLACE VIEW last_uuid AS \n+SELECT DEST_REPL_LOG.* \n+  FROM DEST_REPL_LOG \n+     ,(SELECT ROWNUM rn, v1.*\n+        FROM\n+        (\n+        SELECT uuid subuuid, MAX(msg_date) md\n+                FROM DEST_REPL_LOG\n+            GROUP BY uuid\n+            ORDER BY md desc\n+        ) v1   \n+        WHERE ROWNUM = 1\n+    ) v2 \n+WHERE uuid = v2.subuuid\n+;\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/DEST/scripts/dest_ec_usersmaster_create_user.sql": [
                        [
                            "@@ -0,0 +1,27 @@\n+create user &1 identified by &2;\n+grant create session to &1;\n+grant create table to &1;\n+grant create procedure to &1;\n+grant create view to &1;\n+grant unlimited tablespace to &1;\n+grant select on AWOPER.AWEUSERS to &1;\n+grant select on AWOPER.AWEPROJECTS to &1;\n+grant select on AWOPER.AWEPROJECTUSERS to &1;\n+grant select on AWOPER.AWEEUCLIDUSERS to &1;\n+grant select on SYS.DBA_USERS to &1;\n+grant select on sys.user$ to &1;\n+grant create job to &1;\n+--second set of grants\n+GRANT CREATE DATABASE LINK TO &1;\n+GRANT CREATE SYNONYM TO &1;\n+GRANT INSERT ON AWOPER.AWEUSERS TO &1;\n+GRANT INSERT ON AWOPER.AWEPROJECTS TO &1;\n+GRANT INSERT ON AWOPER.AWEPROJECTUSERS TO &1;\n+GRANT INSERT ON AWOPER.AWEEUCLIDUSERS TO &1;\n+GRANT UPDATE(CREATED, FULLNAME, EMAIL, PASSWORD) ON AWOPER.AWEUSERS TO &1;\n+GRANT UPDATE(NAME, DESCRIPTION, INSTRUMENT, DEFAULT_PRIVILEGES) ON AWOPER.AWEPROJECTS TO &1;\n+GRANT UPDATE(USERTYPE) ON AWOPER.AWEPROJECTUSERS TO &1;\n+GRANT UPDATE(PRIVLEVEL) ON AWOPER.AWEEUCLIDUSERS TO &1;\n+GRANT DELETE ON AWOPER.AWEEUCLIDUSERS TO &1;\n+GRANT DELETE ON AWOPER.AWEPROJECTUSERS TO &1;\n+\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/SOURCE/scripts/source_USERSMASTER_ECPKG.sql": [
                        [
                            "@@ -0,0 +1,386 @@\n+CREATE OR REPLACE PACKAGE USERSMASTER_ECPKG_SOURCE AS\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+description : \n+    The package is used to prepare data for the users synchronisation if needed.\n+    The idea is taht destination instance will connect to this instance\n+    or to its data guard instance and query data from the tables replica:\n+    REPL_LOG - replication sources generation log \n+    REPL_AWEUSERS - replica of the AWOPER.AWEUSERS table\n+    REPL_AWEPROJECTS - replica of the AWOPER.AWEPROJECTS table \n+    REPL_AWEPROJECTUSERS - replica of the AWOPER.AWEPROJECTUSERS table\n+    REPL_AWEEUCLIDUSERS replica of the AWOPER.AWEEUCLIDUSERS table\n+    REPL_ORACLEUSERS - generated data over the ORACLE users in the instance \n+                       Only EC_ oracle accounts are taken into the synchronisation process\n+\n+    REPL_USERSSTOPLIST\n+    \n+    Table REPL_USERSSTOPLIST is used to guarantie that users in this table \n+    are excluded from the password synchronisation process \n+*/\n+\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+description : \n+    main function to get actual data into the replica tables\n+    it is implemnted as an AUTONOMOUS TRANSACTION and contains commit.\n+    This is the function that is called in the scheduler job \n+*/\n+PROCEDURE create_synch_tables_replica;\n+\n+END USERSMASTER_ECPKG_SOURCE;\n+/\n+\n+\n+CREATE OR REPLACE PACKAGE BODY USERSMASTER_ECPKG_SOURCE AS\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+parameters  :\n+    p_info - string with custom text that will be added as log message\n+description : \n+    adds record to the source replica generation log \n+*/\n+PROCEDURE ADD_REPL_LOG_RECORD(p_info VARCHAR2) IS\n+      PRAGMA AUTONOMOUS_TRANSACTION;\n+BEGIN\n+    INSERT INTO REPL_LOG (msg_date, info)\n+         VALUES (sysdate, p_info);\n+    COMMIT;\n+END;\n+\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+description : \n+    If there are any diferences between current replica and current AWOPER.AWEUSERS table\n+    procedure recreates REPL_AWEUSERS table \n+    if synchronisation procedure queries replication table while delete all records REPL_AWEUSERS\n+    and then insert all from AWOPER.AWEUSERS\n+    because it is transactional synchronisation at destination will not be touched\n+    and no data loss.\n+    commit must be done on the level of the caller of this procedure\n+*/\n+PROCEDURE create_AWEUSERS_repl IS\n+   /* function to detect difference in the tables\n+      returns FALSE if no changes and no replication needed\n+      returns TRUE if we force replication\n+    */\n+    FUNCTION detect_AWEUSERS_changes RETURN BOOLEAN AS\n+\n+        l_temp_count_src   NUMBER := 0;\n+        l_temp_count_dst   NUMBER := 0;\n+\n+    BEGIN\n+        SELECT COUNT(*)\n+          INTO l_temp_count_src\n+         FROM ( SELECT * FROM AWOPER.AWEUSERS\n+                MINUS\n+                SELECT * FROM REPL_AWEUSERS\n+              );\n+\n+        SELECT COUNT(*)\n+          INTO l_temp_count_dst\n+          FROM (\n+                SELECT * FROM REPL_AWEUSERS\n+                MINUS\n+                SELECT * FROM AWOPER.AWEUSERS\n+               );\n+\n+        IF l_temp_count_src > 0 THEN\n+            RETURN TRUE;\n+        END IF;\n+\n+        IF l_temp_count_dst > 0 THEN\n+            RETURN TRUE;\n+        END IF;\n+\n+        RETURN FALSE;\n+    END;\n+\n+BEGIN\n+    IF detect_AWEUSERS_changes() THEN\n+        ADD_REPL_LOG_RECORD('AWOPER.AWEUSERS replica creation to REPL_AWEUSERS');\n+        EXECUTE IMMEDIATE 'DELETE FROM REPL_AWEUSERS';\n+        EXECUTE IMMEDIATE 'INSERT INTO REPL_AWEUSERS SELECT * FROM AWOPER.AWEUSERS';\n+    END IF;\n+\n+END;\n+\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+description : \n+    If there are any diferences between current replica and current AWOPER.AWEPROJECTS table\n+    procedure recreates REPL_AWEPROJECTS table \n+    if synchronisation procedure queries replication table while delete all records REPL_AWEPROJECTS\n+    and then insert all from AWOPER.AWEPROJECTS\n+    because it is transactional synchronisation at destination will not be touched\n+    and no data loss.\n+    commit must be done on the level of the caller of this procedure\n+*/\n+PROCEDURE create_AWEPROJECTS_repl IS\n+    /* function to detect difference in the tables\n+      returns FALSE if no changes and no replication needed\n+      returns TRUE if we force replication\n+    */\n+    FUNCTION detect_AWEPROJECTS_changes RETURN BOOLEAN AS\n+        l_temp_count_src   NUMBER := 0;\n+        l_temp_count_dst   NUMBER := 0;\n+\n+    BEGIN\n+        SELECT COUNT(*)\n+          INTO l_temp_count_src\n+          FROM ( SELECT * FROM AWOPER.AWEPROJECTS\n+                 MINUS\n+                 SELECT * FROM REPL_AWEPROJECTS\n+               );\n+\n+        SELECT COUNT(*)\n+          INTO l_temp_count_dst\n+          FROM ( SELECT * FROM REPL_AWEPROJECTS\n+                 MINUS\n+                 SELECT * FROM AWOPER.AWEPROJECTS\n+               );\n+\n+        IF l_temp_count_src > 0 THEN\n+            RETURN TRUE;\n+        END IF;\n+\n+        IF l_temp_count_dst > 0 THEN\n+            RETURN TRUE;\n+        END IF;\n+\n+        RETURN FALSE;\n+\n+      END;\n+\n+BEGIN\n+    IF detect_AWEPROJECTS_changes() THEN\n+        ADD_REPL_LOG_RECORD('AWOPER.AWEPROJECTS replica creation to REPL_AWEPROJECTS');\n+        EXECUTE IMMEDIATE 'DELETE FROM REPL_AWEPROJECTS';\n+        EXECUTE IMMEDIATE 'INSERT INTO REPL_AWEPROJECTS SELECT * FROM AWOPER.AWEPROJECTS';\n+    END IF;\n+END;\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+description : \n+    If there are any diferences between current replica and current AWOPER.AWEPROJECTUSERS table\n+    procedure recreates REPL_AWEPROJECTUSERS table \n+    if synchronisation procedure queries replication table while delete all records REPL_AWEPROJECTUSERS\n+    and then insert all from AWOPER.AWEPROJECTUSERS\n+    because it is transactional synchronisation at destination will not be touched\n+    and no data loss.\n+    commit must be done on the level of the caller of this procedure\n+*/\n+PROCEDURE create_AWEPROJECTUSERS_repl IS\n+    /* function to detect difference in the tables\n+      returns FALSE if no changes and no replication needed\n+      returns TRUE if we force replication\n+    */\n+    FUNCTION detect_AWEPROJECTUSERS_changes RETURN BOOLEAN AS\n+\n+        l_temp_count_src   NUMBER := 0;\n+        l_temp_count_dst   NUMBER := 0;\n+\n+    BEGIN\n+        SELECT COUNT(*)\n+          INTO l_temp_count_src\n+          FROM ( SELECT * FROM AWOPER.AWEPROJECTUSERS\n+                 MINUS\n+                 SELECT * FROM REPL_AWEPROJECTUSERS\n+               );\n+\n+        SELECT COUNT(*)\n+          INTO l_temp_count_dst\n+          FROM ( SELECT * FROM REPL_AWEPROJECTUSERS\n+                 MINUS\n+                 SELECT * FROM AWOPER.AWEPROJECTUSERS\n+               );\n+\n+        IF l_temp_count_src > 0 THEN\n+            RETURN TRUE;\n+        END IF;\n+\n+        IF l_temp_count_dst > 0 THEN\n+            RETURN TRUE;\n+        END IF;\n+\n+        RETURN FALSE;\n+    END;\n+\n+BEGIN\n+    IF detect_AWEPROJECTUSERS_changes THEN\n+        ADD_REPL_LOG_RECORD('AWOPER.AWEPROJECTUSERS replica creation to REPL_AWEPROJECTUSERS');\n+        EXECUTE IMMEDIATE 'DELETE FROM REPL_AWEPROJECTUSERS';\n+        EXECUTE IMMEDIATE 'INSERT INTO REPL_AWEPROJECTUSERS SELECT * FROM AWOPER.AWEPROJECTUSERS';\n+    END IF;\n+END;\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+description : \n+    If there are any diferences between current replica and current AWOPER.AWEEUCLIDUSER table\n+    procedure recreates REPL_AWEEUCLIDUSER table \n+    if synchronisation procedure queries replication table while delete all records REPL_AWEEUCLIDUSER\n+    and then insert all from AWOPER.AWEEUCLIDUSER\n+    because it is transactional synchronisation at destination will not be touched\n+    and no data loss.\n+    commit must be done on the level of the caller of this procedure\n+*/\n+PROCEDURE create_AWEEUCLIDUSERS_repl IS\n+    /* function to detect difference in the tables\n+      returns FALSE if no changes and no replication needed\n+      returns TRUE if we force replication\n+    */\n+    FUNCTION detect_AWEEUCLIDUSERS_changes RETURN BOOLEAN AS\n+\n+        l_temp_count_src   NUMBER := 0;\n+        l_temp_count_dst   NUMBER := 0;\n+\n+    BEGIN\n+        SELECT COUNT(*)\n+          INTO l_temp_count_src\n+          FROM ( SELECT * FROM AWOPER.AWEEUCLIDUSERS\n+                 MINUS\n+                 SELECT * FROM REPL_AWEEUCLIDUSERS\n+               );\n+\n+        SELECT COUNT(*)\n+          INTO l_temp_count_dst\n+          FROM ( SELECT * FROM REPL_AWEEUCLIDUSERS\n+                 MINUS\n+                 SELECT * FROM AWOPER.AWEEUCLIDUSERS\n+               );\n+\n+        IF l_temp_count_src > 0 THEN\n+            RETURN TRUE;\n+        END IF;\n+\n+        IF l_temp_count_dst > 0 THEN\n+            RETURN TRUE;\n+        END IF;\n+\n+        RETURN FALSE;\n+    END;\n+\n+BEGIN\n+    IF detect_AWEEUCLIDUSERS_changes THEN\n+        ADD_REPL_LOG_RECORD('AWOPER.AWEEUCLIDUSERS replica creation to REPL_AWEEUCLIDUSERS');\n+        EXECUTE IMMEDIATE 'DELETE FROM REPL_AWEEUCLIDUSERS';\n+        EXECUTE IMMEDIATE 'INSERT INTO REPL_AWEEUCLIDUSERS SELECT * FROM AWOPER.AWEEUCLIDUSERS';\n+    END IF;\n+\n+END;\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+description : \n+    If there are any diferences between current replica and current ORACLE accounts like 'EC_%' \n+    procedure recreates REPL_ORACLEUSERS table \n+    if synchronisation procedure queries replication table while delete all records REPL_ORACLEUSERS\n+    and then insert all from ORACLE account by the standard query\n+    because it is transactional synchronisation at destination will not be touched\n+    and no data loss.\n+    commit must be done on the level of the caller of this procedure\n+*/\n+PROCEDURE create_ORACLEUSERS_repl IS\n+    ddl_sql     VARCHAR2(4000);\n+\n+    /* function to detect difference in the tables\n+      returns FALSE if no changes and no replication needed\n+      returns TRUE if we force replication\n+    */\n+    FUNCTION detect_ORACLEUSERS_changes RETURN BOOLEAN AS\n+\n+        l_temp_count_src   NUMBER := 0;\n+        l_temp_count_dst   NUMBER := 0;\n+\n+    BEGIN\n+        SELECT COUNT(*)\n+          INTO l_temp_count_src\n+          FROM ( SELECT * FROM (\n+                        SELECT USER_ID, USER#, USERNAME, ACCOUNT_STATUS, PROFILE, name, spare4\n+                          FROM sys.user$, sys.dba_users\n+                         WHERE 1 = 1\n+                           AND name LIKE 'EC\\_%' ESCAPE '\\'\n+                           AND USERNAME LIKE 'EC\\_%' ESCAPE '\\'\n+                           AND sys.user$.USER# = sys.dba_users.USER_ID\n+                        )\n+                 MINUS\n+                 SELECT * FROM REPL_ORACLEUSERS\n+               );\n+\n+        SELECT COUNT(*)\n+          INTO l_temp_count_dst\n+          FROM ( SELECT * FROM REPL_ORACLEUSERS\n+                 MINUS\n+                 SELECT * FROM (\n+                        SELECT USER_ID, USER#, USERNAME, ACCOUNT_STATUS, PROFILE, name, spare4\n+                          FROM sys.user$, sys.dba_users\n+                         WHERE 1 = 1\n+                           AND name LIKE 'EC\\_%' ESCAPE '\\'\n+                           AND USERNAME LIKE 'EC\\_%' ESCAPE '\\'\n+                           AND sys.user$.USER# = sys.dba_users.USER_ID\n+                        )\n+               );\n+\n+        IF l_temp_count_src > 0 THEN\n+            RETURN TRUE;\n+        END IF;\n+\n+        IF l_temp_count_dst > 0 THEN\n+            RETURN TRUE;\n+        END IF;\n+\n+        RETURN FALSE;\n+    END;\n+\n+\n+BEGIN\n+    IF detect_ORACLEUSERS_changes THEN\n+        ADD_REPL_LOG_RECORD('sys.user$, sys.dba_users replica creation to REPL_ORACLEUSERS');\n+        ddl_sql := 'INSERT INTO REPL_ORACLEUSERS '                                             ||\n+                   '  SELECT USER_ID, USER#, USERNAME, ACCOUNT_STATUS, PROFILE, name, spare4 ' ||\n+                   '    FROM sys.user$, sys.dba_users'                                         ||\n+                   '   WHERE 1 = 1 '                                                           ||\n+                   '     AND name LIKE ''EC\\_%'' ESCAPE ''\\'''                                 ||\n+                   '     AND USERNAME LIKE ''EC\\_%'' ESCAPE ''\\'''                             ||\n+                   '     AND sys.user$.USER# = sys.dba_users.USER_ID';\n+        EXECUTE IMMEDIATE 'DELETE FROM REPL_ORACLEUSERS';\n+        EXECUTE IMMEDIATE ddl_sql;\n+    END IF;\n+END;\n+\n+/*\n+creator     : Andrey Tsyganov\n+created     : 07.2023\n+description : \n+    check package specification \n+*/\n+PROCEDURE create_synch_tables_replica IS\n+    PRAGMA AUTONOMOUS_TRANSACTION;\n+BEGIN\n+    create_AWEUSERS_repl;\n+    create_AWEPROJECTUSERS_repl;\n+    create_AWEPROJECTUSERS_repl;\n+    create_AWEEUCLIDUSERS_repl;\n+    create_ORACLEUSERS_repl;\n+    \n+    --commits any changes that we made by the create_*_repl procedures calls\n+    COMMIT;\n+END create_synch_tables_replica;\n+\n+END USERSMASTER_ECPKG_SOURCE;\n+/\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/SOURCE/scripts/source_ec_usersmaster_create_schema_objects.sql": [
                        [
                            "@@ -0,0 +1,18 @@\n+CREATE TABLE REPL_LOG (msg_date date, info VARCHAR2(255));\n+CREATE TABLE REPL_AWEUSERS AS SELECT * FROM AWOPER.AWEUSERS;\n+CREATE TABLE REPL_AWEPROJECTS AS SELECT * FROM AWOPER.AWEPROJECTS;\n+CREATE TABLE REPL_AWEPROJECTUSERS AS SELECT * FROM AWOPER.AWEPROJECTUSERS;\n+CREATE TABLE REPL_AWEEUCLIDUSERS AS SELECT * FROM AWOPER.AWEEUCLIDUSERS;\n+CREATE TABLE REPL_USERSSTOPLIST (add_date date, username VARCHAR2(255));\n+\n+CREATE TABLE REPL_ORACLEUSERS AS \n+    SELECT USER_ID, USER#, USERNAME, ACCOUNT_STATUS, PROFILE, name, spare4 \n+      FROM sys.user$, sys.dba_users\n+     WHERE 1 = 1 \n+       AND name LIKE 'EC\\_%' ESCAPE '\\'                  \n+       AND USERNAME LIKE 'EC\\_%' ESCAPE '\\' \n+       AND sys.user$.USER# = sys.dba_users.USER_ID;\n+\n+INSERT INTO REPL_USERSSTOPLIST (add_date, username) \n+VALUES (SYSDATE, '&1');\n+COMMIT;\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/SOURCE/scripts/source_ec_usersmaster_create_user.sql": [
                        [
                            "@@ -0,0 +1,13 @@\n+create user &1 identified by &2;\n+grant create session to &1;\n+grant create table to &1;\n+grant create procedure to &1;\n+grant create view to &1;\n+grant unlimited tablespace to &1;\n+grant select on AWOPER.AWEUSERS to &1;\n+grant select on AWOPER.AWEPROJECTS to &1;\n+grant select on AWOPER.AWEPROJECTUSERS to &1;\n+grant select on AWOPER.AWEEUCLIDUSERS to &1;\n+grant select on SYS.DBA_USERS to &1;\n+grant select on sys.user$ to &1;\n+grant create job to &1;\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ]
                    ],
                    "toolbox/db/oracle/USERSMASTER/SOURCE/source_ec_usersmaster_changepwd.sql": [
                        [
                            "@@ -0,0 +1,8 @@\n+set verify off\n+\n+--get user input\n+ACCEPT ec_usersmaster_source_username CHAR DEFAULT 'EC_USERSMASTER_SRC' PROMPT 'Provide users master username (default: EC_USERSMASTER_SRC):>'\n+ACCEPT ec_usersmaster_source_username_pwd CHAR DEFAULT 'NTGWRVsZSiRYxcYQ8qaSX7368jkqbT' PROMPT ' new password (default: NTGWRVsZSiRYxcYQ8qaSX7368jkqbT):>'\n+\n+ALTER USER &ec_usersmaster_source_username IDENTIFIED BY &ec_usersmaster_source_username_pwd;\n+\n",
                            "Merge branch 'tsyganov/euclid/ecuserssynch' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-13T11:31:30.000+00:00",
                            "e96edff40aa430fee3e3884d5e89b44370422cad"
                        ]
                    ],
                    "services/intersect/IntersectionMapUpdate.py": [
                        [
                            "@@ -20,6 +20,8 @@\n \n import json\n \n+from pprint import pformat\n+\n from common.log.Message import Message\n from common.services.general.HtmlBase import HtmlBase\n \n@@ -28,7 +30,7 @@ from euclid.dm_bindings import (\n     DpdIntersectionMaps,\n )\n from euclid.services.rest.RESTGeneric import RestGeneric\n-from euclid.util.IntersectionMapUpdate import update_intersection_obj, handle_dpd_params\n+from euclid.util.IntersectionMapUpdate import update_intersection_obj, handle_dpd_params, get_config\n \n \n class IntersectionMapUpdate(RestGeneric):\n@@ -116,8 +118,10 @@ class IntersectionMapUpdate(RestGeneric):\n                 ret[product_id] = f'SKIP {reason}'\n                 Message(f'NOT using {cls.__name__} with ProductId {product_id}; {reason}')\n         Message(f'commit flag {self.commit}')\n+        config = get_config(dpdIM, commit=self.commit)\n+        Message(f'config: {pformat(config)}')\n         for obj in objects:\n-            intersections = update_intersection_obj(dpdIM, obj, commit=self.commit)\n+            intersections = update_intersection_obj(dpdIM, obj, config)\n             ret[obj.Header.ProductId.LimitedString] = len(intersections)\n             Message(f'added {len(intersections)} Intersections ProductId {obj.Header.ProductId.LimitedString}')\n         return ret\n",
                            "Merge branch 'wjv/bugfix/intersectionmap_added_method_get_config' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-10T13:25:42.000+00:00",
                            "93710c8381fdd9b9cf62acc57611c8c25a8aed6e"
                        ],
                        [
                            "@@ -125,4 +125,3 @@ class IntersectionMapUpdate(RestGeneric):\n             ret[obj.Header.ProductId.LimitedString] = len(intersections)\n             Message(f'added {len(intersections)} Intersections ProductId {obj.Header.ProductId.LimitedString}')\n         return ret\n-\n",
                            "Merge branch 'assist/autoformat/wjv/bugfix/intersectionmap_added_method_get_config/e7cf1976' into 'wjv/bugfix/intersectionmap_added_method_get_config'",
                            "Willem-Jan Vriend",
                            "2023-07-10T13:07:42.000+00:00",
                            "be40299d3229deb20edd1b449ade592f33b848d8"
                        ],
                        [
                            "@@ -125,4 +125,3 @@ class IntersectionMapUpdate(RestGeneric):\n             ret[obj.Header.ProductId.LimitedString] = len(intersections)\n             Message(f'added {len(intersections)} Intersections ProductId {obj.Header.ProductId.LimitedString}')\n         return ret\n-\n",
                            "Auto-format files with autopep8",
                            "CI Bot",
                            "2023-07-10T13:06:16.000+00:00",
                            "8e0e9fe7a55152a692d04bf2229d092c3783e1b1"
                        ],
                        [
                            "@@ -20,6 +20,8 @@\n \n import json\n \n+from pprint import pformat\n+\n from common.log.Message import Message\n from common.services.general.HtmlBase import HtmlBase\n \n@@ -28,7 +30,7 @@ from euclid.dm_bindings import (\n     DpdIntersectionMaps,\n )\n from euclid.services.rest.RESTGeneric import RestGeneric\n-from euclid.util.IntersectionMapUpdate import update_intersection_obj, handle_dpd_params\n+from euclid.util.IntersectionMapUpdate import update_intersection_obj, handle_dpd_params, get_config\n \n \n class IntersectionMapUpdate(RestGeneric):\n@@ -116,8 +118,11 @@ class IntersectionMapUpdate(RestGeneric):\n                 ret[product_id] = f'SKIP {reason}'\n                 Message(f'NOT using {cls.__name__} with ProductId {product_id}; {reason}')\n         Message(f'commit flag {self.commit}')\n+        config = get_config(dpdIM, commit=self.commit)\n+        Message(f'config: {pformat(config)}')\n         for obj in objects:\n-            intersections = update_intersection_obj(dpdIM, obj, commit=self.commit)\n+            intersections = update_intersection_obj(dpdIM, obj, config)\n             ret[obj.Header.ProductId.LimitedString] = len(intersections)\n             Message(f'added {len(intersections)} Intersections ProductId {obj.Header.ProductId.LimitedString}')\n         return ret\n+\n",
                            "use get_config() to get the IntersectionMapUpdate config dictionary",
                            "Willem-Jan Vriend",
                            "2023-07-10T15:04:04.000+02:00",
                            "e7cf1976ea097a8af3e3e8f3026a6269f78777b0"
                        ]
                    ],
                    "util/IntersectionMapUpdate.py": [
                        [
                            "@@ -76,6 +76,7 @@ from common.config.Profile import profiles\n from common.database.Context import context\n from common.database.Database import database\n from common.database.support import viewname\n+from common.exceptions import ConfigurationError\n from common.log.Log import Log, log\n from common.log.Message import Message\n \n@@ -94,19 +95,23 @@ from euclid.dm_bindings import (\n from euclid.toolbox.XSDDic import XMLFactory\n from euclid.util.Healpix import convert_area_healpix, getids, getintersection # CONTAINS\n \n-# TODO; this only finds data products that do not have any reference in the DpdIntersectionMaps object\n-#       but it does not find data products that are partial intersected\n \n+class ConfigException(ConfigurationError):\n+    \"\"\" Exception raised in case of error in config \"\"\"\n+    pass\n \n+\n+# TODO; this only finds data products that do not have any reference in the DpdIntersectionMaps object\n+#       but it does not find data products that are partial intersected\n def get_missing_intersections(dpd, products=None):\n     \"\"\" return ProductId's that are not in the DpdIntersectionMaps \"\"\"\n     result = {}\n     if products is None:\n         #products = all_dataproducts\n-        products = get_default_config().keys()\n+        products = get_default_dpd_config().keys()\n     for product_class in products:\n-        Message(f'Query for missing {product} Intersections')\n-        result[product] = {}\n+        Message(f'Query for missing {product_class} Intersections')\n+        result[product_class] = {}\n         #product_class = dataproduct[product]\n         where = f'''WHERE t.\"Header\".\"ManualValidationStatus\" != 'INVALID'\n   AND t.\"Header\".\"Purpose\" = '{dpd.Header.Purpose}'\n@@ -123,17 +128,18 @@ MINUS\n SELECT DataProductId\n FROM AWOPER.Intersection\n WHERE MapKind = '{mapkind}'\n-  AND DataProductType = '{product.__class__.__name__}'\n+  AND DataProductType = '{product_class}'\n   AND MapOrigin = '{dpd.Header.ProductId.LimitedString}'\n '''\n-            result[product][mapkind] = database.execute_select(sql)\n-            if len(result[product][mapkind]) > 0:\n-                Message(f'Found {len(result[product][mapkind])} {mapkind} Intersections')\n+            result[product_class][mapkind] = database.execute_select(sql)\n+            if len(result[product_class][mapkind]) > 0:\n+                Message(f'Found {len(result[product_class][mapkind])} {mapkind} Intersections')\n     return result\n \n \n # TODO remove the xxx_dataproducts lists, these are now provided in the condig of the DpdIntersectionMaps\n #   class name                            footprint                  ObsId/TileIndex\n+'''\n observation_dataproducts = [\n     'DpdNispRawFrame',                  # Data.ImgSpatialFootprint   Data.ObservationSequence.ObservationId\n     'DpdNirCalibratedFrame',            # Data.ImgSpatialFootprint   Data.ObservationSequence.ObservationId\n@@ -161,6 +167,7 @@ tile_dataproducts = [\n # DpdExtValidatedSingleEpochFrame; add to TileToObservationsMap with Intersection.ObsId empty, for each tile with overlap (by sky query)\n ext_dataproducts = ['DpdExtValidatedSingleEpochFrame']\n all_dataproducts = observation_dataproducts + tile_dataproducts + ext_dataproducts\n+'''\n \n \n # The default ObservationMode or TileUseCase to use\n@@ -221,8 +228,27 @@ def parse_param(key, value):\n     return parsed_key, parsed_value\n \n \n-def get_default_config():\n-    \"\"\" return default config for the IntersectionMaps \"\"\"\n+def get_config(dpdIM, commit=True, use_planned=True):\n+    \"\"\" return the config dictionary \"\"\"\n+    config = {}\n+    if not dpdIM.Parameters or not dpdIM.Parameters.Parameter:\n+        config_dpds = get_default_dpd_config()\n+    else:\n+        try:\n+            config_dpds = handle_dpd_params(dpdIM)\n+        except Exception as e:\n+            Message(f'ERROR; could not determine config from {dpdIM.__class__.__name__} with ProductId {dpdIM.Header.ProductId.LimitedString}: {e}')\n+            raise ConfigException(str(e))\n+    config = {'dataproducts': config_dpds}\n+    config['commit'] = commit\n+    config['use_planned'] = use_planned\n+    config['healpix_order_ratio'] = healpix_order_ratio_default\n+    config['healpix_order_query'] = healpix_order_query_default\n+    return config\n+\n+\n+def get_default_dpd_config():\n+    \"\"\" return default dataproduct config for the IntersectionMaps \"\"\"\n     config = {}\n     for key, value in [\n         ('DpdNispRawFrame'                , 'Data.ImgSpatialFootprint,obs,calculate'),\n@@ -795,7 +821,7 @@ def update_intersection(objects, commit=True, use_planned=True, Purpose=None, Da\n             if separate_proces:\n                 # create log file per dataproduct intersect\n                 # Depending on Log or ThreadedLog is used, init is different\n-                # TODO this needs to be (also) defined in the web service, and cleaned\n+                # TODO this needs to be (also) defined in the web service, and log-watched\n                 log_dir = 'intersect_logs'\n                 os.makedirs(log_dir, exist_ok=True)\n                 log_filename = os.path.join(log_dir, f'Intersect_{obj.__class__.__name__}_{obj.Header.ProductId.LimitedString}.log')\n@@ -815,21 +841,11 @@ def update_intersection(objects, commit=True, use_planned=True, Purpose=None, Da\n                 DataSetRelease = getattr(obj.Header, 'DataSetRelease')\n             for dpdIM in get_DpdIntersectionMaps(Purpose=Purpose, DataSetRelease=DataSetRelease):\n                 Message(f'found {dpdIM.__class__.__name__} with object_id {dpdIM.object_id.binary()}, ProductId {dpdIM.Header.ProductId.LimitedString}')\n-                if not dpdIM.Parameters or not dpdIM.Parameters.Parameter:\n-                    config_dpds = get_default_config()\n-                else:\n-                    try:\n-                        config_dpds = handle_dpd_params(dpdIM)\n-                    except Exception as e:\n-                        Message(f'ERROR; could not determine config from {dpdIM.__class__.__name__} with ProductId {dpdIM.Header.ProductId.LimitedString}: {e}')\n-                        continue\n-                if not config_dpds:\n-                    Message(f'No config found for {dpdIM.__class__.__name__} with ProductId {dpdIM.Header.ProductId.LimitedString}')\n-                config = {'dataproducts': config_dpds}\n-                config['commit'] = commit\n-                config['use_planned'] = use_planned\n-                config['healpix_order_ratio'] = healpix_order_ratio_default\n-                config['healpix_order_query'] = healpix_order_query_default\n+                try:\n+                    config = get_config(dpdIM, commit=commit, use_planned=use_planned)\n+                except ConfigException as e:\n+                    Message(f'Could not determine config for {dpdIM.__class__.__name__} with ProductId {dpdIM.Header.ProductId.LimitedString}; {e}')\n+                    continue\n                 #if obj.__class__.__name__ in all_dataproducts:\n                 if obj.__class__ in config['dataproducts']:\n                     update_intersection_obj(dpdIM, obj, config)\n",
                            "Merge branch 'wjv/bugfix/intersectionmap_added_method_get_config' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-07-10T13:25:42.000+00:00",
                            "93710c8381fdd9b9cf62acc57611c8c25a8aed6e"
                        ],
                        [
                            "@@ -246,6 +246,7 @@ def get_config(dpdIM, commit=True, use_planned=True):\n     config['healpix_order_query'] = healpix_order_query_default\n     return config\n \n+\n def get_default_dpd_config():\n     \"\"\" return default dataproduct config for the IntersectionMaps \"\"\"\n     config = {}\n",
                            "Merge branch 'assist/autoformat/wjv/bugfix/intersectionmap_added_method_get_config/e7cf1976' into 'wjv/bugfix/intersectionmap_added_method_get_config'",
                            "Willem-Jan Vriend",
                            "2023-07-10T13:07:42.000+00:00",
                            "be40299d3229deb20edd1b449ade592f33b848d8"
                        ],
                        [
                            "@@ -246,6 +246,7 @@ def get_config(dpdIM, commit=True, use_planned=True):\n     config['healpix_order_query'] = healpix_order_query_default\n     return config\n \n+\n def get_default_dpd_config():\n     \"\"\" return default dataproduct config for the IntersectionMaps \"\"\"\n     config = {}\n",
                            "Auto-format files with autopep8",
                            "CI Bot",
                            "2023-07-10T13:06:16.000+00:00",
                            "8e0e9fe7a55152a692d04bf2229d092c3783e1b1"
                        ],
                        [
                            "@@ -76,6 +76,7 @@ from common.config.Profile import profiles\n from common.database.Context import context\n from common.database.Database import database\n from common.database.support import viewname\n+from common.exceptions import ConfigurationError\n from common.log.Log import Log, log\n from common.log.Message import Message\n \n@@ -94,19 +95,23 @@ from euclid.dm_bindings import (\n from euclid.toolbox.XSDDic import XMLFactory\n from euclid.util.Healpix import convert_area_healpix, getids, getintersection # CONTAINS\n \n-# TODO; this only finds data products that do not have any reference in the DpdIntersectionMaps object\n-#       but it does not find data products that are partial intersected\n \n+class ConfigException(ConfigurationError):\n+    \"\"\" Exception raised in case of error in config \"\"\"\n+    pass\n \n+\n+# TODO; this only finds data products that do not have any reference in the DpdIntersectionMaps object\n+#       but it does not find data products that are partial intersected\n def get_missing_intersections(dpd, products=None):\n     \"\"\" return ProductId's that are not in the DpdIntersectionMaps \"\"\"\n     result = {}\n     if products is None:\n         #products = all_dataproducts\n-        products = get_default_config().keys()\n+        products = get_default_dpd_config().keys()\n     for product_class in products:\n-        Message(f'Query for missing {product} Intersections')\n-        result[product] = {}\n+        Message(f'Query for missing {product_class} Intersections')\n+        result[product_class] = {}\n         #product_class = dataproduct[product]\n         where = f'''WHERE t.\"Header\".\"ManualValidationStatus\" != 'INVALID'\n   AND t.\"Header\".\"Purpose\" = '{dpd.Header.Purpose}'\n@@ -123,17 +128,18 @@ MINUS\n SELECT DataProductId\n FROM AWOPER.Intersection\n WHERE MapKind = '{mapkind}'\n-  AND DataProductType = '{product.__class__.__name__}'\n+  AND DataProductType = '{product_class}'\n   AND MapOrigin = '{dpd.Header.ProductId.LimitedString}'\n '''\n-            result[product][mapkind] = database.execute_select(sql)\n-            if len(result[product][mapkind]) > 0:\n-                Message(f'Found {len(result[product][mapkind])} {mapkind} Intersections')\n+            result[product_class][mapkind] = database.execute_select(sql)\n+            if len(result[product_class][mapkind]) > 0:\n+                Message(f'Found {len(result[product_class][mapkind])} {mapkind} Intersections')\n     return result\n \n \n # TODO remove the xxx_dataproducts lists, these are now provided in the condig of the DpdIntersectionMaps\n #   class name                            footprint                  ObsId/TileIndex\n+'''\n observation_dataproducts = [\n     'DpdNispRawFrame',                  # Data.ImgSpatialFootprint   Data.ObservationSequence.ObservationId\n     'DpdNirCalibratedFrame',            # Data.ImgSpatialFootprint   Data.ObservationSequence.ObservationId\n@@ -161,6 +167,7 @@ tile_dataproducts = [\n # DpdExtValidatedSingleEpochFrame; add to TileToObservationsMap with Intersection.ObsId empty, for each tile with overlap (by sky query)\n ext_dataproducts = ['DpdExtValidatedSingleEpochFrame']\n all_dataproducts = observation_dataproducts + tile_dataproducts + ext_dataproducts\n+'''\n \n \n # The default ObservationMode or TileUseCase to use\n@@ -221,8 +228,26 @@ def parse_param(key, value):\n     return parsed_key, parsed_value\n \n \n-def get_default_config():\n-    \"\"\" return default config for the IntersectionMaps \"\"\"\n+def get_config(dpdIM, commit=True, use_planned=True):\n+    \"\"\" return the config dictionary \"\"\"\n+    config = {}\n+    if not dpdIM.Parameters or not dpdIM.Parameters.Parameter:\n+        config_dpds = get_default_dpd_config()\n+    else:\n+        try:\n+            config_dpds = handle_dpd_params(dpdIM)\n+        except Exception as e:\n+            Message(f'ERROR; could not determine config from {dpdIM.__class__.__name__} with ProductId {dpdIM.Header.ProductId.LimitedString}: {e}')\n+            raise ConfigException(str(e))\n+    config = {'dataproducts': config_dpds}\n+    config['commit'] = commit\n+    config['use_planned'] = use_planned\n+    config['healpix_order_ratio'] = healpix_order_ratio_default\n+    config['healpix_order_query'] = healpix_order_query_default\n+    return config\n+\n+def get_default_dpd_config():\n+    \"\"\" return default dataproduct config for the IntersectionMaps \"\"\"\n     config = {}\n     for key, value in [\n         ('DpdNispRawFrame'                , 'Data.ImgSpatialFootprint,obs,calculate'),\n@@ -795,7 +820,7 @@ def update_intersection(objects, commit=True, use_planned=True, Purpose=None, Da\n             if separate_proces:\n                 # create log file per dataproduct intersect\n                 # Depending on Log or ThreadedLog is used, init is different\n-                # TODO this needs to be (also) defined in the web service, and cleaned\n+                # TODO this needs to be (also) defined in the web service, and log-watched\n                 log_dir = 'intersect_logs'\n                 os.makedirs(log_dir, exist_ok=True)\n                 log_filename = os.path.join(log_dir, f'Intersect_{obj.__class__.__name__}_{obj.Header.ProductId.LimitedString}.log')\n@@ -815,21 +840,11 @@ def update_intersection(objects, commit=True, use_planned=True, Purpose=None, Da\n                 DataSetRelease = getattr(obj.Header, 'DataSetRelease')\n             for dpdIM in get_DpdIntersectionMaps(Purpose=Purpose, DataSetRelease=DataSetRelease):\n                 Message(f'found {dpdIM.__class__.__name__} with object_id {dpdIM.object_id.binary()}, ProductId {dpdIM.Header.ProductId.LimitedString}')\n-                if not dpdIM.Parameters or not dpdIM.Parameters.Parameter:\n-                    config_dpds = get_default_config()\n-                else:\n-                    try:\n-                        config_dpds = handle_dpd_params(dpdIM)\n-                    except Exception as e:\n-                        Message(f'ERROR; could not determine config from {dpdIM.__class__.__name__} with ProductId {dpdIM.Header.ProductId.LimitedString}: {e}')\n-                        continue\n-                if not config_dpds:\n-                    Message(f'No config found for {dpdIM.__class__.__name__} with ProductId {dpdIM.Header.ProductId.LimitedString}')\n-                config = {'dataproducts': config_dpds}\n-                config['commit'] = commit\n-                config['use_planned'] = use_planned\n-                config['healpix_order_ratio'] = healpix_order_ratio_default\n-                config['healpix_order_query'] = healpix_order_query_default\n+                try:\n+                    config = get_config(dpdIM, commit=commit, use_planned=use_planned)\n+                except ConfigException as e:\n+                    Message(f'Could not determine config for {dpdIM.__class__.__name__} with ProductId {dpdIM.Header.ProductId.LimitedString}; {e}')\n+                    continue\n                 #if obj.__class__.__name__ in all_dataproducts:\n                 if obj.__class__ in config['dataproducts']:\n                     update_intersection_obj(dpdIM, obj, config)\n",
                            "added method get_config() for generating the config dictionary",
                            "Willem-Jan Vriend",
                            "2023-07-10T15:03:07.000+02:00",
                            "ed028a09c0f160b903c8b3f601804249ad14bcd4"
                        ]
                    ],
                    "toolbox/XSDDic.py": [
                        [
                            "@@ -1794,7 +1794,7 @@ class XMLFactory:\n                 obj.__setattr__(i, tmp_obj)\n         return obj\n \n-    def xml2obj(self, inp_file, commit=False, true_name=False, validate_full=True):\n+    def xml2obj(self, inp_file, commit=False, true_name=False, validate_full=False):\n         if not os.path.exists(inp_file):\n             raise XSDError(\"No file %s\" % inp_file)\n         if validate_full:\n",
                            "Merge branch 'belikov/hotfix/donotfullyvalidate' into 'develop'",
                            "Danny Boxhoorn",
                            "2023-06-27T13:47:03.000+00:00",
                            "3d957348cc0644fbffcc485c56bd8db4a61d8a6e"
                        ],
                        [
                            "@@ -1,4 +1,5 @@\n import os, fnmatch, datetime, copy, math\n+from lxml import etree\n from functools import lru_cache\n \n from common.log.Message import Message, DEBUG\n@@ -723,16 +724,23 @@ class XMLFactoryLoad:\n         self.namespaces_dict = {}\n         self.types = {}\n         self.parser = Xml2Object()\n+        self.xsds = {}\n         if not os.path.exists(schema_root_path):\n             raise XSDError(\"There is no such directory: %s\" % schema_root_path)\n \n         xsd_package_count = 0\n         for root, directories, files in os.walk(schema_root_path):\n             for filename in fnmatch.filter(files, 'euc-*.xsd'):\n-                tmp_r = self.parser.Parse(root + \"/\" + filename)\n+                xsd_path = os.path.join(root, filename)\n+                tmp_r = self.parser.Parse(xsd_path)\n                 tmp_p = XSDPackage(tmp_r)\n                 self.packages_array.append(tmp_p)\n                 xsd_package_count = xsd_package_count + 1\n+                xmlschema_doc = etree.parse(open(xsd_path))\n+                namespace = tmp_p.target\n+                if namespace in self.xsds:\n+                    raise XSDError(f'Duplicated namespace {namespace}')\n+                self.xsds[namespace] = etree.XMLSchema(xmlschema_doc)\n         if (xsd_package_count == 0):\n             raise XSDError(\"There are no XSD packages in directory: %s\" % schema_root_path)\n \n@@ -932,6 +940,7 @@ class XMLFactory:\n         self.obj_commit = []\n         self.tmp_namespaces = []\n         self.tmp_names = []\n+        self.xsds = {}\n \n         if InputSchema and isinstance(InputSchema, XMLFactoryLoad):\n             self.packages_array = copy.deepcopy(InputSchema.packages_array)\n@@ -946,10 +955,16 @@ class XMLFactory:\n         xsd_package_count = 0\n         for root, directories, files in os.walk(schema_root_path):\n             for filename in fnmatch.filter(files, 'euc-*.xsd'):\n-                tmp_r = self.parser.Parse(root + \"/\" + filename)\n+                xsd_path = os.path.join(root, filename)\n+                tmp_r = self.parser.Parse(xsd_path)\n                 tmp_p = XSDPackage(tmp_r)\n                 self.packages_array.append(tmp_p)\n                 xsd_package_count = xsd_package_count + 1\n+                xmlschema_doc = etree.parse(open(xsd_path))\n+                namespace = tmp_p.target\n+                if namespace in self.xsds:\n+                    raise XSDError(f'Duplicated namespace {namespace}')\n+                self.xsds[namespace] = etree.XMLSchema(xmlschema_doc)\n         if (xsd_package_count == 0):\n             raise XSDError(\"There are no XSD packages in directory: %s\" % schema_root_path)\n \n@@ -1271,6 +1286,19 @@ class XMLFactory:\n         else:\n             return \"Not an element\"\n \n+    def validate_full(self, inp_file):\n+        xml_doc = etree.parse(open(inp_file))\n+        xml_doc_root = xml_doc.getroot()\n+        prefix = xml_doc_root.prefix\n+        namespace = xml_doc_root.nsmap[prefix]\n+        if namespace in self.xsds:\n+            valid = self.xsds[namespace].validate(xml_doc)\n+            if not valid:\n+                return False, f'{self.xsds[namespace].error_log.last_error}'\n+        else:\n+            return False, f'no such namespace {namespace}'\n+        return True, ''\n+\n     def pre_check(self, inp_name, inp_obj):\n         obj_val = inp_obj.cdata\n         q = (precheckmap[inp_name] == obj_val)\n@@ -1766,9 +1794,13 @@ class XMLFactory:\n                 obj.__setattr__(i, tmp_obj)\n         return obj\n \n-    def xml2obj(self, inp_file, commit=False, true_name=False):\n+    def xml2obj(self, inp_file, commit=False, true_name=False, validate_full=True):\n         if not os.path.exists(inp_file):\n             raise XSDError(\"No file %s\" % inp_file)\n+        if validate_full:\n+            valid, error = self.validate_full(inp_file)\n+            if not valid:\n+                raise XSDError(error)\n         obj = None\n         tmp_el = self.parser.Parse(inp_file)\n #          print('XSD commit:',commit)\n",
                            "Merge branch 'belikov/feature/validatexml' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-06-21T07:26:36.000+00:00",
                            "b3a2d85746a60b02675f5c48bab912f7845c0e47"
                        ]
                    ],
                    "conda-recipe/meta.yaml": [
                        [
                            "@@ -37,7 +37,7 @@ requirements:\n     - lxml\n     - networkx 2.*\n     - healpy\n-    - shapely\n+    - shapely 2.*\n     - click\n     - attrs\n     - gitpython 3.*\n",
                            "Merge branch 'drb/bugfix/existing-shapely-not-updated' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-06-27T13:00:05.000+00:00",
                            "f2791b06fdaeccd9bcc151bc959c4531710c93ac"
                        ]
                    ],
                    "services/intersect/Intersect.py": [
                        [
                            "@@ -84,6 +84,8 @@ class Intersect(RestGeneric):\n         return p_i\n \n     def getHealpixFromFile(self, class_name, dpd_id):\n+        out_oid = ''\n+        out_ret = []\n         ret = []\n         file_path = None\n         if len(dpd_id) < 6:\n@@ -98,28 +100,56 @@ class Intersect(RestGeneric):\n         if os.path.isfile(file_path):\n             with open(file_path, 'rb') as f:\n                 ret = pickle.load(f)\n+            if len(ret) > 0:\n+                out_oid = ret[0]\n+                out_ret = ret[1]\n         else:\n             input_obj = dataproduct[class_name].Header.ProductId.LimitedString == dpd_id\n             Message(class_name)\n             Message(dpd_id)\n             Message(len(input_obj))\n             if len(input_obj) > 0:\n-                ret = get_obj_healpix(input_obj[0], order=13)\n-                if len(ret) > 0:\n+                out_oid = input_obj[0].object_id.unquote()\n+                out_ret = get_obj_healpix(input_obj[0], order=13)\n+                if len(out_ret) > 0:\n+                    out_ret = [int(k) for k in out_ret]\n+                    dump_out = [out_oid, out_ret]\n                     with open(file_path, 'wb') as f:\n-                        pickle.dump(ret, f, pickle.HIGHEST_PROTOCOL)\n-        if len(ret) > 0:\n-            ret = [int(k) for k in ret]\n+                        pickle.dump(dump_out, f, pickle.HIGHEST_PROTOCOL)\n+        return out_oid, out_ret\n+\n+    def prepareResult(self, class_name, p1, p2, reverse, data_product_ids, healpix_array_13, ret):\n+        \"\"\" prepare result \"\"\"\n+        total_healpixes = []\n+        num_inp = float(len(healpix_array_13))\n+        for dpd_id in data_product_ids:\n+            obj_id, hpx = self.getHealpixFromFile(class_name, dpd_id)\n+            num_hpx = len(hpx)\n+            total_healpixes.extend(hpx)\n+            inter_area = getintersection(hpx, healpix_array_13)\n+            num_int = float(len(inter_area))\n+            p_i = self.get_p_i(num_int, num_inp, num_hpx, reverse)\n+            if p1 and p2:\n+                if p1 <= p_i and p2 >= p_i:\n+                    ret[class_name][dpd_id] = p_i\n+                    ret['convert_ids'][dpd_id] = obj_id\n+            else:\n+                ret[class_name][dpd_id] = p_i\n+                ret['convert_ids'][dpd_id] = obj_id\n+        inter_area_all = getintersection(total_healpixes, healpix_array_13)\n+        ret['total'][class_name] = float(len(inter_area_all)) / num_inp\n         return ret\n \n     def getHealpixNew(self, input_area, class_name, p1, p2, reverse):\n         \"\"\" get healpix from scratch \"\"\"\n         ret = {}\n         ret[class_name] = {}\n+        ret['convert_ids'] = {}\n         data_product_ids = []\n         healpix_array_5 = convert_area_healpix(input_area, order=5)\n         healpix_array_13 = convert_area_healpix(input_area, order=13)\n-        num_inp = float(len(healpix_array_13))\n+        healpix_array_5 = [int(k) for k in healpix_array_5]\n+        healpix_array_13 = [int(k) for k in healpix_array_13]\n         num_hpx = 0\n         cursor = database.cursor()\n         if 'database_arraysize' in Env:\n@@ -128,67 +158,42 @@ class Intersect(RestGeneric):\n             cursor.arraysize = 100000\n         data_product_ids = getids(cursor, class_name, healpix_array_5, data_product_ids)\n         cursor.close()\n-        total_healpixes = []\n-        for dpd_id in data_product_ids:\n-            hpx = self.getHealpixFromFile(class_name, dpd_id)\n-            num_hpx = len(hpx)\n-            total_healpixes.extend(hpx)\n-            inter_area = getintersection(hpx, healpix_array_13)\n-            num_int = float(len(inter_area))\n-            p_i = self.get_p_i(num_int, num_inp, num_hpx, reverse)\n-            if p1 and p2:\n-                if p1 <= p_i and p2 >= p_i:\n-                    ret[class_name][dpd_id] = p_i\n-            else:\n-                ret[class_name][dpd_id] = p_i\n-        inter_area_all = getintersection(total_healpixes, healpix_array_13)\n         ret['total'] = {}\n-        ret['total'][class_name] = float(len(inter_area_all)) / num_inp\n+        ret = self.prepareResult(class_name, p1, p2, reverse, data_product_ids, healpix_array_13, ret)\n         return ret\n \n     def getHealpixWith5(self, input_area, p1, p2, input_array, reverse, area_healpix):\n         \"\"\" get healpix from scratch \"\"\"\n         ret = {}\n+        ret['convert_ids'] = {}\n         healpix_array_13 = []\n         if area_healpix:\n             healpix_array_13 = input_area\n         else:\n             healpix_array_13 = convert_area_healpix(input_area, order=13)\n+        healpix_array_13 = [int(k) for k in healpix_array_13]\n         num_inp = float(len(healpix_array_13))\n         num_hpx = 0\n-        total_healpixes = []\n         for class_name in input_array:\n             ret[class_name] = {}\n             ret['total'] = {}\n-            total_healpixes = []\n-            for dpd_id in input_array[class_name]:\n-                hpx = self.getHealpixFromFile(class_name, dpd_id)\n-                num_hpx = len(hpx)\n-                total_healpixes.extend(hpx)\n-                inter_area = getintersection(hpx, healpix_array_13)\n-                num_int = float(len(inter_area))\n-                p_i = self.get_p_i(num_int, num_inp, num_hpx, reverse)\n-                if p1 and p2:\n-                    if p1 <= p_i and p2 >= p_i:\n-                        ret[class_name][dpd_id] = p_i\n-                else:\n-                    ret[class_name][dpd_id] = p_i\n-            inter_area_all = getintersection(total_healpixes, healpix_array_13)\n-            ret['total'][class_name] = float(len(inter_area_all)) / num_inp\n+            ret = self.prepareResult(class_name, p1, p2, reverse, input_array[class_name], healpix_array_13, ret)\n         return ret\n \n     def getHealpixWithDataProduct(self, input_array):\n         \"\"\" get healpix from scratch \"\"\"\n         ret = {}\n+        ret['convert_ids'] = {}\n         total_healpixes = []\n         for class_name in input_array:\n             ret[class_name] = {}\n             ret['total'] = {}\n             total_healpixes = []\n             for dpd_id in input_array[class_name]:\n-                hpx = self.getHealpixFromFile(class_name, dpd_id)\n+                obj_id, hpx = self.getHealpixFromFile(class_name, dpd_id)\n                 total_healpixes.extend(hpx)\n                 ret[class_name][dpd_id] = hpx\n+                ret['convert_ids'][dpd_id] = obj_id\n             ret['total'][class_name] = total_healpixes\n         return ret\n \n",
                            "Merge branch 'belikov/feature/intersect' into 'develop'",
                            "Willem-Jan Vriend",
                            "2023-06-21T07:25:53.000+00:00",
                            "9bb20e9cd17825bfe31766b8f073dbcf168a8ddc"
                        ]
                    ]
                },
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": [
                    {
                        "name": "0.9.9",
                        "created_at": "2023-06-13T18:04:52.000+00:00",
                        "author_name": "Danny Boxhoorn"
                    },
                    {
                        "name": "1.0.0",
                        "created_at": "2023-07-27T10:20:01.000+00:00",
                        "author_name": "Danny Boxhoorn"
                    }
                ]
            },
            "ST-EAS/ST_EASDSS": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EASCommon": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            },
            "ST-EAS/ST_EASTestCatalog": {
                "start date": "-",
                "end date": "-",
                "start tag": "",
                "end tag": "",
                "count_files_modified": "0",
                "modifications_by_file": {},
                "selected_modifications": {},
                "count_selected_modifications": "0",
                "tags_in_period": []
            }
        }
    }
}